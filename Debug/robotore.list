
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08012250  08012250  00022250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ba0  08012ba0  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08012ba0  08012ba0  00022ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ba8  08012ba8  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ba8  08012ba8  00022ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bac  08012bac  00022bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012bb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d528  20000218  08012dc8  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001d740  08012dc8  0003d740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023395  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000499c  00000000  00000000  000535dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  00057f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001850  00000000  00000000  000599c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005b210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001759f  00000000  00000000  0007fc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb84f  00000000  00000000  00097239  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008380  00000000  00000000  00162b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012238 	.word	0x08012238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012238 	.word	0x08012238

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static uint16_t i_clear_flag;
static float Angle_diff;

static float Angle_control_term;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 8000, ki = 80000, kd = 0.0;
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc63 	bl	800186c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]
	float variable_Angle = getOutput_angularvelocity();
 8000faa:	f003 fb19 	bl	80045e0 <getOutput_angularvelocity>
 8000fae:	ed87 0a02 	vstr	s0, [r7, #8]
	//float variable_Angle = 0;

	if(Angle_control_enable_flag == 1){
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d16f      	bne.n	800109a <calculateAngleControlFlip+0x112>
		if(i_clear_flag == 1){
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <calculateAngleControlFlip+0x48>
			i = 0;
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
		}

		diff = variable_Angle - current_Angle;
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fe0:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff2:	edc7 7a01 	vstr	s15, [r7, #4]
		i += ki * diff * DELTA_T; //I制御
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff faa4 	bl	8000548 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	ed97 7a06 	vldr	s14, [r7, #24]
 8001008:	edd7 7a04 	vldr	s15, [r7, #16]
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	ee17 0a90 	vmov	r0, s15
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	a323      	add	r3, pc, #140	; (adr r3, 80010a8 <calculateAngleControlFlip+0x120>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faeb 	bl	80005f8 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f92f 	bl	800028c <__adddf3>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	4618      	mov	r0, r3
 8001034:	4621      	mov	r1, r4
 8001036:	f7ff fdd7 	bl	8000be8 <__aeabi_d2f>
 800103a:	4602      	mov	r2, r0
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <calculateAngleControlFlip+0x140>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ed97 7a04 	vldr	s14, [r7, #16]
 800104a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_f2d>
 800105e:	a312      	add	r3, pc, #72	; (adr r3, 80010a8 <calculateAngleControlFlip+0x120>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4618      	mov	r0, r3
 800106e:	4621      	mov	r1, r4
 8001070:	f7ff fdba 	bl	8000be8 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	603b      	str	r3, [r7, #0]

		Angle_control_term = p + i + d;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001086:	edd7 7a00 	vldr	s15, [r7]
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <calculateAngleControlFlip+0x144>)
 8001090:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <calculateAngleControlFlip+0x140>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6013      	str	r3, [r2, #0]
	}
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010ac:	3f50624d 	.word	0x3f50624d
 80010b0:	45fa0000 	.word	0x45fa0000
 80010b4:	479c4000 	.word	0x479c4000
 80010b8:	20000234 	.word	0x20000234
 80010bc:	20000236 	.word	0x20000236
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000238 	.word	0x20000238
 80010c8:	20000244 	.word	0x20000244
 80010cc:	2000023c 	.word	0x2000023c

080010d0 <getAngleControlTerm>:

float getAngleControlTerm(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return Angle_control_term;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <getAngleControlTerm+0x18>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
}
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	2000023c 	.word	0x2000023c

080010ec <startAngleControl>:

void startAngleControl(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	Angle_control_enable_flag = 1;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <startAngleControl+0x1c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	801a      	strh	r2, [r3, #0]
	i_clear_flag = 1;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <startAngleControl+0x20>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	801a      	strh	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000234 	.word	0x20000234
 800110c:	20000236 	.word	0x20000236

08001110 <stopAngleControl>:

void stopAngleControl(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	Angle_control_enable_flag = 0;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <stopAngleControl+0x14>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000234 	.word	0x20000234

08001128 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 800112c:	213c      	movs	r1, #60	; 0x3c
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <initEncoder+0x28>)
 8001130:	f009 fac8 	bl	800a6c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8001134:	213c      	movs	r1, #60	; 0x3c
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <initEncoder+0x2c>)
 8001138:	f009 fac4 	bl	800a6c4 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <initEncoder+0x30>)
 800113e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <initEncoder+0x34>)
 8001146:	f242 7210 	movw	r2, #10000	; 0x2710
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2001d2f8 	.word	0x2001d2f8
 8001154:	2001d2b8 	.word	0x2001d2b8
 8001158:	40000400 	.word	0x40000400
 800115c:	40000800 	.word	0x40000800

08001160 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001160:	b598      	push	{r3, r4, r7, lr}
 8001162:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <updateEncoderCnt+0x178>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	b29b      	uxth	r3, r3
 800116a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800116e:	3b10      	subs	r3, #16
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <updateEncoderCnt+0x17c>)
 8001176:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <updateEncoderCnt+0x180>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	b29b      	uxth	r3, r3
 800117e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001182:	3310      	adds	r3, #16
 8001184:	b29b      	uxth	r3, r3
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <updateEncoderCnt+0x184>)
 800118a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <updateEncoderCnt+0x188>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <updateEncoderCnt+0x17c>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <updateEncoderCnt+0x188>)
 80011a4:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <updateEncoderCnt+0x18c>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <updateEncoderCnt+0x184>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <updateEncoderCnt+0x18c>)
 80011be:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <updateEncoderCnt+0x17c>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <updateEncoderCnt+0x184>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	4413      	add	r3, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9a7 	bl	8000524 <__aeabi_i2d>
 80011d6:	a33e      	add	r3, pc, #248	; (adr r3, 80012d0 <updateEncoderCnt+0x170>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa0c 	bl	80005f8 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4618      	mov	r0, r3
 80011e6:	4621      	mov	r1, r4
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f0:	f7ff fb2c 	bl	800084c <__aeabi_ddiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4618      	mov	r0, r3
 80011fa:	4621      	mov	r1, r4
 80011fc:	f7ff fcf4 	bl	8000be8 <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <updateEncoderCnt+0x190>)
 8001204:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <updateEncoderCnt+0x194>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <updateEncoderCnt+0x190>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <updateEncoderCnt+0x194>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
	VLT_distance_10mm += distance_1ms;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <updateEncoderCnt+0x198>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <updateEncoderCnt+0x190>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <updateEncoderCnt+0x198>)
 800122e:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <updateEncoderCnt+0x19c>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <updateEncoderCnt+0x190>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <updateEncoderCnt+0x19c>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <updateEncoderCnt+0x1a0>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <updateEncoderCnt+0x190>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <updateEncoderCnt+0x1a0>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <updateEncoderCnt+0x1a4>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <updateEncoderCnt+0x190>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <updateEncoderCnt+0x1a4>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <updateEncoderCnt+0x1a8>)
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <updateEncoderCnt+0x190>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <updateEncoderCnt+0x1a8>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <updateEncoderCnt+0x1ac>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <updateEncoderCnt+0x190>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <updateEncoderCnt+0x1ac>)
 800129c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <updateEncoderCnt+0x1b0>)
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <updateEncoderCnt+0x190>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <updateEncoderCnt+0x1b0>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <updateEncoderCnt+0x178>)
 80012b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <updateEncoderCnt+0x180>)
 80012c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012c6:	bf00      	nop
 80012c8:	bd98      	pop	{r3, r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	2df331e5 	.word	0x2df331e5
 80012d4:	3f878fcc 	.word	0x3f878fcc
 80012d8:	40000400 	.word	0x40000400
 80012dc:	20000248 	.word	0x20000248
 80012e0:	40000800 	.word	0x40000800
 80012e4:	2000024a 	.word	0x2000024a
 80012e8:	2000024c 	.word	0x2000024c
 80012ec:	2000024e 	.word	0x2000024e
 80012f0:	20000250 	.word	0x20000250
 80012f4:	20000254 	.word	0x20000254
 80012f8:	20000258 	.word	0x20000258
 80012fc:	2000025c 	.word	0x2000025c
 8001300:	20000260 	.word	0x20000260
 8001304:	20000264 	.word	0x20000264
 8001308:	20000268 	.word	0x20000268
 800130c:	2000026c 	.word	0x2000026c
 8001310:	20000270 	.word	0x20000270

08001314 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <getEncoderCnt+0x2c>)
 8001320:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <getEncoderCnt+0x30>)
 800132a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	801a      	strh	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000248 	.word	0x20000248
 8001344:	2000024a 	.word	0x2000024a

08001348 <getTotalDistance>:

float getTotalDistance(){
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return total_distance;
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <getTotalDistance+0x18>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	ee07 3a90 	vmov	s15, r3
}
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000260 	.word	0x20000260

08001364 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <getGoalJudgeDistance+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000264 	.word	0x20000264

08001380 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <getSideLineJudgeDistance+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000268 	.word	0x20000268

0800139c <getCrossLineIgnoreDistance>:
{
	total_distance = distance;
}

float getCrossLineIgnoreDistance(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <getCrossLineIgnoreDistance+0x18>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	ee07 3a90 	vmov	s15, r3
}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	2000026c 	.word	0x2000026c

080013b8 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	total_distance = 0;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <clearTotalDistance+0x18>)
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000260 	.word	0x20000260

080013d4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <clearGoalJudgeDistance+0x18>)
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000264 	.word	0x20000264

080013f0 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <clearSideLineJudgeDistance+0x18>)
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000268 	.word	0x20000268

0800140c <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <clearCrossLineIgnoreDistance+0x18>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000026c 	.word	0x2000026c

08001428 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <clearSideLineIgnoreDistance+0x18>)
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000270 	.word	0x20000270

08001444 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <getDistance10mm+0x18>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	ee07 3a90 	vmov	s15, r3
}
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	20000254 	.word	0x20000254

08001460 <clearDistance10mm>:

void clearDistance10mm(void){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <clearDistance10mm+0x18>)
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000254 	.word	0x20000254

0800147c <getVLT_Distance10mm>:

float getVLT_Distance10mm(void){
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	return VLT_distance_10mm;
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <getVLT_Distance10mm+0x18>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	ee07 3a90 	vmov	s15, r3
}
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20000258 	.word	0x20000258

08001498 <clearVLT_Distance10mm>:

void clearVLT_Distance10mm(void){
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	VLT_distance_10mm = 0;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <clearVLT_Distance10mm+0x18>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000258 	.word	0x20000258
 80014b4:	00000000 	.word	0x00000000

080014b8 <getspeedcount>:

float getspeedcount(void){
 80014b8:	b598      	push	{r3, r4, r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <getspeedcount+0x60>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	db16      	blt.n	80014fe <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <getspeedcount+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	a30d      	add	r3, pc, #52	; (adr r3, 8001510 <getspeedcount+0x58>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7fe fed4 	bl	800028c <__adddf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4618      	mov	r0, r3
 80014ea:	4621      	mov	r1, r4
 80014ec:	f7ff fb7c 	bl	8000be8 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <getspeedcount+0x64>)
 80014f4:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <getspeedcount+0x60>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <getspeedcount+0x64>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	ee07 3a90 	vmov	s15, r3
}
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	bd98      	pop	{r3, r4, r7, pc}
 800150c:	f3af 8000 	nop.w
 8001510:	9999999a 	.word	0x9999999a
 8001514:	3fb99999 	.word	0x3fb99999
 8001518:	2000025c 	.word	0x2000025c
 800151c:	20000274 	.word	0x20000274

08001520 <clearspeedcount>:

void clearspeedcount(void){
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <clearspeedcount+0x14>)
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <clearspeedcount+0x18>)
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000274 	.word	0x20000274
 8001538:	3dcccccd 	.word	0x3dcccccd

0800153c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <FLASH_Unlock+0x1c>)
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <FLASH_Unlock+0x20>)
 8001544:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <FLASH_Unlock+0x1c>)
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <FLASH_Unlock+0x24>)
 800154a:	605a      	str	r2, [r3, #4]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00
 800155c:	45670123 	.word	0x45670123
 8001560:	cdef89ab 	.word	0xcdef89ab

08001564 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <FLASH_Lock+0x1c>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <FLASH_Lock+0x1c>)
 800156e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001572:	6113      	str	r3, [r2, #16]

}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001588:	bf00      	nop
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <FLASH_WaitBusy+0x1c>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <FLASH_WaitBusy+0x6>
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80015ae:	f007 f8c1 	bl	8008734 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 80015be:	2302      	movs	r3, #2
 80015c0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f007 f977 	bl	80088c4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015d6:	f007 f8cf 	bl	8008778 <HAL_FLASH_Lock>
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80015f0:	f7ff ffa4 	bl	800153c <FLASH_Unlock>

	FLASH_WaitBusy();
 80015f4:	f7ff ffc6 	bl	8001584 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <FLASH_Write_Word_F+0x50>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <FLASH_Write_Word_F+0x50>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001602:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <FLASH_Write_Word_F+0x50>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <FLASH_Write_Word_F+0x50>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 8001616:	f7ff ffb5 	bl	8001584 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <FLASH_Write_Word_F+0x50>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <FLASH_Write_Word_F+0x50>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001626:	f7ff ff9d 	bl	8001564 <FLASH_Lock>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00

08001638 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800163e:	f002 f80f 	bl	8003660 <IMU_init>
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800164a:	f005 ffdd 	bl	8007608 <HAL_Delay>

	return who_i_am;
 800164e:	79fb      	ldrb	r3, [r7, #7]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <updateIMUValue>:

void updateIMUValue(){
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800165e:	f002 f823 	bl	80036a8 <read_gyro_data>
	zg_ = zg;
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <updateIMUValue+0x188>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <updateIMUValue+0x18c>)
 800166a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800166c:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <updateIMUValue+0x188>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff56 	bl	8000524 <__aeabi_i2d>
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
 800167c:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <updateIMUValue+0x190>)
 800167e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff4e 	bl	8000524 <__aeabi_i2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	f7fe ffb2 	bl	80005f8 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7fe fdf6 	bl	800028c <__adddf3>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f7ff fa56 	bl	8000b58 <__aeabi_d2iz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <updateIMUValue+0x18c>)
 80016b2:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 80016b4:	4b4b      	ldr	r3, [pc, #300]	; (80017e4 <updateIMUValue+0x18c>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <updateIMUValue+0x194>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 3a90 	vmov	r3, s15
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <updateIMUValue+0x18c>)
 80016d8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <updateIMUValue+0x18c>)
 80016dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <updateIMUValue+0x190>)
 80016e2:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <updateIMUValue+0x18c>)
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	a332      	add	r3, pc, #200	; (adr r3, 80017c8 <updateIMUValue+0x170>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7ff f8a3 	bl	800084c <__aeabi_ddiv>
 8001706:	4603      	mov	r3, r0
 8001708:	460c      	mov	r4, r1
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	a330      	add	r3, pc, #192	; (adr r3, 80017d0 <updateIMUValue+0x178>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff70 	bl	80005f8 <__aeabi_dmul>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	4618      	mov	r0, r3
 800171e:	4621      	mov	r1, r4
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <updateIMUValue+0x198>)
 8001726:	f7ff f891 	bl	800084c <__aeabi_ddiv>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	4618      	mov	r0, r3
 8001730:	4621      	mov	r1, r4
 8001732:	f7ff fa59 	bl	8000be8 <__aeabi_d2f>
 8001736:	4602      	mov	r2, r0
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <updateIMUValue+0x19c>)
 800173a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <updateIMUValue+0x1a0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff01 	bl	8000548 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <updateIMUValue+0x19c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fefa 	bl	8000548 <__aeabi_f2d>
 8001754:	a320      	add	r3, pc, #128	; (adr r3, 80017d8 <updateIMUValue+0x180>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff4d 	bl	80005f8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd91 	bl	800028c <__adddf3>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	f7ff fa39 	bl	8000be8 <__aeabi_d2f>
 8001776:	4602      	mov	r2, r0
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <updateIMUValue+0x1a0>)
 800177a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <updateIMUValue+0x1a4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fee1 	bl	8000548 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <updateIMUValue+0x19c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feda 	bl	8000548 <__aeabi_f2d>
 8001794:	a310      	add	r3, pc, #64	; (adr r3, 80017d8 <updateIMUValue+0x180>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff2d 	bl	80005f8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fd71 	bl	800028c <__adddf3>
 80017aa:	4603      	mov	r3, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	f7ff fa19 	bl	8000be8 <__aeabi_d2f>
 80017b6:	4602      	mov	r2, r0
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <updateIMUValue+0x1a4>)
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdb0      	pop	{r4, r5, r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	66666666 	.word	0x66666666
 80017cc:	40306666 	.word	0x40306666
 80017d0:	54411744 	.word	0x54411744
 80017d4:	400921fb 	.word	0x400921fb
 80017d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017dc:	3f50624d 	.word	0x3f50624d
 80017e0:	2001d418 	.word	0x2001d418
 80017e4:	2001d338 	.word	0x2001d338
 80017e8:	2000027c 	.word	0x2000027c
 80017ec:	20000278 	.word	0x20000278
 80017f0:	40668000 	.word	0x40668000
 80017f4:	2001d348 	.word	0x2001d348
 80017f8:	2001d340 	.word	0x2001d340
 80017fc:	2001d344 	.word	0x2001d344

08001800 <IMU_average>:

void IMU_average(){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	float average = 0;
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= 1000; i++){
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	e015      	b.n	800183e <IMU_average+0x3e>
		average = average+zg;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <IMU_average+0x60>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	b21b      	sxth	r3, r3
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	ed97 7a01 	vldr	s14, [r7, #4]
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f005 feeb 	bl	8007608 <HAL_Delay>
		setLED2('A');
 8001832:	2041      	movs	r0, #65	; 0x41
 8001834:	f000 f920 	bl	8001a78 <setLED2>
	for(int i = 0; i <= 1000; i++){
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001844:	dde5      	ble.n	8001812 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001846:	ed97 7a01 	vldr	s14, [r7, #4]
 800184a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001864 <IMU_average+0x64>
 800184e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <IMU_average+0x68>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2001d418 	.word	0x2001d418
 8001864:	447a0000 	.word	0x447a0000
 8001868:	20000278 	.word	0x20000278

0800186c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <getTheta10mm+0x18>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	ee07 3a90 	vmov	s15, r3
}
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	2001d340 	.word	0x2001d340

08001888 <clearTheta10mm>:

void clearTheta10mm()
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <clearTheta10mm+0x18>)
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2001d340 	.word	0x2001d340

080018a4 <getaddTheta>:

float getaddTheta()
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	return add_theta;
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <getaddTheta+0x18>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	ee07 3a90 	vmov	s15, r3
}
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	2001d344 	.word	0x2001d344

080018c0 <clearaddTheta>:

void clearaddTheta()
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	add_theta = 0;
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <clearaddTheta+0x18>)
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2001d344 	.word	0x2001d344

080018dc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b52      	cmp	r3, #82	; 0x52
 80018ea:	d112      	bne.n	8001912 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f2:	4860      	ldr	r0, [pc, #384]	; (8001a74 <setLED+0x198>)
 80018f4:	f007 faba 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	485d      	ldr	r0, [pc, #372]	; (8001a74 <setLED+0x198>)
 8001900:	f007 fab4 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800190a:	485a      	ldr	r0, [pc, #360]	; (8001a74 <setLED+0x198>)
 800190c:	f007 faae 	bl	8008e6c <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8001910:	e0ab      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'G'){
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b47      	cmp	r3, #71	; 0x47
 8001916:	d112      	bne.n	800193e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191e:	4855      	ldr	r0, [pc, #340]	; (8001a74 <setLED+0x198>)
 8001920:	f007 faa4 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192a:	4852      	ldr	r0, [pc, #328]	; (8001a74 <setLED+0x198>)
 800192c:	f007 fa9e 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001936:	484f      	ldr	r0, [pc, #316]	; (8001a74 <setLED+0x198>)
 8001938:	f007 fa98 	bl	8008e6c <HAL_GPIO_WritePin>
}
 800193c:	e095      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'B'){
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b42      	cmp	r3, #66	; 0x42
 8001942:	d112      	bne.n	800196a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	484a      	ldr	r0, [pc, #296]	; (8001a74 <setLED+0x198>)
 800194c:	f007 fa8e 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001956:	4847      	ldr	r0, [pc, #284]	; (8001a74 <setLED+0x198>)
 8001958:	f007 fa88 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001962:	4844      	ldr	r0, [pc, #272]	; (8001a74 <setLED+0x198>)
 8001964:	f007 fa82 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001968:	e07f      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'M'){
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b4d      	cmp	r3, #77	; 0x4d
 800196e:	d112      	bne.n	8001996 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001976:	483f      	ldr	r0, [pc, #252]	; (8001a74 <setLED+0x198>)
 8001978:	f007 fa78 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001982:	483c      	ldr	r0, [pc, #240]	; (8001a74 <setLED+0x198>)
 8001984:	f007 fa72 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	4839      	ldr	r0, [pc, #228]	; (8001a74 <setLED+0x198>)
 8001990:	f007 fa6c 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001994:	e069      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'Y'){
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b59      	cmp	r3, #89	; 0x59
 800199a:	d112      	bne.n	80019c2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a2:	4834      	ldr	r0, [pc, #208]	; (8001a74 <setLED+0x198>)
 80019a4:	f007 fa62 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ae:	4831      	ldr	r0, [pc, #196]	; (8001a74 <setLED+0x198>)
 80019b0:	f007 fa5c 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ba:	482e      	ldr	r0, [pc, #184]	; (8001a74 <setLED+0x198>)
 80019bc:	f007 fa56 	bl	8008e6c <HAL_GPIO_WritePin>
}
 80019c0:	e053      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'C'){
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b43      	cmp	r3, #67	; 0x43
 80019c6:	d112      	bne.n	80019ee <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ce:	4829      	ldr	r0, [pc, #164]	; (8001a74 <setLED+0x198>)
 80019d0:	f007 fa4c 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019da:	4826      	ldr	r0, [pc, #152]	; (8001a74 <setLED+0x198>)
 80019dc:	f007 fa46 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e6:	4823      	ldr	r0, [pc, #140]	; (8001a74 <setLED+0x198>)
 80019e8:	f007 fa40 	bl	8008e6c <HAL_GPIO_WritePin>
}
 80019ec:	e03d      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'W'){
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b57      	cmp	r3, #87	; 0x57
 80019f2:	d112      	bne.n	8001a1a <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fa:	481e      	ldr	r0, [pc, #120]	; (8001a74 <setLED+0x198>)
 80019fc:	f007 fa36 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <setLED+0x198>)
 8001a08:	f007 fa30 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a12:	4818      	ldr	r0, [pc, #96]	; (8001a74 <setLED+0x198>)
 8001a14:	f007 fa2a 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001a18:	e027      	b.n	8001a6a <setLED+0x18e>
	else if(color == 'N'){
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b4e      	cmp	r3, #78	; 0x4e
 8001a1e:	d112      	bne.n	8001a46 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a26:	4813      	ldr	r0, [pc, #76]	; (8001a74 <setLED+0x198>)
 8001a28:	f007 fa20 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a32:	4810      	ldr	r0, [pc, #64]	; (8001a74 <setLED+0x198>)
 8001a34:	f007 fa1a 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <setLED+0x198>)
 8001a40:	f007 fa14 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001a44:	e011      	b.n	8001a6a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <setLED+0x198>)
 8001a4e:	f007 fa0d 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a58:	4806      	ldr	r0, [pc, #24]	; (8001a74 <setLED+0x198>)
 8001a5a:	f007 fa07 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <setLED+0x198>)
 8001a66:	f007 fa01 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40020800 	.word	0x40020800

08001a78 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b52      	cmp	r3, #82	; 0x52
 8001a86:	d124      	bne.n	8001ad2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8e:	48c5      	ldr	r0, [pc, #788]	; (8001da4 <setLED2+0x32c>)
 8001a90:	f007 f9ec 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a9a:	48c3      	ldr	r0, [pc, #780]	; (8001da8 <setLED2+0x330>)
 8001a9c:	f007 f9e6 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa6:	48c0      	ldr	r0, [pc, #768]	; (8001da8 <setLED2+0x330>)
 8001aa8:	f007 f9e0 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab2:	48bd      	ldr	r0, [pc, #756]	; (8001da8 <setLED2+0x330>)
 8001ab4:	f007 f9da 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abe:	48ba      	ldr	r0, [pc, #744]	; (8001da8 <setLED2+0x330>)
 8001ac0:	f007 f9d4 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aca:	48b7      	ldr	r0, [pc, #732]	; (8001da8 <setLED2+0x330>)
 8001acc:	f007 f9ce 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001ad0:	e163      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'G'){
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b47      	cmp	r3, #71	; 0x47
 8001ad6:	d124      	bne.n	8001b22 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ade:	48b1      	ldr	r0, [pc, #708]	; (8001da4 <setLED2+0x32c>)
 8001ae0:	f007 f9c4 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aea:	48af      	ldr	r0, [pc, #700]	; (8001da8 <setLED2+0x330>)
 8001aec:	f007 f9be 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	48ac      	ldr	r0, [pc, #688]	; (8001da8 <setLED2+0x330>)
 8001af8:	f007 f9b8 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b02:	48a9      	ldr	r0, [pc, #676]	; (8001da8 <setLED2+0x330>)
 8001b04:	f007 f9b2 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0e:	48a6      	ldr	r0, [pc, #664]	; (8001da8 <setLED2+0x330>)
 8001b10:	f007 f9ac 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b1a:	48a3      	ldr	r0, [pc, #652]	; (8001da8 <setLED2+0x330>)
 8001b1c:	f007 f9a6 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001b20:	e13b      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'B'){
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b42      	cmp	r3, #66	; 0x42
 8001b26:	d124      	bne.n	8001b72 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2e:	489d      	ldr	r0, [pc, #628]	; (8001da4 <setLED2+0x32c>)
 8001b30:	f007 f99c 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	489b      	ldr	r0, [pc, #620]	; (8001da8 <setLED2+0x330>)
 8001b3c:	f007 f996 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b46:	4898      	ldr	r0, [pc, #608]	; (8001da8 <setLED2+0x330>)
 8001b48:	f007 f990 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b52:	4895      	ldr	r0, [pc, #596]	; (8001da8 <setLED2+0x330>)
 8001b54:	f007 f98a 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5e:	4892      	ldr	r0, [pc, #584]	; (8001da8 <setLED2+0x330>)
 8001b60:	f007 f984 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b6a:	488f      	ldr	r0, [pc, #572]	; (8001da8 <setLED2+0x330>)
 8001b6c:	f007 f97e 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001b70:	e113      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'W'){
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b57      	cmp	r3, #87	; 0x57
 8001b76:	d124      	bne.n	8001bc2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7e:	4889      	ldr	r0, [pc, #548]	; (8001da4 <setLED2+0x32c>)
 8001b80:	f007 f974 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	4887      	ldr	r0, [pc, #540]	; (8001da8 <setLED2+0x330>)
 8001b8c:	f007 f96e 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b96:	4884      	ldr	r0, [pc, #528]	; (8001da8 <setLED2+0x330>)
 8001b98:	f007 f968 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba2:	4881      	ldr	r0, [pc, #516]	; (8001da8 <setLED2+0x330>)
 8001ba4:	f007 f962 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bae:	487e      	ldr	r0, [pc, #504]	; (8001da8 <setLED2+0x330>)
 8001bb0:	f007 f95c 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bba:	487b      	ldr	r0, [pc, #492]	; (8001da8 <setLED2+0x330>)
 8001bbc:	f007 f956 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001bc0:	e0eb      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'Y'){
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b59      	cmp	r3, #89	; 0x59
 8001bc6:	d124      	bne.n	8001c12 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bce:	4875      	ldr	r0, [pc, #468]	; (8001da4 <setLED2+0x32c>)
 8001bd0:	f007 f94c 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bda:	4873      	ldr	r0, [pc, #460]	; (8001da8 <setLED2+0x330>)
 8001bdc:	f007 f946 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	4870      	ldr	r0, [pc, #448]	; (8001da8 <setLED2+0x330>)
 8001be8:	f007 f940 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf2:	486d      	ldr	r0, [pc, #436]	; (8001da8 <setLED2+0x330>)
 8001bf4:	f007 f93a 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfe:	486a      	ldr	r0, [pc, #424]	; (8001da8 <setLED2+0x330>)
 8001c00:	f007 f934 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c0a:	4867      	ldr	r0, [pc, #412]	; (8001da8 <setLED2+0x330>)
 8001c0c:	f007 f92e 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001c10:	e0c3      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'X'){
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b58      	cmp	r3, #88	; 0x58
 8001c16:	d124      	bne.n	8001c62 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1e:	4861      	ldr	r0, [pc, #388]	; (8001da4 <setLED2+0x32c>)
 8001c20:	f007 f924 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2a:	485f      	ldr	r0, [pc, #380]	; (8001da8 <setLED2+0x330>)
 8001c2c:	f007 f91e 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c36:	485c      	ldr	r0, [pc, #368]	; (8001da8 <setLED2+0x330>)
 8001c38:	f007 f918 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c42:	4859      	ldr	r0, [pc, #356]	; (8001da8 <setLED2+0x330>)
 8001c44:	f007 f912 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4e:	4856      	ldr	r0, [pc, #344]	; (8001da8 <setLED2+0x330>)
 8001c50:	f007 f90c 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5a:	4853      	ldr	r0, [pc, #332]	; (8001da8 <setLED2+0x330>)
 8001c5c:	f007 f906 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001c60:	e09b      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'V'){
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b56      	cmp	r3, #86	; 0x56
 8001c66:	d124      	bne.n	8001cb2 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c6e:	484d      	ldr	r0, [pc, #308]	; (8001da4 <setLED2+0x32c>)
 8001c70:	f007 f8fc 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7a:	484b      	ldr	r0, [pc, #300]	; (8001da8 <setLED2+0x330>)
 8001c7c:	f007 f8f6 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4848      	ldr	r0, [pc, #288]	; (8001da8 <setLED2+0x330>)
 8001c88:	f007 f8f0 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c92:	4845      	ldr	r0, [pc, #276]	; (8001da8 <setLED2+0x330>)
 8001c94:	f007 f8ea 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9e:	4842      	ldr	r0, [pc, #264]	; (8001da8 <setLED2+0x330>)
 8001ca0:	f007 f8e4 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001caa:	483f      	ldr	r0, [pc, #252]	; (8001da8 <setLED2+0x330>)
 8001cac:	f007 f8de 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001cb0:	e073      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'T'){
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	2b54      	cmp	r3, #84	; 0x54
 8001cb6:	d124      	bne.n	8001d02 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cbe:	4839      	ldr	r0, [pc, #228]	; (8001da4 <setLED2+0x32c>)
 8001cc0:	f007 f8d4 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cca:	4837      	ldr	r0, [pc, #220]	; (8001da8 <setLED2+0x330>)
 8001ccc:	f007 f8ce 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	4834      	ldr	r0, [pc, #208]	; (8001da8 <setLED2+0x330>)
 8001cd8:	f007 f8c8 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce2:	4831      	ldr	r0, [pc, #196]	; (8001da8 <setLED2+0x330>)
 8001ce4:	f007 f8c2 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cee:	482e      	ldr	r0, [pc, #184]	; (8001da8 <setLED2+0x330>)
 8001cf0:	f007 f8bc 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cfa:	482b      	ldr	r0, [pc, #172]	; (8001da8 <setLED2+0x330>)
 8001cfc:	f007 f8b6 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001d00:	e04b      	b.n	8001d9a <setLED2+0x322>
	else if(color2 == 'A'){
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b41      	cmp	r3, #65	; 0x41
 8001d06:	d124      	bne.n	8001d52 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d0e:	4825      	ldr	r0, [pc, #148]	; (8001da4 <setLED2+0x32c>)
 8001d10:	f007 f8ac 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d1a:	4823      	ldr	r0, [pc, #140]	; (8001da8 <setLED2+0x330>)
 8001d1c:	f007 f8a6 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	4820      	ldr	r0, [pc, #128]	; (8001da8 <setLED2+0x330>)
 8001d28:	f007 f8a0 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d32:	481d      	ldr	r0, [pc, #116]	; (8001da8 <setLED2+0x330>)
 8001d34:	f007 f89a 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3e:	481a      	ldr	r0, [pc, #104]	; (8001da8 <setLED2+0x330>)
 8001d40:	f007 f894 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d4a:	4817      	ldr	r0, [pc, #92]	; (8001da8 <setLED2+0x330>)
 8001d4c:	f007 f88e 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001d50:	e023      	b.n	8001d9a <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d58:	4812      	ldr	r0, [pc, #72]	; (8001da4 <setLED2+0x32c>)
 8001d5a:	f007 f887 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d64:	4810      	ldr	r0, [pc, #64]	; (8001da8 <setLED2+0x330>)
 8001d66:	f007 f881 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <setLED2+0x330>)
 8001d72:	f007 f87b 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7c:	480a      	ldr	r0, [pc, #40]	; (8001da8 <setLED2+0x330>)
 8001d7e:	f007 f875 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d82:	2201      	movs	r2, #1
 8001d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <setLED2+0x330>)
 8001d8a:	f007 f86f 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <setLED2+0x330>)
 8001d96:	f007 f869 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400
 8001dac:	00000000 	.word	0x00000000

08001db0 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001db0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 2.7, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001db8:	4bb3      	ldr	r3, [pc, #716]	; (8002088 <calculateLineFollowingTermFlip+0x2d8>)
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	4bb3      	ldr	r3, [pc, #716]	; (800208c <calculateLineFollowingTermFlip+0x2dc>)
 8001dbe:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001dc6:	4bb2      	ldr	r3, [pc, #712]	; (8002090 <calculateLineFollowingTermFlip+0x2e0>)
 8001dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f040 8140 	bne.w	8002052 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001dd2:	4bb0      	ldr	r3, [pc, #704]	; (8002094 <calculateLineFollowingTermFlip+0x2e4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d106      	bne.n	8001de8 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dda:	4baf      	ldr	r3, [pc, #700]	; (8002098 <calculateLineFollowingTermFlip+0x2e8>)
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001de2:	4bac      	ldr	r3, [pc, #688]	; (8002094 <calculateLineFollowingTermFlip+0x2e4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001de8:	4bac      	ldr	r3, [pc, #688]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb98 	bl	8000524 <__aeabi_i2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4ba9      	ldr	r3, [pc, #676]	; (80020a0 <calculateLineFollowingTermFlip+0x2f0>)
 8001dfa:	f7fe fbfd 	bl	80005f8 <__aeabi_dmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4625      	mov	r5, r4
 8001e04:	461c      	mov	r4, r3
 8001e06:	4ba5      	ldr	r3, [pc, #660]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001e08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb89 	bl	8000524 <__aeabi_i2d>
 8001e12:	a393      	add	r3, pc, #588	; (adr r3, 8002060 <calculateLineFollowingTermFlip+0x2b0>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fbee 	bl	80005f8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fa32 	bl	800028c <__adddf3>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4625      	mov	r5, r4
 8001e2e:	461c      	mov	r4, r3
 8001e30:	4b9a      	ldr	r3, [pc, #616]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001e32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb74 	bl	8000524 <__aeabi_i2d>
 8001e3c:	a38a      	add	r3, pc, #552	; (adr r3, 8002068 <calculateLineFollowingTermFlip+0x2b8>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fbd9 	bl	80005f8 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe fa1d 	bl	800028c <__adddf3>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4625      	mov	r5, r4
 8001e58:	461c      	mov	r4, r3
 8001e5a:	4b90      	ldr	r3, [pc, #576]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001e5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb5f 	bl	8000524 <__aeabi_i2d>
 8001e66:	a382      	add	r3, pc, #520	; (adr r3, 8002070 <calculateLineFollowingTermFlip+0x2c0>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	4625      	mov	r5, r4
 8001e82:	461c      	mov	r4, r3
 8001e84:	4b85      	ldr	r3, [pc, #532]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001e86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb4a 	bl	8000524 <__aeabi_i2d>
 8001e90:	a379      	add	r3, pc, #484	; (adr r3, 8002078 <calculateLineFollowingTermFlip+0x2c8>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbaf 	bl	80005f8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe f9f3 	bl	800028c <__adddf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4625      	mov	r5, r4
 8001eac:	461c      	mov	r4, r3
 8001eae:	4b7b      	ldr	r3, [pc, #492]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001eb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb35 	bl	8000524 <__aeabi_i2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe f9e3 	bl	800028c <__adddf3>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4621      	mov	r1, r4
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b74      	ldr	r3, [pc, #464]	; (80020a4 <calculateLineFollowingTermFlip+0x2f4>)
 8001ed4:	f7fe fcba 	bl	800084c <__aeabi_ddiv>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	4625      	mov	r5, r4
 8001ede:	461c      	mov	r4, r3
 8001ee0:	4b6e      	ldr	r3, [pc, #440]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001ee2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb1c 	bl	8000524 <__aeabi_i2d>
 8001eec:	4680      	mov	r8, r0
 8001eee:	4689      	mov	r9, r1
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001ef2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fb14 	bl	8000524 <__aeabi_i2d>
 8001efc:	a35e      	add	r3, pc, #376	; (adr r3, 8002078 <calculateLineFollowingTermFlip+0x2c8>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fb79 	bl	80005f8 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	f7fe f9bd 	bl	800028c <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	4b60      	ldr	r3, [pc, #384]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001f1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe faff 	bl	8000524 <__aeabi_i2d>
 8001f26:	a352      	add	r3, pc, #328	; (adr r3, 8002070 <calculateLineFollowingTermFlip+0x2c0>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fb64 	bl	80005f8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4640      	mov	r0, r8
 8001f36:	4649      	mov	r1, r9
 8001f38:	f7fe f9a8 	bl	800028c <__adddf3>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4690      	mov	r8, r2
 8001f42:	4699      	mov	r9, r3
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001f46:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe faea 	bl	8000524 <__aeabi_i2d>
 8001f50:	a345      	add	r3, pc, #276	; (adr r3, 8002068 <calculateLineFollowingTermFlip+0x2b8>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4640      	mov	r0, r8
 8001f60:	4649      	mov	r1, r9
 8001f62:	f7fe f993 	bl	800028c <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001f70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fad5 	bl	8000524 <__aeabi_i2d>
 8001f7a:	a339      	add	r3, pc, #228	; (adr r3, 8002060 <calculateLineFollowingTermFlip+0x2b0>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fb3a 	bl	80005f8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4640      	mov	r0, r8
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	f7fe f97e 	bl	800028c <__adddf3>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4690      	mov	r8, r2
 8001f96:	4699      	mov	r9, r3
 8001f98:	4b40      	ldr	r3, [pc, #256]	; (800209c <calculateLineFollowingTermFlip+0x2ec>)
 8001f9a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fac0 	bl	8000524 <__aeabi_i2d>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <calculateLineFollowingTermFlip+0x2f0>)
 8001faa:	f7fe fb25 	bl	80005f8 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	f7fe f969 	bl	800028c <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <calculateLineFollowingTermFlip+0x2f4>)
 8001fc8:	f7fe fc40 	bl	800084c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe f958 	bl	8000288 <__aeabi_dsub>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4621      	mov	r1, r4
 8001fe0:	f7fe fe02 	bl	8000be8 <__aeabi_d2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001fe8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <calculateLineFollowingTermFlip+0x2f8>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002006:	edd7 7a04 	vldr	s15, [r7, #16]
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe fa99 	bl	8000548 <__aeabi_f2d>
 8002016:	a31a      	add	r3, pc, #104	; (adr r3, 8002080 <calculateLineFollowingTermFlip+0x2d0>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fc16 	bl	800084c <__aeabi_ddiv>
 8002020:	4603      	mov	r3, r0
 8002022:	460c      	mov	r4, r1
 8002024:	4618      	mov	r0, r3
 8002026:	4621      	mov	r1, r4
 8002028:	f7fe fdde 	bl	8000be8 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <calculateLineFollowingTermFlip+0x2e8>)
 8002032:	ed93 7a00 	vldr	s14, [r3]
 8002036:	edd7 7a02 	vldr	s15, [r7, #8]
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <calculateLineFollowingTermFlip+0x2fc>)
 8002048:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <calculateLineFollowingTermFlip+0x2f8>)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6013      	str	r3, [r2, #0]
	}
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800205c:	f3af 8000 	nop.w
 8002060:	9999999a 	.word	0x9999999a
 8002064:	3ff99999 	.word	0x3ff99999
 8002068:	33333333 	.word	0x33333333
 800206c:	3ff73333 	.word	0x3ff73333
 8002070:	cccccccd 	.word	0xcccccccd
 8002074:	3ff4cccc 	.word	0x3ff4cccc
 8002078:	66666666 	.word	0x66666666
 800207c:	3ff26666 	.word	0x3ff26666
 8002080:	d2f1a9fc 	.word	0xd2f1a9fc
 8002084:	3f50624d 	.word	0x3f50624d
 8002088:	402ccccd 	.word	0x402ccccd
 800208c:	3ccccccd 	.word	0x3ccccccd
 8002090:	2000027e 	.word	0x2000027e
 8002094:	2000027f 	.word	0x2000027f
 8002098:	2000028c 	.word	0x2000028c
 800209c:	2001d260 	.word	0x2001d260
 80020a0:	3ffc0000 	.word	0x3ffc0000
 80020a4:	40180000 	.word	0x40180000
 80020a8:	20000288 	.word	0x20000288
 80020ac:	20000280 	.word	0x20000280

080020b0 <lineTraceFlip>:

void lineTraceFlip(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <lineTraceFlip+0x10c>)
 80020b8:	f993 3000 	ldrsb.w	r3, [r3]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d174      	bne.n	80021aa <lineTraceFlip+0xfa>

		float motor_l;
		float motor_r;

		float velocity_control_term = getVelocityControlTerm();
 80020c0:	f001 fbe2 	bl	8003888 <getVelocityControlTerm>
 80020c4:	ed87 0a01 	vstr	s0, [r7, #4]
		}

		velocity_control_term -= exceeded;
		line_following_term += exceeded;*/

		if(getControl_Mode() == 1){
 80020c8:	f004 fd30 	bl	8006b2c <getControl_Mode>
 80020cc:	eeb0 7a40 	vmov.f32	s14, s0
 80020d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80020d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d112      	bne.n	8002104 <lineTraceFlip+0x54>
		    motor_l = velocity_control_term + line_following_term;//ライントレース時のモータ出力
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <lineTraceFlip+0x110>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term - line_following_term;
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <lineTraceFlip+0x110>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80020fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fe:	edc7 7a02 	vstr	s15, [r7, #8]
 8002102:	e03c      	b.n	800217e <lineTraceFlip+0xce>
		}
		else if(getControl_Mode() == 2){
 8002104:	f004 fd12 	bl	8006b2c <getControl_Mode>
 8002108:	eeb0 7a40 	vmov.f32	s14, s0
 800210c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002110:	eeb4 7a67 	vcmp.f32	s14, s15
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d112      	bne.n	8002140 <lineTraceFlip+0x90>
			motor_l = velocity_control_term + line_following_term;//ライントレース時のモータ出力
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <lineTraceFlip+0x110>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	ed97 7a01 	vldr	s14, [r7, #4]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term - line_following_term;
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <lineTraceFlip+0x110>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ed97 7a01 	vldr	s14, [r7, #4]
 8002136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213a:	edc7 7a02 	vstr	s15, [r7, #8]
 800213e:	e01e      	b.n	800217e <lineTraceFlip+0xce>
		}
		else if(getControl_Mode() == 5)
 8002140:	f004 fcf4 	bl	8006b2c <getControl_Mode>
 8002144:	eeb0 7a40 	vmov.f32	s14, s0
 8002148:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800214c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	d113      	bne.n	800217e <lineTraceFlip+0xce>
		{
			motor_l = velocity_control_term - getAngleControlTerm();//バーチャルライントレース時のモータ出力
 8002156:	f7fe ffbb 	bl	80010d0 <getAngleControlTerm>
 800215a:	eeb0 7a40 	vmov.f32	s14, s0
 800215e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002166:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term + getAngleControlTerm();
 800216a:	f7fe ffb1 	bl	80010d0 <getAngleControlTerm>
 800216e:	eeb0 7a40 	vmov.f32	s14, s0
 8002172:	edd7 7a01 	vldr	s15, [r7, #4]
 8002176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800217a:	edc7 7a02 	vstr	s15, [r7, #8]


		//motor_l = velocity_control_term ;
		//motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <lineTraceFlip+0x114>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//motor_l = 500;
		//motor_r = 500;

		setMotor(motor_l, motor_r);
 8002184:	edd7 7a03 	vldr	s15, [r7, #12]
 8002188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800218c:	ee17 3a90 	vmov	r3, s15
 8002190:	b21b      	sxth	r3, r3
 8002192:	edd7 7a02 	vldr	s15, [r7, #8]
 8002196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219a:	ee17 2a90 	vmov	r2, s15
 800219e:	b212      	sxth	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fc06 	bl	80059b4 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021a8:	e003      	b.n	80021b2 <lineTraceFlip+0x102>
		setMotor(0, 0);
 80021aa:	2100      	movs	r1, #0
 80021ac:	2000      	movs	r0, #0
 80021ae:	f003 fc01 	bl	80059b4 <setMotor>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000027e 	.word	0x2000027e
 80021c0:	20000280 	.word	0x20000280
 80021c4:	2001d34c 	.word	0x2001d34c

080021c8 <startLineTrace>:

void startLineTrace()
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <startLineTrace+0x1c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <startLineTrace+0x20>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000027e 	.word	0x2000027e
 80021e8:	2000027f 	.word	0x2000027f

080021ec <stopLineTrace>:

void stopLineTrace()
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <stopLineTrace+0x1c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <stopLineTrace+0x20>)
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	2000027e 	.word	0x2000027e
 800220c:	20000280 	.word	0x20000280

08002210 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
	return dark_flag;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <getCouseOutFlag+0x14>)
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000284 	.word	0x20000284

08002228 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 800222e:	2202      	movs	r2, #2
 8002230:	4933      	ldr	r1, [pc, #204]	; (8002300 <initADC+0xd8>)
 8002232:	4834      	ldr	r0, [pc, #208]	; (8002304 <initADC+0xdc>)
 8002234:	f005 fa4e 	bl	80076d4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 8002238:	220c      	movs	r2, #12
 800223a:	4933      	ldr	r1, [pc, #204]	; (8002308 <initADC+0xe0>)
 800223c:	4833      	ldr	r0, [pc, #204]	; (800230c <initADC+0xe4>)
 800223e:	f005 fa49 	bl	80076d4 <HAL_ADC_Start_DMA>

	loadSensor();
 8002242:	f000 fff7 	bl	8003234 <loadSensor>
	const float *p_sensor;
	p_sensor = getSensorArrayPointer();
 8002246:	f001 f969 	bl	800351c <getSensorArrayPointer>
 800224a:	6038      	str	r0, [r7, #0]

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800224c:	2300      	movs	r3, #0
 800224e:	80fb      	strh	r3, [r7, #6]
 8002250:	e023      	b.n	800229a <initADC+0x72>
		sensor_coefficient[i] = p_sensor[i*2] - p_sensor[i*2 + 1];
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	461a      	mov	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	3304      	adds	r3, #4
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002274:	4a26      	ldr	r2, [pc, #152]	; (8002310 <initADC+0xe8>)
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	edc3 7a00 	vstr	s15, [r3]
		offset_values[i] = p_sensor[i*2 + 1];
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	3304      	adds	r3, #4
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	441a      	add	r2, r3
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	4921      	ldr	r1, [pc, #132]	; (8002314 <initADC+0xec>)
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	3301      	adds	r3, #1
 8002298:	80fb      	strh	r3, [r7, #6]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b0b      	cmp	r3, #11
 800229e:	d9d8      	bls.n	8002252 <initADC+0x2a>
	}
	for(uint16_t i = LINESENSOR_ADC_NUM; i < LINESENSOR_ADC_NUM + SIDE_LINESENSOR_ADC_NUM; i++){
 80022a0:	230c      	movs	r3, #12
 80022a2:	80bb      	strh	r3, [r7, #4]
 80022a4:	e025      	b.n	80022f2 <initADC+0xca>
		side_sensor_coefficient[i - LINESENSOR_ADC_NUM] = p_sensor[i*2] - p_sensor[i*2 + 1];
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	461a      	mov	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3304      	adds	r3, #4
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	88bb      	ldrh	r3, [r7, #4]
 80022c4:	3b0c      	subs	r3, #12
 80022c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <initADC+0xf0>)
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	edc3 7a00 	vstr	s15, [r3]
		side_offset_values[i - LINESENSOR_ADC_NUM] = p_sensor[i*2 + 1];
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	3304      	adds	r3, #4
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	441a      	add	r2, r3
 80022de:	88bb      	ldrh	r3, [r7, #4]
 80022e0:	3b0c      	subs	r3, #12
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	490d      	ldr	r1, [pc, #52]	; (800231c <initADC+0xf4>)
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	601a      	str	r2, [r3, #0]
	for(uint16_t i = LINESENSOR_ADC_NUM; i < LINESENSOR_ADC_NUM + SIDE_LINESENSOR_ADC_NUM; i++){
 80022ec:	88bb      	ldrh	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	80bb      	strh	r3, [r7, #4]
 80022f2:	88bb      	ldrh	r3, [r7, #4]
 80022f4:	2b0d      	cmp	r3, #13
 80022f6:	d9d6      	bls.n	80022a6 <initADC+0x7e>
	}
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200002a8 	.word	0x200002a8
 8002304:	2001d3a0 	.word	0x2001d3a0
 8002308:	20000290 	.word	0x20000290
 800230c:	2001d350 	.word	0x2001d350
 8002310:	2001d288 	.word	0x2001d288
 8002314:	2001d220 	.word	0x2001d220
 8002318:	2001d258 	.word	0x2001d258
 800231c:	2001d218 	.word	0x2001d218

08002320 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002324:	4bc9      	ldr	r3, [pc, #804]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 8002326:	885b      	ldrh	r3, [r3, #2]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002330:	4bc7      	ldr	r3, [pc, #796]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 8002332:	edd3 7a01 	vldr	s15, [r3, #4]
 8002336:	ee77 6a67 	vsub.f32	s13, s14, s15
 800233a:	4bc6      	ldr	r3, [pc, #792]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 800233c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002344:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234c:	4bc3      	ldr	r3, [pc, #780]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002356:	ee17 3a90 	vmov	r3, s15
 800235a:	b219      	sxth	r1, r3
 800235c:	4bc0      	ldr	r3, [pc, #768]	; (8002660 <storeAnalogSensorBuffer+0x340>)
 800235e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8002362:	4bba      	ldr	r3, [pc, #744]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236e:	4bb8      	ldr	r3, [pc, #736]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002378:	4bb6      	ldr	r3, [pc, #728]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002382:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	4bb4      	ldr	r3, [pc, #720]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002394:	ee17 3a90 	vmov	r3, s15
 8002398:	b219      	sxth	r1, r3
 800239a:	4bb2      	ldr	r3, [pc, #712]	; (8002664 <storeAnalogSensorBuffer+0x344>)
 800239c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023a0:	4baa      	ldr	r3, [pc, #680]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ac:	4ba8      	ldr	r3, [pc, #672]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 80023ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80023b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023b6:	4ba7      	ldr	r3, [pc, #668]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 80023b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80023bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002658 <storeAnalogSensorBuffer+0x338>
 80023c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c8:	4ba4      	ldr	r3, [pc, #656]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d2:	ee17 3a90 	vmov	r3, s15
 80023d6:	b219      	sxth	r1, r3
 80023d8:	4ba3      	ldr	r3, [pc, #652]	; (8002668 <storeAnalogSensorBuffer+0x348>)
 80023da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80023de:	4b9b      	ldr	r3, [pc, #620]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 80023e0:	88db      	ldrh	r3, [r3, #6]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ea:	4b99      	ldr	r3, [pc, #612]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 80023ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80023f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023f4:	4b97      	ldr	r3, [pc, #604]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 80023f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	4b95      	ldr	r3, [pc, #596]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002410:	ee17 3a90 	vmov	r3, s15
 8002414:	b219      	sxth	r1, r3
 8002416:	4b95      	ldr	r3, [pc, #596]	; (800266c <storeAnalogSensorBuffer+0x34c>)
 8002418:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 800241c:	4b8b      	ldr	r3, [pc, #556]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 800241e:	891b      	ldrh	r3, [r3, #8]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002428:	4b89      	ldr	r3, [pc, #548]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 800242a:	edd3 7a04 	vldr	s15, [r3, #16]
 800242e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 8002434:	ed93 7a04 	vldr	s14, [r3, #16]
 8002438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	4b85      	ldr	r3, [pc, #532]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244e:	ee17 3a90 	vmov	r3, s15
 8002452:	b219      	sxth	r1, r3
 8002454:	4b86      	ldr	r3, [pc, #536]	; (8002670 <storeAnalogSensorBuffer+0x350>)
 8002456:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800245a:	4b7c      	ldr	r3, [pc, #496]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 800245c:	895b      	ldrh	r3, [r3, #10]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002466:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 8002468:	edd3 7a05 	vldr	s15, [r3, #20]
 800246c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002470:	4b78      	ldr	r3, [pc, #480]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 8002472:	ed93 7a05 	vldr	s14, [r3, #20]
 8002476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002658 <storeAnalogSensorBuffer+0x338>
 800247e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248c:	ee17 3a90 	vmov	r3, s15
 8002490:	b219      	sxth	r1, r3
 8002492:	4b78      	ldr	r3, [pc, #480]	; (8002674 <storeAnalogSensorBuffer+0x354>)
 8002494:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002498:	4b6c      	ldr	r3, [pc, #432]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 800249a:	899b      	ldrh	r3, [r3, #12]
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 80024a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80024aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024ae:	4b69      	ldr	r3, [pc, #420]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 80024b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80024b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002658 <storeAnalogSensorBuffer+0x338>
 80024bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ca:	ee17 3a90 	vmov	r3, s15
 80024ce:	b219      	sxth	r1, r3
 80024d0:	4b69      	ldr	r3, [pc, #420]	; (8002678 <storeAnalogSensorBuffer+0x358>)
 80024d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 80024d8:	89db      	ldrh	r3, [r3, #14]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e2:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 80024e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80024e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 80024ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80024f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002658 <storeAnalogSensorBuffer+0x338>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002508:	ee17 3a90 	vmov	r3, s15
 800250c:	b219      	sxth	r1, r3
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <storeAnalogSensorBuffer+0x35c>)
 8002510:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002514:	4b4d      	ldr	r3, [pc, #308]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 8002516:	8a1b      	ldrh	r3, [r3, #16]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002520:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 8002522:	edd3 7a08 	vldr	s15, [r3, #32]
 8002526:	ee77 6a67 	vsub.f32	s13, s14, s15
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 800252c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002534:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002546:	ee17 3a90 	vmov	r3, s15
 800254a:	b219      	sxth	r1, r3
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <storeAnalogSensorBuffer+0x360>)
 800254e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 8002554:	8a5b      	ldrh	r3, [r3, #18]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 8002560:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002564:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002568:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 800256a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800256e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002572:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002584:	ee17 3a90 	vmov	r3, s15
 8002588:	b219      	sxth	r1, r3
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <storeAnalogSensorBuffer+0x364>)
 800258c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 8002592:	8a9b      	ldrh	r3, [r3, #20]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800259c:	4b2c      	ldr	r3, [pc, #176]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 800259e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 80025a8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002658 <storeAnalogSensorBuffer+0x338>
 80025b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c2:	ee17 3a90 	vmov	r3, s15
 80025c6:	b219      	sxth	r1, r3
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <storeAnalogSensorBuffer+0x368>)
 80025ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <storeAnalogSensorBuffer+0x32c>)
 80025d0:	8adb      	ldrh	r3, [r3, #22]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <storeAnalogSensorBuffer+0x330>)
 80025dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <storeAnalogSensorBuffer+0x334>)
 80025e6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80025ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002658 <storeAnalogSensorBuffer+0x338>
 80025f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002600:	ee17 3a90 	vmov	r3, s15
 8002604:	b219      	sxth	r1, r3
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <storeAnalogSensorBuffer+0x36c>)
 8002608:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <storeAnalogSensorBuffer+0x370>)
 800260e:	885b      	ldrh	r3, [r3, #2]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <storeAnalogSensorBuffer+0x374>)
 800261a:	edd3 7a01 	vldr	s15, [r3, #4]
 800261e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <storeAnalogSensorBuffer+0x378>)
 8002624:	ed93 7a01 	vldr	s14, [r3, #4]
 8002628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002658 <storeAnalogSensorBuffer+0x338>
 8002630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <storeAnalogSensorBuffer+0x33c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800263e:	ee17 3a90 	vmov	r3, s15
 8002642:	b219      	sxth	r1, r3
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <storeAnalogSensorBuffer+0x37c>)
 8002646:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800264a:	e029      	b.n	80026a0 <storeAnalogSensorBuffer+0x380>
 800264c:	20000290 	.word	0x20000290
 8002650:	2001d220 	.word	0x2001d220
 8002654:	2001d288 	.word	0x2001d288
 8002658:	447a0000 	.word	0x447a0000
 800265c:	20000038 	.word	0x20000038
 8002660:	200002c0 	.word	0x200002c0
 8002664:	200002ac 	.word	0x200002ac
 8002668:	200002d4 	.word	0x200002d4
 800266c:	200002e8 	.word	0x200002e8
 8002670:	200002fc 	.word	0x200002fc
 8002674:	20000310 	.word	0x20000310
 8002678:	20000324 	.word	0x20000324
 800267c:	20000338 	.word	0x20000338
 8002680:	2000034c 	.word	0x2000034c
 8002684:	20000360 	.word	0x20000360
 8002688:	20000374 	.word	0x20000374
 800268c:	20000388 	.word	0x20000388
 8002690:	200002a8 	.word	0x200002a8
 8002694:	2001d218 	.word	0x2001d218
 8002698:	2001d258 	.word	0x2001d258
 800269c:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <storeAnalogSensorBuffer+0x3d4>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <storeAnalogSensorBuffer+0x3d8>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <storeAnalogSensorBuffer+0x3dc>)
 80026b8:	ed93 7a00 	vldr	s14, [r3]
 80026bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002700 <storeAnalogSensorBuffer+0x3e0>
 80026c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <storeAnalogSensorBuffer+0x3e4>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d2:	ee17 3a90 	vmov	r3, s15
 80026d6:	b219      	sxth	r1, r3
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <storeAnalogSensorBuffer+0x3e8>)
 80026da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <storeAnalogSensorBuffer+0x3e4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <storeAnalogSensorBuffer+0x3e4>)
 80026e8:	701a      	strb	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	200002a8 	.word	0x200002a8
 80026f8:	2001d218 	.word	0x2001d218
 80026fc:	2001d258 	.word	0x2001d258
 8002700:	447a0000 	.word	0x447a0000
 8002704:	20000038 	.word	0x20000038
 8002708:	200003b0 	.word	0x200003b0

0800270c <updateAnalogSensor>:

void updateAnalogSensor(void) {
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8002712:	4bc9      	ldr	r3, [pc, #804]	; (8002a38 <updateAnalogSensor+0x32c>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271e:	4bc7      	ldr	r3, [pc, #796]	; (8002a3c <updateAnalogSensor+0x330>)
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002728:	4bc5      	ldr	r3, [pc, #788]	; (8002a40 <updateAnalogSensor+0x334>)
 800272a:	ed93 7a00 	vldr	s14, [r3]
 800272e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002732:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a44 <updateAnalogSensor+0x338>
 8002736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273e:	ee17 3a90 	vmov	r3, s15
 8002742:	b21a      	sxth	r2, r3
 8002744:	4bc0      	ldr	r3, [pc, #768]	; (8002a48 <updateAnalogSensor+0x33c>)
 8002746:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002748:	4bbb      	ldr	r3, [pc, #748]	; (8002a38 <updateAnalogSensor+0x32c>)
 800274a:	885b      	ldrh	r3, [r3, #2]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002754:	4bb9      	ldr	r3, [pc, #740]	; (8002a3c <updateAnalogSensor+0x330>)
 8002756:	edd3 7a01 	vldr	s15, [r3, #4]
 800275a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800275e:	4bb8      	ldr	r3, [pc, #736]	; (8002a40 <updateAnalogSensor+0x334>)
 8002760:	ed93 7a01 	vldr	s14, [r3, #4]
 8002764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002768:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a44 <updateAnalogSensor+0x338>
 800276c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002774:	ee17 3a90 	vmov	r3, s15
 8002778:	b21a      	sxth	r2, r3
 800277a:	4bb3      	ldr	r3, [pc, #716]	; (8002a48 <updateAnalogSensor+0x33c>)
 800277c:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800277e:	4bae      	ldr	r3, [pc, #696]	; (8002a38 <updateAnalogSensor+0x32c>)
 8002780:	889b      	ldrh	r3, [r3, #4]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800278a:	4bac      	ldr	r3, [pc, #688]	; (8002a3c <updateAnalogSensor+0x330>)
 800278c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002790:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002794:	4baa      	ldr	r3, [pc, #680]	; (8002a40 <updateAnalogSensor+0x334>)
 8002796:	ed93 7a02 	vldr	s14, [r3, #8]
 800279a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a44 <updateAnalogSensor+0x338>
 80027a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027aa:	ee17 3a90 	vmov	r3, s15
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	4ba5      	ldr	r3, [pc, #660]	; (8002a48 <updateAnalogSensor+0x33c>)
 80027b2:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027b4:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <updateAnalogSensor+0x32c>)
 80027b6:	88db      	ldrh	r3, [r3, #6]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c0:	4b9e      	ldr	r3, [pc, #632]	; (8002a3c <updateAnalogSensor+0x330>)
 80027c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027ca:	4b9d      	ldr	r3, [pc, #628]	; (8002a40 <updateAnalogSensor+0x334>)
 80027cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80027d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d4:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a44 <updateAnalogSensor+0x338>
 80027d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <updateAnalogSensor+0x33c>)
 80027e8:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80027ea:	4b93      	ldr	r3, [pc, #588]	; (8002a38 <updateAnalogSensor+0x32c>)
 80027ec:	891b      	ldrh	r3, [r3, #8]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f6:	4b91      	ldr	r3, [pc, #580]	; (8002a3c <updateAnalogSensor+0x330>)
 80027f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002800:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <updateAnalogSensor+0x334>)
 8002802:	ed93 7a04 	vldr	s14, [r3, #16]
 8002806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a44 <updateAnalogSensor+0x338>
 800280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002816:	ee17 3a90 	vmov	r3, s15
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b8a      	ldr	r3, [pc, #552]	; (8002a48 <updateAnalogSensor+0x33c>)
 800281e:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002820:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <updateAnalogSensor+0x32c>)
 8002822:	895b      	ldrh	r3, [r3, #10]
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800282c:	4b83      	ldr	r3, [pc, #524]	; (8002a3c <updateAnalogSensor+0x330>)
 800282e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002832:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <updateAnalogSensor+0x334>)
 8002838:	ed93 7a05 	vldr	s14, [r3, #20]
 800283c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002840:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a44 <updateAnalogSensor+0x338>
 8002844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284c:	ee17 3a90 	vmov	r3, s15
 8002850:	b21a      	sxth	r2, r3
 8002852:	4b7d      	ldr	r3, [pc, #500]	; (8002a48 <updateAnalogSensor+0x33c>)
 8002854:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002856:	4b78      	ldr	r3, [pc, #480]	; (8002a38 <updateAnalogSensor+0x32c>)
 8002858:	899b      	ldrh	r3, [r3, #12]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <updateAnalogSensor+0x330>)
 8002864:	edd3 7a06 	vldr	s15, [r3, #24]
 8002868:	ee77 6a67 	vsub.f32	s13, s14, s15
 800286c:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <updateAnalogSensor+0x334>)
 800286e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002876:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a44 <updateAnalogSensor+0x338>
 800287a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002882:	ee17 3a90 	vmov	r3, s15
 8002886:	b21a      	sxth	r2, r3
 8002888:	4b6f      	ldr	r3, [pc, #444]	; (8002a48 <updateAnalogSensor+0x33c>)
 800288a:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <updateAnalogSensor+0x32c>)
 800288e:	89db      	ldrh	r3, [r3, #14]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002898:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <updateAnalogSensor+0x330>)
 800289a:	edd3 7a07 	vldr	s15, [r3, #28]
 800289e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <updateAnalogSensor+0x334>)
 80028a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80028a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ac:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a44 <updateAnalogSensor+0x338>
 80028b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	b21a      	sxth	r2, r3
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <updateAnalogSensor+0x33c>)
 80028c0:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <updateAnalogSensor+0x32c>)
 80028c4:	8a1b      	ldrh	r3, [r3, #16]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ce:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <updateAnalogSensor+0x330>)
 80028d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80028d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <updateAnalogSensor+0x334>)
 80028da:	ed93 7a08 	vldr	s14, [r3, #32]
 80028de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a44 <updateAnalogSensor+0x338>
 80028e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ee:	ee17 3a90 	vmov	r3, s15
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	4b54      	ldr	r3, [pc, #336]	; (8002a48 <updateAnalogSensor+0x33c>)
 80028f6:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <updateAnalogSensor+0x32c>)
 80028fa:	8a5b      	ldrh	r3, [r3, #18]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002904:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <updateAnalogSensor+0x330>)
 8002906:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800290a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <updateAnalogSensor+0x334>)
 8002910:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002918:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a44 <updateAnalogSensor+0x338>
 800291c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002924:	ee17 3a90 	vmov	r3, s15
 8002928:	b21a      	sxth	r2, r3
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <updateAnalogSensor+0x33c>)
 800292c:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800292e:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <updateAnalogSensor+0x32c>)
 8002930:	8a9b      	ldrh	r3, [r3, #20]
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800293a:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <updateAnalogSensor+0x330>)
 800293c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002940:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <updateAnalogSensor+0x334>)
 8002946:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800294a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800294e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a44 <updateAnalogSensor+0x338>
 8002952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295a:	ee17 3a90 	vmov	r3, s15
 800295e:	b21a      	sxth	r2, r3
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <updateAnalogSensor+0x33c>)
 8002962:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <updateAnalogSensor+0x32c>)
 8002966:	8adb      	ldrh	r3, [r3, #22]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <updateAnalogSensor+0x330>)
 8002972:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002976:	ee77 6a67 	vsub.f32	s13, s14, s15
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <updateAnalogSensor+0x334>)
 800297c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002984:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a44 <updateAnalogSensor+0x338>
 8002988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002990:	ee17 3a90 	vmov	r3, s15
 8002994:	b21a      	sxth	r2, r3
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <updateAnalogSensor+0x33c>)
 8002998:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <updateAnalogSensor+0x340>)
 800299c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <updateAnalogSensor+0x340>)
 80029a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029a8:	4413      	add	r3, r2
 80029aa:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <updateAnalogSensor+0x340>)
 80029ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <updateAnalogSensor+0x340>)
 80029b4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <updateAnalogSensor+0x340>)
 80029bc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <updateAnalogSensor+0x340>)
 80029c4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <updateAnalogSensor+0x340>)
 80029cc:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <updateAnalogSensor+0x340>)
 80029d4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80029d8:	4413      	add	r3, r2
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <updateAnalogSensor+0x340>)
 80029dc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <updateAnalogSensor+0x340>)
 80029e4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <updateAnalogSensor+0x344>)
 80029ec:	fb82 1203 	smull	r1, r2, r2, r3
 80029f0:	1092      	asrs	r2, r2, #2
 80029f2:	17db      	asrs	r3, r3, #31
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <updateAnalogSensor+0x348>)
 80029fa:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <updateAnalogSensor+0x34c>)
 80029fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <updateAnalogSensor+0x34c>)
 8002a06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <updateAnalogSensor+0x34c>)
 8002a0e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <updateAnalogSensor+0x34c>)
 8002a16:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <updateAnalogSensor+0x34c>)
 8002a1e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <updateAnalogSensor+0x34c>)
 8002a26:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	e012      	b.n	8002a5c <updateAnalogSensor+0x350>
 8002a36:	bf00      	nop
 8002a38:	20000290 	.word	0x20000290
 8002a3c:	2001d220 	.word	0x2001d220
 8002a40:	2001d288 	.word	0x2001d288
 8002a44:	447a0000 	.word	0x447a0000
 8002a48:	2001d260 	.word	0x2001d260
 8002a4c:	2000039c 	.word	0x2000039c
 8002a50:	66666667 	.word	0x66666667
 8002a54:	2001d204 	.word	0x2001d204
 8002a58:	200003b0 	.word	0x200003b0
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <updateAnalogSensor+0x3d0>)
 8002a5e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <updateAnalogSensor+0x3d0>)
 8002a66:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <updateAnalogSensor+0x3d0>)
 8002a6e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <updateAnalogSensor+0x3d4>)
 8002a76:	fb82 1203 	smull	r1, r2, r2, r3
 8002a7a:	1092      	asrs	r2, r2, #2
 8002a7c:	17db      	asrs	r3, r3, #31
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <updateAnalogSensor+0x3d8>)
 8002a84:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	e01a      	b.n	8002ac2 <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <updateAnalogSensor+0x3dc>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a98:	db05      	blt.n	8002aa6 <updateAnalogSensor+0x39a>
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <updateAnalogSensor+0x3dc>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <updateAnalogSensor+0x3dc>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	dc04      	bgt.n	8002abc <updateAnalogSensor+0x3b0>
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <updateAnalogSensor+0x3dc>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0b      	cmp	r3, #11
 8002ac6:	dde1      	ble.n	8002a8c <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <updateAnalogSensor+0x3e0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]

}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	200003b0 	.word	0x200003b0
 8002ae0:	66666667 	.word	0x66666667
 8002ae4:	2001d280 	.word	0x2001d280
 8002ae8:	2001d260 	.word	0x2001d260
 8002aec:	20000038 	.word	0x20000038

08002af0 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0a2      	sub	sp, #136	; 0x88
 8002af4:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002af6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002afa:	2230      	movs	r2, #48	; 0x30
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f00b f9bf 	bl	800de82 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2230      	movs	r2, #48	; 0x30
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f00b f9b8 	bl	800de82 <memset>
 8002b12:	4bd5      	ldr	r3, [pc, #852]	; (8002e68 <sensorCalibration+0x378>)
 8002b14:	617b      	str	r3, [r7, #20]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002b1c:	e026      	b.n	8002b6c <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b22:	4ad2      	ldr	r2, [pc, #840]	; (8002e6c <sensorCalibration+0x37c>)
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b32:	4acf      	ldr	r2, [pc, #828]	; (8002e70 <sensorCalibration+0x380>)
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	4ace      	ldr	r2, [pc, #824]	; (8002e74 <sensorCalibration+0x384>)
 8002b3a:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b46:	4413      	add	r3, r2
 8002b48:	3b44      	subs	r3, #68	; 0x44
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b74      	subs	r3, #116	; 0x74
 8002b5e:	4ac5      	ldr	r2, [pc, #788]	; (8002e74 <sensorCalibration+0x384>)
 8002b60:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b66:	3301      	adds	r3, #1
 8002b68:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002b6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b70:	2b0b      	cmp	r3, #11
 8002b72:	d9d4      	bls.n	8002b1e <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002b7a:	e013      	b.n	8002ba4 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002b7c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002b80:	4abd      	ldr	r2, [pc, #756]	; (8002e78 <sensorCalibration+0x388>)
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002b8c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002b90:	4aba      	ldr	r2, [pc, #744]	; (8002e7c <sensorCalibration+0x38c>)
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	4ab7      	ldr	r2, [pc, #732]	; (8002e74 <sensorCalibration+0x384>)
 8002b98:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b9a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002ba4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d9e7      	bls.n	8002b7c <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw2
 8002bac:	e1cd      	b.n	8002f4a <sensorCalibration+0x45a>

		ereaseSensorLog();
 8002bae:	f000 fb19 	bl	80031e4 <ereaseSensorLog>
		setLED2('X');
 8002bb2:	2058      	movs	r0, #88	; 0x58
 8002bb4:	f7fe ff60 	bl	8001a78 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002bbe:	e06e      	b.n	8002c9e <sensorCalibration+0x1ae>

			max_values_buffer[i] = adc_value[i];
 8002bc0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002bc4:	4aae      	ldr	r2, [pc, #696]	; (8002e80 <sensorCalibration+0x390>)
 8002bc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002bce:	ee07 2a90 	vmov	s15, r2
 8002bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b44      	subs	r3, #68	; 0x44
 8002be0:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002be4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002be8:	4aa5      	ldr	r2, [pc, #660]	; (8002e80 <sensorCalibration+0x390>)
 8002bea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bee:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002bf2:	ee07 2a90 	vmov	s15, r2
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c00:	4413      	add	r3, r2
 8002c02:	3b74      	subs	r3, #116	; 0x74
 8002c04:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c08:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c12:	4413      	add	r3, r2
 8002c14:	3b44      	subs	r3, #68	; 0x44
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c1e:	4a93      	ldr	r2, [pc, #588]	; (8002e6c <sensorCalibration+0x37c>)
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	dd0d      	ble.n	8002c4e <sensorCalibration+0x15e>
				max_values[i] = max_values_buffer[i];
 8002c32:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002c36:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002c40:	440a      	add	r2, r1
 8002c42:	3a44      	subs	r2, #68	; 0x44
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4989      	ldr	r1, [pc, #548]	; (8002e6c <sensorCalibration+0x37c>)
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c4e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b74      	subs	r3, #116	; 0x74
 8002c5c:	ed93 7a00 	vldr	s14, [r3]
 8002c60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c64:	4a82      	ldr	r2, [pc, #520]	; (8002e70 <sensorCalibration+0x380>)
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c76:	d50d      	bpl.n	8002c94 <sensorCalibration+0x1a4>
				min_values[i] = min_values_buffer[i];
 8002c78:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002c7c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002c86:	440a      	add	r2, r1
 8002c88:	3a74      	subs	r2, #116	; 0x74
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	4978      	ldr	r1, [pc, #480]	; (8002e70 <sensorCalibration+0x380>)
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002c94:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002c9e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ca2:	2b0b      	cmp	r3, #11
 8002ca4:	d98c      	bls.n	8002bc0 <sensorCalibration+0xd0>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002cac:	e073      	b.n	8002d96 <sensorCalibration+0x2a6>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cae:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cb2:	4a74      	ldr	r2, [pc, #464]	; (8002e84 <sensorCalibration+0x394>)
 8002cb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cb8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cbc:	ee07 2a90 	vmov	s15, r2
 8002cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b7c      	subs	r3, #124	; 0x7c
 8002cce:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cd2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cd6:	4a6b      	ldr	r2, [pc, #428]	; (8002e84 <sensorCalibration+0x394>)
 8002cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cdc:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002ce0:	ee07 2a90 	vmov	s15, r2
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b84      	subs	r3, #132	; 0x84
 8002cf2:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002cf6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d00:	4413      	add	r3, r2
 8002d02:	3b7c      	subs	r3, #124	; 0x7c
 8002d04:	ed93 7a00 	vldr	s14, [r3]
 8002d08:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d0c:	4a5a      	ldr	r2, [pc, #360]	; (8002e78 <sensorCalibration+0x388>)
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1e:	dd10      	ble.n	8002d42 <sensorCalibration+0x252>
				side_max_values[i] = side_adc_value[i];
 8002d20:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d24:	4a57      	ldr	r2, [pc, #348]	; (8002e84 <sensorCalibration+0x394>)
 8002d26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d2a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d2e:	ee07 2a90 	vmov	s15, r2
 8002d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d36:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <sensorCalibration+0x388>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
 8002d40:	e024      	b.n	8002d8c <sensorCalibration+0x29c>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b84      	subs	r3, #132	; 0x84
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d58:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <sensorCalibration+0x38c>)
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	d50f      	bpl.n	8002d8c <sensorCalibration+0x29c>
				side_min_values[i] = side_adc_value[i];
 8002d6c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d70:	4a44      	ldr	r2, [pc, #272]	; (8002e84 <sensorCalibration+0x394>)
 8002d72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d76:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d7a:	ee07 2a90 	vmov	s15, r2
 8002d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d82:	4a3e      	ldr	r2, [pc, #248]	; (8002e7c <sensorCalibration+0x38c>)
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d8c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002d96:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d987      	bls.n	8002cae <sensorCalibration+0x1be>
			}
		}

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002da4:	e01b      	b.n	8002dde <sensorCalibration+0x2ee>
			sensor_coefficient[i] = max_values[i] - min_values[i];
 8002da6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002daa:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <sensorCalibration+0x37c>)
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	ed93 7a00 	vldr	s14, [r3]
 8002db4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002db8:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <sensorCalibration+0x380>)
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <sensorCalibration+0x398>)
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dd4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002dde:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002de2:	2b0b      	cmp	r3, #11
 8002de4:	d9df      	bls.n	8002da6 <sensorCalibration+0x2b6>
		}
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002dec:	e010      	b.n	8002e10 <sensorCalibration+0x320>
			offset_values[i] = min_values[i];
 8002dee:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002df2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002df6:	491e      	ldr	r1, [pc, #120]	; (8002e70 <sensorCalibration+0x380>)
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	440a      	add	r2, r1
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4923      	ldr	r1, [pc, #140]	; (8002e8c <sensorCalibration+0x39c>)
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e06:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002e10:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	d9ea      	bls.n	8002dee <sensorCalibration+0x2fe>
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002e1e:	e01b      	b.n	8002e58 <sensorCalibration+0x368>
			side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e20:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <sensorCalibration+0x388>)
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	ed93 7a00 	vldr	s14, [r3]
 8002e2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <sensorCalibration+0x38c>)
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <sensorCalibration+0x3a0>)
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e52:	3301      	adds	r3, #1
 8002e54:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002e58:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d9df      	bls.n	8002e20 <sensorCalibration+0x330>
		}
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002e66:	e026      	b.n	8002eb6 <sensorCalibration+0x3c6>
 8002e68:	447a0000 	.word	0x447a0000
 8002e6c:	2001d3e8 	.word	0x2001d3e8
 8002e70:	20000000 	.word	0x20000000
 8002e74:	44bb8000 	.word	0x44bb8000
 8002e78:	2001d398 	.word	0x2001d398
 8002e7c:	20000030 	.word	0x20000030
 8002e80:	20000290 	.word	0x20000290
 8002e84:	200002a8 	.word	0x200002a8
 8002e88:	2001d288 	.word	0x2001d288
 8002e8c:	2001d220 	.word	0x2001d220
 8002e90:	2001d258 	.word	0x2001d258
			side_offset_values[i] = side_min_values[i];
 8002e94:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002e98:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002e9c:	4930      	ldr	r1, [pc, #192]	; (8002f60 <sensorCalibration+0x470>)
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	440a      	add	r2, r1
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	492f      	ldr	r1, [pc, #188]	; (8002f64 <sensorCalibration+0x474>)
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002eac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002eb6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d9ea      	bls.n	8002e94 <sensorCalibration+0x3a4>
		}

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002ec4:	e01a      	b.n	8002efc <sensorCalibration+0x40c>
			saveSensor(max_values[i]);
 8002ec6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002eca:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <sensorCalibration+0x478>)
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed8:	f000 f8a8 	bl	800302c <saveSensor>
			saveSensor(min_values[i]);
 8002edc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <sensorCalibration+0x47c>)
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	eeb0 0a67 	vmov.f32	s0, s15
 8002eee:	f000 f89d 	bl	800302c <saveSensor>
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ef2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002efc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002f00:	2b0b      	cmp	r3, #11
 8002f02:	d9e0      	bls.n	8002ec6 <sensorCalibration+0x3d6>
		}
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002f0a:	e01a      	b.n	8002f42 <sensorCalibration+0x452>
			saveSensor(side_max_values[i]);
 8002f0c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <sensorCalibration+0x480>)
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1e:	f000 f885 	bl	800302c <saveSensor>
			saveSensor(side_min_values[i]);
 8002f22:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <sensorCalibration+0x470>)
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	f000 f87a 	bl	800302c <saveSensor>
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002f38:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002f42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d9e0      	bls.n	8002f0c <sensorCalibration+0x41c>
	while(getSwitchStatus('L') == 1){                       //sw2
 8002f4a:	204c      	movs	r0, #76	; 0x4c
 8002f4c:	f004 f9dc 	bl	8007308 <getSwitchStatus>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	f43f ae2b 	beq.w	8002bae <sensorCalibration+0xbe>
		}
	}
}
 8002f58:	bf00      	nop
 8002f5a:	3788      	adds	r7, #136	; 0x88
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000030 	.word	0x20000030
 8002f64:	2001d218 	.word	0x2001d218
 8002f68:	2001d3e8 	.word	0x2001d3e8
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	2001d398 	.word	0x2001d398

08002f74 <initLog>:
static float log_debug[18000];
static float log_distance[2000];//int16_tにできるならしたい
static float log_theta[2000];//int16_tにできるならしたい
static uint16_t log_sensor_cnt, log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	writeAdd_0 = start_adress_sector6;
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <initLog+0x70>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <initLog+0x74>)
 8002f7e:	6013      	str	r3, [r2, #0]
	writeAdd_1 = start_adress_sector7;
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <initLog+0x78>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <initLog+0x7c>)
 8002f86:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <initLog+0x80>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <initLog+0x84>)
 8002f8e:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <initLog+0x88>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <initLog+0x8c>)
 8002f96:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <initLog+0x90>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <initLog+0x94>)
 8002f9e:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <initLog+0x98>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <initLog+0x9c>)
 8002fa6:	6013      	str	r3, [r2, #0]
	readAdd_0 = start_adress_sector6;
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <initLog+0x70>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <initLog+0xa0>)
 8002fae:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <initLog+0x78>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <initLog+0xa4>)
 8002fb6:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <initLog+0x80>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	; (800301c <initLog+0xa8>)
 8002fbe:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <initLog+0x88>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	; (8003020 <initLog+0xac>)
 8002fc6:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <initLog+0x90>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <initLog+0xb0>)
 8002fce:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <initLog+0x98>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <initLog+0xb4>)
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	08012258 	.word	0x08012258
 8002fe8:	2001d27c 	.word	0x2001d27c
 8002fec:	0801225c 	.word	0x0801225c
 8002ff0:	2001d200 	.word	0x2001d200
 8002ff4:	08012260 	.word	0x08012260
 8002ff8:	2001d254 	.word	0x2001d254
 8002ffc:	08012264 	.word	0x08012264
 8003000:	2001d210 	.word	0x2001d210
 8003004:	08012268 	.word	0x08012268
 8003008:	2001d1f8 	.word	0x2001d1f8
 800300c:	0801226c 	.word	0x0801226c
 8003010:	2001d20c 	.word	0x2001d20c
 8003014:	2001d1fc 	.word	0x2001d1fc
 8003018:	2001d208 	.word	0x2001d208
 800301c:	2001d214 	.word	0x2001d214
 8003020:	2001d284 	.word	0x2001d284
 8003024:	2001d278 	.word	0x2001d278
 8003028:	2001d250 	.word	0x2001d250

0800302c <saveSensor>:

void saveSensor(float sensor){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_0, sensor);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <saveSensor+0x2c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	ed97 0a01 	vldr	s0, [r7, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fad0 	bl	80015e4 <FLASH_Write_Word_F>
	writeAdd_0 += 0x04;
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <saveSensor+0x2c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3304      	adds	r3, #4
 800304a:	4a03      	ldr	r2, [pc, #12]	; (8003058 <saveSensor+0x2c>)
 800304c:	6013      	str	r3, [r2, #0]
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2001d27c 	.word	0x2001d27c

0800305c <saveDistance>:

void saveDistance(float distance){
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <saveDistance+0x2c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	ed97 0a01 	vldr	s0, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fab8 	bl	80015e4 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <saveDistance+0x2c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3304      	adds	r3, #4
 800307a:	4a03      	ldr	r2, [pc, #12]	; (8003088 <saveDistance+0x2c>)
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2001d200 	.word	0x2001d200

0800308c <saveTheta>:

void saveTheta(float theta){
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <saveTheta+0x2c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	ed97 0a01 	vldr	s0, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe faa0 	bl	80015e4 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <saveTheta+0x2c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <saveTheta+0x2c>)
 80030ac:	6013      	str	r3, [r2, #0]
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2001d254 	.word	0x2001d254

080030bc <saveCross>:

void saveCross(float cross){
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <saveCross+0x2c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fa88 	bl	80015e4 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <saveCross+0x2c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <saveCross+0x2c>)
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2001d210 	.word	0x2001d210

080030ec <saveSide>:

void saveSide(float side){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <saveSide+0x2c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fa70 	bl	80015e4 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <saveSide+0x2c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3304      	adds	r3, #4
 800310a:	4a03      	ldr	r2, [pc, #12]	; (8003118 <saveSide+0x2c>)
 800310c:	6013      	str	r3, [r2, #0]
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2001d1f8 	.word	0x2001d1f8

0800311c <saveDebug>:

void saveDebug(float value){
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <saveDebug+0x2c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	ed97 0a01 	vldr	s0, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fa58 	bl	80015e4 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <saveDebug+0x2c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3304      	adds	r3, #4
 800313a:	4a03      	ldr	r2, [pc, #12]	; (8003148 <saveDebug+0x2c>)
 800313c:	6013      	str	r3, [r2, #0]
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2001d20c 	.word	0x2001d20c

0800314c <ereaseLog>:


void ereaseLog(){
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003150:	2007      	movs	r0, #7
 8003152:	f7fe fa27 	bl	80015a4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8003156:	2008      	movs	r0, #8
 8003158:	f7fe fa24 	bl	80015a4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 800315c:	2009      	movs	r0, #9
 800315e:	f7fe fa21 	bl	80015a4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8003162:	200a      	movs	r0, #10
 8003164:	f7fe fa1e 	bl	80015a4 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8003168:	200b      	movs	r0, #11
 800316a:	f7fe fa1b 	bl	80015a4 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <ereaseLog+0x50>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <ereaseLog+0x54>)
 8003174:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <ereaseLog+0x58>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <ereaseLog+0x5c>)
 800317c:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <ereaseLog+0x60>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <ereaseLog+0x64>)
 8003184:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <ereaseLog+0x68>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <ereaseLog+0x6c>)
 800318c:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <ereaseLog+0x70>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <ereaseLog+0x74>)
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	0801225c 	.word	0x0801225c
 80031a0:	2001d200 	.word	0x2001d200
 80031a4:	08012260 	.word	0x08012260
 80031a8:	2001d254 	.word	0x2001d254
 80031ac:	08012264 	.word	0x08012264
 80031b0:	2001d210 	.word	0x2001d210
 80031b4:	08012268 	.word	0x08012268
 80031b8:	2001d1f8 	.word	0x2001d1f8
 80031bc:	0801226c 	.word	0x0801226c
 80031c0:	2001d20c 	.word	0x2001d20c

080031c4 <ereaseDebugLog>:

void ereaseDebugLog(){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80031c8:	200b      	movs	r0, #11
 80031ca:	f7fe f9eb 	bl	80015a4 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 80031ce:	4b03      	ldr	r3, [pc, #12]	; (80031dc <ereaseDebugLog+0x18>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <ereaseDebugLog+0x1c>)
 80031d4:	6013      	str	r3, [r2, #0]
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	0801226c 	.word	0x0801226c
 80031e0:	2001d20c 	.word	0x2001d20c

080031e4 <ereaseSensorLog>:

void ereaseSensorLog(){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_6);
 80031e8:	2006      	movs	r0, #6
 80031ea:	f7fe f9db 	bl	80015a4 <FLASH_EreaseSector>

	writeAdd_0= start_adress_sector6;
 80031ee:	4b03      	ldr	r3, [pc, #12]	; (80031fc <ereaseSensorLog+0x18>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a03      	ldr	r2, [pc, #12]	; (8003200 <ereaseSensorLog+0x1c>)
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	08012258 	.word	0x08012258
 8003200:	2001d27c 	.word	0x2001d27c

08003204 <getDistanceLogSize>:

uint16_t getSensorLogSize(){
	return log_sensor_cnt;
}

uint16_t getDistanceLogSize(){
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <getDistanceLogSize+0x14>)
 800320a:	881b      	ldrh	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20015d8e 	.word	0x20015d8e

0800321c <getDebugLogSize>:

uint16_t getSideLogSize(){
	return log_side_cnt;
}

uint16_t getDebugLogSize(){
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <getDebugLogSize+0x14>)
 8003222:	881b      	ldrh	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20015d96 	.word	0x20015d96

08003234 <loadSensor>:

void loadSensor(){
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	80fb      	strh	r3, [r7, #6]
	readAdd_0 = start_adress_sector6;
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <loadSensor+0x6c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <loadSensor+0x70>)
 8003244:	6013      	str	r3, [r2, #0]
	log_sensor_cnt = 0;
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <loadSensor+0x74>)
 8003248:	2200      	movs	r2, #0
 800324a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_sensor[i] = *(float*)readAdd_0;
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <loadSensor+0x70>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4915      	ldr	r1, [pc, #84]	; (80032ac <loadSensor+0x78>)
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	601a      	str	r2, [r3, #0]
		if(isnan(log_sensor[i]) != 0){
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <loadSensor+0x78>)
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef4 7a67 	vcmp.f32	s15, s15
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	d60e      	bvs.n	8003292 <loadSensor+0x5e>
			break;
		}
		else{
			log_sensor_cnt++;
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <loadSensor+0x74>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <loadSensor+0x74>)
 800327e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_0 += 0x04;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <loadSensor+0x70>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3304      	adds	r3, #4
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <loadSensor+0x70>)
 8003288:	6013      	str	r3, [r2, #0]
		i++;
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	3301      	adds	r3, #1
 800328e:	80fb      	strh	r3, [r7, #6]
		log_sensor[i] = *(float*)readAdd_0;
 8003290:	e7dc      	b.n	800324c <loadSensor+0x18>
			break;
 8003292:	bf00      	nop
	}
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	08012258 	.word	0x08012258
 80032a4:	2001d1fc 	.word	0x2001d1fc
 80032a8:	20015d8c 	.word	0x20015d8c
 80032ac:	200003c4 	.word	0x200003c4

080032b0 <loadDistance>:

void loadDistance(){
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <loadDistance+0x6c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <loadDistance+0x70>)
 80032c0:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <loadDistance+0x74>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <loadDistance+0x70>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	4915      	ldr	r1, [pc, #84]	; (8003328 <loadDistance+0x78>)
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4a12      	ldr	r2, [pc, #72]	; (8003328 <loadDistance+0x78>)
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	eef4 7a67 	vcmp.f32	s15, s15
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	d60e      	bvs.n	800330e <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <loadDistance+0x74>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <loadDistance+0x74>)
 80032fa:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <loadDistance+0x70>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3304      	adds	r3, #4
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <loadDistance+0x70>)
 8003304:	6013      	str	r3, [r2, #0]
		i++;
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	3301      	adds	r3, #1
 800330a:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 800330c:	e7dc      	b.n	80032c8 <loadDistance+0x18>
			break;
 800330e:	bf00      	nop
	}
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	0801225c 	.word	0x0801225c
 8003320:	2001d208 	.word	0x2001d208
 8003324:	20015d8e 	.word	0x20015d8e
 8003328:	20011f0c 	.word	0x20011f0c

0800332c <loadTheta>:

void loadTheta(){
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <loadTheta+0x6c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <loadTheta+0x70>)
 800333c:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 800333e:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <loadTheta+0x74>)
 8003340:	2200      	movs	r2, #0
 8003342:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <loadTheta+0x70>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	4915      	ldr	r1, [pc, #84]	; (80033a4 <loadTheta+0x78>)
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <loadTheta+0x78>)
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eef4 7a67 	vcmp.f32	s15, s15
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d60e      	bvs.n	800338a <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <loadTheta+0x74>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <loadTheta+0x74>)
 8003376:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <loadTheta+0x70>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3304      	adds	r3, #4
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <loadTheta+0x70>)
 8003380:	6013      	str	r3, [r2, #0]
		i++;
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	3301      	adds	r3, #1
 8003386:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003388:	e7dc      	b.n	8003344 <loadTheta+0x18>
			break;
 800338a:	bf00      	nop
	}
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	08012260 	.word	0x08012260
 800339c:	2001d214 	.word	0x2001d214
 80033a0:	20015d90 	.word	0x20015d90
 80033a4:	20013e4c 	.word	0x20013e4c

080033a8 <loadCross>:

void loadCross(){
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <loadCross+0x6c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <loadCross+0x70>)
 80033b8:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 80033ba:	4b18      	ldr	r3, [pc, #96]	; (800341c <loadCross+0x74>)
 80033bc:	2200      	movs	r2, #0
 80033be:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <loadCross+0x70>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	4915      	ldr	r1, [pc, #84]	; (8003420 <loadCross+0x78>)
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	4a12      	ldr	r2, [pc, #72]	; (8003420 <loadCross+0x78>)
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eef4 7a67 	vcmp.f32	s15, s15
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	d60e      	bvs.n	8003406 <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <loadCross+0x74>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <loadCross+0x74>)
 80033f2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <loadCross+0x70>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <loadCross+0x70>)
 80033fc:	6013      	str	r3, [r2, #0]
		i++;
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	3301      	adds	r3, #1
 8003402:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 8003404:	e7dc      	b.n	80033c0 <loadCross+0x18>
			break;
 8003406:	bf00      	nop
	}
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	08012264 	.word	0x08012264
 8003418:	2001d284 	.word	0x2001d284
 800341c:	20015d92 	.word	0x20015d92
 8003420:	2000043c 	.word	0x2000043c

08003424 <loadSide>:

void loadSide(){
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <loadSide+0x6c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <loadSide+0x70>)
 8003434:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <loadSide+0x74>)
 8003438:	2200      	movs	r2, #0
 800343a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <loadSide+0x70>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4915      	ldr	r1, [pc, #84]	; (800349c <loadSide+0x78>)
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <loadSide+0x78>)
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	eef4 7a67 	vcmp.f32	s15, s15
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	d60e      	bvs.n	8003482 <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <loadSide+0x74>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <loadSide+0x74>)
 800346e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <loadSide+0x70>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <loadSide+0x70>)
 8003478:	6013      	str	r3, [r2, #0]
		i++;
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	3301      	adds	r3, #1
 800347e:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003480:	e7dc      	b.n	800343c <loadSide+0x18>
			break;
 8003482:	bf00      	nop
	}
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	08012268 	.word	0x08012268
 8003494:	2001d278 	.word	0x2001d278
 8003498:	20015d94 	.word	0x20015d94
 800349c:	20000504 	.word	0x20000504

080034a0 <loadDebug>:

void loadDebug(){
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <loadDebug+0x6c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <loadDebug+0x70>)
 80034b0:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <loadDebug+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <loadDebug+0x70>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4915      	ldr	r1, [pc, #84]	; (8003518 <loadDebug+0x78>)
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <loadDebug+0x78>)
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eef4 7a67 	vcmp.f32	s15, s15
 80034da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034de:	d60e      	bvs.n	80034fe <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <loadDebug+0x74>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <loadDebug+0x74>)
 80034ea:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <loadDebug+0x70>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3304      	adds	r3, #4
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <loadDebug+0x70>)
 80034f4:	6013      	str	r3, [r2, #0]
		i++;
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	3301      	adds	r3, #1
 80034fa:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80034fc:	e7dc      	b.n	80034b8 <loadDebug+0x18>
			break;
 80034fe:	bf00      	nop
	}
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	0801226c 	.word	0x0801226c
 8003510:	2001d250 	.word	0x2001d250
 8003514:	20015d96 	.word	0x20015d96
 8003518:	200005cc 	.word	0x200005cc

0800351c <getSensorArrayPointer>:

const float *getSensorArrayPointer(){
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	return log_sensor;
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <getSensorArrayPointer+0x10>)
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	200003c4 	.word	0x200003c4

08003530 <getDistanceArrayPointer>:

const float *getDistanceArrayPointer(){
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	return log_distance;
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <getDistanceArrayPointer+0x10>)
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	20011f0c 	.word	0x20011f0c

08003544 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	return log_theta;
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <getThetaArrayPointer+0x10>)
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	20013e4c 	.word	0x20013e4c

08003558 <getDistanceLog>:

float getSensorLog(uint16_t idx){
	return log_sensor[idx];
}

float getDistanceLog(uint16_t idx){
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	4a06      	ldr	r2, [pc, #24]	; (8003580 <getDistanceLog+0x28>)
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	ee07 3a90 	vmov	s15, r3
}
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20011f0c 	.word	0x20011f0c

08003584 <getDebugLog>:

float getSideLog(uint16_t idx){
	return log_side[idx];
}

float getDebugLog(uint16_t idx){
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <getDebugLog+0x28>)
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	ee07 3a90 	vmov	s15, r3
}
 800359c:	eeb0 0a67 	vmov.f32	s0, s15
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	200005cc 	.word	0x200005cc

080035b0 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80035c4:	2200      	movs	r2, #0
 80035c6:	2104      	movs	r1, #4
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <read_byte+0x50>)
 80035ca:	f005 fc4f 	bl	8008e6c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80035ce:	f107 010f 	add.w	r1, r7, #15
 80035d2:	2364      	movs	r3, #100	; 0x64
 80035d4:	2201      	movs	r2, #1
 80035d6:	480b      	ldr	r0, [pc, #44]	; (8003604 <read_byte+0x54>)
 80035d8:	f006 fa3a 	bl	8009a50 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80035dc:	f107 010e 	add.w	r1, r7, #14
 80035e0:	2364      	movs	r3, #100	; 0x64
 80035e2:	2201      	movs	r2, #1
 80035e4:	4807      	ldr	r0, [pc, #28]	; (8003604 <read_byte+0x54>)
 80035e6:	f006 fb67 	bl	8009cb8 <HAL_SPI_Receive>
		CS_SET;
 80035ea:	2201      	movs	r2, #1
 80035ec:	2104      	movs	r1, #4
 80035ee:	4804      	ldr	r0, [pc, #16]	; (8003600 <read_byte+0x50>)
 80035f0:	f005 fc3c 	bl	8008e6c <HAL_GPIO_WritePin>

	return val;
 80035f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40020c00 	.word	0x40020c00
 8003604:	2001d4e4 	.word	0x2001d4e4

08003608 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	460a      	mov	r2, r1
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	4613      	mov	r3, r2
 8003616:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361e:	b2db      	uxtb	r3, r3
 8003620:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8003622:	2200      	movs	r2, #0
 8003624:	2104      	movs	r1, #4
 8003626:	480c      	ldr	r0, [pc, #48]	; (8003658 <write_byte+0x50>)
 8003628:	f005 fc20 	bl	8008e6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800362c:	f107 010f 	add.w	r1, r7, #15
 8003630:	2364      	movs	r3, #100	; 0x64
 8003632:	2201      	movs	r2, #1
 8003634:	4809      	ldr	r0, [pc, #36]	; (800365c <write_byte+0x54>)
 8003636:	f006 fa0b 	bl	8009a50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800363a:	1db9      	adds	r1, r7, #6
 800363c:	2364      	movs	r3, #100	; 0x64
 800363e:	2201      	movs	r2, #1
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <write_byte+0x54>)
 8003642:	f006 fb39 	bl	8009cb8 <HAL_SPI_Receive>
	CS_SET;
 8003646:	2201      	movs	r2, #1
 8003648:	2104      	movs	r1, #4
 800364a:	4803      	ldr	r0, [pc, #12]	; (8003658 <write_byte+0x50>)
 800364c:	f005 fc0e 	bl	8008e6c <HAL_GPIO_WritePin>
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40020c00 	.word	0x40020c00
 800365c:	2001d4e4 	.word	0x2001d4e4

08003660 <IMU_init>:

uint8_t IMU_init() {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 800366a:	2075      	movs	r0, #117	; 0x75
 800366c:	f7ff ffa0 	bl	80035b0 <read_byte>
 8003670:	4603      	mov	r3, r0
 8003672:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	2b70      	cmp	r3, #112	; 0x70
 8003678:	d110      	bne.n	800369c <IMU_init+0x3c>
		ret = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800367e:	2100      	movs	r1, #0
 8003680:	206b      	movs	r0, #107	; 0x6b
 8003682:	f7ff ffc1 	bl	8003608 <write_byte>
		HAL_Delay(100);
 8003686:	2064      	movs	r0, #100	; 0x64
 8003688:	f003 ffbe 	bl	8007608 <HAL_Delay>
		write_byte(0x1A, 0x00);
 800368c:	2100      	movs	r1, #0
 800368e:	201a      	movs	r0, #26
 8003690:	f7ff ffba 	bl	8003608 <write_byte>
		write_byte(0x1B, 0x18);
 8003694:	2118      	movs	r1, #24
 8003696:	201b      	movs	r0, #27
 8003698:	f7ff ffb6 	bl	8003608 <write_byte>
	}
	return ret;
 800369c:	79fb      	ldrb	r3, [r7, #7]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <read_gyro_data>:

void read_gyro_data() {
 80036a8:	b598      	push	{r3, r4, r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80036ac:	2047      	movs	r0, #71	; 0x47
 80036ae:	f7ff ff7f 	bl	80035b0 <read_byte>
 80036b2:	4603      	mov	r3, r0
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	b21c      	sxth	r4, r3
 80036b8:	2048      	movs	r0, #72	; 0x48
 80036ba:	f7ff ff79 	bl	80035b0 <read_byte>
 80036be:	4603      	mov	r3, r0
 80036c0:	b21b      	sxth	r3, r3
 80036c2:	4323      	orrs	r3, r4
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	4b02      	ldr	r3, [pc, #8]	; (80036d0 <read_gyro_data+0x28>)
 80036c8:	801a      	strh	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	bd98      	pop	{r3, r4, r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2001d418 	.word	0x2001d418
 80036d4:	00000000 	.word	0x00000000

080036d8 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80036d8:	b5b0      	push	{r4, r5, r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 2400, ki = 30000, kd = 0.0;
 80036de:	4b60      	ldr	r3, [pc, #384]	; (8003860 <calculateVelocityControlFlip+0x188>)
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <calculateVelocityControlFlip+0x18c>)
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 80036f2:	f000 f919 	bl	8003928 <getCurrentVelocity>
 80036f6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 80036fa:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <calculateVelocityControlFlip+0x190>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f040 80a3 	bne.w	800384a <calculateVelocityControlFlip+0x172>
		if(i_clear_flag == 1){
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <calculateVelocityControlFlip+0x194>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <calculateVelocityControlFlip+0x42>
			i = 0;
 800370c:	4b58      	ldr	r3, [pc, #352]	; (8003870 <calculateVelocityControlFlip+0x198>)
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003714:	4b55      	ldr	r3, [pc, #340]	; (800386c <calculateVelocityControlFlip+0x194>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 800371a:	f000 f8d3 	bl	80038c4 <setvariablespeed>
 800371e:	eeb0 7a40 	vmov.f32	s14, s0
 8003722:	edd7 7a03 	vldr	s15, [r7, #12]
 8003726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372a:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 800372e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003732:	edd7 7a04 	vldr	s15, [r7, #16]
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <calculateVelocityControlFlip+0x198>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc ff00 	bl	8000548 <__aeabi_f2d>
 8003748:	4604      	mov	r4, r0
 800374a:	460d      	mov	r5, r1
 800374c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003750:	edd7 7a04 	vldr	s15, [r7, #16]
 8003754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc fef4 	bl	8000548 <__aeabi_f2d>
 8003760:	a33d      	add	r3, pc, #244	; (adr r3, 8003858 <calculateVelocityControlFlip+0x180>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc ff47 	bl	80005f8 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fc fd8b 	bl	800028c <__adddf3>
 8003776:	4603      	mov	r3, r0
 8003778:	460c      	mov	r4, r1
 800377a:	4618      	mov	r0, r3
 800377c:	4621      	mov	r1, r4
 800377e:	f7fd fa33 	bl	8000be8 <__aeabi_d2f>
 8003782:	4602      	mov	r2, r0
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <calculateVelocityControlFlip+0x198>)
 8003786:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 8003788:	4b39      	ldr	r3, [pc, #228]	; (8003870 <calculateVelocityControlFlip+0x198>)
 800378a:	ed93 7a00 	vldr	s14, [r3]
 800378e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <calculateVelocityControlFlip+0x19c>)
 8003798:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 800379c:	4a36      	ldr	r2, [pc, #216]	; (8003878 <calculateVelocityControlFlip+0x1a0>)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <calculateVelocityControlFlip+0x198>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <calculateVelocityControlFlip+0x1a4>)
 80037a8:	6013      	str	r3, [r2, #0]
		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		//velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす

		if(getControl_Mode() == 1){
 80037aa:	f003 f9bf 	bl	8006b2c <getControl_Mode>
 80037ae:	eeb0 7a40 	vmov.f32	s14, s0
 80037b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80037b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d10e      	bne.n	80037de <calculateVelocityControlFlip+0x106>
		    velocity_control_term = p + i + d;
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <calculateVelocityControlFlip+0x198>)
 80037c2:	ed93 7a00 	vldr	s14, [r3]
 80037c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <calculateVelocityControlFlip+0x1a8>)
 80037d8:	edc3 7a00 	vstr	s15, [r3]
 80037dc:	e032      	b.n	8003844 <calculateVelocityControlFlip+0x16c>
		}
		else if(getControl_Mode() == 2){
 80037de:	f003 f9a5 	bl	8006b2c <getControl_Mode>
 80037e2:	eeb0 7a40 	vmov.f32	s14, s0
 80037e6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80037ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	d10e      	bne.n	8003812 <calculateVelocityControlFlip+0x13a>
			velocity_control_term = p + i + d;
 80037f4:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <calculateVelocityControlFlip+0x198>)
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	edd7 7a01 	vldr	s15, [r7, #4]
 8003806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <calculateVelocityControlFlip+0x1a8>)
 800380c:	edc3 7a00 	vstr	s15, [r3]
 8003810:	e018      	b.n	8003844 <calculateVelocityControlFlip+0x16c>
		}
		else if(getControl_Mode() == 5){
 8003812:	f003 f98b 	bl	8006b2c <getControl_Mode>
 8003816:	eeb0 7a40 	vmov.f32	s14, s0
 800381a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800381e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	d10d      	bne.n	8003844 <calculateVelocityControlFlip+0x16c>
			//velocity_control_term = (p + i + d) + target_acceleration;//速度PID ＋ フィードフォワード制御 2自由度制御
			velocity_control_term = p + i + d;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <calculateVelocityControlFlip+0x198>)
 800382a:	ed93 7a00 	vldr	s14, [r3]
 800382e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003836:	edd7 7a01 	vldr	s15, [r7, #4]
 800383a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <calculateVelocityControlFlip+0x1a8>)
 8003840:	edc3 7a00 	vstr	s15, [r3]
		}

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 8003844:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <calculateVelocityControlFlip+0x1ac>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6013      	str	r3, [r2, #0]

	}

}
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bdb0      	pop	{r4, r5, r7, pc}
 8003852:	bf00      	nop
 8003854:	f3af 8000 	nop.w
 8003858:	d2f1a9fc 	.word	0xd2f1a9fc
 800385c:	3f50624d 	.word	0x3f50624d
 8003860:	45160000 	.word	0x45160000
 8003864:	46ea6000 	.word	0x46ea6000
 8003868:	20015d98 	.word	0x20015d98
 800386c:	20015d99 	.word	0x20015d99
 8003870:	20015da8 	.word	0x20015da8
 8003874:	2001d424 	.word	0x2001d424
 8003878:	2001d434 	.word	0x2001d434
 800387c:	2001d42c 	.word	0x2001d42c
 8003880:	20015d9c 	.word	0x20015d9c
 8003884:	20015dac 	.word	0x20015dac

08003888 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	return velocity_control_term;
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <getVelocityControlTerm+0x18>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	ee07 3a90 	vmov	s15, r3
}
 8003894:	eeb0 0a67 	vmov.f32	s0, s15
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20015d9c 	.word	0x20015d9c

080038a4 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <setTargetVelocity+0x1c>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20015da0 	.word	0x20015da0

080038c4 <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 80038c8:	f7fd fdf6 	bl	80014b8 <getspeedcount>
 80038cc:	eeb0 7a40 	vmov.f32	s14, s0
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <setvariablespeed+0x5c>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	db04      	blt.n	80038ea <setvariablespeed+0x26>
		variable_speed = target_velocity;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <setvariablespeed+0x5c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <setvariablespeed+0x60>)
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e012      	b.n	8003910 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 80038ea:	f7fd fde5 	bl	80014b8 <getspeedcount>
 80038ee:	eeb0 7a40 	vmov.f32	s14, s0
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <setvariablespeed+0x5c>)
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003900:	d506      	bpl.n	8003910 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 8003902:	f7fd fdd9 	bl	80014b8 <getspeedcount>
 8003906:	eef0 7a40 	vmov.f32	s15, s0
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <setvariablespeed+0x60>)
 800390c:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <setvariablespeed+0x60>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	ee07 3a90 	vmov	s15, r3
}
 8003918:	eeb0 0a67 	vmov.f32	s0, s15
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20015da0 	.word	0x20015da0
 8003924:	20015da4 	.word	0x20015da4

08003928 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	80fb      	strh	r3, [r7, #6]
 8003932:	2300      	movs	r3, #0
 8003934:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003936:	1d3a      	adds	r2, r7, #4
 8003938:	1dbb      	adds	r3, r7, #6
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd fce9 	bl	8001314 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003946:	461a      	mov	r2, r3
 8003948:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	0fda      	lsrs	r2, r3, #31
 8003950:	4413      	add	r3, r2
 8003952:	105b      	asrs	r3, r3, #1
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395c:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7fc fdf1 	bl	8000548 <__aeabi_f2d>
 8003966:	a30d      	add	r3, pc, #52	; (adr r3, 800399c <getCurrentVelocity+0x74>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe44 	bl	80005f8 <__aeabi_dmul>
 8003970:	4603      	mov	r3, r0
 8003972:	460c      	mov	r4, r1
 8003974:	4618      	mov	r0, r3
 8003976:	4621      	mov	r1, r4
 8003978:	f7fd f936 	bl	8000be8 <__aeabi_d2f>
 800397c:	4603      	mov	r3, r0
 800397e:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003980:	4a05      	ldr	r2, [pc, #20]	; (8003998 <getCurrentVelocity+0x70>)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	ee07 3a90 	vmov	s15, r3
}
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	bf00      	nop
 8003998:	2001d428 	.word	0x2001d428
 800399c:	2df331e5 	.word	0x2df331e5
 80039a0:	3f878fcc 	.word	0x3f878fcc

080039a4 <getTargetVelocity>:

float getTargetVelocity()
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
	return target_velocity;
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <getTargetVelocity+0x18>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	ee07 3a90 	vmov	s15, r3
}
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20015da0 	.word	0x20015da0

080039c0 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <startVelocityControl+0x1c>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <startVelocityControl+0x20>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20015d98 	.word	0x20015d98
 80039e0:	20015d99 	.word	0x20015d99

080039e4 <stopVelocityControl>:

void stopVelocityControl(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <stopVelocityControl+0x14>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	20015d98 	.word	0x20015d98

080039fc <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <setClearFlagOfVelocityControlI+0x14>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	20015d99 	.word	0x20015d99
 8003a14:	00000000 	.word	0x00000000

08003a18 <CreateXYcoordinates>:
static float Output_angularvelocity;

static bool check_flag;

void CreateXYcoordinates()
{
 8003a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a1c:	b0a0      	sub	sp, #128	; 0x80
 8003a1e:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 8003a20:	f7ff fd86 	bl	8003530 <getDistanceArrayPointer>
 8003a24:	63b8      	str	r0, [r7, #56]	; 0x38
	p_theta = getThetaArrayPointer();
 8003a26:	f7ff fd8d 	bl	8003544 <getThetaArrayPointer>
 8003a2a:	6378      	str	r0, [r7, #52]	; 0x34
	float temp_distance, temp_theta;
	float deltaX = 0, deltaY = 0;
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
	float prev_x = 0, prev_y = 0, prev_atan2 = 0;
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
	float prev_x2 = 0, prev_y2 = 0;
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
	float atan2th = 0;
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	67bb      	str	r3, [r7, #120]	; 0x78
	float EuclideanDistance = 0;
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
	float EuclideanDistance_count = 0;
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	677b      	str	r3, [r7, #116]	; 0x74
	float delta_ang = 0;
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	673b      	str	r3, [r7, #112]	; 0x70
	int16_t X_tablesize = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	float x = 0, y = 0, th = 0;
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	663b      	str	r3, [r7, #96]	; 0x60
	uint16_t log_size = getDistanceLogSize();
 8003a86:	f7ff fbbd 	bl	8003204 <getDistanceLogSize>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	827b      	strh	r3, [r7, #18]

	for(uint16_t i = 0; i < log_size; i++){
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a94:	e0aa      	b.n	8003bec <CreateXYcoordinates+0x1d4>
		temp_distance = p_distance[i];
 8003a96:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 8003aa4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aac:	4413      	add	r3, r2
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	67fb      	str	r3, [r7, #124]	; 0x7c

		if(temp_theta == 0) temp_theta = 0.00001;
 8003ab2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003ab6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	d101      	bne.n	8003ac4 <CreateXYcoordinates+0xac>
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <CreateXYcoordinates+0x2cc>)
 8003ac2:	67fb      	str	r3, [r7, #124]	; 0x7c

		x = x + temp_distance * cos(th + temp_theta/2);//distanceとthetaからx座標を計算
 8003ac4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003ac6:	f7fc fd3f 	bl	8000548 <__aeabi_f2d>
 8003aca:	4604      	mov	r4, r0
 8003acc:	460d      	mov	r5, r1
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc fd3a 	bl	8000548 <__aeabi_f2d>
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	4689      	mov	r9, r1
 8003ad8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003adc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ae0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ae4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aec:	ee17 0a90 	vmov	r0, s15
 8003af0:	f7fc fd2a 	bl	8000548 <__aeabi_f2d>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	ec43 2b10 	vmov	d0, r2, r3
 8003afc:	f008 f814 	bl	800bb28 <cos>
 8003b00:	ec53 2b10 	vmov	r2, r3, d0
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fc fd76 	bl	80005f8 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fbba 	bl	800028c <__adddf3>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	4621      	mov	r1, r4
 8003b20:	f7fd f862 	bl	8000be8 <__aeabi_d2f>
 8003b24:	4603      	mov	r3, r0
 8003b26:	66bb      	str	r3, [r7, #104]	; 0x68
		y = y + temp_distance * sin(th + temp_theta/2);//distanceとthetaからy座標を計算
 8003b28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003b2a:	f7fc fd0d 	bl	8000548 <__aeabi_f2d>
 8003b2e:	4604      	mov	r4, r0
 8003b30:	460d      	mov	r5, r1
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc fd08 	bl	8000548 <__aeabi_f2d>
 8003b38:	4680      	mov	r8, r0
 8003b3a:	4689      	mov	r9, r1
 8003b3c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003b40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b50:	ee17 0a90 	vmov	r0, s15
 8003b54:	f7fc fcf8 	bl	8000548 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	ec43 2b10 	vmov	d0, r2, r3
 8003b60:	f008 f826 	bl	800bbb0 <sin>
 8003b64:	ec53 2b10 	vmov	r2, r3, d0
 8003b68:	4640      	mov	r0, r8
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	f7fc fd44 	bl	80005f8 <__aeabi_dmul>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc fb88 	bl	800028c <__adddf3>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	f7fd f830 	bl	8000be8 <__aeabi_d2f>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	667b      	str	r3, [r7, #100]	; 0x64
		th = th + temp_theta;//累積角度を計算
 8003b8c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003b90:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b98:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		}*/

		//EuclideanDistance = sqrt((x - prev_x) * (x - prev_x) + (y - prev_y) * (y - prev_y));//ユークリッド距離の計算
		//Total_length_of_course += EuclideanDistance;

		X_table[i] = x;//int16で保存するために値を加工
 8003b9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ba0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba8:	ee17 2a90 	vmov	r2, s15
 8003bac:	b211      	sxth	r1, r2
 8003bae:	4a4e      	ldr	r2, [pc, #312]	; (8003ce8 <CreateXYcoordinates+0x2d0>)
 8003bb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Y_table[i] = y;//int16で保存するために値を加工
 8003bb4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003bb8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc0:	ee17 2a90 	vmov	r2, s15
 8003bc4:	b211      	sxth	r1, r2
 8003bc6:	4a49      	ldr	r2, [pc, #292]	; (8003cec <CreateXYcoordinates+0x2d4>)
 8003bc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//Theta_table[i] = atan2th * 1000;//int16で保存するために値を加工
		//EuclideanDistance_table[i] = EuclideanDistance * 100;

		if(i != 0){
 8003bcc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <CreateXYcoordinates+0x1ca>
			X_tablesize++;
 8003bd4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	for(uint16_t i = 0; i < log_size; i++){
 8003be2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003be6:	3301      	adds	r3, #1
 8003be8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003bec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003bf0:	8a7b      	ldrh	r3, [r7, #18]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	f4ff af4f 	bcc.w	8003a96 <CreateXYcoordinates+0x7e>
		}
	}

	for(uint16_t i = 1; i < X_tablesize; i++){
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003bfe:	e245      	b.n	800408c <CreateXYcoordinates+0x674>
		int windowSize;
		int remaining_points = X_tablesize - i + 1;
 8003c00:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 8003c04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

		windowSize = (i < remaining_points) ? i : remaining_points;
 8003c0e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bfa8      	it	ge
 8003c18:	4613      	movge	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
		windowSize = (windowSize < Variable_Window_Moving_Average) ? windowSize : Variable_Window_Moving_Average;//将来的には，ラインから?mmズレるみたいな選択ができるようにしたい
 8003c1c:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <CreateXYcoordinates+0x2d8>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bfa8      	it	ge
 8003c28:	4613      	movge	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]

		float temp_x, temp_y;

		prev_x = temp_x;
 8003c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
		prev_y = temp_y;
 8003c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24

		 if (i <= windowSize) {
 8003c34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	db45      	blt.n	8003cca <CreateXYcoordinates+0x2b2>
			float sum_x = 0, sum_y = 0;
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	653b      	str	r3, [r7, #80]	; 0x50
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	64fb      	str	r3, [r7, #76]	; 0x4c
			for (int j = 0; j < i; j++){
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4e:	e01e      	b.n	8003c8e <CreateXYcoordinates+0x276>
				sum_x += X_table[j];
 8003c50:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <CreateXYcoordinates+0x2d0>)
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				sum_y += Y_table[j];
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <CreateXYcoordinates+0x2d4>)
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c84:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			for (int j = 0; j < i; j++){
 8003c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c8e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c94:	429a      	cmp	r2, r3
 8003c96:	dbdb      	blt.n	8003c50 <CreateXYcoordinates+0x238>
			}
			temp_x = sum_x / i;
 8003c98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c9c:	ee07 3a90 	vmov	s15, r3
 8003ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ca4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			temp_y = sum_y / i;
 8003cb0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cbc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8003cc8:	e04e      	b.n	8003d68 <CreateXYcoordinates+0x350>
		}
		else
		{
			float sum_x = 0, sum_y = 0;
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	643b      	str	r3, [r7, #64]	; 0x40
			for (int j = i - windowSize; j < i; j++){
 8003cd6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	e027      	b.n	8003d32 <CreateXYcoordinates+0x31a>
 8003ce2:	bf00      	nop
 8003ce4:	3727c5ac 	.word	0x3727c5ac
 8003ce8:	20015db0 	.word	0x20015db0
 8003cec:	20016bc0 	.word	0x20016bc0
 8003cf0:	20000039 	.word	0x20000039
				sum_x += X_table[j];
 8003cf4:	4ac8      	ldr	r2, [pc, #800]	; (8004018 <CreateXYcoordinates+0x600>)
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d04:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				sum_y += Y_table[j];
 8003d10:	4ac2      	ldr	r2, [pc, #776]	; (800401c <CreateXYcoordinates+0x604>)
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d20:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d28:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			for (int j = i - windowSize; j < i; j++){
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	3301      	adds	r3, #1
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d32:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	dbdb      	blt.n	8003cf4 <CreateXYcoordinates+0x2dc>
			}
			temp_x = sum_x / windowSize;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d46:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			temp_y = sum_y / windowSize;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d5c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d64:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		}

		if(i > 0){
 8003d68:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8169 	beq.w	8004044 <CreateXYcoordinates+0x62c>
			EuclideanDistance = sqrt((temp_x - prev_x) * (temp_x - prev_x) + (temp_y - prev_y) * (temp_y - prev_y));//ユークリッド距離の計算
 8003d72:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003d76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d7e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003d82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d8e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003d92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d9a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8003d9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003da2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dae:	ee17 0a90 	vmov	r0, s15
 8003db2:	f7fc fbc9 	bl	8000548 <__aeabi_f2d>
 8003db6:	4603      	mov	r3, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	ec44 3b10 	vmov	d0, r3, r4
 8003dbe:	f007 ffc3 	bl	800bd48 <sqrt>
 8003dc2:	ec54 3b10 	vmov	r3, r4, d0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	4621      	mov	r1, r4
 8003dca:	f7fc ff0d 	bl	8000be8 <__aeabi_d2f>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	617b      	str	r3, [r7, #20]
			EuclideanDistance_count += EuclideanDistance;
 8003dd2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dde:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

			if(EuclideanDistance_count > Distance_threshold){
 8003de2:	4b8f      	ldr	r3, [pc, #572]	; (8004020 <CreateXYcoordinates+0x608>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dee:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	f340 8138 	ble.w	800406e <CreateXYcoordinates+0x656>

				prev_x2 = SC_X_table[i-1];
 8003dfe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a87      	ldr	r2, [pc, #540]	; (8004024 <CreateXYcoordinates+0x60c>)
 8003e06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
				prev_y2 = SC_Y_table[i-1];
 8003e16:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	4a82      	ldr	r2, [pc, #520]	; (8004028 <CreateXYcoordinates+0x610>)
 8003e1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2a:	edc7 7a06 	vstr	s15, [r7, #24]

				SC_X_table[i] = temp_x;//int16で保存するために値を加工
 8003e2e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e3a:	ee17 2a90 	vmov	r2, s15
 8003e3e:	b211      	sxth	r1, r2
 8003e40:	4a78      	ldr	r2, [pc, #480]	; (8004024 <CreateXYcoordinates+0x60c>)
 8003e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				SC_Y_table[i] = temp_y;//int16で保存するために値を加工
 8003e46:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e4a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e52:	ee17 2a90 	vmov	r2, s15
 8003e56:	b211      	sxth	r1, r2
 8003e58:	4a73      	ldr	r2, [pc, #460]	; (8004028 <CreateXYcoordinates+0x610>)
 8003e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				Total_length_of_course += EuclideanDistance_count;
 8003e5e:	4b73      	ldr	r3, [pc, #460]	; (800402c <CreateXYcoordinates+0x614>)
 8003e60:	ed93 7a00 	vldr	s14, [r3]
 8003e64:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6c:	4b6f      	ldr	r3, [pc, #444]	; (800402c <CreateXYcoordinates+0x614>)
 8003e6e:	edc3 7a00 	vstr	s15, [r3]
				EuclideanDistance_table[i] = EuclideanDistance_count * 100;
 8003e72:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003e76:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004030 <CreateXYcoordinates+0x618>
 8003e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e86:	ee17 2a90 	vmov	r2, s15
 8003e8a:	b291      	uxth	r1, r2
 8003e8c:	4a69      	ldr	r2, [pc, #420]	; (8004034 <CreateXYcoordinates+0x61c>)
 8003e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				deltaX = temp_x - prev_x2;
 8003e92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003e96:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				deltaY = temp_y - prev_y2;
 8003ea2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				atan2th = atan2(deltaY, deltaX);//座標から角度を計算
 8003eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eb4:	f7fc fb48 	bl	8000548 <__aeabi_f2d>
 8003eb8:	4604      	mov	r4, r0
 8003eba:	460d      	mov	r5, r1
 8003ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ebe:	f7fc fb43 	bl	8000548 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	ec43 2b11 	vmov	d1, r2, r3
 8003eca:	ec45 4b10 	vmov	d0, r4, r5
 8003ece:	f007 ff39 	bl	800bd44 <atan2>
 8003ed2:	ec54 3b10 	vmov	r3, r4, d0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f7fc fe85 	bl	8000be8 <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78

				prev_atan2 = SC_Theta_table[i-1] / 1000;
 8003ee2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	4a53      	ldr	r2, [pc, #332]	; (8004038 <CreateXYcoordinates+0x620>)
 8003eea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003eee:	4a53      	ldr	r2, [pc, #332]	; (800403c <CreateXYcoordinates+0x624>)
 8003ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ef4:	1192      	asrs	r2, r2, #6
 8003ef6:	17db      	asrs	r3, r3, #31
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f04:	edc7 7a08 	vstr	s15, [r7, #32]
				delta_ang = atan2th - prev_atan2;
 8003f08:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003f0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f14:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

				if(delta_ang > M_PI){
 8003f18:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003f1a:	f7fc fb15 	bl	8000548 <__aeabi_f2d>
 8003f1e:	a338      	add	r3, pc, #224	; (adr r3, 8004000 <CreateXYcoordinates+0x5e8>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc fdf8 	bl	8000b18 <__aeabi_dcmpgt>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d024      	beq.n	8003f78 <CreateXYcoordinates+0x560>
					while(delta_ang > M_PI){
 8003f2e:	e017      	b.n	8003f60 <CreateXYcoordinates+0x548>
						atan2th -= 2 * M_PI;
 8003f30:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003f32:	f7fc fb09 	bl	8000548 <__aeabi_f2d>
 8003f36:	a334      	add	r3, pc, #208	; (adr r3, 8004008 <CreateXYcoordinates+0x5f0>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f7fc f9a4 	bl	8000288 <__aeabi_dsub>
 8003f40:	4603      	mov	r3, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4618      	mov	r0, r3
 8003f46:	4621      	mov	r1, r4
 8003f48:	f7fc fe4e 	bl	8000be8 <__aeabi_d2f>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	67bb      	str	r3, [r7, #120]	; 0x78
						delta_ang = atan2th - prev_atan2;
 8003f50:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003f54:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f5c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
					while(delta_ang > M_PI){
 8003f60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003f62:	f7fc faf1 	bl	8000548 <__aeabi_f2d>
 8003f66:	a326      	add	r3, pc, #152	; (adr r3, 8004000 <CreateXYcoordinates+0x5e8>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1dc      	bne.n	8003f30 <CreateXYcoordinates+0x518>
 8003f76:	e02e      	b.n	8003fd6 <CreateXYcoordinates+0x5be>
					}
				}
				else if(delta_ang < -M_PI){
 8003f78:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003f7a:	f7fc fae5 	bl	8000548 <__aeabi_f2d>
 8003f7e:	a324      	add	r3, pc, #144	; (adr r3, 8004010 <CreateXYcoordinates+0x5f8>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc fdaa 	bl	8000adc <__aeabi_dcmplt>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d023      	beq.n	8003fd6 <CreateXYcoordinates+0x5be>
					while(delta_ang < -M_PI){
 8003f8e:	e017      	b.n	8003fc0 <CreateXYcoordinates+0x5a8>
						atan2th += 2 * M_PI;
 8003f90:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003f92:	f7fc fad9 	bl	8000548 <__aeabi_f2d>
 8003f96:	a31c      	add	r3, pc, #112	; (adr r3, 8004008 <CreateXYcoordinates+0x5f0>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f7fc f976 	bl	800028c <__adddf3>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f7fc fe1e 	bl	8000be8 <__aeabi_d2f>
 8003fac:	4603      	mov	r3, r0
 8003fae:	67bb      	str	r3, [r7, #120]	; 0x78
						delta_ang = atan2th - prev_atan2;
 8003fb0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003fb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
					while(delta_ang < -M_PI){
 8003fc0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003fc2:	f7fc fac1 	bl	8000548 <__aeabi_f2d>
 8003fc6:	a312      	add	r3, pc, #72	; (adr r3, 8004010 <CreateXYcoordinates+0x5f8>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fd86 	bl	8000adc <__aeabi_dcmplt>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1dc      	bne.n	8003f90 <CreateXYcoordinates+0x578>
					}
				}

				SC_Theta_table[i] = atan2th * 1000;//int16で保存するために値を加工
 8003fd6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003fda:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004040 <CreateXYcoordinates+0x628>
 8003fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fea:	ee17 2a90 	vmov	r2, s15
 8003fee:	b211      	sxth	r1, r2
 8003ff0:	4a11      	ldr	r2, [pc, #68]	; (8004038 <CreateXYcoordinates+0x620>)
 8003ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//saveDebug(SC_X_table[i]);//目標のx座標
				//saveDebug(SC_Y_table[i]);//目標のy座標
				//saveDebug(EuclideanDistance_table[i] / 100);
				//saveDebug(SC_Theta_table[i] / 1000);
				EuclideanDistance_count = 0;
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	677b      	str	r3, [r7, #116]	; 0x74
 8003ffc:	e037      	b.n	800406e <CreateXYcoordinates+0x656>
 8003ffe:	bf00      	nop
 8004000:	54442d18 	.word	0x54442d18
 8004004:	400921fb 	.word	0x400921fb
 8004008:	54442d18 	.word	0x54442d18
 800400c:	401921fb 	.word	0x401921fb
 8004010:	54442d18 	.word	0x54442d18
 8004014:	c00921fb 	.word	0xc00921fb
 8004018:	20015db0 	.word	0x20015db0
 800401c:	20016bc0 	.word	0x20016bc0
 8004020:	2000003a 	.word	0x2000003a
 8004024:	200187e0 	.word	0x200187e0
 8004028:	200195f0 	.word	0x200195f0
 800402c:	2001b214 	.word	0x2001b214
 8004030:	42c80000 	.word	0x42c80000
 8004034:	200179d0 	.word	0x200179d0
 8004038:	2001a400 	.word	0x2001a400
 800403c:	10624dd3 	.word	0x10624dd3
 8004040:	447a0000 	.word	0x447a0000
			}
		}
		else{
			SC_X_table[1] = temp_x;
 8004044:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404c:	ee17 3a90 	vmov	r3, s15
 8004050:	b21a      	sxth	r2, r3
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <CreateXYcoordinates+0x6a0>)
 8004054:	805a      	strh	r2, [r3, #2]
			SC_X_table[1] = temp_y;
 8004056:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800405a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405e:	ee17 3a90 	vmov	r3, s15
 8004062:	b21a      	sxth	r2, r3
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <CreateXYcoordinates+0x6a0>)
 8004066:	805a      	strh	r2, [r3, #2]
			SC_Theta_table[1] = 0.0;
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <CreateXYcoordinates+0x6a4>)
 800406a:	2200      	movs	r2, #0
 800406c:	805a      	strh	r2, [r3, #2]
		}
		if(i != 0){
 800406e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <CreateXYcoordinates+0x66a>
			SC_X_tablesize++;
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <CreateXYcoordinates+0x6a8>)
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <CreateXYcoordinates+0x6a8>)
 8004080:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 1; i < X_tablesize; i++){
 8004082:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004086:	3301      	adds	r3, #1
 8004088:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800408c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004090:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8004094:	429a      	cmp	r2, r3
 8004096:	f6ff adb3 	blt.w	8003c00 <CreateXYcoordinates+0x1e8>
		}
	}

	Total_length_of_course = Total_length_of_course + 100;
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <CreateXYcoordinates+0x6ac>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80040c8 <CreateXYcoordinates+0x6b0>
 80040a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <CreateXYcoordinates+0x6ac>)
 80040aa:	edc3 7a00 	vstr	s15, [r3]
}
 80040ae:	bf00      	nop
 80040b0:	3780      	adds	r7, #128	; 0x80
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040b8:	200187e0 	.word	0x200187e0
 80040bc:	2001a400 	.word	0x2001a400
 80040c0:	2001b212 	.word	0x2001b212
 80040c4:	2001b214 	.word	0x2001b214
 80040c8:	42c80000 	.word	0x42c80000

080040cc <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 80040de:	f7fd f9b1 	bl	8001444 <getDistance10mm>
 80040e2:	ed87 0a00 	vstr	s0, [r7]
	float now_X_theta = getTheta10mm();
 80040e6:	f7fd fbc1 	bl	800186c <getTheta10mm>
 80040ea:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_X_theta == 0) now_X_theta = 0.00001;
 80040ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fa:	d101      	bne.n	8004100 <CurrentXcoordinates+0x34>
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <CurrentXcoordinates+0x9c>)
 80040fe:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cosf(pre_th + now_X_theta/2);
 8004100:	edd7 7a03 	vldr	s15, [r7, #12]
 8004104:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004108:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <CurrentXcoordinates+0xa0>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004116:	eeb0 0a67 	vmov.f32	s0, s15
 800411a:	f007 fd91 	bl	800bc40 <cosf>
 800411e:	eeb0 7a40 	vmov.f32	s14, s0
 8004122:	edd7 7a00 	vldr	s15, [r7]
 8004126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <CurrentXcoordinates+0xa4>)
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004134:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_X_theta;
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <CurrentXcoordinates+0xa0>)
 800413a:	edd3 7a00 	vldr	s15, [r3]
 800413e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004146:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <CurrentXcoordinates+0xa4>)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <CurrentXcoordinates+0xa0>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]

	return x;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	ee07 3a90 	vmov	s15, r3
}
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	3727c5ac 	.word	0x3727c5ac
 800416c:	2001b23c 	.word	0x2001b23c
 8004170:	2001b240 	.word	0x2001b240

08004174 <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8004186:	f7fd f95d 	bl	8001444 <getDistance10mm>
 800418a:	ed87 0a00 	vstr	s0, [r7]
	float now_Y_theta = getTheta10mm();
 800418e:	f7fd fb6d 	bl	800186c <getTheta10mm>
 8004192:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_Y_theta == 0) now_Y_theta = 0.00001;
 8004196:	edd7 7a03 	vldr	s15, [r7, #12]
 800419a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	d101      	bne.n	80041a8 <CurrentYcoordinates+0x34>
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <CurrentYcoordinates+0x9c>)
 80041a6:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sinf(pre_th + now_Y_theta/2);
 80041a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80041b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <CurrentYcoordinates+0xa0>)
 80041b6:	edd3 7a00 	vldr	s15, [r3]
 80041ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041be:	eeb0 0a67 	vmov.f32	s0, s15
 80041c2:	f007 fd7d 	bl	800bcc0 <sinf>
 80041c6:	eeb0 7a40 	vmov.f32	s14, s0
 80041ca:	edd7 7a00 	vldr	s15, [r7]
 80041ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <CurrentYcoordinates+0xa4>)
 80041d4:	edd3 7a00 	vldr	s15, [r3]
 80041d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041dc:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_Y_theta;
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <CurrentYcoordinates+0xa0>)
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80041ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ee:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 80041f2:	4a09      	ldr	r2, [pc, #36]	; (8004218 <CurrentYcoordinates+0xa4>)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6013      	str	r3, [r2, #0]
	pre_th = th;
 80041f8:	4a06      	ldr	r2, [pc, #24]	; (8004214 <CurrentYcoordinates+0xa0>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6013      	str	r3, [r2, #0]

	return y;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	ee07 3a90 	vmov	s15, r3
}
 8004204:	eeb0 0a67 	vmov.f32	s0, s15
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	3727c5ac 	.word	0x3727c5ac
 8004214:	2001b244 	.word	0x2001b244
 8004218:	2001b248 	.word	0x2001b248

0800421c <updateTargetpoint>:

void updateTargetpoint()
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
	static float mon_X_table, mon_Y_table, mon_Theta_table;

	if(getTargetUpdateflag() == true){
 8004220:	f002 fc38 	bl	8006a94 <getTargetUpdateflag>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 809a 	beq.w	8004360 <updateTargetpoint+0x144>
		if(getVLT_Distance10mm() >= EuclideanDistance_table[euclideandistance_idx] / 100){
 800422c:	f7fd f926 	bl	800147c <getVLT_Distance10mm>
 8004230:	eeb0 7a40 	vmov.f32	s14, s0
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <updateTargetpoint+0x148>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <updateTargetpoint+0x14c>)
 800423c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004240:	4a4a      	ldr	r2, [pc, #296]	; (800436c <updateTargetpoint+0x150>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	b29b      	uxth	r3, r3
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425a:	db0d      	blt.n	8004278 <updateTargetpoint+0x5c>
			euclideandistance_idx++;
 800425c:	4b41      	ldr	r3, [pc, #260]	; (8004364 <updateTargetpoint+0x148>)
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <updateTargetpoint+0x148>)
 8004266:	801a      	strh	r2, [r3, #0]
			targetpoint_table_idx++;
 8004268:	4b41      	ldr	r3, [pc, #260]	; (8004370 <updateTargetpoint+0x154>)
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <updateTargetpoint+0x154>)
 8004272:	801a      	strh	r2, [r3, #0]
			clearVLT_Distance10mm();
 8004274:	f7fd f910 	bl	8001498 <clearVLT_Distance10mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize() ){
 8004278:	f7fe ffc4 	bl	8003204 <getDistanceLogSize>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <updateTargetpoint+0x154>)
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d832      	bhi.n	80042ee <updateTargetpoint+0xd2>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 8004288:	f7fe ffbc 	bl	8003204 <getDistanceLogSize>
 800428c:	4603      	mov	r3, r0
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	4b37      	ldr	r3, [pc, #220]	; (8004370 <updateTargetpoint+0x154>)
 8004294:	801a      	strh	r2, [r3, #0]
			mon_Y_table = SC_Y_table[targetpoint_table_idx];
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <updateTargetpoint+0x154>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	4b35      	ldr	r3, [pc, #212]	; (8004374 <updateTargetpoint+0x158>)
 800429e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042aa:	4b33      	ldr	r3, [pc, #204]	; (8004378 <updateTargetpoint+0x15c>)
 80042ac:	edc3 7a00 	vstr	s15, [r3]
			mon_Theta_table = SC_Theta_table[targetpoint_table_idx];
 80042b0:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <updateTargetpoint+0x154>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <updateTargetpoint+0x160>)
 80042b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c4:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <updateTargetpoint+0x164>)
 80042c6:	edc3 7a00 	vstr	s15, [r3]

			target_X_coordinate = -450;
 80042ca:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <updateTargetpoint+0x168>)
 80042cc:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <updateTargetpoint+0x16c>)
 80042ce:	601a      	str	r2, [r3, #0]
			target_Y_coordinate = mon_Y_table;
 80042d0:	4b29      	ldr	r3, [pc, #164]	; (8004378 <updateTargetpoint+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2d      	ldr	r2, [pc, #180]	; (800438c <updateTargetpoint+0x170>)
 80042d6:	6013      	str	r3, [r2, #0]
			target_Theta = mon_Theta_table / 1000;
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <updateTargetpoint+0x164>)
 80042da:	ed93 7a00 	vldr	s14, [r3]
 80042de:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004390 <updateTargetpoint+0x174>
 80042e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <updateTargetpoint+0x178>)
 80042e8:	edc3 7a00 	vstr	s15, [r3]

		/*target_X_coordinate = mon_X_table;
		target_Y_coordinate = mon_Y_table;
		target_Theta = mon_Theta_table / 1000;*/
	}
}
 80042ec:	e038      	b.n	8004360 <updateTargetpoint+0x144>
			mon_X_table = SC_X_table[targetpoint_table_idx];
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <updateTargetpoint+0x154>)
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <updateTargetpoint+0x17c>)
 80042f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004302:	4b26      	ldr	r3, [pc, #152]	; (800439c <updateTargetpoint+0x180>)
 8004304:	edc3 7a00 	vstr	s15, [r3]
			mon_Y_table = SC_Y_table[targetpoint_table_idx];
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <updateTargetpoint+0x154>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <updateTargetpoint+0x158>)
 8004310:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <updateTargetpoint+0x15c>)
 800431e:	edc3 7a00 	vstr	s15, [r3]
			mon_Theta_table = SC_Theta_table[targetpoint_table_idx];
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <updateTargetpoint+0x154>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <updateTargetpoint+0x160>)
 800432a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <updateTargetpoint+0x164>)
 8004338:	edc3 7a00 	vstr	s15, [r3]
			target_X_coordinate = mon_X_table;//1nt16の値を元に戻す
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <updateTargetpoint+0x180>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a10      	ldr	r2, [pc, #64]	; (8004384 <updateTargetpoint+0x168>)
 8004342:	6013      	str	r3, [r2, #0]
			target_Y_coordinate = mon_Y_table;//1nt16の値を元に戻す
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <updateTargetpoint+0x15c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a10      	ldr	r2, [pc, #64]	; (800438c <updateTargetpoint+0x170>)
 800434a:	6013      	str	r3, [r2, #0]
			target_Theta = mon_Theta_table / 1000;//1nt16の値を元に戻す
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <updateTargetpoint+0x164>)
 800434e:	ed93 7a00 	vldr	s14, [r3]
 8004352:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004390 <updateTargetpoint+0x174>
 8004356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <updateTargetpoint+0x178>)
 800435c:	edc3 7a00 	vstr	s15, [r3]
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2001b210 	.word	0x2001b210
 8004368:	200179d0 	.word	0x200179d0
 800436c:	51eb851f 	.word	0x51eb851f
 8004370:	2001d43c 	.word	0x2001d43c
 8004374:	200195f0 	.word	0x200195f0
 8004378:	2001b24c 	.word	0x2001b24c
 800437c:	2001a400 	.word	0x2001a400
 8004380:	2001b250 	.word	0x2001b250
 8004384:	2001b218 	.word	0x2001b218
 8004388:	c3e10000 	.word	0xc3e10000
 800438c:	2001b21c 	.word	0x2001b21c
 8004390:	447a0000 	.word	0x447a0000
 8004394:	2001b220 	.word	0x2001b220
 8004398:	200187e0 	.word	0x200187e0
 800439c:	2001b254 	.word	0x2001b254

080043a0 <Error_XY>:

void Error_XY(const float now_X, const float now_Y, const float now_Theta)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80043aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80043ae:	ed87 1a01 	vstr	s2, [r7, #4]
	float X_e;
	float Y_e;
	float Theta_e;
	float sin_theta = sinf(now_Theta);
 80043b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80043b6:	f007 fc83 	bl	800bcc0 <sinf>
 80043ba:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_theta = cosf(now_Theta);
 80043be:	ed97 0a01 	vldr	s0, [r7, #4]
 80043c2:	f007 fc3d 	bl	800bc40 <cosf>
 80043c6:	ed87 0a08 	vstr	s0, [r7, #32]

	X_e = (target_X_coordinate - now_X) * cos_theta + (target_Y_coordinate - now_Y) * sin_theta;
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <Error_XY+0xdc>)
 80043cc:	ed93 7a00 	vldr	s14, [r3]
 80043d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80043dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <Error_XY+0xe0>)
 80043e2:	edd3 6a00 	vldr	s13, [r3]
 80043e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80043ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
	Y_e = -(target_X_coordinate - now_X) * sin_theta + (target_Y_coordinate - now_Y) * cos_theta;
 80043fe:	4b1f      	ldr	r3, [pc, #124]	; (800447c <Error_XY+0xdc>)
 8004400:	ed93 7a00 	vldr	s14, [r3]
 8004404:	edd7 7a03 	vldr	s15, [r7, #12]
 8004408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440c:	eeb1 7a67 	vneg.f32	s14, s15
 8004410:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <Error_XY+0xe0>)
 800441a:	edd3 6a00 	vldr	s13, [r3]
 800441e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004422:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004426:	edd7 7a08 	vldr	s15, [r7, #32]
 800442a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800442e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004432:	edc7 7a06 	vstr	s15, [r7, #24]
	Theta_e = target_Theta - now_Theta;
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <Error_XY+0xe4>)
 8004438:	ed93 7a00 	vldr	s14, [r3]
 800443c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004444:	edc7 7a05 	vstr	s15, [r7, #20]

	now_error_x = X_e;
 8004448:	4a0f      	ldr	r2, [pc, #60]	; (8004488 <Error_XY+0xe8>)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	6013      	str	r3, [r2, #0]
	now_error_y = Y_e;
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <Error_XY+0xec>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6013      	str	r3, [r2, #0]
	now_error_theta = Theta_e;
 8004454:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <Error_XY+0xf0>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	6013      	str	r3, [r2, #0]

	saveDebug(X_e);
 800445a:	ed97 0a07 	vldr	s0, [r7, #28]
 800445e:	f7fe fe5d 	bl	800311c <saveDebug>
	saveDebug(Y_e);
 8004462:	ed97 0a06 	vldr	s0, [r7, #24]
 8004466:	f7fe fe59 	bl	800311c <saveDebug>
	saveDebug(Theta_e);
 800446a:	ed97 0a05 	vldr	s0, [r7, #20]
 800446e:	f7fe fe55 	bl	800311c <saveDebug>
}
 8004472:	bf00      	nop
 8004474:	3728      	adds	r7, #40	; 0x28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	2001b218 	.word	0x2001b218
 8004480:	2001b21c 	.word	0x2001b21c
 8004484:	2001b220 	.word	0x2001b220
 8004488:	2001b224 	.word	0x2001b224
 800448c:	2001b228 	.word	0x2001b228
 8004490:	2001b22c 	.word	0x2001b22c

08004494 <Velocity_Angularvelocity>:

void Velocity_Angularvelocity(void)//Kanayama Control Methodの計算関数 1msで回している
{
 8004494:	b580      	push	{r7, lr}
 8004496:	ed2d 8b02 	vpush	{d8}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
	float kx = 0.0001, ky = 0.0003, kt = 0.0003;//Kanayama Control Methodゲイン値調整 全て0でも走る
 800449e:	4b26      	ldr	r3, [pc, #152]	; (8004538 <Velocity_Angularvelocity+0xa4>)
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	4b26      	ldr	r3, [pc, #152]	; (800453c <Velocity_Angularvelocity+0xa8>)
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <Velocity_Angularvelocity+0xa8>)
 80044a8:	60fb      	str	r3, [r7, #12]
	//float max_angularvelocity = 17.2 / (180/M_PI);//max角速度制限　式　制限角度(deg)/(180/π)
	//float min_angularvelocity = - (17.2 / (180/M_PI));//min角速度制限

	float Target_velocity = getTargetVelocity();
 80044aa:	f7ff fa7b 	bl	80039a4 <getTargetVelocity>
 80044ae:	ed87 0a02 	vstr	s0, [r7, #8]
	float Target_angularvelocity = now_error_theta;
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <Velocity_Angularvelocity+0xac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	607b      	str	r3, [r7, #4]

	Output_velocity = Target_velocity * cosf(now_error_theta) + kx * now_error_x;//車速計算(m/s)
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <Velocity_Angularvelocity+0xac>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	eeb0 0a67 	vmov.f32	s0, s15
 80044c2:	f007 fbbd 	bl	800bc40 <cosf>
 80044c6:	eeb0 7a40 	vmov.f32	s14, s0
 80044ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <Velocity_Angularvelocity+0xb0>)
 80044d4:	edd3 6a00 	vldr	s13, [r3]
 80044d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80044dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <Velocity_Angularvelocity+0xb4>)
 80044e6:	edc3 7a00 	vstr	s15, [r3]
	Output_angularvelocity = Target_angularvelocity + Target_velocity * (ky * now_error_y + kt * sinf(now_error_theta));//車体の角速度計算(rad/s)
 80044ea:	4b18      	ldr	r3, [pc, #96]	; (800454c <Velocity_Angularvelocity+0xb8>)
 80044ec:	ed93 7a00 	vldr	s14, [r3]
 80044f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80044f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <Velocity_Angularvelocity+0xac>)
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004502:	f007 fbdd 	bl	800bcc0 <sinf>
 8004506:	eeb0 7a40 	vmov.f32	s14, s0
 800450a:	edd7 7a03 	vldr	s15, [r7, #12]
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004516:	edd7 7a02 	vldr	s15, [r7, #8]
 800451a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800451e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <Velocity_Angularvelocity+0xbc>)
 8004528:	edc3 7a00 	vstr	s15, [r3]
	}
	else if(Output_angularvelocity <= min_angularvelocity)
	{
		Output_angularvelocity = min_angularvelocity;
	}*/
}
 800452c:	bf00      	nop
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	ecbd 8b02 	vpop	{d8}
 8004536:	bd80      	pop	{r7, pc}
 8004538:	38d1b717 	.word	0x38d1b717
 800453c:	399d4952 	.word	0x399d4952
 8004540:	2001b22c 	.word	0x2001b22c
 8004544:	2001b224 	.word	0x2001b224
 8004548:	2001b230 	.word	0x2001b230
 800454c:	2001b228 	.word	0x2001b228
 8004550:	2001b234 	.word	0x2001b234

08004554 <getTotal_length>:
	else check_flag = false;

}

float getTotal_length()
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
	return Total_length_of_course;
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <getTotal_length+0x18>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	ee07 3a90 	vmov	s15, r3
}
 8004560:	eeb0 0a67 	vmov.f32	s0, s15
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	2001b214 	.word	0x2001b214

08004570 <getTargetpoint_X>:

float getTargetpoint_X()
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
	return target_X_coordinate;
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <getTargetpoint_X+0x18>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	ee07 3a90 	vmov	s15, r3
}
 800457c:	eeb0 0a67 	vmov.f32	s0, s15
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	2001b218 	.word	0x2001b218

0800458c <getTargetpoint_Y>:

float getTargetpoint_Y()
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
	return target_Y_coordinate;
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <getTargetpoint_Y+0x18>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	ee07 3a90 	vmov	s15, r3
}
 8004598:	eeb0 0a67 	vmov.f32	s0, s15
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	2001b21c 	.word	0x2001b21c

080045a8 <getTargetpoint_Theta>:

float getTargetpoint_Theta()
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
	return target_Theta;
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <getTargetpoint_Theta+0x18>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	ee07 3a90 	vmov	s15, r3
}
 80045b4:	eeb0 0a67 	vmov.f32	s0, s15
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	2001b220 	.word	0x2001b220

080045c4 <getOutput_velocity>:

float getOutput_velocity()
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	return Output_velocity;
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <getOutput_velocity+0x18>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	ee07 3a90 	vmov	s15, r3
}
 80045d0:	eeb0 0a67 	vmov.f32	s0, s15
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	2001b230 	.word	0x2001b230

080045e0 <getOutput_angularvelocity>:

float getOutput_angularvelocity()
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	return Output_angularvelocity;
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <getOutput_angularvelocity+0x18>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	ee07 3a90 	vmov	s15, r3
}
 80045ec:	eeb0 0a67 	vmov.f32	s0, s15
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	2001b234 	.word	0x2001b234

080045fc <getSC_X_tablesize>:

uint16_t getSC_X_tablesize(){
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
	return SC_X_tablesize;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <getSC_X_tablesize+0x14>)
 8004602:	881b      	ldrh	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2001b212 	.word	0x2001b212

08004614 <getEuclideanDistanceArrayPointer>:

const uint16_t *getEuclideanDistanceArrayPointer(){
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
	return EuclideanDistance_table;//100倍の値が入っているため /100して使う
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <getEuclideanDistanceArrayPointer+0x10>)
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	200179d0 	.word	0x200179d0

08004628 <getSC_Theta_tableArrayPointer>:

const int16_t *getSC_Theta_tableArrayPointer(){
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
	return SC_Theta_table;//1000倍の値が入っているため /1000して使う
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <getSC_Theta_tableArrayPointer+0x10>)
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	2001a400 	.word	0x2001a400

0800463c <getcheckAngularvelocityFlag>:

bool getcheckAngularvelocityFlag()
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
	return check_flag;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <getcheckAngularvelocityFlag+0x14>)
 8004642:	781b      	ldrb	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	2001b238 	.word	0x2001b238

08004654 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800465c:	1d39      	adds	r1, r7, #4
 800465e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004662:	2201      	movs	r2, #1
 8004664:	4803      	ldr	r0, [pc, #12]	; (8004674 <__io_putchar+0x20>)
 8004666:	f006 fe00 	bl	800b26a <HAL_UART_Transmit>
	return ch;
 800466a:	687b      	ldr	r3, [r7, #4]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	2001d53c 	.word	0x2001d53c

08004678 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d121      	bne.n	80046ce <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004692:	6013      	str	r3, [r2, #0]
      timer2++;
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800469c:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 800469e:	f7fc fd5f 	bl	8001160 <updateEncoderCnt>
      updateIMUValue();
 80046a2:	f7fc ffd9 	bl	8001658 <updateIMUValue>
      updateAnalogSensor();
 80046a6:	f7fe f831 	bl	800270c <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 80046aa:	f7fd fb81 	bl	8001db0 <calculateLineFollowingTermFlip>
      Velocity_Angularvelocity();
 80046ae:	f7ff fef1 	bl	8004494 <Velocity_Angularvelocity>
      calculateVelocityControlFlip();
 80046b2:	f7ff f811 	bl	80036d8 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 80046b6:	f7fc fc67 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 80046ba:	f7fd fcf9 	bl	80020b0 <lineTraceFlip>
      runningFlip();
 80046be:	f001 fc2b 	bl	8005f18 <runningFlip>
      motorCtrlFlip();
 80046c2:	f001 f901 	bl	80058c8 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 80046c6:	f001 f963 	bl	8005990 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 80046ca:	f001 f9cf 	bl	8005a6c <updateSideSensorStatus>

      //checkCourseOut();//コースアウト判定
      //checkAngularvelocity();//角速度のフェイルセーフ
   }

   if(htim->Instance == TIM7){//0.1ms
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d106      	bne.n	80046e6 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80046e0:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 80046e2:	f7fd fe1d 	bl	8002320 <storeAnalogSensorBuffer>

   }
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40001000 	.word	0x40001000
 80046f4:	2001d440 	.word	0x2001d440
 80046f8:	2001d488 	.word	0x2001d488
 80046fc:	40001400 	.word	0x40001400
 8004700:	2001d660 	.word	0x2001d660

08004704 <init>:

void init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
	  initADC();
 8004708:	f7fd fd8e 	bl	8002228 <initADC>
	  initEncoder();
 800470c:	f7fc fd0c 	bl	8001128 <initEncoder>
	  initLog();
 8004710:	f7fe fc30 	bl	8002f74 <initLog>
	  initGyro();
 8004714:	f7fc ff90 	bl	8001638 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8004718:	4809      	ldr	r0, [pc, #36]	; (8004740 <init+0x3c>)
 800471a:	f005 feb4 	bl	800a486 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 800471e:	4809      	ldr	r0, [pc, #36]	; (8004744 <init+0x40>)
 8004720:	f005 feb1 	bl	800a486 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8004724:	f001 f8b8 	bl	8005898 <initMotor>

	  setLED('R');
 8004728:	2052      	movs	r0, #82	; 0x52
 800472a:	f7fd f8d7 	bl	80018dc <setLED>

	  sensorCalibration();
 800472e:	f7fe f9df 	bl	8002af0 <sensorCalibration>

	  HAL_Delay(1000);
 8004732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004736:	f002 ff67 	bl	8007608 <HAL_Delay>

}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2001d5dc 	.word	0x2001d5dc
 8004744:	2001d6c4 	.word	0x2001d6c4

08004748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800474e:	f002 fee9 	bl	8007524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004752:	f000 fb4f 	bl	8004df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004756:	f000 ffdd 	bl	8005714 <MX_GPIO_Init>
  MX_DMA_Init();
 800475a:	f000 ffb3 	bl	80056c4 <MX_DMA_Init>
  MX_TIM1_Init();
 800475e:	f000 fd63 	bl	8005228 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004762:	f000 fde3 	bl	800532c <MX_TIM3_Init>
  MX_TIM4_Init();
 8004766:	f000 fe35 	bl	80053d4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800476a:	f000 fef1 	bl	8005550 <MX_TIM8_Init>
  MX_ADC1_Init();
 800476e:	f000 fbab 	bl	8004ec8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004772:	f000 fcf5 	bl	8005160 <MX_I2C1_Init>
  MX_SPI3_Init();
 8004776:	f000 fd21 	bl	80051bc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800477a:	f000 ff79 	bl	8005670 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800477e:	f000 fe7d 	bl	800547c <MX_TIM6_Init>
  MX_TIM7_Init();
 8004782:	f000 feb1 	bl	80054e8 <MX_TIM7_Init>
  MX_ADC2_Init();
 8004786:	f000 fbff 	bl	8004f88 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 800478a:	f7ff ffbb 	bl	8004704 <init>

  bool running_flag = false;
 800478e:	2300      	movs	r3, #0
 8004790:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004792:	204c      	movs	r0, #76	; 0x4c
 8004794:	f002 fdb8 	bl	8007308 <getSwitchStatus>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d109      	bne.n	80047b2 <main+0x6a>
 800479e:	4bb4      	ldr	r3, [pc, #720]	; (8004a70 <main+0x328>)
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <main+0x6a>
		  timer = 0;
 80047a6:	4bb3      	ldr	r3, [pc, #716]	; (8004a74 <main+0x32c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
		  sw = 1;
 80047ac:	4bb0      	ldr	r3, [pc, #704]	; (8004a70 <main+0x328>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 80047b2:	204c      	movs	r0, #76	; 0x4c
 80047b4:	f002 fda8 	bl	8007308 <getSwitchStatus>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10a      	bne.n	80047d4 <main+0x8c>
 80047be:	4bad      	ldr	r3, [pc, #692]	; (8004a74 <main+0x32c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b14      	cmp	r3, #20
 80047c4:	d906      	bls.n	80047d4 <main+0x8c>
 80047c6:	4baa      	ldr	r3, [pc, #680]	; (8004a70 <main+0x328>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d102      	bne.n	80047d4 <main+0x8c>
		  sw = 2;
 80047ce:	4ba8      	ldr	r3, [pc, #672]	; (8004a70 <main+0x328>)
 80047d0:	2202      	movs	r2, #2
 80047d2:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 80047d4:	4ba7      	ldr	r3, [pc, #668]	; (8004a74 <main+0x32c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b28      	cmp	r3, #40	; 0x28
 80047da:	d906      	bls.n	80047ea <main+0xa2>
 80047dc:	4ba4      	ldr	r3, [pc, #656]	; (8004a70 <main+0x328>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <main+0xa2>
		  sw = 0;
 80047e4:	4ba2      	ldr	r3, [pc, #648]	; (8004a70 <main+0x328>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 80047ea:	204c      	movs	r0, #76	; 0x4c
 80047ec:	f002 fd8c 	bl	8007308 <getSwitchStatus>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <main+0xc8>
 80047f6:	4b9e      	ldr	r3, [pc, #632]	; (8004a70 <main+0x328>)
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d108      	bne.n	8004810 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 80047fe:	4b9e      	ldr	r3, [pc, #632]	; (8004a78 <main+0x330>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	4b9c      	ldr	r3, [pc, #624]	; (8004a78 <main+0x330>)
 8004808:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 800480a:	4b99      	ldr	r3, [pc, #612]	; (8004a70 <main+0x328>)
 800480c:	2200      	movs	r2, #0
 800480e:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8004810:	2052      	movs	r0, #82	; 0x52
 8004812:	f002 fd79 	bl	8007308 <getSwitchStatus>
 8004816:	4603      	mov	r3, r0
 8004818:	2b01      	cmp	r3, #1
 800481a:	d109      	bne.n	8004830 <main+0xe8>
 800481c:	4b97      	ldr	r3, [pc, #604]	; (8004a7c <main+0x334>)
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <main+0xe8>
	  	  timer = 0;
 8004824:	4b93      	ldr	r3, [pc, #588]	; (8004a74 <main+0x32c>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 800482a:	4b94      	ldr	r3, [pc, #592]	; (8004a7c <main+0x334>)
 800482c:	2201      	movs	r2, #1
 800482e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8004830:	2052      	movs	r0, #82	; 0x52
 8004832:	f002 fd69 	bl	8007308 <getSwitchStatus>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10a      	bne.n	8004852 <main+0x10a>
 800483c:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <main+0x32c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b14      	cmp	r3, #20
 8004842:	d906      	bls.n	8004852 <main+0x10a>
 8004844:	4b8d      	ldr	r3, [pc, #564]	; (8004a7c <main+0x334>)
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <main+0x10a>
	  	  sw2 = 2;
 800484c:	4b8b      	ldr	r3, [pc, #556]	; (8004a7c <main+0x334>)
 800484e:	2202      	movs	r2, #2
 8004850:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8004852:	4b88      	ldr	r3, [pc, #544]	; (8004a74 <main+0x32c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b28      	cmp	r3, #40	; 0x28
 8004858:	d906      	bls.n	8004868 <main+0x120>
 800485a:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <main+0x334>)
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <main+0x120>
	  	  sw2 = 0;
 8004862:	4b86      	ldr	r3, [pc, #536]	; (8004a7c <main+0x334>)
 8004864:	2200      	movs	r2, #0
 8004866:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8004868:	2052      	movs	r0, #82	; 0x52
 800486a:	f002 fd4d 	bl	8007308 <getSwitchStatus>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10c      	bne.n	800488e <main+0x146>
 8004874:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <main+0x334>)
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d108      	bne.n	800488e <main+0x146>
	  	  cnt++;
 800487c:	4b80      	ldr	r3, [pc, #512]	; (8004a80 <main+0x338>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	4b7e      	ldr	r3, [pc, #504]	; (8004a80 <main+0x338>)
 8004886:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8004888:	4b7c      	ldr	r3, [pc, #496]	; (8004a7c <main+0x334>)
 800488a:	2200      	movs	r2, #0
 800488c:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 800488e:	4b7c      	ldr	r3, [pc, #496]	; (8004a80 <main+0x338>)
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d902      	bls.n	800489c <main+0x154>
		  cnt = 0;
 8004896:	4b7a      	ldr	r3, [pc, #488]	; (8004a80 <main+0x338>)
 8004898:	2200      	movs	r2, #0
 800489a:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 800489c:	4b78      	ldr	r3, [pc, #480]	; (8004a80 <main+0x338>)
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <main+0x174>
		  HAL_Delay(1000);
 80048a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048a8:	f002 feae 	bl	8007608 <HAL_Delay>
		  running_flag = true;
 80048ac:	2301      	movs	r3, #1
 80048ae:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 80048b0:	4b74      	ldr	r3, [pc, #464]	; (8004a84 <main+0x33c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 80048b6:	4b72      	ldr	r3, [pc, #456]	; (8004a80 <main+0x338>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	801a      	strh	r2, [r3, #0]
		  //setLED2('Y');
	  }

	  if(running_flag == false){
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	f083 0301 	eor.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <main+0x188>
		  stopLineTrace();
 80048c8:	f7fd fc90 	bl	80021ec <stopLineTrace>
		  stopVelocityControl();
 80048cc:	f7ff f88a 	bl	80039e4 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 80048d0:	f002 f8d4 	bl	8006a7c <getgoalStatus>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <main+0x1a2>
		  running_flag = false;
 80048da:	2300      	movs	r3, #0
 80048dc:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 80048de:	4b68      	ldr	r3, [pc, #416]	; (8004a80 <main+0x338>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 80048e4:	2000      	movs	r0, #0
 80048e6:	f001 f8a3 	bl	8005a30 <setsuctionMotor>
		  //getgoalStatus() = false;
	  }

	  if(soiya >= 14){
 80048ea:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <main+0x330>)
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	2b0d      	cmp	r3, #13
 80048f0:	d902      	bls.n	80048f8 <main+0x1b0>
		  soiya = 0;
 80048f2:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <main+0x330>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 80048f8:	4b5f      	ldr	r3, [pc, #380]	; (8004a78 <main+0x330>)
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	2b0d      	cmp	r3, #13
 80048fe:	f200 8257 	bhi.w	8004db0 <main+0x668>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <main+0x1c0>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004941 	.word	0x08004941
 800490c:	08004987 	.word	0x08004987
 8004910:	080049a5 	.word	0x080049a5
 8004914:	080049e9 	.word	0x080049e9
 8004918:	08004a2d 	.word	0x08004a2d
 800491c:	08004a95 	.word	0x08004a95
 8004920:	08004aed 	.word	0x08004aed
 8004924:	08004b45 	.word	0x08004b45
 8004928:	08004b9d 	.word	0x08004b9d
 800492c:	08004bf1 	.word	0x08004bf1
 8004930:	08004c45 	.word	0x08004c45
 8004934:	08004c99 	.word	0x08004c99
 8004938:	08004ced 	.word	0x08004ced
 800493c:	08004d3f 	.word	0x08004d3f

			  case 0:
				  setLED('W');
 8004940:	2057      	movs	r0, #87	; 0x57
 8004942:	f7fc ffcb 	bl	80018dc <setLED>
				  setLED2('R');
 8004946:	2052      	movs	r0, #82	; 0x52
 8004948:	f7fd f896 	bl	8001a78 <setLED2>
				  //printf("0\r\n");

				  if(running_flag == true){
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8230 	beq.w	8004db4 <main+0x66c>

				  		  //setsuctionMotor(500);
					      setRunMode(5);
 8004954:	2005      	movs	r0, #5
 8004956:	f001 f8b3 	bl	8005ac0 <setRunMode>
					      setVelocityRange(1.5, 3.0);
 800495a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800495e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004962:	f002 f8a3 	bl	8006aac <setVelocityRange>
						  setAccDec(7, 3);
 8004966:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800496a:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800496e:	f002 f8b5 	bl	8006adc <setAccDec>
						  setStraightRadius(1000);
 8004972:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8004a90 <main+0x348>
 8004976:	f002 f8c9 	bl	8006b0c <setStraightRadius>
						  runningInit();
 800497a:	f001 fbcd 	bl	8006118 <runningInit>
						  soiya = 13;
 800497e:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <main+0x330>)
 8004980:	220d      	movs	r2, #13
 8004982:	801a      	strh	r2, [r3, #0]

				  }

				  break;
 8004984:	e216      	b.n	8004db4 <main+0x66c>

			  case 1:
				  setLED('G');
 8004986:	2047      	movs	r0, #71	; 0x47
 8004988:	f7fc ffa8 	bl	80018dc <setLED>
				  setLED2('G');
 800498c:	2047      	movs	r0, #71	; 0x47
 800498e:	f7fd f873 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 820f 	beq.w	8004db8 <main+0x670>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800499a:	f7fc fdc1 	bl	8001520 <clearspeedcount>

						  //setsuctionMotor(800);

						  //HAL_Delay(1500);

						  running();
 800499e:	f001 f975 	bl	8005c8c <running>
				  }

				  break;
 80049a2:	e209      	b.n	8004db8 <main+0x670>

			  case 2:
				  setLED('Y');
 80049a4:	2059      	movs	r0, #89	; 0x59
 80049a6:	f7fc ff99 	bl	80018dc <setLED>
				  setLED2('R');
 80049aa:	2052      	movs	r0, #82	; 0x52
 80049ac:	f7fd f864 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8202 	beq.w	8004dbc <main+0x674>
						  //startLineTrace();

					      IMU_average();
 80049b8:	f7fc ff22 	bl	8001800 <IMU_average>

					      clearspeedcount();
 80049bc:	f7fc fdb0 	bl	8001520 <clearspeedcount>

					      setRunMode(1);
 80049c0:	2001      	movs	r0, #1
 80049c2:	f001 f87d 	bl	8005ac0 <setRunMode>

					      setVelocityRange(1.0, 1.0);
 80049c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80049ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049ce:	f002 f86d 	bl	8006aac <setVelocityRange>

						  setsuctionMotor(800);
 80049d2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80049d6:	f001 f82b 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 80049da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049de:	f002 fe13 	bl	8007608 <HAL_Delay>

						  running();
 80049e2:	f001 f953 	bl	8005c8c <running>
				  }

				  break;
 80049e6:	e1e9      	b.n	8004dbc <main+0x674>

			  case 3:
				  setLED('Y');
 80049e8:	2059      	movs	r0, #89	; 0x59
 80049ea:	f7fc ff77 	bl	80018dc <setLED>
				  setLED2('G');
 80049ee:	2047      	movs	r0, #71	; 0x47
 80049f0:	f7fd f842 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 81e2 	beq.w	8004dc0 <main+0x678>
						  //startLineTrace();

						  clearspeedcount();
 80049fc:	f7fc fd90 	bl	8001520 <clearspeedcount>

						  IMU_average();
 8004a00:	f7fc fefe 	bl	8001800 <IMU_average>

						  setRunMode(1);
 8004a04:	2001      	movs	r0, #1
 8004a06:	f001 f85b 	bl	8005ac0 <setRunMode>

						  setVelocityRange(1.5, 1.5);
 8004a0a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004a0e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004a12:	f002 f84b 	bl	8006aac <setVelocityRange>

						  setsuctionMotor(800);
 8004a16:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004a1a:	f001 f809 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a22:	f002 fdf1 	bl	8007608 <HAL_Delay>

						  running();
 8004a26:	f001 f931 	bl	8005c8c <running>
				  }

				  break;
 8004a2a:	e1c9      	b.n	8004dc0 <main+0x678>

			  case 4:
				  setLED('C');
 8004a2c:	2043      	movs	r0, #67	; 0x43
 8004a2e:	f7fc ff55 	bl	80018dc <setLED>
				  setLED2('R');
 8004a32:	2052      	movs	r0, #82	; 0x52
 8004a34:	f7fd f820 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 81c2 	beq.w	8004dc4 <main+0x67c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  IMU_average();
 8004a40:	f7fc fede 	bl	8001800 <IMU_average>

						  clearspeedcount();
 8004a44:	f7fc fd6c 	bl	8001520 <clearspeedcount>

						  setRunMode(5);
 8004a48:	2005      	movs	r0, #5
 8004a4a:	f001 f839 	bl	8005ac0 <setRunMode>

						  setVelocityRange(1.5, 1.5);
 8004a4e:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004a52:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004a56:	f002 f829 	bl	8006aac <setVelocityRange>

						  setsuctionMotor(800);
 8004a5a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004a5e:	f000 ffe7 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a66:	f002 fdcf 	bl	8007608 <HAL_Delay>

						  running();
 8004a6a:	f001 f90f 	bl	8005c8c <running>
				  }

				  break;
 8004a6e:	e1a9      	b.n	8004dc4 <main+0x67c>
 8004a70:	2001d65c 	.word	0x2001d65c
 8004a74:	2001d440 	.word	0x2001d440
 8004a78:	2001b25a 	.word	0x2001b25a
 8004a7c:	2001b258 	.word	0x2001b258
 8004a80:	2001d4e0 	.word	0x2001d4e0
 8004a84:	2001d488 	.word	0x2001d488
 8004a88:	40133333 	.word	0x40133333
 8004a8c:	40266666 	.word	0x40266666
 8004a90:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 8004a94:	2043      	movs	r0, #67	; 0x43
 8004a96:	f7fc ff21 	bl	80018dc <setLED>
				  setLED2('G');
 8004a9a:	2047      	movs	r0, #71	; 0x47
 8004a9c:	f7fc ffec 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8190 	beq.w	8004dc8 <main+0x680>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      IMU_average();
 8004aa8:	f7fc feaa 	bl	8001800 <IMU_average>

						  clearspeedcount();
 8004aac:	f7fc fd38 	bl	8001520 <clearspeedcount>

						  setRunMode(5);
 8004ab0:	2005      	movs	r0, #5
 8004ab2:	f001 f805 	bl	8005ac0 <setRunMode>

						  setVelocityRange(0.5, 1.0);
 8004ab6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004aba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004abe:	f001 fff5 	bl	8006aac <setVelocityRange>
						  setAccDec(4, 3);
 8004ac2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004ac6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8004aca:	f002 f807 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004ace:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8004a90 <main+0x348>
 8004ad2:	f002 f81b 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(700);
 8004ad6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004ada:	f000 ffa9 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae2:	f002 fd91 	bl	8007608 <HAL_Delay>

						  running();
 8004ae6:	f001 f8d1 	bl	8005c8c <running>
				  }

				  break;
 8004aea:	e16d      	b.n	8004dc8 <main+0x680>

			  case 6:
				  setLED('C');
 8004aec:	2043      	movs	r0, #67	; 0x43
 8004aee:	f7fc fef5 	bl	80018dc <setLED>
				  setLED2('B');
 8004af2:	2042      	movs	r0, #66	; 0x42
 8004af4:	f7fc ffc0 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8166 	beq.w	8004dcc <main+0x684>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      IMU_average();
 8004b00:	f7fc fe7e 	bl	8001800 <IMU_average>

						  clearspeedcount();
 8004b04:	f7fc fd0c 	bl	8001520 <clearspeedcount>

						  setRunMode(5);
 8004b08:	2005      	movs	r0, #5
 8004b0a:	f000 ffd9 	bl	8005ac0 <setRunMode>

						  setVelocityRange(2.0, 3.5);
 8004b0e:	eef0 0a0c 	vmov.f32	s1, #12	; 0x40600000  3.5
 8004b12:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004b16:	f001 ffc9 	bl	8006aac <setVelocityRange>
						  setAccDec(3, 2);
 8004b1a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004b1e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004b22:	f001 ffdb 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004b26:	ed1f 0a26 	vldr	s0, [pc, #-152]	; 8004a90 <main+0x348>
 8004b2a:	f001 ffef 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(800);
 8004b2e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004b32:	f000 ff7d 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b3a:	f002 fd65 	bl	8007608 <HAL_Delay>

						  running();
 8004b3e:	f001 f8a5 	bl	8005c8c <running>
				  }

				  break;
 8004b42:	e143      	b.n	8004dcc <main+0x684>

			  case 7:
				  setLED('C');
 8004b44:	2043      	movs	r0, #67	; 0x43
 8004b46:	f7fc fec9 	bl	80018dc <setLED>
				  setLED2('W');
 8004b4a:	2057      	movs	r0, #87	; 0x57
 8004b4c:	f7fc ff94 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 813c 	beq.w	8004dd0 <main+0x688>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      IMU_average();
 8004b58:	f7fc fe52 	bl	8001800 <IMU_average>

						  clearspeedcount();
 8004b5c:	f7fc fce0 	bl	8001520 <clearspeedcount>

						  setRunMode(5);
 8004b60:	2005      	movs	r0, #5
 8004b62:	f000 ffad 	bl	8005ac0 <setRunMode>

						  setVelocityRange(2.5, 4.0);
 8004b66:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004b6a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004b6e:	f001 ff9d 	bl	8006aac <setVelocityRange>
						  setAccDec(5, 3);
 8004b72:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004b76:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004b7a:	f001 ffaf 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004b7e:	ed1f 0a3c 	vldr	s0, [pc, #-240]	; 8004a90 <main+0x348>
 8004b82:	f001 ffc3 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(800);
 8004b86:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004b8a:	f000 ff51 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b92:	f002 fd39 	bl	8007608 <HAL_Delay>

						  running();
 8004b96:	f001 f879 	bl	8005c8c <running>
				  }

				  break;
 8004b9a:	e119      	b.n	8004dd0 <main+0x688>

			  case 8:
				  setLED('C');
 8004b9c:	2043      	movs	r0, #67	; 0x43
 8004b9e:	f7fc fe9d 	bl	80018dc <setLED>
				  setLED2('Y');
 8004ba2:	2059      	movs	r0, #89	; 0x59
 8004ba4:	f7fc ff68 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8112 	beq.w	8004dd4 <main+0x68c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004bb0:	f7fc fcb6 	bl	8001520 <clearspeedcount>

						  setRunMode(3);
 8004bb4:	2003      	movs	r0, #3
 8004bb6:	f000 ff83 	bl	8005ac0 <setRunMode>

						  setVelocityRange(3.0, 4.5);
 8004bba:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 8004bbe:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004bc2:	f001 ff73 	bl	8006aac <setVelocityRange>
						  setAccDec(4, 2);
 8004bc6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004bca:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8004bce:	f001 ff85 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004bd2:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 8004a90 <main+0x348>
 8004bd6:	f001 ff99 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(500);
 8004bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bde:	f000 ff27 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1500);
 8004be2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004be6:	f002 fd0f 	bl	8007608 <HAL_Delay>

						  running();
 8004bea:	f001 f84f 	bl	8005c8c <running>
				  }

			  	  break;
 8004bee:	e0f1      	b.n	8004dd4 <main+0x68c>

			  case 9:
				  setLED('C');
 8004bf0:	2043      	movs	r0, #67	; 0x43
 8004bf2:	f7fc fe73 	bl	80018dc <setLED>
				  setLED2('X');
 8004bf6:	2058      	movs	r0, #88	; 0x58
 8004bf8:	f7fc ff3e 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80ea 	beq.w	8004dd8 <main+0x690>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004c04:	f7fc fc8c 	bl	8001520 <clearspeedcount>

						  setRunMode(3);
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f000 ff59 	bl	8005ac0 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004c0e:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8004c12:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8004a88 <main+0x340>
 8004c16:	f001 ff49 	bl	8006aac <setVelocityRange>
						  setAccDec(8, 6);
 8004c1a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004c1e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004c22:	f001 ff5b 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004c26:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8004a90 <main+0x348>
 8004c2a:	f001 ff6f 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(500);
 8004c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c32:	f000 fefd 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1500);
 8004c36:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c3a:	f002 fce5 	bl	8007608 <HAL_Delay>

						  running();
 8004c3e:	f001 f825 	bl	8005c8c <running>
				  }

				  break;
 8004c42:	e0c9      	b.n	8004dd8 <main+0x690>

			  case 10:
				  setLED('C');
 8004c44:	2043      	movs	r0, #67	; 0x43
 8004c46:	f7fc fe49 	bl	80018dc <setLED>
				  setLED2('V');
 8004c4a:	2056      	movs	r0, #86	; 0x56
 8004c4c:	f7fc ff14 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80c2 	beq.w	8004ddc <main+0x694>
						  //startLineTrace();

						  clearspeedcount();
 8004c58:	f7fc fc62 	bl	8001520 <clearspeedcount>

						  setRunMode(2);
 8004c5c:	2002      	movs	r0, #2
 8004c5e:	f000 ff2f 	bl	8005ac0 <setRunMode>

						  setVelocityRange(2.5, 7.5);
 8004c62:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8004c66:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004c6a:	f001 ff1f 	bl	8006aac <setVelocityRange>
						  setAccDec(7, 4);
 8004c6e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004c72:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004c76:	f001 ff31 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004c7a:	ed1f 0a7b 	vldr	s0, [pc, #-492]	; 8004a90 <main+0x348>
 8004c7e:	f001 ff45 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(500);
 8004c82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c86:	f000 fed3 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c8e:	f002 fcbb 	bl	8007608 <HAL_Delay>

						  running();
 8004c92:	f000 fffb 	bl	8005c8c <running>
				  }

				  break;
 8004c96:	e0a1      	b.n	8004ddc <main+0x694>


			  case 11:
				  setLED('C');
 8004c98:	2043      	movs	r0, #67	; 0x43
 8004c9a:	f7fc fe1f 	bl	80018dc <setLED>
				  setLED2('T');
 8004c9e:	2054      	movs	r0, #84	; 0x54
 8004ca0:	f7fc feea 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 809a 	beq.w	8004de0 <main+0x698>
						  //startLineTrace();

						  clearspeedcount();
 8004cac:	f7fc fc38 	bl	8001520 <clearspeedcount>

						  setRunMode(3);
 8004cb0:	2003      	movs	r0, #3
 8004cb2:	f000 ff05 	bl	8005ac0 <setRunMode>

						  setVelocityRange(2.5, 8.5);
 8004cb6:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 8004cba:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004cbe:	f001 fef5 	bl	8006aac <setVelocityRange>
						  setAccDec(10, 5);
 8004cc2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004cc6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004cca:	f001 ff07 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004cce:	ed1f 0a90 	vldr	s0, [pc, #-576]	; 8004a90 <main+0x348>
 8004cd2:	f001 ff1b 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(500);
 8004cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cda:	f000 fea9 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ce2:	f002 fc91 	bl	8007608 <HAL_Delay>

						  running();
 8004ce6:	f000 ffd1 	bl	8005c8c <running>
				  }

				  break;
 8004cea:	e079      	b.n	8004de0 <main+0x698>

			  case 12:
				  setLED('C');
 8004cec:	2043      	movs	r0, #67	; 0x43
 8004cee:	f7fc fdf5 	bl	80018dc <setLED>
				  setLED2('A');
 8004cf2:	2041      	movs	r0, #65	; 0x41
 8004cf4:	f7fc fec0 	bl	8001a78 <setLED2>

				  if(running_flag == true){
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d072      	beq.n	8004de4 <main+0x69c>
						  //startLineTrace();

						  clearspeedcount();
 8004cfe:	f7fc fc0f 	bl	8001520 <clearspeedcount>

						  setRunMode(2);
 8004d02:	2002      	movs	r0, #2
 8004d04:	f000 fedc 	bl	8005ac0 <setRunMode>

						  setVelocityRange(2.6, 10.0);
 8004d08:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004d0c:	ed1f 0aa1 	vldr	s0, [pc, #-644]	; 8004a8c <main+0x344>
 8004d10:	f001 fecc 	bl	8006aac <setVelocityRange>
						  setAccDec(7, 4);
 8004d14:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004d18:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004d1c:	f001 fede 	bl	8006adc <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004d20:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 8004a90 <main+0x348>
 8004d24:	f001 fef2 	bl	8006b0c <setStraightRadius>

						  setsuctionMotor(500);
 8004d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d2c:	f000 fe80 	bl	8005a30 <setsuctionMotor>

						  HAL_Delay(1000);
 8004d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d34:	f002 fc68 	bl	8007608 <HAL_Delay>

						  running();
 8004d38:	f000 ffa8 	bl	8005c8c <running>
				  }

				  break;
 8004d3c:	e052      	b.n	8004de4 <main+0x69c>

			  case 13:
				  setLED('M');
 8004d3e:	204d      	movs	r0, #77	; 0x4d
 8004d40:	f7fc fdcc 	bl	80018dc <setLED>
				  setLED2('A');
 8004d44:	2041      	movs	r0, #65	; 0x41
 8004d46:	f7fc fe97 	bl	8001a78 <setLED2>
				  //printf("6\r\n");

				  if(running_flag == true){
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d04b      	beq.n	8004de8 <main+0x6a0>
					  loadSensor();
 8004d50:	f7fe fa70 	bl	8003234 <loadSensor>
					  loadDistance();
 8004d54:	f7fe faac 	bl	80032b0 <loadDistance>
					  loadTheta();
 8004d58:	f7fe fae8 	bl	800332c <loadTheta>
					  loadCross();
 8004d5c:	f7fe fb24 	bl	80033a8 <loadCross>
					  loadSide();
 8004d60:	f7fe fb60 	bl	8003424 <loadSide>
					  loadDebug();
 8004d64:	f7fe fb9c 	bl	80034a0 <loadDebug>
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  //printf("TargetVelocity, CurrentVelocity\r\n");
					  uint16_t size = getDebugLogSize();
 8004d68:	f7fe fa58 	bl	800321c <getDebugLogSize>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	807b      	strh	r3, [r7, #2]
					  /*
					  for(uint16_t i = 0; i < size; i = i+4){
						 printf("%f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i+1), getDebugLog(i+2), getDebugLog(i+3));
					  }*/

					  for(uint16_t i = 0; i < size; i++){
 8004d70:	2300      	movs	r3, #0
 8004d72:	80bb      	strh	r3, [r7, #4]
 8004d74:	e012      	b.n	8004d9c <main+0x654>
						 printf("%f\r\n", getDebugLog(i));
 8004d76:	88bb      	ldrh	r3, [r7, #4]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fc03 	bl	8003584 <getDebugLog>
 8004d7e:	ee10 3a10 	vmov	r3, s0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fbe0 	bl	8000548 <__aeabi_f2d>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4623      	mov	r3, r4
 8004d90:	4816      	ldr	r0, [pc, #88]	; (8004dec <main+0x6a4>)
 8004d92:	f009 febd 	bl	800eb10 <iprintf>
					  for(uint16_t i = 0; i < size; i++){
 8004d96:	88bb      	ldrh	r3, [r7, #4]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	80bb      	strh	r3, [r7, #4]
 8004d9c:	88ba      	ldrh	r2, [r7, #4]
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3e8      	bcc.n	8004d76 <main+0x62e>
					  }

					  running_flag = false;
 8004da4:	2300      	movs	r3, #0
 8004da6:	71fb      	strb	r3, [r7, #7]
					  soiya = 0;
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <main+0x6a8>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 8004dae:	e01b      	b.n	8004de8 <main+0x6a0>

			  default:
				  break;
 8004db0:	bf00      	nop
 8004db2:	e4ee      	b.n	8004792 <main+0x4a>
				  break;
 8004db4:	bf00      	nop
 8004db6:	e4ec      	b.n	8004792 <main+0x4a>
				  break;
 8004db8:	bf00      	nop
 8004dba:	e4ea      	b.n	8004792 <main+0x4a>
				  break;
 8004dbc:	bf00      	nop
 8004dbe:	e4e8      	b.n	8004792 <main+0x4a>
				  break;
 8004dc0:	bf00      	nop
 8004dc2:	e4e6      	b.n	8004792 <main+0x4a>
				  break;
 8004dc4:	bf00      	nop
 8004dc6:	e4e4      	b.n	8004792 <main+0x4a>
				  break;
 8004dc8:	bf00      	nop
 8004dca:	e4e2      	b.n	8004792 <main+0x4a>
				  break;
 8004dcc:	bf00      	nop
 8004dce:	e4e0      	b.n	8004792 <main+0x4a>
				  break;
 8004dd0:	bf00      	nop
 8004dd2:	e4de      	b.n	8004792 <main+0x4a>
			  	  break;
 8004dd4:	bf00      	nop
 8004dd6:	e4dc      	b.n	8004792 <main+0x4a>
				  break;
 8004dd8:	bf00      	nop
 8004dda:	e4da      	b.n	8004792 <main+0x4a>
				  break;
 8004ddc:	bf00      	nop
 8004dde:	e4d8      	b.n	8004792 <main+0x4a>
				  break;
 8004de0:	bf00      	nop
 8004de2:	e4d6      	b.n	8004792 <main+0x4a>
				  break;
 8004de4:	bf00      	nop
 8004de6:	e4d4      	b.n	8004792 <main+0x4a>
				  break;
 8004de8:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004dea:	e4d2      	b.n	8004792 <main+0x4a>
 8004dec:	08012250 	.word	0x08012250
 8004df0:	2001b25a 	.word	0x2001b25a

08004df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b094      	sub	sp, #80	; 0x50
 8004df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dfa:	f107 0320 	add.w	r3, r7, #32
 8004dfe:	2230      	movs	r2, #48	; 0x30
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f009 f83d 	bl	800de82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <SystemClock_Config+0xcc>)
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <SystemClock_Config+0xcc>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6413      	str	r3, [r2, #64]	; 0x40
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <SystemClock_Config+0xcc>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e34:	2300      	movs	r3, #0
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <SystemClock_Config+0xd0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <SystemClock_Config+0xd0>)
 8004e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <SystemClock_Config+0xd0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e50:	2302      	movs	r3, #2
 8004e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e54:	2301      	movs	r3, #1
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e58:	2310      	movs	r3, #16
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e60:	2300      	movs	r3, #0
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e64:	2308      	movs	r3, #8
 8004e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e68:	23a8      	movs	r3, #168	; 0xa8
 8004e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e70:	2304      	movs	r3, #4
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e74:	f107 0320 	add.w	r3, r7, #32
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f004 f949 	bl	8009110 <HAL_RCC_OscConfig>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004e84:	f000 fd04 	bl	8005890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e88:	230f      	movs	r3, #15
 8004e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	2105      	movs	r1, #5
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f004 fba2 	bl	80095f0 <HAL_RCC_ClockConfig>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004eb2:	f000 fced 	bl	8005890 <Error_Handler>
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3750      	adds	r7, #80	; 0x50
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40007000 	.word	0x40007000

08004ec8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ece:	463b      	mov	r3, r7
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <MX_ADC1_Init+0xb8>)
 8004ede:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004ee0:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ee6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004eee:	4b23      	ldr	r3, [pc, #140]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004efa:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <MX_ADC1_Init+0xbc>)
 8004f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f16:	2202      	movs	r2, #2
 8004f18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f1a:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f28:	4814      	ldr	r0, [pc, #80]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f2a:	f002 fb8f 	bl	800764c <HAL_ADC_Init>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004f34:	f000 fcac 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004f38:	230c      	movs	r3, #12
 8004f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004f40:	2307      	movs	r3, #7
 8004f42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f44:	463b      	mov	r3, r7
 8004f46:	4619      	mov	r1, r3
 8004f48:	480c      	ldr	r0, [pc, #48]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f4a:	f002 fcd3 	bl	80078f4 <HAL_ADC_ConfigChannel>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004f54:	f000 fc9c 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004f58:	230d      	movs	r3, #13
 8004f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f60:	463b      	mov	r3, r7
 8004f62:	4619      	mov	r1, r3
 8004f64:	4805      	ldr	r0, [pc, #20]	; (8004f7c <MX_ADC1_Init+0xb4>)
 8004f66:	f002 fcc5 	bl	80078f4 <HAL_ADC_ConfigChannel>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004f70:	f000 fc8e 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	2001d3a0 	.word	0x2001d3a0
 8004f80:	40012000 	.word	0x40012000
 8004f84:	0f000001 	.word	0x0f000001

08004f88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f8e:	463b      	mov	r3, r7
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004f9a:	4b6e      	ldr	r3, [pc, #440]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	; (8005158 <MX_ADC2_Init+0x1d0>)
 8004f9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004fa0:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fa6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004fa8:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004fae:	4b69      	ldr	r3, [pc, #420]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004fb4:	4b67      	ldr	r3, [pc, #412]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004fba:	4b66      	ldr	r3, [pc, #408]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fc2:	4b64      	ldr	r3, [pc, #400]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fc8:	4b62      	ldr	r3, [pc, #392]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fca:	4a64      	ldr	r2, [pc, #400]	; (800515c <MX_ADC2_Init+0x1d4>)
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004fce:	4b61      	ldr	r3, [pc, #388]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8004fd4:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fd6:	220c      	movs	r2, #12
 8004fd8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004fda:	4b5e      	ldr	r3, [pc, #376]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004fe8:	485a      	ldr	r0, [pc, #360]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8004fea:	f002 fb2f 	bl	800764c <HAL_ADC_Init>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004ff4:	f000 fc4c 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005000:	2307      	movs	r3, #7
 8005002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005004:	463b      	mov	r3, r7
 8005006:	4619      	mov	r1, r3
 8005008:	4852      	ldr	r0, [pc, #328]	; (8005154 <MX_ADC2_Init+0x1cc>)
 800500a:	f002 fc73 	bl	80078f4 <HAL_ADC_ConfigChannel>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005014:	f000 fc3c 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005018:	2301      	movs	r3, #1
 800501a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800501c:	2302      	movs	r3, #2
 800501e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005020:	463b      	mov	r3, r7
 8005022:	4619      	mov	r1, r3
 8005024:	484b      	ldr	r0, [pc, #300]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8005026:	f002 fc65 	bl	80078f4 <HAL_ADC_ConfigChannel>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005030:	f000 fc2e 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005034:	2302      	movs	r3, #2
 8005036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005038:	2303      	movs	r3, #3
 800503a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800503c:	463b      	mov	r3, r7
 800503e:	4619      	mov	r1, r3
 8005040:	4844      	ldr	r0, [pc, #272]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8005042:	f002 fc57 	bl	80078f4 <HAL_ADC_ConfigChannel>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800504c:	f000 fc20 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005050:	2303      	movs	r3, #3
 8005052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005054:	2304      	movs	r3, #4
 8005056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005058:	463b      	mov	r3, r7
 800505a:	4619      	mov	r1, r3
 800505c:	483d      	ldr	r0, [pc, #244]	; (8005154 <MX_ADC2_Init+0x1cc>)
 800505e:	f002 fc49 	bl	80078f4 <HAL_ADC_ConfigChannel>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005068:	f000 fc12 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800506c:	2304      	movs	r3, #4
 800506e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005070:	2305      	movs	r3, #5
 8005072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005074:	463b      	mov	r3, r7
 8005076:	4619      	mov	r1, r3
 8005078:	4836      	ldr	r0, [pc, #216]	; (8005154 <MX_ADC2_Init+0x1cc>)
 800507a:	f002 fc3b 	bl	80078f4 <HAL_ADC_ConfigChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005084:	f000 fc04 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005088:	2305      	movs	r3, #5
 800508a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800508c:	2306      	movs	r3, #6
 800508e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005090:	463b      	mov	r3, r7
 8005092:	4619      	mov	r1, r3
 8005094:	482f      	ldr	r0, [pc, #188]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8005096:	f002 fc2d 	bl	80078f4 <HAL_ADC_ConfigChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80050a0:	f000 fbf6 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80050a4:	2306      	movs	r3, #6
 80050a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80050a8:	2307      	movs	r3, #7
 80050aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050ac:	463b      	mov	r3, r7
 80050ae:	4619      	mov	r1, r3
 80050b0:	4828      	ldr	r0, [pc, #160]	; (8005154 <MX_ADC2_Init+0x1cc>)
 80050b2:	f002 fc1f 	bl	80078f4 <HAL_ADC_ConfigChannel>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80050bc:	f000 fbe8 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80050c0:	2307      	movs	r3, #7
 80050c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80050c4:	2308      	movs	r3, #8
 80050c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050c8:	463b      	mov	r3, r7
 80050ca:	4619      	mov	r1, r3
 80050cc:	4821      	ldr	r0, [pc, #132]	; (8005154 <MX_ADC2_Init+0x1cc>)
 80050ce:	f002 fc11 	bl	80078f4 <HAL_ADC_ConfigChannel>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80050d8:	f000 fbda 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80050dc:	2308      	movs	r3, #8
 80050de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80050e0:	2309      	movs	r3, #9
 80050e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050e4:	463b      	mov	r3, r7
 80050e6:	4619      	mov	r1, r3
 80050e8:	481a      	ldr	r0, [pc, #104]	; (8005154 <MX_ADC2_Init+0x1cc>)
 80050ea:	f002 fc03 	bl	80078f4 <HAL_ADC_ConfigChannel>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80050f4:	f000 fbcc 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80050f8:	2309      	movs	r3, #9
 80050fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80050fc:	230a      	movs	r3, #10
 80050fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005100:	463b      	mov	r3, r7
 8005102:	4619      	mov	r1, r3
 8005104:	4813      	ldr	r0, [pc, #76]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8005106:	f002 fbf5 	bl	80078f4 <HAL_ADC_ConfigChannel>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005110:	f000 fbbe 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005114:	230e      	movs	r3, #14
 8005116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005118:	230b      	movs	r3, #11
 800511a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800511c:	463b      	mov	r3, r7
 800511e:	4619      	mov	r1, r3
 8005120:	480c      	ldr	r0, [pc, #48]	; (8005154 <MX_ADC2_Init+0x1cc>)
 8005122:	f002 fbe7 	bl	80078f4 <HAL_ADC_ConfigChannel>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800512c:	f000 fbb0 	bl	8005890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005130:	230f      	movs	r3, #15
 8005132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005134:	230c      	movs	r3, #12
 8005136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005138:	463b      	mov	r3, r7
 800513a:	4619      	mov	r1, r3
 800513c:	4805      	ldr	r0, [pc, #20]	; (8005154 <MX_ADC2_Init+0x1cc>)
 800513e:	f002 fbd9 	bl	80078f4 <HAL_ADC_ConfigChannel>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005148:	f000 fba2 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2001d350 	.word	0x2001d350
 8005158:	40012100 	.word	0x40012100
 800515c:	0f000001 	.word	0x0f000001

08005160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <MX_I2C1_Init+0x50>)
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <MX_I2C1_Init+0x54>)
 8005168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800516a:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <MX_I2C1_Init+0x50>)
 800516c:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <MX_I2C1_Init+0x58>)
 800516e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <MX_I2C1_Init+0x50>)
 8005172:	2200      	movs	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005176:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <MX_I2C1_Init+0x50>)
 8005178:	2200      	movs	r2, #0
 800517a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <MX_I2C1_Init+0x50>)
 800517e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <MX_I2C1_Init+0x50>)
 8005186:	2200      	movs	r2, #0
 8005188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <MX_I2C1_Init+0x50>)
 800518c:	2200      	movs	r2, #0
 800518e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <MX_I2C1_Init+0x50>)
 8005192:	2200      	movs	r2, #0
 8005194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <MX_I2C1_Init+0x50>)
 8005198:	2200      	movs	r2, #0
 800519a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800519c:	4804      	ldr	r0, [pc, #16]	; (80051b0 <MX_I2C1_Init+0x50>)
 800519e:	f003 fe7f 	bl	8008ea0 <HAL_I2C_Init>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80051a8:	f000 fb72 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80051ac:	bf00      	nop
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2001d48c 	.word	0x2001d48c
 80051b4:	40005400 	.word	0x40005400
 80051b8:	000186a0 	.word	0x000186a0

080051bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80051c0:	4b17      	ldr	r3, [pc, #92]	; (8005220 <MX_SPI3_Init+0x64>)
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <MX_SPI3_Init+0x68>)
 80051c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80051c6:	4b16      	ldr	r3, [pc, #88]	; (8005220 <MX_SPI3_Init+0x64>)
 80051c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <MX_SPI3_Init+0x64>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <MX_SPI3_Init+0x64>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051da:	4b11      	ldr	r3, [pc, #68]	; (8005220 <MX_SPI3_Init+0x64>)
 80051dc:	2200      	movs	r2, #0
 80051de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051e0:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <MX_SPI3_Init+0x64>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <MX_SPI3_Init+0x64>)
 80051e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <MX_SPI3_Init+0x64>)
 80051f0:	2228      	movs	r2, #40	; 0x28
 80051f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <MX_SPI3_Init+0x64>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <MX_SPI3_Init+0x64>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <MX_SPI3_Init+0x64>)
 8005202:	2200      	movs	r2, #0
 8005204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <MX_SPI3_Init+0x64>)
 8005208:	220a      	movs	r2, #10
 800520a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800520c:	4804      	ldr	r0, [pc, #16]	; (8005220 <MX_SPI3_Init+0x64>)
 800520e:	f004 fbbb 	bl	8009988 <HAL_SPI_Init>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005218:	f000 fb3a 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800521c:	bf00      	nop
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2001d4e4 	.word	0x2001d4e4
 8005224:	40003c00 	.word	0x40003c00

08005228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b092      	sub	sp, #72	; 0x48
 800522c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800522e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	611a      	str	r2, [r3, #16]
 8005248:	615a      	str	r2, [r3, #20]
 800524a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	2220      	movs	r2, #32
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f008 fe15 	bl	800de82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005258:	4b32      	ldr	r3, [pc, #200]	; (8005324 <MX_TIM1_Init+0xfc>)
 800525a:	4a33      	ldr	r2, [pc, #204]	; (8005328 <MX_TIM1_Init+0x100>)
 800525c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800525e:	4b31      	ldr	r3, [pc, #196]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005264:	4b2f      	ldr	r3, [pc, #188]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005266:	2200      	movs	r2, #0
 8005268:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <MX_TIM1_Init+0xfc>)
 800526c:	f240 3247 	movw	r2, #839	; 0x347
 8005270:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <MX_TIM1_Init+0xfc>)
 800527a:	2200      	movs	r2, #0
 800527c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800527e:	4b29      	ldr	r3, [pc, #164]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005280:	2200      	movs	r2, #0
 8005282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005284:	4827      	ldr	r0, [pc, #156]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005286:	f005 f922 	bl	800a4ce <HAL_TIM_PWM_Init>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005290:	f000 fafe 	bl	8005890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800529c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052a0:	4619      	mov	r1, r3
 80052a2:	4820      	ldr	r0, [pc, #128]	; (8005324 <MX_TIM1_Init+0xfc>)
 80052a4:	f005 feb2 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80052ae:	f000 faef 	bl	8005890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052b2:	2360      	movs	r3, #96	; 0x60
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052ba:	2300      	movs	r3, #0
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052be:	2300      	movs	r3, #0
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80052c6:	2300      	movs	r3, #0
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ce:	220c      	movs	r2, #12
 80052d0:	4619      	mov	r1, r3
 80052d2:	4814      	ldr	r0, [pc, #80]	; (8005324 <MX_TIM1_Init+0xfc>)
 80052d4:	f005 fb36 	bl	800a944 <HAL_TIM_PWM_ConfigChannel>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80052de:	f000 fad7 	bl	8005890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80052f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	4619      	mov	r1, r3
 8005304:	4807      	ldr	r0, [pc, #28]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005306:	f005 fefd 	bl	800b104 <HAL_TIMEx_ConfigBreakDeadTime>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8005310:	f000 fabe 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005314:	4803      	ldr	r0, [pc, #12]	; (8005324 <MX_TIM1_Init+0xfc>)
 8005316:	f001 fef9 	bl	800710c <HAL_TIM_MspPostInit>

}
 800531a:	bf00      	nop
 800531c:	3748      	adds	r7, #72	; 0x48
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	2001d61c 	.word	0x2001d61c
 8005328:	40010000 	.word	0x40010000

0800532c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005332:	f107 030c 	add.w	r3, r7, #12
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f008 fda1 	bl	800de82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <MX_TIM3_Init+0xa0>)
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <MX_TIM3_Init+0xa4>)
 800534c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800534e:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <MX_TIM3_Init+0xa0>)
 8005350:	2200      	movs	r2, #0
 8005352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <MX_TIM3_Init+0xa0>)
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800535a:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <MX_TIM3_Init+0xa0>)
 800535c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005362:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <MX_TIM3_Init+0xa0>)
 8005364:	2200      	movs	r2, #0
 8005366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005368:	4b18      	ldr	r3, [pc, #96]	; (80053cc <MX_TIM3_Init+0xa0>)
 800536a:	2200      	movs	r2, #0
 800536c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800536e:	2301      	movs	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005376:	2301      	movs	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005382:	2300      	movs	r3, #0
 8005384:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005386:	2301      	movs	r3, #1
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800538a:	2300      	movs	r3, #0
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005392:	f107 030c 	add.w	r3, r7, #12
 8005396:	4619      	mov	r1, r3
 8005398:	480c      	ldr	r0, [pc, #48]	; (80053cc <MX_TIM3_Init+0xa0>)
 800539a:	f005 f901 	bl	800a5a0 <HAL_TIM_Encoder_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80053a4:	f000 fa74 	bl	8005890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a8:	2300      	movs	r3, #0
 80053aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4805      	ldr	r0, [pc, #20]	; (80053cc <MX_TIM3_Init+0xa0>)
 80053b6:	f005 fe29 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80053c0:	f000 fa66 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053c4:	bf00      	nop
 80053c6:	3730      	adds	r7, #48	; 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	2001d2f8 	.word	0x2001d2f8
 80053d0:	40000400 	.word	0x40000400

080053d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	; 0x30
 80053d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053da:	f107 030c 	add.w	r3, r7, #12
 80053de:	2224      	movs	r2, #36	; 0x24
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f008 fd4d 	bl	800de82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80053f0:	4b20      	ldr	r3, [pc, #128]	; (8005474 <MX_TIM4_Init+0xa0>)
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <MX_TIM4_Init+0xa4>)
 80053f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <MX_TIM4_Init+0xa0>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053fc:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <MX_TIM4_Init+0xa0>)
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <MX_TIM4_Init+0xa0>)
 8005404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005408:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <MX_TIM4_Init+0xa0>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005410:	4b18      	ldr	r3, [pc, #96]	; (8005474 <MX_TIM4_Init+0xa0>)
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005416:	2301      	movs	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800541e:	2301      	movs	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800542a:	2300      	movs	r3, #0
 800542c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800542e:	2301      	movs	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005432:	2300      	movs	r3, #0
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	4619      	mov	r1, r3
 8005440:	480c      	ldr	r0, [pc, #48]	; (8005474 <MX_TIM4_Init+0xa0>)
 8005442:	f005 f8ad 	bl	800a5a0 <HAL_TIM_Encoder_Init>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800544c:	f000 fa20 	bl	8005890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005450:	2300      	movs	r3, #0
 8005452:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4805      	ldr	r0, [pc, #20]	; (8005474 <MX_TIM4_Init+0xa0>)
 800545e:	f005 fdd5 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005468:	f000 fa12 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800546c:	bf00      	nop
 800546e:	3730      	adds	r7, #48	; 0x30
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	2001d2b8 	.word	0x2001d2b8
 8005478:	40000800 	.word	0x40000800

0800547c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005482:	463b      	mov	r3, r7
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <MX_TIM6_Init+0x64>)
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <MX_TIM6_Init+0x68>)
 800548e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005490:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <MX_TIM6_Init+0x64>)
 8005492:	2253      	movs	r2, #83	; 0x53
 8005494:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <MX_TIM6_Init+0x64>)
 8005498:	2200      	movs	r2, #0
 800549a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800549c:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <MX_TIM6_Init+0x64>)
 800549e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <MX_TIM6_Init+0x64>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80054aa:	480d      	ldr	r0, [pc, #52]	; (80054e0 <MX_TIM6_Init+0x64>)
 80054ac:	f004 ffc0 	bl	800a430 <HAL_TIM_Base_Init>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80054b6:	f000 f9eb 	bl	8005890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80054c2:	463b      	mov	r3, r7
 80054c4:	4619      	mov	r1, r3
 80054c6:	4806      	ldr	r0, [pc, #24]	; (80054e0 <MX_TIM6_Init+0x64>)
 80054c8:	f005 fda0 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80054d2:	f000 f9dd 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	2001d5dc 	.word	0x2001d5dc
 80054e4:	40001000 	.word	0x40001000

080054e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054ee:	463b      	mov	r3, r7
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <MX_TIM7_Init+0x60>)
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <MX_TIM7_Init+0x64>)
 80054fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80054fc:	4b12      	ldr	r3, [pc, #72]	; (8005548 <MX_TIM7_Init+0x60>)
 80054fe:	2253      	movs	r2, #83	; 0x53
 8005500:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <MX_TIM7_Init+0x60>)
 8005504:	2200      	movs	r2, #0
 8005506:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <MX_TIM7_Init+0x60>)
 800550a:	2263      	movs	r2, #99	; 0x63
 800550c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <MX_TIM7_Init+0x60>)
 8005510:	2200      	movs	r2, #0
 8005512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005514:	480c      	ldr	r0, [pc, #48]	; (8005548 <MX_TIM7_Init+0x60>)
 8005516:	f004 ff8b 	bl	800a430 <HAL_TIM_Base_Init>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005520:	f000 f9b6 	bl	8005890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800552c:	463b      	mov	r3, r7
 800552e:	4619      	mov	r1, r3
 8005530:	4805      	ldr	r0, [pc, #20]	; (8005548 <MX_TIM7_Init+0x60>)
 8005532:	f005 fd6b 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800553c:	f000 f9a8 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	2001d6c4 	.word	0x2001d6c4
 800554c:	40001400 	.word	0x40001400

08005550 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b092      	sub	sp, #72	; 0x48
 8005554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	611a      	str	r2, [r3, #16]
 8005570:	615a      	str	r2, [r3, #20]
 8005572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	2220      	movs	r2, #32
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f008 fc81 	bl	800de82 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005580:	4b39      	ldr	r3, [pc, #228]	; (8005668 <MX_TIM8_Init+0x118>)
 8005582:	4a3a      	ldr	r2, [pc, #232]	; (800566c <MX_TIM8_Init+0x11c>)
 8005584:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8005586:	4b38      	ldr	r3, [pc, #224]	; (8005668 <MX_TIM8_Init+0x118>)
 8005588:	2203      	movs	r2, #3
 800558a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800558c:	4b36      	ldr	r3, [pc, #216]	; (8005668 <MX_TIM8_Init+0x118>)
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8005592:	4b35      	ldr	r3, [pc, #212]	; (8005668 <MX_TIM8_Init+0x118>)
 8005594:	f240 628f 	movw	r2, #1679	; 0x68f
 8005598:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800559a:	4b33      	ldr	r3, [pc, #204]	; (8005668 <MX_TIM8_Init+0x118>)
 800559c:	2200      	movs	r2, #0
 800559e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80055a0:	4b31      	ldr	r3, [pc, #196]	; (8005668 <MX_TIM8_Init+0x118>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <MX_TIM8_Init+0x118>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80055ac:	482e      	ldr	r0, [pc, #184]	; (8005668 <MX_TIM8_Init+0x118>)
 80055ae:	f004 ff8e 	bl	800a4ce <HAL_TIM_PWM_Init>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80055b8:	f000 f96a 	bl	8005890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055bc:	2300      	movs	r3, #0
 80055be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80055c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055c8:	4619      	mov	r1, r3
 80055ca:	4827      	ldr	r0, [pc, #156]	; (8005668 <MX_TIM8_Init+0x118>)
 80055cc:	f005 fd1e 	bl	800b00c <HAL_TIMEx_MasterConfigSynchronization>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80055d6:	f000 f95b 	bl	8005890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055da:	2360      	movs	r3, #96	; 0x60
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80055e6:	2300      	movs	r3, #0
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055fa:	2200      	movs	r2, #0
 80055fc:	4619      	mov	r1, r3
 80055fe:	481a      	ldr	r0, [pc, #104]	; (8005668 <MX_TIM8_Init+0x118>)
 8005600:	f005 f9a0 	bl	800a944 <HAL_TIM_PWM_ConfigChannel>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800560a:	f000 f941 	bl	8005890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800560e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005612:	2208      	movs	r2, #8
 8005614:	4619      	mov	r1, r3
 8005616:	4814      	ldr	r0, [pc, #80]	; (8005668 <MX_TIM8_Init+0x118>)
 8005618:	f005 f994 	bl	800a944 <HAL_TIM_PWM_ConfigChannel>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8005622:	f000 f935 	bl	8005890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800563a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800563e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005644:	1d3b      	adds	r3, r7, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4807      	ldr	r0, [pc, #28]	; (8005668 <MX_TIM8_Init+0x118>)
 800564a:	f005 fd5b 	bl	800b104 <HAL_TIMEx_ConfigBreakDeadTime>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8005654:	f000 f91c 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005658:	4803      	ldr	r0, [pc, #12]	; (8005668 <MX_TIM8_Init+0x118>)
 800565a:	f001 fd57 	bl	800710c <HAL_TIM_MspPostInit>

}
 800565e:	bf00      	nop
 8005660:	3748      	adds	r7, #72	; 0x48
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	2001d444 	.word	0x2001d444
 800566c:	40010400 	.word	0x40010400

08005670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 8005676:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <MX_USART1_UART_Init+0x50>)
 8005678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 800567c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005682:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 8005684:	2200      	movs	r2, #0
 8005686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 800568a:	2200      	movs	r2, #0
 800568c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 8005690:	2200      	movs	r2, #0
 8005692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 8005696:	220c      	movs	r2, #12
 8005698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 800569c:	2200      	movs	r2, #0
 800569e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056a6:	4805      	ldr	r0, [pc, #20]	; (80056bc <MX_USART1_UART_Init+0x4c>)
 80056a8:	f005 fd92 	bl	800b1d0 <HAL_UART_Init>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80056b2:	f000 f8ed 	bl	8005890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	2001d53c 	.word	0x2001d53c
 80056c0:	40011000 	.word	0x40011000

080056c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <MX_DMA_Init+0x4c>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	4a0f      	ldr	r2, [pc, #60]	; (8005710 <MX_DMA_Init+0x4c>)
 80056d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056d8:	6313      	str	r3, [r2, #48]	; 0x30
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <MX_DMA_Init+0x4c>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80056e6:	2200      	movs	r2, #0
 80056e8:	2100      	movs	r1, #0
 80056ea:	2038      	movs	r0, #56	; 0x38
 80056ec:	f002 fc7d 	bl	8007fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80056f0:	2038      	movs	r0, #56	; 0x38
 80056f2:	f002 fc96 	bl	8008022 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	203a      	movs	r0, #58	; 0x3a
 80056fc:	f002 fc75 	bl	8007fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005700:	203a      	movs	r0, #58	; 0x3a
 8005702:	f002 fc8e 	bl	8008022 <HAL_NVIC_EnableIRQ>

}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800

08005714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	609a      	str	r2, [r3, #8]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	4b53      	ldr	r3, [pc, #332]	; (800587c <MX_GPIO_Init+0x168>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	4a52      	ldr	r2, [pc, #328]	; (800587c <MX_GPIO_Init+0x168>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	6313      	str	r3, [r2, #48]	; 0x30
 800573a:	4b50      	ldr	r3, [pc, #320]	; (800587c <MX_GPIO_Init+0x168>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	4b4c      	ldr	r3, [pc, #304]	; (800587c <MX_GPIO_Init+0x168>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	4a4b      	ldr	r2, [pc, #300]	; (800587c <MX_GPIO_Init+0x168>)
 8005750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005754:	6313      	str	r3, [r2, #48]	; 0x30
 8005756:	4b49      	ldr	r3, [pc, #292]	; (800587c <MX_GPIO_Init+0x168>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	4b45      	ldr	r3, [pc, #276]	; (800587c <MX_GPIO_Init+0x168>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	4a44      	ldr	r2, [pc, #272]	; (800587c <MX_GPIO_Init+0x168>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6313      	str	r3, [r2, #48]	; 0x30
 8005772:	4b42      	ldr	r3, [pc, #264]	; (800587c <MX_GPIO_Init+0x168>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	4b3e      	ldr	r3, [pc, #248]	; (800587c <MX_GPIO_Init+0x168>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	4a3d      	ldr	r2, [pc, #244]	; (800587c <MX_GPIO_Init+0x168>)
 8005788:	f043 0302 	orr.w	r3, r3, #2
 800578c:	6313      	str	r3, [r2, #48]	; 0x30
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <MX_GPIO_Init+0x168>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4b37      	ldr	r3, [pc, #220]	; (800587c <MX_GPIO_Init+0x168>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	4a36      	ldr	r2, [pc, #216]	; (800587c <MX_GPIO_Init+0x168>)
 80057a4:	f043 0308 	orr.w	r3, r3, #8
 80057a8:	6313      	str	r3, [r2, #48]	; 0x30
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <MX_GPIO_Init+0x168>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80057b6:	2200      	movs	r2, #0
 80057b8:	f24e 2180 	movw	r1, #57984	; 0xe280
 80057bc:	4830      	ldr	r0, [pc, #192]	; (8005880 <MX_GPIO_Init+0x16c>)
 80057be:	f003 fb55 	bl	8008e6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80057c2:	2200      	movs	r2, #0
 80057c4:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80057c8:	482e      	ldr	r0, [pc, #184]	; (8005884 <MX_GPIO_Init+0x170>)
 80057ca:	f003 fb4f 	bl	8008e6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80057ce:	2200      	movs	r2, #0
 80057d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057d4:	482c      	ldr	r0, [pc, #176]	; (8005888 <MX_GPIO_Init+0x174>)
 80057d6:	f003 fb49 	bl	8008e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80057da:	2200      	movs	r2, #0
 80057dc:	2104      	movs	r1, #4
 80057de:	482b      	ldr	r0, [pc, #172]	; (800588c <MX_GPIO_Init+0x178>)
 80057e0:	f003 fb44 	bl	8008e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80057e4:	f24e 2380 	movw	r3, #57984	; 0xe280
 80057e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057f6:	f107 0314 	add.w	r3, r7, #20
 80057fa:	4619      	mov	r1, r3
 80057fc:	4820      	ldr	r0, [pc, #128]	; (8005880 <MX_GPIO_Init+0x16c>)
 80057fe:	f003 f983 	bl	8008b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005802:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8005806:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005808:	2301      	movs	r3, #1
 800580a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005810:	2300      	movs	r3, #0
 8005812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005814:	f107 0314 	add.w	r3, r7, #20
 8005818:	4619      	mov	r1, r3
 800581a:	481a      	ldr	r0, [pc, #104]	; (8005884 <MX_GPIO_Init+0x170>)
 800581c:	f003 f974 	bl	8008b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005820:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8005824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	4619      	mov	r1, r3
 8005834:	4814      	ldr	r0, [pc, #80]	; (8005888 <MX_GPIO_Init+0x174>)
 8005836:	f003 f967 	bl	8008b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005840:	2301      	movs	r3, #1
 8005842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005848:	2300      	movs	r3, #0
 800584a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4619      	mov	r1, r3
 8005852:	480d      	ldr	r0, [pc, #52]	; (8005888 <MX_GPIO_Init+0x174>)
 8005854:	f003 f958 	bl	8008b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005858:	2304      	movs	r3, #4
 800585a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800585c:	2301      	movs	r3, #1
 800585e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005864:	2300      	movs	r3, #0
 8005866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	4619      	mov	r1, r3
 800586e:	4807      	ldr	r0, [pc, #28]	; (800588c <MX_GPIO_Init+0x178>)
 8005870:	f003 f94a 	bl	8008b08 <HAL_GPIO_Init>

}
 8005874:	bf00      	nop
 8005876:	3728      	adds	r7, #40	; 0x28
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40023800 	.word	0x40023800
 8005880:	40020800 	.word	0x40020800
 8005884:	40020400 	.word	0x40020400
 8005888:	40020000 	.word	0x40020000
 800588c:	40020c00 	.word	0x40020c00

08005890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005894:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005896:	e7fe      	b.n	8005896 <Error_Handler+0x6>

08005898 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 800589c:	2100      	movs	r1, #0
 800589e:	4808      	ldr	r0, [pc, #32]	; (80058c0 <initMotor+0x28>)
 80058a0:	f004 fe40 	bl	800a524 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 80058a4:	2108      	movs	r1, #8
 80058a6:	4806      	ldr	r0, [pc, #24]	; (80058c0 <initMotor+0x28>)
 80058a8:	f004 fe3c 	bl	800a524 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80058ac:	210c      	movs	r1, #12
 80058ae:	4805      	ldr	r0, [pc, #20]	; (80058c4 <initMotor+0x2c>)
 80058b0:	f004 fe38 	bl	800a524 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 80058b4:	2064      	movs	r0, #100	; 0x64
 80058b6:	f001 fea7 	bl	8007608 <HAL_Delay>
}
 80058ba:	bf00      	nop
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2001d444 	.word	0x2001d444
 80058c4:	2001d61c 	.word	0x2001d61c

080058c8 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <motorCtrlFlip+0xb0>)
 80058d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	db0d      	blt.n	80058f4 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <motorCtrlFlip+0xb0>)
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <motorCtrlFlip+0xb4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058e6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80058e8:	2200      	movs	r2, #0
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	4824      	ldr	r0, [pc, #144]	; (8005980 <motorCtrlFlip+0xb8>)
 80058ee:	f003 fabd 	bl	8008e6c <HAL_GPIO_WritePin>
 80058f2:	e010      	b.n	8005916 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 80058f4:	4b20      	ldr	r3, [pc, #128]	; (8005978 <motorCtrlFlip+0xb0>)
 80058f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	425b      	negs	r3, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8005902:	4b1e      	ldr	r3, [pc, #120]	; (800597c <motorCtrlFlip+0xb4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800590a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800590c:	2201      	movs	r2, #1
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	481b      	ldr	r0, [pc, #108]	; (8005980 <motorCtrlFlip+0xb8>)
 8005912:	f003 faab 	bl	8008e6c <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <motorCtrlFlip+0xbc>)
 8005918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db0e      	blt.n	800593e <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <motorCtrlFlip+0xbc>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <motorCtrlFlip+0xb4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800592e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005936:	4812      	ldr	r0, [pc, #72]	; (8005980 <motorCtrlFlip+0xb8>)
 8005938:	f003 fa98 	bl	8008e6c <HAL_GPIO_WritePin>
 800593c:	e011      	b.n	8005962 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <motorCtrlFlip+0xbc>)
 8005940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005944:	b29b      	uxth	r3, r3
 8005946:	425b      	negs	r3, r3
 8005948:	b29b      	uxth	r3, r3
 800594a:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <motorCtrlFlip+0xb4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8005956:	2201      	movs	r2, #1
 8005958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800595c:	4808      	ldr	r0, [pc, #32]	; (8005980 <motorCtrlFlip+0xb8>)
 800595e:	f003 fa85 	bl	8008e6c <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <motorCtrlFlip+0xc0>)
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8005968:	4a08      	ldr	r2, [pc, #32]	; (800598c <motorCtrlFlip+0xc4>)
 800596a:	88bb      	ldrh	r3, [r7, #4]
 800596c:	8013      	strh	r3, [r2, #0]
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	2001b25c 	.word	0x2001b25c
 800597c:	2001d444 	.word	0x2001d444
 8005980:	40020800 	.word	0x40020800
 8005984:	2001b25e 	.word	0x2001b25e
 8005988:	2001d708 	.word	0x2001d708
 800598c:	2001d706 	.word	0x2001d706

08005990 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <suctionmotorCtrlFlip+0x1c>)
 8005996:	f9b3 2000 	ldrsh.w	r2, [r3]
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <suctionmotorCtrlFlip+0x20>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	2001b260 	.word	0x2001b260
 80059b0:	2001d61c 	.word	0x2001d61c

080059b4 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	460a      	mov	r2, r1
 80059be:	80fb      	strh	r3, [r7, #6]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 80059c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c8:	f240 628e 	movw	r2, #1678	; 0x68e
 80059cc:	4293      	cmp	r3, r2
 80059ce:	dd03      	ble.n	80059d8 <setMotor+0x24>
 80059d0:	f240 638f 	movw	r3, #1679	; 0x68f
 80059d4:	80fb      	strh	r3, [r7, #6]
 80059d6:	e007      	b.n	80059e8 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 80059d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059dc:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <setMotor+0x70>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	da02      	bge.n	80059e8 <setMotor+0x34>
 80059e2:	f64f 1371 	movw	r3, #63857	; 0xf971
 80059e6:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 80059e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059ec:	f240 628e 	movw	r2, #1678	; 0x68e
 80059f0:	4293      	cmp	r3, r2
 80059f2:	dd03      	ble.n	80059fc <setMotor+0x48>
 80059f4:	f240 638f 	movw	r3, #1679	; 0x68f
 80059f8:	80bb      	strh	r3, [r7, #4]
 80059fa:	e007      	b.n	8005a0c <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 80059fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <setMotor+0x70>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	da02      	bge.n	8005a0c <setMotor+0x58>
 8005a06:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005a0a:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8005a0c:	4a06      	ldr	r2, [pc, #24]	; (8005a28 <setMotor+0x74>)
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8005a12:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <setMotor+0x78>)
 8005a14:	88bb      	ldrh	r3, [r7, #4]
 8005a16:	8013      	strh	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	fffff972 	.word	0xfffff972
 8005a28:	2001b25c 	.word	0x2001b25c
 8005a2c:	2001b25e 	.word	0x2001b25e

08005a30 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8005a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	425b      	neglt	r3, r3
 8005a44:	b21a      	sxth	r2, r3
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <setsuctionMotor+0x38>)
 8005a48:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8005a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a4e:	f240 3246 	movw	r2, #838	; 0x346
 8005a52:	4293      	cmp	r3, r2
 8005a54:	dd02      	ble.n	8005a5c <setsuctionMotor+0x2c>
 8005a56:	f240 3347 	movw	r3, #839	; 0x347
 8005a5a:	80fb      	strh	r3, [r7, #6]
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	2001b260 	.word	0x2001b260

08005a6c <updateSideSensorStatus>:
static float debug_now_X;
static float debug_now_Y;
static float debug_now_Theta;
static int16_t V_motor;

void updateSideSensorStatus(){
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <updateSideSensorStatus+0x44>)
 8005a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a7a:	dc03      	bgt.n	8005a84 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <updateSideSensorStatus+0x48>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <updateSideSensorStatus+0x48>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <updateSideSensorStatus+0x4c>)
 8005a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a94:	dc03      	bgt.n	8005a9e <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <updateSideSensorStatus+0x50>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8005a9c:	e002      	b.n	8005aa4 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <updateSideSensorStatus+0x50>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	2001d280 	.word	0x2001d280
 8005ab4:	2001d1b0 	.word	0x2001d1b0
 8005ab8:	2001d204 	.word	0x2001d204
 8005abc:	2001d1b1 	.word	0x2001d1b1

08005ac0 <setRunMode>:

void setRunMode(uint16_t num){
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	80fb      	strh	r3, [r7, #6]
	Run_Mode = num;
 8005aca:	4a04      	ldr	r2, [pc, #16]	; (8005adc <setRunMode+0x1c>)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	8013      	strh	r3, [r2, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	2001d712 	.word	0x2001d712

08005ae0 <isCrossLine>:

bool isCrossLine()
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <isCrossLine+0x88>)
 8005ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af4:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8005af8:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <isCrossLine+0x88>)
 8005afa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b06:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8005b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b0e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005b6c <isCrossLine+0x8c>
 8005b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1a:	d50f      	bpl.n	8005b3c <isCrossLine+0x5c>
 8005b1c:	edd7 7a00 	vldr	s15, [r7]
 8005b20:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005b6c <isCrossLine+0x8c>
 8005b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2c:	d506      	bpl.n	8005b3c <isCrossLine+0x5c>
		cnt++;
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <isCrossLine+0x90>)
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <isCrossLine+0x90>)
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <isCrossLine+0x90>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <isCrossLine+0x90>)
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d903      	bls.n	8005b52 <isCrossLine+0x72>
		flag = true;
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <isCrossLine+0x94>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e002      	b.n	8005b58 <isCrossLine+0x78>
	}
	else{
		flag = false;
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <isCrossLine+0x94>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <isCrossLine+0x94>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	2001d260 	.word	0x2001d260
 8005b6c:	442f0000 	.word	0x442f0000
 8005b70:	2001d1dc 	.word	0x2001d1dc
 8005b74:	2001d1de 	.word	0x2001d1de

08005b78 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	ed2d 8b02 	vpush	{d8}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8005b82:	2300      	movs	r3, #0
 8005b84:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <isContinuousCurvature+0xc8>)
 8005b88:	ed93 8a00 	vldr	s16, [r3]
 8005b8c:	f7fb fe6e 	bl	800186c <getTheta10mm>
 8005b90:	eef0 7a40 	vmov.f32	s15, s0
 8005b94:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005b98:	eef0 7ae7 	vabs.f32	s15, s15
 8005b9c:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <isContinuousCurvature+0xcc>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d006      	beq.n	8005bb6 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005ba8:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <isContinuousCurvature+0xcc>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8005bb6:	6838      	ldr	r0, [r7, #0]
 8005bb8:	f7fa fcc6 	bl	8000548 <__aeabi_f2d>
 8005bbc:	a31e      	add	r3, pc, #120	; (adr r3, 8005c38 <isContinuousCurvature+0xc0>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa ff95 	bl	8000af0 <__aeabi_dcmple>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <isContinuousCurvature+0x6a>
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005bce:	edd3 7a00 	vldr	s15, [r3]
 8005bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005bdc:	edc3 7a00 	vstr	s15, [r3]
 8005be0:	e003      	b.n	8005bea <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005bec:	edd3 7a00 	vldr	s15, [r3]
 8005bf0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005c4c <isContinuousCurvature+0xd4>
 8005bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	db01      	blt.n	8005c02 <isContinuousCurvature+0x8a>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005c04:	edd3 7a00 	vldr	s15, [r3]
 8005c08:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005c50 <isContinuousCurvature+0xd8>
 8005c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	db02      	blt.n	8005c1c <isContinuousCurvature+0xa4>
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <isContinuousCurvature+0xd0>)
 8005c18:	4a0e      	ldr	r2, [pc, #56]	; (8005c54 <isContinuousCurvature+0xdc>)
 8005c1a:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8005c1c:	f7fb fe26 	bl	800186c <getTheta10mm>
 8005c20:	eef0 7a40 	vmov.f32	s15, s0
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <isContinuousCurvature+0xc8>)
 8005c26:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	ecbd 8b02 	vpop	{d8}
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	47ae147b 	.word	0x47ae147b
 8005c3c:	3f947ae1 	.word	0x3f947ae1
 8005c40:	2001d1e0 	.word	0x2001d1e0
 8005c44:	2001d1b4 	.word	0x2001d1b4
 8005c48:	2001d1e4 	.word	0x2001d1e4
 8005c4c:	42200000 	.word	0x42200000
 8005c50:	447a0000 	.word	0x447a0000
 8005c54:	447a0000 	.word	0x447a0000

08005c58 <isTargetDistance>:

bool isTargetDistance(float target){
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8005c66:	f7fb fbed 	bl	8001444 <getDistance10mm>
 8005c6a:	eeb0 7a40 	vmov.f32	s14, s0
 8005c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	d801      	bhi.n	8005c80 <isTargetDistance+0x28>
		ret = true;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <running>:

void running(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	ed2d 8b02 	vpush	{d8}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8005c9a:	f000 fa3d 	bl	8006118 <runningInit>
	startLineTrace();
 8005c9e:	f7fc fa93 	bl	80021c8 <startLineTrace>
	startVelocityControl();
 8005ca2:	f7fd fe8d 	bl	80039c0 <startVelocityControl>
	startAngleControl();
 8005ca6:	f7fb fa21 	bl	80010ec <startAngleControl>
	setTargetVelocity(min_velocity);
 8005caa:	4b94      	ldr	r3, [pc, #592]	; (8005efc <running+0x270>)
 8005cac:	edd3 7a00 	vldr	s15, [r3]
 8005cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cb4:	f7fd fdf6 	bl	80038a4 <setTargetVelocity>

	while(goal_flag == false){
 8005cb8:	e112      	b.n	8005ee0 <running+0x254>
		switch(pattern){
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b14      	cmp	r3, #20
 8005cbe:	f200 80d2 	bhi.w	8005e66 <running+0x1da>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <running+0x3c>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005e67 	.word	0x08005e67
 8005cd0:	08005e67 	.word	0x08005e67
 8005cd4:	08005e67 	.word	0x08005e67
 8005cd8:	08005e67 	.word	0x08005e67
 8005cdc:	08005d6b 	.word	0x08005d6b
 8005ce0:	08005e67 	.word	0x08005e67
 8005ce4:	08005e67 	.word	0x08005e67
 8005ce8:	08005e67 	.word	0x08005e67
 8005cec:	08005e67 	.word	0x08005e67
 8005cf0:	08005d87 	.word	0x08005d87
 8005cf4:	08005e67 	.word	0x08005e67
 8005cf8:	08005e67 	.word	0x08005e67
 8005cfc:	08005e67 	.word	0x08005e67
 8005d00:	08005e67 	.word	0x08005e67
 8005d04:	08005e67 	.word	0x08005e67
 8005d08:	08005e67 	.word	0x08005e67
 8005d0c:	08005e67 	.word	0x08005e67
 8005d10:	08005e67 	.word	0x08005e67
 8005d14:	08005e67 	.word	0x08005e67
 8005d18:	08005e3f 	.word	0x08005e3f

				  case 0:
					  if(getSideSensorStatusR() == true){
 8005d1c:	f000 ff22 	bl	8006b64 <getSideSensorStatusR>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01d      	beq.n	8005d62 <running+0xd6>
						  start_goal_line_cnt++;
 8005d26:	4b76      	ldr	r3, [pc, #472]	; (8005f00 <running+0x274>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b74      	ldr	r3, [pc, #464]	; (8005f00 <running+0x274>)
 8005d30:	701a      	strb	r2, [r3, #0]

						  if(Run_Mode == 1)
 8005d32:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <running+0x278>)
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d105      	bne.n	8005d46 <running+0xba>
						  {
							  Control_Mode = 2;
 8005d3a:	4b73      	ldr	r3, [pc, #460]	; (8005f08 <running+0x27c>)
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	801a      	strh	r2, [r3, #0]
							  startLogging();
 8005d40:	f000 faca 	bl	80062d8 <startLogging>
 8005d44:	e006      	b.n	8005d54 <running+0xc8>
						  }
						  else
						  {
							  Control_Mode = 5;
 8005d46:	4b70      	ldr	r3, [pc, #448]	; (8005f08 <running+0x27c>)
 8005d48:	2205      	movs	r2, #5
 8005d4a:	801a      	strh	r2, [r3, #0]
							  startVelocityUpdate();
 8005d4c:	f000 fb00 	bl	8006350 <startVelocityUpdate>
						      startTargetUpdate();
 8005d50:	f000 fade 	bl	8006310 <startTargetUpdate>
						  }

						  clearGoalJudgeDistance();
 8005d54:	f7fb fb3e 	bl	80013d4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8005d58:	f7fb fb4a 	bl	80013f0 <clearSideLineJudgeDistance>
						  pattern = 5;
 8005d5c:	2305      	movs	r3, #5
 8005d5e:	80fb      	strh	r3, [r7, #6]
					  else
					  {
						  Control_Mode = 1;
					  }

					  break;
 8005d60:	e081      	b.n	8005e66 <running+0x1da>
						  Control_Mode = 1;
 8005d62:	4b69      	ldr	r3, [pc, #420]	; (8005f08 <running+0x27c>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	801a      	strh	r2, [r3, #0]
					  break;
 8005d68:	e07d      	b.n	8005e66 <running+0x1da>

				  case 5:
					  if(getSideSensorStatusR() == false && Control_Mode == 2) pattern = 10;
 8005d6a:	f000 fefb 	bl	8006b64 <getSideSensorStatusR>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f083 0301 	eor.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <running+0xfa>
 8005d7a:	4b63      	ldr	r3, [pc, #396]	; (8005f08 <running+0x27c>)
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d101      	bne.n	8005d86 <running+0xfa>
 8005d82:	230a      	movs	r3, #10
 8005d84:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8005d86:	f000 fee1 	bl	8006b4c <getSideSensorStatusL>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <running+0x10e>
						  goal_judge_flag = false;
 8005d90:	4b5e      	ldr	r3, [pc, #376]	; (8005f0c <running+0x280>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005d96:	f7fb fb1d 	bl	80013d4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true && getGoalJudgeDistance() >= 30 && Control_Mode == 2){
 8005d9a:	4b5c      	ldr	r3, [pc, #368]	; (8005f0c <running+0x280>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f083 0301 	eor.w	r3, r3, #1
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d019      	beq.n	8005ddc <running+0x150>
 8005da8:	f000 fedc 	bl	8006b64 <getSideSensorStatusR>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d014      	beq.n	8005ddc <running+0x150>
 8005db2:	f7fb fad7 	bl	8001364 <getGoalJudgeDistance>
 8005db6:	eeb0 7a40 	vmov.f32	s14, s0
 8005dba:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8005dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	db09      	blt.n	8005ddc <running+0x150>
 8005dc8:	4b4f      	ldr	r3, [pc, #316]	; (8005f08 <running+0x27c>)
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d105      	bne.n	8005ddc <running+0x150>
						  goal_judge_flag = true;
 8005dd0:	4b4e      	ldr	r3, [pc, #312]	; (8005f0c <running+0x280>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005dd6:	f7fb fafd 	bl	80013d4 <clearGoalJudgeDistance>
 8005dda:	e01d      	b.n	8005e18 <running+0x18c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 30 && Control_Mode == 2){
 8005ddc:	4b4b      	ldr	r3, [pc, #300]	; (8005f0c <running+0x280>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d019      	beq.n	8005e18 <running+0x18c>
 8005de4:	f7fb fabe 	bl	8001364 <getGoalJudgeDistance>
 8005de8:	eeb0 7a40 	vmov.f32	s14, s0
 8005dec:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8005df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df8:	db0e      	blt.n	8005e18 <running+0x18c>
 8005dfa:	4b43      	ldr	r3, [pc, #268]	; (8005f08 <running+0x27c>)
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d10a      	bne.n	8005e18 <running+0x18c>
						  start_goal_line_cnt++;
 8005e02:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <running+0x274>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <running+0x274>)
 8005e0c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8005e0e:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <running+0x280>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005e14:	f7fb fade 	bl	80013d4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2 && Control_Mode == 2){
 8005e18:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <running+0x274>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d921      	bls.n	8005e64 <running+0x1d8>
 8005e20:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <running+0x27c>)
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d11d      	bne.n	8005e64 <running+0x1d8>
						  stopLogging();
 8005e28:	f000 fa66 	bl	80062f8 <stopLogging>
						  stopVelocityUpdate();
 8005e2c:	f000 fab2 	bl	8006394 <stopVelocityUpdate>
						  stopTargetUpdate();
 8005e30:	f000 fa82 	bl	8006338 <stopTargetUpdate>
						  stopAngleControl();
 8005e34:	f7fb f96c 	bl	8001110 <stopAngleControl>
						  pattern = 20;
 8005e38:	2314      	movs	r3, #20
 8005e3a:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8005e3c:	e012      	b.n	8005e64 <running+0x1d8>

				  case 20:

					  setTargetVelocity(0.5);
 8005e3e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005e42:	f7fd fd2f 	bl	80038a4 <setTargetVelocity>
					  HAL_Delay(100);
 8005e46:	2064      	movs	r0, #100	; 0x64
 8005e48:	f001 fbde 	bl	8007608 <HAL_Delay>
					  setTargetVelocity(0);
 8005e4c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8005f10 <running+0x284>
 8005e50:	f7fd fd28 	bl	80038a4 <setTargetVelocity>
					  HAL_Delay(500);
 8005e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e58:	f001 fbd6 	bl	8007608 <HAL_Delay>

					  goal_flag = true;
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <running+0x288>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]

					  break;
 8005e62:	e000      	b.n	8005e66 <running+0x1da>
					  break;
 8005e64:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8005e66:	f7fc f9d3 	bl	8002210 <getCouseOutFlag>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <running+0x1f8>
		{
			stopLogging();
 8005e70:	f000 fa42 	bl	80062f8 <stopLogging>
			stopVelocityUpdate();
 8005e74:	f000 fa8e 	bl	8006394 <stopVelocityUpdate>
			stopTargetUpdate();
 8005e78:	f000 fa5e 	bl	8006338 <stopTargetUpdate>
			stopAngleControl();
 8005e7c:	f7fb f948 	bl	8001110 <stopAngleControl>
		    pattern = 20;
 8005e80:	2314      	movs	r3, #20
 8005e82:	80fb      	strh	r3, [r7, #6]
	    }

		if(getcheckAngularvelocityFlag() == true)
 8005e84:	f7fe fbda 	bl	800463c <getcheckAngularvelocityFlag>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <running+0x216>
		{
			stopLogging();
 8005e8e:	f000 fa33 	bl	80062f8 <stopLogging>
			stopVelocityUpdate();
 8005e92:	f000 fa7f 	bl	8006394 <stopVelocityUpdate>
			stopTargetUpdate();
 8005e96:	f000 fa4f 	bl	8006338 <stopTargetUpdate>
			stopAngleControl();
 8005e9a:	f7fb f939 	bl	8001110 <stopAngleControl>
			pattern = 20;
 8005e9e:	2314      	movs	r3, #20
 8005ea0:	80fb      	strh	r3, [r7, #6]
		}

		if(Run_Mode == 5)
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <running+0x278>)
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d11a      	bne.n	8005ee0 <running+0x254>
		{
			if(getTotalDistance() >= getTotal_length())
 8005eaa:	f7fb fa4d 	bl	8001348 <getTotalDistance>
 8005eae:	eeb0 8a40 	vmov.f32	s16, s0
 8005eb2:	f7fe fb4f 	bl	8004554 <getTotal_length>
 8005eb6:	eef0 7a40 	vmov.f32	s15, s0
 8005eba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec2:	da00      	bge.n	8005ec6 <running+0x23a>
 8005ec4:	e00c      	b.n	8005ee0 <running+0x254>
			{
				setLED2('A');
 8005ec6:	2041      	movs	r0, #65	; 0x41
 8005ec8:	f7fb fdd6 	bl	8001a78 <setLED2>
				stopLogging();
 8005ecc:	f000 fa14 	bl	80062f8 <stopLogging>
				stopVelocityUpdate();
 8005ed0:	f000 fa60 	bl	8006394 <stopVelocityUpdate>
				stopTargetUpdate();
 8005ed4:	f000 fa30 	bl	8006338 <stopTargetUpdate>
				stopAngleControl();
 8005ed8:	f7fb f91a 	bl	8001110 <stopAngleControl>
				pattern = 20;
 8005edc:	2314      	movs	r3, #20
 8005ede:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <running+0x288>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f aee5 	bne.w	8005cba <running+0x2e>
			}
		}
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	ecbd 8b02 	vpop	{d8}
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	2001d1bc 	.word	0x2001d1bc
 8005f00:	2001d1a4 	.word	0x2001d1a4
 8005f04:	2001d712 	.word	0x2001d712
 8005f08:	2001d710 	.word	0x2001d710
 8005f0c:	2001d1b3 	.word	0x2001d1b3
 8005f10:	00000000 	.word	0x00000000
 8005f14:	2001d1b2 	.word	0x2001d1b2

08005f18 <runningFlip>:

void runningFlip()
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005f1c:	4b74      	ldr	r3, [pc, #464]	; (80060f0 <runningFlip+0x1d8>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80e2 	beq.w	80060ea <runningFlip+0x1d2>
		setLED('G');
 8005f26:	2047      	movs	r0, #71	; 0x47
 8005f28:	f7fb fcd8 	bl	80018dc <setLED>
		updateTargetVelocity();//速度の更新
 8005f2c:	f000 fd40 	bl	80069b0 <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 8005f30:	f7fe f974 	bl	800421c <updateTargetpoint>

		if(isTargetDistance(30) == true){// 距離をユークリッド距離の配列から参照できるようにしないと走らん
 8005f34:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8005f38:	f7ff fe8e 	bl	8005c58 <isTargetDistance>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <runningFlip+0x46>
			saveLog();
 8005f42:	f000 f92f 	bl	80061a4 <saveLog>

			if(isContinuousCurvature() == true){
 8005f46:	f7ff fe17 	bl	8005b78 <isContinuousCurvature>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <runningFlip+0x3e>
				continuous_curve_flag = true;
 8005f50:	4b68      	ldr	r3, [pc, #416]	; (80060f4 <runningFlip+0x1dc>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8005f56:	f7fb fa83 	bl	8001460 <clearDistance10mm>
			clearTheta10mm();
 8005f5a:	f7fb fc95 	bl	8001888 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8005f5e:	f7ff fdbf 	bl	8005ae0 <isCrossLine>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d024      	beq.n	8005fb2 <runningFlip+0x9a>
 8005f68:	4b63      	ldr	r3, [pc, #396]	; (80060f8 <runningFlip+0x1e0>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f083 0301 	eor.w	r3, r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01d      	beq.n	8005fb2 <runningFlip+0x9a>
			cross_line_ignore_flag = true;
 8005f76:	4b60      	ldr	r3, [pc, #384]	; (80060f8 <runningFlip+0x1e0>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005f7c:	4b5d      	ldr	r3, [pc, #372]	; (80060f4 <runningFlip+0x1dc>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005f82:	f7fb fa43 	bl	800140c <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8005f86:	f7fb fa4f 	bl	8001428 <clearSideLineIgnoreDistance>

			if(Run_Mode == 1){
 8005f8a:	4b5c      	ldr	r3, [pc, #368]	; (80060fc <runningFlip+0x1e4>)
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10b      	bne.n	8005faa <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 8005f92:	4b5b      	ldr	r3, [pc, #364]	; (8006100 <runningFlip+0x1e8>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8005f98:	f7fb f9d6 	bl	8001348 <getTotalDistance>
 8005f9c:	eef0 7a40 	vmov.f32	s15, s0
 8005fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa4:	f7fd f88a 	bl	80030bc <saveCross>
			if(Run_Mode == 1){
 8005fa8:	e015      	b.n	8005fd6 <runningFlip+0xbe>
			}
			else{
				correction_check_cnt_cross = 0;
 8005faa:	4b55      	ldr	r3, [pc, #340]	; (8006100 <runningFlip+0x1e8>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	801a      	strh	r2, [r3, #0]
			if(Run_Mode == 1){
 8005fb0:	e011      	b.n	8005fd6 <runningFlip+0xbe>
				//correctionTotalDistanceFromCrossLine();//クロスでの距離補正
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 8005fb2:	4b51      	ldr	r3, [pc, #324]	; (80060f8 <runningFlip+0x1e0>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <runningFlip+0xbe>
 8005fba:	f7fb f9ef 	bl	800139c <getCrossLineIgnoreDistance>
 8005fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8005fc2:	eddf 7a50 	vldr	s15, [pc, #320]	; 8006104 <runningFlip+0x1ec>
 8005fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fce:	db02      	blt.n	8005fd6 <runningFlip+0xbe>
			cross_line_ignore_flag = false;
 8005fd0:	4b49      	ldr	r3, [pc, #292]	; (80060f8 <runningFlip+0x1e0>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 8005fd6:	f000 fdc5 	bl	8006b64 <getSideSensorStatusR>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <runningFlip+0xd2>
			side_line_judge_flag = false;
 8005fe0:	4b49      	ldr	r3, [pc, #292]	; (8006108 <runningFlip+0x1f0>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8005fe6:	f7fb fa03 	bl	80013f0 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8005fea:	4b47      	ldr	r3, [pc, #284]	; (8006108 <runningFlip+0x1f0>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f083 0301 	eor.w	r3, r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <runningFlip+0x10c>
 8005ff8:	f000 fda8 	bl	8006b4c <getSideSensorStatusL>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d010      	beq.n	8006024 <runningFlip+0x10c>
 8006002:	f7fb f9bd 	bl	8001380 <getSideLineJudgeDistance>
 8006006:	eeb0 7a40 	vmov.f32	s14, s0
 800600a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800610c <runningFlip+0x1f4>
 800600e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006016:	db05      	blt.n	8006024 <runningFlip+0x10c>
			side_line_judge_flag = true;
 8006018:	4b3b      	ldr	r3, [pc, #236]	; (8006108 <runningFlip+0x1f0>)
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 800601e:	f7fb f9e7 	bl	80013f0 <clearSideLineJudgeDistance>
 8006022:	e02c      	b.n	800607e <runningFlip+0x166>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8006024:	4b38      	ldr	r3, [pc, #224]	; (8006108 <runningFlip+0x1f0>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d028      	beq.n	800607e <runningFlip+0x166>
 800602c:	f7fb f9a8 	bl	8001380 <getSideLineJudgeDistance>
 8006030:	eeb0 7a40 	vmov.f32	s14, s0
 8006034:	eddf 7a35 	vldr	s15, [pc, #212]	; 800610c <runningFlip+0x1f4>
 8006038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800603c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006040:	db1d      	blt.n	800607e <runningFlip+0x166>
			clearSideLineJudgeDistance();
 8006042:	f7fb f9d5 	bl	80013f0 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 8006046:	4b30      	ldr	r3, [pc, #192]	; (8006108 <runningFlip+0x1f0>)
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <runningFlip+0x1dc>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d014      	beq.n	800607e <runningFlip+0x166>
				continuous_curve_flag = false;
 8006054:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <runningFlip+0x1dc>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 800605a:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <runningFlip+0x1f8>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]

				if(Run_Mode == 1){
 8006060:	4b26      	ldr	r3, [pc, #152]	; (80060fc <runningFlip+0x1e4>)
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10a      	bne.n	800607e <runningFlip+0x166>
					correction_check_cnt_side = 0;
 8006068:	4b2a      	ldr	r3, [pc, #168]	; (8006114 <runningFlip+0x1fc>)
 800606a:	2200      	movs	r2, #0
 800606c:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 800606e:	f7fb f96b 	bl	8001348 <getTotalDistance>
 8006072:	eef0 7a40 	vmov.f32	s15, s0
 8006076:	eeb0 0a67 	vmov.f32	s0, s15
 800607a:	f7fd f837 	bl	80030ec <saveSide>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <runningFlip+0x1e8>)
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <runningFlip+0x1e8>)
 8006088:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 800608a:	4b22      	ldr	r3, [pc, #136]	; (8006114 <runningFlip+0x1fc>)
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	4b20      	ldr	r3, [pc, #128]	; (8006114 <runningFlip+0x1fc>)
 8006094:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <runningFlip+0x1e8>)
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	f242 720f 	movw	r2, #9999	; 0x270f
 800609e:	4293      	cmp	r3, r2
 80060a0:	d903      	bls.n	80060aa <runningFlip+0x192>
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <runningFlip+0x1e8>)
 80060a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80060a8:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 80060aa:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <runningFlip+0x1fc>)
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d903      	bls.n	80060be <runningFlip+0x1a6>
 80060b6:	4b17      	ldr	r3, [pc, #92]	; (8006114 <runningFlip+0x1fc>)
 80060b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80060bc:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 80060be:	4b15      	ldr	r3, [pc, #84]	; (8006114 <runningFlip+0x1fc>)
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	2b96      	cmp	r3, #150	; 0x96
 80060c4:	d803      	bhi.n	80060ce <runningFlip+0x1b6>
 80060c6:	2047      	movs	r0, #71	; 0x47
 80060c8:	f7fb fcd6 	bl	8001a78 <setLED2>
 80060cc:	e002      	b.n	80060d4 <runningFlip+0x1bc>
	    else setLED2('N');
 80060ce:	204e      	movs	r0, #78	; 0x4e
 80060d0:	f7fb fcd2 	bl	8001a78 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <runningFlip+0x1fc>)
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	2b96      	cmp	r3, #150	; 0x96
 80060da:	d803      	bhi.n	80060e4 <runningFlip+0x1cc>
 80060dc:	2042      	movs	r0, #66	; 0x42
 80060de:	f7fb fbfd 	bl	80018dc <setLED>
	    else setLED('G');
	}
}
 80060e2:	e002      	b.n	80060ea <runningFlip+0x1d2>
	    else setLED('G');
 80060e4:	2047      	movs	r0, #71	; 0x47
 80060e6:	f7fb fbf9 	bl	80018dc <setLED>
}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	2001d1b6 	.word	0x2001d1b6
 80060f4:	2001d1b5 	.word	0x2001d1b5
 80060f8:	2001d1ae 	.word	0x2001d1ae
 80060fc:	2001d712 	.word	0x2001d712
 8006100:	2001d1aa 	.word	0x2001d1aa
 8006104:	42480000 	.word	0x42480000
 8006108:	2001d1af 	.word	0x2001d1af
 800610c:	42700000 	.word	0x42700000
 8006110:	2001d1b4 	.word	0x2001d1b4
 8006114:	2001d1ac 	.word	0x2001d1ac

08006118 <runningInit>:

void runningInit()
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
	if(Run_Mode == 1){
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <runningInit+0x6c>)
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <runningInit+0x18>
		setLED('W');
 8006124:	2057      	movs	r0, #87	; 0x57
 8006126:	f7fb fbd9 	bl	80018dc <setLED>
		ereaseLog();
 800612a:	f7fd f80f 	bl	800314c <ereaseLog>
 800612e:	e00d      	b.n	800614c <runningInit+0x34>
	}
	else
	{
		ereaseDebugLog();
 8006130:	f7fd f848 	bl	80031c4 <ereaseDebugLog>
		loadDistance();
 8006134:	f7fd f8bc 	bl	80032b0 <loadDistance>
		loadTheta();
 8006138:	f7fd f8f8 	bl	800332c <loadTheta>
		loadCross();
 800613c:	f7fd f934 	bl	80033a8 <loadCross>
		loadSide();
 8006140:	f7fd f970 	bl	8003424 <loadSide>
		CreateXYcoordinates();
 8006144:	f7fd fc68 	bl	8003a18 <CreateXYcoordinates>
		CreateVelocityTable();
 8006148:	f000 f930 	bl	80063ac <CreateVelocityTable>
	}

	clearCrossLineIgnoreDistance();
 800614c:	f7fb f95e 	bl	800140c <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8006150:	f7fb f96a 	bl	8001428 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <runningInit+0x70>)
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <runningInit+0x74>)
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <runningInit+0x78>)
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <runningInit+0x7c>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <runningInit+0x80>)
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <runningInit+0x84>)
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <runningInit+0x88>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	2001d712 	.word	0x2001d712
 8006188:	2001d1a4 	.word	0x2001d1a4
 800618c:	2001d1ae 	.word	0x2001d1ae
 8006190:	2001d1af 	.word	0x2001d1af
 8006194:	2001d1b3 	.word	0x2001d1b3
 8006198:	2001d1b4 	.word	0x2001d1b4
 800619c:	2001d1b5 	.word	0x2001d1b5
 80061a0:	2001d1b6 	.word	0x2001d1b6

080061a4 <saveLog>:

void saveLog(){
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80061a8:	4b46      	ldr	r3, [pc, #280]	; (80062c4 <saveLog+0x120>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d010      	beq.n	80061d2 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 80061b0:	f7fb f948 	bl	8001444 <getDistance10mm>
 80061b4:	eef0 7a40 	vmov.f32	s15, s0
 80061b8:	eeb0 0a67 	vmov.f32	s0, s15
 80061bc:	f7fc ff4e 	bl	800305c <saveDistance>
		saveTheta(getTheta10mm());
 80061c0:	f7fb fb54 	bl	800186c <getTheta10mm>
 80061c4:	eef0 7a40 	vmov.f32	s15, s0
 80061c8:	eeb0 0a67 	vmov.f32	s0, s15
 80061cc:	f7fc ff5e 	bl	800308c <saveTheta>
		saveDebug(getOutput_velocity());//目標速度
		saveDebug(getOutput_angularvelocity());//目標車体角速度(ローカル座標系)
		saveDebug(getCurrentVelocity());//実際の速度
		saveDebug(getTheta10mm());//今の角速度
	}
}
 80061d0:	e076      	b.n	80062c0 <saveLog+0x11c>
	else if(target_update_flag == true){
 80061d2:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <saveLog+0x124>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d072      	beq.n	80062c0 <saveLog+0x11c>
		debug_now_X = CurrentXcoordinates();//現在のx座標変数
 80061da:	f7fd ff77 	bl	80040cc <CurrentXcoordinates>
 80061de:	eef0 7a40 	vmov.f32	s15, s0
 80061e2:	4b3a      	ldr	r3, [pc, #232]	; (80062cc <saveLog+0x128>)
 80061e4:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Y = CurrentYcoordinates();//現在のy座標変数
 80061e8:	f7fd ffc4 	bl	8004174 <CurrentYcoordinates>
 80061ec:	eef0 7a40 	vmov.f32	s15, s0
 80061f0:	4b37      	ldr	r3, [pc, #220]	; (80062d0 <saveLog+0x12c>)
 80061f2:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Theta = getaddTheta();//現在の角速度変数
 80061f6:	f7fb fb55 	bl	80018a4 <getaddTheta>
 80061fa:	eef0 7a40 	vmov.f32	s15, s0
 80061fe:	4b35      	ldr	r3, [pc, #212]	; (80062d4 <saveLog+0x130>)
 8006200:	edc3 7a00 	vstr	s15, [r3]
		saveDebug(getTargetpoint_X());//目標のx座標
 8006204:	f7fe f9b4 	bl	8004570 <getTargetpoint_X>
 8006208:	eef0 7a40 	vmov.f32	s15, s0
 800620c:	eeb0 0a67 	vmov.f32	s0, s15
 8006210:	f7fc ff84 	bl	800311c <saveDebug>
		saveDebug(getTargetpoint_Y());//目標のy座標
 8006214:	f7fe f9ba 	bl	800458c <getTargetpoint_Y>
 8006218:	eef0 7a40 	vmov.f32	s15, s0
 800621c:	eeb0 0a67 	vmov.f32	s0, s15
 8006220:	f7fc ff7c 	bl	800311c <saveDebug>
		saveDebug(getTargetpoint_Theta());//目標の車体角速度
 8006224:	f7fe f9c0 	bl	80045a8 <getTargetpoint_Theta>
 8006228:	eef0 7a40 	vmov.f32	s15, s0
 800622c:	eeb0 0a67 	vmov.f32	s0, s15
 8006230:	f7fc ff74 	bl	800311c <saveDebug>
		saveDebug(debug_now_X);//現在のx座標
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <saveLog+0x128>)
 8006236:	edd3 7a00 	vldr	s15, [r3]
 800623a:	eeb0 0a67 	vmov.f32	s0, s15
 800623e:	f7fc ff6d 	bl	800311c <saveDebug>
		saveDebug(debug_now_Y);//現在のy座標
 8006242:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <saveLog+0x12c>)
 8006244:	edd3 7a00 	vldr	s15, [r3]
 8006248:	eeb0 0a67 	vmov.f32	s0, s15
 800624c:	f7fc ff66 	bl	800311c <saveDebug>
		saveDebug(debug_now_Theta);//現在の車体角速度(絶対座標系)
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <saveLog+0x130>)
 8006252:	edd3 7a00 	vldr	s15, [r3]
 8006256:	eeb0 0a67 	vmov.f32	s0, s15
 800625a:	f7fc ff5f 	bl	800311c <saveDebug>
		Error_XY(debug_now_X, debug_now_Y, debug_now_Theta);//誤差の計算関数
 800625e:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <saveLog+0x128>)
 8006260:	edd3 7a00 	vldr	s15, [r3]
 8006264:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <saveLog+0x12c>)
 8006266:	ed93 7a00 	vldr	s14, [r3]
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <saveLog+0x130>)
 800626c:	edd3 6a00 	vldr	s13, [r3]
 8006270:	eeb0 1a66 	vmov.f32	s2, s13
 8006274:	eef0 0a47 	vmov.f32	s1, s14
 8006278:	eeb0 0a67 	vmov.f32	s0, s15
 800627c:	f7fe f890 	bl	80043a0 <Error_XY>
		saveDebug(getOutput_velocity());//目標速度
 8006280:	f7fe f9a0 	bl	80045c4 <getOutput_velocity>
 8006284:	eef0 7a40 	vmov.f32	s15, s0
 8006288:	eeb0 0a67 	vmov.f32	s0, s15
 800628c:	f7fc ff46 	bl	800311c <saveDebug>
		saveDebug(getOutput_angularvelocity());//目標車体角速度(ローカル座標系)
 8006290:	f7fe f9a6 	bl	80045e0 <getOutput_angularvelocity>
 8006294:	eef0 7a40 	vmov.f32	s15, s0
 8006298:	eeb0 0a67 	vmov.f32	s0, s15
 800629c:	f7fc ff3e 	bl	800311c <saveDebug>
		saveDebug(getCurrentVelocity());//実際の速度
 80062a0:	f7fd fb42 	bl	8003928 <getCurrentVelocity>
 80062a4:	eef0 7a40 	vmov.f32	s15, s0
 80062a8:	eeb0 0a67 	vmov.f32	s0, s15
 80062ac:	f7fc ff36 	bl	800311c <saveDebug>
		saveDebug(getTheta10mm());//今の角速度
 80062b0:	f7fb fadc 	bl	800186c <getTheta10mm>
 80062b4:	eef0 7a40 	vmov.f32	s15, s0
 80062b8:	eeb0 0a67 	vmov.f32	s0, s15
 80062bc:	f7fc ff2e 	bl	800311c <saveDebug>
}
 80062c0:	bf00      	nop
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2001d1b7 	.word	0x2001d1b7
 80062c8:	2001d1b8 	.word	0x2001d1b8
 80062cc:	2001d1d0 	.word	0x2001d1d0
 80062d0:	2001d1d4 	.word	0x2001d1d4
 80062d4:	2001d1d8 	.word	0x2001d1d8

080062d8 <startLogging>:

void startLogging(){
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80062dc:	f7fb f8c0 	bl	8001460 <clearDistance10mm>
	clearTheta10mm();
 80062e0:	f7fb fad2 	bl	8001888 <clearTheta10mm>
	clearTotalDistance();
 80062e4:	f7fb f868 	bl	80013b8 <clearTotalDistance>
	logging_flag = true;
 80062e8:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <startLogging+0x1c>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
}
 80062ee:	bf00      	nop
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	2001d1b7 	.word	0x2001d1b7

080062f8 <stopLogging>:

void stopLogging()
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
	logging_flag = false;
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <stopLogging+0x14>)
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	2001d1b7 	.word	0x2001d1b7

08006310 <startTargetUpdate>:

void startTargetUpdate()
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8006314:	f7fb f8a4 	bl	8001460 <clearDistance10mm>
	clearVLT_Distance10mm();
 8006318:	f7fb f8be 	bl	8001498 <clearVLT_Distance10mm>
	clearTheta10mm();
 800631c:	f7fb fab4 	bl	8001888 <clearTheta10mm>
	clearaddTheta();
 8006320:	f7fb face 	bl	80018c0 <clearaddTheta>
	clearTotalDistance();
 8006324:	f7fb f848 	bl	80013b8 <clearTotalDistance>
	target_update_flag = true;
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <startTargetUpdate+0x24>)
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2001d1b8 	.word	0x2001d1b8

08006338 <stopTargetUpdate>:

void stopTargetUpdate()
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
	target_update_flag = false;
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <stopTargetUpdate+0x14>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	2001d1b8 	.word	0x2001d1b8

08006350 <startVelocityUpdate>:

void startVelocityUpdate(){
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8006354:	f7fb f884 	bl	8001460 <clearDistance10mm>
	clearTotalDistance();
 8006358:	f7fb f82e 	bl	80013b8 <clearTotalDistance>
	velocity_table_idx = 0;
 800635c:	4b08      	ldr	r3, [pc, #32]	; (8006380 <startVelocityUpdate+0x30>)
 800635e:	2200      	movs	r2, #0
 8006360:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8006362:	4b08      	ldr	r3, [pc, #32]	; (8006384 <startVelocityUpdate+0x34>)
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <startVelocityUpdate+0x38>)
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <startVelocityUpdate+0x3c>)
 8006372:	2200      	movs	r2, #0
 8006374:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <startVelocityUpdate+0x40>)
 8006378:	2200      	movs	r2, #0
 800637a:	801a      	strh	r2, [r3, #0]
}
 800637c:	bf00      	nop
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2001d714 	.word	0x2001d714
 8006384:	2001d70c 	.word	0x2001d70c
 8006388:	2001d1b9 	.word	0x2001d1b9
 800638c:	2001d1a6 	.word	0x2001d1a6
 8006390:	2001d1a8 	.word	0x2001d1a8

08006394 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <stopVelocityUpdate+0x14>)
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
}
 800639e:	bf00      	nop
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	2001d1b9 	.word	0x2001d1b9

080063ac <CreateVelocityTable>:

void CreateVelocityTable(){//速度テーブル生成関数
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b08b      	sub	sp, #44	; 0x2c
 80063b0:	af00      	add	r7, sp, #0
	const uint16_t *p_Euclideandistance_V;
	const int16_t *p_theta_V;
	p_Euclideandistance_V = getEuclideanDistanceArrayPointer();// /100して使う
 80063b2:	f7fe f92f 	bl	8004614 <getEuclideanDistanceArrayPointer>
 80063b6:	6138      	str	r0, [r7, #16]
	p_theta_V = getSC_Theta_tableArrayPointer();// /1000して使う
 80063b8:	f7fe f936 	bl	8004628 <getSC_Theta_tableArrayPointer>
 80063bc:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;

	uint16_t log_size = getSC_X_tablesize();
 80063be:	f7fe f91d 	bl	80045fc <getSC_X_tablesize>
 80063c2:	4603      	mov	r3, r0
 80063c4:	817b      	strh	r3, [r7, #10]

	uint16_t crossline_idx = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	813b      	strh	r3, [r7, #8]
	float total_distance = 0;
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	623b      	str	r3, [r7, #32]
	for(uint16_t i = 0; i < log_size; i++){
 80063d0:	2300      	movs	r3, #0
 80063d2:	83fb      	strh	r3, [r7, #30]
 80063d4:	e06b      	b.n	80064ae <CreateVelocityTable+0x102>
		if(i > 0){
 80063d6:	8bfb      	ldrh	r3, [r7, #30]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d061      	beq.n	80064a0 <CreateVelocityTable+0xf4>
			temp_distance = p_Euclideandistance_V[i] / 100;
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	4a54      	ldr	r2, [pc, #336]	; (8006538 <CreateVelocityTable+0x18c>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063f8:	edc7 7a01 	vstr	s15, [r7, #4]
			temp_theta = (p_theta_V[i] - p_theta_V[i-1]) / 1000;
 80063fc:	8bfb      	ldrh	r3, [r7, #30]
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006408:	4619      	mov	r1, r3
 800640a:	8bfb      	ldrh	r3, [r7, #30]
 800640c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006410:	3b01      	subs	r3, #1
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641c:	1acb      	subs	r3, r1, r3
 800641e:	4a47      	ldr	r2, [pc, #284]	; (800653c <CreateVelocityTable+0x190>)
 8006420:	fb82 1203 	smull	r1, r2, r2, r3
 8006424:	1192      	asrs	r2, r2, #6
 8006426:	17db      	asrs	r3, r3, #31
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006432:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			//saveDebug(temp_distance);
			//saveDebug(temp_theta);

			if(temp_theta == 0) temp_theta = 0.00001;
 8006436:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800643a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006442:	d101      	bne.n	8006448 <CreateVelocityTable+0x9c>
 8006444:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <CreateVelocityTable+0x194>)
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
			float radius = fabs(temp_distance / temp_theta);
 8006448:	edd7 6a01 	vldr	s13, [r7, #4]
 800644c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	eef0 7ae7 	vabs.f32	s15, s15
 8006458:	edc7 7a06 	vstr	s15, [r7, #24]
			if(radius >= straight_radius) radius = straight_radius;
 800645c:	4b39      	ldr	r3, [pc, #228]	; (8006544 <CreateVelocityTable+0x198>)
 800645e:	edd3 7a00 	vldr	s15, [r3]
 8006462:	ed97 7a06 	vldr	s14, [r7, #24]
 8006466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	db02      	blt.n	8006476 <CreateVelocityTable+0xca>
 8006470:	4b34      	ldr	r3, [pc, #208]	; (8006544 <CreateVelocityTable+0x198>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	61bb      	str	r3, [r7, #24]
			velocity_table[i] = radius2Velocity(radius);//速度計画の計算部分
 8006476:	8bfc      	ldrh	r4, [r7, #30]
 8006478:	ed97 0a06 	vldr	s0, [r7, #24]
 800647c:	f000 f86e 	bl	800655c <radius2Velocity>
 8006480:	eef0 7a40 	vmov.f32	s15, s0
 8006484:	4a30      	ldr	r2, [pc, #192]	; (8006548 <CreateVelocityTable+0x19c>)
 8006486:	00a3      	lsls	r3, r4, #2
 8006488:	4413      	add	r3, r2
 800648a:	edc3 7a00 	vstr	s15, [r3]

			//Forced maximum speed on the crossline
			total_distance += temp_distance;
 800648e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006492:	edd7 7a01 	vldr	s15, [r7, #4]
 8006496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800649a:	edc7 7a08 	vstr	s15, [r7, #32]
 800649e:	e003      	b.n	80064a8 <CreateVelocityTable+0xfc>
			if(total_distance >= crossline_distance + 60){
				crossline_idx++;
			}*/
		}
		else{
			velocity_table[0] = min_velocity;
 80064a0:	4b2a      	ldr	r3, [pc, #168]	; (800654c <CreateVelocityTable+0x1a0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <CreateVelocityTable+0x19c>)
 80064a6:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i < log_size; i++){
 80064a8:	8bfb      	ldrh	r3, [r7, #30]
 80064aa:	3301      	adds	r3, #1
 80064ac:	83fb      	strh	r3, [r7, #30]
 80064ae:	8bfa      	ldrh	r2, [r7, #30]
 80064b0:	897b      	ldrh	r3, [r7, #10]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d38f      	bcc.n	80063d6 <CreateVelocityTable+0x2a>
		}
	}

	for(uint16_t i = log_size; i < 2000; i++){
 80064b6:	897b      	ldrh	r3, [r7, #10]
 80064b8:	82fb      	strh	r3, [r7, #22]
 80064ba:	e009      	b.n	80064d0 <CreateVelocityTable+0x124>
		velocity_table[i] = max_velocity;
 80064bc:	8afb      	ldrh	r3, [r7, #22]
 80064be:	4a24      	ldr	r2, [pc, #144]	; (8006550 <CreateVelocityTable+0x1a4>)
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	4921      	ldr	r1, [pc, #132]	; (8006548 <CreateVelocityTable+0x19c>)
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = log_size; i < 2000; i++){
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	3301      	adds	r3, #1
 80064ce:	82fb      	strh	r3, [r7, #22]
 80064d0:	8afb      	ldrh	r3, [r7, #22]
 80064d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80064d6:	d3f1      	bcc.n	80064bc <CreateVelocityTable+0x110>
	}

	addDecelerationDistanceMergin(velocity_table, 13); //8
 80064d8:	210d      	movs	r1, #13
 80064da:	481b      	ldr	r0, [pc, #108]	; (8006548 <CreateVelocityTable+0x19c>)
 80064dc:	f000 f86c 	bl	80065b8 <addDecelerationDistanceMergin>
	addAccelerationDistanceMergin(velocity_table, 5); //15
 80064e0:	2105      	movs	r1, #5
 80064e2:	4819      	ldr	r0, [pc, #100]	; (8006548 <CreateVelocityTable+0x19c>)
 80064e4:	f000 f8b5 	bl	8006652 <addAccelerationDistanceMergin>

	decelerateProcessing(deceleration, p_Euclideandistance_V);
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <CreateVelocityTable+0x1a8>)
 80064ea:	edd3 7a00 	vldr	s15, [r3]
 80064ee:	6938      	ldr	r0, [r7, #16]
 80064f0:	eeb0 0a67 	vmov.f32	s0, s15
 80064f4:	f000 f900 	bl	80066f8 <decelerateProcessing>
	accelerateProcessing(acceleration, p_Euclideandistance_V);
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <CreateVelocityTable+0x1ac>)
 80064fa:	edd3 7a00 	vldr	s15, [r3]
 80064fe:	6938      	ldr	r0, [r7, #16]
 8006500:	eeb0 0a67 	vmov.f32	s0, s15
 8006504:	f000 f9a8 	bl	8006858 <accelerateProcessing>

	//CreateAcceleration(p_Euclideandistance_V);

	for(uint16_t i = 0; i < log_size; i++){
 8006508:	2300      	movs	r3, #0
 800650a:	82bb      	strh	r3, [r7, #20]
 800650c:	e00c      	b.n	8006528 <CreateVelocityTable+0x17c>
		saveDebug(velocity_table[i]);
 800650e:	8abb      	ldrh	r3, [r7, #20]
 8006510:	4a0d      	ldr	r2, [pc, #52]	; (8006548 <CreateVelocityTable+0x19c>)
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	edd3 7a00 	vldr	s15, [r3]
 800651a:	eeb0 0a67 	vmov.f32	s0, s15
 800651e:	f7fc fdfd 	bl	800311c <saveDebug>
	for(uint16_t i = 0; i < log_size; i++){
 8006522:	8abb      	ldrh	r3, [r7, #20]
 8006524:	3301      	adds	r3, #1
 8006526:	82bb      	strh	r3, [r7, #20]
 8006528:	8aba      	ldrh	r2, [r7, #20]
 800652a:	897b      	ldrh	r3, [r7, #10]
 800652c:	429a      	cmp	r2, r3
 800652e:	d3ee      	bcc.n	800650e <CreateVelocityTable+0x162>
	}
}
 8006530:	bf00      	nop
 8006532:	372c      	adds	r7, #44	; 0x2c
 8006534:	46bd      	mov	sp, r7
 8006536:	bd90      	pop	{r4, r7, pc}
 8006538:	51eb851f 	.word	0x51eb851f
 800653c:	10624dd3 	.word	0x10624dd3
 8006540:	3727c5ac 	.word	0x3727c5ac
 8006544:	2001d1cc 	.word	0x2001d1cc
 8006548:	2001b264 	.word	0x2001b264
 800654c:	2001d1bc 	.word	0x2001d1bc
 8006550:	2001d1c0 	.word	0x2001d1c0
 8006554:	2001d1c8 	.word	0x2001d1c8
 8006558:	2001d1c4 	.word	0x2001d1c4

0800655c <radius2Velocity>:

float radius2Velocity(float radius){
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	ed87 0a01 	vstr	s0, [r7, #4]
	}
	else if(Run_Mode == 3){
		velocity = 1e-3 * radius * radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
	}*/

	velocity = radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <radius2Velocity+0x50>)
 8006568:	ed93 7a00 	vldr	s14, [r3]
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <radius2Velocity+0x54>)
 800656e:	edd3 7a00 	vldr	s15, [r3]
 8006572:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <radius2Velocity+0x58>)
 8006578:	edd3 7a00 	vldr	s15, [r3]
 800657c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006580:	edd7 7a01 	vldr	s15, [r7, #4]
 8006584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <radius2Velocity+0x54>)
 800658a:	edd3 7a00 	vldr	s15, [r3]
 800658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006592:	edc7 7a03 	vstr	s15, [r7, #12]

	return velocity;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	ee07 3a90 	vmov	s15, r3
}
 800659c:	eeb0 0a67 	vmov.f32	s0, s15
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	2001d1c0 	.word	0x2001d1c0
 80065b0:	2001d1bc 	.word	0x2001d1bc
 80065b4:	2001d1cc 	.word	0x2001d1cc

080065b8 <addDecelerationDistanceMergin>:

//*table：速度テーブル（一定距離ごとの目標速度が格納された配列）
//mergin_size：マージンする距離（10mmごとに速度テーブルを生成している場合，10を引数にすると100mmマージンされます）
void addDecelerationDistanceMergin(float *table, int16_t mergin_size)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	807b      	strh	r3, [r7, #2]
	uint16_t idx = mergin_size;
 80065c4:	887b      	ldrh	r3, [r7, #2]
 80065c6:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 80065c8:	8afb      	ldrh	r3, [r7, #22]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4413      	add	r3, r2
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	613b      	str	r3, [r7, #16]

	while(idx <= 2000 - 1){
 80065d4:	e033      	b.n	800663e <addDecelerationDistanceMergin+0x86>
		if(pre_target_velocity > table[idx]){
 80065d6:	8afb      	ldrh	r3, [r7, #22]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	edd3 7a00 	vldr	s15, [r3]
 80065e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80065e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ee:	dd1d      	ble.n	800662c <addDecelerationDistanceMergin+0x74>
			float low_velocity = table[idx];
 80065f0:	8afb      	ldrh	r3, [r7, #22]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 80065fc:	887b      	ldrh	r3, [r7, #2]
 80065fe:	8afa      	ldrh	r2, [r7, #22]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	81fb      	strh	r3, [r7, #14]
 8006604:	e008      	b.n	8006618 <addDecelerationDistanceMergin+0x60>
				table[i] = low_velocity;
 8006606:	89fb      	ldrh	r3, [r7, #14]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	3301      	adds	r3, #1
 8006616:	81fb      	strh	r3, [r7, #14]
 8006618:	89fa      	ldrh	r2, [r7, #14]
 800661a:	8afb      	ldrh	r3, [r7, #22]
 800661c:	429a      	cmp	r2, r3
 800661e:	d3f2      	bcc.n	8006606 <addDecelerationDistanceMergin+0x4e>
			}
			pre_target_velocity = table[idx];
 8006620:	8afb      	ldrh	r3, [r7, #22]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 800662c:	8afb      	ldrh	r3, [r7, #22]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	613b      	str	r3, [r7, #16]

		idx++;
 8006638:	8afb      	ldrh	r3, [r7, #22]
 800663a:	3301      	adds	r3, #1
 800663c:	82fb      	strh	r3, [r7, #22]
	while(idx <= 2000 - 1){
 800663e:	8afb      	ldrh	r3, [r7, #22]
 8006640:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006644:	d3c7      	bcc.n	80065d6 <addDecelerationDistanceMergin+0x1e>
	}
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <addAccelerationDistanceMergin>:

void addAccelerationDistanceMergin(float *table, int16_t mergin_size)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8006662:	8afb      	ldrh	r3, [r7, #22]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	613b      	str	r3, [r7, #16]

	while(idx <= 2000 - 1 - mergin_size){
 800666e:	e034      	b.n	80066da <addAccelerationDistanceMergin+0x88>
		if(pre_target_velocity < table[idx]){
 8006670:	8afb      	ldrh	r3, [r7, #22]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	edd3 7a00 	vldr	s15, [r3]
 800667c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006688:	d51e      	bpl.n	80066c8 <addAccelerationDistanceMergin+0x76>
			float low_velocity = pre_target_velocity;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 800668e:	8afb      	ldrh	r3, [r7, #22]
 8006690:	81fb      	strh	r3, [r7, #14]
 8006692:	e008      	b.n	80066a6 <addAccelerationDistanceMergin+0x54>
				table[i] = low_velocity;
 8006694:	89fb      	ldrh	r3, [r7, #14]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	4413      	add	r3, r2
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 80066a0:	89fb      	ldrh	r3, [r7, #14]
 80066a2:	3301      	adds	r3, #1
 80066a4:	81fb      	strh	r3, [r7, #14]
 80066a6:	89fa      	ldrh	r2, [r7, #14]
 80066a8:	8af9      	ldrh	r1, [r7, #22]
 80066aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066ae:	440b      	add	r3, r1
 80066b0:	429a      	cmp	r2, r3
 80066b2:	dbef      	blt.n	8006694 <addAccelerationDistanceMergin+0x42>
			}
			idx += mergin_size;
 80066b4:	887a      	ldrh	r2, [r7, #2]
 80066b6:	8afb      	ldrh	r3, [r7, #22]
 80066b8:	4413      	add	r3, r2
 80066ba:	82fb      	strh	r3, [r7, #22]
			pre_target_velocity = table[idx];
 80066bc:	8afb      	ldrh	r3, [r7, #22]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 80066c8:	8afb      	ldrh	r3, [r7, #22]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4413      	add	r3, r2
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	613b      	str	r3, [r7, #16]

		idx++;
 80066d4:	8afb      	ldrh	r3, [r7, #22]
 80066d6:	3301      	adds	r3, #1
 80066d8:	82fb      	strh	r3, [r7, #22]
	while(idx <= 2000 - 1 - mergin_size){
 80066da:	8afa      	ldrh	r2, [r7, #22]
 80066dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066e0:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 80066e4:	3307      	adds	r3, #7
 80066e6:	429a      	cmp	r2, r3
 80066e8:	ddc2      	ble.n	8006670 <addAccelerationDistanceMergin+0x1e>
	}
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <decelerateProcessing>:

void decelerateProcessing(const float am, const uint16_t *p_distance){
 80066f8:	b5b0      	push	{r4, r5, r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8006702:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getSC_X_tablesize();
 8006704:	f7fd ff7a 	bl	80045fc <getSC_X_tablesize>
 8006708:	4603      	mov	r3, r0
 800670a:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 800670c:	8abb      	ldrh	r3, [r7, #20]
 800670e:	3b01      	subs	r3, #1
 8006710:	82fb      	strh	r3, [r7, #22]
 8006712:	e08b      	b.n	800682c <decelerateProcessing+0x134>
		float v_diff = velocity_table[i-1] - velocity_table[i];
 8006714:	8afb      	ldrh	r3, [r7, #22]
 8006716:	3b01      	subs	r3, #1
 8006718:	4a4b      	ldr	r2, [pc, #300]	; (8006848 <decelerateProcessing+0x150>)
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	ed93 7a00 	vldr	s14, [r3]
 8006722:	8afb      	ldrh	r3, [r7, #22]
 8006724:	4a48      	ldr	r2, [pc, #288]	; (8006848 <decelerateProcessing+0x150>)
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	edd3 7a00 	vldr	s15, [r3]
 800672e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006732:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 8006736:	edd7 7a04 	vldr	s15, [r7, #16]
 800673a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006742:	dd70      	ble.n	8006826 <decelerateProcessing+0x12e>
			float t = p_distance[i] / 100 *1e-3 / v_diff;
 8006744:	8afb      	ldrh	r3, [r7, #22]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	4a3f      	ldr	r2, [pc, #252]	; (800684c <decelerateProcessing+0x154>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	b29b      	uxth	r3, r3
 8006758:	4618      	mov	r0, r3
 800675a:	f7f9 fee3 	bl	8000524 <__aeabi_i2d>
 800675e:	a338      	add	r3, pc, #224	; (adr r3, 8006840 <decelerateProcessing+0x148>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	4603      	mov	r3, r0
 800676a:	460c      	mov	r4, r1
 800676c:	4625      	mov	r5, r4
 800676e:	461c      	mov	r4, r3
 8006770:	6938      	ldr	r0, [r7, #16]
 8006772:	f7f9 fee9 	bl	8000548 <__aeabi_f2d>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4620      	mov	r0, r4
 800677c:	4629      	mov	r1, r5
 800677e:	f7fa f865 	bl	800084c <__aeabi_ddiv>
 8006782:	4603      	mov	r3, r0
 8006784:	460c      	mov	r4, r1
 8006786:	4618      	mov	r0, r3
 8006788:	4621      	mov	r1, r4
 800678a:	f7fa fa2d 	bl	8000be8 <__aeabi_d2f>
 800678e:	4603      	mov	r3, r0
 8006790:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 8006792:	edd7 6a04 	vldr	s13, [r7, #16]
 8006796:	ed97 7a03 	vldr	s14, [r7, #12]
 800679a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679e:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 80067a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80067a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80067aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b2:	dd38      	ble.n	8006826 <decelerateProcessing+0x12e>
				velocity_table[i-1] = velocity_table[i] + am * p_distance[i] / 100 *1e-3;
 80067b4:	8afb      	ldrh	r3, [r7, #22]
 80067b6:	4a24      	ldr	r2, [pc, #144]	; (8006848 <decelerateProcessing+0x150>)
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7f9 fec2 	bl	8000548 <__aeabi_f2d>
 80067c4:	4604      	mov	r4, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067da:	edd7 7a01 	vldr	s15, [r7, #4]
 80067de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006850 <decelerateProcessing+0x158>
 80067e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067ea:	ee16 0a90 	vmov	r0, s13
 80067ee:	f7f9 feab 	bl	8000548 <__aeabi_f2d>
 80067f2:	a313      	add	r3, pc, #76	; (adr r3, 8006840 <decelerateProcessing+0x148>)
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4620      	mov	r0, r4
 8006802:	4629      	mov	r1, r5
 8006804:	f7f9 fd42 	bl	800028c <__adddf3>
 8006808:	4603      	mov	r3, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4619      	mov	r1, r3
 800680e:	4622      	mov	r2, r4
 8006810:	8afb      	ldrh	r3, [r7, #22]
 8006812:	1e5c      	subs	r4, r3, #1
 8006814:	4608      	mov	r0, r1
 8006816:	4611      	mov	r1, r2
 8006818:	f7fa f9e6 	bl	8000be8 <__aeabi_d2f>
 800681c:	4601      	mov	r1, r0
 800681e:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <decelerateProcessing+0x150>)
 8006820:	00a3      	lsls	r3, r4, #2
 8006822:	4413      	add	r3, r2
 8006824:	6019      	str	r1, [r3, #0]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 8006826:	8afb      	ldrh	r3, [r7, #22]
 8006828:	3b01      	subs	r3, #1
 800682a:	82fb      	strh	r3, [r7, #22]
 800682c:	8afb      	ldrh	r3, [r7, #22]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f47f af70 	bne.w	8006714 <decelerateProcessing+0x1c>
			}
		}
	}
}
 8006834:	bf00      	nop
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bdb0      	pop	{r4, r5, r7, pc}
 800683c:	f3af 8000 	nop.w
 8006840:	d2f1a9fc 	.word	0xd2f1a9fc
 8006844:	3f50624d 	.word	0x3f50624d
 8006848:	2001b264 	.word	0x2001b264
 800684c:	51eb851f 	.word	0x51eb851f
 8006850:	42c80000 	.word	0x42c80000
 8006854:	00000000 	.word	0x00000000

08006858 <accelerateProcessing>:

void accelerateProcessing(const float am, const uint16_t *p_distance){
 8006858:	b5b0      	push	{r4, r5, r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006862:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getSC_X_tablesize();
 8006864:	f7fd feca 	bl	80045fc <getSC_X_tablesize>
 8006868:	4603      	mov	r3, r0
 800686a:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 800686c:	2300      	movs	r3, #0
 800686e:	82fb      	strh	r3, [r7, #22]
 8006870:	e08c      	b.n	800698c <accelerateProcessing+0x134>
		float v_diff = velocity_table[i+1] - velocity_table[i];
 8006872:	8afb      	ldrh	r3, [r7, #22]
 8006874:	3301      	adds	r3, #1
 8006876:	4a4c      	ldr	r2, [pc, #304]	; (80069a8 <accelerateProcessing+0x150>)
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	ed93 7a00 	vldr	s14, [r3]
 8006880:	8afb      	ldrh	r3, [r7, #22]
 8006882:	4a49      	ldr	r2, [pc, #292]	; (80069a8 <accelerateProcessing+0x150>)
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	edd3 7a00 	vldr	s15, [r3]
 800688c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006890:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 8006894:	edd7 7a04 	vldr	s15, [r7, #16]
 8006898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800689c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a0:	dd71      	ble.n	8006986 <accelerateProcessing+0x12e>
			float t = (p_distance[i] / 100) *1e-3 / v_diff;
 80068a2:	8afb      	ldrh	r3, [r7, #22]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	4a3f      	ldr	r2, [pc, #252]	; (80069ac <accelerateProcessing+0x154>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7f9 fe34 	bl	8000524 <__aeabi_i2d>
 80068bc:	a338      	add	r3, pc, #224	; (adr r3, 80069a0 <accelerateProcessing+0x148>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fe99 	bl	80005f8 <__aeabi_dmul>
 80068c6:	4603      	mov	r3, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	4625      	mov	r5, r4
 80068cc:	461c      	mov	r4, r3
 80068ce:	6938      	ldr	r0, [r7, #16]
 80068d0:	f7f9 fe3a 	bl	8000548 <__aeabi_f2d>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4620      	mov	r0, r4
 80068da:	4629      	mov	r1, r5
 80068dc:	f7f9 ffb6 	bl	800084c <__aeabi_ddiv>
 80068e0:	4603      	mov	r3, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	4618      	mov	r0, r3
 80068e6:	4621      	mov	r1, r4
 80068e8:	f7fa f97e 	bl	8000be8 <__aeabi_d2f>
 80068ec:	4603      	mov	r3, r0
 80068ee:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 80068f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80068f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80068f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fc:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 8006900:	ed97 7a02 	vldr	s14, [r7, #8]
 8006904:	edd7 7a01 	vldr	s15, [r7, #4]
 8006908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	dd39      	ble.n	8006986 <accelerateProcessing+0x12e>
				velocity_table[i+1] = velocity_table[i] + am * (p_distance[i] / 100) *1e-3;
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	4a24      	ldr	r2, [pc, #144]	; (80069a8 <accelerateProcessing+0x150>)
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f7f9 fe13 	bl	8000548 <__aeabi_f2d>
 8006922:	4604      	mov	r4, r0
 8006924:	460d      	mov	r5, r1
 8006926:	8afb      	ldrh	r3, [r7, #22]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <accelerateProcessing+0x154>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	b29b      	uxth	r3, r3
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006942:	edd7 7a01 	vldr	s15, [r7, #4]
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	ee17 0a90 	vmov	r0, s15
 800694e:	f7f9 fdfb 	bl	8000548 <__aeabi_f2d>
 8006952:	a313      	add	r3, pc, #76	; (adr r3, 80069a0 <accelerateProcessing+0x148>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f7f9 fe4e 	bl	80005f8 <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	f7f9 fc92 	bl	800028c <__adddf3>
 8006968:	4603      	mov	r3, r0
 800696a:	460c      	mov	r4, r1
 800696c:	4619      	mov	r1, r3
 800696e:	4622      	mov	r2, r4
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	1c5c      	adds	r4, r3, #1
 8006974:	4608      	mov	r0, r1
 8006976:	4611      	mov	r1, r2
 8006978:	f7fa f936 	bl	8000be8 <__aeabi_d2f>
 800697c:	4601      	mov	r1, r0
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <accelerateProcessing+0x150>)
 8006980:	00a3      	lsls	r3, r4, #2
 8006982:	4413      	add	r3, r2
 8006984:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	3301      	adds	r3, #1
 800698a:	82fb      	strh	r3, [r7, #22]
 800698c:	8afa      	ldrh	r2, [r7, #22]
 800698e:	8abb      	ldrh	r3, [r7, #20]
 8006990:	3b01      	subs	r3, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	f77f af6d 	ble.w	8006872 <accelerateProcessing+0x1a>
			}
		}
	}
}
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bdb0      	pop	{r4, r5, r7, pc}
 80069a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80069a4:	3f50624d 	.word	0x3f50624d
 80069a8:	2001b264 	.word	0x2001b264
 80069ac:	51eb851f 	.word	0x51eb851f

080069b0 <updateTargetVelocity>:

void updateTargetVelocity(){
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 80069b4:	4b2c      	ldr	r3, [pc, #176]	; (8006a68 <updateTargetVelocity+0xb8>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d053      	beq.n	8006a64 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 80069bc:	f7fa fcc4 	bl	8001348 <getTotalDistance>
 80069c0:	eeb0 7a40 	vmov.f32	s14, s0
 80069c4:	4b29      	ldr	r3, [pc, #164]	; (8006a6c <updateTargetVelocity+0xbc>)
 80069c6:	edd3 7a00 	vldr	s15, [r3]
 80069ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	db14      	blt.n	80069fe <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 80069d4:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <updateTargetVelocity+0xc0>)
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fc fdbd 	bl	8003558 <getDistanceLog>
 80069de:	eeb0 7a40 	vmov.f32	s14, s0
 80069e2:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <updateTargetVelocity+0xbc>)
 80069e4:	edd3 7a00 	vldr	s15, [r3]
 80069e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ec:	4b1f      	ldr	r3, [pc, #124]	; (8006a6c <updateTargetVelocity+0xbc>)
 80069ee:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <updateTargetVelocity+0xc0>)
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <updateTargetVelocity+0xc0>)
 80069fc:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 80069fe:	f7fc fc01 	bl	8003204 <getDistanceLogSize>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461a      	mov	r2, r3
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <updateTargetVelocity+0xc0>)
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d806      	bhi.n	8006a1c <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8006a0e:	f7fc fbf9 	bl	8003204 <getDistanceLogSize>
 8006a12:	4603      	mov	r3, r0
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <updateTargetVelocity+0xc0>)
 8006a1a:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8006a1c:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <updateTargetVelocity+0xc0>)
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	4a14      	ldr	r2, [pc, #80]	; (8006a74 <updateTargetVelocity+0xc4>)
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	edd3 7a00 	vldr	s15, [r3]
 8006a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a2e:	f7fc ff39 	bl	80038a4 <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <updateTargetVelocity+0xc0>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4a0f      	ldr	r2, [pc, #60]	; (8006a74 <updateTargetVelocity+0xc4>)
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	ed93 7a00 	vldr	s14, [r3]
 8006a40:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <updateTargetVelocity+0xc8>)
 8006a42:	edd3 7a00 	vldr	s15, [r3]
 8006a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4e:	d501      	bpl.n	8006a54 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8006a50:	f7fc ffd4 	bl	80039fc <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <updateTargetVelocity+0xc0>)
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	4a06      	ldr	r2, [pc, #24]	; (8006a74 <updateTargetVelocity+0xc4>)
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <updateTargetVelocity+0xc8>)
 8006a62:	6013      	str	r3, [r2, #0]
	}
}
 8006a64:	bf00      	nop
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	2001d1b9 	.word	0x2001d1b9
 8006a6c:	2001d70c 	.word	0x2001d70c
 8006a70:	2001d714 	.word	0x2001d714
 8006a74:	2001b264 	.word	0x2001b264
 8006a78:	2001d1e8 	.word	0x2001d1e8

08006a7c <getgoalStatus>:
		acceleration_table[i] = V_motor;
    }
}*/

bool getgoalStatus()
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
	return goal_flag;
 8006a80:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <getgoalStatus+0x14>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	2001d1b2 	.word	0x2001d1b2

08006a94 <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
	return target_update_flag;
 8006a98:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <getTargetUpdateflag+0x14>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	2001d1b8 	.word	0x2001d1b8

08006aac <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8006ab6:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8006aba:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <setVelocityRange+0x28>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8006ac0:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <setVelocityRange+0x2c>)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6013      	str	r3, [r2, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2001d1bc 	.word	0x2001d1bc
 8006ad8:	2001d1c0 	.word	0x2001d1c0

08006adc <setAccDec>:

void setAccDec(float acc, float dec)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	ed87 0a01 	vstr	s0, [r7, #4]
 8006ae6:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8006aea:	4a06      	ldr	r2, [pc, #24]	; (8006b04 <setAccDec+0x28>)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8006af0:	4a05      	ldr	r2, [pc, #20]	; (8006b08 <setAccDec+0x2c>)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6013      	str	r3, [r2, #0]
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	2001d1c4 	.word	0x2001d1c4
 8006b08:	2001d1c8 	.word	0x2001d1c8

08006b0c <setStraightRadius>:

void setStraightRadius(float radius)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8006b16:	4a04      	ldr	r2, [pc, #16]	; (8006b28 <setStraightRadius+0x1c>)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6013      	str	r3, [r2, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	2001d1cc 	.word	0x2001d1cc

08006b2c <getControl_Mode>:
{
	return Run_Mode;
}

float getControl_Mode()
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
	return Control_Mode;
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <getControl_Mode+0x1c>)
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	ee07 3a90 	vmov	s15, r3
 8006b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8006b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	2001d710 	.word	0x2001d710

08006b4c <getSideSensorStatusL>:
{
	return min_velocity;
}
//↓sidesensorjob
bool getSideSensorStatusL()
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <getSideSensorStatusL+0x14>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	2001d1b0 	.word	0x2001d1b0

08006b64 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8006b68:	4b03      	ldr	r3, [pc, #12]	; (8006b78 <getSideSensorStatusR+0x14>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	2001d1b1 	.word	0x2001d1b1

08006b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b90:	6453      	str	r3, [r2, #68]	; 0x44
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bac:	6413      	str	r3, [r2, #64]	; 0x40
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_MspInit+0x4c>)
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40023800 	.word	0x40023800

08006bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a79      	ldr	r2, [pc, #484]	; (8006dd0 <HAL_ADC_MspInit+0x204>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d158      	bne.n	8006ca0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006bee:	2300      	movs	r3, #0
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	4b78      	ldr	r3, [pc, #480]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	4a77      	ldr	r2, [pc, #476]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8006bfe:	4b75      	ldr	r3, [pc, #468]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	4b71      	ldr	r3, [pc, #452]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	4a70      	ldr	r2, [pc, #448]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006c14:	f043 0304 	orr.w	r3, r3, #4
 8006c18:	6313      	str	r3, [r2, #48]	; 0x30
 8006c1a:	4b6e      	ldr	r3, [pc, #440]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006c26:	230e      	movs	r3, #14
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c36:	4619      	mov	r1, r3
 8006c38:	4867      	ldr	r0, [pc, #412]	; (8006dd8 <HAL_ADC_MspInit+0x20c>)
 8006c3a:	f001 ff65 	bl	8008b08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006c3e:	4b67      	ldr	r3, [pc, #412]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c40:	4a67      	ldr	r2, [pc, #412]	; (8006de0 <HAL_ADC_MspInit+0x214>)
 8006c42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006c44:	4b65      	ldr	r3, [pc, #404]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c4a:	4b64      	ldr	r3, [pc, #400]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c50:	4b62      	ldr	r3, [pc, #392]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006c56:	4b61      	ldr	r3, [pc, #388]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006c5e:	4b5f      	ldr	r3, [pc, #380]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006c66:	4b5d      	ldr	r3, [pc, #372]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006c6e:	4b5b      	ldr	r3, [pc, #364]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006c76:	4b59      	ldr	r3, [pc, #356]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c7c:	4b57      	ldr	r3, [pc, #348]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006c82:	4856      	ldr	r0, [pc, #344]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c84:	f001 f9e8 	bl	8008058 <HAL_DMA_Init>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8006c8e:	f7fe fdff 	bl	8005890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a51      	ldr	r2, [pc, #324]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38
 8006c98:	4a50      	ldr	r2, [pc, #320]	; (8006ddc <HAL_ADC_MspInit+0x210>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c9e:	e092      	b.n	8006dc6 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4f      	ldr	r2, [pc, #316]	; (8006de4 <HAL_ADC_MspInit+0x218>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	f040 808d 	bne.w	8006dc6 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006cac:	2300      	movs	r3, #0
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	4b48      	ldr	r3, [pc, #288]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb4:	4a47      	ldr	r2, [pc, #284]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cba:	6453      	str	r3, [r2, #68]	; 0x44
 8006cbc:	4b45      	ldr	r3, [pc, #276]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	4a39      	ldr	r2, [pc, #228]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cee:	f043 0304 	orr.w	r3, r3, #4
 8006cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf4:	4b37      	ldr	r3, [pc, #220]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	4b33      	ldr	r3, [pc, #204]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	4a32      	ldr	r2, [pc, #200]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006d0a:	f043 0302 	orr.w	r3, r3, #2
 8006d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d10:	4b30      	ldr	r3, [pc, #192]	; (8006dd4 <HAL_ADC_MspInit+0x208>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006d1c:	23ff      	movs	r3, #255	; 0xff
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d20:	2303      	movs	r3, #3
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	482e      	ldr	r0, [pc, #184]	; (8006de8 <HAL_ADC_MspInit+0x21c>)
 8006d30:	f001 feea 	bl	8008b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006d34:	2330      	movs	r3, #48	; 0x30
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d44:	4619      	mov	r1, r3
 8006d46:	4824      	ldr	r0, [pc, #144]	; (8006dd8 <HAL_ADC_MspInit+0x20c>)
 8006d48:	f001 fede 	bl	8008b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d50:	2303      	movs	r3, #3
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4823      	ldr	r0, [pc, #140]	; (8006dec <HAL_ADC_MspInit+0x220>)
 8006d60:	f001 fed2 	bl	8008b08 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006d64:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d66:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <HAL_ADC_MspInit+0x228>)
 8006d68:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d70:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d72:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d84:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d8c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d94:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d9c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006da4:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006daa:	4811      	ldr	r0, [pc, #68]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006dac:	f001 f954 	bl	8008058 <HAL_DMA_Init>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8006db6:	f7fe fd6b 	bl	8005890 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a0c      	ldr	r2, [pc, #48]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8006dc0:	4a0b      	ldr	r2, [pc, #44]	; (8006df0 <HAL_ADC_MspInit+0x224>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006dc6:	bf00      	nop
 8006dc8:	3738      	adds	r7, #56	; 0x38
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40012000 	.word	0x40012000
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40020800 	.word	0x40020800
 8006ddc:	2001d57c 	.word	0x2001d57c
 8006de0:	40026410 	.word	0x40026410
 8006de4:	40012100 	.word	0x40012100
 8006de8:	40020000 	.word	0x40020000
 8006dec:	40020400 	.word	0x40020400
 8006df0:	2001d664 	.word	0x2001d664
 8006df4:	40026440 	.word	0x40026440

08006df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e00:	f107 0314 	add.w	r3, r7, #20
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	609a      	str	r2, [r3, #8]
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a19      	ldr	r2, [pc, #100]	; (8006e7c <HAL_I2C_MspInit+0x84>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d12c      	bne.n	8006e74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	4b18      	ldr	r3, [pc, #96]	; (8006e80 <HAL_I2C_MspInit+0x88>)
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	4a17      	ldr	r2, [pc, #92]	; (8006e80 <HAL_I2C_MspInit+0x88>)
 8006e24:	f043 0302 	orr.w	r3, r3, #2
 8006e28:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2a:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <HAL_I2C_MspInit+0x88>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e3c:	2312      	movs	r3, #18
 8006e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e40:	2301      	movs	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e44:	2303      	movs	r3, #3
 8006e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e48:	2304      	movs	r3, #4
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	4619      	mov	r1, r3
 8006e52:	480c      	ldr	r0, [pc, #48]	; (8006e84 <HAL_I2C_MspInit+0x8c>)
 8006e54:	f001 fe58 	bl	8008b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <HAL_I2C_MspInit+0x88>)
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	4a07      	ldr	r2, [pc, #28]	; (8006e80 <HAL_I2C_MspInit+0x88>)
 8006e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e66:	6413      	str	r3, [r2, #64]	; 0x40
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_I2C_MspInit+0x88>)
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006e74:	bf00      	nop
 8006e76:	3728      	adds	r7, #40	; 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40005400 	.word	0x40005400
 8006e80:	40023800 	.word	0x40023800
 8006e84:	40020400 	.word	0x40020400

08006e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e90:	f107 0314 	add.w	r3, r7, #20
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <HAL_SPI_MspInit+0x84>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d12c      	bne.n	8006f04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <HAL_SPI_MspInit+0x88>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_SPI_MspInit+0x88>)
 8006eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eba:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <HAL_SPI_MspInit+0x88>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <HAL_SPI_MspInit+0x88>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <HAL_SPI_MspInit+0x88>)
 8006ed0:	f043 0304 	orr.w	r3, r3, #4
 8006ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <HAL_SPI_MspInit+0x88>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006ee2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4619      	mov	r1, r3
 8006efe:	4805      	ldr	r0, [pc, #20]	; (8006f14 <HAL_SPI_MspInit+0x8c>)
 8006f00:	f001 fe02 	bl	8008b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006f04:	bf00      	nop
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40003c00 	.word	0x40003c00
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40020800 	.word	0x40020800

08006f18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a15      	ldr	r2, [pc, #84]	; (8006f7c <HAL_TIM_PWM_MspInit+0x64>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d10e      	bne.n	8006f48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_TIM_PWM_MspInit+0x68>)
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <HAL_TIM_PWM_MspInit+0x68>)
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6453      	str	r3, [r2, #68]	; 0x44
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <HAL_TIM_PWM_MspInit+0x68>)
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006f46:	e012      	b.n	8006f6e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <HAL_TIM_PWM_MspInit+0x6c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10d      	bne.n	8006f6e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <HAL_TIM_PWM_MspInit+0x68>)
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <HAL_TIM_PWM_MspInit+0x68>)
 8006f5c:	f043 0302 	orr.w	r3, r3, #2
 8006f60:	6453      	str	r3, [r2, #68]	; 0x44
 8006f62:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <HAL_TIM_PWM_MspInit+0x68>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	60bb      	str	r3, [r7, #8]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40010400 	.word	0x40010400

08006f88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08c      	sub	sp, #48	; 0x30
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	f107 031c 	add.w	r3, r7, #28
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	605a      	str	r2, [r3, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a32      	ldr	r2, [pc, #200]	; (8007070 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d12c      	bne.n	8007004 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006faa:	2300      	movs	r3, #0
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	4a30      	ldr	r2, [pc, #192]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8006fb4:	f043 0302 	orr.w	r3, r3, #2
 8006fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fba:	4b2e      	ldr	r3, [pc, #184]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd6:	4b27      	ldr	r3, [pc, #156]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fe2:	2330      	movs	r3, #48	; 0x30
 8006fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff6:	f107 031c 	add.w	r3, r7, #28
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	481e      	ldr	r0, [pc, #120]	; (8007078 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006ffe:	f001 fd83 	bl	8008b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007002:	e030      	b.n	8007066 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1c      	ldr	r2, [pc, #112]	; (800707c <HAL_TIM_Encoder_MspInit+0xf4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d12b      	bne.n	8007066 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	4b18      	ldr	r3, [pc, #96]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8007018:	f043 0304 	orr.w	r3, r3, #4
 800701c:	6413      	str	r3, [r2, #64]	; 0x40
 800701e:	4b15      	ldr	r3, [pc, #84]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	4a10      	ldr	r2, [pc, #64]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 8007034:	f043 0302 	orr.w	r3, r3, #2
 8007038:	6313      	str	r3, [r2, #48]	; 0x30
 800703a:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <HAL_TIM_Encoder_MspInit+0xec>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007046:	23c0      	movs	r3, #192	; 0xc0
 8007048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704a:	2302      	movs	r3, #2
 800704c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704e:	2300      	movs	r3, #0
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007052:	2300      	movs	r3, #0
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007056:	2302      	movs	r3, #2
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800705a:	f107 031c 	add.w	r3, r7, #28
 800705e:	4619      	mov	r1, r3
 8007060:	4805      	ldr	r0, [pc, #20]	; (8007078 <HAL_TIM_Encoder_MspInit+0xf0>)
 8007062:	f001 fd51 	bl	8008b08 <HAL_GPIO_Init>
}
 8007066:	bf00      	nop
 8007068:	3730      	adds	r7, #48	; 0x30
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40000400 	.word	0x40000400
 8007074:	40023800 	.word	0x40023800
 8007078:	40020400 	.word	0x40020400
 800707c:	40000800 	.word	0x40000800

08007080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <HAL_TIM_Base_MspInit+0x80>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d116      	bne.n	80070c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <HAL_TIM_Base_MspInit+0x84>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_TIM_Base_MspInit+0x84>)
 800709c:	f043 0310 	orr.w	r3, r3, #16
 80070a0:	6413      	str	r3, [r2, #64]	; 0x40
 80070a2:	4b18      	ldr	r3, [pc, #96]	; (8007104 <HAL_TIM_Base_MspInit+0x84>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80070ae:	2200      	movs	r2, #0
 80070b0:	2101      	movs	r1, #1
 80070b2:	2036      	movs	r0, #54	; 0x36
 80070b4:	f000 ff99 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070b8:	2036      	movs	r0, #54	; 0x36
 80070ba:	f000 ffb2 	bl	8008022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80070be:	e01a      	b.n	80070f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a10      	ldr	r2, [pc, #64]	; (8007108 <HAL_TIM_Base_MspInit+0x88>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d115      	bne.n	80070f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	4b0d      	ldr	r3, [pc, #52]	; (8007104 <HAL_TIM_Base_MspInit+0x84>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	4a0c      	ldr	r2, [pc, #48]	; (8007104 <HAL_TIM_Base_MspInit+0x84>)
 80070d4:	f043 0320 	orr.w	r3, r3, #32
 80070d8:	6413      	str	r3, [r2, #64]	; 0x40
 80070da:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <HAL_TIM_Base_MspInit+0x84>)
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	60bb      	str	r3, [r7, #8]
 80070e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	2037      	movs	r0, #55	; 0x37
 80070ec:	f000 ff7d 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070f0:	2037      	movs	r0, #55	; 0x37
 80070f2:	f000 ff96 	bl	8008022 <HAL_NVIC_EnableIRQ>
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40001000 	.word	0x40001000
 8007104:	40023800 	.word	0x40023800
 8007108:	40001400 	.word	0x40001400

0800710c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	; 0x28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	605a      	str	r2, [r3, #4]
 800711e:	609a      	str	r2, [r3, #8]
 8007120:	60da      	str	r2, [r3, #12]
 8007122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_TIM_MspPostInit+0xb4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d11f      	bne.n	800716e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800712e:	2300      	movs	r3, #0
 8007130:	613b      	str	r3, [r7, #16]
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <HAL_TIM_MspPostInit+0xb8>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	4a23      	ldr	r2, [pc, #140]	; (80071c4 <HAL_TIM_MspPostInit+0xb8>)
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	6313      	str	r3, [r2, #48]	; 0x30
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <HAL_TIM_MspPostInit+0xb8>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800714a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800714e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007150:	2302      	movs	r3, #2
 8007152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007158:	2300      	movs	r3, #0
 800715a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800715c:	2301      	movs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	4619      	mov	r1, r3
 8007166:	4818      	ldr	r0, [pc, #96]	; (80071c8 <HAL_TIM_MspPostInit+0xbc>)
 8007168:	f001 fcce 	bl	8008b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800716c:	e023      	b.n	80071b6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a16      	ldr	r2, [pc, #88]	; (80071cc <HAL_TIM_MspPostInit+0xc0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d11e      	bne.n	80071b6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <HAL_TIM_MspPostInit+0xb8>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <HAL_TIM_MspPostInit+0xb8>)
 8007182:	f043 0304 	orr.w	r3, r3, #4
 8007186:	6313      	str	r3, [r2, #48]	; 0x30
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <HAL_TIM_MspPostInit+0xb8>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8007194:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719a:	2302      	movs	r3, #2
 800719c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a2:	2300      	movs	r3, #0
 80071a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80071a6:	2303      	movs	r3, #3
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071aa:	f107 0314 	add.w	r3, r7, #20
 80071ae:	4619      	mov	r1, r3
 80071b0:	4807      	ldr	r0, [pc, #28]	; (80071d0 <HAL_TIM_MspPostInit+0xc4>)
 80071b2:	f001 fca9 	bl	8008b08 <HAL_GPIO_Init>
}
 80071b6:	bf00      	nop
 80071b8:	3728      	adds	r7, #40	; 0x28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40010000 	.word	0x40010000
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40020000 	.word	0x40020000
 80071cc:	40010400 	.word	0x40010400
 80071d0:	40020800 	.word	0x40020800

080071d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_UART_MspInit+0x84>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12c      	bne.n	8007250 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <HAL_UART_MspInit+0x88>)
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <HAL_UART_MspInit+0x88>)
 8007200:	f043 0310 	orr.w	r3, r3, #16
 8007204:	6453      	str	r3, [r2, #68]	; 0x44
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_UART_MspInit+0x88>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720a:	f003 0310 	and.w	r3, r3, #16
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_UART_MspInit+0x88>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a10      	ldr	r2, [pc, #64]	; (800725c <HAL_UART_MspInit+0x88>)
 800721c:	f043 0301 	orr.w	r3, r3, #1
 8007220:	6313      	str	r3, [r2, #48]	; 0x30
 8007222:	4b0e      	ldr	r3, [pc, #56]	; (800725c <HAL_UART_MspInit+0x88>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800722e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007234:	2302      	movs	r3, #2
 8007236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007238:	2300      	movs	r3, #0
 800723a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800723c:	2303      	movs	r3, #3
 800723e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007240:	2307      	movs	r3, #7
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	4619      	mov	r1, r3
 800724a:	4805      	ldr	r0, [pc, #20]	; (8007260 <HAL_UART_MspInit+0x8c>)
 800724c:	f001 fc5c 	bl	8008b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007250:	bf00      	nop
 8007252:	3728      	adds	r7, #40	; 0x28
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40011000 	.word	0x40011000
 800725c:	40023800 	.word	0x40023800
 8007260:	40020000 	.word	0x40020000

08007264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007268:	e7fe      	b.n	8007268 <NMI_Handler+0x4>

0800726a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800726a:	b480      	push	{r7}
 800726c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800726e:	e7fe      	b.n	800726e <HardFault_Handler+0x4>

08007270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007274:	e7fe      	b.n	8007274 <MemManage_Handler+0x4>

08007276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007276:	b480      	push	{r7}
 8007278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800727a:	e7fe      	b.n	800727a <BusFault_Handler+0x4>

0800727c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007280:	e7fe      	b.n	8007280 <UsageFault_Handler+0x4>

08007282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007282:	b480      	push	{r7}
 8007284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007286:	bf00      	nop
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800729e:	b480      	push	{r7}
 80072a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072a2:	bf00      	nop
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072b0:	f000 f98a 	bl	80075c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80072bc:	4802      	ldr	r0, [pc, #8]	; (80072c8 <TIM6_DAC_IRQHandler+0x10>)
 80072be:	f003 fa38 	bl	800a732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	2001d5dc 	.word	0x2001d5dc

080072cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80072d0:	4802      	ldr	r0, [pc, #8]	; (80072dc <TIM7_IRQHandler+0x10>)
 80072d2:	f003 fa2e 	bl	800a732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	2001d6c4 	.word	0x2001d6c4

080072e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80072e4:	4802      	ldr	r0, [pc, #8]	; (80072f0 <DMA2_Stream0_IRQHandler+0x10>)
 80072e6:	f000 ffbd 	bl	8008264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80072ea:	bf00      	nop
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2001d57c 	.word	0x2001d57c

080072f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80072f8:	4802      	ldr	r0, [pc, #8]	; (8007304 <DMA2_Stream2_IRQHandler+0x10>)
 80072fa:	f000 ffb3 	bl	8008264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	2001d664 	.word	0x2001d664

08007308 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2b52      	cmp	r3, #82	; 0x52
 800731a:	d10a      	bne.n	8007332 <getSwitchStatus+0x2a>
 800731c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007320:	480d      	ldr	r0, [pc, #52]	; (8007358 <getSwitchStatus+0x50>)
 8007322:	f001 fd8b 	bl	8008e3c <HAL_GPIO_ReadPin>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <getSwitchStatus+0x2a>
		ret = 1;
 800732c:	2301      	movs	r3, #1
 800732e:	81fb      	strh	r3, [r7, #14]
 8007330:	e00c      	b.n	800734c <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	2b4c      	cmp	r3, #76	; 0x4c
 8007336:	d109      	bne.n	800734c <getSwitchStatus+0x44>
 8007338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800733c:	4806      	ldr	r0, [pc, #24]	; (8007358 <getSwitchStatus+0x50>)
 800733e:	f001 fd7d 	bl	8008e3c <HAL_GPIO_ReadPin>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <getSwitchStatus+0x44>
		ret = 1;
 8007348:	2301      	movs	r3, #1
 800734a:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800734c:	89fb      	ldrh	r3, [r7, #14]

}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40020000 	.word	0x40020000

0800735c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e00a      	b.n	8007384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800736e:	f3af 8000 	nop.w
 8007372:	4601      	mov	r1, r0
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	60ba      	str	r2, [r7, #8]
 800737a:	b2ca      	uxtb	r2, r1
 800737c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	3301      	adds	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	429a      	cmp	r2, r3
 800738a:	dbf0      	blt.n	800736e <_read+0x12>
	}

return len;
 800738c:	687b      	ldr	r3, [r7, #4]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e009      	b.n	80073bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	60ba      	str	r2, [r7, #8]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fd f94f 	bl	8004654 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	3301      	adds	r3, #1
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	dbf1      	blt.n	80073a8 <_write+0x12>
	}
	return len;
 80073c4:	687b      	ldr	r3, [r7, #4]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_close>:

int _close(int file)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
	return -1;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073f6:	605a      	str	r2, [r3, #4]
	return 0;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <_isatty>:

int _isatty(int file)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
	return 1;
 800740e:	2301      	movs	r3, #1
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
	return 0;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007440:	4a14      	ldr	r2, [pc, #80]	; (8007494 <_sbrk+0x5c>)
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <_sbrk+0x60>)
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800744c:	4b13      	ldr	r3, [pc, #76]	; (800749c <_sbrk+0x64>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <_sbrk+0x64>)
 8007456:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <_sbrk+0x68>)
 8007458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <_sbrk+0x64>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d207      	bcs.n	8007478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007468:	f006 fcd6 	bl	800de18 <__errno>
 800746c:	4602      	mov	r2, r0
 800746e:	230c      	movs	r3, #12
 8007470:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	e009      	b.n	800748c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007478:	4b08      	ldr	r3, [pc, #32]	; (800749c <_sbrk+0x64>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <_sbrk+0x64>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4413      	add	r3, r2
 8007486:	4a05      	ldr	r2, [pc, #20]	; (800749c <_sbrk+0x64>)
 8007488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20020000 	.word	0x20020000
 8007498:	00000400 	.word	0x00000400
 800749c:	2001d1ec 	.word	0x2001d1ec
 80074a0:	2001d740 	.word	0x2001d740

080074a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074a8:	4b08      	ldr	r3, [pc, #32]	; (80074cc <SystemInit+0x28>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	4a07      	ldr	r2, [pc, #28]	; (80074cc <SystemInit+0x28>)
 80074b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <SystemInit+0x28>)
 80074ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074be:	609a      	str	r2, [r3, #8]
#endif
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	e000ed00 	.word	0xe000ed00

080074d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80074d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80074d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80074d6:	e003      	b.n	80074e0 <LoopCopyDataInit>

080074d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80074d8:	4b0c      	ldr	r3, [pc, #48]	; (800750c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80074da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80074dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80074de:	3104      	adds	r1, #4

080074e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80074e0:	480b      	ldr	r0, [pc, #44]	; (8007510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80074e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80074e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80074e8:	d3f6      	bcc.n	80074d8 <CopyDataInit>
  ldr  r2, =_sbss
 80074ea:	4a0b      	ldr	r2, [pc, #44]	; (8007518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80074ec:	e002      	b.n	80074f4 <LoopFillZerobss>

080074ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80074ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80074f0:	f842 3b04 	str.w	r3, [r2], #4

080074f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80074f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074f8:	d3f9      	bcc.n	80074ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80074fa:	f7ff ffd3 	bl	80074a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074fe:	f006 fc91 	bl	800de24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007502:	f7fd f921 	bl	8004748 <main>
  bx  lr    
 8007506:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007508:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800750c:	08012bb0 	.word	0x08012bb0
  ldr  r0, =_sdata
 8007510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007514:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 8007518:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 800751c:	2001d740 	.word	0x2001d740

08007520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007520:	e7fe      	b.n	8007520 <ADC_IRQHandler>
	...

08007524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <HAL_Init+0x40>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a0d      	ldr	r2, [pc, #52]	; (8007564 <HAL_Init+0x40>)
 800752e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <HAL_Init+0x40>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <HAL_Init+0x40>)
 800753a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800753e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007540:	4b08      	ldr	r3, [pc, #32]	; (8007564 <HAL_Init+0x40>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a07      	ldr	r2, [pc, #28]	; (8007564 <HAL_Init+0x40>)
 8007546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800754a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800754c:	2003      	movs	r0, #3
 800754e:	f000 fd41 	bl	8007fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007552:	2000      	movs	r0, #0
 8007554:	f000 f808 	bl	8007568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007558:	f7ff fb10 	bl	8006b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40023c00 	.word	0x40023c00

08007568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007570:	4b12      	ldr	r3, [pc, #72]	; (80075bc <HAL_InitTick+0x54>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b12      	ldr	r3, [pc, #72]	; (80075c0 <HAL_InitTick+0x58>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4619      	mov	r1, r3
 800757a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800757e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fd59 	bl	800803e <HAL_SYSTICK_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e00e      	b.n	80075b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b0f      	cmp	r3, #15
 800759a:	d80a      	bhi.n	80075b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800759c:	2200      	movs	r2, #0
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	f000 fd21 	bl	8007fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80075a8:	4a06      	ldr	r2, [pc, #24]	; (80075c4 <HAL_InitTick+0x5c>)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	2000003c 	.word	0x2000003c
 80075c0:	20000044 	.word	0x20000044
 80075c4:	20000040 	.word	0x20000040

080075c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <HAL_IncTick+0x20>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_IncTick+0x24>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4413      	add	r3, r2
 80075d8:	4a04      	ldr	r2, [pc, #16]	; (80075ec <HAL_IncTick+0x24>)
 80075da:	6013      	str	r3, [r2, #0]
}
 80075dc:	bf00      	nop
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000044 	.word	0x20000044
 80075ec:	2001d718 	.word	0x2001d718

080075f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  return uwTick;
 80075f4:	4b03      	ldr	r3, [pc, #12]	; (8007604 <HAL_GetTick+0x14>)
 80075f6:	681b      	ldr	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	2001d718 	.word	0x2001d718

08007608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007610:	f7ff ffee 	bl	80075f0 <HAL_GetTick>
 8007614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d005      	beq.n	800762e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <HAL_Delay+0x40>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800762e:	bf00      	nop
 8007630:	f7ff ffde 	bl	80075f0 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	429a      	cmp	r2, r3
 800763e:	d8f7      	bhi.n	8007630 <HAL_Delay+0x28>
  {
  }
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000044 	.word	0x20000044

0800764c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e033      	b.n	80076ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff faae 	bl	8006bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b00      	cmp	r3, #0
 8007688:	d118      	bne.n	80076bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007692:	f023 0302 	bic.w	r3, r3, #2
 8007696:	f043 0202 	orr.w	r2, r3, #2
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa4a 	bl	8007b38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	f043 0201 	orr.w	r2, r3, #1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	641a      	str	r2, [r3, #64]	; 0x40
 80076ba:	e001      	b.n	80076c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_ADC_Start_DMA+0x1e>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e0cc      	b.n	800788c <HAL_ADC_Start_DMA+0x1b8>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d018      	beq.n	800773a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007718:	4b5e      	ldr	r3, [pc, #376]	; (8007894 <HAL_ADC_Start_DMA+0x1c0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5e      	ldr	r2, [pc, #376]	; (8007898 <HAL_ADC_Start_DMA+0x1c4>)
 800771e:	fba2 2303 	umull	r2, r3, r2, r3
 8007722:	0c9a      	lsrs	r2, r3, #18
 8007724:	4613      	mov	r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	4413      	add	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800772c:	e002      	b.n	8007734 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3b01      	subs	r3, #1
 8007732:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f9      	bne.n	800772e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b01      	cmp	r3, #1
 8007746:	f040 80a0 	bne.w	800788a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007774:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007788:	d106      	bne.n	8007798 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	f023 0206 	bic.w	r2, r3, #6
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	645a      	str	r2, [r3, #68]	; 0x44
 8007796:	e002      	b.n	800779e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077a6:	4b3d      	ldr	r3, [pc, #244]	; (800789c <HAL_ADC_Start_DMA+0x1c8>)
 80077a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	4a3c      	ldr	r2, [pc, #240]	; (80078a0 <HAL_ADC_Start_DMA+0x1cc>)
 80077b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	4a3b      	ldr	r2, [pc, #236]	; (80078a4 <HAL_ADC_Start_DMA+0x1d0>)
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4a3a      	ldr	r2, [pc, #232]	; (80078a8 <HAL_ADC_Start_DMA+0x1d4>)
 80077c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80077ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80077da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	334c      	adds	r3, #76	; 0x4c
 80077f6:	4619      	mov	r1, r3
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f000 fcda 	bl	80081b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2b00      	cmp	r3, #0
 800780a:	d12a      	bne.n	8007862 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a26      	ldr	r2, [pc, #152]	; (80078ac <HAL_ADC_Start_DMA+0x1d8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d015      	beq.n	8007842 <HAL_ADC_Start_DMA+0x16e>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <HAL_ADC_Start_DMA+0x1dc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d105      	bne.n	800782c <HAL_ADC_Start_DMA+0x158>
 8007820:	4b1e      	ldr	r3, [pc, #120]	; (800789c <HAL_ADC_Start_DMA+0x1c8>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <HAL_ADC_Start_DMA+0x1e0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d129      	bne.n	800788a <HAL_ADC_Start_DMA+0x1b6>
 8007836:	4b19      	ldr	r3, [pc, #100]	; (800789c <HAL_ADC_Start_DMA+0x1c8>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2b0f      	cmp	r3, #15
 8007840:	d823      	bhi.n	800788a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11c      	bne.n	800788a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800785e:	609a      	str	r2, [r3, #8]
 8007860:	e013      	b.n	800788a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a11      	ldr	r2, [pc, #68]	; (80078ac <HAL_ADC_Start_DMA+0x1d8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d10e      	bne.n	800788a <HAL_ADC_Start_DMA+0x1b6>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d107      	bne.n	800788a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007888:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	2000003c 	.word	0x2000003c
 8007898:	431bde83 	.word	0x431bde83
 800789c:	40012300 	.word	0x40012300
 80078a0:	08007d31 	.word	0x08007d31
 80078a4:	08007deb 	.word	0x08007deb
 80078a8:	08007e07 	.word	0x08007e07
 80078ac:	40012000 	.word	0x40012000
 80078b0:	40012100 	.word	0x40012100
 80078b4:	40012200 	.word	0x40012200

080078b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_ADC_ConfigChannel+0x1c>
 800790c:	2302      	movs	r3, #2
 800790e:	e105      	b.n	8007b1c <HAL_ADC_ConfigChannel+0x228>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b09      	cmp	r3, #9
 800791e:	d925      	bls.n	800796c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68d9      	ldr	r1, [r3, #12]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	4613      	mov	r3, r2
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	4413      	add	r3, r2
 8007934:	3b1e      	subs	r3, #30
 8007936:	2207      	movs	r2, #7
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	43da      	mvns	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	400a      	ands	r2, r1
 8007944:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68d9      	ldr	r1, [r3, #12]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	4618      	mov	r0, r3
 8007958:	4603      	mov	r3, r0
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	4403      	add	r3, r0
 800795e:	3b1e      	subs	r3, #30
 8007960:	409a      	lsls	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	60da      	str	r2, [r3, #12]
 800796a:	e022      	b.n	80079b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6919      	ldr	r1, [r3, #16]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	4613      	mov	r3, r2
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	4413      	add	r3, r2
 8007980:	2207      	movs	r2, #7
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43da      	mvns	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	400a      	ands	r2, r1
 800798e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6919      	ldr	r1, [r3, #16]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4618      	mov	r0, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4403      	add	r3, r0
 80079a8:	409a      	lsls	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b06      	cmp	r3, #6
 80079b8:	d824      	bhi.n	8007a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	3b05      	subs	r3, #5
 80079cc:	221f      	movs	r2, #31
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	400a      	ands	r2, r1
 80079da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	4618      	mov	r0, r3
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	3b05      	subs	r3, #5
 80079f6:	fa00 f203 	lsl.w	r2, r0, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	635a      	str	r2, [r3, #52]	; 0x34
 8007a02:	e04c      	b.n	8007a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b0c      	cmp	r3, #12
 8007a0a:	d824      	bhi.n	8007a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3b23      	subs	r3, #35	; 0x23
 8007a1e:	221f      	movs	r2, #31
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	43da      	mvns	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	400a      	ands	r2, r1
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	3b23      	subs	r3, #35	; 0x23
 8007a48:	fa00 f203 	lsl.w	r2, r0, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
 8007a54:	e023      	b.n	8007a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	3b41      	subs	r3, #65	; 0x41
 8007a68:	221f      	movs	r2, #31
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	43da      	mvns	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	400a      	ands	r2, r1
 8007a76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	4618      	mov	r0, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	3b41      	subs	r3, #65	; 0x41
 8007a92:	fa00 f203 	lsl.w	r2, r0, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a9e:	4b22      	ldr	r3, [pc, #136]	; (8007b28 <HAL_ADC_ConfigChannel+0x234>)
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_ADC_ConfigChannel+0x238>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d109      	bne.n	8007ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b12      	cmp	r3, #18
 8007ab2:	d105      	bne.n	8007ac0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <HAL_ADC_ConfigChannel+0x238>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d123      	bne.n	8007b12 <HAL_ADC_ConfigChannel+0x21e>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d003      	beq.n	8007ada <HAL_ADC_ConfigChannel+0x1e6>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b11      	cmp	r3, #17
 8007ad8:	d11b      	bne.n	8007b12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d111      	bne.n	8007b12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <HAL_ADC_ConfigChannel+0x23c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a10      	ldr	r2, [pc, #64]	; (8007b34 <HAL_ADC_ConfigChannel+0x240>)
 8007af4:	fba2 2303 	umull	r2, r3, r2, r3
 8007af8:	0c9a      	lsrs	r2, r3, #18
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b04:	e002      	b.n	8007b0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f9      	bne.n	8007b06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	40012300 	.word	0x40012300
 8007b2c:	40012000 	.word	0x40012000
 8007b30:	2000003c 	.word	0x2000003c
 8007b34:	431bde83 	.word	0x431bde83

08007b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b40:	4b79      	ldr	r3, [pc, #484]	; (8007d28 <ADC_Init+0x1f0>)
 8007b42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6859      	ldr	r1, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	021a      	lsls	r2, r3, #8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6859      	ldr	r1, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	4a58      	ldr	r2, [pc, #352]	; (8007d2c <ADC_Init+0x1f4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6899      	ldr	r1, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6899      	ldr	r1, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	e00f      	b.n	8007c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0202 	bic.w	r2, r2, #2
 8007c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6899      	ldr	r1, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7e1b      	ldrb	r3, [r3, #24]
 8007c50:	005a      	lsls	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01b      	beq.n	8007c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	035a      	lsls	r2, r3, #13
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
 8007c9a:	e007      	b.n	8007cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	051a      	lsls	r2, r3, #20
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6899      	ldr	r1, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cee:	025a      	lsls	r2, r3, #9
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6899      	ldr	r1, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	029a      	lsls	r2, r3, #10
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40012300 	.word	0x40012300
 8007d2c:	0f000001 	.word	0x0f000001

08007d30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d13c      	bne.n	8007dc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d12b      	bne.n	8007dbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d127      	bne.n	8007dbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d006      	beq.n	8007d88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d119      	bne.n	8007dbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0220 	bic.w	r2, r2, #32
 8007d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f043 0201 	orr.w	r2, r3, #1
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fd7b 	bl	80078b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007dc2:	e00e      	b.n	8007de2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fd85 	bl	80078e0 <HAL_ADC_ErrorCallback>
}
 8007dd6:	e004      	b.n	8007de2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fd67 	bl	80078cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2240      	movs	r2, #64	; 0x40
 8007e18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1e:	f043 0204 	orr.w	r2, r3, #4
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff fd5a 	bl	80078e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <__NVIC_SetPriorityGrouping+0x44>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e50:	4013      	ands	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e66:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <__NVIC_SetPriorityGrouping+0x44>)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	60d3      	str	r3, [r2, #12]
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	e000ed00 	.word	0xe000ed00

08007e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <__NVIC_GetPriorityGrouping+0x18>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	f003 0307 	and.w	r3, r3, #7
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	e000ed00 	.word	0xe000ed00

08007e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	db0b      	blt.n	8007ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	f003 021f 	and.w	r2, r3, #31
 8007eb0:	4907      	ldr	r1, [pc, #28]	; (8007ed0 <__NVIC_EnableIRQ+0x38>)
 8007eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2001      	movs	r0, #1
 8007eba:	fa00 f202 	lsl.w	r2, r0, r2
 8007ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e100 	.word	0xe000e100

08007ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	db0a      	blt.n	8007efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	490c      	ldr	r1, [pc, #48]	; (8007f20 <__NVIC_SetPriority+0x4c>)
 8007eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef2:	0112      	lsls	r2, r2, #4
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007efc:	e00a      	b.n	8007f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	4908      	ldr	r1, [pc, #32]	; (8007f24 <__NVIC_SetPriority+0x50>)
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	3b04      	subs	r3, #4
 8007f0c:	0112      	lsls	r2, r2, #4
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	440b      	add	r3, r1
 8007f12:	761a      	strb	r2, [r3, #24]
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	e000e100 	.word	0xe000e100
 8007f24:	e000ed00 	.word	0xe000ed00

08007f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b089      	sub	sp, #36	; 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f1c3 0307 	rsb	r3, r3, #7
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	bf28      	it	cs
 8007f46:	2304      	movcs	r3, #4
 8007f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d902      	bls.n	8007f58 <NVIC_EncodePriority+0x30>
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3b03      	subs	r3, #3
 8007f56:	e000      	b.n	8007f5a <NVIC_EncodePriority+0x32>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43da      	mvns	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	401a      	ands	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f70:	f04f 31ff 	mov.w	r1, #4294967295
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	43d9      	mvns	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f80:	4313      	orrs	r3, r2
         );
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3724      	adds	r7, #36	; 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fa0:	d301      	bcc.n	8007fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e00f      	b.n	8007fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	; (8007fd0 <SysTick_Config+0x40>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fae:	210f      	movs	r1, #15
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	f7ff ff8e 	bl	8007ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fb8:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <SysTick_Config+0x40>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fbe:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <SysTick_Config+0x40>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010

08007fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff ff29 	bl	8007e34 <__NVIC_SetPriorityGrouping>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ffc:	f7ff ff3e 	bl	8007e7c <__NVIC_GetPriorityGrouping>
 8008000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f7ff ff8e 	bl	8007f28 <NVIC_EncodePriority>
 800800c:	4602      	mov	r2, r0
 800800e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff ff5d 	bl	8007ed4 <__NVIC_SetPriority>
}
 800801a:	bf00      	nop
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	4603      	mov	r3, r0
 800802a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800802c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff ff31 	bl	8007e98 <__NVIC_EnableIRQ>
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff ffa2 	bl	8007f90 <SysTick_Config>
 800804c:	4603      	mov	r3, r0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008064:	f7ff fac4 	bl	80075f0 <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e099      	b.n	80081a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008094:	e00f      	b.n	80080b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008096:	f7ff faab 	bl	80075f0 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d908      	bls.n	80080b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2203      	movs	r2, #3
 80080ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e078      	b.n	80081a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e8      	bne.n	8008096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4b38      	ldr	r3, [pc, #224]	; (80081b0 <HAL_DMA_Init+0x158>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	4313      	orrs	r3, r2
 8008106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	2b04      	cmp	r3, #4
 800810e:	d107      	bne.n	8008120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	4313      	orrs	r3, r2
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f023 0307 	bic.w	r3, r3, #7
 8008136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	2b04      	cmp	r3, #4
 8008148:	d117      	bne.n	800817a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00e      	beq.n	800817a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fa6f 	bl	8008640 <DMA_CheckFifoParam>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2240      	movs	r2, #64	; 0x40
 800816c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008176:	2301      	movs	r3, #1
 8008178:	e016      	b.n	80081a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa26 	bl	80085d4 <DMA_CalcBaseAndBitshift>
 8008188:	4603      	mov	r3, r0
 800818a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008190:	223f      	movs	r2, #63	; 0x3f
 8008192:	409a      	lsls	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	f010803f 	.word	0xf010803f

080081b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_DMA_Start_IT+0x26>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e040      	b.n	800825c <HAL_DMA_Start_IT+0xa8>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d12f      	bne.n	800824e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2202      	movs	r2, #2
 80081f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f9b8 	bl	8008578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820c:	223f      	movs	r2, #63	; 0x3f
 800820e:	409a      	lsls	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0216 	orr.w	r2, r2, #22
 8008222:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0208 	orr.w	r2, r2, #8
 800823a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	e005      	b.n	800825a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008256:	2302      	movs	r3, #2
 8008258:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008270:	4b92      	ldr	r3, [pc, #584]	; (80084bc <HAL_DMA_IRQHandler+0x258>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a92      	ldr	r2, [pc, #584]	; (80084c0 <HAL_DMA_IRQHandler+0x25c>)
 8008276:	fba2 2303 	umull	r2, r3, r2, r3
 800827a:	0a9b      	lsrs	r3, r3, #10
 800827c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828e:	2208      	movs	r2, #8
 8008290:	409a      	lsls	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01a      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d013      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0204 	bic.w	r2, r2, #4
 80082b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082bc:	2208      	movs	r2, #8
 80082be:	409a      	lsls	r2, r3
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c8:	f043 0201 	orr.w	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d4:	2201      	movs	r2, #1
 80082d6:	409a      	lsls	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d012      	beq.n	8008306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f2:	2201      	movs	r2, #1
 80082f4:	409a      	lsls	r2, r3
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fe:	f043 0202 	orr.w	r2, r3, #2
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830a:	2204      	movs	r2, #4
 800830c:	409a      	lsls	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4013      	ands	r3, r2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d012      	beq.n	800833c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008328:	2204      	movs	r2, #4
 800832a:	409a      	lsls	r2, r3
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008334:	f043 0204 	orr.w	r2, r3, #4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008340:	2210      	movs	r2, #16
 8008342:	409a      	lsls	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4013      	ands	r3, r2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d043      	beq.n	80083d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0308 	and.w	r3, r3, #8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d03c      	beq.n	80083d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835e:	2210      	movs	r2, #16
 8008360:	409a      	lsls	r2, r3
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d018      	beq.n	80083a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d108      	bne.n	8008394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d024      	beq.n	80083d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
 8008392:	e01f      	b.n	80083d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01b      	beq.n	80083d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
 80083a4:	e016      	b.n	80083d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d107      	bne.n	80083c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0208 	bic.w	r2, r2, #8
 80083c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	2220      	movs	r2, #32
 80083da:	409a      	lsls	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4013      	ands	r3, r2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 808e 	beq.w	8008502 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 8086 	beq.w	8008502 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fa:	2220      	movs	r2, #32
 80083fc:	409a      	lsls	r2, r3
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b05      	cmp	r3, #5
 800840c:	d136      	bne.n	800847c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0216 	bic.w	r2, r2, #22
 800841c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	695a      	ldr	r2, [r3, #20]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800842c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d103      	bne.n	800843e <HAL_DMA_IRQHandler+0x1da>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843a:	2b00      	cmp	r3, #0
 800843c:	d007      	beq.n	800844e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0208 	bic.w	r2, r2, #8
 800844c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008452:	223f      	movs	r2, #63	; 0x3f
 8008454:	409a      	lsls	r2, r3
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846e:	2b00      	cmp	r3, #0
 8008470:	d07d      	beq.n	800856e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
        }
        return;
 800847a:	e078      	b.n	800856e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d01c      	beq.n	80084c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d108      	bne.n	80084aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849c:	2b00      	cmp	r3, #0
 800849e:	d030      	beq.n	8008502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
 80084a8:	e02b      	b.n	8008502 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d027      	beq.n	8008502 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
 80084ba:	e022      	b.n	8008502 <HAL_DMA_IRQHandler+0x29e>
 80084bc:	2000003c 	.word	0x2000003c
 80084c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10f      	bne.n	80084f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0210 	bic.w	r2, r2, #16
 80084e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008506:	2b00      	cmp	r3, #0
 8008508:	d032      	beq.n	8008570 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d022      	beq.n	800855c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2205      	movs	r2, #5
 800851a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0201 	bic.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	3301      	adds	r3, #1
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	429a      	cmp	r2, r3
 8008538:	d307      	bcc.n	800854a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f2      	bne.n	800852e <HAL_DMA_IRQHandler+0x2ca>
 8008548:	e000      	b.n	800854c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800854a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
 800856c:	e000      	b.n	8008570 <HAL_DMA_IRQHandler+0x30c>
        return;
 800856e:	bf00      	nop
    }
  }
}
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop

08008578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d108      	bne.n	80085b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80085b6:	e007      	b.n	80085c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	60da      	str	r2, [r3, #12]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	3b10      	subs	r3, #16
 80085e4:	4a14      	ldr	r2, [pc, #80]	; (8008638 <DMA_CalcBaseAndBitshift+0x64>)
 80085e6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ea:	091b      	lsrs	r3, r3, #4
 80085ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085ee:	4a13      	ldr	r2, [pc, #76]	; (800863c <DMA_CalcBaseAndBitshift+0x68>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d909      	bls.n	8008616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	659a      	str	r2, [r3, #88]	; 0x58
 8008614:	e007      	b.n	8008626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	aaaaaaab 	.word	0xaaaaaaab
 800863c:	08012288 	.word	0x08012288

08008640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d11f      	bne.n	800869a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b03      	cmp	r3, #3
 800865e:	d855      	bhi.n	800870c <DMA_CheckFifoParam+0xcc>
 8008660:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <DMA_CheckFifoParam+0x28>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	08008679 	.word	0x08008679
 800866c:	0800868b 	.word	0x0800868b
 8008670:	08008679 	.word	0x08008679
 8008674:	0800870d 	.word	0x0800870d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d045      	beq.n	8008710 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008688:	e042      	b.n	8008710 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008692:	d13f      	bne.n	8008714 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008698:	e03c      	b.n	8008714 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a2:	d121      	bne.n	80086e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d836      	bhi.n	8008718 <DMA_CheckFifoParam+0xd8>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <DMA_CheckFifoParam+0x70>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086c7 	.word	0x080086c7
 80086b8:	080086c1 	.word	0x080086c1
 80086bc:	080086d9 	.word	0x080086d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
      break;
 80086c4:	e02f      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d024      	beq.n	800871c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086d6:	e021      	b.n	800871c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086e0:	d11e      	bne.n	8008720 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80086e6:	e01b      	b.n	8008720 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d902      	bls.n	80086f4 <DMA_CheckFifoParam+0xb4>
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d003      	beq.n	80086fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80086f2:	e018      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
      break;
 80086f8:	e015      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00e      	beq.n	8008724 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	73fb      	strb	r3, [r7, #15]
      break;
 800870a:	e00b      	b.n	8008724 <DMA_CheckFifoParam+0xe4>
      break;
 800870c:	bf00      	nop
 800870e:	e00a      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      break;
 8008710:	bf00      	nop
 8008712:	e008      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      break;
 8008714:	bf00      	nop
 8008716:	e006      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      break;
 8008718:	bf00      	nop
 800871a:	e004      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      break;
 800871c:	bf00      	nop
 800871e:	e002      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      break;   
 8008720:	bf00      	nop
 8008722:	e000      	b.n	8008726 <DMA_CheckFifoParam+0xe6>
      break;
 8008724:	bf00      	nop
    }
  } 
  
  return status; 
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <HAL_FLASH_Unlock+0x38>)
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	da0b      	bge.n	800875e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <HAL_FLASH_Unlock+0x38>)
 8008748:	4a09      	ldr	r2, [pc, #36]	; (8008770 <HAL_FLASH_Unlock+0x3c>)
 800874a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <HAL_FLASH_Unlock+0x38>)
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <HAL_FLASH_Unlock+0x40>)
 8008750:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <HAL_FLASH_Unlock+0x38>)
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	da01      	bge.n	800875e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800875e:	79fb      	ldrb	r3, [r7, #7]
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40023c00 	.word	0x40023c00
 8008770:	45670123 	.word	0x45670123
 8008774:	cdef89ab 	.word	0xcdef89ab

08008778 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <HAL_FLASH_Lock+0x1c>)
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4a04      	ldr	r2, [pc, #16]	; (8008794 <HAL_FLASH_Lock+0x1c>)
 8008782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008786:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	40023c00 	.word	0x40023c00

08008798 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80087a4:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <FLASH_WaitForLastOperation+0x78>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80087aa:	f7fe ff21 	bl	80075f0 <HAL_GetTick>
 80087ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80087b0:	e010      	b.n	80087d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b8:	d00c      	beq.n	80087d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <FLASH_WaitForLastOperation+0x38>
 80087c0:	f7fe ff16 	bl	80075f0 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d201      	bcs.n	80087d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e019      	b.n	8008808 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80087d4:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <FLASH_WaitForLastOperation+0x7c>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e8      	bne.n	80087b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80087e0:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <FLASH_WaitForLastOperation+0x7c>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <FLASH_WaitForLastOperation+0x7c>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80087f2:	4b08      	ldr	r3, [pc, #32]	; (8008814 <FLASH_WaitForLastOperation+0x7c>)
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80087fe:	f000 f80b 	bl	8008818 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
  
}  
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	2001d71c 	.word	0x2001d71c
 8008814:	40023c00 	.word	0x40023c00

08008818 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800881c:	4b27      	ldr	r3, [pc, #156]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008828:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	f043 0310 	orr.w	r3, r3, #16
 8008830:	4a23      	ldr	r2, [pc, #140]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 8008832:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008834:	4b21      	ldr	r3, [pc, #132]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 8008836:	2210      	movs	r2, #16
 8008838:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800883a:	4b20      	ldr	r3, [pc, #128]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008846:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f043 0308 	orr.w	r3, r3, #8
 800884e:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 8008850:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008852:	4b1a      	ldr	r3, [pc, #104]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 8008854:	2220      	movs	r2, #32
 8008856:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008858:	4b18      	ldr	r3, [pc, #96]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f043 0304 	orr.w	r3, r3, #4
 800886c:	4a14      	ldr	r2, [pc, #80]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 800886e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008870:	4b12      	ldr	r3, [pc, #72]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 8008872:	2240      	movs	r2, #64	; 0x40
 8008874:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008876:	4b11      	ldr	r3, [pc, #68]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887e:	2b00      	cmp	r3, #0
 8008880:	d008      	beq.n	8008894 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008882:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f043 0302 	orr.w	r3, r3, #2
 800888a:	4a0d      	ldr	r2, [pc, #52]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 800888c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 8008890:	2280      	movs	r2, #128	; 0x80
 8008892:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f043 0320 	orr.w	r3, r3, #32
 80088a8:	4a05      	ldr	r2, [pc, #20]	; (80088c0 <FLASH_SetErrorCode+0xa8>)
 80088aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <FLASH_SetErrorCode+0xa4>)
 80088ae:	2202      	movs	r2, #2
 80088b0:	60da      	str	r2, [r3, #12]
  }
}
 80088b2:	bf00      	nop
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40023c00 	.word	0x40023c00
 80088c0:	2001d71c 	.word	0x2001d71c

080088c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80088d6:	4b31      	ldr	r3, [pc, #196]	; (800899c <HAL_FLASHEx_Erase+0xd8>)
 80088d8:	7e1b      	ldrb	r3, [r3, #24]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_FLASHEx_Erase+0x1e>
 80088de:	2302      	movs	r3, #2
 80088e0:	e058      	b.n	8008994 <HAL_FLASHEx_Erase+0xd0>
 80088e2:	4b2e      	ldr	r3, [pc, #184]	; (800899c <HAL_FLASHEx_Erase+0xd8>)
 80088e4:	2201      	movs	r2, #1
 80088e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80088e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80088ec:	f7ff ff54 	bl	8008798 <FLASH_WaitForLastOperation>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d148      	bne.n	800898c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d115      	bne.n	8008936 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f000 f844 	bl	80089a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800891c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008920:	f7ff ff3a 	bl	8008798 <FLASH_WaitForLastOperation>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8008928:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <HAL_FLASHEx_Erase+0xdc>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <HAL_FLASHEx_Erase+0xdc>)
 800892e:	f023 0304 	bic.w	r3, r3, #4
 8008932:	6113      	str	r3, [r2, #16]
 8008934:	e028      	b.n	8008988 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	60bb      	str	r3, [r7, #8]
 800893c:	e01c      	b.n	8008978 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	4619      	mov	r1, r3
 8008946:	68b8      	ldr	r0, [r7, #8]
 8008948:	f000 f850 	bl	80089ec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800894c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008950:	f7ff ff22 	bl	8008798 <FLASH_WaitForLastOperation>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8008958:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <HAL_FLASHEx_Erase+0xdc>)
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	4a10      	ldr	r2, [pc, #64]	; (80089a0 <HAL_FLASHEx_Erase+0xdc>)
 800895e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8008962:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	601a      	str	r2, [r3, #0]
          break;
 8008970:	e00a      	b.n	8008988 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3301      	adds	r3, #1
 8008976:	60bb      	str	r3, [r7, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	4413      	add	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	d3da      	bcc.n	800893e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8008988:	f000 f878 	bl	8008a7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800898c:	4b03      	ldr	r3, [pc, #12]	; (800899c <HAL_FLASHEx_Erase+0xd8>)
 800898e:	2200      	movs	r2, #0
 8008990:	761a      	strb	r2, [r3, #24]

  return status;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	2001d71c 	.word	0x2001d71c
 80089a0:	40023c00 	.word	0x40023c00

080089a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <FLASH_MassErase+0x44>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	4a0c      	ldr	r2, [pc, #48]	; (80089e8 <FLASH_MassErase+0x44>)
 80089b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <FLASH_MassErase+0x44>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <FLASH_MassErase+0x44>)
 80089c2:	f043 0304 	orr.w	r3, r3, #4
 80089c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <FLASH_MassErase+0x44>)
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	4313      	orrs	r3, r2
 80089d2:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <FLASH_MassErase+0x44>)
 80089d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d8:	6113      	str	r3, [r2, #16]
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40023c00 	.word	0x40023c00

080089ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e010      	b.n	8008a2a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008a08:	78fb      	ldrb	r3, [r7, #3]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d103      	bne.n	8008a16 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e009      	b.n	8008a2a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d103      	bne.n	8008a24 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e002      	b.n	8008a2a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008a24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a28:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	4a12      	ldr	r2, [pc, #72]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	490f      	ldr	r1, [pc, #60]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a50:	691a      	ldr	r2, [r3, #16]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	4a07      	ldr	r2, [pc, #28]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a5a:	f043 0302 	orr.w	r3, r3, #2
 8008a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008a60:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	4a04      	ldr	r2, [pc, #16]	; (8008a78 <FLASH_Erase_Sector+0x8c>)
 8008a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a6a:	6113      	str	r3, [r2, #16]
}
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	40023c00 	.word	0x40023c00

08008a7c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8008a80:	4b20      	ldr	r3, [pc, #128]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d017      	beq.n	8008abc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a1c      	ldr	r2, [pc, #112]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a96:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008a98:	4b1a      	ldr	r3, [pc, #104]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a19      	ldr	r2, [pc, #100]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a16      	ldr	r2, [pc, #88]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ab0:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a13      	ldr	r2, [pc, #76]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aba:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d017      	beq.n	8008af8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a0d      	ldr	r2, [pc, #52]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ada:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a07      	ldr	r2, [pc, #28]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a04      	ldr	r2, [pc, #16]	; (8008b04 <FLASH_FlushCaches+0x88>)
 8008af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008af6:	6013      	str	r3, [r2, #0]
  }
}
 8008af8:	bf00      	nop
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	40023c00 	.word	0x40023c00

08008b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61fb      	str	r3, [r7, #28]
 8008b22:	e16b      	b.n	8008dfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b24:	2201      	movs	r2, #1
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4013      	ands	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	f040 815a 	bne.w	8008df6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d00b      	beq.n	8008b62 <HAL_GPIO_Init+0x5a>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d007      	beq.n	8008b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b56:	2b11      	cmp	r3, #17
 8008b58:	d003      	beq.n	8008b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2b12      	cmp	r3, #18
 8008b60:	d130      	bne.n	8008bc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	43db      	mvns	r3, r3
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	4013      	ands	r3, r2
 8008b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b98:	2201      	movs	r2, #1
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	091b      	lsrs	r3, r3, #4
 8008bae:	f003 0201 	and.w	r2, r3, #1
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	2203      	movs	r2, #3
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	fa02 f303 	lsl.w	r3, r2, r3
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d003      	beq.n	8008c04 <HAL_GPIO_Init+0xfc>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b12      	cmp	r3, #18
 8008c02:	d123      	bne.n	8008c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	08da      	lsrs	r2, r3, #3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3208      	adds	r2, #8
 8008c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	220f      	movs	r2, #15
 8008c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c20:	43db      	mvns	r3, r3
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	4013      	ands	r3, r2
 8008c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	fa02 f303 	lsl.w	r3, r2, r3
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	08da      	lsrs	r2, r3, #3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3208      	adds	r2, #8
 8008c46:	69b9      	ldr	r1, [r7, #24]
 8008c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	2203      	movs	r2, #3
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4013      	ands	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f003 0203 	and.w	r2, r3, #3
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80b4 	beq.w	8008df6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	4b5f      	ldr	r3, [pc, #380]	; (8008e10 <HAL_GPIO_Init+0x308>)
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	4a5e      	ldr	r2, [pc, #376]	; (8008e10 <HAL_GPIO_Init+0x308>)
 8008c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c9e:	4b5c      	ldr	r3, [pc, #368]	; (8008e10 <HAL_GPIO_Init+0x308>)
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008caa:	4a5a      	ldr	r2, [pc, #360]	; (8008e14 <HAL_GPIO_Init+0x30c>)
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	089b      	lsrs	r3, r3, #2
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	220f      	movs	r2, #15
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a51      	ldr	r2, [pc, #324]	; (8008e18 <HAL_GPIO_Init+0x310>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d02b      	beq.n	8008d2e <HAL_GPIO_Init+0x226>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a50      	ldr	r2, [pc, #320]	; (8008e1c <HAL_GPIO_Init+0x314>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d025      	beq.n	8008d2a <HAL_GPIO_Init+0x222>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a4f      	ldr	r2, [pc, #316]	; (8008e20 <HAL_GPIO_Init+0x318>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d01f      	beq.n	8008d26 <HAL_GPIO_Init+0x21e>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a4e      	ldr	r2, [pc, #312]	; (8008e24 <HAL_GPIO_Init+0x31c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d019      	beq.n	8008d22 <HAL_GPIO_Init+0x21a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a4d      	ldr	r2, [pc, #308]	; (8008e28 <HAL_GPIO_Init+0x320>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <HAL_GPIO_Init+0x216>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a4c      	ldr	r2, [pc, #304]	; (8008e2c <HAL_GPIO_Init+0x324>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00d      	beq.n	8008d1a <HAL_GPIO_Init+0x212>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a4b      	ldr	r2, [pc, #300]	; (8008e30 <HAL_GPIO_Init+0x328>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d007      	beq.n	8008d16 <HAL_GPIO_Init+0x20e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a4a      	ldr	r2, [pc, #296]	; (8008e34 <HAL_GPIO_Init+0x32c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d101      	bne.n	8008d12 <HAL_GPIO_Init+0x20a>
 8008d0e:	2307      	movs	r3, #7
 8008d10:	e00e      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d12:	2308      	movs	r3, #8
 8008d14:	e00c      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d16:	2306      	movs	r3, #6
 8008d18:	e00a      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d1a:	2305      	movs	r3, #5
 8008d1c:	e008      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d1e:	2304      	movs	r3, #4
 8008d20:	e006      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d22:	2303      	movs	r3, #3
 8008d24:	e004      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e002      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <HAL_GPIO_Init+0x228>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	f002 0203 	and.w	r2, r2, #3
 8008d36:	0092      	lsls	r2, r2, #2
 8008d38:	4093      	lsls	r3, r2
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d40:	4934      	ldr	r1, [pc, #208]	; (8008e14 <HAL_GPIO_Init+0x30c>)
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	089b      	lsrs	r3, r3, #2
 8008d46:	3302      	adds	r3, #2
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d4e:	4b3a      	ldr	r3, [pc, #232]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	43db      	mvns	r3, r3
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d72:	4a31      	ldr	r2, [pc, #196]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008d78:	4b2f      	ldr	r3, [pc, #188]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	43db      	mvns	r3, r3
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	4013      	ands	r3, r2
 8008d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d9c:	4a26      	ldr	r2, [pc, #152]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008da2:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	43db      	mvns	r3, r3
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	4013      	ands	r3, r2
 8008db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008dc6:	4a1c      	ldr	r2, [pc, #112]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008dcc:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	43db      	mvns	r3, r3
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008df0:	4a11      	ldr	r2, [pc, #68]	; (8008e38 <HAL_GPIO_Init+0x330>)
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2b0f      	cmp	r3, #15
 8008e00:	f67f ae90 	bls.w	8008b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e04:	bf00      	nop
 8008e06:	3724      	adds	r7, #36	; 0x24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40023800 	.word	0x40023800
 8008e14:	40013800 	.word	0x40013800
 8008e18:	40020000 	.word	0x40020000
 8008e1c:	40020400 	.word	0x40020400
 8008e20:	40020800 	.word	0x40020800
 8008e24:	40020c00 	.word	0x40020c00
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	40021400 	.word	0x40021400
 8008e30:	40021800 	.word	0x40021800
 8008e34:	40021c00 	.word	0x40021c00
 8008e38:	40013c00 	.word	0x40013c00

08008e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	887b      	ldrh	r3, [r7, #2]
 8008e4e:	4013      	ands	r3, r2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e54:	2301      	movs	r3, #1
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e001      	b.n	8008e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e7c:	787b      	ldrb	r3, [r7, #1]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e82:	887a      	ldrh	r2, [r7, #2]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e88:	e003      	b.n	8008e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e8a:	887b      	ldrh	r3, [r7, #2]
 8008e8c:	041a      	lsls	r2, r3, #16
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	619a      	str	r2, [r3, #24]
}
 8008e92:	bf00      	nop
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e11f      	b.n	80090f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fd ff96 	bl	8006df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2224      	movs	r2, #36	; 0x24
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0201 	bic.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f04:	f000 fd18 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 8008f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	4a7b      	ldr	r2, [pc, #492]	; (80090fc <HAL_I2C_Init+0x25c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d807      	bhi.n	8008f24 <HAL_I2C_Init+0x84>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4a7a      	ldr	r2, [pc, #488]	; (8009100 <HAL_I2C_Init+0x260>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	bf94      	ite	ls
 8008f1c:	2301      	movls	r3, #1
 8008f1e:	2300      	movhi	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e006      	b.n	8008f32 <HAL_I2C_Init+0x92>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4a77      	ldr	r2, [pc, #476]	; (8009104 <HAL_I2C_Init+0x264>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	bf94      	ite	ls
 8008f2c:	2301      	movls	r3, #1
 8008f2e:	2300      	movhi	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e0db      	b.n	80090f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	4a72      	ldr	r2, [pc, #456]	; (8009108 <HAL_I2C_Init+0x268>)
 8008f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f42:	0c9b      	lsrs	r3, r3, #18
 8008f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a64      	ldr	r2, [pc, #400]	; (80090fc <HAL_I2C_Init+0x25c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d802      	bhi.n	8008f74 <HAL_I2C_Init+0xd4>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3301      	adds	r3, #1
 8008f72:	e009      	b.n	8008f88 <HAL_I2C_Init+0xe8>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	4a63      	ldr	r2, [pc, #396]	; (800910c <HAL_I2C_Init+0x26c>)
 8008f80:	fba2 2303 	umull	r2, r3, r2, r3
 8008f84:	099b      	lsrs	r3, r3, #6
 8008f86:	3301      	adds	r3, #1
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6812      	ldr	r2, [r2, #0]
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	4956      	ldr	r1, [pc, #344]	; (80090fc <HAL_I2C_Init+0x25c>)
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	d80d      	bhi.n	8008fc4 <HAL_I2C_Init+0x124>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	1e59      	subs	r1, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	bf38      	it	cc
 8008fc0:	2304      	movcc	r3, #4
 8008fc2:	e04f      	b.n	8009064 <HAL_I2C_Init+0x1c4>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d111      	bne.n	8008ff0 <HAL_I2C_Init+0x150>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	1e58      	subs	r0, r3, #1
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6859      	ldr	r1, [r3, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	440b      	add	r3, r1
 8008fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fde:	3301      	adds	r3, #1
 8008fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf0c      	ite	eq
 8008fe8:	2301      	moveq	r3, #1
 8008fea:	2300      	movne	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	e012      	b.n	8009016 <HAL_I2C_Init+0x176>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	1e58      	subs	r0, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6859      	ldr	r1, [r3, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	0099      	lsls	r1, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	fbb0 f3f3 	udiv	r3, r0, r3
 8009006:	3301      	adds	r3, #1
 8009008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800900c:	2b00      	cmp	r3, #0
 800900e:	bf0c      	ite	eq
 8009010:	2301      	moveq	r3, #1
 8009012:	2300      	movne	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_I2C_Init+0x17e>
 800901a:	2301      	movs	r3, #1
 800901c:	e022      	b.n	8009064 <HAL_I2C_Init+0x1c4>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10e      	bne.n	8009044 <HAL_I2C_Init+0x1a4>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	1e58      	subs	r0, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6859      	ldr	r1, [r3, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	440b      	add	r3, r1
 8009034:	fbb0 f3f3 	udiv	r3, r0, r3
 8009038:	3301      	adds	r3, #1
 800903a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800903e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009042:	e00f      	b.n	8009064 <HAL_I2C_Init+0x1c4>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	1e58      	subs	r0, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6859      	ldr	r1, [r3, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	0099      	lsls	r1, r3, #2
 8009054:	440b      	add	r3, r1
 8009056:	fbb0 f3f3 	udiv	r3, r0, r3
 800905a:	3301      	adds	r3, #1
 800905c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	6809      	ldr	r1, [r1, #0]
 8009068:	4313      	orrs	r3, r2
 800906a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6911      	ldr	r1, [r2, #16]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68d2      	ldr	r2, [r2, #12]
 800909e:	4311      	orrs	r1, r2
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	6812      	ldr	r2, [r2, #0]
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695a      	ldr	r2, [r3, #20]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	000186a0 	.word	0x000186a0
 8009100:	001e847f 	.word	0x001e847f
 8009104:	003d08ff 	.word	0x003d08ff
 8009108:	431bde83 	.word	0x431bde83
 800910c:	10624dd3 	.word	0x10624dd3

08009110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e25b      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d075      	beq.n	800921a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800912e:	4ba3      	ldr	r3, [pc, #652]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 030c 	and.w	r3, r3, #12
 8009136:	2b04      	cmp	r3, #4
 8009138:	d00c      	beq.n	8009154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800913a:	4ba0      	ldr	r3, [pc, #640]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009142:	2b08      	cmp	r3, #8
 8009144:	d112      	bne.n	800916c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009146:	4b9d      	ldr	r3, [pc, #628]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800914e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009152:	d10b      	bne.n	800916c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009154:	4b99      	ldr	r3, [pc, #612]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d05b      	beq.n	8009218 <HAL_RCC_OscConfig+0x108>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d157      	bne.n	8009218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e236      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009174:	d106      	bne.n	8009184 <HAL_RCC_OscConfig+0x74>
 8009176:	4b91      	ldr	r3, [pc, #580]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a90      	ldr	r2, [pc, #576]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 800917c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	e01d      	b.n	80091c0 <HAL_RCC_OscConfig+0xb0>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800918c:	d10c      	bne.n	80091a8 <HAL_RCC_OscConfig+0x98>
 800918e:	4b8b      	ldr	r3, [pc, #556]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a8a      	ldr	r2, [pc, #552]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	4b88      	ldr	r3, [pc, #544]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a87      	ldr	r2, [pc, #540]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80091a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	e00b      	b.n	80091c0 <HAL_RCC_OscConfig+0xb0>
 80091a8:	4b84      	ldr	r3, [pc, #528]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a83      	ldr	r2, [pc, #524]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80091ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	4b81      	ldr	r3, [pc, #516]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a80      	ldr	r2, [pc, #512]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80091ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d013      	beq.n	80091f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c8:	f7fe fa12 	bl	80075f0 <HAL_GetTick>
 80091cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ce:	e008      	b.n	80091e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091d0:	f7fe fa0e 	bl	80075f0 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b64      	cmp	r3, #100	; 0x64
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e1fb      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091e2:	4b76      	ldr	r3, [pc, #472]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0f0      	beq.n	80091d0 <HAL_RCC_OscConfig+0xc0>
 80091ee:	e014      	b.n	800921a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091f0:	f7fe f9fe 	bl	80075f0 <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091f6:	e008      	b.n	800920a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091f8:	f7fe f9fa 	bl	80075f0 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b64      	cmp	r3, #100	; 0x64
 8009204:	d901      	bls.n	800920a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e1e7      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800920a:	4b6c      	ldr	r3, [pc, #432]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1f0      	bne.n	80091f8 <HAL_RCC_OscConfig+0xe8>
 8009216:	e000      	b.n	800921a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d063      	beq.n	80092ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009226:	4b65      	ldr	r3, [pc, #404]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 030c 	and.w	r3, r3, #12
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009232:	4b62      	ldr	r3, [pc, #392]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800923a:	2b08      	cmp	r3, #8
 800923c:	d11c      	bne.n	8009278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800923e:	4b5f      	ldr	r3, [pc, #380]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d116      	bne.n	8009278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800924a:	4b5c      	ldr	r3, [pc, #368]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_RCC_OscConfig+0x152>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d001      	beq.n	8009262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e1bb      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009262:	4b56      	ldr	r3, [pc, #344]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4952      	ldr	r1, [pc, #328]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009272:	4313      	orrs	r3, r2
 8009274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009276:	e03a      	b.n	80092ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d020      	beq.n	80092c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009280:	4b4f      	ldr	r3, [pc, #316]	; (80093c0 <HAL_RCC_OscConfig+0x2b0>)
 8009282:	2201      	movs	r2, #1
 8009284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009286:	f7fe f9b3 	bl	80075f0 <HAL_GetTick>
 800928a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800928c:	e008      	b.n	80092a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800928e:	f7fe f9af 	bl	80075f0 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e19c      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092a0:	4b46      	ldr	r3, [pc, #280]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0f0      	beq.n	800928e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ac:	4b43      	ldr	r3, [pc, #268]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4940      	ldr	r1, [pc, #256]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	600b      	str	r3, [r1, #0]
 80092c0:	e015      	b.n	80092ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092c2:	4b3f      	ldr	r3, [pc, #252]	; (80093c0 <HAL_RCC_OscConfig+0x2b0>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c8:	f7fe f992 	bl	80075f0 <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ce:	e008      	b.n	80092e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092d0:	f7fe f98e 	bl	80075f0 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e17b      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092e2:	4b36      	ldr	r3, [pc, #216]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1f0      	bne.n	80092d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d030      	beq.n	800935c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d016      	beq.n	8009330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009302:	4b30      	ldr	r3, [pc, #192]	; (80093c4 <HAL_RCC_OscConfig+0x2b4>)
 8009304:	2201      	movs	r2, #1
 8009306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009308:	f7fe f972 	bl	80075f0 <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009310:	f7fe f96e 	bl	80075f0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e15b      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009322:	4b26      	ldr	r3, [pc, #152]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0f0      	beq.n	8009310 <HAL_RCC_OscConfig+0x200>
 800932e:	e015      	b.n	800935c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009330:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <HAL_RCC_OscConfig+0x2b4>)
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009336:	f7fe f95b 	bl	80075f0 <HAL_GetTick>
 800933a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800933c:	e008      	b.n	8009350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800933e:	f7fe f957 	bl	80075f0 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	2b02      	cmp	r3, #2
 800934a:	d901      	bls.n	8009350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e144      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009350:	4b1a      	ldr	r3, [pc, #104]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1f0      	bne.n	800933e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80a0 	beq.w	80094aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10f      	bne.n	800939a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009382:	4a0e      	ldr	r2, [pc, #56]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 8009384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009388:	6413      	str	r3, [r2, #64]	; 0x40
 800938a:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <HAL_RCC_OscConfig+0x2ac>)
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009392:	60bb      	str	r3, [r7, #8]
 8009394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009396:	2301      	movs	r3, #1
 8009398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800939a:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <HAL_RCC_OscConfig+0x2b8>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d121      	bne.n	80093ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093a6:	4b08      	ldr	r3, [pc, #32]	; (80093c8 <HAL_RCC_OscConfig+0x2b8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a07      	ldr	r2, [pc, #28]	; (80093c8 <HAL_RCC_OscConfig+0x2b8>)
 80093ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093b2:	f7fe f91d 	bl	80075f0 <HAL_GetTick>
 80093b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b8:	e011      	b.n	80093de <HAL_RCC_OscConfig+0x2ce>
 80093ba:	bf00      	nop
 80093bc:	40023800 	.word	0x40023800
 80093c0:	42470000 	.word	0x42470000
 80093c4:	42470e80 	.word	0x42470e80
 80093c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093cc:	f7fe f910 	bl	80075f0 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e0fd      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093de:	4b81      	ldr	r3, [pc, #516]	; (80095e4 <HAL_RCC_OscConfig+0x4d4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0f0      	beq.n	80093cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d106      	bne.n	8009400 <HAL_RCC_OscConfig+0x2f0>
 80093f2:	4b7d      	ldr	r3, [pc, #500]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	4a7c      	ldr	r2, [pc, #496]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 80093f8:	f043 0301 	orr.w	r3, r3, #1
 80093fc:	6713      	str	r3, [r2, #112]	; 0x70
 80093fe:	e01c      	b.n	800943a <HAL_RCC_OscConfig+0x32a>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b05      	cmp	r3, #5
 8009406:	d10c      	bne.n	8009422 <HAL_RCC_OscConfig+0x312>
 8009408:	4b77      	ldr	r3, [pc, #476]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 800940a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940c:	4a76      	ldr	r2, [pc, #472]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 800940e:	f043 0304 	orr.w	r3, r3, #4
 8009412:	6713      	str	r3, [r2, #112]	; 0x70
 8009414:	4b74      	ldr	r3, [pc, #464]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009418:	4a73      	ldr	r2, [pc, #460]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6713      	str	r3, [r2, #112]	; 0x70
 8009420:	e00b      	b.n	800943a <HAL_RCC_OscConfig+0x32a>
 8009422:	4b71      	ldr	r3, [pc, #452]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	4a70      	ldr	r2, [pc, #448]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	6713      	str	r3, [r2, #112]	; 0x70
 800942e:	4b6e      	ldr	r3, [pc, #440]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	4a6d      	ldr	r2, [pc, #436]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009434:	f023 0304 	bic.w	r3, r3, #4
 8009438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d015      	beq.n	800946e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009442:	f7fe f8d5 	bl	80075f0 <HAL_GetTick>
 8009446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009448:	e00a      	b.n	8009460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800944a:	f7fe f8d1 	bl	80075f0 <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	f241 3288 	movw	r2, #5000	; 0x1388
 8009458:	4293      	cmp	r3, r2
 800945a:	d901      	bls.n	8009460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e0bc      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009460:	4b61      	ldr	r3, [pc, #388]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0ee      	beq.n	800944a <HAL_RCC_OscConfig+0x33a>
 800946c:	e014      	b.n	8009498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800946e:	f7fe f8bf 	bl	80075f0 <HAL_GetTick>
 8009472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009474:	e00a      	b.n	800948c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009476:	f7fe f8bb 	bl	80075f0 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	f241 3288 	movw	r2, #5000	; 0x1388
 8009484:	4293      	cmp	r3, r2
 8009486:	d901      	bls.n	800948c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e0a6      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800948c:	4b56      	ldr	r3, [pc, #344]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 800948e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1ee      	bne.n	8009476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d105      	bne.n	80094aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800949e:	4b52      	ldr	r3, [pc, #328]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	4a51      	ldr	r2, [pc, #324]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 80094a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8092 	beq.w	80095d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094b4:	4b4c      	ldr	r3, [pc, #304]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f003 030c 	and.w	r3, r3, #12
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d05c      	beq.n	800957a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d141      	bne.n	800954c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094c8:	4b48      	ldr	r3, [pc, #288]	; (80095ec <HAL_RCC_OscConfig+0x4dc>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094ce:	f7fe f88f 	bl	80075f0 <HAL_GetTick>
 80094d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094d4:	e008      	b.n	80094e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094d6:	f7fe f88b 	bl	80075f0 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d901      	bls.n	80094e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e078      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094e8:	4b3f      	ldr	r3, [pc, #252]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1f0      	bne.n	80094d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	019b      	lsls	r3, r3, #6
 8009504:	431a      	orrs	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	085b      	lsrs	r3, r3, #1
 800950c:	3b01      	subs	r3, #1
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	061b      	lsls	r3, r3, #24
 8009518:	4933      	ldr	r1, [pc, #204]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 800951a:	4313      	orrs	r3, r2
 800951c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800951e:	4b33      	ldr	r3, [pc, #204]	; (80095ec <HAL_RCC_OscConfig+0x4dc>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009524:	f7fe f864 	bl	80075f0 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800952c:	f7fe f860 	bl	80075f0 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e04d      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800953e:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x41c>
 800954a:	e045      	b.n	80095d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800954c:	4b27      	ldr	r3, [pc, #156]	; (80095ec <HAL_RCC_OscConfig+0x4dc>)
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009552:	f7fe f84d 	bl	80075f0 <HAL_GetTick>
 8009556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009558:	e008      	b.n	800956c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800955a:	f7fe f849 	bl	80075f0 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d901      	bls.n	800956c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e036      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f0      	bne.n	800955a <HAL_RCC_OscConfig+0x44a>
 8009578:	e02e      	b.n	80095d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e029      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009586:	4b18      	ldr	r3, [pc, #96]	; (80095e8 <HAL_RCC_OscConfig+0x4d8>)
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	429a      	cmp	r2, r3
 8009598:	d11c      	bne.n	80095d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d115      	bne.n	80095d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095ae:	4013      	ands	r3, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d10d      	bne.n	80095d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d106      	bne.n	80095d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d001      	beq.n	80095d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e000      	b.n	80095da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40007000 	.word	0x40007000
 80095e8:	40023800 	.word	0x40023800
 80095ec:	42470060 	.word	0x42470060

080095f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0cc      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009604:	4b68      	ldr	r3, [pc, #416]	; (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d90c      	bls.n	800962c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009612:	4b65      	ldr	r3, [pc, #404]	; (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800961a:	4b63      	ldr	r3, [pc, #396]	; (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d001      	beq.n	800962c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e0b8      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d020      	beq.n	800967a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009644:	4b59      	ldr	r3, [pc, #356]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	4a58      	ldr	r2, [pc, #352]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800964a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800964e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800965c:	4b53      	ldr	r3, [pc, #332]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4a52      	ldr	r2, [pc, #328]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009668:	4b50      	ldr	r3, [pc, #320]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	494d      	ldr	r1, [pc, #308]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009676:	4313      	orrs	r3, r2
 8009678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d044      	beq.n	8009710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d107      	bne.n	800969e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800968e:	4b47      	ldr	r3, [pc, #284]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d119      	bne.n	80096ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e07f      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d003      	beq.n	80096ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d107      	bne.n	80096be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096ae:	4b3f      	ldr	r3, [pc, #252]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e06f      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096be:	4b3b      	ldr	r3, [pc, #236]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e067      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096ce:	4b37      	ldr	r3, [pc, #220]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f023 0203 	bic.w	r2, r3, #3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	4934      	ldr	r1, [pc, #208]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096e0:	f7fd ff86 	bl	80075f0 <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e6:	e00a      	b.n	80096fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096e8:	f7fd ff82 	bl	80075f0 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e04f      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096fe:	4b2b      	ldr	r3, [pc, #172]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 020c 	and.w	r2, r3, #12
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	429a      	cmp	r2, r3
 800970e:	d1eb      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009710:	4b25      	ldr	r3, [pc, #148]	; (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d20c      	bcs.n	8009738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800971e:	4b22      	ldr	r3, [pc, #136]	; (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	b2d2      	uxtb	r2, r2
 8009724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009726:	4b20      	ldr	r3, [pc, #128]	; (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d001      	beq.n	8009738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e032      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009744:	4b19      	ldr	r3, [pc, #100]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	4916      	ldr	r1, [pc, #88]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009752:	4313      	orrs	r3, r2
 8009754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009762:	4b12      	ldr	r3, [pc, #72]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	490e      	ldr	r1, [pc, #56]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009772:	4313      	orrs	r3, r2
 8009774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009776:	f000 f821 	bl	80097bc <HAL_RCC_GetSysClockFreq>
 800977a:	4601      	mov	r1, r0
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	4a0a      	ldr	r2, [pc, #40]	; (80097b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009788:	5cd3      	ldrb	r3, [r2, r3]
 800978a:	fa21 f303 	lsr.w	r3, r1, r3
 800978e:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f7fd fee6 	bl	8007568 <HAL_InitTick>

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	40023c00 	.word	0x40023c00
 80097ac:	40023800 	.word	0x40023800
 80097b0:	08012270 	.word	0x08012270
 80097b4:	2000003c 	.word	0x2000003c
 80097b8:	20000040 	.word	0x20000040

080097bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	2300      	movs	r3, #0
 80097cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097d2:	4b50      	ldr	r3, [pc, #320]	; (8009914 <HAL_RCC_GetSysClockFreq+0x158>)
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f003 030c 	and.w	r3, r3, #12
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d007      	beq.n	80097ee <HAL_RCC_GetSysClockFreq+0x32>
 80097de:	2b08      	cmp	r3, #8
 80097e0:	d008      	beq.n	80097f4 <HAL_RCC_GetSysClockFreq+0x38>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 808d 	bne.w	8009902 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097e8:	4b4b      	ldr	r3, [pc, #300]	; (8009918 <HAL_RCC_GetSysClockFreq+0x15c>)
 80097ea:	60bb      	str	r3, [r7, #8]
       break;
 80097ec:	e08c      	b.n	8009908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097ee:	4b4b      	ldr	r3, [pc, #300]	; (800991c <HAL_RCC_GetSysClockFreq+0x160>)
 80097f0:	60bb      	str	r3, [r7, #8]
      break;
 80097f2:	e089      	b.n	8009908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097f4:	4b47      	ldr	r3, [pc, #284]	; (8009914 <HAL_RCC_GetSysClockFreq+0x158>)
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097fe:	4b45      	ldr	r3, [pc, #276]	; (8009914 <HAL_RCC_GetSysClockFreq+0x158>)
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d023      	beq.n	8009852 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800980a:	4b42      	ldr	r3, [pc, #264]	; (8009914 <HAL_RCC_GetSysClockFreq+0x158>)
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	099b      	lsrs	r3, r3, #6
 8009810:	f04f 0400 	mov.w	r4, #0
 8009814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009818:	f04f 0200 	mov.w	r2, #0
 800981c:	ea03 0501 	and.w	r5, r3, r1
 8009820:	ea04 0602 	and.w	r6, r4, r2
 8009824:	4a3d      	ldr	r2, [pc, #244]	; (800991c <HAL_RCC_GetSysClockFreq+0x160>)
 8009826:	fb02 f106 	mul.w	r1, r2, r6
 800982a:	2200      	movs	r2, #0
 800982c:	fb02 f205 	mul.w	r2, r2, r5
 8009830:	440a      	add	r2, r1
 8009832:	493a      	ldr	r1, [pc, #232]	; (800991c <HAL_RCC_GetSysClockFreq+0x160>)
 8009834:	fba5 0101 	umull	r0, r1, r5, r1
 8009838:	1853      	adds	r3, r2, r1
 800983a:	4619      	mov	r1, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f04f 0400 	mov.w	r4, #0
 8009842:	461a      	mov	r2, r3
 8009844:	4623      	mov	r3, r4
 8009846:	f7f7 fa1f 	bl	8000c88 <__aeabi_uldivmod>
 800984a:	4603      	mov	r3, r0
 800984c:	460c      	mov	r4, r1
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e049      	b.n	80098e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009852:	4b30      	ldr	r3, [pc, #192]	; (8009914 <HAL_RCC_GetSysClockFreq+0x158>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	f04f 0400 	mov.w	r4, #0
 800985c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	ea03 0501 	and.w	r5, r3, r1
 8009868:	ea04 0602 	and.w	r6, r4, r2
 800986c:	4629      	mov	r1, r5
 800986e:	4632      	mov	r2, r6
 8009870:	f04f 0300 	mov.w	r3, #0
 8009874:	f04f 0400 	mov.w	r4, #0
 8009878:	0154      	lsls	r4, r2, #5
 800987a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800987e:	014b      	lsls	r3, r1, #5
 8009880:	4619      	mov	r1, r3
 8009882:	4622      	mov	r2, r4
 8009884:	1b49      	subs	r1, r1, r5
 8009886:	eb62 0206 	sbc.w	r2, r2, r6
 800988a:	f04f 0300 	mov.w	r3, #0
 800988e:	f04f 0400 	mov.w	r4, #0
 8009892:	0194      	lsls	r4, r2, #6
 8009894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009898:	018b      	lsls	r3, r1, #6
 800989a:	1a5b      	subs	r3, r3, r1
 800989c:	eb64 0402 	sbc.w	r4, r4, r2
 80098a0:	f04f 0100 	mov.w	r1, #0
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	00e2      	lsls	r2, r4, #3
 80098aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80098ae:	00d9      	lsls	r1, r3, #3
 80098b0:	460b      	mov	r3, r1
 80098b2:	4614      	mov	r4, r2
 80098b4:	195b      	adds	r3, r3, r5
 80098b6:	eb44 0406 	adc.w	r4, r4, r6
 80098ba:	f04f 0100 	mov.w	r1, #0
 80098be:	f04f 0200 	mov.w	r2, #0
 80098c2:	02a2      	lsls	r2, r4, #10
 80098c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80098c8:	0299      	lsls	r1, r3, #10
 80098ca:	460b      	mov	r3, r1
 80098cc:	4614      	mov	r4, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	4621      	mov	r1, r4
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f04f 0400 	mov.w	r4, #0
 80098d8:	461a      	mov	r2, r3
 80098da:	4623      	mov	r3, r4
 80098dc:	f7f7 f9d4 	bl	8000c88 <__aeabi_uldivmod>
 80098e0:	4603      	mov	r3, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_RCC_GetSysClockFreq+0x158>)
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	0c1b      	lsrs	r3, r3, #16
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	3301      	adds	r3, #1
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fe:	60bb      	str	r3, [r7, #8]
      break;
 8009900:	e002      	b.n	8009908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009902:	4b05      	ldr	r3, [pc, #20]	; (8009918 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009904:	60bb      	str	r3, [r7, #8]
      break;
 8009906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009908:	68bb      	ldr	r3, [r7, #8]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009912:	bf00      	nop
 8009914:	40023800 	.word	0x40023800
 8009918:	00f42400 	.word	0x00f42400
 800991c:	00bebc20 	.word	0x00bebc20

08009920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009924:	4b03      	ldr	r3, [pc, #12]	; (8009934 <HAL_RCC_GetHCLKFreq+0x14>)
 8009926:	681b      	ldr	r3, [r3, #0]
}
 8009928:	4618      	mov	r0, r3
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	2000003c 	.word	0x2000003c

08009938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800993c:	f7ff fff0 	bl	8009920 <HAL_RCC_GetHCLKFreq>
 8009940:	4601      	mov	r1, r0
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	0a9b      	lsrs	r3, r3, #10
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	4a03      	ldr	r2, [pc, #12]	; (800995c <HAL_RCC_GetPCLK1Freq+0x24>)
 800994e:	5cd3      	ldrb	r3, [r2, r3]
 8009950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40023800 	.word	0x40023800
 800995c:	08012280 	.word	0x08012280

08009960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009964:	f7ff ffdc 	bl	8009920 <HAL_RCC_GetHCLKFreq>
 8009968:	4601      	mov	r1, r0
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	0b5b      	lsrs	r3, r3, #13
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	4a03      	ldr	r2, [pc, #12]	; (8009984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009976:	5cd3      	ldrb	r3, [r2, r3]
 8009978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800997c:	4618      	mov	r0, r3
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40023800 	.word	0x40023800
 8009984:	08012280 	.word	0x08012280

08009988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e056      	b.n	8009a48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d106      	bne.n	80099ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fd fa67 	bl	8006e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	ea42 0103 	orr.w	r1, r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	0c1b      	lsrs	r3, r3, #16
 8009a18:	f003 0104 	and.w	r1, r3, #4
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69da      	ldr	r2, [r3, #28]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <HAL_SPI_Transmit+0x22>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e11e      	b.n	8009cb0 <HAL_SPI_Transmit+0x260>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a7a:	f7fd fdb9 	bl	80075f0 <HAL_GetTick>
 8009a7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d002      	beq.n	8009a96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a90:	2302      	movs	r3, #2
 8009a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a94:	e103      	b.n	8009c9e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <HAL_SPI_Transmit+0x52>
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009aa6:	e0fa      	b.n	8009c9e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2203      	movs	r2, #3
 8009aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	88fa      	ldrh	r2, [r7, #6]
 8009ac0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	88fa      	ldrh	r2, [r7, #6]
 8009ac6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aee:	d107      	bne.n	8009b00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009afe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0a:	2b40      	cmp	r3, #64	; 0x40
 8009b0c:	d007      	beq.n	8009b1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d14b      	bne.n	8009bc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <HAL_SPI_Transmit+0xe6>
 8009b30:	8afb      	ldrh	r3, [r7, #22]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d13e      	bne.n	8009bb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3a:	881a      	ldrh	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	1c9a      	adds	r2, r3, #2
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b5a:	e02b      	b.n	8009bb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d112      	bne.n	8009b90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	881a      	ldrh	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	1c9a      	adds	r2, r3, #2
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	3b01      	subs	r3, #1
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b8e:	e011      	b.n	8009bb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b90:	f7fd fd2e 	bl	80075f0 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d803      	bhi.n	8009ba8 <HAL_SPI_Transmit+0x158>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d102      	bne.n	8009bae <HAL_SPI_Transmit+0x15e>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d102      	bne.n	8009bb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bb2:	e074      	b.n	8009c9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1ce      	bne.n	8009b5c <HAL_SPI_Transmit+0x10c>
 8009bbe:	e04c      	b.n	8009c5a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_SPI_Transmit+0x17e>
 8009bc8:	8afb      	ldrh	r3, [r7, #22]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d140      	bne.n	8009c50 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	7812      	ldrb	r2, [r2, #0]
 8009bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009bf4:	e02c      	b.n	8009c50 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d113      	bne.n	8009c2c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c2a:	e011      	b.n	8009c50 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c2c:	f7fd fce0 	bl	80075f0 <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d803      	bhi.n	8009c44 <HAL_SPI_Transmit+0x1f4>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c42:	d102      	bne.n	8009c4a <HAL_SPI_Transmit+0x1fa>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c4e:	e026      	b.n	8009c9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1cd      	bne.n	8009bf6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 fba4 	bl	800a3ac <SPI_EndRxTxTransaction>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c78:	2300      	movs	r3, #0
 8009c7a:	613b      	str	r3, [r7, #16]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	613b      	str	r3, [r7, #16]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	613b      	str	r3, [r7, #16]
 8009c8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	77fb      	strb	r3, [r7, #31]
 8009c9a:	e000      	b.n	8009c9e <HAL_SPI_Transmit+0x24e>
  }

error:
 8009c9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cd4:	d112      	bne.n	8009cfc <HAL_SPI_Receive+0x44>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10e      	bne.n	8009cfc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2204      	movs	r2, #4
 8009ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009ce6:	88fa      	ldrh	r2, [r7, #6]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 f8e9 	bl	8009eca <HAL_SPI_TransmitReceive>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	e0e2      	b.n	8009ec2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d101      	bne.n	8009d0a <HAL_SPI_Receive+0x52>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e0db      	b.n	8009ec2 <HAL_SPI_Receive+0x20a>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d12:	f7fd fc6d 	bl	80075f0 <HAL_GetTick>
 8009d16:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d002      	beq.n	8009d2a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009d24:	2302      	movs	r3, #2
 8009d26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d28:	e0c2      	b.n	8009eb0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <HAL_SPI_Receive+0x7e>
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d3a:	e0b9      	b.n	8009eb0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2204      	movs	r2, #4
 8009d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	88fa      	ldrh	r2, [r7, #6]
 8009d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	88fa      	ldrh	r2, [r7, #6]
 8009d5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d82:	d107      	bne.n	8009d94 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d007      	beq.n	8009db2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d162      	bne.n	8009e80 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009dba:	e02e      	b.n	8009e1a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d115      	bne.n	8009df6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f103 020c 	add.w	r2, r3, #12
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009df4:	e011      	b.n	8009e1a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009df6:	f7fd fbfb 	bl	80075f0 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d803      	bhi.n	8009e0e <HAL_SPI_Receive+0x156>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d102      	bne.n	8009e14 <HAL_SPI_Receive+0x15c>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d102      	bne.n	8009e1a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e18:	e04a      	b.n	8009eb0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1cb      	bne.n	8009dbc <HAL_SPI_Receive+0x104>
 8009e24:	e031      	b.n	8009e8a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d113      	bne.n	8009e5c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	b292      	uxth	r2, r2
 8009e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	1c9a      	adds	r2, r3, #2
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e5a:	e011      	b.n	8009e80 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e5c:	f7fd fbc8 	bl	80075f0 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d803      	bhi.n	8009e74 <HAL_SPI_Receive+0x1bc>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d102      	bne.n	8009e7a <HAL_SPI_Receive+0x1c2>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e7e:	e017      	b.n	8009eb0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1cd      	bne.n	8009e26 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fa27 	bl	800a2e2 <SPI_EndRxTransaction>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75fb      	strb	r3, [r7, #23]
 8009eac:	e000      	b.n	8009eb0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08c      	sub	sp, #48	; 0x30
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_SPI_TransmitReceive+0x26>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e18a      	b.n	800a206 <HAL_SPI_TransmitReceive+0x33c>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ef8:	f7fd fb7a 	bl	80075f0 <HAL_GetTick>
 8009efc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009f0e:	887b      	ldrh	r3, [r7, #2]
 8009f10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d00f      	beq.n	8009f3a <HAL_SPI_TransmitReceive+0x70>
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f20:	d107      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x68>
 8009f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d003      	beq.n	8009f3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009f32:	2302      	movs	r3, #2
 8009f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f38:	e15b      	b.n	800a1f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x82>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x82>
 8009f46:	887b      	ldrh	r3, [r7, #2]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d103      	bne.n	8009f54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f52:	e14e      	b.n	800a1f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d003      	beq.n	8009f68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2205      	movs	r2, #5
 8009f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	887a      	ldrh	r2, [r7, #2]
 8009f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	887a      	ldrh	r2, [r7, #2]
 8009f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	887a      	ldrh	r2, [r7, #2]
 8009f8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	887a      	ldrh	r2, [r7, #2]
 8009f90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d007      	beq.n	8009fbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fc4:	d178      	bne.n	800a0b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <HAL_SPI_TransmitReceive+0x10a>
 8009fce:	8b7b      	ldrh	r3, [r7, #26]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d166      	bne.n	800a0a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	881a      	ldrh	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe4:	1c9a      	adds	r2, r3, #2
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff8:	e053      	b.n	800a0a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b02      	cmp	r3, #2
 800a006:	d11b      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x176>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <HAL_SPI_TransmitReceive+0x176>
 800a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a014:	2b01      	cmp	r3, #1
 800a016:	d113      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01c:	881a      	ldrh	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	1c9a      	adds	r2, r3, #2
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b01      	subs	r3, #1
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d119      	bne.n	800a082 <HAL_SPI_TransmitReceive+0x1b8>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a052:	b29b      	uxth	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d014      	beq.n	800a082 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a062:	b292      	uxth	r2, r2
 800a064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06a:	1c9a      	adds	r2, r3, #2
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a074:	b29b      	uxth	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a07e:	2301      	movs	r3, #1
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a082:	f7fd fab5 	bl	80075f0 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08e:	429a      	cmp	r2, r3
 800a090:	d807      	bhi.n	800a0a2 <HAL_SPI_TransmitReceive+0x1d8>
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d003      	beq.n	800a0a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a0a0:	e0a7      	b.n	800a1f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1a6      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x130>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1a1      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x130>
 800a0b6:	e07c      	b.n	800a1b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <HAL_SPI_TransmitReceive+0x1fc>
 800a0c0:	8b7b      	ldrh	r3, [r7, #26]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d16b      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	7812      	ldrb	r2, [r2, #0]
 800a0d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0ec:	e057      	b.n	800a19e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d11c      	bne.n	800a136 <HAL_SPI_TransmitReceive+0x26c>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d017      	beq.n	800a136 <HAL_SPI_TransmitReceive+0x26c>
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d114      	bne.n	800a136 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	330c      	adds	r3, #12
 800a116:	7812      	ldrb	r2, [r2, #0]
 800a118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a128:	b29b      	uxth	r3, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b01      	cmp	r3, #1
 800a142:	d119      	bne.n	800a178 <HAL_SPI_TransmitReceive+0x2ae>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d014      	beq.n	800a178 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68da      	ldr	r2, [r3, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a174:	2301      	movs	r3, #1
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a178:	f7fd fa3a 	bl	80075f0 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a184:	429a      	cmp	r2, r3
 800a186:	d803      	bhi.n	800a190 <HAL_SPI_TransmitReceive+0x2c6>
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18e:	d102      	bne.n	800a196 <HAL_SPI_TransmitReceive+0x2cc>
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a19c:	e029      	b.n	800a1f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1a2      	bne.n	800a0ee <HAL_SPI_TransmitReceive+0x224>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d19d      	bne.n	800a0ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 f8f8 	bl	800a3ac <SPI_EndRxTxTransaction>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a1ce:	e010      	b.n	800a1f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1d8:	2300      	movs	r3, #0
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	e000      	b.n	800a1f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a1f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a206:	4618      	mov	r0, r3
 800a208:	3730      	adds	r7, #48	; 0x30
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a21e:	e04c      	b.n	800a2ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d048      	beq.n	800a2ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a228:	f7fd f9e2 	bl	80075f0 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d902      	bls.n	800a23e <SPI_WaitFlagStateUntilTimeout+0x30>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d13d      	bne.n	800a2ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a24c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a256:	d111      	bne.n	800a27c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a260:	d004      	beq.n	800a26c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a26a:	d107      	bne.n	800a27c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a27a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a284:	d10f      	bne.n	800a2a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e00f      	b.n	800a2da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689a      	ldr	r2, [r3, #8]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	bf0c      	ite	eq
 800a2ca:	2301      	moveq	r3, #1
 800a2cc:	2300      	movne	r3, #0
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d1a3      	bne.n	800a220 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af02      	add	r7, sp, #8
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2f6:	d111      	bne.n	800a31c <SPI_EndRxTransaction+0x3a>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a300:	d004      	beq.n	800a30c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a30a:	d107      	bne.n	800a31c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a31a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a324:	d12a      	bne.n	800a37c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a32e:	d012      	beq.n	800a356 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2200      	movs	r2, #0
 800a338:	2180      	movs	r1, #128	; 0x80
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff ff67 	bl	800a20e <SPI_WaitFlagStateUntilTimeout>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d02d      	beq.n	800a3a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34a:	f043 0220 	orr.w	r2, r3, #32
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e026      	b.n	800a3a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	2101      	movs	r1, #1
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7ff ff54 	bl	800a20e <SPI_WaitFlagStateUntilTimeout>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01a      	beq.n	800a3a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a370:	f043 0220 	orr.w	r2, r3, #32
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e013      	b.n	800a3a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	2101      	movs	r1, #1
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff ff41 	bl	800a20e <SPI_WaitFlagStateUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d007      	beq.n	800a3a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a396:	f043 0220 	orr.w	r2, r3, #32
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e000      	b.n	800a3a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	; (800a428 <SPI_EndRxTxTransaction+0x7c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1b      	ldr	r2, [pc, #108]	; (800a42c <SPI_EndRxTxTransaction+0x80>)
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	0d5b      	lsrs	r3, r3, #21
 800a3c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3c8:	fb02 f303 	mul.w	r3, r2, r3
 800a3cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3d6:	d112      	bne.n	800a3fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2180      	movs	r1, #128	; 0x80
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7ff ff13 	bl	800a20e <SPI_WaitFlagStateUntilTimeout>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d016      	beq.n	800a41c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	f043 0220 	orr.w	r2, r3, #32
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e00f      	b.n	800a41e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	3b01      	subs	r3, #1
 800a408:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a414:	2b80      	cmp	r3, #128	; 0x80
 800a416:	d0f2      	beq.n	800a3fe <SPI_EndRxTxTransaction+0x52>
 800a418:	e000      	b.n	800a41c <SPI_EndRxTxTransaction+0x70>
        break;
 800a41a:	bf00      	nop
  }

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	2000003c 	.word	0x2000003c
 800a42c:	165e9f81 	.word	0x165e9f81

0800a430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e01d      	b.n	800a47e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7fc fe12 	bl	8007080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4619      	mov	r1, r3
 800a46e:	4610      	mov	r0, r2
 800a470:	f000 fb56 	bl	800ab20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68da      	ldr	r2, [r3, #12]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f042 0201 	orr.w	r2, r2, #1
 800a49c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b06      	cmp	r3, #6
 800a4ae:	d007      	beq.n	800a4c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0201 	orr.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b082      	sub	sp, #8
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e01d      	b.n	800a51c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7fc fd0f 	bl	8006f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3304      	adds	r3, #4
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	f000 fb07 	bl	800ab20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2201      	movs	r2, #1
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fd42 	bl	800afc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a15      	ldr	r2, [pc, #84]	; (800a598 <HAL_TIM_PWM_Start+0x74>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <HAL_TIM_PWM_Start+0x2c>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a14      	ldr	r2, [pc, #80]	; (800a59c <HAL_TIM_PWM_Start+0x78>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d101      	bne.n	800a554 <HAL_TIM_PWM_Start+0x30>
 800a550:	2301      	movs	r3, #1
 800a552:	e000      	b.n	800a556 <HAL_TIM_PWM_Start+0x32>
 800a554:	2300      	movs	r3, #0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b06      	cmp	r3, #6
 800a57a:	d007      	beq.n	800a58c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0201 	orr.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	40010000 	.word	0x40010000
 800a59c:	40010400 	.word	0x40010400

0800a5a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e083      	b.n	800a6bc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d106      	bne.n	800a5ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7fc fcdd 	bl	8006f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6812      	ldr	r2, [r2, #0]
 800a5e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5e4:	f023 0307 	bic.w	r3, r3, #7
 800a5e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f000 fa93 	bl	800ab20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4313      	orrs	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	021b      	lsls	r3, r3, #8
 800a632:	4313      	orrs	r3, r2
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a640:	f023 030c 	bic.w	r3, r3, #12
 800a644:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a64c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	021b      	lsls	r3, r3, #8
 800a65c:	4313      	orrs	r3, r2
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	011a      	lsls	r2, r3, #4
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	031b      	lsls	r3, r3, #12
 800a670:	4313      	orrs	r3, r2
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4313      	orrs	r3, r2
 800a676:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a67e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a686:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	4313      	orrs	r3, r2
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <HAL_TIM_Encoder_Start+0x16>
 800a6d4:	2b04      	cmp	r3, #4
 800a6d6:	d008      	beq.n	800a6ea <HAL_TIM_Encoder_Start+0x26>
 800a6d8:	e00f      	b.n	800a6fa <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fc6c 	bl	800afc0 <TIM_CCxChannelCmd>
      break;
 800a6e8:	e016      	b.n	800a718 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	2104      	movs	r1, #4
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fc64 	bl	800afc0 <TIM_CCxChannelCmd>
      break;
 800a6f8:	e00e      	b.n	800a718 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2201      	movs	r2, #1
 800a700:	2100      	movs	r1, #0
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fc5c 	bl	800afc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2201      	movs	r2, #1
 800a70e:	2104      	movs	r1, #4
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fc55 	bl	800afc0 <TIM_CCxChannelCmd>
      break;
 800a716:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f042 0201 	orr.w	r2, r2, #1
 800a726:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b02      	cmp	r3, #2
 800a746:	d122      	bne.n	800a78e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b02      	cmp	r3, #2
 800a754:	d11b      	bne.n	800a78e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f06f 0202 	mvn.w	r2, #2
 800a75e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	f003 0303 	and.w	r3, r3, #3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f9b5 	bl	800aae4 <HAL_TIM_IC_CaptureCallback>
 800a77a:	e005      	b.n	800a788 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f9a7 	bl	800aad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f9b8 	bl	800aaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d122      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d11b      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f06f 0204 	mvn.w	r2, #4
 800a7b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f98b 	bl	800aae4 <HAL_TIM_IC_CaptureCallback>
 800a7ce:	e005      	b.n	800a7dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f97d 	bl	800aad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f98e 	bl	800aaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b08      	cmp	r3, #8
 800a7ee:	d122      	bne.n	800a836 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b08      	cmp	r3, #8
 800a7fc:	d11b      	bne.n	800a836 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f06f 0208 	mvn.w	r2, #8
 800a806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2204      	movs	r2, #4
 800a80c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	f003 0303 	and.w	r3, r3, #3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f961 	bl	800aae4 <HAL_TIM_IC_CaptureCallback>
 800a822:	e005      	b.n	800a830 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f953 	bl	800aad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f964 	bl	800aaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f003 0310 	and.w	r3, r3, #16
 800a840:	2b10      	cmp	r3, #16
 800a842:	d122      	bne.n	800a88a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f003 0310 	and.w	r3, r3, #16
 800a84e:	2b10      	cmp	r3, #16
 800a850:	d11b      	bne.n	800a88a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f06f 0210 	mvn.w	r2, #16
 800a85a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2208      	movs	r2, #8
 800a860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f937 	bl	800aae4 <HAL_TIM_IC_CaptureCallback>
 800a876:	e005      	b.n	800a884 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f929 	bl	800aad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f93a 	bl	800aaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b01      	cmp	r3, #1
 800a896:	d10e      	bne.n	800a8b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d107      	bne.n	800a8b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f06f 0201 	mvn.w	r2, #1
 800a8ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7f9 fee1 	bl	8004678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c0:	2b80      	cmp	r3, #128	; 0x80
 800a8c2:	d10e      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ce:	2b80      	cmp	r3, #128	; 0x80
 800a8d0:	d107      	bne.n	800a8e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fc6d 	bl	800b1bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b40      	cmp	r3, #64	; 0x40
 800a8ee:	d10e      	bne.n	800a90e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fa:	2b40      	cmp	r3, #64	; 0x40
 800a8fc:	d107      	bne.n	800a90e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f8ff 	bl	800ab0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	f003 0320 	and.w	r3, r3, #32
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d10e      	bne.n	800a93a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b20      	cmp	r3, #32
 800a928:	d107      	bne.n	800a93a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f06f 0220 	mvn.w	r2, #32
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fc37 	bl	800b1a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a95a:	2302      	movs	r3, #2
 800a95c:	e0b4      	b.n	800aac8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2202      	movs	r2, #2
 800a96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b0c      	cmp	r3, #12
 800a972:	f200 809f 	bhi.w	800aab4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9b1 	.word	0x0800a9b1
 800a980:	0800aab5 	.word	0x0800aab5
 800a984:	0800aab5 	.word	0x0800aab5
 800a988:	0800aab5 	.word	0x0800aab5
 800a98c:	0800a9f1 	.word	0x0800a9f1
 800a990:	0800aab5 	.word	0x0800aab5
 800a994:	0800aab5 	.word	0x0800aab5
 800a998:	0800aab5 	.word	0x0800aab5
 800a99c:	0800aa33 	.word	0x0800aa33
 800a9a0:	0800aab5 	.word	0x0800aab5
 800a9a4:	0800aab5 	.word	0x0800aab5
 800a9a8:	0800aab5 	.word	0x0800aab5
 800a9ac:	0800aa73 	.word	0x0800aa73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f952 	bl	800ac60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699a      	ldr	r2, [r3, #24]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0208 	orr.w	r2, r2, #8
 800a9ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0204 	bic.w	r2, r2, #4
 800a9da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6999      	ldr	r1, [r3, #24]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	691a      	ldr	r2, [r3, #16]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	619a      	str	r2, [r3, #24]
      break;
 800a9ee:	e062      	b.n	800aab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68b9      	ldr	r1, [r7, #8]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f9a2 	bl	800ad40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699a      	ldr	r2, [r3, #24]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6999      	ldr	r1, [r3, #24]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	021a      	lsls	r2, r3, #8
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	619a      	str	r2, [r3, #24]
      break;
 800aa30:	e041      	b.n	800aab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68b9      	ldr	r1, [r7, #8]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 f9f7 	bl	800ae2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69da      	ldr	r2, [r3, #28]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0208 	orr.w	r2, r2, #8
 800aa4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	69da      	ldr	r2, [r3, #28]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f022 0204 	bic.w	r2, r2, #4
 800aa5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	69d9      	ldr	r1, [r3, #28]
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	61da      	str	r2, [r3, #28]
      break;
 800aa70:	e021      	b.n	800aab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fa4b 	bl	800af14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69da      	ldr	r2, [r3, #28]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69da      	ldr	r2, [r3, #28]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69d9      	ldr	r1, [r3, #28]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	021a      	lsls	r2, r3, #8
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	61da      	str	r2, [r3, #28]
      break;
 800aab2:	e000      	b.n	800aab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800aab4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a40      	ldr	r2, [pc, #256]	; (800ac34 <TIM_Base_SetConfig+0x114>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d013      	beq.n	800ab60 <TIM_Base_SetConfig+0x40>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab3e:	d00f      	beq.n	800ab60 <TIM_Base_SetConfig+0x40>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a3d      	ldr	r2, [pc, #244]	; (800ac38 <TIM_Base_SetConfig+0x118>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00b      	beq.n	800ab60 <TIM_Base_SetConfig+0x40>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3c      	ldr	r2, [pc, #240]	; (800ac3c <TIM_Base_SetConfig+0x11c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d007      	beq.n	800ab60 <TIM_Base_SetConfig+0x40>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a3b      	ldr	r2, [pc, #236]	; (800ac40 <TIM_Base_SetConfig+0x120>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d003      	beq.n	800ab60 <TIM_Base_SetConfig+0x40>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a3a      	ldr	r2, [pc, #232]	; (800ac44 <TIM_Base_SetConfig+0x124>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d108      	bne.n	800ab72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a2f      	ldr	r2, [pc, #188]	; (800ac34 <TIM_Base_SetConfig+0x114>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d02b      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab80:	d027      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a2c      	ldr	r2, [pc, #176]	; (800ac38 <TIM_Base_SetConfig+0x118>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d023      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a2b      	ldr	r2, [pc, #172]	; (800ac3c <TIM_Base_SetConfig+0x11c>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d01f      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a2a      	ldr	r2, [pc, #168]	; (800ac40 <TIM_Base_SetConfig+0x120>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d01b      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a29      	ldr	r2, [pc, #164]	; (800ac44 <TIM_Base_SetConfig+0x124>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d017      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a28      	ldr	r2, [pc, #160]	; (800ac48 <TIM_Base_SetConfig+0x128>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d013      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a27      	ldr	r2, [pc, #156]	; (800ac4c <TIM_Base_SetConfig+0x12c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d00f      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a26      	ldr	r2, [pc, #152]	; (800ac50 <TIM_Base_SetConfig+0x130>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00b      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a25      	ldr	r2, [pc, #148]	; (800ac54 <TIM_Base_SetConfig+0x134>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d007      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a24      	ldr	r2, [pc, #144]	; (800ac58 <TIM_Base_SetConfig+0x138>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d003      	beq.n	800abd2 <TIM_Base_SetConfig+0xb2>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a23      	ldr	r2, [pc, #140]	; (800ac5c <TIM_Base_SetConfig+0x13c>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d108      	bne.n	800abe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <TIM_Base_SetConfig+0x114>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d003      	beq.n	800ac18 <TIM_Base_SetConfig+0xf8>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a0c      	ldr	r2, [pc, #48]	; (800ac44 <TIM_Base_SetConfig+0x124>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d103      	bne.n	800ac20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	691a      	ldr	r2, [r3, #16]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	615a      	str	r2, [r3, #20]
}
 800ac26:	bf00      	nop
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40000400 	.word	0x40000400
 800ac3c:	40000800 	.word	0x40000800
 800ac40:	40000c00 	.word	0x40000c00
 800ac44:	40010400 	.word	0x40010400
 800ac48:	40014000 	.word	0x40014000
 800ac4c:	40014400 	.word	0x40014400
 800ac50:	40014800 	.word	0x40014800
 800ac54:	40001800 	.word	0x40001800
 800ac58:	40001c00 	.word	0x40001c00
 800ac5c:	40002000 	.word	0x40002000

0800ac60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	f023 0201 	bic.w	r2, r3, #1
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f023 0303 	bic.w	r3, r3, #3
 800ac96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f023 0302 	bic.w	r3, r3, #2
 800aca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a20      	ldr	r2, [pc, #128]	; (800ad38 <TIM_OC1_SetConfig+0xd8>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d003      	beq.n	800acc4 <TIM_OC1_SetConfig+0x64>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a1f      	ldr	r2, [pc, #124]	; (800ad3c <TIM_OC1_SetConfig+0xdc>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d10c      	bne.n	800acde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f023 0308 	bic.w	r3, r3, #8
 800acca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f023 0304 	bic.w	r3, r3, #4
 800acdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <TIM_OC1_SetConfig+0xd8>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d003      	beq.n	800acee <TIM_OC1_SetConfig+0x8e>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a14      	ldr	r2, [pc, #80]	; (800ad3c <TIM_OC1_SetConfig+0xdc>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d111      	bne.n	800ad12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	621a      	str	r2, [r3, #32]
}
 800ad2c:	bf00      	nop
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40010400 	.word	0x40010400

0800ad40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	f023 0210 	bic.w	r2, r3, #16
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f023 0320 	bic.w	r3, r3, #32
 800ad8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a22      	ldr	r2, [pc, #136]	; (800ae24 <TIM_OC2_SetConfig+0xe4>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d003      	beq.n	800ada8 <TIM_OC2_SetConfig+0x68>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a21      	ldr	r2, [pc, #132]	; (800ae28 <TIM_OC2_SetConfig+0xe8>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d10d      	bne.n	800adc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	4313      	orrs	r3, r2
 800adba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a17      	ldr	r2, [pc, #92]	; (800ae24 <TIM_OC2_SetConfig+0xe4>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d003      	beq.n	800add4 <TIM_OC2_SetConfig+0x94>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a16      	ldr	r2, [pc, #88]	; (800ae28 <TIM_OC2_SetConfig+0xe8>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d113      	bne.n	800adfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ade2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	621a      	str	r2, [r3, #32]
}
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	40010000 	.word	0x40010000
 800ae28:	40010400 	.word	0x40010400

0800ae2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	021b      	lsls	r3, r3, #8
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a21      	ldr	r2, [pc, #132]	; (800af0c <TIM_OC3_SetConfig+0xe0>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d003      	beq.n	800ae92 <TIM_OC3_SetConfig+0x66>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a20      	ldr	r2, [pc, #128]	; (800af10 <TIM_OC3_SetConfig+0xe4>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d10d      	bne.n	800aeae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a16      	ldr	r2, [pc, #88]	; (800af0c <TIM_OC3_SetConfig+0xe0>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_OC3_SetConfig+0x92>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a15      	ldr	r2, [pc, #84]	; (800af10 <TIM_OC3_SetConfig+0xe4>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d113      	bne.n	800aee6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	011b      	lsls	r3, r3, #4
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	621a      	str	r2, [r3, #32]
}
 800af00:	bf00      	nop
 800af02:	371c      	adds	r7, #28
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	40010000 	.word	0x40010000
 800af10:	40010400 	.word	0x40010400

0800af14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	021b      	lsls	r3, r3, #8
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	4313      	orrs	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	031b      	lsls	r3, r3, #12
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	4313      	orrs	r3, r2
 800af6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a12      	ldr	r2, [pc, #72]	; (800afb8 <TIM_OC4_SetConfig+0xa4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d003      	beq.n	800af7c <TIM_OC4_SetConfig+0x68>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a11      	ldr	r2, [pc, #68]	; (800afbc <TIM_OC4_SetConfig+0xa8>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d109      	bne.n	800af90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	019b      	lsls	r3, r3, #6
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	621a      	str	r2, [r3, #32]
}
 800afaa:	bf00      	nop
 800afac:	371c      	adds	r7, #28
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	40010000 	.word	0x40010000
 800afbc:	40010400 	.word	0x40010400

0800afc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f003 031f 	and.w	r3, r3, #31
 800afd2:	2201      	movs	r2, #1
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6a1a      	ldr	r2, [r3, #32]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	401a      	ands	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1a      	ldr	r2, [r3, #32]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 031f 	and.w	r3, r3, #31
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	fa01 f303 	lsl.w	r3, r1, r3
 800aff8:	431a      	orrs	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	621a      	str	r2, [r3, #32]
}
 800affe:	bf00      	nop
 800b000:	371c      	adds	r7, #28
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
	...

0800b00c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b020:	2302      	movs	r3, #2
 800b022:	e05a      	b.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2202      	movs	r2, #2
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b04a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a21      	ldr	r2, [pc, #132]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d022      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b070:	d01d      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a1d      	ldr	r2, [pc, #116]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d018      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d013      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00e      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d009      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d004      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a15      	ldr	r2, [pc, #84]	; (800b100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d10c      	bne.n	800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	40010000 	.word	0x40010000
 800b0ec:	40000400 	.word	0x40000400
 800b0f0:	40000800 	.word	0x40000800
 800b0f4:	40000c00 	.word	0x40000c00
 800b0f8:	40010400 	.word	0x40010400
 800b0fc:	40014000 	.word	0x40014000
 800b100:	40001800 	.word	0x40001800

0800b104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d101      	bne.n	800b120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b11c:	2302      	movs	r3, #2
 800b11e:	e03d      	b.n	800b19c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	4313      	orrs	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	4313      	orrs	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	695b      	ldr	r3, [r3, #20]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	69db      	ldr	r3, [r3, #28]
 800b186:	4313      	orrs	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e03f      	b.n	800b262 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7fb ffec 	bl	80071d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2224      	movs	r2, #36	; 0x24
 800b200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f90b 	bl	800b430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	691a      	ldr	r2, [r3, #16]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	695a      	ldr	r2, [r3, #20]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2220      	movs	r2, #32
 800b254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2220      	movs	r2, #32
 800b25c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b088      	sub	sp, #32
 800b26e:	af02      	add	r7, sp, #8
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	603b      	str	r3, [r7, #0]
 800b276:	4613      	mov	r3, r2
 800b278:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b20      	cmp	r3, #32
 800b288:	f040 8083 	bne.w	800b392 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d002      	beq.n	800b298 <HAL_UART_Transmit+0x2e>
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e07b      	b.n	800b394 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_UART_Transmit+0x40>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e074      	b.n	800b394 <HAL_UART_Transmit+0x12a>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2221      	movs	r2, #33	; 0x21
 800b2bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b2c0:	f7fc f996 	bl	80075f0 <HAL_GetTick>
 800b2c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	88fa      	ldrh	r2, [r7, #6]
 800b2ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	88fa      	ldrh	r2, [r7, #6]
 800b2d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b2da:	e042      	b.n	800b362 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f2:	d122      	bne.n	800b33a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2180      	movs	r1, #128	; 0x80
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f84c 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b30a:	2303      	movs	r3, #3
 800b30c:	e042      	b.n	800b394 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b320:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d103      	bne.n	800b332 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	3302      	adds	r3, #2
 800b32e:	60bb      	str	r3, [r7, #8]
 800b330:	e017      	b.n	800b362 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	3301      	adds	r3, #1
 800b336:	60bb      	str	r3, [r7, #8]
 800b338:	e013      	b.n	800b362 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2200      	movs	r2, #0
 800b342:	2180      	movs	r1, #128	; 0x80
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f829 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e01f      	b.n	800b394 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	1c5a      	adds	r2, r3, #1
 800b358:	60ba      	str	r2, [r7, #8]
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b366:	b29b      	uxth	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1b7      	bne.n	800b2dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2200      	movs	r2, #0
 800b374:	2140      	movs	r1, #64	; 0x40
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 f810 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e006      	b.n	800b394 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	e000      	b.n	800b394 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b392:	2302      	movs	r3, #2
  }
}
 800b394:	4618      	mov	r0, r3
 800b396:	3718      	adds	r7, #24
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ac:	e02c      	b.n	800b408 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d028      	beq.n	800b408 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <UART_WaitOnFlagUntilTimeout+0x30>
 800b3bc:	f7fc f918 	bl	80075f0 <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d21d      	bcs.n	800b408 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b3da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695a      	ldr	r2, [r3, #20]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f022 0201 	bic.w	r2, r2, #1
 800b3ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b404:	2303      	movs	r3, #3
 800b406:	e00f      	b.n	800b428 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4013      	ands	r3, r2
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	429a      	cmp	r2, r3
 800b416:	bf0c      	ite	eq
 800b418:	2301      	moveq	r3, #1
 800b41a:	2300      	movne	r3, #0
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	461a      	mov	r2, r3
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	429a      	cmp	r2, r3
 800b424:	d0c3      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	b085      	sub	sp, #20
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68da      	ldr	r2, [r3, #12]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	689a      	ldr	r2, [r3, #8]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	431a      	orrs	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b472:	f023 030c 	bic.w	r3, r3, #12
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6812      	ldr	r2, [r2, #0]
 800b47a:	68f9      	ldr	r1, [r7, #12]
 800b47c:	430b      	orrs	r3, r1
 800b47e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	699a      	ldr	r2, [r3, #24]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	430a      	orrs	r2, r1
 800b494:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b49e:	f040 818b 	bne.w	800b7b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4ac1      	ldr	r2, [pc, #772]	; (800b7ac <UART_SetConfig+0x37c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d005      	beq.n	800b4b8 <UART_SetConfig+0x88>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4abf      	ldr	r2, [pc, #764]	; (800b7b0 <UART_SetConfig+0x380>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	f040 80bd 	bne.w	800b632 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4b8:	f7fe fa52 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800b4bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	461d      	mov	r5, r3
 800b4c2:	f04f 0600 	mov.w	r6, #0
 800b4c6:	46a8      	mov	r8, r5
 800b4c8:	46b1      	mov	r9, r6
 800b4ca:	eb18 0308 	adds.w	r3, r8, r8
 800b4ce:	eb49 0409 	adc.w	r4, r9, r9
 800b4d2:	4698      	mov	r8, r3
 800b4d4:	46a1      	mov	r9, r4
 800b4d6:	eb18 0805 	adds.w	r8, r8, r5
 800b4da:	eb49 0906 	adc.w	r9, r9, r6
 800b4de:	f04f 0100 	mov.w	r1, #0
 800b4e2:	f04f 0200 	mov.w	r2, #0
 800b4e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b4ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b4ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b4f2:	4688      	mov	r8, r1
 800b4f4:	4691      	mov	r9, r2
 800b4f6:	eb18 0005 	adds.w	r0, r8, r5
 800b4fa:	eb49 0106 	adc.w	r1, r9, r6
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	461d      	mov	r5, r3
 800b504:	f04f 0600 	mov.w	r6, #0
 800b508:	196b      	adds	r3, r5, r5
 800b50a:	eb46 0406 	adc.w	r4, r6, r6
 800b50e:	461a      	mov	r2, r3
 800b510:	4623      	mov	r3, r4
 800b512:	f7f5 fbb9 	bl	8000c88 <__aeabi_uldivmod>
 800b516:	4603      	mov	r3, r0
 800b518:	460c      	mov	r4, r1
 800b51a:	461a      	mov	r2, r3
 800b51c:	4ba5      	ldr	r3, [pc, #660]	; (800b7b4 <UART_SetConfig+0x384>)
 800b51e:	fba3 2302 	umull	r2, r3, r3, r2
 800b522:	095b      	lsrs	r3, r3, #5
 800b524:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	461d      	mov	r5, r3
 800b52c:	f04f 0600 	mov.w	r6, #0
 800b530:	46a9      	mov	r9, r5
 800b532:	46b2      	mov	sl, r6
 800b534:	eb19 0309 	adds.w	r3, r9, r9
 800b538:	eb4a 040a 	adc.w	r4, sl, sl
 800b53c:	4699      	mov	r9, r3
 800b53e:	46a2      	mov	sl, r4
 800b540:	eb19 0905 	adds.w	r9, r9, r5
 800b544:	eb4a 0a06 	adc.w	sl, sl, r6
 800b548:	f04f 0100 	mov.w	r1, #0
 800b54c:	f04f 0200 	mov.w	r2, #0
 800b550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b55c:	4689      	mov	r9, r1
 800b55e:	4692      	mov	sl, r2
 800b560:	eb19 0005 	adds.w	r0, r9, r5
 800b564:	eb4a 0106 	adc.w	r1, sl, r6
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	461d      	mov	r5, r3
 800b56e:	f04f 0600 	mov.w	r6, #0
 800b572:	196b      	adds	r3, r5, r5
 800b574:	eb46 0406 	adc.w	r4, r6, r6
 800b578:	461a      	mov	r2, r3
 800b57a:	4623      	mov	r3, r4
 800b57c:	f7f5 fb84 	bl	8000c88 <__aeabi_uldivmod>
 800b580:	4603      	mov	r3, r0
 800b582:	460c      	mov	r4, r1
 800b584:	461a      	mov	r2, r3
 800b586:	4b8b      	ldr	r3, [pc, #556]	; (800b7b4 <UART_SetConfig+0x384>)
 800b588:	fba3 1302 	umull	r1, r3, r3, r2
 800b58c:	095b      	lsrs	r3, r3, #5
 800b58e:	2164      	movs	r1, #100	; 0x64
 800b590:	fb01 f303 	mul.w	r3, r1, r3
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	3332      	adds	r3, #50	; 0x32
 800b59a:	4a86      	ldr	r2, [pc, #536]	; (800b7b4 <UART_SetConfig+0x384>)
 800b59c:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a0:	095b      	lsrs	r3, r3, #5
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5a8:	4498      	add	r8, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	461d      	mov	r5, r3
 800b5ae:	f04f 0600 	mov.w	r6, #0
 800b5b2:	46a9      	mov	r9, r5
 800b5b4:	46b2      	mov	sl, r6
 800b5b6:	eb19 0309 	adds.w	r3, r9, r9
 800b5ba:	eb4a 040a 	adc.w	r4, sl, sl
 800b5be:	4699      	mov	r9, r3
 800b5c0:	46a2      	mov	sl, r4
 800b5c2:	eb19 0905 	adds.w	r9, r9, r5
 800b5c6:	eb4a 0a06 	adc.w	sl, sl, r6
 800b5ca:	f04f 0100 	mov.w	r1, #0
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5de:	4689      	mov	r9, r1
 800b5e0:	4692      	mov	sl, r2
 800b5e2:	eb19 0005 	adds.w	r0, r9, r5
 800b5e6:	eb4a 0106 	adc.w	r1, sl, r6
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	f04f 0600 	mov.w	r6, #0
 800b5f4:	196b      	adds	r3, r5, r5
 800b5f6:	eb46 0406 	adc.w	r4, r6, r6
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	f7f5 fb43 	bl	8000c88 <__aeabi_uldivmod>
 800b602:	4603      	mov	r3, r0
 800b604:	460c      	mov	r4, r1
 800b606:	461a      	mov	r2, r3
 800b608:	4b6a      	ldr	r3, [pc, #424]	; (800b7b4 <UART_SetConfig+0x384>)
 800b60a:	fba3 1302 	umull	r1, r3, r3, r2
 800b60e:	095b      	lsrs	r3, r3, #5
 800b610:	2164      	movs	r1, #100	; 0x64
 800b612:	fb01 f303 	mul.w	r3, r1, r3
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	3332      	adds	r3, #50	; 0x32
 800b61c:	4a65      	ldr	r2, [pc, #404]	; (800b7b4 <UART_SetConfig+0x384>)
 800b61e:	fba2 2303 	umull	r2, r3, r2, r3
 800b622:	095b      	lsrs	r3, r3, #5
 800b624:	f003 0207 	and.w	r2, r3, #7
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4442      	add	r2, r8
 800b62e:	609a      	str	r2, [r3, #8]
 800b630:	e26f      	b.n	800bb12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b632:	f7fe f981 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 800b636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	461d      	mov	r5, r3
 800b63c:	f04f 0600 	mov.w	r6, #0
 800b640:	46a8      	mov	r8, r5
 800b642:	46b1      	mov	r9, r6
 800b644:	eb18 0308 	adds.w	r3, r8, r8
 800b648:	eb49 0409 	adc.w	r4, r9, r9
 800b64c:	4698      	mov	r8, r3
 800b64e:	46a1      	mov	r9, r4
 800b650:	eb18 0805 	adds.w	r8, r8, r5
 800b654:	eb49 0906 	adc.w	r9, r9, r6
 800b658:	f04f 0100 	mov.w	r1, #0
 800b65c:	f04f 0200 	mov.w	r2, #0
 800b660:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b664:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b668:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b66c:	4688      	mov	r8, r1
 800b66e:	4691      	mov	r9, r2
 800b670:	eb18 0005 	adds.w	r0, r8, r5
 800b674:	eb49 0106 	adc.w	r1, r9, r6
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	461d      	mov	r5, r3
 800b67e:	f04f 0600 	mov.w	r6, #0
 800b682:	196b      	adds	r3, r5, r5
 800b684:	eb46 0406 	adc.w	r4, r6, r6
 800b688:	461a      	mov	r2, r3
 800b68a:	4623      	mov	r3, r4
 800b68c:	f7f5 fafc 	bl	8000c88 <__aeabi_uldivmod>
 800b690:	4603      	mov	r3, r0
 800b692:	460c      	mov	r4, r1
 800b694:	461a      	mov	r2, r3
 800b696:	4b47      	ldr	r3, [pc, #284]	; (800b7b4 <UART_SetConfig+0x384>)
 800b698:	fba3 2302 	umull	r2, r3, r3, r2
 800b69c:	095b      	lsrs	r3, r3, #5
 800b69e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	461d      	mov	r5, r3
 800b6a6:	f04f 0600 	mov.w	r6, #0
 800b6aa:	46a9      	mov	r9, r5
 800b6ac:	46b2      	mov	sl, r6
 800b6ae:	eb19 0309 	adds.w	r3, r9, r9
 800b6b2:	eb4a 040a 	adc.w	r4, sl, sl
 800b6b6:	4699      	mov	r9, r3
 800b6b8:	46a2      	mov	sl, r4
 800b6ba:	eb19 0905 	adds.w	r9, r9, r5
 800b6be:	eb4a 0a06 	adc.w	sl, sl, r6
 800b6c2:	f04f 0100 	mov.w	r1, #0
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6d6:	4689      	mov	r9, r1
 800b6d8:	4692      	mov	sl, r2
 800b6da:	eb19 0005 	adds.w	r0, r9, r5
 800b6de:	eb4a 0106 	adc.w	r1, sl, r6
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	461d      	mov	r5, r3
 800b6e8:	f04f 0600 	mov.w	r6, #0
 800b6ec:	196b      	adds	r3, r5, r5
 800b6ee:	eb46 0406 	adc.w	r4, r6, r6
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	4623      	mov	r3, r4
 800b6f6:	f7f5 fac7 	bl	8000c88 <__aeabi_uldivmod>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	461a      	mov	r2, r3
 800b700:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <UART_SetConfig+0x384>)
 800b702:	fba3 1302 	umull	r1, r3, r3, r2
 800b706:	095b      	lsrs	r3, r3, #5
 800b708:	2164      	movs	r1, #100	; 0x64
 800b70a:	fb01 f303 	mul.w	r3, r1, r3
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	3332      	adds	r3, #50	; 0x32
 800b714:	4a27      	ldr	r2, [pc, #156]	; (800b7b4 <UART_SetConfig+0x384>)
 800b716:	fba2 2303 	umull	r2, r3, r2, r3
 800b71a:	095b      	lsrs	r3, r3, #5
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b722:	4498      	add	r8, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	461d      	mov	r5, r3
 800b728:	f04f 0600 	mov.w	r6, #0
 800b72c:	46a9      	mov	r9, r5
 800b72e:	46b2      	mov	sl, r6
 800b730:	eb19 0309 	adds.w	r3, r9, r9
 800b734:	eb4a 040a 	adc.w	r4, sl, sl
 800b738:	4699      	mov	r9, r3
 800b73a:	46a2      	mov	sl, r4
 800b73c:	eb19 0905 	adds.w	r9, r9, r5
 800b740:	eb4a 0a06 	adc.w	sl, sl, r6
 800b744:	f04f 0100 	mov.w	r1, #0
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b758:	4689      	mov	r9, r1
 800b75a:	4692      	mov	sl, r2
 800b75c:	eb19 0005 	adds.w	r0, r9, r5
 800b760:	eb4a 0106 	adc.w	r1, sl, r6
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	461d      	mov	r5, r3
 800b76a:	f04f 0600 	mov.w	r6, #0
 800b76e:	196b      	adds	r3, r5, r5
 800b770:	eb46 0406 	adc.w	r4, r6, r6
 800b774:	461a      	mov	r2, r3
 800b776:	4623      	mov	r3, r4
 800b778:	f7f5 fa86 	bl	8000c88 <__aeabi_uldivmod>
 800b77c:	4603      	mov	r3, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	461a      	mov	r2, r3
 800b782:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <UART_SetConfig+0x384>)
 800b784:	fba3 1302 	umull	r1, r3, r3, r2
 800b788:	095b      	lsrs	r3, r3, #5
 800b78a:	2164      	movs	r1, #100	; 0x64
 800b78c:	fb01 f303 	mul.w	r3, r1, r3
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	3332      	adds	r3, #50	; 0x32
 800b796:	4a07      	ldr	r2, [pc, #28]	; (800b7b4 <UART_SetConfig+0x384>)
 800b798:	fba2 2303 	umull	r2, r3, r2, r3
 800b79c:	095b      	lsrs	r3, r3, #5
 800b79e:	f003 0207 	and.w	r2, r3, #7
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4442      	add	r2, r8
 800b7a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b7aa:	e1b2      	b.n	800bb12 <UART_SetConfig+0x6e2>
 800b7ac:	40011000 	.word	0x40011000
 800b7b0:	40011400 	.word	0x40011400
 800b7b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4ad7      	ldr	r2, [pc, #860]	; (800bb1c <UART_SetConfig+0x6ec>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d005      	beq.n	800b7ce <UART_SetConfig+0x39e>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4ad6      	ldr	r2, [pc, #856]	; (800bb20 <UART_SetConfig+0x6f0>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	f040 80d1 	bne.w	800b970 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b7ce:	f7fe f8c7 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800b7d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	469a      	mov	sl, r3
 800b7d8:	f04f 0b00 	mov.w	fp, #0
 800b7dc:	46d0      	mov	r8, sl
 800b7de:	46d9      	mov	r9, fp
 800b7e0:	eb18 0308 	adds.w	r3, r8, r8
 800b7e4:	eb49 0409 	adc.w	r4, r9, r9
 800b7e8:	4698      	mov	r8, r3
 800b7ea:	46a1      	mov	r9, r4
 800b7ec:	eb18 080a 	adds.w	r8, r8, sl
 800b7f0:	eb49 090b 	adc.w	r9, r9, fp
 800b7f4:	f04f 0100 	mov.w	r1, #0
 800b7f8:	f04f 0200 	mov.w	r2, #0
 800b7fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b800:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b804:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b808:	4688      	mov	r8, r1
 800b80a:	4691      	mov	r9, r2
 800b80c:	eb1a 0508 	adds.w	r5, sl, r8
 800b810:	eb4b 0609 	adc.w	r6, fp, r9
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	4619      	mov	r1, r3
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	f04f 0300 	mov.w	r3, #0
 800b822:	f04f 0400 	mov.w	r4, #0
 800b826:	0094      	lsls	r4, r2, #2
 800b828:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b82c:	008b      	lsls	r3, r1, #2
 800b82e:	461a      	mov	r2, r3
 800b830:	4623      	mov	r3, r4
 800b832:	4628      	mov	r0, r5
 800b834:	4631      	mov	r1, r6
 800b836:	f7f5 fa27 	bl	8000c88 <__aeabi_uldivmod>
 800b83a:	4603      	mov	r3, r0
 800b83c:	460c      	mov	r4, r1
 800b83e:	461a      	mov	r2, r3
 800b840:	4bb8      	ldr	r3, [pc, #736]	; (800bb24 <UART_SetConfig+0x6f4>)
 800b842:	fba3 2302 	umull	r2, r3, r3, r2
 800b846:	095b      	lsrs	r3, r3, #5
 800b848:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	469b      	mov	fp, r3
 800b850:	f04f 0c00 	mov.w	ip, #0
 800b854:	46d9      	mov	r9, fp
 800b856:	46e2      	mov	sl, ip
 800b858:	eb19 0309 	adds.w	r3, r9, r9
 800b85c:	eb4a 040a 	adc.w	r4, sl, sl
 800b860:	4699      	mov	r9, r3
 800b862:	46a2      	mov	sl, r4
 800b864:	eb19 090b 	adds.w	r9, r9, fp
 800b868:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b86c:	f04f 0100 	mov.w	r1, #0
 800b870:	f04f 0200 	mov.w	r2, #0
 800b874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b878:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b87c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b880:	4689      	mov	r9, r1
 800b882:	4692      	mov	sl, r2
 800b884:	eb1b 0509 	adds.w	r5, fp, r9
 800b888:	eb4c 060a 	adc.w	r6, ip, sl
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4619      	mov	r1, r3
 800b892:	f04f 0200 	mov.w	r2, #0
 800b896:	f04f 0300 	mov.w	r3, #0
 800b89a:	f04f 0400 	mov.w	r4, #0
 800b89e:	0094      	lsls	r4, r2, #2
 800b8a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b8a4:	008b      	lsls	r3, r1, #2
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4623      	mov	r3, r4
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	f7f5 f9eb 	bl	8000c88 <__aeabi_uldivmod>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	4b9a      	ldr	r3, [pc, #616]	; (800bb24 <UART_SetConfig+0x6f4>)
 800b8ba:	fba3 1302 	umull	r1, r3, r3, r2
 800b8be:	095b      	lsrs	r3, r3, #5
 800b8c0:	2164      	movs	r1, #100	; 0x64
 800b8c2:	fb01 f303 	mul.w	r3, r1, r3
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	011b      	lsls	r3, r3, #4
 800b8ca:	3332      	adds	r3, #50	; 0x32
 800b8cc:	4a95      	ldr	r2, [pc, #596]	; (800bb24 <UART_SetConfig+0x6f4>)
 800b8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d2:	095b      	lsrs	r3, r3, #5
 800b8d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8d8:	4498      	add	r8, r3
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	469b      	mov	fp, r3
 800b8de:	f04f 0c00 	mov.w	ip, #0
 800b8e2:	46d9      	mov	r9, fp
 800b8e4:	46e2      	mov	sl, ip
 800b8e6:	eb19 0309 	adds.w	r3, r9, r9
 800b8ea:	eb4a 040a 	adc.w	r4, sl, sl
 800b8ee:	4699      	mov	r9, r3
 800b8f0:	46a2      	mov	sl, r4
 800b8f2:	eb19 090b 	adds.w	r9, r9, fp
 800b8f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b8fa:	f04f 0100 	mov.w	r1, #0
 800b8fe:	f04f 0200 	mov.w	r2, #0
 800b902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b90a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b90e:	4689      	mov	r9, r1
 800b910:	4692      	mov	sl, r2
 800b912:	eb1b 0509 	adds.w	r5, fp, r9
 800b916:	eb4c 060a 	adc.w	r6, ip, sl
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	4619      	mov	r1, r3
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	f04f 0400 	mov.w	r4, #0
 800b92c:	0094      	lsls	r4, r2, #2
 800b92e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b932:	008b      	lsls	r3, r1, #2
 800b934:	461a      	mov	r2, r3
 800b936:	4623      	mov	r3, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	4631      	mov	r1, r6
 800b93c:	f7f5 f9a4 	bl	8000c88 <__aeabi_uldivmod>
 800b940:	4603      	mov	r3, r0
 800b942:	460c      	mov	r4, r1
 800b944:	461a      	mov	r2, r3
 800b946:	4b77      	ldr	r3, [pc, #476]	; (800bb24 <UART_SetConfig+0x6f4>)
 800b948:	fba3 1302 	umull	r1, r3, r3, r2
 800b94c:	095b      	lsrs	r3, r3, #5
 800b94e:	2164      	movs	r1, #100	; 0x64
 800b950:	fb01 f303 	mul.w	r3, r1, r3
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	3332      	adds	r3, #50	; 0x32
 800b95a:	4a72      	ldr	r2, [pc, #456]	; (800bb24 <UART_SetConfig+0x6f4>)
 800b95c:	fba2 2303 	umull	r2, r3, r2, r3
 800b960:	095b      	lsrs	r3, r3, #5
 800b962:	f003 020f 	and.w	r2, r3, #15
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4442      	add	r2, r8
 800b96c:	609a      	str	r2, [r3, #8]
 800b96e:	e0d0      	b.n	800bb12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b970:	f7fd ffe2 	bl	8009938 <HAL_RCC_GetPCLK1Freq>
 800b974:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	469a      	mov	sl, r3
 800b97a:	f04f 0b00 	mov.w	fp, #0
 800b97e:	46d0      	mov	r8, sl
 800b980:	46d9      	mov	r9, fp
 800b982:	eb18 0308 	adds.w	r3, r8, r8
 800b986:	eb49 0409 	adc.w	r4, r9, r9
 800b98a:	4698      	mov	r8, r3
 800b98c:	46a1      	mov	r9, r4
 800b98e:	eb18 080a 	adds.w	r8, r8, sl
 800b992:	eb49 090b 	adc.w	r9, r9, fp
 800b996:	f04f 0100 	mov.w	r1, #0
 800b99a:	f04f 0200 	mov.w	r2, #0
 800b99e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b9a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b9a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b9aa:	4688      	mov	r8, r1
 800b9ac:	4691      	mov	r9, r2
 800b9ae:	eb1a 0508 	adds.w	r5, sl, r8
 800b9b2:	eb4b 0609 	adc.w	r6, fp, r9
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	f04f 0300 	mov.w	r3, #0
 800b9c4:	f04f 0400 	mov.w	r4, #0
 800b9c8:	0094      	lsls	r4, r2, #2
 800b9ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b9ce:	008b      	lsls	r3, r1, #2
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4623      	mov	r3, r4
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	f7f5 f956 	bl	8000c88 <__aeabi_uldivmod>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4b50      	ldr	r3, [pc, #320]	; (800bb24 <UART_SetConfig+0x6f4>)
 800b9e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b9e8:	095b      	lsrs	r3, r3, #5
 800b9ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	469b      	mov	fp, r3
 800b9f2:	f04f 0c00 	mov.w	ip, #0
 800b9f6:	46d9      	mov	r9, fp
 800b9f8:	46e2      	mov	sl, ip
 800b9fa:	eb19 0309 	adds.w	r3, r9, r9
 800b9fe:	eb4a 040a 	adc.w	r4, sl, sl
 800ba02:	4699      	mov	r9, r3
 800ba04:	46a2      	mov	sl, r4
 800ba06:	eb19 090b 	adds.w	r9, r9, fp
 800ba0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba0e:	f04f 0100 	mov.w	r1, #0
 800ba12:	f04f 0200 	mov.w	r2, #0
 800ba16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba22:	4689      	mov	r9, r1
 800ba24:	4692      	mov	sl, r2
 800ba26:	eb1b 0509 	adds.w	r5, fp, r9
 800ba2a:	eb4c 060a 	adc.w	r6, ip, sl
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	4619      	mov	r1, r3
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	f04f 0300 	mov.w	r3, #0
 800ba3c:	f04f 0400 	mov.w	r4, #0
 800ba40:	0094      	lsls	r4, r2, #2
 800ba42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ba46:	008b      	lsls	r3, r1, #2
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4623      	mov	r3, r4
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	4631      	mov	r1, r6
 800ba50:	f7f5 f91a 	bl	8000c88 <__aeabi_uldivmod>
 800ba54:	4603      	mov	r3, r0
 800ba56:	460c      	mov	r4, r1
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4b32      	ldr	r3, [pc, #200]	; (800bb24 <UART_SetConfig+0x6f4>)
 800ba5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba60:	095b      	lsrs	r3, r3, #5
 800ba62:	2164      	movs	r1, #100	; 0x64
 800ba64:	fb01 f303 	mul.w	r3, r1, r3
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	3332      	adds	r3, #50	; 0x32
 800ba6e:	4a2d      	ldr	r2, [pc, #180]	; (800bb24 <UART_SetConfig+0x6f4>)
 800ba70:	fba2 2303 	umull	r2, r3, r2, r3
 800ba74:	095b      	lsrs	r3, r3, #5
 800ba76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba7a:	4498      	add	r8, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	469b      	mov	fp, r3
 800ba80:	f04f 0c00 	mov.w	ip, #0
 800ba84:	46d9      	mov	r9, fp
 800ba86:	46e2      	mov	sl, ip
 800ba88:	eb19 0309 	adds.w	r3, r9, r9
 800ba8c:	eb4a 040a 	adc.w	r4, sl, sl
 800ba90:	4699      	mov	r9, r3
 800ba92:	46a2      	mov	sl, r4
 800ba94:	eb19 090b 	adds.w	r9, r9, fp
 800ba98:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba9c:	f04f 0100 	mov.w	r1, #0
 800baa0:	f04f 0200 	mov.w	r2, #0
 800baa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800baac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bab0:	4689      	mov	r9, r1
 800bab2:	4692      	mov	sl, r2
 800bab4:	eb1b 0509 	adds.w	r5, fp, r9
 800bab8:	eb4c 060a 	adc.w	r6, ip, sl
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	4619      	mov	r1, r3
 800bac2:	f04f 0200 	mov.w	r2, #0
 800bac6:	f04f 0300 	mov.w	r3, #0
 800baca:	f04f 0400 	mov.w	r4, #0
 800bace:	0094      	lsls	r4, r2, #2
 800bad0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bad4:	008b      	lsls	r3, r1, #2
 800bad6:	461a      	mov	r2, r3
 800bad8:	4623      	mov	r3, r4
 800bada:	4628      	mov	r0, r5
 800badc:	4631      	mov	r1, r6
 800bade:	f7f5 f8d3 	bl	8000c88 <__aeabi_uldivmod>
 800bae2:	4603      	mov	r3, r0
 800bae4:	460c      	mov	r4, r1
 800bae6:	461a      	mov	r2, r3
 800bae8:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <UART_SetConfig+0x6f4>)
 800baea:	fba3 1302 	umull	r1, r3, r3, r2
 800baee:	095b      	lsrs	r3, r3, #5
 800baf0:	2164      	movs	r1, #100	; 0x64
 800baf2:	fb01 f303 	mul.w	r3, r1, r3
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	011b      	lsls	r3, r3, #4
 800bafa:	3332      	adds	r3, #50	; 0x32
 800bafc:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <UART_SetConfig+0x6f4>)
 800bafe:	fba2 2303 	umull	r2, r3, r2, r3
 800bb02:	095b      	lsrs	r3, r3, #5
 800bb04:	f003 020f 	and.w	r2, r3, #15
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4442      	add	r2, r8
 800bb0e:	609a      	str	r2, [r3, #8]
}
 800bb10:	e7ff      	b.n	800bb12 <UART_SetConfig+0x6e2>
 800bb12:	bf00      	nop
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	40011000 	.word	0x40011000
 800bb20:	40011400 	.word	0x40011400
 800bb24:	51eb851f 	.word	0x51eb851f

0800bb28 <cos>:
 800bb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb2a:	ec51 0b10 	vmov	r0, r1, d0
 800bb2e:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <cos+0x80>)
 800bb30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb34:	4293      	cmp	r3, r2
 800bb36:	dc06      	bgt.n	800bb46 <cos+0x1e>
 800bb38:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800bba0 <cos+0x78>
 800bb3c:	f000 fe10 	bl	800c760 <__kernel_cos>
 800bb40:	ec51 0b10 	vmov	r0, r1, d0
 800bb44:	e007      	b.n	800bb56 <cos+0x2e>
 800bb46:	4a19      	ldr	r2, [pc, #100]	; (800bbac <cos+0x84>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	dd09      	ble.n	800bb60 <cos+0x38>
 800bb4c:	ee10 2a10 	vmov	r2, s0
 800bb50:	460b      	mov	r3, r1
 800bb52:	f7f4 fb99 	bl	8000288 <__aeabi_dsub>
 800bb56:	ec41 0b10 	vmov	d0, r0, r1
 800bb5a:	b005      	add	sp, #20
 800bb5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb60:	4668      	mov	r0, sp
 800bb62:	f000 fa2d 	bl	800bfc0 <__ieee754_rem_pio2>
 800bb66:	f000 0003 	and.w	r0, r0, #3
 800bb6a:	2801      	cmp	r0, #1
 800bb6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb70:	ed9d 0b00 	vldr	d0, [sp]
 800bb74:	d007      	beq.n	800bb86 <cos+0x5e>
 800bb76:	2802      	cmp	r0, #2
 800bb78:	d00e      	beq.n	800bb98 <cos+0x70>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d0de      	beq.n	800bb3c <cos+0x14>
 800bb7e:	2001      	movs	r0, #1
 800bb80:	f001 f9f6 	bl	800cf70 <__kernel_sin>
 800bb84:	e7dc      	b.n	800bb40 <cos+0x18>
 800bb86:	f001 f9f3 	bl	800cf70 <__kernel_sin>
 800bb8a:	ec53 2b10 	vmov	r2, r3, d0
 800bb8e:	ee10 0a10 	vmov	r0, s0
 800bb92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb96:	e7de      	b.n	800bb56 <cos+0x2e>
 800bb98:	f000 fde2 	bl	800c760 <__kernel_cos>
 800bb9c:	e7f5      	b.n	800bb8a <cos+0x62>
 800bb9e:	bf00      	nop
	...
 800bba8:	3fe921fb 	.word	0x3fe921fb
 800bbac:	7fefffff 	.word	0x7fefffff

0800bbb0 <sin>:
 800bbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbb2:	ec51 0b10 	vmov	r0, r1, d0
 800bbb6:	4a20      	ldr	r2, [pc, #128]	; (800bc38 <sin+0x88>)
 800bbb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	dc07      	bgt.n	800bbd0 <sin+0x20>
 800bbc0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800bc30 <sin+0x80>
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f001 f9d3 	bl	800cf70 <__kernel_sin>
 800bbca:	ec51 0b10 	vmov	r0, r1, d0
 800bbce:	e007      	b.n	800bbe0 <sin+0x30>
 800bbd0:	4a1a      	ldr	r2, [pc, #104]	; (800bc3c <sin+0x8c>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	dd09      	ble.n	800bbea <sin+0x3a>
 800bbd6:	ee10 2a10 	vmov	r2, s0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	f7f4 fb54 	bl	8000288 <__aeabi_dsub>
 800bbe0:	ec41 0b10 	vmov	d0, r0, r1
 800bbe4:	b005      	add	sp, #20
 800bbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbea:	4668      	mov	r0, sp
 800bbec:	f000 f9e8 	bl	800bfc0 <__ieee754_rem_pio2>
 800bbf0:	f000 0003 	and.w	r0, r0, #3
 800bbf4:	2801      	cmp	r0, #1
 800bbf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbfa:	ed9d 0b00 	vldr	d0, [sp]
 800bbfe:	d004      	beq.n	800bc0a <sin+0x5a>
 800bc00:	2802      	cmp	r0, #2
 800bc02:	d005      	beq.n	800bc10 <sin+0x60>
 800bc04:	b970      	cbnz	r0, 800bc24 <sin+0x74>
 800bc06:	2001      	movs	r0, #1
 800bc08:	e7dd      	b.n	800bbc6 <sin+0x16>
 800bc0a:	f000 fda9 	bl	800c760 <__kernel_cos>
 800bc0e:	e7dc      	b.n	800bbca <sin+0x1a>
 800bc10:	2001      	movs	r0, #1
 800bc12:	f001 f9ad 	bl	800cf70 <__kernel_sin>
 800bc16:	ec53 2b10 	vmov	r2, r3, d0
 800bc1a:	ee10 0a10 	vmov	r0, s0
 800bc1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc22:	e7dd      	b.n	800bbe0 <sin+0x30>
 800bc24:	f000 fd9c 	bl	800c760 <__kernel_cos>
 800bc28:	e7f5      	b.n	800bc16 <sin+0x66>
 800bc2a:	bf00      	nop
 800bc2c:	f3af 8000 	nop.w
	...
 800bc38:	3fe921fb 	.word	0x3fe921fb
 800bc3c:	7fefffff 	.word	0x7fefffff

0800bc40 <cosf>:
 800bc40:	ee10 3a10 	vmov	r3, s0
 800bc44:	b507      	push	{r0, r1, r2, lr}
 800bc46:	4a1c      	ldr	r2, [pc, #112]	; (800bcb8 <cosf+0x78>)
 800bc48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	dc04      	bgt.n	800bc5a <cosf+0x1a>
 800bc50:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800bcbc <cosf+0x7c>
 800bc54:	f001 fa46 	bl	800d0e4 <__kernel_cosf>
 800bc58:	e004      	b.n	800bc64 <cosf+0x24>
 800bc5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bc5e:	db04      	blt.n	800bc6a <cosf+0x2a>
 800bc60:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bc64:	b003      	add	sp, #12
 800bc66:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc6a:	4668      	mov	r0, sp
 800bc6c:	f000 fc4a 	bl	800c504 <__ieee754_rem_pio2f>
 800bc70:	f000 0003 	and.w	r0, r0, #3
 800bc74:	2801      	cmp	r0, #1
 800bc76:	d007      	beq.n	800bc88 <cosf+0x48>
 800bc78:	2802      	cmp	r0, #2
 800bc7a:	d00e      	beq.n	800bc9a <cosf+0x5a>
 800bc7c:	b9a0      	cbnz	r0, 800bca8 <cosf+0x68>
 800bc7e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc82:	ed9d 0a00 	vldr	s0, [sp]
 800bc86:	e7e5      	b.n	800bc54 <cosf+0x14>
 800bc88:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc8c:	ed9d 0a00 	vldr	s0, [sp]
 800bc90:	f001 fd08 	bl	800d6a4 <__kernel_sinf>
 800bc94:	eeb1 0a40 	vneg.f32	s0, s0
 800bc98:	e7e4      	b.n	800bc64 <cosf+0x24>
 800bc9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc9e:	ed9d 0a00 	vldr	s0, [sp]
 800bca2:	f001 fa1f 	bl	800d0e4 <__kernel_cosf>
 800bca6:	e7f5      	b.n	800bc94 <cosf+0x54>
 800bca8:	2001      	movs	r0, #1
 800bcaa:	eddd 0a01 	vldr	s1, [sp, #4]
 800bcae:	ed9d 0a00 	vldr	s0, [sp]
 800bcb2:	f001 fcf7 	bl	800d6a4 <__kernel_sinf>
 800bcb6:	e7d5      	b.n	800bc64 <cosf+0x24>
 800bcb8:	3f490fd8 	.word	0x3f490fd8
 800bcbc:	00000000 	.word	0x00000000

0800bcc0 <sinf>:
 800bcc0:	ee10 3a10 	vmov	r3, s0
 800bcc4:	b507      	push	{r0, r1, r2, lr}
 800bcc6:	4a1d      	ldr	r2, [pc, #116]	; (800bd3c <sinf+0x7c>)
 800bcc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bccc:	4293      	cmp	r3, r2
 800bcce:	dc05      	bgt.n	800bcdc <sinf+0x1c>
 800bcd0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800bd40 <sinf+0x80>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f001 fce5 	bl	800d6a4 <__kernel_sinf>
 800bcda:	e004      	b.n	800bce6 <sinf+0x26>
 800bcdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bce0:	db04      	blt.n	800bcec <sinf+0x2c>
 800bce2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bce6:	b003      	add	sp, #12
 800bce8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcec:	4668      	mov	r0, sp
 800bcee:	f000 fc09 	bl	800c504 <__ieee754_rem_pio2f>
 800bcf2:	f000 0003 	and.w	r0, r0, #3
 800bcf6:	2801      	cmp	r0, #1
 800bcf8:	d008      	beq.n	800bd0c <sinf+0x4c>
 800bcfa:	2802      	cmp	r0, #2
 800bcfc:	d00d      	beq.n	800bd1a <sinf+0x5a>
 800bcfe:	b9b0      	cbnz	r0, 800bd2e <sinf+0x6e>
 800bd00:	2001      	movs	r0, #1
 800bd02:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd06:	ed9d 0a00 	vldr	s0, [sp]
 800bd0a:	e7e4      	b.n	800bcd6 <sinf+0x16>
 800bd0c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd10:	ed9d 0a00 	vldr	s0, [sp]
 800bd14:	f001 f9e6 	bl	800d0e4 <__kernel_cosf>
 800bd18:	e7e5      	b.n	800bce6 <sinf+0x26>
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd20:	ed9d 0a00 	vldr	s0, [sp]
 800bd24:	f001 fcbe 	bl	800d6a4 <__kernel_sinf>
 800bd28:	eeb1 0a40 	vneg.f32	s0, s0
 800bd2c:	e7db      	b.n	800bce6 <sinf+0x26>
 800bd2e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd32:	ed9d 0a00 	vldr	s0, [sp]
 800bd36:	f001 f9d5 	bl	800d0e4 <__kernel_cosf>
 800bd3a:	e7f5      	b.n	800bd28 <sinf+0x68>
 800bd3c:	3f490fd8 	.word	0x3f490fd8
 800bd40:	00000000 	.word	0x00000000

0800bd44 <atan2>:
 800bd44:	f000 b85c 	b.w	800be00 <__ieee754_atan2>

0800bd48 <sqrt>:
 800bd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd4c:	ed2d 8b02 	vpush	{d8}
 800bd50:	b08b      	sub	sp, #44	; 0x2c
 800bd52:	ec55 4b10 	vmov	r4, r5, d0
 800bd56:	f000 fb25 	bl	800c3a4 <__ieee754_sqrt>
 800bd5a:	4b26      	ldr	r3, [pc, #152]	; (800bdf4 <sqrt+0xac>)
 800bd5c:	eeb0 8a40 	vmov.f32	s16, s0
 800bd60:	eef0 8a60 	vmov.f32	s17, s1
 800bd64:	f993 6000 	ldrsb.w	r6, [r3]
 800bd68:	1c73      	adds	r3, r6, #1
 800bd6a:	d02a      	beq.n	800bdc2 <sqrt+0x7a>
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	462b      	mov	r3, r5
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	f7f4 feda 	bl	8000b2c <__aeabi_dcmpun>
 800bd78:	4607      	mov	r7, r0
 800bd7a:	bb10      	cbnz	r0, 800bdc2 <sqrt+0x7a>
 800bd7c:	f04f 0800 	mov.w	r8, #0
 800bd80:	f04f 0900 	mov.w	r9, #0
 800bd84:	4642      	mov	r2, r8
 800bd86:	464b      	mov	r3, r9
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	f7f4 fea6 	bl	8000adc <__aeabi_dcmplt>
 800bd90:	b1b8      	cbz	r0, 800bdc2 <sqrt+0x7a>
 800bd92:	2301      	movs	r3, #1
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4b18      	ldr	r3, [pc, #96]	; (800bdf8 <sqrt+0xb0>)
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	9708      	str	r7, [sp, #32]
 800bd9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bda0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bda4:	b9b6      	cbnz	r6, 800bdd4 <sqrt+0x8c>
 800bda6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bdaa:	4668      	mov	r0, sp
 800bdac:	f001 fef4 	bl	800db98 <matherr>
 800bdb0:	b1d0      	cbz	r0, 800bde8 <sqrt+0xa0>
 800bdb2:	9b08      	ldr	r3, [sp, #32]
 800bdb4:	b11b      	cbz	r3, 800bdbe <sqrt+0x76>
 800bdb6:	f002 f82f 	bl	800de18 <__errno>
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	6003      	str	r3, [r0, #0]
 800bdbe:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bdc2:	eeb0 0a48 	vmov.f32	s0, s16
 800bdc6:	eef0 0a68 	vmov.f32	s1, s17
 800bdca:	b00b      	add	sp, #44	; 0x2c
 800bdcc:	ecbd 8b02 	vpop	{d8}
 800bdd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdd4:	4642      	mov	r2, r8
 800bdd6:	464b      	mov	r3, r9
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fd36 	bl	800084c <__aeabi_ddiv>
 800bde0:	2e02      	cmp	r6, #2
 800bde2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bde6:	d1e0      	bne.n	800bdaa <sqrt+0x62>
 800bde8:	f002 f816 	bl	800de18 <__errno>
 800bdec:	2321      	movs	r3, #33	; 0x21
 800bdee:	6003      	str	r3, [r0, #0]
 800bdf0:	e7df      	b.n	800bdb2 <sqrt+0x6a>
 800bdf2:	bf00      	nop
 800bdf4:	20000045 	.word	0x20000045
 800bdf8:	08012290 	.word	0x08012290
 800bdfc:	00000000 	.word	0x00000000

0800be00 <__ieee754_atan2>:
 800be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be04:	ec57 6b11 	vmov	r6, r7, d1
 800be08:	4273      	negs	r3, r6
 800be0a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800be0e:	4333      	orrs	r3, r6
 800be10:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800bfb8 <__ieee754_atan2+0x1b8>
 800be14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800be18:	4573      	cmp	r3, lr
 800be1a:	ec51 0b10 	vmov	r0, r1, d0
 800be1e:	ee11 8a10 	vmov	r8, s2
 800be22:	d80a      	bhi.n	800be3a <__ieee754_atan2+0x3a>
 800be24:	4244      	negs	r4, r0
 800be26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be2a:	4304      	orrs	r4, r0
 800be2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800be30:	4574      	cmp	r4, lr
 800be32:	468c      	mov	ip, r1
 800be34:	ee10 9a10 	vmov	r9, s0
 800be38:	d907      	bls.n	800be4a <__ieee754_atan2+0x4a>
 800be3a:	4632      	mov	r2, r6
 800be3c:	463b      	mov	r3, r7
 800be3e:	f7f4 fa25 	bl	800028c <__adddf3>
 800be42:	ec41 0b10 	vmov	d0, r0, r1
 800be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800be4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be52:	4334      	orrs	r4, r6
 800be54:	d103      	bne.n	800be5e <__ieee754_atan2+0x5e>
 800be56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5a:	f001 bc6d 	b.w	800d738 <atan>
 800be5e:	17bc      	asrs	r4, r7, #30
 800be60:	f004 0402 	and.w	r4, r4, #2
 800be64:	ea53 0909 	orrs.w	r9, r3, r9
 800be68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800be6c:	d107      	bne.n	800be7e <__ieee754_atan2+0x7e>
 800be6e:	2c02      	cmp	r4, #2
 800be70:	d073      	beq.n	800bf5a <__ieee754_atan2+0x15a>
 800be72:	2c03      	cmp	r4, #3
 800be74:	d1e5      	bne.n	800be42 <__ieee754_atan2+0x42>
 800be76:	a13e      	add	r1, pc, #248	; (adr r1, 800bf70 <__ieee754_atan2+0x170>)
 800be78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7c:	e7e1      	b.n	800be42 <__ieee754_atan2+0x42>
 800be7e:	ea52 0808 	orrs.w	r8, r2, r8
 800be82:	d106      	bne.n	800be92 <__ieee754_atan2+0x92>
 800be84:	f1bc 0f00 	cmp.w	ip, #0
 800be88:	da6b      	bge.n	800bf62 <__ieee754_atan2+0x162>
 800be8a:	a13b      	add	r1, pc, #236	; (adr r1, 800bf78 <__ieee754_atan2+0x178>)
 800be8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be90:	e7d7      	b.n	800be42 <__ieee754_atan2+0x42>
 800be92:	4572      	cmp	r2, lr
 800be94:	d120      	bne.n	800bed8 <__ieee754_atan2+0xd8>
 800be96:	4293      	cmp	r3, r2
 800be98:	d111      	bne.n	800bebe <__ieee754_atan2+0xbe>
 800be9a:	2c02      	cmp	r4, #2
 800be9c:	d007      	beq.n	800beae <__ieee754_atan2+0xae>
 800be9e:	2c03      	cmp	r4, #3
 800bea0:	d009      	beq.n	800beb6 <__ieee754_atan2+0xb6>
 800bea2:	2c01      	cmp	r4, #1
 800bea4:	d155      	bne.n	800bf52 <__ieee754_atan2+0x152>
 800bea6:	a136      	add	r1, pc, #216	; (adr r1, 800bf80 <__ieee754_atan2+0x180>)
 800bea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beac:	e7c9      	b.n	800be42 <__ieee754_atan2+0x42>
 800beae:	a136      	add	r1, pc, #216	; (adr r1, 800bf88 <__ieee754_atan2+0x188>)
 800beb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb4:	e7c5      	b.n	800be42 <__ieee754_atan2+0x42>
 800beb6:	a136      	add	r1, pc, #216	; (adr r1, 800bf90 <__ieee754_atan2+0x190>)
 800beb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bebc:	e7c1      	b.n	800be42 <__ieee754_atan2+0x42>
 800bebe:	2c02      	cmp	r4, #2
 800bec0:	d04b      	beq.n	800bf5a <__ieee754_atan2+0x15a>
 800bec2:	2c03      	cmp	r4, #3
 800bec4:	d0d7      	beq.n	800be76 <__ieee754_atan2+0x76>
 800bec6:	2c01      	cmp	r4, #1
 800bec8:	f04f 0000 	mov.w	r0, #0
 800becc:	d102      	bne.n	800bed4 <__ieee754_atan2+0xd4>
 800bece:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bed2:	e7b6      	b.n	800be42 <__ieee754_atan2+0x42>
 800bed4:	2100      	movs	r1, #0
 800bed6:	e7b4      	b.n	800be42 <__ieee754_atan2+0x42>
 800bed8:	4573      	cmp	r3, lr
 800beda:	d0d3      	beq.n	800be84 <__ieee754_atan2+0x84>
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	151b      	asrs	r3, r3, #20
 800bee0:	2b3c      	cmp	r3, #60	; 0x3c
 800bee2:	dc1e      	bgt.n	800bf22 <__ieee754_atan2+0x122>
 800bee4:	2f00      	cmp	r7, #0
 800bee6:	da01      	bge.n	800beec <__ieee754_atan2+0xec>
 800bee8:	333c      	adds	r3, #60	; 0x3c
 800beea:	db1e      	blt.n	800bf2a <__ieee754_atan2+0x12a>
 800beec:	4632      	mov	r2, r6
 800beee:	463b      	mov	r3, r7
 800bef0:	f7f4 fcac 	bl	800084c <__aeabi_ddiv>
 800bef4:	ec41 0b10 	vmov	d0, r0, r1
 800bef8:	f001 fdbe 	bl	800da78 <fabs>
 800befc:	f001 fc1c 	bl	800d738 <atan>
 800bf00:	ec51 0b10 	vmov	r0, r1, d0
 800bf04:	2c01      	cmp	r4, #1
 800bf06:	d013      	beq.n	800bf30 <__ieee754_atan2+0x130>
 800bf08:	2c02      	cmp	r4, #2
 800bf0a:	d015      	beq.n	800bf38 <__ieee754_atan2+0x138>
 800bf0c:	2c00      	cmp	r4, #0
 800bf0e:	d098      	beq.n	800be42 <__ieee754_atan2+0x42>
 800bf10:	a321      	add	r3, pc, #132	; (adr r3, 800bf98 <__ieee754_atan2+0x198>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	f7f4 f9b7 	bl	8000288 <__aeabi_dsub>
 800bf1a:	a321      	add	r3, pc, #132	; (adr r3, 800bfa0 <__ieee754_atan2+0x1a0>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	e014      	b.n	800bf4c <__ieee754_atan2+0x14c>
 800bf22:	a121      	add	r1, pc, #132	; (adr r1, 800bfa8 <__ieee754_atan2+0x1a8>)
 800bf24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf28:	e7ec      	b.n	800bf04 <__ieee754_atan2+0x104>
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	e7e9      	b.n	800bf04 <__ieee754_atan2+0x104>
 800bf30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf34:	4619      	mov	r1, r3
 800bf36:	e784      	b.n	800be42 <__ieee754_atan2+0x42>
 800bf38:	a317      	add	r3, pc, #92	; (adr r3, 800bf98 <__ieee754_atan2+0x198>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f7f4 f9a3 	bl	8000288 <__aeabi_dsub>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	a116      	add	r1, pc, #88	; (adr r1, 800bfa0 <__ieee754_atan2+0x1a0>)
 800bf48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf4c:	f7f4 f99c 	bl	8000288 <__aeabi_dsub>
 800bf50:	e777      	b.n	800be42 <__ieee754_atan2+0x42>
 800bf52:	a117      	add	r1, pc, #92	; (adr r1, 800bfb0 <__ieee754_atan2+0x1b0>)
 800bf54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf58:	e773      	b.n	800be42 <__ieee754_atan2+0x42>
 800bf5a:	a111      	add	r1, pc, #68	; (adr r1, 800bfa0 <__ieee754_atan2+0x1a0>)
 800bf5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf60:	e76f      	b.n	800be42 <__ieee754_atan2+0x42>
 800bf62:	a111      	add	r1, pc, #68	; (adr r1, 800bfa8 <__ieee754_atan2+0x1a8>)
 800bf64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf68:	e76b      	b.n	800be42 <__ieee754_atan2+0x42>
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	54442d18 	.word	0x54442d18
 800bf74:	c00921fb 	.word	0xc00921fb
 800bf78:	54442d18 	.word	0x54442d18
 800bf7c:	bff921fb 	.word	0xbff921fb
 800bf80:	54442d18 	.word	0x54442d18
 800bf84:	bfe921fb 	.word	0xbfe921fb
 800bf88:	7f3321d2 	.word	0x7f3321d2
 800bf8c:	4002d97c 	.word	0x4002d97c
 800bf90:	7f3321d2 	.word	0x7f3321d2
 800bf94:	c002d97c 	.word	0xc002d97c
 800bf98:	33145c07 	.word	0x33145c07
 800bf9c:	3ca1a626 	.word	0x3ca1a626
 800bfa0:	54442d18 	.word	0x54442d18
 800bfa4:	400921fb 	.word	0x400921fb
 800bfa8:	54442d18 	.word	0x54442d18
 800bfac:	3ff921fb 	.word	0x3ff921fb
 800bfb0:	54442d18 	.word	0x54442d18
 800bfb4:	3fe921fb 	.word	0x3fe921fb
 800bfb8:	7ff00000 	.word	0x7ff00000
 800bfbc:	00000000 	.word	0x00000000

0800bfc0 <__ieee754_rem_pio2>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	ec57 6b10 	vmov	r6, r7, d0
 800bfc8:	4bc3      	ldr	r3, [pc, #780]	; (800c2d8 <__ieee754_rem_pio2+0x318>)
 800bfca:	b08d      	sub	sp, #52	; 0x34
 800bfcc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bfd0:	4598      	cmp	r8, r3
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	9704      	str	r7, [sp, #16]
 800bfd6:	dc07      	bgt.n	800bfe8 <__ieee754_rem_pio2+0x28>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2300      	movs	r3, #0
 800bfdc:	ed84 0b00 	vstr	d0, [r4]
 800bfe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	e027      	b.n	800c038 <__ieee754_rem_pio2+0x78>
 800bfe8:	4bbc      	ldr	r3, [pc, #752]	; (800c2dc <__ieee754_rem_pio2+0x31c>)
 800bfea:	4598      	cmp	r8, r3
 800bfec:	dc75      	bgt.n	800c0da <__ieee754_rem_pio2+0x11a>
 800bfee:	9b04      	ldr	r3, [sp, #16]
 800bff0:	4dbb      	ldr	r5, [pc, #748]	; (800c2e0 <__ieee754_rem_pio2+0x320>)
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	ee10 0a10 	vmov	r0, s0
 800bff8:	a3a9      	add	r3, pc, #676	; (adr r3, 800c2a0 <__ieee754_rem_pio2+0x2e0>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	4639      	mov	r1, r7
 800c000:	dd36      	ble.n	800c070 <__ieee754_rem_pio2+0xb0>
 800c002:	f7f4 f941 	bl	8000288 <__aeabi_dsub>
 800c006:	45a8      	cmp	r8, r5
 800c008:	4606      	mov	r6, r0
 800c00a:	460f      	mov	r7, r1
 800c00c:	d018      	beq.n	800c040 <__ieee754_rem_pio2+0x80>
 800c00e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c2a8 <__ieee754_rem_pio2+0x2e8>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	f7f4 f938 	bl	8000288 <__aeabi_dsub>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	e9c4 2300 	strd	r2, r3, [r4]
 800c020:	4630      	mov	r0, r6
 800c022:	4639      	mov	r1, r7
 800c024:	f7f4 f930 	bl	8000288 <__aeabi_dsub>
 800c028:	a39f      	add	r3, pc, #636	; (adr r3, 800c2a8 <__ieee754_rem_pio2+0x2e8>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f7f4 f92b 	bl	8000288 <__aeabi_dsub>
 800c032:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c036:	2501      	movs	r5, #1
 800c038:	4628      	mov	r0, r5
 800c03a:	b00d      	add	sp, #52	; 0x34
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	a39b      	add	r3, pc, #620	; (adr r3, 800c2b0 <__ieee754_rem_pio2+0x2f0>)
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	f7f4 f91f 	bl	8000288 <__aeabi_dsub>
 800c04a:	a39b      	add	r3, pc, #620	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2f8>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	4606      	mov	r6, r0
 800c052:	460f      	mov	r7, r1
 800c054:	f7f4 f918 	bl	8000288 <__aeabi_dsub>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	e9c4 2300 	strd	r2, r3, [r4]
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 f910 	bl	8000288 <__aeabi_dsub>
 800c068:	a393      	add	r3, pc, #588	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2f8>)
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	e7de      	b.n	800c02e <__ieee754_rem_pio2+0x6e>
 800c070:	f7f4 f90c 	bl	800028c <__adddf3>
 800c074:	45a8      	cmp	r8, r5
 800c076:	4606      	mov	r6, r0
 800c078:	460f      	mov	r7, r1
 800c07a:	d016      	beq.n	800c0aa <__ieee754_rem_pio2+0xea>
 800c07c:	a38a      	add	r3, pc, #552	; (adr r3, 800c2a8 <__ieee754_rem_pio2+0x2e8>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 f903 	bl	800028c <__adddf3>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	e9c4 2300 	strd	r2, r3, [r4]
 800c08e:	4630      	mov	r0, r6
 800c090:	4639      	mov	r1, r7
 800c092:	f7f4 f8f9 	bl	8000288 <__aeabi_dsub>
 800c096:	a384      	add	r3, pc, #528	; (adr r3, 800c2a8 <__ieee754_rem_pio2+0x2e8>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f7f4 f8f6 	bl	800028c <__adddf3>
 800c0a0:	f04f 35ff 	mov.w	r5, #4294967295
 800c0a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0a8:	e7c6      	b.n	800c038 <__ieee754_rem_pio2+0x78>
 800c0aa:	a381      	add	r3, pc, #516	; (adr r3, 800c2b0 <__ieee754_rem_pio2+0x2f0>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 f8ec 	bl	800028c <__adddf3>
 800c0b4:	a380      	add	r3, pc, #512	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2f8>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	f7f4 f8e5 	bl	800028c <__adddf3>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	e9c4 2300 	strd	r2, r3, [r4]
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	f7f4 f8db 	bl	8000288 <__aeabi_dsub>
 800c0d2:	a379      	add	r3, pc, #484	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2f8>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	e7e0      	b.n	800c09c <__ieee754_rem_pio2+0xdc>
 800c0da:	4b82      	ldr	r3, [pc, #520]	; (800c2e4 <__ieee754_rem_pio2+0x324>)
 800c0dc:	4598      	cmp	r8, r3
 800c0de:	f300 80d0 	bgt.w	800c282 <__ieee754_rem_pio2+0x2c2>
 800c0e2:	f001 fcc9 	bl	800da78 <fabs>
 800c0e6:	ec57 6b10 	vmov	r6, r7, d0
 800c0ea:	ee10 0a10 	vmov	r0, s0
 800c0ee:	a374      	add	r3, pc, #464	; (adr r3, 800c2c0 <__ieee754_rem_pio2+0x300>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 fa7f 	bl	80005f8 <__aeabi_dmul>
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	4b7a      	ldr	r3, [pc, #488]	; (800c2e8 <__ieee754_rem_pio2+0x328>)
 800c0fe:	f7f4 f8c5 	bl	800028c <__adddf3>
 800c102:	f7f4 fd29 	bl	8000b58 <__aeabi_d2iz>
 800c106:	4605      	mov	r5, r0
 800c108:	f7f4 fa0c 	bl	8000524 <__aeabi_i2d>
 800c10c:	a364      	add	r3, pc, #400	; (adr r3, 800c2a0 <__ieee754_rem_pio2+0x2e0>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c116:	f7f4 fa6f 	bl	80005f8 <__aeabi_dmul>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4630      	mov	r0, r6
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 f8b1 	bl	8000288 <__aeabi_dsub>
 800c126:	a360      	add	r3, pc, #384	; (adr r3, 800c2a8 <__ieee754_rem_pio2+0x2e8>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	4682      	mov	sl, r0
 800c12e:	468b      	mov	fp, r1
 800c130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c134:	f7f4 fa60 	bl	80005f8 <__aeabi_dmul>
 800c138:	2d1f      	cmp	r5, #31
 800c13a:	4606      	mov	r6, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	dc0c      	bgt.n	800c15a <__ieee754_rem_pio2+0x19a>
 800c140:	1e6a      	subs	r2, r5, #1
 800c142:	4b6a      	ldr	r3, [pc, #424]	; (800c2ec <__ieee754_rem_pio2+0x32c>)
 800c144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c148:	4543      	cmp	r3, r8
 800c14a:	d006      	beq.n	800c15a <__ieee754_rem_pio2+0x19a>
 800c14c:	4632      	mov	r2, r6
 800c14e:	463b      	mov	r3, r7
 800c150:	4650      	mov	r0, sl
 800c152:	4659      	mov	r1, fp
 800c154:	f7f4 f898 	bl	8000288 <__aeabi_dsub>
 800c158:	e00e      	b.n	800c178 <__ieee754_rem_pio2+0x1b8>
 800c15a:	4632      	mov	r2, r6
 800c15c:	463b      	mov	r3, r7
 800c15e:	4650      	mov	r0, sl
 800c160:	4659      	mov	r1, fp
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c16a:	9305      	str	r3, [sp, #20]
 800c16c:	9a05      	ldr	r2, [sp, #20]
 800c16e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	2b10      	cmp	r3, #16
 800c176:	dc02      	bgt.n	800c17e <__ieee754_rem_pio2+0x1be>
 800c178:	e9c4 0100 	strd	r0, r1, [r4]
 800c17c:	e039      	b.n	800c1f2 <__ieee754_rem_pio2+0x232>
 800c17e:	a34c      	add	r3, pc, #304	; (adr r3, 800c2b0 <__ieee754_rem_pio2+0x2f0>)
 800c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c188:	f7f4 fa36 	bl	80005f8 <__aeabi_dmul>
 800c18c:	4606      	mov	r6, r0
 800c18e:	460f      	mov	r7, r1
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4650      	mov	r0, sl
 800c196:	4659      	mov	r1, fp
 800c198:	f7f4 f876 	bl	8000288 <__aeabi_dsub>
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	4689      	mov	r9, r1
 800c1a4:	4650      	mov	r0, sl
 800c1a6:	4659      	mov	r1, fp
 800c1a8:	f7f4 f86e 	bl	8000288 <__aeabi_dsub>
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	f7f4 f86a 	bl	8000288 <__aeabi_dsub>
 800c1b4:	a340      	add	r3, pc, #256	; (adr r3, 800c2b8 <__ieee754_rem_pio2+0x2f8>)
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c2:	f7f4 fa19 	bl	80005f8 <__aeabi_dmul>
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	463b      	mov	r3, r7
 800c1ca:	f7f4 f85d 	bl	8000288 <__aeabi_dsub>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	460f      	mov	r7, r1
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	4649      	mov	r1, r9
 800c1da:	f7f4 f855 	bl	8000288 <__aeabi_dsub>
 800c1de:	9a05      	ldr	r2, [sp, #20]
 800c1e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	2b31      	cmp	r3, #49	; 0x31
 800c1e8:	dc20      	bgt.n	800c22c <__ieee754_rem_pio2+0x26c>
 800c1ea:	e9c4 0100 	strd	r0, r1, [r4]
 800c1ee:	46c2      	mov	sl, r8
 800c1f0:	46cb      	mov	fp, r9
 800c1f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c1f6:	4650      	mov	r0, sl
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	464b      	mov	r3, r9
 800c1fc:	4659      	mov	r1, fp
 800c1fe:	f7f4 f843 	bl	8000288 <__aeabi_dsub>
 800c202:	463b      	mov	r3, r7
 800c204:	4632      	mov	r2, r6
 800c206:	f7f4 f83f 	bl	8000288 <__aeabi_dsub>
 800c20a:	9b04      	ldr	r3, [sp, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c212:	f6bf af11 	bge.w	800c038 <__ieee754_rem_pio2+0x78>
 800c216:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c21a:	6063      	str	r3, [r4, #4]
 800c21c:	f8c4 8000 	str.w	r8, [r4]
 800c220:	60a0      	str	r0, [r4, #8]
 800c222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c226:	60e3      	str	r3, [r4, #12]
 800c228:	426d      	negs	r5, r5
 800c22a:	e705      	b.n	800c038 <__ieee754_rem_pio2+0x78>
 800c22c:	a326      	add	r3, pc, #152	; (adr r3, 800c2c8 <__ieee754_rem_pio2+0x308>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c236:	f7f4 f9df 	bl	80005f8 <__aeabi_dmul>
 800c23a:	4606      	mov	r6, r0
 800c23c:	460f      	mov	r7, r1
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4640      	mov	r0, r8
 800c244:	4649      	mov	r1, r9
 800c246:	f7f4 f81f 	bl	8000288 <__aeabi_dsub>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4682      	mov	sl, r0
 800c250:	468b      	mov	fp, r1
 800c252:	4640      	mov	r0, r8
 800c254:	4649      	mov	r1, r9
 800c256:	f7f4 f817 	bl	8000288 <__aeabi_dsub>
 800c25a:	4632      	mov	r2, r6
 800c25c:	463b      	mov	r3, r7
 800c25e:	f7f4 f813 	bl	8000288 <__aeabi_dsub>
 800c262:	a31b      	add	r3, pc, #108	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x310>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	4606      	mov	r6, r0
 800c26a:	460f      	mov	r7, r1
 800c26c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c270:	f7f4 f9c2 	bl	80005f8 <__aeabi_dmul>
 800c274:	4632      	mov	r2, r6
 800c276:	463b      	mov	r3, r7
 800c278:	f7f4 f806 	bl	8000288 <__aeabi_dsub>
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	e764      	b.n	800c14c <__ieee754_rem_pio2+0x18c>
 800c282:	4b1b      	ldr	r3, [pc, #108]	; (800c2f0 <__ieee754_rem_pio2+0x330>)
 800c284:	4598      	cmp	r8, r3
 800c286:	dd35      	ble.n	800c2f4 <__ieee754_rem_pio2+0x334>
 800c288:	ee10 2a10 	vmov	r2, s0
 800c28c:	463b      	mov	r3, r7
 800c28e:	4630      	mov	r0, r6
 800c290:	4639      	mov	r1, r7
 800c292:	f7f3 fff9 	bl	8000288 <__aeabi_dsub>
 800c296:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c29a:	e9c4 0100 	strd	r0, r1, [r4]
 800c29e:	e6a1      	b.n	800bfe4 <__ieee754_rem_pio2+0x24>
 800c2a0:	54400000 	.word	0x54400000
 800c2a4:	3ff921fb 	.word	0x3ff921fb
 800c2a8:	1a626331 	.word	0x1a626331
 800c2ac:	3dd0b461 	.word	0x3dd0b461
 800c2b0:	1a600000 	.word	0x1a600000
 800c2b4:	3dd0b461 	.word	0x3dd0b461
 800c2b8:	2e037073 	.word	0x2e037073
 800c2bc:	3ba3198a 	.word	0x3ba3198a
 800c2c0:	6dc9c883 	.word	0x6dc9c883
 800c2c4:	3fe45f30 	.word	0x3fe45f30
 800c2c8:	2e000000 	.word	0x2e000000
 800c2cc:	3ba3198a 	.word	0x3ba3198a
 800c2d0:	252049c1 	.word	0x252049c1
 800c2d4:	397b839a 	.word	0x397b839a
 800c2d8:	3fe921fb 	.word	0x3fe921fb
 800c2dc:	4002d97b 	.word	0x4002d97b
 800c2e0:	3ff921fb 	.word	0x3ff921fb
 800c2e4:	413921fb 	.word	0x413921fb
 800c2e8:	3fe00000 	.word	0x3fe00000
 800c2ec:	08012298 	.word	0x08012298
 800c2f0:	7fefffff 	.word	0x7fefffff
 800c2f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c2f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c2fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c300:	4630      	mov	r0, r6
 800c302:	460f      	mov	r7, r1
 800c304:	f7f4 fc28 	bl	8000b58 <__aeabi_d2iz>
 800c308:	f7f4 f90c 	bl	8000524 <__aeabi_i2d>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4630      	mov	r0, r6
 800c312:	4639      	mov	r1, r7
 800c314:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c318:	f7f3 ffb6 	bl	8000288 <__aeabi_dsub>
 800c31c:	2200      	movs	r2, #0
 800c31e:	4b1f      	ldr	r3, [pc, #124]	; (800c39c <__ieee754_rem_pio2+0x3dc>)
 800c320:	f7f4 f96a 	bl	80005f8 <__aeabi_dmul>
 800c324:	460f      	mov	r7, r1
 800c326:	4606      	mov	r6, r0
 800c328:	f7f4 fc16 	bl	8000b58 <__aeabi_d2iz>
 800c32c:	f7f4 f8fa 	bl	8000524 <__aeabi_i2d>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4630      	mov	r0, r6
 800c336:	4639      	mov	r1, r7
 800c338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c33c:	f7f3 ffa4 	bl	8000288 <__aeabi_dsub>
 800c340:	2200      	movs	r2, #0
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <__ieee754_rem_pio2+0x3dc>)
 800c344:	f7f4 f958 	bl	80005f8 <__aeabi_dmul>
 800c348:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c34c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c350:	f04f 0803 	mov.w	r8, #3
 800c354:	2600      	movs	r6, #0
 800c356:	2700      	movs	r7, #0
 800c358:	4632      	mov	r2, r6
 800c35a:	463b      	mov	r3, r7
 800c35c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c360:	f108 3aff 	add.w	sl, r8, #4294967295
 800c364:	f7f4 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c368:	b9b0      	cbnz	r0, 800c398 <__ieee754_rem_pio2+0x3d8>
 800c36a:	4b0d      	ldr	r3, [pc, #52]	; (800c3a0 <__ieee754_rem_pio2+0x3e0>)
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	2302      	movs	r3, #2
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	462a      	mov	r2, r5
 800c374:	4643      	mov	r3, r8
 800c376:	4621      	mov	r1, r4
 800c378:	a806      	add	r0, sp, #24
 800c37a:	f000 fab9 	bl	800c8f0 <__kernel_rem_pio2>
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	4605      	mov	r5, r0
 800c384:	f6bf ae58 	bge.w	800c038 <__ieee754_rem_pio2+0x78>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c38e:	6063      	str	r3, [r4, #4]
 800c390:	68e3      	ldr	r3, [r4, #12]
 800c392:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c396:	e746      	b.n	800c226 <__ieee754_rem_pio2+0x266>
 800c398:	46d0      	mov	r8, sl
 800c39a:	e7dd      	b.n	800c358 <__ieee754_rem_pio2+0x398>
 800c39c:	41700000 	.word	0x41700000
 800c3a0:	08012318 	.word	0x08012318

0800c3a4 <__ieee754_sqrt>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	4955      	ldr	r1, [pc, #340]	; (800c500 <__ieee754_sqrt+0x15c>)
 800c3aa:	ec55 4b10 	vmov	r4, r5, d0
 800c3ae:	43a9      	bics	r1, r5
 800c3b0:	462b      	mov	r3, r5
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	d112      	bne.n	800c3dc <__ieee754_sqrt+0x38>
 800c3b6:	ee10 2a10 	vmov	r2, s0
 800c3ba:	ee10 0a10 	vmov	r0, s0
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f4 f91a 	bl	80005f8 <__aeabi_dmul>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f7f3 ff5e 	bl	800028c <__adddf3>
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	ec45 4b10 	vmov	d0, r4, r5
 800c3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	ee10 0a10 	vmov	r0, s0
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	dc0f      	bgt.n	800c406 <__ieee754_sqrt+0x62>
 800c3e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3ea:	4330      	orrs	r0, r6
 800c3ec:	d0f2      	beq.n	800c3d4 <__ieee754_sqrt+0x30>
 800c3ee:	b155      	cbz	r5, 800c406 <__ieee754_sqrt+0x62>
 800c3f0:	ee10 2a10 	vmov	r2, s0
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	f7f3 ff46 	bl	8000288 <__aeabi_dsub>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	f7f4 fa24 	bl	800084c <__aeabi_ddiv>
 800c404:	e7e4      	b.n	800c3d0 <__ieee754_sqrt+0x2c>
 800c406:	151b      	asrs	r3, r3, #20
 800c408:	d073      	beq.n	800c4f2 <__ieee754_sqrt+0x14e>
 800c40a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c40e:	07dd      	lsls	r5, r3, #31
 800c410:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c414:	bf48      	it	mi
 800c416:	0fc8      	lsrmi	r0, r1, #31
 800c418:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c41c:	bf44      	itt	mi
 800c41e:	0049      	lslmi	r1, r1, #1
 800c420:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c424:	2500      	movs	r5, #0
 800c426:	1058      	asrs	r0, r3, #1
 800c428:	0fcb      	lsrs	r3, r1, #31
 800c42a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c42e:	0049      	lsls	r1, r1, #1
 800c430:	2316      	movs	r3, #22
 800c432:	462c      	mov	r4, r5
 800c434:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c438:	19a7      	adds	r7, r4, r6
 800c43a:	4297      	cmp	r7, r2
 800c43c:	bfde      	ittt	le
 800c43e:	19bc      	addle	r4, r7, r6
 800c440:	1bd2      	suble	r2, r2, r7
 800c442:	19ad      	addle	r5, r5, r6
 800c444:	0fcf      	lsrs	r7, r1, #31
 800c446:	3b01      	subs	r3, #1
 800c448:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c44c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c450:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c454:	d1f0      	bne.n	800c438 <__ieee754_sqrt+0x94>
 800c456:	f04f 0c20 	mov.w	ip, #32
 800c45a:	469e      	mov	lr, r3
 800c45c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c460:	42a2      	cmp	r2, r4
 800c462:	eb06 070e 	add.w	r7, r6, lr
 800c466:	dc02      	bgt.n	800c46e <__ieee754_sqrt+0xca>
 800c468:	d112      	bne.n	800c490 <__ieee754_sqrt+0xec>
 800c46a:	428f      	cmp	r7, r1
 800c46c:	d810      	bhi.n	800c490 <__ieee754_sqrt+0xec>
 800c46e:	2f00      	cmp	r7, #0
 800c470:	eb07 0e06 	add.w	lr, r7, r6
 800c474:	da42      	bge.n	800c4fc <__ieee754_sqrt+0x158>
 800c476:	f1be 0f00 	cmp.w	lr, #0
 800c47a:	db3f      	blt.n	800c4fc <__ieee754_sqrt+0x158>
 800c47c:	f104 0801 	add.w	r8, r4, #1
 800c480:	1b12      	subs	r2, r2, r4
 800c482:	428f      	cmp	r7, r1
 800c484:	bf88      	it	hi
 800c486:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c48a:	1bc9      	subs	r1, r1, r7
 800c48c:	4433      	add	r3, r6
 800c48e:	4644      	mov	r4, r8
 800c490:	0052      	lsls	r2, r2, #1
 800c492:	f1bc 0c01 	subs.w	ip, ip, #1
 800c496:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c49a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c49e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c4a2:	d1dd      	bne.n	800c460 <__ieee754_sqrt+0xbc>
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	d006      	beq.n	800c4b6 <__ieee754_sqrt+0x112>
 800c4a8:	1c5c      	adds	r4, r3, #1
 800c4aa:	bf13      	iteet	ne
 800c4ac:	3301      	addne	r3, #1
 800c4ae:	3501      	addeq	r5, #1
 800c4b0:	4663      	moveq	r3, ip
 800c4b2:	f023 0301 	bicne.w	r3, r3, #1
 800c4b6:	106a      	asrs	r2, r5, #1
 800c4b8:	085b      	lsrs	r3, r3, #1
 800c4ba:	07e9      	lsls	r1, r5, #31
 800c4bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c4c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c4c4:	bf48      	it	mi
 800c4c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c4ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c4ce:	461c      	mov	r4, r3
 800c4d0:	e780      	b.n	800c3d4 <__ieee754_sqrt+0x30>
 800c4d2:	0aca      	lsrs	r2, r1, #11
 800c4d4:	3815      	subs	r0, #21
 800c4d6:	0549      	lsls	r1, r1, #21
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	d0fa      	beq.n	800c4d2 <__ieee754_sqrt+0x12e>
 800c4dc:	02d6      	lsls	r6, r2, #11
 800c4de:	d50a      	bpl.n	800c4f6 <__ieee754_sqrt+0x152>
 800c4e0:	f1c3 0420 	rsb	r4, r3, #32
 800c4e4:	fa21 f404 	lsr.w	r4, r1, r4
 800c4e8:	1e5d      	subs	r5, r3, #1
 800c4ea:	4099      	lsls	r1, r3
 800c4ec:	4322      	orrs	r2, r4
 800c4ee:	1b43      	subs	r3, r0, r5
 800c4f0:	e78b      	b.n	800c40a <__ieee754_sqrt+0x66>
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	e7f0      	b.n	800c4d8 <__ieee754_sqrt+0x134>
 800c4f6:	0052      	lsls	r2, r2, #1
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	e7ef      	b.n	800c4dc <__ieee754_sqrt+0x138>
 800c4fc:	46a0      	mov	r8, r4
 800c4fe:	e7bf      	b.n	800c480 <__ieee754_sqrt+0xdc>
 800c500:	7ff00000 	.word	0x7ff00000

0800c504 <__ieee754_rem_pio2f>:
 800c504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c506:	ee10 6a10 	vmov	r6, s0
 800c50a:	4b86      	ldr	r3, [pc, #536]	; (800c724 <__ieee754_rem_pio2f+0x220>)
 800c50c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800c510:	429c      	cmp	r4, r3
 800c512:	b087      	sub	sp, #28
 800c514:	4605      	mov	r5, r0
 800c516:	dc05      	bgt.n	800c524 <__ieee754_rem_pio2f+0x20>
 800c518:	2300      	movs	r3, #0
 800c51a:	ed85 0a00 	vstr	s0, [r5]
 800c51e:	6043      	str	r3, [r0, #4]
 800c520:	2000      	movs	r0, #0
 800c522:	e020      	b.n	800c566 <__ieee754_rem_pio2f+0x62>
 800c524:	4b80      	ldr	r3, [pc, #512]	; (800c728 <__ieee754_rem_pio2f+0x224>)
 800c526:	429c      	cmp	r4, r3
 800c528:	dc38      	bgt.n	800c59c <__ieee754_rem_pio2f+0x98>
 800c52a:	2e00      	cmp	r6, #0
 800c52c:	f024 040f 	bic.w	r4, r4, #15
 800c530:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800c72c <__ieee754_rem_pio2f+0x228>
 800c534:	4b7e      	ldr	r3, [pc, #504]	; (800c730 <__ieee754_rem_pio2f+0x22c>)
 800c536:	dd18      	ble.n	800c56a <__ieee754_rem_pio2f+0x66>
 800c538:	429c      	cmp	r4, r3
 800c53a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c53e:	bf09      	itett	eq
 800c540:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c734 <__ieee754_rem_pio2f+0x230>
 800c544:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c738 <__ieee754_rem_pio2f+0x234>
 800c548:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c54c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c73c <__ieee754_rem_pio2f+0x238>
 800c550:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c554:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c558:	edc0 6a00 	vstr	s13, [r0]
 800c55c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c560:	edc0 7a01 	vstr	s15, [r0, #4]
 800c564:	2001      	movs	r0, #1
 800c566:	b007      	add	sp, #28
 800c568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56a:	429c      	cmp	r4, r3
 800c56c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c570:	bf09      	itett	eq
 800c572:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c734 <__ieee754_rem_pio2f+0x230>
 800c576:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c738 <__ieee754_rem_pio2f+0x234>
 800c57a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c57e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c73c <__ieee754_rem_pio2f+0x238>
 800c582:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c586:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c58a:	edc0 6a00 	vstr	s13, [r0]
 800c58e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c592:	edc0 7a01 	vstr	s15, [r0, #4]
 800c596:	f04f 30ff 	mov.w	r0, #4294967295
 800c59a:	e7e4      	b.n	800c566 <__ieee754_rem_pio2f+0x62>
 800c59c:	4b68      	ldr	r3, [pc, #416]	; (800c740 <__ieee754_rem_pio2f+0x23c>)
 800c59e:	429c      	cmp	r4, r3
 800c5a0:	dc71      	bgt.n	800c686 <__ieee754_rem_pio2f+0x182>
 800c5a2:	f001 fb73 	bl	800dc8c <fabsf>
 800c5a6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c744 <__ieee754_rem_pio2f+0x240>
 800c5aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c5ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c5b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c5ba:	ee17 0a90 	vmov	r0, s15
 800c5be:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c72c <__ieee754_rem_pio2f+0x228>
 800c5c2:	eeb1 7a46 	vneg.f32	s14, s12
 800c5c6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c5ca:	281f      	cmp	r0, #31
 800c5cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c738 <__ieee754_rem_pio2f+0x234>
 800c5d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c5d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c5d8:	ee16 3a90 	vmov	r3, s13
 800c5dc:	dc1c      	bgt.n	800c618 <__ieee754_rem_pio2f+0x114>
 800c5de:	1e47      	subs	r7, r0, #1
 800c5e0:	4959      	ldr	r1, [pc, #356]	; (800c748 <__ieee754_rem_pio2f+0x244>)
 800c5e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c5e6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c5ea:	428a      	cmp	r2, r1
 800c5ec:	d014      	beq.n	800c618 <__ieee754_rem_pio2f+0x114>
 800c5ee:	602b      	str	r3, [r5, #0]
 800c5f0:	ed95 7a00 	vldr	s14, [r5]
 800c5f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c5fe:	ed85 0a01 	vstr	s0, [r5, #4]
 800c602:	dab0      	bge.n	800c566 <__ieee754_rem_pio2f+0x62>
 800c604:	eeb1 7a47 	vneg.f32	s14, s14
 800c608:	eeb1 0a40 	vneg.f32	s0, s0
 800c60c:	ed85 7a00 	vstr	s14, [r5]
 800c610:	ed85 0a01 	vstr	s0, [r5, #4]
 800c614:	4240      	negs	r0, r0
 800c616:	e7a6      	b.n	800c566 <__ieee754_rem_pio2f+0x62>
 800c618:	15e4      	asrs	r4, r4, #23
 800c61a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c61e:	1aa2      	subs	r2, r4, r2
 800c620:	2a08      	cmp	r2, #8
 800c622:	dde4      	ble.n	800c5ee <__ieee754_rem_pio2f+0xea>
 800c624:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c734 <__ieee754_rem_pio2f+0x230>
 800c628:	eef0 6a40 	vmov.f32	s13, s0
 800c62c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c630:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c634:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c638:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c73c <__ieee754_rem_pio2f+0x238>
 800c63c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800c640:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c644:	eef0 7a40 	vmov.f32	s15, s0
 800c648:	ee15 3a90 	vmov	r3, s11
 800c64c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c650:	1aa4      	subs	r4, r4, r2
 800c652:	2c19      	cmp	r4, #25
 800c654:	dc04      	bgt.n	800c660 <__ieee754_rem_pio2f+0x15c>
 800c656:	edc5 5a00 	vstr	s11, [r5]
 800c65a:	eeb0 0a66 	vmov.f32	s0, s13
 800c65e:	e7c7      	b.n	800c5f0 <__ieee754_rem_pio2f+0xec>
 800c660:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c74c <__ieee754_rem_pio2f+0x248>
 800c664:	eeb0 0a66 	vmov.f32	s0, s13
 800c668:	eea7 0a25 	vfma.f32	s0, s14, s11
 800c66c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c670:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c674:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c750 <__ieee754_rem_pio2f+0x24c>
 800c678:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800c67c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c680:	ed85 7a00 	vstr	s14, [r5]
 800c684:	e7b4      	b.n	800c5f0 <__ieee754_rem_pio2f+0xec>
 800c686:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c68a:	db06      	blt.n	800c69a <__ieee754_rem_pio2f+0x196>
 800c68c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c690:	edc0 7a01 	vstr	s15, [r0, #4]
 800c694:	edc0 7a00 	vstr	s15, [r0]
 800c698:	e742      	b.n	800c520 <__ieee754_rem_pio2f+0x1c>
 800c69a:	15e2      	asrs	r2, r4, #23
 800c69c:	3a86      	subs	r2, #134	; 0x86
 800c69e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800c6a2:	ee07 3a90 	vmov	s15, r3
 800c6a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c6aa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c754 <__ieee754_rem_pio2f+0x250>
 800c6ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6b6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c6ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c6be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c6c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c6ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c6d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6da:	edcd 7a05 	vstr	s15, [sp, #20]
 800c6de:	d11e      	bne.n	800c71e <__ieee754_rem_pio2f+0x21a>
 800c6e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e8:	bf0c      	ite	eq
 800c6ea:	2301      	moveq	r3, #1
 800c6ec:	2302      	movne	r3, #2
 800c6ee:	491a      	ldr	r1, [pc, #104]	; (800c758 <__ieee754_rem_pio2f+0x254>)
 800c6f0:	9101      	str	r1, [sp, #4]
 800c6f2:	2102      	movs	r1, #2
 800c6f4:	9100      	str	r1, [sp, #0]
 800c6f6:	a803      	add	r0, sp, #12
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f000 fd51 	bl	800d1a0 <__kernel_rem_pio2f>
 800c6fe:	2e00      	cmp	r6, #0
 800c700:	f6bf af31 	bge.w	800c566 <__ieee754_rem_pio2f+0x62>
 800c704:	edd5 7a00 	vldr	s15, [r5]
 800c708:	eef1 7a67 	vneg.f32	s15, s15
 800c70c:	edc5 7a00 	vstr	s15, [r5]
 800c710:	edd5 7a01 	vldr	s15, [r5, #4]
 800c714:	eef1 7a67 	vneg.f32	s15, s15
 800c718:	edc5 7a01 	vstr	s15, [r5, #4]
 800c71c:	e77a      	b.n	800c614 <__ieee754_rem_pio2f+0x110>
 800c71e:	2303      	movs	r3, #3
 800c720:	e7e5      	b.n	800c6ee <__ieee754_rem_pio2f+0x1ea>
 800c722:	bf00      	nop
 800c724:	3f490fd8 	.word	0x3f490fd8
 800c728:	4016cbe3 	.word	0x4016cbe3
 800c72c:	3fc90f80 	.word	0x3fc90f80
 800c730:	3fc90fd0 	.word	0x3fc90fd0
 800c734:	37354400 	.word	0x37354400
 800c738:	37354443 	.word	0x37354443
 800c73c:	2e85a308 	.word	0x2e85a308
 800c740:	43490f80 	.word	0x43490f80
 800c744:	3f22f984 	.word	0x3f22f984
 800c748:	08012420 	.word	0x08012420
 800c74c:	2e85a300 	.word	0x2e85a300
 800c750:	248d3132 	.word	0x248d3132
 800c754:	43800000 	.word	0x43800000
 800c758:	080124a0 	.word	0x080124a0
 800c75c:	00000000 	.word	0x00000000

0800c760 <__kernel_cos>:
 800c760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	ec59 8b10 	vmov	r8, r9, d0
 800c768:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c76c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c770:	ed2d 8b02 	vpush	{d8}
 800c774:	eeb0 8a41 	vmov.f32	s16, s2
 800c778:	eef0 8a61 	vmov.f32	s17, s3
 800c77c:	da07      	bge.n	800c78e <__kernel_cos+0x2e>
 800c77e:	ee10 0a10 	vmov	r0, s0
 800c782:	4649      	mov	r1, r9
 800c784:	f7f4 f9e8 	bl	8000b58 <__aeabi_d2iz>
 800c788:	2800      	cmp	r0, #0
 800c78a:	f000 8089 	beq.w	800c8a0 <__kernel_cos+0x140>
 800c78e:	4642      	mov	r2, r8
 800c790:	464b      	mov	r3, r9
 800c792:	4640      	mov	r0, r8
 800c794:	4649      	mov	r1, r9
 800c796:	f7f3 ff2f 	bl	80005f8 <__aeabi_dmul>
 800c79a:	2200      	movs	r2, #0
 800c79c:	4b4e      	ldr	r3, [pc, #312]	; (800c8d8 <__kernel_cos+0x178>)
 800c79e:	4604      	mov	r4, r0
 800c7a0:	460d      	mov	r5, r1
 800c7a2:	f7f3 ff29 	bl	80005f8 <__aeabi_dmul>
 800c7a6:	a340      	add	r3, pc, #256	; (adr r3, 800c8a8 <__kernel_cos+0x148>)
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	4682      	mov	sl, r0
 800c7ae:	468b      	mov	fp, r1
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	f7f3 ff20 	bl	80005f8 <__aeabi_dmul>
 800c7b8:	a33d      	add	r3, pc, #244	; (adr r3, 800c8b0 <__kernel_cos+0x150>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7f3 fd65 	bl	800028c <__adddf3>
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	462b      	mov	r3, r5
 800c7c6:	f7f3 ff17 	bl	80005f8 <__aeabi_dmul>
 800c7ca:	a33b      	add	r3, pc, #236	; (adr r3, 800c8b8 <__kernel_cos+0x158>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 fd5a 	bl	8000288 <__aeabi_dsub>
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	462b      	mov	r3, r5
 800c7d8:	f7f3 ff0e 	bl	80005f8 <__aeabi_dmul>
 800c7dc:	a338      	add	r3, pc, #224	; (adr r3, 800c8c0 <__kernel_cos+0x160>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f7f3 fd53 	bl	800028c <__adddf3>
 800c7e6:	4622      	mov	r2, r4
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	f7f3 ff05 	bl	80005f8 <__aeabi_dmul>
 800c7ee:	a336      	add	r3, pc, #216	; (adr r3, 800c8c8 <__kernel_cos+0x168>)
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	f7f3 fd48 	bl	8000288 <__aeabi_dsub>
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	462b      	mov	r3, r5
 800c7fc:	f7f3 fefc 	bl	80005f8 <__aeabi_dmul>
 800c800:	a333      	add	r3, pc, #204	; (adr r3, 800c8d0 <__kernel_cos+0x170>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	f7f3 fd41 	bl	800028c <__adddf3>
 800c80a:	4622      	mov	r2, r4
 800c80c:	462b      	mov	r3, r5
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	4622      	mov	r2, r4
 800c814:	462b      	mov	r3, r5
 800c816:	f7f3 feef 	bl	80005f8 <__aeabi_dmul>
 800c81a:	ec53 2b18 	vmov	r2, r3, d8
 800c81e:	4604      	mov	r4, r0
 800c820:	460d      	mov	r5, r1
 800c822:	4640      	mov	r0, r8
 800c824:	4649      	mov	r1, r9
 800c826:	f7f3 fee7 	bl	80005f8 <__aeabi_dmul>
 800c82a:	460b      	mov	r3, r1
 800c82c:	4602      	mov	r2, r0
 800c82e:	4629      	mov	r1, r5
 800c830:	4620      	mov	r0, r4
 800c832:	f7f3 fd29 	bl	8000288 <__aeabi_dsub>
 800c836:	4b29      	ldr	r3, [pc, #164]	; (800c8dc <__kernel_cos+0x17c>)
 800c838:	429e      	cmp	r6, r3
 800c83a:	4680      	mov	r8, r0
 800c83c:	4689      	mov	r9, r1
 800c83e:	dc11      	bgt.n	800c864 <__kernel_cos+0x104>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4650      	mov	r0, sl
 800c846:	4659      	mov	r1, fp
 800c848:	f7f3 fd1e 	bl	8000288 <__aeabi_dsub>
 800c84c:	460b      	mov	r3, r1
 800c84e:	4924      	ldr	r1, [pc, #144]	; (800c8e0 <__kernel_cos+0x180>)
 800c850:	4602      	mov	r2, r0
 800c852:	2000      	movs	r0, #0
 800c854:	f7f3 fd18 	bl	8000288 <__aeabi_dsub>
 800c858:	ecbd 8b02 	vpop	{d8}
 800c85c:	ec41 0b10 	vmov	d0, r0, r1
 800c860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c864:	4b1f      	ldr	r3, [pc, #124]	; (800c8e4 <__kernel_cos+0x184>)
 800c866:	491e      	ldr	r1, [pc, #120]	; (800c8e0 <__kernel_cos+0x180>)
 800c868:	429e      	cmp	r6, r3
 800c86a:	bfcc      	ite	gt
 800c86c:	4d1e      	ldrgt	r5, [pc, #120]	; (800c8e8 <__kernel_cos+0x188>)
 800c86e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c872:	2400      	movs	r4, #0
 800c874:	4622      	mov	r2, r4
 800c876:	462b      	mov	r3, r5
 800c878:	2000      	movs	r0, #0
 800c87a:	f7f3 fd05 	bl	8000288 <__aeabi_dsub>
 800c87e:	4622      	mov	r2, r4
 800c880:	4606      	mov	r6, r0
 800c882:	460f      	mov	r7, r1
 800c884:	462b      	mov	r3, r5
 800c886:	4650      	mov	r0, sl
 800c888:	4659      	mov	r1, fp
 800c88a:	f7f3 fcfd 	bl	8000288 <__aeabi_dsub>
 800c88e:	4642      	mov	r2, r8
 800c890:	464b      	mov	r3, r9
 800c892:	f7f3 fcf9 	bl	8000288 <__aeabi_dsub>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4630      	mov	r0, r6
 800c89c:	4639      	mov	r1, r7
 800c89e:	e7d9      	b.n	800c854 <__kernel_cos+0xf4>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	490f      	ldr	r1, [pc, #60]	; (800c8e0 <__kernel_cos+0x180>)
 800c8a4:	e7d8      	b.n	800c858 <__kernel_cos+0xf8>
 800c8a6:	bf00      	nop
 800c8a8:	be8838d4 	.word	0xbe8838d4
 800c8ac:	bda8fae9 	.word	0xbda8fae9
 800c8b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c8b4:	3e21ee9e 	.word	0x3e21ee9e
 800c8b8:	809c52ad 	.word	0x809c52ad
 800c8bc:	3e927e4f 	.word	0x3e927e4f
 800c8c0:	19cb1590 	.word	0x19cb1590
 800c8c4:	3efa01a0 	.word	0x3efa01a0
 800c8c8:	16c15177 	.word	0x16c15177
 800c8cc:	3f56c16c 	.word	0x3f56c16c
 800c8d0:	5555554c 	.word	0x5555554c
 800c8d4:	3fa55555 	.word	0x3fa55555
 800c8d8:	3fe00000 	.word	0x3fe00000
 800c8dc:	3fd33332 	.word	0x3fd33332
 800c8e0:	3ff00000 	.word	0x3ff00000
 800c8e4:	3fe90000 	.word	0x3fe90000
 800c8e8:	3fd20000 	.word	0x3fd20000
 800c8ec:	00000000 	.word	0x00000000

0800c8f0 <__kernel_rem_pio2>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	ed2d 8b02 	vpush	{d8}
 800c8f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c8fc:	1ed4      	subs	r4, r2, #3
 800c8fe:	9308      	str	r3, [sp, #32]
 800c900:	9101      	str	r1, [sp, #4]
 800c902:	4bc5      	ldr	r3, [pc, #788]	; (800cc18 <__kernel_rem_pio2+0x328>)
 800c904:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c906:	9009      	str	r0, [sp, #36]	; 0x24
 800c908:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c90c:	9304      	str	r3, [sp, #16]
 800c90e:	9b08      	ldr	r3, [sp, #32]
 800c910:	3b01      	subs	r3, #1
 800c912:	9307      	str	r3, [sp, #28]
 800c914:	2318      	movs	r3, #24
 800c916:	fb94 f4f3 	sdiv	r4, r4, r3
 800c91a:	f06f 0317 	mvn.w	r3, #23
 800c91e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c922:	fb04 3303 	mla	r3, r4, r3, r3
 800c926:	eb03 0a02 	add.w	sl, r3, r2
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	9a07      	ldr	r2, [sp, #28]
 800c92e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cc08 <__kernel_rem_pio2+0x318>
 800c932:	eb03 0802 	add.w	r8, r3, r2
 800c936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c938:	1aa7      	subs	r7, r4, r2
 800c93a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c93e:	ae22      	add	r6, sp, #136	; 0x88
 800c940:	2500      	movs	r5, #0
 800c942:	4545      	cmp	r5, r8
 800c944:	dd13      	ble.n	800c96e <__kernel_rem_pio2+0x7e>
 800c946:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800cc08 <__kernel_rem_pio2+0x318>
 800c94a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c94e:	2600      	movs	r6, #0
 800c950:	9b04      	ldr	r3, [sp, #16]
 800c952:	429e      	cmp	r6, r3
 800c954:	dc32      	bgt.n	800c9bc <__kernel_rem_pio2+0xcc>
 800c956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c958:	9302      	str	r3, [sp, #8]
 800c95a:	9b08      	ldr	r3, [sp, #32]
 800c95c:	199d      	adds	r5, r3, r6
 800c95e:	ab22      	add	r3, sp, #136	; 0x88
 800c960:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c964:	9306      	str	r3, [sp, #24]
 800c966:	ec59 8b18 	vmov	r8, r9, d8
 800c96a:	2700      	movs	r7, #0
 800c96c:	e01f      	b.n	800c9ae <__kernel_rem_pio2+0xbe>
 800c96e:	42ef      	cmn	r7, r5
 800c970:	d407      	bmi.n	800c982 <__kernel_rem_pio2+0x92>
 800c972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c976:	f7f3 fdd5 	bl	8000524 <__aeabi_i2d>
 800c97a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c97e:	3501      	adds	r5, #1
 800c980:	e7df      	b.n	800c942 <__kernel_rem_pio2+0x52>
 800c982:	ec51 0b18 	vmov	r0, r1, d8
 800c986:	e7f8      	b.n	800c97a <__kernel_rem_pio2+0x8a>
 800c988:	9906      	ldr	r1, [sp, #24]
 800c98a:	9d02      	ldr	r5, [sp, #8]
 800c98c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c990:	9106      	str	r1, [sp, #24]
 800c992:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c996:	9502      	str	r5, [sp, #8]
 800c998:	f7f3 fe2e 	bl	80005f8 <__aeabi_dmul>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	f7f3 fc72 	bl	800028c <__adddf3>
 800c9a8:	3701      	adds	r7, #1
 800c9aa:	4680      	mov	r8, r0
 800c9ac:	4689      	mov	r9, r1
 800c9ae:	9b07      	ldr	r3, [sp, #28]
 800c9b0:	429f      	cmp	r7, r3
 800c9b2:	dde9      	ble.n	800c988 <__kernel_rem_pio2+0x98>
 800c9b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	e7c9      	b.n	800c950 <__kernel_rem_pio2+0x60>
 800c9bc:	9b04      	ldr	r3, [sp, #16]
 800c9be:	aa0e      	add	r2, sp, #56	; 0x38
 800c9c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9c4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c9c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c9cc:	9c04      	ldr	r4, [sp, #16]
 800c9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9d0:	ab9a      	add	r3, sp, #616	; 0x268
 800c9d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c9d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c9e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c9e6:	ab9a      	add	r3, sp, #616	; 0x268
 800c9e8:	445b      	add	r3, fp
 800c9ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	1b63      	subs	r3, r4, r5
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	dc78      	bgt.n	800cae8 <__kernel_rem_pio2+0x1f8>
 800c9f6:	4650      	mov	r0, sl
 800c9f8:	ec49 8b10 	vmov	d0, r8, r9
 800c9fc:	f001 f8d0 	bl	800dba0 <scalbn>
 800ca00:	ec57 6b10 	vmov	r6, r7, d0
 800ca04:	2200      	movs	r2, #0
 800ca06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ca0a:	ee10 0a10 	vmov	r0, s0
 800ca0e:	4639      	mov	r1, r7
 800ca10:	f7f3 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ca14:	ec41 0b10 	vmov	d0, r0, r1
 800ca18:	f001 f83a 	bl	800da90 <floor>
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	ec51 0b10 	vmov	r0, r1, d0
 800ca22:	4b7e      	ldr	r3, [pc, #504]	; (800cc1c <__kernel_rem_pio2+0x32c>)
 800ca24:	f7f3 fde8 	bl	80005f8 <__aeabi_dmul>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	4639      	mov	r1, r7
 800ca30:	f7f3 fc2a 	bl	8000288 <__aeabi_dsub>
 800ca34:	460f      	mov	r7, r1
 800ca36:	4606      	mov	r6, r0
 800ca38:	f7f4 f88e 	bl	8000b58 <__aeabi_d2iz>
 800ca3c:	9006      	str	r0, [sp, #24]
 800ca3e:	f7f3 fd71 	bl	8000524 <__aeabi_i2d>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f3 fc1d 	bl	8000288 <__aeabi_dsub>
 800ca4e:	f1ba 0f00 	cmp.w	sl, #0
 800ca52:	4606      	mov	r6, r0
 800ca54:	460f      	mov	r7, r1
 800ca56:	dd6c      	ble.n	800cb32 <__kernel_rem_pio2+0x242>
 800ca58:	1e62      	subs	r2, r4, #1
 800ca5a:	ab0e      	add	r3, sp, #56	; 0x38
 800ca5c:	f1ca 0118 	rsb	r1, sl, #24
 800ca60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ca64:	9d06      	ldr	r5, [sp, #24]
 800ca66:	fa40 f301 	asr.w	r3, r0, r1
 800ca6a:	441d      	add	r5, r3
 800ca6c:	408b      	lsls	r3, r1
 800ca6e:	1ac0      	subs	r0, r0, r3
 800ca70:	ab0e      	add	r3, sp, #56	; 0x38
 800ca72:	9506      	str	r5, [sp, #24]
 800ca74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ca78:	f1ca 0317 	rsb	r3, sl, #23
 800ca7c:	fa40 f303 	asr.w	r3, r0, r3
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	9b02      	ldr	r3, [sp, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dd62      	ble.n	800cb4e <__kernel_rem_pio2+0x25e>
 800ca88:	9b06      	ldr	r3, [sp, #24]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	9306      	str	r3, [sp, #24]
 800ca90:	4615      	mov	r5, r2
 800ca92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ca96:	4294      	cmp	r4, r2
 800ca98:	f300 8095 	bgt.w	800cbc6 <__kernel_rem_pio2+0x2d6>
 800ca9c:	f1ba 0f00 	cmp.w	sl, #0
 800caa0:	dd07      	ble.n	800cab2 <__kernel_rem_pio2+0x1c2>
 800caa2:	f1ba 0f01 	cmp.w	sl, #1
 800caa6:	f000 80a2 	beq.w	800cbee <__kernel_rem_pio2+0x2fe>
 800caaa:	f1ba 0f02 	cmp.w	sl, #2
 800caae:	f000 80c1 	beq.w	800cc34 <__kernel_rem_pio2+0x344>
 800cab2:	9b02      	ldr	r3, [sp, #8]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d14a      	bne.n	800cb4e <__kernel_rem_pio2+0x25e>
 800cab8:	4632      	mov	r2, r6
 800caba:	463b      	mov	r3, r7
 800cabc:	2000      	movs	r0, #0
 800cabe:	4958      	ldr	r1, [pc, #352]	; (800cc20 <__kernel_rem_pio2+0x330>)
 800cac0:	f7f3 fbe2 	bl	8000288 <__aeabi_dsub>
 800cac4:	4606      	mov	r6, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	2d00      	cmp	r5, #0
 800caca:	d040      	beq.n	800cb4e <__kernel_rem_pio2+0x25e>
 800cacc:	4650      	mov	r0, sl
 800cace:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cc10 <__kernel_rem_pio2+0x320>
 800cad2:	f001 f865 	bl	800dba0 <scalbn>
 800cad6:	4630      	mov	r0, r6
 800cad8:	4639      	mov	r1, r7
 800cada:	ec53 2b10 	vmov	r2, r3, d0
 800cade:	f7f3 fbd3 	bl	8000288 <__aeabi_dsub>
 800cae2:	4606      	mov	r6, r0
 800cae4:	460f      	mov	r7, r1
 800cae6:	e032      	b.n	800cb4e <__kernel_rem_pio2+0x25e>
 800cae8:	2200      	movs	r2, #0
 800caea:	4b4e      	ldr	r3, [pc, #312]	; (800cc24 <__kernel_rem_pio2+0x334>)
 800caec:	4640      	mov	r0, r8
 800caee:	4649      	mov	r1, r9
 800caf0:	f7f3 fd82 	bl	80005f8 <__aeabi_dmul>
 800caf4:	f7f4 f830 	bl	8000b58 <__aeabi_d2iz>
 800caf8:	f7f3 fd14 	bl	8000524 <__aeabi_i2d>
 800cafc:	2200      	movs	r2, #0
 800cafe:	4b4a      	ldr	r3, [pc, #296]	; (800cc28 <__kernel_rem_pio2+0x338>)
 800cb00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb04:	f7f3 fd78 	bl	80005f8 <__aeabi_dmul>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	4649      	mov	r1, r9
 800cb10:	f7f3 fbba 	bl	8000288 <__aeabi_dsub>
 800cb14:	f7f4 f820 	bl	8000b58 <__aeabi_d2iz>
 800cb18:	ab0e      	add	r3, sp, #56	; 0x38
 800cb1a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cb1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cb22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb26:	f7f3 fbb1 	bl	800028c <__adddf3>
 800cb2a:	3501      	adds	r5, #1
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	4689      	mov	r9, r1
 800cb30:	e75e      	b.n	800c9f0 <__kernel_rem_pio2+0x100>
 800cb32:	d105      	bne.n	800cb40 <__kernel_rem_pio2+0x250>
 800cb34:	1e63      	subs	r3, r4, #1
 800cb36:	aa0e      	add	r2, sp, #56	; 0x38
 800cb38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cb3c:	15c3      	asrs	r3, r0, #23
 800cb3e:	e79f      	b.n	800ca80 <__kernel_rem_pio2+0x190>
 800cb40:	2200      	movs	r2, #0
 800cb42:	4b3a      	ldr	r3, [pc, #232]	; (800cc2c <__kernel_rem_pio2+0x33c>)
 800cb44:	f7f3 ffde 	bl	8000b04 <__aeabi_dcmpge>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d139      	bne.n	800cbc0 <__kernel_rem_pio2+0x2d0>
 800cb4c:	9002      	str	r0, [sp, #8]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2300      	movs	r3, #0
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	f7f3 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	f000 80c7 	beq.w	800ccee <__kernel_rem_pio2+0x3fe>
 800cb60:	1e65      	subs	r5, r4, #1
 800cb62:	462b      	mov	r3, r5
 800cb64:	2200      	movs	r2, #0
 800cb66:	9904      	ldr	r1, [sp, #16]
 800cb68:	428b      	cmp	r3, r1
 800cb6a:	da6a      	bge.n	800cc42 <__kernel_rem_pio2+0x352>
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	f000 8088 	beq.w	800cc82 <__kernel_rem_pio2+0x392>
 800cb72:	ab0e      	add	r3, sp, #56	; 0x38
 800cb74:	f1aa 0a18 	sub.w	sl, sl, #24
 800cb78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 80b4 	beq.w	800ccea <__kernel_rem_pio2+0x3fa>
 800cb82:	4650      	mov	r0, sl
 800cb84:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800cc10 <__kernel_rem_pio2+0x320>
 800cb88:	f001 f80a 	bl	800dba0 <scalbn>
 800cb8c:	00ec      	lsls	r4, r5, #3
 800cb8e:	ab72      	add	r3, sp, #456	; 0x1c8
 800cb90:	191e      	adds	r6, r3, r4
 800cb92:	ec59 8b10 	vmov	r8, r9, d0
 800cb96:	f106 0a08 	add.w	sl, r6, #8
 800cb9a:	462f      	mov	r7, r5
 800cb9c:	2f00      	cmp	r7, #0
 800cb9e:	f280 80df 	bge.w	800cd60 <__kernel_rem_pio2+0x470>
 800cba2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800cc08 <__kernel_rem_pio2+0x318>
 800cba6:	f04f 0a00 	mov.w	sl, #0
 800cbaa:	eba5 030a 	sub.w	r3, r5, sl
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f2c0 810a 	blt.w	800cdc8 <__kernel_rem_pio2+0x4d8>
 800cbb4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800cc30 <__kernel_rem_pio2+0x340>
 800cbb8:	ec59 8b18 	vmov	r8, r9, d8
 800cbbc:	2700      	movs	r7, #0
 800cbbe:	e0f5      	b.n	800cdac <__kernel_rem_pio2+0x4bc>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	9302      	str	r3, [sp, #8]
 800cbc4:	e760      	b.n	800ca88 <__kernel_rem_pio2+0x198>
 800cbc6:	ab0e      	add	r3, sp, #56	; 0x38
 800cbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbcc:	b94d      	cbnz	r5, 800cbe2 <__kernel_rem_pio2+0x2f2>
 800cbce:	b12b      	cbz	r3, 800cbdc <__kernel_rem_pio2+0x2ec>
 800cbd0:	a80e      	add	r0, sp, #56	; 0x38
 800cbd2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cbd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cbda:	2301      	movs	r3, #1
 800cbdc:	3201      	adds	r2, #1
 800cbde:	461d      	mov	r5, r3
 800cbe0:	e759      	b.n	800ca96 <__kernel_rem_pio2+0x1a6>
 800cbe2:	a80e      	add	r0, sp, #56	; 0x38
 800cbe4:	1acb      	subs	r3, r1, r3
 800cbe6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cbea:	462b      	mov	r3, r5
 800cbec:	e7f6      	b.n	800cbdc <__kernel_rem_pio2+0x2ec>
 800cbee:	1e62      	subs	r2, r4, #1
 800cbf0:	ab0e      	add	r3, sp, #56	; 0x38
 800cbf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cbfa:	a90e      	add	r1, sp, #56	; 0x38
 800cbfc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc00:	e757      	b.n	800cab2 <__kernel_rem_pio2+0x1c2>
 800cc02:	bf00      	nop
 800cc04:	f3af 8000 	nop.w
	...
 800cc14:	3ff00000 	.word	0x3ff00000
 800cc18:	080127f8 	.word	0x080127f8
 800cc1c:	40200000 	.word	0x40200000
 800cc20:	3ff00000 	.word	0x3ff00000
 800cc24:	3e700000 	.word	0x3e700000
 800cc28:	41700000 	.word	0x41700000
 800cc2c:	3fe00000 	.word	0x3fe00000
 800cc30:	080127b8 	.word	0x080127b8
 800cc34:	1e62      	subs	r2, r4, #1
 800cc36:	ab0e      	add	r3, sp, #56	; 0x38
 800cc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc40:	e7db      	b.n	800cbfa <__kernel_rem_pio2+0x30a>
 800cc42:	a90e      	add	r1, sp, #56	; 0x38
 800cc44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	e78b      	b.n	800cb66 <__kernel_rem_pio2+0x276>
 800cc4e:	3301      	adds	r3, #1
 800cc50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cc54:	2900      	cmp	r1, #0
 800cc56:	d0fa      	beq.n	800cc4e <__kernel_rem_pio2+0x35e>
 800cc58:	9a08      	ldr	r2, [sp, #32]
 800cc5a:	4422      	add	r2, r4
 800cc5c:	00d2      	lsls	r2, r2, #3
 800cc5e:	a922      	add	r1, sp, #136	; 0x88
 800cc60:	18e3      	adds	r3, r4, r3
 800cc62:	9206      	str	r2, [sp, #24]
 800cc64:	440a      	add	r2, r1
 800cc66:	9302      	str	r3, [sp, #8]
 800cc68:	f10b 0108 	add.w	r1, fp, #8
 800cc6c:	f102 0308 	add.w	r3, r2, #8
 800cc70:	1c66      	adds	r6, r4, #1
 800cc72:	910a      	str	r1, [sp, #40]	; 0x28
 800cc74:	2500      	movs	r5, #0
 800cc76:	930d      	str	r3, [sp, #52]	; 0x34
 800cc78:	9b02      	ldr	r3, [sp, #8]
 800cc7a:	42b3      	cmp	r3, r6
 800cc7c:	da04      	bge.n	800cc88 <__kernel_rem_pio2+0x398>
 800cc7e:	461c      	mov	r4, r3
 800cc80:	e6a6      	b.n	800c9d0 <__kernel_rem_pio2+0xe0>
 800cc82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc84:	2301      	movs	r3, #1
 800cc86:	e7e3      	b.n	800cc50 <__kernel_rem_pio2+0x360>
 800cc88:	9b06      	ldr	r3, [sp, #24]
 800cc8a:	18ef      	adds	r7, r5, r3
 800cc8c:	ab22      	add	r3, sp, #136	; 0x88
 800cc8e:	441f      	add	r7, r3
 800cc90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cc96:	f7f3 fc45 	bl	8000524 <__aeabi_i2d>
 800cc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9c:	461c      	mov	r4, r3
 800cc9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cca0:	e9c7 0100 	strd	r0, r1, [r7]
 800cca4:	eb03 0b05 	add.w	fp, r3, r5
 800cca8:	2700      	movs	r7, #0
 800ccaa:	f04f 0800 	mov.w	r8, #0
 800ccae:	f04f 0900 	mov.w	r9, #0
 800ccb2:	9b07      	ldr	r3, [sp, #28]
 800ccb4:	429f      	cmp	r7, r3
 800ccb6:	dd08      	ble.n	800ccca <__kernel_rem_pio2+0x3da>
 800ccb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccba:	aa72      	add	r2, sp, #456	; 0x1c8
 800ccbc:	18eb      	adds	r3, r5, r3
 800ccbe:	4413      	add	r3, r2
 800ccc0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800ccc4:	3601      	adds	r6, #1
 800ccc6:	3508      	adds	r5, #8
 800ccc8:	e7d6      	b.n	800cc78 <__kernel_rem_pio2+0x388>
 800ccca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ccce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4640      	mov	r0, r8
 800ccdc:	4649      	mov	r1, r9
 800ccde:	f7f3 fad5 	bl	800028c <__adddf3>
 800cce2:	3701      	adds	r7, #1
 800cce4:	4680      	mov	r8, r0
 800cce6:	4689      	mov	r9, r1
 800cce8:	e7e3      	b.n	800ccb2 <__kernel_rem_pio2+0x3c2>
 800ccea:	3d01      	subs	r5, #1
 800ccec:	e741      	b.n	800cb72 <__kernel_rem_pio2+0x282>
 800ccee:	f1ca 0000 	rsb	r0, sl, #0
 800ccf2:	ec47 6b10 	vmov	d0, r6, r7
 800ccf6:	f000 ff53 	bl	800dba0 <scalbn>
 800ccfa:	ec57 6b10 	vmov	r6, r7, d0
 800ccfe:	2200      	movs	r2, #0
 800cd00:	4b99      	ldr	r3, [pc, #612]	; (800cf68 <__kernel_rem_pio2+0x678>)
 800cd02:	ee10 0a10 	vmov	r0, s0
 800cd06:	4639      	mov	r1, r7
 800cd08:	f7f3 fefc 	bl	8000b04 <__aeabi_dcmpge>
 800cd0c:	b1f8      	cbz	r0, 800cd4e <__kernel_rem_pio2+0x45e>
 800cd0e:	2200      	movs	r2, #0
 800cd10:	4b96      	ldr	r3, [pc, #600]	; (800cf6c <__kernel_rem_pio2+0x67c>)
 800cd12:	4630      	mov	r0, r6
 800cd14:	4639      	mov	r1, r7
 800cd16:	f7f3 fc6f 	bl	80005f8 <__aeabi_dmul>
 800cd1a:	f7f3 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800cd1e:	4680      	mov	r8, r0
 800cd20:	f7f3 fc00 	bl	8000524 <__aeabi_i2d>
 800cd24:	2200      	movs	r2, #0
 800cd26:	4b90      	ldr	r3, [pc, #576]	; (800cf68 <__kernel_rem_pio2+0x678>)
 800cd28:	f7f3 fc66 	bl	80005f8 <__aeabi_dmul>
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4602      	mov	r2, r0
 800cd30:	4639      	mov	r1, r7
 800cd32:	4630      	mov	r0, r6
 800cd34:	f7f3 faa8 	bl	8000288 <__aeabi_dsub>
 800cd38:	f7f3 ff0e 	bl	8000b58 <__aeabi_d2iz>
 800cd3c:	1c65      	adds	r5, r4, #1
 800cd3e:	ab0e      	add	r3, sp, #56	; 0x38
 800cd40:	f10a 0a18 	add.w	sl, sl, #24
 800cd44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd48:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cd4c:	e719      	b.n	800cb82 <__kernel_rem_pio2+0x292>
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7f3 ff01 	bl	8000b58 <__aeabi_d2iz>
 800cd56:	ab0e      	add	r3, sp, #56	; 0x38
 800cd58:	4625      	mov	r5, r4
 800cd5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cd5e:	e710      	b.n	800cb82 <__kernel_rem_pio2+0x292>
 800cd60:	ab0e      	add	r3, sp, #56	; 0x38
 800cd62:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cd66:	f7f3 fbdd 	bl	8000524 <__aeabi_i2d>
 800cd6a:	4642      	mov	r2, r8
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	f7f3 fc43 	bl	80005f8 <__aeabi_dmul>
 800cd72:	2200      	movs	r2, #0
 800cd74:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cd78:	4b7c      	ldr	r3, [pc, #496]	; (800cf6c <__kernel_rem_pio2+0x67c>)
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f7f3 fc3b 	bl	80005f8 <__aeabi_dmul>
 800cd82:	3f01      	subs	r7, #1
 800cd84:	4680      	mov	r8, r0
 800cd86:	4689      	mov	r9, r1
 800cd88:	e708      	b.n	800cb9c <__kernel_rem_pio2+0x2ac>
 800cd8a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd92:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800cd96:	f7f3 fc2f 	bl	80005f8 <__aeabi_dmul>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4640      	mov	r0, r8
 800cda0:	4649      	mov	r1, r9
 800cda2:	f7f3 fa73 	bl	800028c <__adddf3>
 800cda6:	3701      	adds	r7, #1
 800cda8:	4680      	mov	r8, r0
 800cdaa:	4689      	mov	r9, r1
 800cdac:	9b04      	ldr	r3, [sp, #16]
 800cdae:	429f      	cmp	r7, r3
 800cdb0:	dc01      	bgt.n	800cdb6 <__kernel_rem_pio2+0x4c6>
 800cdb2:	45ba      	cmp	sl, r7
 800cdb4:	dae9      	bge.n	800cd8a <__kernel_rem_pio2+0x49a>
 800cdb6:	ab4a      	add	r3, sp, #296	; 0x128
 800cdb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cdbc:	e9c3 8900 	strd	r8, r9, [r3]
 800cdc0:	f10a 0a01 	add.w	sl, sl, #1
 800cdc4:	3e08      	subs	r6, #8
 800cdc6:	e6f0      	b.n	800cbaa <__kernel_rem_pio2+0x2ba>
 800cdc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d85b      	bhi.n	800ce86 <__kernel_rem_pio2+0x596>
 800cdce:	e8df f003 	tbb	[pc, r3]
 800cdd2:	264a      	.short	0x264a
 800cdd4:	0226      	.short	0x0226
 800cdd6:	ab9a      	add	r3, sp, #616	; 0x268
 800cdd8:	441c      	add	r4, r3
 800cdda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cdde:	46a2      	mov	sl, r4
 800cde0:	46ab      	mov	fp, r5
 800cde2:	f1bb 0f00 	cmp.w	fp, #0
 800cde6:	dc6c      	bgt.n	800cec2 <__kernel_rem_pio2+0x5d2>
 800cde8:	46a2      	mov	sl, r4
 800cdea:	46ab      	mov	fp, r5
 800cdec:	f1bb 0f01 	cmp.w	fp, #1
 800cdf0:	f300 8086 	bgt.w	800cf00 <__kernel_rem_pio2+0x610>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	2d01      	cmp	r5, #1
 800cdfa:	f300 80a0 	bgt.w	800cf3e <__kernel_rem_pio2+0x64e>
 800cdfe:	9b02      	ldr	r3, [sp, #8]
 800ce00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ce04:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 809e 	bne.w	800cf4a <__kernel_rem_pio2+0x65a>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	e9c3 7800 	strd	r7, r8, [r3]
 800ce14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ce18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ce1c:	e033      	b.n	800ce86 <__kernel_rem_pio2+0x596>
 800ce1e:	3408      	adds	r4, #8
 800ce20:	ab4a      	add	r3, sp, #296	; 0x128
 800ce22:	441c      	add	r4, r3
 800ce24:	462e      	mov	r6, r5
 800ce26:	2000      	movs	r0, #0
 800ce28:	2100      	movs	r1, #0
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	da3a      	bge.n	800cea4 <__kernel_rem_pio2+0x5b4>
 800ce2e:	9b02      	ldr	r3, [sp, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d03d      	beq.n	800ceb0 <__kernel_rem_pio2+0x5c0>
 800ce34:	4602      	mov	r2, r0
 800ce36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce3a:	9c01      	ldr	r4, [sp, #4]
 800ce3c:	e9c4 2300 	strd	r2, r3, [r4]
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ce48:	f7f3 fa1e 	bl	8000288 <__aeabi_dsub>
 800ce4c:	ae4c      	add	r6, sp, #304	; 0x130
 800ce4e:	2401      	movs	r4, #1
 800ce50:	42a5      	cmp	r5, r4
 800ce52:	da30      	bge.n	800ceb6 <__kernel_rem_pio2+0x5c6>
 800ce54:	9b02      	ldr	r3, [sp, #8]
 800ce56:	b113      	cbz	r3, 800ce5e <__kernel_rem_pio2+0x56e>
 800ce58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	9b01      	ldr	r3, [sp, #4]
 800ce60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ce64:	e00f      	b.n	800ce86 <__kernel_rem_pio2+0x596>
 800ce66:	ab9a      	add	r3, sp, #616	; 0x268
 800ce68:	441c      	add	r4, r3
 800ce6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ce6e:	2000      	movs	r0, #0
 800ce70:	2100      	movs	r1, #0
 800ce72:	2d00      	cmp	r5, #0
 800ce74:	da10      	bge.n	800ce98 <__kernel_rem_pio2+0x5a8>
 800ce76:	9b02      	ldr	r3, [sp, #8]
 800ce78:	b113      	cbz	r3, 800ce80 <__kernel_rem_pio2+0x590>
 800ce7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce7e:	4619      	mov	r1, r3
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	e9c3 0100 	strd	r0, r1, [r3]
 800ce86:	9b06      	ldr	r3, [sp, #24]
 800ce88:	f003 0007 	and.w	r0, r3, #7
 800ce8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ce90:	ecbd 8b02 	vpop	{d8}
 800ce94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce9c:	f7f3 f9f6 	bl	800028c <__adddf3>
 800cea0:	3d01      	subs	r5, #1
 800cea2:	e7e6      	b.n	800ce72 <__kernel_rem_pio2+0x582>
 800cea4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cea8:	f7f3 f9f0 	bl	800028c <__adddf3>
 800ceac:	3e01      	subs	r6, #1
 800ceae:	e7bc      	b.n	800ce2a <__kernel_rem_pio2+0x53a>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	e7c1      	b.n	800ce3a <__kernel_rem_pio2+0x54a>
 800ceb6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ceba:	f7f3 f9e7 	bl	800028c <__adddf3>
 800cebe:	3401      	adds	r4, #1
 800cec0:	e7c6      	b.n	800ce50 <__kernel_rem_pio2+0x560>
 800cec2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800cec6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ceca:	4640      	mov	r0, r8
 800cecc:	ec53 2b17 	vmov	r2, r3, d7
 800ced0:	4649      	mov	r1, r9
 800ced2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ced6:	f7f3 f9d9 	bl	800028c <__adddf3>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	4606      	mov	r6, r0
 800cee0:	460f      	mov	r7, r1
 800cee2:	4640      	mov	r0, r8
 800cee4:	4649      	mov	r1, r9
 800cee6:	f7f3 f9cf 	bl	8000288 <__aeabi_dsub>
 800ceea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ceee:	f7f3 f9cd 	bl	800028c <__adddf3>
 800cef2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cef6:	e9ca 0100 	strd	r0, r1, [sl]
 800cefa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800cefe:	e770      	b.n	800cde2 <__kernel_rem_pio2+0x4f2>
 800cf00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800cf04:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cf08:	4630      	mov	r0, r6
 800cf0a:	ec53 2b17 	vmov	r2, r3, d7
 800cf0e:	4639      	mov	r1, r7
 800cf10:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cf14:	f7f3 f9ba 	bl	800028c <__adddf3>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	4689      	mov	r9, r1
 800cf20:	4630      	mov	r0, r6
 800cf22:	4639      	mov	r1, r7
 800cf24:	f7f3 f9b0 	bl	8000288 <__aeabi_dsub>
 800cf28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf2c:	f7f3 f9ae 	bl	800028c <__adddf3>
 800cf30:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf34:	e9ca 0100 	strd	r0, r1, [sl]
 800cf38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800cf3c:	e756      	b.n	800cdec <__kernel_rem_pio2+0x4fc>
 800cf3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf42:	f7f3 f9a3 	bl	800028c <__adddf3>
 800cf46:	3d01      	subs	r5, #1
 800cf48:	e756      	b.n	800cdf8 <__kernel_rem_pio2+0x508>
 800cf4a:	9b01      	ldr	r3, [sp, #4]
 800cf4c:	9a01      	ldr	r2, [sp, #4]
 800cf4e:	601f      	str	r7, [r3, #0]
 800cf50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cf54:	605c      	str	r4, [r3, #4]
 800cf56:	609d      	str	r5, [r3, #8]
 800cf58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cf5c:	60d3      	str	r3, [r2, #12]
 800cf5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf62:	6110      	str	r0, [r2, #16]
 800cf64:	6153      	str	r3, [r2, #20]
 800cf66:	e78e      	b.n	800ce86 <__kernel_rem_pio2+0x596>
 800cf68:	41700000 	.word	0x41700000
 800cf6c:	3e700000 	.word	0x3e700000

0800cf70 <__kernel_sin>:
 800cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	ec55 4b10 	vmov	r4, r5, d0
 800cf78:	b085      	sub	sp, #20
 800cf7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cf82:	ed8d 1b00 	vstr	d1, [sp]
 800cf86:	9002      	str	r0, [sp, #8]
 800cf88:	da06      	bge.n	800cf98 <__kernel_sin+0x28>
 800cf8a:	ee10 0a10 	vmov	r0, s0
 800cf8e:	4629      	mov	r1, r5
 800cf90:	f7f3 fde2 	bl	8000b58 <__aeabi_d2iz>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d051      	beq.n	800d03c <__kernel_sin+0xcc>
 800cf98:	4622      	mov	r2, r4
 800cf9a:	462b      	mov	r3, r5
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	f7f3 fb2a 	bl	80005f8 <__aeabi_dmul>
 800cfa4:	4682      	mov	sl, r0
 800cfa6:	468b      	mov	fp, r1
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4620      	mov	r0, r4
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f7f3 fb22 	bl	80005f8 <__aeabi_dmul>
 800cfb4:	a341      	add	r3, pc, #260	; (adr r3, 800d0bc <__kernel_sin+0x14c>)
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	4680      	mov	r8, r0
 800cfbc:	4689      	mov	r9, r1
 800cfbe:	4650      	mov	r0, sl
 800cfc0:	4659      	mov	r1, fp
 800cfc2:	f7f3 fb19 	bl	80005f8 <__aeabi_dmul>
 800cfc6:	a33f      	add	r3, pc, #252	; (adr r3, 800d0c4 <__kernel_sin+0x154>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	f7f3 f95c 	bl	8000288 <__aeabi_dsub>
 800cfd0:	4652      	mov	r2, sl
 800cfd2:	465b      	mov	r3, fp
 800cfd4:	f7f3 fb10 	bl	80005f8 <__aeabi_dmul>
 800cfd8:	a33c      	add	r3, pc, #240	; (adr r3, 800d0cc <__kernel_sin+0x15c>)
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	f7f3 f955 	bl	800028c <__adddf3>
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	465b      	mov	r3, fp
 800cfe6:	f7f3 fb07 	bl	80005f8 <__aeabi_dmul>
 800cfea:	a33a      	add	r3, pc, #232	; (adr r3, 800d0d4 <__kernel_sin+0x164>)
 800cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff0:	f7f3 f94a 	bl	8000288 <__aeabi_dsub>
 800cff4:	4652      	mov	r2, sl
 800cff6:	465b      	mov	r3, fp
 800cff8:	f7f3 fafe 	bl	80005f8 <__aeabi_dmul>
 800cffc:	a337      	add	r3, pc, #220	; (adr r3, 800d0dc <__kernel_sin+0x16c>)
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	f7f3 f943 	bl	800028c <__adddf3>
 800d006:	9b02      	ldr	r3, [sp, #8]
 800d008:	4606      	mov	r6, r0
 800d00a:	460f      	mov	r7, r1
 800d00c:	b9db      	cbnz	r3, 800d046 <__kernel_sin+0xd6>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4650      	mov	r0, sl
 800d014:	4659      	mov	r1, fp
 800d016:	f7f3 faef 	bl	80005f8 <__aeabi_dmul>
 800d01a:	a325      	add	r3, pc, #148	; (adr r3, 800d0b0 <__kernel_sin+0x140>)
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	f7f3 f932 	bl	8000288 <__aeabi_dsub>
 800d024:	4642      	mov	r2, r8
 800d026:	464b      	mov	r3, r9
 800d028:	f7f3 fae6 	bl	80005f8 <__aeabi_dmul>
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	4620      	mov	r0, r4
 800d032:	4629      	mov	r1, r5
 800d034:	f7f3 f92a 	bl	800028c <__adddf3>
 800d038:	4604      	mov	r4, r0
 800d03a:	460d      	mov	r5, r1
 800d03c:	ec45 4b10 	vmov	d0, r4, r5
 800d040:	b005      	add	sp, #20
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	2200      	movs	r2, #0
 800d048:	4b1b      	ldr	r3, [pc, #108]	; (800d0b8 <__kernel_sin+0x148>)
 800d04a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	4632      	mov	r2, r6
 800d054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d058:	463b      	mov	r3, r7
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 facb 	bl	80005f8 <__aeabi_dmul>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d06a:	f7f3 f90d 	bl	8000288 <__aeabi_dsub>
 800d06e:	4652      	mov	r2, sl
 800d070:	465b      	mov	r3, fp
 800d072:	f7f3 fac1 	bl	80005f8 <__aeabi_dmul>
 800d076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d07a:	f7f3 f905 	bl	8000288 <__aeabi_dsub>
 800d07e:	a30c      	add	r3, pc, #48	; (adr r3, 800d0b0 <__kernel_sin+0x140>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	4606      	mov	r6, r0
 800d086:	460f      	mov	r7, r1
 800d088:	4640      	mov	r0, r8
 800d08a:	4649      	mov	r1, r9
 800d08c:	f7f3 fab4 	bl	80005f8 <__aeabi_dmul>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4630      	mov	r0, r6
 800d096:	4639      	mov	r1, r7
 800d098:	f7f3 f8f8 	bl	800028c <__adddf3>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	f7f3 f8f0 	bl	8000288 <__aeabi_dsub>
 800d0a8:	e7c6      	b.n	800d038 <__kernel_sin+0xc8>
 800d0aa:	bf00      	nop
 800d0ac:	f3af 8000 	nop.w
 800d0b0:	55555549 	.word	0x55555549
 800d0b4:	3fc55555 	.word	0x3fc55555
 800d0b8:	3fe00000 	.word	0x3fe00000
 800d0bc:	5acfd57c 	.word	0x5acfd57c
 800d0c0:	3de5d93a 	.word	0x3de5d93a
 800d0c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d0cc:	57b1fe7d 	.word	0x57b1fe7d
 800d0d0:	3ec71de3 	.word	0x3ec71de3
 800d0d4:	19c161d5 	.word	0x19c161d5
 800d0d8:	3f2a01a0 	.word	0x3f2a01a0
 800d0dc:	1110f8a6 	.word	0x1110f8a6
 800d0e0:	3f811111 	.word	0x3f811111

0800d0e4 <__kernel_cosf>:
 800d0e4:	ee10 3a10 	vmov	r3, s0
 800d0e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d0f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f4:	da05      	bge.n	800d102 <__kernel_cosf+0x1e>
 800d0f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d0fa:	ee17 2a90 	vmov	r2, s15
 800d0fe:	2a00      	cmp	r2, #0
 800d100:	d03b      	beq.n	800d17a <__kernel_cosf+0x96>
 800d102:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d106:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d10a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d180 <__kernel_cosf+0x9c>
 800d10e:	4a1d      	ldr	r2, [pc, #116]	; (800d184 <__kernel_cosf+0xa0>)
 800d110:	ee66 7a07 	vmul.f32	s15, s12, s14
 800d114:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d188 <__kernel_cosf+0xa4>
 800d118:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d11c:	4293      	cmp	r3, r2
 800d11e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800d18c <__kernel_cosf+0xa8>
 800d122:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d126:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d190 <__kernel_cosf+0xac>
 800d12a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d12e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d194 <__kernel_cosf+0xb0>
 800d132:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d136:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d198 <__kernel_cosf+0xb4>
 800d13a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d13e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d142:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d146:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d14a:	dc04      	bgt.n	800d156 <__kernel_cosf+0x72>
 800d14c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d150:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800d154:	4770      	bx	lr
 800d156:	4a11      	ldr	r2, [pc, #68]	; (800d19c <__kernel_cosf+0xb8>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	bfda      	itte	le
 800d15c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d160:	ee07 3a10 	vmovle	s14, r3
 800d164:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d16c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d170:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d174:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d178:	4770      	bx	lr
 800d17a:	eeb0 0a66 	vmov.f32	s0, s13
 800d17e:	4770      	bx	lr
 800d180:	ad47d74e 	.word	0xad47d74e
 800d184:	3e999999 	.word	0x3e999999
 800d188:	310f74f6 	.word	0x310f74f6
 800d18c:	b493f27c 	.word	0xb493f27c
 800d190:	37d00d01 	.word	0x37d00d01
 800d194:	bab60b61 	.word	0xbab60b61
 800d198:	3d2aaaab 	.word	0x3d2aaaab
 800d19c:	3f480000 	.word	0x3f480000

0800d1a0 <__kernel_rem_pio2f>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	ed2d 8b04 	vpush	{d8-d9}
 800d1a8:	b0d7      	sub	sp, #348	; 0x15c
 800d1aa:	469b      	mov	fp, r3
 800d1ac:	460e      	mov	r6, r1
 800d1ae:	4bbe      	ldr	r3, [pc, #760]	; (800d4a8 <__kernel_rem_pio2f+0x308>)
 800d1b0:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d1b2:	9002      	str	r0, [sp, #8]
 800d1b4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d1b8:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d1ba:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d1be:	1ed1      	subs	r1, r2, #3
 800d1c0:	2308      	movs	r3, #8
 800d1c2:	fb91 f1f3 	sdiv	r1, r1, r3
 800d1c6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d1ca:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d1ce:	1c4c      	adds	r4, r1, #1
 800d1d0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d1d4:	eba1 050a 	sub.w	r5, r1, sl
 800d1d8:	aa1a      	add	r2, sp, #104	; 0x68
 800d1da:	eb09 070a 	add.w	r7, r9, sl
 800d1de:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d1e2:	4696      	mov	lr, r2
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	42bb      	cmp	r3, r7
 800d1e8:	dd0f      	ble.n	800d20a <__kernel_rem_pio2f+0x6a>
 800d1ea:	af42      	add	r7, sp, #264	; 0x108
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	454a      	cmp	r2, r9
 800d1f0:	dc27      	bgt.n	800d242 <__kernel_rem_pio2f+0xa2>
 800d1f2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d1f6:	eb0b 0302 	add.w	r3, fp, r2
 800d1fa:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d1fe:	9d02      	ldr	r5, [sp, #8]
 800d200:	eddf 7aad 	vldr	s15, [pc, #692]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d204:	f04f 0c00 	mov.w	ip, #0
 800d208:	e015      	b.n	800d236 <__kernel_rem_pio2f+0x96>
 800d20a:	42dd      	cmn	r5, r3
 800d20c:	bf5d      	ittte	pl
 800d20e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d212:	ee07 2a90 	vmovpl	s15, r2
 800d216:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d21a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d21e:	ecee 7a01 	vstmia	lr!, {s15}
 800d222:	3301      	adds	r3, #1
 800d224:	e7df      	b.n	800d1e6 <__kernel_rem_pio2f+0x46>
 800d226:	ecf5 6a01 	vldmia	r5!, {s13}
 800d22a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d22e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d232:	f10c 0c01 	add.w	ip, ip, #1
 800d236:	45d4      	cmp	ip, sl
 800d238:	ddf5      	ble.n	800d226 <__kernel_rem_pio2f+0x86>
 800d23a:	ece7 7a01 	vstmia	r7!, {s15}
 800d23e:	3201      	adds	r2, #1
 800d240:	e7d5      	b.n	800d1ee <__kernel_rem_pio2f+0x4e>
 800d242:	ab06      	add	r3, sp, #24
 800d244:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800d4b4 <__kernel_rem_pio2f+0x314>
 800d24e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800d4b0 <__kernel_rem_pio2f+0x310>
 800d252:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d256:	9303      	str	r3, [sp, #12]
 800d258:	464d      	mov	r5, r9
 800d25a:	ab56      	add	r3, sp, #344	; 0x158
 800d25c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d260:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d264:	3f01      	subs	r7, #1
 800d266:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d26a:	00bf      	lsls	r7, r7, #2
 800d26c:	ab56      	add	r3, sp, #344	; 0x158
 800d26e:	19da      	adds	r2, r3, r7
 800d270:	3a4c      	subs	r2, #76	; 0x4c
 800d272:	2300      	movs	r3, #0
 800d274:	1ae9      	subs	r1, r5, r3
 800d276:	2900      	cmp	r1, #0
 800d278:	dc4c      	bgt.n	800d314 <__kernel_rem_pio2f+0x174>
 800d27a:	4620      	mov	r0, r4
 800d27c:	f000 fd50 	bl	800dd20 <scalbnf>
 800d280:	eeb0 8a40 	vmov.f32	s16, s0
 800d284:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d288:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d28c:	f000 fd06 	bl	800dc9c <floorf>
 800d290:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d294:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d298:	2c00      	cmp	r4, #0
 800d29a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d29e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d2a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d2aa:	dd48      	ble.n	800d33e <__kernel_rem_pio2f+0x19e>
 800d2ac:	1e69      	subs	r1, r5, #1
 800d2ae:	ab06      	add	r3, sp, #24
 800d2b0:	f1c4 0008 	rsb	r0, r4, #8
 800d2b4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d2b8:	9a01      	ldr	r2, [sp, #4]
 800d2ba:	fa4c f300 	asr.w	r3, ip, r0
 800d2be:	441a      	add	r2, r3
 800d2c0:	4083      	lsls	r3, r0
 800d2c2:	9201      	str	r2, [sp, #4]
 800d2c4:	ebac 0203 	sub.w	r2, ip, r3
 800d2c8:	ab06      	add	r3, sp, #24
 800d2ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d2ce:	f1c4 0307 	rsb	r3, r4, #7
 800d2d2:	fa42 f803 	asr.w	r8, r2, r3
 800d2d6:	f1b8 0f00 	cmp.w	r8, #0
 800d2da:	dd41      	ble.n	800d360 <__kernel_rem_pio2f+0x1c0>
 800d2dc:	9b01      	ldr	r3, [sp, #4]
 800d2de:	2000      	movs	r0, #0
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	4601      	mov	r1, r0
 800d2e6:	4285      	cmp	r5, r0
 800d2e8:	dc6d      	bgt.n	800d3c6 <__kernel_rem_pio2f+0x226>
 800d2ea:	2c00      	cmp	r4, #0
 800d2ec:	dd04      	ble.n	800d2f8 <__kernel_rem_pio2f+0x158>
 800d2ee:	2c01      	cmp	r4, #1
 800d2f0:	d07e      	beq.n	800d3f0 <__kernel_rem_pio2f+0x250>
 800d2f2:	2c02      	cmp	r4, #2
 800d2f4:	f000 8086 	beq.w	800d404 <__kernel_rem_pio2f+0x264>
 800d2f8:	f1b8 0f02 	cmp.w	r8, #2
 800d2fc:	d130      	bne.n	800d360 <__kernel_rem_pio2f+0x1c0>
 800d2fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d302:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d306:	b359      	cbz	r1, 800d360 <__kernel_rem_pio2f+0x1c0>
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 fd09 	bl	800dd20 <scalbnf>
 800d30e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d312:	e025      	b.n	800d360 <__kernel_rem_pio2f+0x1c0>
 800d314:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d318:	a806      	add	r0, sp, #24
 800d31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d322:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d326:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d32a:	ee10 1a10 	vmov	r1, s0
 800d32e:	ed32 0a01 	vldmdb	r2!, {s0}
 800d332:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d336:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d33a:	3301      	adds	r3, #1
 800d33c:	e79a      	b.n	800d274 <__kernel_rem_pio2f+0xd4>
 800d33e:	d106      	bne.n	800d34e <__kernel_rem_pio2f+0x1ae>
 800d340:	1e6b      	subs	r3, r5, #1
 800d342:	aa06      	add	r2, sp, #24
 800d344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d348:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d34c:	e7c3      	b.n	800d2d6 <__kernel_rem_pio2f+0x136>
 800d34e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d352:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35a:	da31      	bge.n	800d3c0 <__kernel_rem_pio2f+0x220>
 800d35c:	f04f 0800 	mov.w	r8, #0
 800d360:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d368:	f040 80a8 	bne.w	800d4bc <__kernel_rem_pio2f+0x31c>
 800d36c:	1e6b      	subs	r3, r5, #1
 800d36e:	4618      	mov	r0, r3
 800d370:	2200      	movs	r2, #0
 800d372:	4548      	cmp	r0, r9
 800d374:	da4d      	bge.n	800d412 <__kernel_rem_pio2f+0x272>
 800d376:	2a00      	cmp	r2, #0
 800d378:	f000 8087 	beq.w	800d48a <__kernel_rem_pio2f+0x2ea>
 800d37c:	aa06      	add	r2, sp, #24
 800d37e:	3c08      	subs	r4, #8
 800d380:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d384:	2900      	cmp	r1, #0
 800d386:	f000 808d 	beq.w	800d4a4 <__kernel_rem_pio2f+0x304>
 800d38a:	4620      	mov	r0, r4
 800d38c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d390:	9302      	str	r3, [sp, #8]
 800d392:	f000 fcc5 	bl	800dd20 <scalbnf>
 800d396:	9b02      	ldr	r3, [sp, #8]
 800d398:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d4b4 <__kernel_rem_pio2f+0x314>
 800d39c:	0099      	lsls	r1, r3, #2
 800d39e:	aa42      	add	r2, sp, #264	; 0x108
 800d3a0:	1850      	adds	r0, r2, r1
 800d3a2:	1d05      	adds	r5, r0, #4
 800d3a4:	461c      	mov	r4, r3
 800d3a6:	2c00      	cmp	r4, #0
 800d3a8:	f280 80b8 	bge.w	800d51c <__kernel_rem_pio2f+0x37c>
 800d3ac:	2500      	movs	r5, #0
 800d3ae:	1b5c      	subs	r4, r3, r5
 800d3b0:	2c00      	cmp	r4, #0
 800d3b2:	f2c0 80d8 	blt.w	800d566 <__kernel_rem_pio2f+0x3c6>
 800d3b6:	4f3d      	ldr	r7, [pc, #244]	; (800d4ac <__kernel_rem_pio2f+0x30c>)
 800d3b8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d3bc:	2400      	movs	r4, #0
 800d3be:	e0c6      	b.n	800d54e <__kernel_rem_pio2f+0x3ae>
 800d3c0:	f04f 0802 	mov.w	r8, #2
 800d3c4:	e78a      	b.n	800d2dc <__kernel_rem_pio2f+0x13c>
 800d3c6:	ab06      	add	r3, sp, #24
 800d3c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d3cc:	b949      	cbnz	r1, 800d3e2 <__kernel_rem_pio2f+0x242>
 800d3ce:	b12b      	cbz	r3, 800d3dc <__kernel_rem_pio2f+0x23c>
 800d3d0:	aa06      	add	r2, sp, #24
 800d3d2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d3d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d3da:	2301      	movs	r3, #1
 800d3dc:	3001      	adds	r0, #1
 800d3de:	4619      	mov	r1, r3
 800d3e0:	e781      	b.n	800d2e6 <__kernel_rem_pio2f+0x146>
 800d3e2:	aa06      	add	r2, sp, #24
 800d3e4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d3e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	e7f5      	b.n	800d3dc <__kernel_rem_pio2f+0x23c>
 800d3f0:	1e68      	subs	r0, r5, #1
 800d3f2:	ab06      	add	r3, sp, #24
 800d3f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3fc:	aa06      	add	r2, sp, #24
 800d3fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d402:	e779      	b.n	800d2f8 <__kernel_rem_pio2f+0x158>
 800d404:	1e68      	subs	r0, r5, #1
 800d406:	ab06      	add	r3, sp, #24
 800d408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d40c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d410:	e7f4      	b.n	800d3fc <__kernel_rem_pio2f+0x25c>
 800d412:	a906      	add	r1, sp, #24
 800d414:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d418:	3801      	subs	r0, #1
 800d41a:	430a      	orrs	r2, r1
 800d41c:	e7a9      	b.n	800d372 <__kernel_rem_pio2f+0x1d2>
 800d41e:	f10c 0c01 	add.w	ip, ip, #1
 800d422:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d426:	2a00      	cmp	r2, #0
 800d428:	d0f9      	beq.n	800d41e <__kernel_rem_pio2f+0x27e>
 800d42a:	eb0b 0305 	add.w	r3, fp, r5
 800d42e:	aa1a      	add	r2, sp, #104	; 0x68
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	1898      	adds	r0, r3, r2
 800d434:	3004      	adds	r0, #4
 800d436:	1c69      	adds	r1, r5, #1
 800d438:	3704      	adds	r7, #4
 800d43a:	2200      	movs	r2, #0
 800d43c:	4465      	add	r5, ip
 800d43e:	9005      	str	r0, [sp, #20]
 800d440:	428d      	cmp	r5, r1
 800d442:	f6ff af0a 	blt.w	800d25a <__kernel_rem_pio2f+0xba>
 800d446:	a81a      	add	r0, sp, #104	; 0x68
 800d448:	eb02 0c03 	add.w	ip, r2, r3
 800d44c:	4484      	add	ip, r0
 800d44e:	9803      	ldr	r0, [sp, #12]
 800d450:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d454:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d458:	9001      	str	r0, [sp, #4]
 800d45a:	ee07 0a90 	vmov	s15, r0
 800d45e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d462:	9805      	ldr	r0, [sp, #20]
 800d464:	edcc 7a00 	vstr	s15, [ip]
 800d468:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d46c:	eb00 0802 	add.w	r8, r0, r2
 800d470:	f04f 0c00 	mov.w	ip, #0
 800d474:	45d4      	cmp	ip, sl
 800d476:	dd0c      	ble.n	800d492 <__kernel_rem_pio2f+0x2f2>
 800d478:	eb02 0c07 	add.w	ip, r2, r7
 800d47c:	a842      	add	r0, sp, #264	; 0x108
 800d47e:	4484      	add	ip, r0
 800d480:	edcc 7a01 	vstr	s15, [ip, #4]
 800d484:	3101      	adds	r1, #1
 800d486:	3204      	adds	r2, #4
 800d488:	e7da      	b.n	800d440 <__kernel_rem_pio2f+0x2a0>
 800d48a:	9b04      	ldr	r3, [sp, #16]
 800d48c:	f04f 0c01 	mov.w	ip, #1
 800d490:	e7c7      	b.n	800d422 <__kernel_rem_pio2f+0x282>
 800d492:	ecfe 6a01 	vldmia	lr!, {s13}
 800d496:	ed38 7a01 	vldmdb	r8!, {s14}
 800d49a:	f10c 0c01 	add.w	ip, ip, #1
 800d49e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d4a2:	e7e7      	b.n	800d474 <__kernel_rem_pio2f+0x2d4>
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	e769      	b.n	800d37c <__kernel_rem_pio2f+0x1dc>
 800d4a8:	08012834 	.word	0x08012834
 800d4ac:	08012808 	.word	0x08012808
 800d4b0:	43800000 	.word	0x43800000
 800d4b4:	3b800000 	.word	0x3b800000
 800d4b8:	00000000 	.word	0x00000000
 800d4bc:	4260      	negs	r0, r4
 800d4be:	eeb0 0a48 	vmov.f32	s0, s16
 800d4c2:	f000 fc2d 	bl	800dd20 <scalbnf>
 800d4c6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800d4b0 <__kernel_rem_pio2f+0x310>
 800d4ca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d2:	db1a      	blt.n	800d50a <__kernel_rem_pio2f+0x36a>
 800d4d4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d4b4 <__kernel_rem_pio2f+0x314>
 800d4d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d4dc:	aa06      	add	r2, sp, #24
 800d4de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4e2:	a906      	add	r1, sp, #24
 800d4e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4e8:	3408      	adds	r4, #8
 800d4ea:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d4ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d4f6:	ee10 3a10 	vmov	r3, s0
 800d4fa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d4fe:	1c6b      	adds	r3, r5, #1
 800d500:	ee17 2a90 	vmov	r2, s15
 800d504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d508:	e73f      	b.n	800d38a <__kernel_rem_pio2f+0x1ea>
 800d50a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d50e:	aa06      	add	r2, sp, #24
 800d510:	ee10 3a10 	vmov	r3, s0
 800d514:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d518:	462b      	mov	r3, r5
 800d51a:	e736      	b.n	800d38a <__kernel_rem_pio2f+0x1ea>
 800d51c:	aa06      	add	r2, sp, #24
 800d51e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d522:	9202      	str	r2, [sp, #8]
 800d524:	ee07 2a90 	vmov	s15, r2
 800d528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d52c:	3c01      	subs	r4, #1
 800d52e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d532:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d536:	ed65 7a01 	vstmdb	r5!, {s15}
 800d53a:	e734      	b.n	800d3a6 <__kernel_rem_pio2f+0x206>
 800d53c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800d540:	ecf7 6a01 	vldmia	r7!, {s13}
 800d544:	ed9c 7a00 	vldr	s14, [ip]
 800d548:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d54c:	3401      	adds	r4, #1
 800d54e:	454c      	cmp	r4, r9
 800d550:	dc01      	bgt.n	800d556 <__kernel_rem_pio2f+0x3b6>
 800d552:	42a5      	cmp	r5, r4
 800d554:	daf2      	bge.n	800d53c <__kernel_rem_pio2f+0x39c>
 800d556:	aa56      	add	r2, sp, #344	; 0x158
 800d558:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800d55c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800d560:	3501      	adds	r5, #1
 800d562:	3804      	subs	r0, #4
 800d564:	e723      	b.n	800d3ae <__kernel_rem_pio2f+0x20e>
 800d566:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d568:	2a03      	cmp	r2, #3
 800d56a:	d84d      	bhi.n	800d608 <__kernel_rem_pio2f+0x468>
 800d56c:	e8df f002 	tbb	[pc, r2]
 800d570:	021f1f3e 	.word	0x021f1f3e
 800d574:	aa56      	add	r2, sp, #344	; 0x158
 800d576:	4411      	add	r1, r2
 800d578:	399c      	subs	r1, #156	; 0x9c
 800d57a:	4608      	mov	r0, r1
 800d57c:	461c      	mov	r4, r3
 800d57e:	2c00      	cmp	r4, #0
 800d580:	dc5f      	bgt.n	800d642 <__kernel_rem_pio2f+0x4a2>
 800d582:	4608      	mov	r0, r1
 800d584:	461c      	mov	r4, r3
 800d586:	2c01      	cmp	r4, #1
 800d588:	dc6b      	bgt.n	800d662 <__kernel_rem_pio2f+0x4c2>
 800d58a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d58e:	2b01      	cmp	r3, #1
 800d590:	dc77      	bgt.n	800d682 <__kernel_rem_pio2f+0x4e2>
 800d592:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800d596:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800d59a:	f1b8 0f00 	cmp.w	r8, #0
 800d59e:	d176      	bne.n	800d68e <__kernel_rem_pio2f+0x4ee>
 800d5a0:	edc6 6a00 	vstr	s13, [r6]
 800d5a4:	ed86 7a01 	vstr	s14, [r6, #4]
 800d5a8:	edc6 7a02 	vstr	s15, [r6, #8]
 800d5ac:	e02c      	b.n	800d608 <__kernel_rem_pio2f+0x468>
 800d5ae:	aa56      	add	r2, sp, #344	; 0x158
 800d5b0:	4411      	add	r1, r2
 800d5b2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d5b6:	399c      	subs	r1, #156	; 0x9c
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	da32      	bge.n	800d624 <__kernel_rem_pio2f+0x484>
 800d5be:	f1b8 0f00 	cmp.w	r8, #0
 800d5c2:	d035      	beq.n	800d630 <__kernel_rem_pio2f+0x490>
 800d5c4:	eef1 7a47 	vneg.f32	s15, s14
 800d5c8:	edc6 7a00 	vstr	s15, [r6]
 800d5cc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d5d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5d4:	a82f      	add	r0, sp, #188	; 0xbc
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	428b      	cmp	r3, r1
 800d5da:	da2c      	bge.n	800d636 <__kernel_rem_pio2f+0x496>
 800d5dc:	f1b8 0f00 	cmp.w	r8, #0
 800d5e0:	d001      	beq.n	800d5e6 <__kernel_rem_pio2f+0x446>
 800d5e2:	eef1 7a67 	vneg.f32	s15, s15
 800d5e6:	edc6 7a01 	vstr	s15, [r6, #4]
 800d5ea:	e00d      	b.n	800d608 <__kernel_rem_pio2f+0x468>
 800d5ec:	aa56      	add	r2, sp, #344	; 0x158
 800d5ee:	4411      	add	r1, r2
 800d5f0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800d4b8 <__kernel_rem_pio2f+0x318>
 800d5f4:	399c      	subs	r1, #156	; 0x9c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	da0e      	bge.n	800d618 <__kernel_rem_pio2f+0x478>
 800d5fa:	f1b8 0f00 	cmp.w	r8, #0
 800d5fe:	d001      	beq.n	800d604 <__kernel_rem_pio2f+0x464>
 800d600:	eef1 7a67 	vneg.f32	s15, s15
 800d604:	edc6 7a00 	vstr	s15, [r6]
 800d608:	9b01      	ldr	r3, [sp, #4]
 800d60a:	f003 0007 	and.w	r0, r3, #7
 800d60e:	b057      	add	sp, #348	; 0x15c
 800d610:	ecbd 8b04 	vpop	{d8-d9}
 800d614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d618:	ed31 7a01 	vldmdb	r1!, {s14}
 800d61c:	3b01      	subs	r3, #1
 800d61e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d622:	e7e8      	b.n	800d5f6 <__kernel_rem_pio2f+0x456>
 800d624:	ed71 7a01 	vldmdb	r1!, {s15}
 800d628:	3801      	subs	r0, #1
 800d62a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d62e:	e7c4      	b.n	800d5ba <__kernel_rem_pio2f+0x41a>
 800d630:	eef0 7a47 	vmov.f32	s15, s14
 800d634:	e7c8      	b.n	800d5c8 <__kernel_rem_pio2f+0x428>
 800d636:	ecb0 7a01 	vldmia	r0!, {s14}
 800d63a:	3101      	adds	r1, #1
 800d63c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d640:	e7ca      	b.n	800d5d8 <__kernel_rem_pio2f+0x438>
 800d642:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d646:	ed70 6a01 	vldmdb	r0!, {s13}
 800d64a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d64e:	3c01      	subs	r4, #1
 800d650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d654:	ed00 7a01 	vstr	s14, [r0, #-4]
 800d658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65c:	edc0 7a00 	vstr	s15, [r0]
 800d660:	e78d      	b.n	800d57e <__kernel_rem_pio2f+0x3de>
 800d662:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d666:	ed70 6a01 	vldmdb	r0!, {s13}
 800d66a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d66e:	3c01      	subs	r4, #1
 800d670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d674:	ed00 7a01 	vstr	s14, [r0, #-4]
 800d678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67c:	edc0 7a00 	vstr	s15, [r0]
 800d680:	e781      	b.n	800d586 <__kernel_rem_pio2f+0x3e6>
 800d682:	ed31 7a01 	vldmdb	r1!, {s14}
 800d686:	3b01      	subs	r3, #1
 800d688:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d68c:	e77f      	b.n	800d58e <__kernel_rem_pio2f+0x3ee>
 800d68e:	eef1 6a66 	vneg.f32	s13, s13
 800d692:	eeb1 7a47 	vneg.f32	s14, s14
 800d696:	edc6 6a00 	vstr	s13, [r6]
 800d69a:	ed86 7a01 	vstr	s14, [r6, #4]
 800d69e:	eef1 7a67 	vneg.f32	s15, s15
 800d6a2:	e781      	b.n	800d5a8 <__kernel_rem_pio2f+0x408>

0800d6a4 <__kernel_sinf>:
 800d6a4:	ee10 3a10 	vmov	r3, s0
 800d6a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d6b0:	da04      	bge.n	800d6bc <__kernel_sinf+0x18>
 800d6b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d6b6:	ee17 3a90 	vmov	r3, s15
 800d6ba:	b35b      	cbz	r3, 800d714 <__kernel_sinf+0x70>
 800d6bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d6c0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d718 <__kernel_sinf+0x74>
 800d6c4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d71c <__kernel_sinf+0x78>
 800d6c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d6cc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d720 <__kernel_sinf+0x7c>
 800d6d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d6d4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d724 <__kernel_sinf+0x80>
 800d6d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d6dc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d728 <__kernel_sinf+0x84>
 800d6e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d6e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d6e8:	b930      	cbnz	r0, 800d6f8 <__kernel_sinf+0x54>
 800d6ea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d72c <__kernel_sinf+0x88>
 800d6ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d6f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d6f6:	4770      	bx	lr
 800d6f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d6fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d700:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d704:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d708:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d730 <__kernel_sinf+0x8c>
 800d70c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d710:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	2f2ec9d3 	.word	0x2f2ec9d3
 800d71c:	b2d72f34 	.word	0xb2d72f34
 800d720:	3638ef1b 	.word	0x3638ef1b
 800d724:	b9500d01 	.word	0xb9500d01
 800d728:	3c088889 	.word	0x3c088889
 800d72c:	be2aaaab 	.word	0xbe2aaaab
 800d730:	3e2aaaab 	.word	0x3e2aaaab
 800d734:	00000000 	.word	0x00000000

0800d738 <atan>:
 800d738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	ec55 4b10 	vmov	r4, r5, d0
 800d740:	4bc3      	ldr	r3, [pc, #780]	; (800da50 <atan+0x318>)
 800d742:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d746:	429e      	cmp	r6, r3
 800d748:	46ab      	mov	fp, r5
 800d74a:	dd18      	ble.n	800d77e <atan+0x46>
 800d74c:	4bc1      	ldr	r3, [pc, #772]	; (800da54 <atan+0x31c>)
 800d74e:	429e      	cmp	r6, r3
 800d750:	dc01      	bgt.n	800d756 <atan+0x1e>
 800d752:	d109      	bne.n	800d768 <atan+0x30>
 800d754:	b144      	cbz	r4, 800d768 <atan+0x30>
 800d756:	4622      	mov	r2, r4
 800d758:	462b      	mov	r3, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	f7f2 fd95 	bl	800028c <__adddf3>
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	e006      	b.n	800d776 <atan+0x3e>
 800d768:	f1bb 0f00 	cmp.w	fp, #0
 800d76c:	f340 8131 	ble.w	800d9d2 <atan+0x29a>
 800d770:	a59b      	add	r5, pc, #620	; (adr r5, 800d9e0 <atan+0x2a8>)
 800d772:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d776:	ec45 4b10 	vmov	d0, r4, r5
 800d77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77e:	4bb6      	ldr	r3, [pc, #728]	; (800da58 <atan+0x320>)
 800d780:	429e      	cmp	r6, r3
 800d782:	dc14      	bgt.n	800d7ae <atan+0x76>
 800d784:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d788:	429e      	cmp	r6, r3
 800d78a:	dc0d      	bgt.n	800d7a8 <atan+0x70>
 800d78c:	a396      	add	r3, pc, #600	; (adr r3, 800d9e8 <atan+0x2b0>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	ee10 0a10 	vmov	r0, s0
 800d796:	4629      	mov	r1, r5
 800d798:	f7f2 fd78 	bl	800028c <__adddf3>
 800d79c:	2200      	movs	r2, #0
 800d79e:	4baf      	ldr	r3, [pc, #700]	; (800da5c <atan+0x324>)
 800d7a0:	f7f3 f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d1e6      	bne.n	800d776 <atan+0x3e>
 800d7a8:	f04f 3aff 	mov.w	sl, #4294967295
 800d7ac:	e02b      	b.n	800d806 <atan+0xce>
 800d7ae:	f000 f963 	bl	800da78 <fabs>
 800d7b2:	4bab      	ldr	r3, [pc, #684]	; (800da60 <atan+0x328>)
 800d7b4:	429e      	cmp	r6, r3
 800d7b6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ba:	f300 80bf 	bgt.w	800d93c <atan+0x204>
 800d7be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d7c2:	429e      	cmp	r6, r3
 800d7c4:	f300 80a0 	bgt.w	800d908 <atan+0x1d0>
 800d7c8:	ee10 2a10 	vmov	r2, s0
 800d7cc:	ee10 0a10 	vmov	r0, s0
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	f7f2 fd5a 	bl	800028c <__adddf3>
 800d7d8:	2200      	movs	r2, #0
 800d7da:	4ba0      	ldr	r3, [pc, #640]	; (800da5c <atan+0x324>)
 800d7dc:	f7f2 fd54 	bl	8000288 <__aeabi_dsub>
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	f7f2 fd4d 	bl	800028c <__adddf3>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	f7f3 f827 	bl	800084c <__aeabi_ddiv>
 800d7fe:	f04f 0a00 	mov.w	sl, #0
 800d802:	4604      	mov	r4, r0
 800d804:	460d      	mov	r5, r1
 800d806:	4622      	mov	r2, r4
 800d808:	462b      	mov	r3, r5
 800d80a:	4620      	mov	r0, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	f7f2 fef3 	bl	80005f8 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4680      	mov	r8, r0
 800d818:	4689      	mov	r9, r1
 800d81a:	f7f2 feed 	bl	80005f8 <__aeabi_dmul>
 800d81e:	a374      	add	r3, pc, #464	; (adr r3, 800d9f0 <atan+0x2b8>)
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	4606      	mov	r6, r0
 800d826:	460f      	mov	r7, r1
 800d828:	f7f2 fee6 	bl	80005f8 <__aeabi_dmul>
 800d82c:	a372      	add	r3, pc, #456	; (adr r3, 800d9f8 <atan+0x2c0>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fd2b 	bl	800028c <__adddf3>
 800d836:	4632      	mov	r2, r6
 800d838:	463b      	mov	r3, r7
 800d83a:	f7f2 fedd 	bl	80005f8 <__aeabi_dmul>
 800d83e:	a370      	add	r3, pc, #448	; (adr r3, 800da00 <atan+0x2c8>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	f7f2 fd22 	bl	800028c <__adddf3>
 800d848:	4632      	mov	r2, r6
 800d84a:	463b      	mov	r3, r7
 800d84c:	f7f2 fed4 	bl	80005f8 <__aeabi_dmul>
 800d850:	a36d      	add	r3, pc, #436	; (adr r3, 800da08 <atan+0x2d0>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f2 fd19 	bl	800028c <__adddf3>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	f7f2 fecb 	bl	80005f8 <__aeabi_dmul>
 800d862:	a36b      	add	r3, pc, #428	; (adr r3, 800da10 <atan+0x2d8>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fd10 	bl	800028c <__adddf3>
 800d86c:	4632      	mov	r2, r6
 800d86e:	463b      	mov	r3, r7
 800d870:	f7f2 fec2 	bl	80005f8 <__aeabi_dmul>
 800d874:	a368      	add	r3, pc, #416	; (adr r3, 800da18 <atan+0x2e0>)
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	f7f2 fd07 	bl	800028c <__adddf3>
 800d87e:	4642      	mov	r2, r8
 800d880:	464b      	mov	r3, r9
 800d882:	f7f2 feb9 	bl	80005f8 <__aeabi_dmul>
 800d886:	a366      	add	r3, pc, #408	; (adr r3, 800da20 <atan+0x2e8>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	4680      	mov	r8, r0
 800d88e:	4689      	mov	r9, r1
 800d890:	4630      	mov	r0, r6
 800d892:	4639      	mov	r1, r7
 800d894:	f7f2 feb0 	bl	80005f8 <__aeabi_dmul>
 800d898:	a363      	add	r3, pc, #396	; (adr r3, 800da28 <atan+0x2f0>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fcf3 	bl	8000288 <__aeabi_dsub>
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	463b      	mov	r3, r7
 800d8a6:	f7f2 fea7 	bl	80005f8 <__aeabi_dmul>
 800d8aa:	a361      	add	r3, pc, #388	; (adr r3, 800da30 <atan+0x2f8>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fcea 	bl	8000288 <__aeabi_dsub>
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	f7f2 fe9e 	bl	80005f8 <__aeabi_dmul>
 800d8bc:	a35e      	add	r3, pc, #376	; (adr r3, 800da38 <atan+0x300>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f2 fce1 	bl	8000288 <__aeabi_dsub>
 800d8c6:	4632      	mov	r2, r6
 800d8c8:	463b      	mov	r3, r7
 800d8ca:	f7f2 fe95 	bl	80005f8 <__aeabi_dmul>
 800d8ce:	a35c      	add	r3, pc, #368	; (adr r3, 800da40 <atan+0x308>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fcd8 	bl	8000288 <__aeabi_dsub>
 800d8d8:	4632      	mov	r2, r6
 800d8da:	463b      	mov	r3, r7
 800d8dc:	f7f2 fe8c 	bl	80005f8 <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	f7f2 fcd0 	bl	800028c <__adddf3>
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	f7f2 fe82 	bl	80005f8 <__aeabi_dmul>
 800d8f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	d14b      	bne.n	800d996 <atan+0x25e>
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f2 fcc1 	bl	8000288 <__aeabi_dsub>
 800d906:	e72c      	b.n	800d762 <atan+0x2a>
 800d908:	ee10 0a10 	vmov	r0, s0
 800d90c:	2200      	movs	r2, #0
 800d90e:	4b53      	ldr	r3, [pc, #332]	; (800da5c <atan+0x324>)
 800d910:	4629      	mov	r1, r5
 800d912:	f7f2 fcb9 	bl	8000288 <__aeabi_dsub>
 800d916:	2200      	movs	r2, #0
 800d918:	4606      	mov	r6, r0
 800d91a:	460f      	mov	r7, r1
 800d91c:	4b4f      	ldr	r3, [pc, #316]	; (800da5c <atan+0x324>)
 800d91e:	4620      	mov	r0, r4
 800d920:	4629      	mov	r1, r5
 800d922:	f7f2 fcb3 	bl	800028c <__adddf3>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	4630      	mov	r0, r6
 800d92c:	4639      	mov	r1, r7
 800d92e:	f7f2 ff8d 	bl	800084c <__aeabi_ddiv>
 800d932:	f04f 0a01 	mov.w	sl, #1
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	e764      	b.n	800d806 <atan+0xce>
 800d93c:	4b49      	ldr	r3, [pc, #292]	; (800da64 <atan+0x32c>)
 800d93e:	429e      	cmp	r6, r3
 800d940:	dc1d      	bgt.n	800d97e <atan+0x246>
 800d942:	ee10 0a10 	vmov	r0, s0
 800d946:	2200      	movs	r2, #0
 800d948:	4b47      	ldr	r3, [pc, #284]	; (800da68 <atan+0x330>)
 800d94a:	4629      	mov	r1, r5
 800d94c:	f7f2 fc9c 	bl	8000288 <__aeabi_dsub>
 800d950:	2200      	movs	r2, #0
 800d952:	4606      	mov	r6, r0
 800d954:	460f      	mov	r7, r1
 800d956:	4b44      	ldr	r3, [pc, #272]	; (800da68 <atan+0x330>)
 800d958:	4620      	mov	r0, r4
 800d95a:	4629      	mov	r1, r5
 800d95c:	f7f2 fe4c 	bl	80005f8 <__aeabi_dmul>
 800d960:	2200      	movs	r2, #0
 800d962:	4b3e      	ldr	r3, [pc, #248]	; (800da5c <atan+0x324>)
 800d964:	f7f2 fc92 	bl	800028c <__adddf3>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f2 ff6c 	bl	800084c <__aeabi_ddiv>
 800d974:	f04f 0a02 	mov.w	sl, #2
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	e743      	b.n	800d806 <atan+0xce>
 800d97e:	462b      	mov	r3, r5
 800d980:	ee10 2a10 	vmov	r2, s0
 800d984:	2000      	movs	r0, #0
 800d986:	4939      	ldr	r1, [pc, #228]	; (800da6c <atan+0x334>)
 800d988:	f7f2 ff60 	bl	800084c <__aeabi_ddiv>
 800d98c:	f04f 0a03 	mov.w	sl, #3
 800d990:	4604      	mov	r4, r0
 800d992:	460d      	mov	r5, r1
 800d994:	e737      	b.n	800d806 <atan+0xce>
 800d996:	4b36      	ldr	r3, [pc, #216]	; (800da70 <atan+0x338>)
 800d998:	4e36      	ldr	r6, [pc, #216]	; (800da74 <atan+0x33c>)
 800d99a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d99e:	4456      	add	r6, sl
 800d9a0:	449a      	add	sl, r3
 800d9a2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d9a6:	f7f2 fc6f 	bl	8000288 <__aeabi_dsub>
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	f7f2 fc6b 	bl	8000288 <__aeabi_dsub>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d9ba:	f7f2 fc65 	bl	8000288 <__aeabi_dsub>
 800d9be:	f1bb 0f00 	cmp.w	fp, #0
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	f6bf aed6 	bge.w	800d776 <atan+0x3e>
 800d9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ce:	461d      	mov	r5, r3
 800d9d0:	e6d1      	b.n	800d776 <atan+0x3e>
 800d9d2:	a51d      	add	r5, pc, #116	; (adr r5, 800da48 <atan+0x310>)
 800d9d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9d8:	e6cd      	b.n	800d776 <atan+0x3e>
 800d9da:	bf00      	nop
 800d9dc:	f3af 8000 	nop.w
 800d9e0:	54442d18 	.word	0x54442d18
 800d9e4:	3ff921fb 	.word	0x3ff921fb
 800d9e8:	8800759c 	.word	0x8800759c
 800d9ec:	7e37e43c 	.word	0x7e37e43c
 800d9f0:	e322da11 	.word	0xe322da11
 800d9f4:	3f90ad3a 	.word	0x3f90ad3a
 800d9f8:	24760deb 	.word	0x24760deb
 800d9fc:	3fa97b4b 	.word	0x3fa97b4b
 800da00:	a0d03d51 	.word	0xa0d03d51
 800da04:	3fb10d66 	.word	0x3fb10d66
 800da08:	c54c206e 	.word	0xc54c206e
 800da0c:	3fb745cd 	.word	0x3fb745cd
 800da10:	920083ff 	.word	0x920083ff
 800da14:	3fc24924 	.word	0x3fc24924
 800da18:	5555550d 	.word	0x5555550d
 800da1c:	3fd55555 	.word	0x3fd55555
 800da20:	2c6a6c2f 	.word	0x2c6a6c2f
 800da24:	bfa2b444 	.word	0xbfa2b444
 800da28:	52defd9a 	.word	0x52defd9a
 800da2c:	3fadde2d 	.word	0x3fadde2d
 800da30:	af749a6d 	.word	0xaf749a6d
 800da34:	3fb3b0f2 	.word	0x3fb3b0f2
 800da38:	fe231671 	.word	0xfe231671
 800da3c:	3fbc71c6 	.word	0x3fbc71c6
 800da40:	9998ebc4 	.word	0x9998ebc4
 800da44:	3fc99999 	.word	0x3fc99999
 800da48:	54442d18 	.word	0x54442d18
 800da4c:	bff921fb 	.word	0xbff921fb
 800da50:	440fffff 	.word	0x440fffff
 800da54:	7ff00000 	.word	0x7ff00000
 800da58:	3fdbffff 	.word	0x3fdbffff
 800da5c:	3ff00000 	.word	0x3ff00000
 800da60:	3ff2ffff 	.word	0x3ff2ffff
 800da64:	40037fff 	.word	0x40037fff
 800da68:	3ff80000 	.word	0x3ff80000
 800da6c:	bff00000 	.word	0xbff00000
 800da70:	08012860 	.word	0x08012860
 800da74:	08012840 	.word	0x08012840

0800da78 <fabs>:
 800da78:	ec51 0b10 	vmov	r0, r1, d0
 800da7c:	ee10 2a10 	vmov	r2, s0
 800da80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da84:	ec43 2b10 	vmov	d0, r2, r3
 800da88:	4770      	bx	lr
 800da8a:	0000      	movs	r0, r0
 800da8c:	0000      	movs	r0, r0
	...

0800da90 <floor>:
 800da90:	ec51 0b10 	vmov	r0, r1, d0
 800da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800da9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800daa0:	2e13      	cmp	r6, #19
 800daa2:	460c      	mov	r4, r1
 800daa4:	ee10 5a10 	vmov	r5, s0
 800daa8:	4680      	mov	r8, r0
 800daaa:	dc34      	bgt.n	800db16 <floor+0x86>
 800daac:	2e00      	cmp	r6, #0
 800daae:	da16      	bge.n	800dade <floor+0x4e>
 800dab0:	a335      	add	r3, pc, #212	; (adr r3, 800db88 <floor+0xf8>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f7f2 fbe9 	bl	800028c <__adddf3>
 800daba:	2200      	movs	r2, #0
 800dabc:	2300      	movs	r3, #0
 800dabe:	f7f3 f82b 	bl	8000b18 <__aeabi_dcmpgt>
 800dac2:	b148      	cbz	r0, 800dad8 <floor+0x48>
 800dac4:	2c00      	cmp	r4, #0
 800dac6:	da59      	bge.n	800db7c <floor+0xec>
 800dac8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dacc:	4a30      	ldr	r2, [pc, #192]	; (800db90 <floor+0x100>)
 800dace:	432b      	orrs	r3, r5
 800dad0:	2500      	movs	r5, #0
 800dad2:	42ab      	cmp	r3, r5
 800dad4:	bf18      	it	ne
 800dad6:	4614      	movne	r4, r2
 800dad8:	4621      	mov	r1, r4
 800dada:	4628      	mov	r0, r5
 800dadc:	e025      	b.n	800db2a <floor+0x9a>
 800dade:	4f2d      	ldr	r7, [pc, #180]	; (800db94 <floor+0x104>)
 800dae0:	4137      	asrs	r7, r6
 800dae2:	ea01 0307 	and.w	r3, r1, r7
 800dae6:	4303      	orrs	r3, r0
 800dae8:	d01f      	beq.n	800db2a <floor+0x9a>
 800daea:	a327      	add	r3, pc, #156	; (adr r3, 800db88 <floor+0xf8>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f7f2 fbcc 	bl	800028c <__adddf3>
 800daf4:	2200      	movs	r2, #0
 800daf6:	2300      	movs	r3, #0
 800daf8:	f7f3 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d0eb      	beq.n	800dad8 <floor+0x48>
 800db00:	2c00      	cmp	r4, #0
 800db02:	bfbe      	ittt	lt
 800db04:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800db08:	fa43 f606 	asrlt.w	r6, r3, r6
 800db0c:	19a4      	addlt	r4, r4, r6
 800db0e:	ea24 0407 	bic.w	r4, r4, r7
 800db12:	2500      	movs	r5, #0
 800db14:	e7e0      	b.n	800dad8 <floor+0x48>
 800db16:	2e33      	cmp	r6, #51	; 0x33
 800db18:	dd0b      	ble.n	800db32 <floor+0xa2>
 800db1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800db1e:	d104      	bne.n	800db2a <floor+0x9a>
 800db20:	ee10 2a10 	vmov	r2, s0
 800db24:	460b      	mov	r3, r1
 800db26:	f7f2 fbb1 	bl	800028c <__adddf3>
 800db2a:	ec41 0b10 	vmov	d0, r0, r1
 800db2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db32:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800db36:	f04f 33ff 	mov.w	r3, #4294967295
 800db3a:	fa23 f707 	lsr.w	r7, r3, r7
 800db3e:	4207      	tst	r7, r0
 800db40:	d0f3      	beq.n	800db2a <floor+0x9a>
 800db42:	a311      	add	r3, pc, #68	; (adr r3, 800db88 <floor+0xf8>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	f7f2 fba0 	bl	800028c <__adddf3>
 800db4c:	2200      	movs	r2, #0
 800db4e:	2300      	movs	r3, #0
 800db50:	f7f2 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 800db54:	2800      	cmp	r0, #0
 800db56:	d0bf      	beq.n	800dad8 <floor+0x48>
 800db58:	2c00      	cmp	r4, #0
 800db5a:	da02      	bge.n	800db62 <floor+0xd2>
 800db5c:	2e14      	cmp	r6, #20
 800db5e:	d103      	bne.n	800db68 <floor+0xd8>
 800db60:	3401      	adds	r4, #1
 800db62:	ea25 0507 	bic.w	r5, r5, r7
 800db66:	e7b7      	b.n	800dad8 <floor+0x48>
 800db68:	2301      	movs	r3, #1
 800db6a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800db6e:	fa03 f606 	lsl.w	r6, r3, r6
 800db72:	4435      	add	r5, r6
 800db74:	4545      	cmp	r5, r8
 800db76:	bf38      	it	cc
 800db78:	18e4      	addcc	r4, r4, r3
 800db7a:	e7f2      	b.n	800db62 <floor+0xd2>
 800db7c:	2500      	movs	r5, #0
 800db7e:	462c      	mov	r4, r5
 800db80:	e7aa      	b.n	800dad8 <floor+0x48>
 800db82:	bf00      	nop
 800db84:	f3af 8000 	nop.w
 800db88:	8800759c 	.word	0x8800759c
 800db8c:	7e37e43c 	.word	0x7e37e43c
 800db90:	bff00000 	.word	0xbff00000
 800db94:	000fffff 	.word	0x000fffff

0800db98 <matherr>:
 800db98:	2000      	movs	r0, #0
 800db9a:	4770      	bx	lr
 800db9c:	0000      	movs	r0, r0
	...

0800dba0 <scalbn>:
 800dba0:	b570      	push	{r4, r5, r6, lr}
 800dba2:	ec55 4b10 	vmov	r4, r5, d0
 800dba6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dbaa:	4606      	mov	r6, r0
 800dbac:	462b      	mov	r3, r5
 800dbae:	b9aa      	cbnz	r2, 800dbdc <scalbn+0x3c>
 800dbb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dbb4:	4323      	orrs	r3, r4
 800dbb6:	d03b      	beq.n	800dc30 <scalbn+0x90>
 800dbb8:	4b31      	ldr	r3, [pc, #196]	; (800dc80 <scalbn+0xe0>)
 800dbba:	4629      	mov	r1, r5
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	ee10 0a10 	vmov	r0, s0
 800dbc2:	f7f2 fd19 	bl	80005f8 <__aeabi_dmul>
 800dbc6:	4b2f      	ldr	r3, [pc, #188]	; (800dc84 <scalbn+0xe4>)
 800dbc8:	429e      	cmp	r6, r3
 800dbca:	4604      	mov	r4, r0
 800dbcc:	460d      	mov	r5, r1
 800dbce:	da12      	bge.n	800dbf6 <scalbn+0x56>
 800dbd0:	a327      	add	r3, pc, #156	; (adr r3, 800dc70 <scalbn+0xd0>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fd0f 	bl	80005f8 <__aeabi_dmul>
 800dbda:	e009      	b.n	800dbf0 <scalbn+0x50>
 800dbdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dbe0:	428a      	cmp	r2, r1
 800dbe2:	d10c      	bne.n	800dbfe <scalbn+0x5e>
 800dbe4:	ee10 2a10 	vmov	r2, s0
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 fb4e 	bl	800028c <__adddf3>
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	460d      	mov	r5, r1
 800dbf4:	e01c      	b.n	800dc30 <scalbn+0x90>
 800dbf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	3a36      	subs	r2, #54	; 0x36
 800dbfe:	4432      	add	r2, r6
 800dc00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dc04:	428a      	cmp	r2, r1
 800dc06:	dd0b      	ble.n	800dc20 <scalbn+0x80>
 800dc08:	ec45 4b11 	vmov	d1, r4, r5
 800dc0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800dc78 <scalbn+0xd8>
 800dc10:	f000 f8e6 	bl	800dde0 <copysign>
 800dc14:	a318      	add	r3, pc, #96	; (adr r3, 800dc78 <scalbn+0xd8>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	ec51 0b10 	vmov	r0, r1, d0
 800dc1e:	e7da      	b.n	800dbd6 <scalbn+0x36>
 800dc20:	2a00      	cmp	r2, #0
 800dc22:	dd08      	ble.n	800dc36 <scalbn+0x96>
 800dc24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc30:	ec45 4b10 	vmov	d0, r4, r5
 800dc34:	bd70      	pop	{r4, r5, r6, pc}
 800dc36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dc3a:	da0d      	bge.n	800dc58 <scalbn+0xb8>
 800dc3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc40:	429e      	cmp	r6, r3
 800dc42:	ec45 4b11 	vmov	d1, r4, r5
 800dc46:	dce1      	bgt.n	800dc0c <scalbn+0x6c>
 800dc48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800dc70 <scalbn+0xd0>
 800dc4c:	f000 f8c8 	bl	800dde0 <copysign>
 800dc50:	a307      	add	r3, pc, #28	; (adr r3, 800dc70 <scalbn+0xd0>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	e7e0      	b.n	800dc1a <scalbn+0x7a>
 800dc58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc5c:	3236      	adds	r2, #54	; 0x36
 800dc5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	4b06      	ldr	r3, [pc, #24]	; (800dc88 <scalbn+0xe8>)
 800dc6e:	e7b2      	b.n	800dbd6 <scalbn+0x36>
 800dc70:	c2f8f359 	.word	0xc2f8f359
 800dc74:	01a56e1f 	.word	0x01a56e1f
 800dc78:	8800759c 	.word	0x8800759c
 800dc7c:	7e37e43c 	.word	0x7e37e43c
 800dc80:	43500000 	.word	0x43500000
 800dc84:	ffff3cb0 	.word	0xffff3cb0
 800dc88:	3c900000 	.word	0x3c900000

0800dc8c <fabsf>:
 800dc8c:	ee10 3a10 	vmov	r3, s0
 800dc90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc94:	ee00 3a10 	vmov	s0, r3
 800dc98:	4770      	bx	lr
	...

0800dc9c <floorf>:
 800dc9c:	ee10 3a10 	vmov	r3, s0
 800dca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dca4:	0dca      	lsrs	r2, r1, #23
 800dca6:	3a7f      	subs	r2, #127	; 0x7f
 800dca8:	2a16      	cmp	r2, #22
 800dcaa:	dc2a      	bgt.n	800dd02 <floorf+0x66>
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	da11      	bge.n	800dcd4 <floorf+0x38>
 800dcb0:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dd14 <floorf+0x78>
 800dcb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dcb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc0:	dd05      	ble.n	800dcce <floorf+0x32>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	da23      	bge.n	800dd0e <floorf+0x72>
 800dcc6:	4a14      	ldr	r2, [pc, #80]	; (800dd18 <floorf+0x7c>)
 800dcc8:	2900      	cmp	r1, #0
 800dcca:	bf18      	it	ne
 800dccc:	4613      	movne	r3, r2
 800dcce:	ee00 3a10 	vmov	s0, r3
 800dcd2:	4770      	bx	lr
 800dcd4:	4911      	ldr	r1, [pc, #68]	; (800dd1c <floorf+0x80>)
 800dcd6:	4111      	asrs	r1, r2
 800dcd8:	420b      	tst	r3, r1
 800dcda:	d0fa      	beq.n	800dcd2 <floorf+0x36>
 800dcdc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dd14 <floorf+0x78>
 800dce0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dce4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcec:	ddef      	ble.n	800dcce <floorf+0x32>
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	bfbe      	ittt	lt
 800dcf2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800dcf6:	fa40 f202 	asrlt.w	r2, r0, r2
 800dcfa:	189b      	addlt	r3, r3, r2
 800dcfc:	ea23 0301 	bic.w	r3, r3, r1
 800dd00:	e7e5      	b.n	800dcce <floorf+0x32>
 800dd02:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dd06:	d3e4      	bcc.n	800dcd2 <floorf+0x36>
 800dd08:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dd0c:	4770      	bx	lr
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e7dd      	b.n	800dcce <floorf+0x32>
 800dd12:	bf00      	nop
 800dd14:	7149f2ca 	.word	0x7149f2ca
 800dd18:	bf800000 	.word	0xbf800000
 800dd1c:	007fffff 	.word	0x007fffff

0800dd20 <scalbnf>:
 800dd20:	b508      	push	{r3, lr}
 800dd22:	ee10 2a10 	vmov	r2, s0
 800dd26:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dd2a:	ed2d 8b02 	vpush	{d8}
 800dd2e:	eef0 0a40 	vmov.f32	s1, s0
 800dd32:	d004      	beq.n	800dd3e <scalbnf+0x1e>
 800dd34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dd38:	d306      	bcc.n	800dd48 <scalbnf+0x28>
 800dd3a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800dd3e:	ecbd 8b02 	vpop	{d8}
 800dd42:	eeb0 0a60 	vmov.f32	s0, s1
 800dd46:	bd08      	pop	{r3, pc}
 800dd48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd4c:	d21c      	bcs.n	800dd88 <scalbnf+0x68>
 800dd4e:	4b1f      	ldr	r3, [pc, #124]	; (800ddcc <scalbnf+0xac>)
 800dd50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ddd0 <scalbnf+0xb0>
 800dd54:	4298      	cmp	r0, r3
 800dd56:	ee60 0a27 	vmul.f32	s1, s0, s15
 800dd5a:	db10      	blt.n	800dd7e <scalbnf+0x5e>
 800dd5c:	ee10 2a90 	vmov	r2, s1
 800dd60:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800dd64:	3b19      	subs	r3, #25
 800dd66:	4403      	add	r3, r0
 800dd68:	2bfe      	cmp	r3, #254	; 0xfe
 800dd6a:	dd0f      	ble.n	800dd8c <scalbnf+0x6c>
 800dd6c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800ddd4 <scalbnf+0xb4>
 800dd70:	eeb0 0a48 	vmov.f32	s0, s16
 800dd74:	f000 f843 	bl	800ddfe <copysignf>
 800dd78:	ee60 0a08 	vmul.f32	s1, s0, s16
 800dd7c:	e7df      	b.n	800dd3e <scalbnf+0x1e>
 800dd7e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ddd8 <scalbnf+0xb8>
 800dd82:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800dd86:	e7da      	b.n	800dd3e <scalbnf+0x1e>
 800dd88:	0ddb      	lsrs	r3, r3, #23
 800dd8a:	e7ec      	b.n	800dd66 <scalbnf+0x46>
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dd06      	ble.n	800dd9e <scalbnf+0x7e>
 800dd90:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800dd94:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800dd98:	ee00 3a90 	vmov	s1, r3
 800dd9c:	e7cf      	b.n	800dd3e <scalbnf+0x1e>
 800dd9e:	f113 0f16 	cmn.w	r3, #22
 800dda2:	da06      	bge.n	800ddb2 <scalbnf+0x92>
 800dda4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dda8:	4298      	cmp	r0, r3
 800ddaa:	dcdf      	bgt.n	800dd6c <scalbnf+0x4c>
 800ddac:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800ddd8 <scalbnf+0xb8>
 800ddb0:	e7de      	b.n	800dd70 <scalbnf+0x50>
 800ddb2:	3319      	adds	r3, #25
 800ddb4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ddb8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ddbc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dddc <scalbnf+0xbc>
 800ddc0:	ee07 3a10 	vmov	s14, r3
 800ddc4:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ddc8:	e7b9      	b.n	800dd3e <scalbnf+0x1e>
 800ddca:	bf00      	nop
 800ddcc:	ffff3cb0 	.word	0xffff3cb0
 800ddd0:	4c000000 	.word	0x4c000000
 800ddd4:	7149f2ca 	.word	0x7149f2ca
 800ddd8:	0da24260 	.word	0x0da24260
 800dddc:	33000000 	.word	0x33000000

0800dde0 <copysign>:
 800dde0:	ec51 0b10 	vmov	r0, r1, d0
 800dde4:	ee11 0a90 	vmov	r0, s3
 800dde8:	ee10 2a10 	vmov	r2, s0
 800ddec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ddf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ddf4:	ea41 0300 	orr.w	r3, r1, r0
 800ddf8:	ec43 2b10 	vmov	d0, r2, r3
 800ddfc:	4770      	bx	lr

0800ddfe <copysignf>:
 800ddfe:	ee10 3a10 	vmov	r3, s0
 800de02:	ee10 2a90 	vmov	r2, s1
 800de06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800de0e:	4313      	orrs	r3, r2
 800de10:	ee00 3a10 	vmov	s0, r3
 800de14:	4770      	bx	lr
	...

0800de18 <__errno>:
 800de18:	4b01      	ldr	r3, [pc, #4]	; (800de20 <__errno+0x8>)
 800de1a:	6818      	ldr	r0, [r3, #0]
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	20000048 	.word	0x20000048

0800de24 <__libc_init_array>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	4e0d      	ldr	r6, [pc, #52]	; (800de5c <__libc_init_array+0x38>)
 800de28:	4c0d      	ldr	r4, [pc, #52]	; (800de60 <__libc_init_array+0x3c>)
 800de2a:	1ba4      	subs	r4, r4, r6
 800de2c:	10a4      	asrs	r4, r4, #2
 800de2e:	2500      	movs	r5, #0
 800de30:	42a5      	cmp	r5, r4
 800de32:	d109      	bne.n	800de48 <__libc_init_array+0x24>
 800de34:	4e0b      	ldr	r6, [pc, #44]	; (800de64 <__libc_init_array+0x40>)
 800de36:	4c0c      	ldr	r4, [pc, #48]	; (800de68 <__libc_init_array+0x44>)
 800de38:	f004 f9fe 	bl	8012238 <_init>
 800de3c:	1ba4      	subs	r4, r4, r6
 800de3e:	10a4      	asrs	r4, r4, #2
 800de40:	2500      	movs	r5, #0
 800de42:	42a5      	cmp	r5, r4
 800de44:	d105      	bne.n	800de52 <__libc_init_array+0x2e>
 800de46:	bd70      	pop	{r4, r5, r6, pc}
 800de48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de4c:	4798      	blx	r3
 800de4e:	3501      	adds	r5, #1
 800de50:	e7ee      	b.n	800de30 <__libc_init_array+0xc>
 800de52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de56:	4798      	blx	r3
 800de58:	3501      	adds	r5, #1
 800de5a:	e7f2      	b.n	800de42 <__libc_init_array+0x1e>
 800de5c:	08012ba8 	.word	0x08012ba8
 800de60:	08012ba8 	.word	0x08012ba8
 800de64:	08012ba8 	.word	0x08012ba8
 800de68:	08012bac 	.word	0x08012bac

0800de6c <memcpy>:
 800de6c:	b510      	push	{r4, lr}
 800de6e:	1e43      	subs	r3, r0, #1
 800de70:	440a      	add	r2, r1
 800de72:	4291      	cmp	r1, r2
 800de74:	d100      	bne.n	800de78 <memcpy+0xc>
 800de76:	bd10      	pop	{r4, pc}
 800de78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de80:	e7f7      	b.n	800de72 <memcpy+0x6>

0800de82 <memset>:
 800de82:	4402      	add	r2, r0
 800de84:	4603      	mov	r3, r0
 800de86:	4293      	cmp	r3, r2
 800de88:	d100      	bne.n	800de8c <memset+0xa>
 800de8a:	4770      	bx	lr
 800de8c:	f803 1b01 	strb.w	r1, [r3], #1
 800de90:	e7f9      	b.n	800de86 <memset+0x4>

0800de92 <__cvt>:
 800de92:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de96:	ec55 4b10 	vmov	r4, r5, d0
 800de9a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800de9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	460e      	mov	r6, r1
 800dea4:	4691      	mov	r9, r2
 800dea6:	4619      	mov	r1, r3
 800dea8:	bfb8      	it	lt
 800deaa:	4622      	movlt	r2, r4
 800deac:	462b      	mov	r3, r5
 800deae:	f027 0720 	bic.w	r7, r7, #32
 800deb2:	bfbb      	ittet	lt
 800deb4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800deb8:	461d      	movlt	r5, r3
 800deba:	2300      	movge	r3, #0
 800debc:	232d      	movlt	r3, #45	; 0x2d
 800debe:	bfb8      	it	lt
 800dec0:	4614      	movlt	r4, r2
 800dec2:	2f46      	cmp	r7, #70	; 0x46
 800dec4:	700b      	strb	r3, [r1, #0]
 800dec6:	d004      	beq.n	800ded2 <__cvt+0x40>
 800dec8:	2f45      	cmp	r7, #69	; 0x45
 800deca:	d100      	bne.n	800dece <__cvt+0x3c>
 800decc:	3601      	adds	r6, #1
 800dece:	2102      	movs	r1, #2
 800ded0:	e000      	b.n	800ded4 <__cvt+0x42>
 800ded2:	2103      	movs	r1, #3
 800ded4:	ab03      	add	r3, sp, #12
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	ab02      	add	r3, sp, #8
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	4632      	mov	r2, r6
 800dede:	4653      	mov	r3, sl
 800dee0:	ec45 4b10 	vmov	d0, r4, r5
 800dee4:	f001 fd90 	bl	800fa08 <_dtoa_r>
 800dee8:	2f47      	cmp	r7, #71	; 0x47
 800deea:	4680      	mov	r8, r0
 800deec:	d102      	bne.n	800def4 <__cvt+0x62>
 800deee:	f019 0f01 	tst.w	r9, #1
 800def2:	d026      	beq.n	800df42 <__cvt+0xb0>
 800def4:	2f46      	cmp	r7, #70	; 0x46
 800def6:	eb08 0906 	add.w	r9, r8, r6
 800defa:	d111      	bne.n	800df20 <__cvt+0x8e>
 800defc:	f898 3000 	ldrb.w	r3, [r8]
 800df00:	2b30      	cmp	r3, #48	; 0x30
 800df02:	d10a      	bne.n	800df1a <__cvt+0x88>
 800df04:	2200      	movs	r2, #0
 800df06:	2300      	movs	r3, #0
 800df08:	4620      	mov	r0, r4
 800df0a:	4629      	mov	r1, r5
 800df0c:	f7f2 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 800df10:	b918      	cbnz	r0, 800df1a <__cvt+0x88>
 800df12:	f1c6 0601 	rsb	r6, r6, #1
 800df16:	f8ca 6000 	str.w	r6, [sl]
 800df1a:	f8da 3000 	ldr.w	r3, [sl]
 800df1e:	4499      	add	r9, r3
 800df20:	2200      	movs	r2, #0
 800df22:	2300      	movs	r3, #0
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 800df2c:	b938      	cbnz	r0, 800df3e <__cvt+0xac>
 800df2e:	2230      	movs	r2, #48	; 0x30
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	454b      	cmp	r3, r9
 800df34:	d205      	bcs.n	800df42 <__cvt+0xb0>
 800df36:	1c59      	adds	r1, r3, #1
 800df38:	9103      	str	r1, [sp, #12]
 800df3a:	701a      	strb	r2, [r3, #0]
 800df3c:	e7f8      	b.n	800df30 <__cvt+0x9e>
 800df3e:	f8cd 900c 	str.w	r9, [sp, #12]
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df46:	eba3 0308 	sub.w	r3, r3, r8
 800df4a:	4640      	mov	r0, r8
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	b004      	add	sp, #16
 800df50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800df54 <__exponent>:
 800df54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df56:	2900      	cmp	r1, #0
 800df58:	4604      	mov	r4, r0
 800df5a:	bfba      	itte	lt
 800df5c:	4249      	neglt	r1, r1
 800df5e:	232d      	movlt	r3, #45	; 0x2d
 800df60:	232b      	movge	r3, #43	; 0x2b
 800df62:	2909      	cmp	r1, #9
 800df64:	f804 2b02 	strb.w	r2, [r4], #2
 800df68:	7043      	strb	r3, [r0, #1]
 800df6a:	dd20      	ble.n	800dfae <__exponent+0x5a>
 800df6c:	f10d 0307 	add.w	r3, sp, #7
 800df70:	461f      	mov	r7, r3
 800df72:	260a      	movs	r6, #10
 800df74:	fb91 f5f6 	sdiv	r5, r1, r6
 800df78:	fb06 1115 	mls	r1, r6, r5, r1
 800df7c:	3130      	adds	r1, #48	; 0x30
 800df7e:	2d09      	cmp	r5, #9
 800df80:	f803 1c01 	strb.w	r1, [r3, #-1]
 800df84:	f103 32ff 	add.w	r2, r3, #4294967295
 800df88:	4629      	mov	r1, r5
 800df8a:	dc09      	bgt.n	800dfa0 <__exponent+0x4c>
 800df8c:	3130      	adds	r1, #48	; 0x30
 800df8e:	3b02      	subs	r3, #2
 800df90:	f802 1c01 	strb.w	r1, [r2, #-1]
 800df94:	42bb      	cmp	r3, r7
 800df96:	4622      	mov	r2, r4
 800df98:	d304      	bcc.n	800dfa4 <__exponent+0x50>
 800df9a:	1a10      	subs	r0, r2, r0
 800df9c:	b003      	add	sp, #12
 800df9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	e7e7      	b.n	800df74 <__exponent+0x20>
 800dfa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa8:	f804 2b01 	strb.w	r2, [r4], #1
 800dfac:	e7f2      	b.n	800df94 <__exponent+0x40>
 800dfae:	2330      	movs	r3, #48	; 0x30
 800dfb0:	4419      	add	r1, r3
 800dfb2:	7083      	strb	r3, [r0, #2]
 800dfb4:	1d02      	adds	r2, r0, #4
 800dfb6:	70c1      	strb	r1, [r0, #3]
 800dfb8:	e7ef      	b.n	800df9a <__exponent+0x46>
	...

0800dfbc <_printf_float>:
 800dfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc0:	b08d      	sub	sp, #52	; 0x34
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800dfc8:	4616      	mov	r6, r2
 800dfca:	461f      	mov	r7, r3
 800dfcc:	4605      	mov	r5, r0
 800dfce:	f002 fec9 	bl	8010d64 <_localeconv_r>
 800dfd2:	6803      	ldr	r3, [r0, #0]
 800dfd4:	9304      	str	r3, [sp, #16]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f2 f8fa 	bl	80001d0 <strlen>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	930a      	str	r3, [sp, #40]	; 0x28
 800dfe0:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe4:	9005      	str	r0, [sp, #20]
 800dfe6:	3307      	adds	r3, #7
 800dfe8:	f023 0307 	bic.w	r3, r3, #7
 800dfec:	f103 0208 	add.w	r2, r3, #8
 800dff0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dff4:	f8d4 b000 	ldr.w	fp, [r4]
 800dff8:	f8c8 2000 	str.w	r2, [r8]
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e004:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e008:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e00c:	9307      	str	r3, [sp, #28]
 800e00e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e012:	f04f 32ff 	mov.w	r2, #4294967295
 800e016:	4ba7      	ldr	r3, [pc, #668]	; (800e2b4 <_printf_float+0x2f8>)
 800e018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e01c:	f7f2 fd86 	bl	8000b2c <__aeabi_dcmpun>
 800e020:	bb70      	cbnz	r0, 800e080 <_printf_float+0xc4>
 800e022:	f04f 32ff 	mov.w	r2, #4294967295
 800e026:	4ba3      	ldr	r3, [pc, #652]	; (800e2b4 <_printf_float+0x2f8>)
 800e028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e02c:	f7f2 fd60 	bl	8000af0 <__aeabi_dcmple>
 800e030:	bb30      	cbnz	r0, 800e080 <_printf_float+0xc4>
 800e032:	2200      	movs	r2, #0
 800e034:	2300      	movs	r3, #0
 800e036:	4640      	mov	r0, r8
 800e038:	4649      	mov	r1, r9
 800e03a:	f7f2 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800e03e:	b110      	cbz	r0, 800e046 <_printf_float+0x8a>
 800e040:	232d      	movs	r3, #45	; 0x2d
 800e042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e046:	4a9c      	ldr	r2, [pc, #624]	; (800e2b8 <_printf_float+0x2fc>)
 800e048:	4b9c      	ldr	r3, [pc, #624]	; (800e2bc <_printf_float+0x300>)
 800e04a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e04e:	bf8c      	ite	hi
 800e050:	4690      	movhi	r8, r2
 800e052:	4698      	movls	r8, r3
 800e054:	2303      	movs	r3, #3
 800e056:	f02b 0204 	bic.w	r2, fp, #4
 800e05a:	6123      	str	r3, [r4, #16]
 800e05c:	6022      	str	r2, [r4, #0]
 800e05e:	f04f 0900 	mov.w	r9, #0
 800e062:	9700      	str	r7, [sp, #0]
 800e064:	4633      	mov	r3, r6
 800e066:	aa0b      	add	r2, sp, #44	; 0x2c
 800e068:	4621      	mov	r1, r4
 800e06a:	4628      	mov	r0, r5
 800e06c:	f000 f9e6 	bl	800e43c <_printf_common>
 800e070:	3001      	adds	r0, #1
 800e072:	f040 808d 	bne.w	800e190 <_printf_float+0x1d4>
 800e076:	f04f 30ff 	mov.w	r0, #4294967295
 800e07a:	b00d      	add	sp, #52	; 0x34
 800e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e080:	4642      	mov	r2, r8
 800e082:	464b      	mov	r3, r9
 800e084:	4640      	mov	r0, r8
 800e086:	4649      	mov	r1, r9
 800e088:	f7f2 fd50 	bl	8000b2c <__aeabi_dcmpun>
 800e08c:	b110      	cbz	r0, 800e094 <_printf_float+0xd8>
 800e08e:	4a8c      	ldr	r2, [pc, #560]	; (800e2c0 <_printf_float+0x304>)
 800e090:	4b8c      	ldr	r3, [pc, #560]	; (800e2c4 <_printf_float+0x308>)
 800e092:	e7da      	b.n	800e04a <_printf_float+0x8e>
 800e094:	6861      	ldr	r1, [r4, #4]
 800e096:	1c4b      	adds	r3, r1, #1
 800e098:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e09c:	a80a      	add	r0, sp, #40	; 0x28
 800e09e:	d13e      	bne.n	800e11e <_printf_float+0x162>
 800e0a0:	2306      	movs	r3, #6
 800e0a2:	6063      	str	r3, [r4, #4]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e0aa:	ab09      	add	r3, sp, #36	; 0x24
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	ec49 8b10 	vmov	d0, r8, r9
 800e0b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0b6:	6022      	str	r2, [r4, #0]
 800e0b8:	f8cd a004 	str.w	sl, [sp, #4]
 800e0bc:	6861      	ldr	r1, [r4, #4]
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7ff fee7 	bl	800de92 <__cvt>
 800e0c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e0c8:	2b47      	cmp	r3, #71	; 0x47
 800e0ca:	4680      	mov	r8, r0
 800e0cc:	d109      	bne.n	800e0e2 <_printf_float+0x126>
 800e0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d0:	1cd8      	adds	r0, r3, #3
 800e0d2:	db02      	blt.n	800e0da <_printf_float+0x11e>
 800e0d4:	6862      	ldr	r2, [r4, #4]
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	dd47      	ble.n	800e16a <_printf_float+0x1ae>
 800e0da:	f1aa 0a02 	sub.w	sl, sl, #2
 800e0de:	fa5f fa8a 	uxtb.w	sl, sl
 800e0e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e0e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0e8:	d824      	bhi.n	800e134 <_printf_float+0x178>
 800e0ea:	3901      	subs	r1, #1
 800e0ec:	4652      	mov	r2, sl
 800e0ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0f2:	9109      	str	r1, [sp, #36]	; 0x24
 800e0f4:	f7ff ff2e 	bl	800df54 <__exponent>
 800e0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0fa:	1813      	adds	r3, r2, r0
 800e0fc:	2a01      	cmp	r2, #1
 800e0fe:	4681      	mov	r9, r0
 800e100:	6123      	str	r3, [r4, #16]
 800e102:	dc02      	bgt.n	800e10a <_printf_float+0x14e>
 800e104:	6822      	ldr	r2, [r4, #0]
 800e106:	07d1      	lsls	r1, r2, #31
 800e108:	d501      	bpl.n	800e10e <_printf_float+0x152>
 800e10a:	3301      	adds	r3, #1
 800e10c:	6123      	str	r3, [r4, #16]
 800e10e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0a5      	beq.n	800e062 <_printf_float+0xa6>
 800e116:	232d      	movs	r3, #45	; 0x2d
 800e118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e11c:	e7a1      	b.n	800e062 <_printf_float+0xa6>
 800e11e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e122:	f000 8177 	beq.w	800e414 <_printf_float+0x458>
 800e126:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e12a:	d1bb      	bne.n	800e0a4 <_printf_float+0xe8>
 800e12c:	2900      	cmp	r1, #0
 800e12e:	d1b9      	bne.n	800e0a4 <_printf_float+0xe8>
 800e130:	2301      	movs	r3, #1
 800e132:	e7b6      	b.n	800e0a2 <_printf_float+0xe6>
 800e134:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e138:	d119      	bne.n	800e16e <_printf_float+0x1b2>
 800e13a:	2900      	cmp	r1, #0
 800e13c:	6863      	ldr	r3, [r4, #4]
 800e13e:	dd0c      	ble.n	800e15a <_printf_float+0x19e>
 800e140:	6121      	str	r1, [r4, #16]
 800e142:	b913      	cbnz	r3, 800e14a <_printf_float+0x18e>
 800e144:	6822      	ldr	r2, [r4, #0]
 800e146:	07d2      	lsls	r2, r2, #31
 800e148:	d502      	bpl.n	800e150 <_printf_float+0x194>
 800e14a:	3301      	adds	r3, #1
 800e14c:	440b      	add	r3, r1
 800e14e:	6123      	str	r3, [r4, #16]
 800e150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e152:	65a3      	str	r3, [r4, #88]	; 0x58
 800e154:	f04f 0900 	mov.w	r9, #0
 800e158:	e7d9      	b.n	800e10e <_printf_float+0x152>
 800e15a:	b913      	cbnz	r3, 800e162 <_printf_float+0x1a6>
 800e15c:	6822      	ldr	r2, [r4, #0]
 800e15e:	07d0      	lsls	r0, r2, #31
 800e160:	d501      	bpl.n	800e166 <_printf_float+0x1aa>
 800e162:	3302      	adds	r3, #2
 800e164:	e7f3      	b.n	800e14e <_printf_float+0x192>
 800e166:	2301      	movs	r3, #1
 800e168:	e7f1      	b.n	800e14e <_printf_float+0x192>
 800e16a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e16e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e172:	4293      	cmp	r3, r2
 800e174:	db05      	blt.n	800e182 <_printf_float+0x1c6>
 800e176:	6822      	ldr	r2, [r4, #0]
 800e178:	6123      	str	r3, [r4, #16]
 800e17a:	07d1      	lsls	r1, r2, #31
 800e17c:	d5e8      	bpl.n	800e150 <_printf_float+0x194>
 800e17e:	3301      	adds	r3, #1
 800e180:	e7e5      	b.n	800e14e <_printf_float+0x192>
 800e182:	2b00      	cmp	r3, #0
 800e184:	bfd4      	ite	le
 800e186:	f1c3 0302 	rsble	r3, r3, #2
 800e18a:	2301      	movgt	r3, #1
 800e18c:	4413      	add	r3, r2
 800e18e:	e7de      	b.n	800e14e <_printf_float+0x192>
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	055a      	lsls	r2, r3, #21
 800e194:	d407      	bmi.n	800e1a6 <_printf_float+0x1ea>
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	4642      	mov	r2, r8
 800e19a:	4631      	mov	r1, r6
 800e19c:	4628      	mov	r0, r5
 800e19e:	47b8      	blx	r7
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d12b      	bne.n	800e1fc <_printf_float+0x240>
 800e1a4:	e767      	b.n	800e076 <_printf_float+0xba>
 800e1a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e1aa:	f240 80dc 	bls.w	800e366 <_printf_float+0x3aa>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1b6:	f7f2 fc87 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d033      	beq.n	800e226 <_printf_float+0x26a>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	4a41      	ldr	r2, [pc, #260]	; (800e2c8 <_printf_float+0x30c>)
 800e1c2:	4631      	mov	r1, r6
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	47b8      	blx	r7
 800e1c8:	3001      	adds	r0, #1
 800e1ca:	f43f af54 	beq.w	800e076 <_printf_float+0xba>
 800e1ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	db02      	blt.n	800e1dc <_printf_float+0x220>
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	07d8      	lsls	r0, r3, #31
 800e1da:	d50f      	bpl.n	800e1fc <_printf_float+0x240>
 800e1dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1e0:	4631      	mov	r1, r6
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	47b8      	blx	r7
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	f43f af45 	beq.w	800e076 <_printf_float+0xba>
 800e1ec:	f04f 0800 	mov.w	r8, #0
 800e1f0:	f104 091a 	add.w	r9, r4, #26
 800e1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	dc09      	bgt.n	800e210 <_printf_float+0x254>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	079b      	lsls	r3, r3, #30
 800e200:	f100 8103 	bmi.w	800e40a <_printf_float+0x44e>
 800e204:	68e0      	ldr	r0, [r4, #12]
 800e206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e208:	4298      	cmp	r0, r3
 800e20a:	bfb8      	it	lt
 800e20c:	4618      	movlt	r0, r3
 800e20e:	e734      	b.n	800e07a <_printf_float+0xbe>
 800e210:	2301      	movs	r3, #1
 800e212:	464a      	mov	r2, r9
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	47b8      	blx	r7
 800e21a:	3001      	adds	r0, #1
 800e21c:	f43f af2b 	beq.w	800e076 <_printf_float+0xba>
 800e220:	f108 0801 	add.w	r8, r8, #1
 800e224:	e7e6      	b.n	800e1f4 <_printf_float+0x238>
 800e226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e228:	2b00      	cmp	r3, #0
 800e22a:	dc2b      	bgt.n	800e284 <_printf_float+0x2c8>
 800e22c:	2301      	movs	r3, #1
 800e22e:	4a26      	ldr	r2, [pc, #152]	; (800e2c8 <_printf_float+0x30c>)
 800e230:	4631      	mov	r1, r6
 800e232:	4628      	mov	r0, r5
 800e234:	47b8      	blx	r7
 800e236:	3001      	adds	r0, #1
 800e238:	f43f af1d 	beq.w	800e076 <_printf_float+0xba>
 800e23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e23e:	b923      	cbnz	r3, 800e24a <_printf_float+0x28e>
 800e240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e242:	b913      	cbnz	r3, 800e24a <_printf_float+0x28e>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	07d9      	lsls	r1, r3, #31
 800e248:	d5d8      	bpl.n	800e1fc <_printf_float+0x240>
 800e24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e24e:	4631      	mov	r1, r6
 800e250:	4628      	mov	r0, r5
 800e252:	47b8      	blx	r7
 800e254:	3001      	adds	r0, #1
 800e256:	f43f af0e 	beq.w	800e076 <_printf_float+0xba>
 800e25a:	f04f 0900 	mov.w	r9, #0
 800e25e:	f104 0a1a 	add.w	sl, r4, #26
 800e262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e264:	425b      	negs	r3, r3
 800e266:	454b      	cmp	r3, r9
 800e268:	dc01      	bgt.n	800e26e <_printf_float+0x2b2>
 800e26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e26c:	e794      	b.n	800e198 <_printf_float+0x1dc>
 800e26e:	2301      	movs	r3, #1
 800e270:	4652      	mov	r2, sl
 800e272:	4631      	mov	r1, r6
 800e274:	4628      	mov	r0, r5
 800e276:	47b8      	blx	r7
 800e278:	3001      	adds	r0, #1
 800e27a:	f43f aefc 	beq.w	800e076 <_printf_float+0xba>
 800e27e:	f109 0901 	add.w	r9, r9, #1
 800e282:	e7ee      	b.n	800e262 <_printf_float+0x2a6>
 800e284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e288:	429a      	cmp	r2, r3
 800e28a:	bfa8      	it	ge
 800e28c:	461a      	movge	r2, r3
 800e28e:	2a00      	cmp	r2, #0
 800e290:	4691      	mov	r9, r2
 800e292:	dd07      	ble.n	800e2a4 <_printf_float+0x2e8>
 800e294:	4613      	mov	r3, r2
 800e296:	4631      	mov	r1, r6
 800e298:	4642      	mov	r2, r8
 800e29a:	4628      	mov	r0, r5
 800e29c:	47b8      	blx	r7
 800e29e:	3001      	adds	r0, #1
 800e2a0:	f43f aee9 	beq.w	800e076 <_printf_float+0xba>
 800e2a4:	f104 031a 	add.w	r3, r4, #26
 800e2a8:	f04f 0b00 	mov.w	fp, #0
 800e2ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2b0:	9306      	str	r3, [sp, #24]
 800e2b2:	e015      	b.n	800e2e0 <_printf_float+0x324>
 800e2b4:	7fefffff 	.word	0x7fefffff
 800e2b8:	08012888 	.word	0x08012888
 800e2bc:	08012884 	.word	0x08012884
 800e2c0:	08012890 	.word	0x08012890
 800e2c4:	0801288c 	.word	0x0801288c
 800e2c8:	08012894 	.word	0x08012894
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	9a06      	ldr	r2, [sp, #24]
 800e2d0:	4631      	mov	r1, r6
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	47b8      	blx	r7
 800e2d6:	3001      	adds	r0, #1
 800e2d8:	f43f aecd 	beq.w	800e076 <_printf_float+0xba>
 800e2dc:	f10b 0b01 	add.w	fp, fp, #1
 800e2e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e2e4:	ebaa 0309 	sub.w	r3, sl, r9
 800e2e8:	455b      	cmp	r3, fp
 800e2ea:	dcef      	bgt.n	800e2cc <_printf_float+0x310>
 800e2ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	44d0      	add	r8, sl
 800e2f4:	db15      	blt.n	800e322 <_printf_float+0x366>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	07da      	lsls	r2, r3, #31
 800e2fa:	d412      	bmi.n	800e322 <_printf_float+0x366>
 800e2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e300:	eba3 020a 	sub.w	r2, r3, sl
 800e304:	eba3 0a01 	sub.w	sl, r3, r1
 800e308:	4592      	cmp	sl, r2
 800e30a:	bfa8      	it	ge
 800e30c:	4692      	movge	sl, r2
 800e30e:	f1ba 0f00 	cmp.w	sl, #0
 800e312:	dc0e      	bgt.n	800e332 <_printf_float+0x376>
 800e314:	f04f 0800 	mov.w	r8, #0
 800e318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e31c:	f104 091a 	add.w	r9, r4, #26
 800e320:	e019      	b.n	800e356 <_printf_float+0x39a>
 800e322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e326:	4631      	mov	r1, r6
 800e328:	4628      	mov	r0, r5
 800e32a:	47b8      	blx	r7
 800e32c:	3001      	adds	r0, #1
 800e32e:	d1e5      	bne.n	800e2fc <_printf_float+0x340>
 800e330:	e6a1      	b.n	800e076 <_printf_float+0xba>
 800e332:	4653      	mov	r3, sl
 800e334:	4642      	mov	r2, r8
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	d1e9      	bne.n	800e314 <_printf_float+0x358>
 800e340:	e699      	b.n	800e076 <_printf_float+0xba>
 800e342:	2301      	movs	r3, #1
 800e344:	464a      	mov	r2, r9
 800e346:	4631      	mov	r1, r6
 800e348:	4628      	mov	r0, r5
 800e34a:	47b8      	blx	r7
 800e34c:	3001      	adds	r0, #1
 800e34e:	f43f ae92 	beq.w	800e076 <_printf_float+0xba>
 800e352:	f108 0801 	add.w	r8, r8, #1
 800e356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e35a:	1a9b      	subs	r3, r3, r2
 800e35c:	eba3 030a 	sub.w	r3, r3, sl
 800e360:	4543      	cmp	r3, r8
 800e362:	dcee      	bgt.n	800e342 <_printf_float+0x386>
 800e364:	e74a      	b.n	800e1fc <_printf_float+0x240>
 800e366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e368:	2a01      	cmp	r2, #1
 800e36a:	dc01      	bgt.n	800e370 <_printf_float+0x3b4>
 800e36c:	07db      	lsls	r3, r3, #31
 800e36e:	d53a      	bpl.n	800e3e6 <_printf_float+0x42a>
 800e370:	2301      	movs	r3, #1
 800e372:	4642      	mov	r2, r8
 800e374:	4631      	mov	r1, r6
 800e376:	4628      	mov	r0, r5
 800e378:	47b8      	blx	r7
 800e37a:	3001      	adds	r0, #1
 800e37c:	f43f ae7b 	beq.w	800e076 <_printf_float+0xba>
 800e380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e384:	4631      	mov	r1, r6
 800e386:	4628      	mov	r0, r5
 800e388:	47b8      	blx	r7
 800e38a:	3001      	adds	r0, #1
 800e38c:	f108 0801 	add.w	r8, r8, #1
 800e390:	f43f ae71 	beq.w	800e076 <_printf_float+0xba>
 800e394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e396:	2200      	movs	r2, #0
 800e398:	f103 3aff 	add.w	sl, r3, #4294967295
 800e39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f7f2 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3a6:	b9c8      	cbnz	r0, 800e3dc <_printf_float+0x420>
 800e3a8:	4653      	mov	r3, sl
 800e3aa:	4642      	mov	r2, r8
 800e3ac:	4631      	mov	r1, r6
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	47b8      	blx	r7
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d10e      	bne.n	800e3d4 <_printf_float+0x418>
 800e3b6:	e65e      	b.n	800e076 <_printf_float+0xba>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	4652      	mov	r2, sl
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4628      	mov	r0, r5
 800e3c0:	47b8      	blx	r7
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	f43f ae57 	beq.w	800e076 <_printf_float+0xba>
 800e3c8:	f108 0801 	add.w	r8, r8, #1
 800e3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	4543      	cmp	r3, r8
 800e3d2:	dcf1      	bgt.n	800e3b8 <_printf_float+0x3fc>
 800e3d4:	464b      	mov	r3, r9
 800e3d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e3da:	e6de      	b.n	800e19a <_printf_float+0x1de>
 800e3dc:	f04f 0800 	mov.w	r8, #0
 800e3e0:	f104 0a1a 	add.w	sl, r4, #26
 800e3e4:	e7f2      	b.n	800e3cc <_printf_float+0x410>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e7df      	b.n	800e3aa <_printf_float+0x3ee>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	464a      	mov	r2, r9
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	47b8      	blx	r7
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	f43f ae3e 	beq.w	800e076 <_printf_float+0xba>
 800e3fa:	f108 0801 	add.w	r8, r8, #1
 800e3fe:	68e3      	ldr	r3, [r4, #12]
 800e400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e402:	1a9b      	subs	r3, r3, r2
 800e404:	4543      	cmp	r3, r8
 800e406:	dcf0      	bgt.n	800e3ea <_printf_float+0x42e>
 800e408:	e6fc      	b.n	800e204 <_printf_float+0x248>
 800e40a:	f04f 0800 	mov.w	r8, #0
 800e40e:	f104 0919 	add.w	r9, r4, #25
 800e412:	e7f4      	b.n	800e3fe <_printf_float+0x442>
 800e414:	2900      	cmp	r1, #0
 800e416:	f43f ae8b 	beq.w	800e130 <_printf_float+0x174>
 800e41a:	2300      	movs	r3, #0
 800e41c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e420:	ab09      	add	r3, sp, #36	; 0x24
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	ec49 8b10 	vmov	d0, r8, r9
 800e428:	6022      	str	r2, [r4, #0]
 800e42a:	f8cd a004 	str.w	sl, [sp, #4]
 800e42e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e432:	4628      	mov	r0, r5
 800e434:	f7ff fd2d 	bl	800de92 <__cvt>
 800e438:	4680      	mov	r8, r0
 800e43a:	e648      	b.n	800e0ce <_printf_float+0x112>

0800e43c <_printf_common>:
 800e43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e440:	4691      	mov	r9, r2
 800e442:	461f      	mov	r7, r3
 800e444:	688a      	ldr	r2, [r1, #8]
 800e446:	690b      	ldr	r3, [r1, #16]
 800e448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e44c:	4293      	cmp	r3, r2
 800e44e:	bfb8      	it	lt
 800e450:	4613      	movlt	r3, r2
 800e452:	f8c9 3000 	str.w	r3, [r9]
 800e456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e45a:	4606      	mov	r6, r0
 800e45c:	460c      	mov	r4, r1
 800e45e:	b112      	cbz	r2, 800e466 <_printf_common+0x2a>
 800e460:	3301      	adds	r3, #1
 800e462:	f8c9 3000 	str.w	r3, [r9]
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	0699      	lsls	r1, r3, #26
 800e46a:	bf42      	ittt	mi
 800e46c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e470:	3302      	addmi	r3, #2
 800e472:	f8c9 3000 	strmi.w	r3, [r9]
 800e476:	6825      	ldr	r5, [r4, #0]
 800e478:	f015 0506 	ands.w	r5, r5, #6
 800e47c:	d107      	bne.n	800e48e <_printf_common+0x52>
 800e47e:	f104 0a19 	add.w	sl, r4, #25
 800e482:	68e3      	ldr	r3, [r4, #12]
 800e484:	f8d9 2000 	ldr.w	r2, [r9]
 800e488:	1a9b      	subs	r3, r3, r2
 800e48a:	42ab      	cmp	r3, r5
 800e48c:	dc28      	bgt.n	800e4e0 <_printf_common+0xa4>
 800e48e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e492:	6822      	ldr	r2, [r4, #0]
 800e494:	3300      	adds	r3, #0
 800e496:	bf18      	it	ne
 800e498:	2301      	movne	r3, #1
 800e49a:	0692      	lsls	r2, r2, #26
 800e49c:	d42d      	bmi.n	800e4fa <_printf_common+0xbe>
 800e49e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	47c0      	blx	r8
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	d020      	beq.n	800e4ee <_printf_common+0xb2>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	68e5      	ldr	r5, [r4, #12]
 800e4b0:	f8d9 2000 	ldr.w	r2, [r9]
 800e4b4:	f003 0306 	and.w	r3, r3, #6
 800e4b8:	2b04      	cmp	r3, #4
 800e4ba:	bf08      	it	eq
 800e4bc:	1aad      	subeq	r5, r5, r2
 800e4be:	68a3      	ldr	r3, [r4, #8]
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	bf0c      	ite	eq
 800e4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4c8:	2500      	movne	r5, #0
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	bfc4      	itt	gt
 800e4ce:	1a9b      	subgt	r3, r3, r2
 800e4d0:	18ed      	addgt	r5, r5, r3
 800e4d2:	f04f 0900 	mov.w	r9, #0
 800e4d6:	341a      	adds	r4, #26
 800e4d8:	454d      	cmp	r5, r9
 800e4da:	d11a      	bne.n	800e512 <_printf_common+0xd6>
 800e4dc:	2000      	movs	r0, #0
 800e4de:	e008      	b.n	800e4f2 <_printf_common+0xb6>
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	4652      	mov	r2, sl
 800e4e4:	4639      	mov	r1, r7
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	47c0      	blx	r8
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	d103      	bne.n	800e4f6 <_printf_common+0xba>
 800e4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f6:	3501      	adds	r5, #1
 800e4f8:	e7c3      	b.n	800e482 <_printf_common+0x46>
 800e4fa:	18e1      	adds	r1, r4, r3
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	2030      	movs	r0, #48	; 0x30
 800e500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e504:	4422      	add	r2, r4
 800e506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e50a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e50e:	3302      	adds	r3, #2
 800e510:	e7c5      	b.n	800e49e <_printf_common+0x62>
 800e512:	2301      	movs	r3, #1
 800e514:	4622      	mov	r2, r4
 800e516:	4639      	mov	r1, r7
 800e518:	4630      	mov	r0, r6
 800e51a:	47c0      	blx	r8
 800e51c:	3001      	adds	r0, #1
 800e51e:	d0e6      	beq.n	800e4ee <_printf_common+0xb2>
 800e520:	f109 0901 	add.w	r9, r9, #1
 800e524:	e7d8      	b.n	800e4d8 <_printf_common+0x9c>
	...

0800e528 <_printf_i>:
 800e528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e52c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e530:	460c      	mov	r4, r1
 800e532:	7e09      	ldrb	r1, [r1, #24]
 800e534:	b085      	sub	sp, #20
 800e536:	296e      	cmp	r1, #110	; 0x6e
 800e538:	4617      	mov	r7, r2
 800e53a:	4606      	mov	r6, r0
 800e53c:	4698      	mov	r8, r3
 800e53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e540:	f000 80b3 	beq.w	800e6aa <_printf_i+0x182>
 800e544:	d822      	bhi.n	800e58c <_printf_i+0x64>
 800e546:	2963      	cmp	r1, #99	; 0x63
 800e548:	d036      	beq.n	800e5b8 <_printf_i+0x90>
 800e54a:	d80a      	bhi.n	800e562 <_printf_i+0x3a>
 800e54c:	2900      	cmp	r1, #0
 800e54e:	f000 80b9 	beq.w	800e6c4 <_printf_i+0x19c>
 800e552:	2958      	cmp	r1, #88	; 0x58
 800e554:	f000 8083 	beq.w	800e65e <_printf_i+0x136>
 800e558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e55c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e560:	e032      	b.n	800e5c8 <_printf_i+0xa0>
 800e562:	2964      	cmp	r1, #100	; 0x64
 800e564:	d001      	beq.n	800e56a <_printf_i+0x42>
 800e566:	2969      	cmp	r1, #105	; 0x69
 800e568:	d1f6      	bne.n	800e558 <_printf_i+0x30>
 800e56a:	6820      	ldr	r0, [r4, #0]
 800e56c:	6813      	ldr	r3, [r2, #0]
 800e56e:	0605      	lsls	r5, r0, #24
 800e570:	f103 0104 	add.w	r1, r3, #4
 800e574:	d52a      	bpl.n	800e5cc <_printf_i+0xa4>
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6011      	str	r1, [r2, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	da03      	bge.n	800e586 <_printf_i+0x5e>
 800e57e:	222d      	movs	r2, #45	; 0x2d
 800e580:	425b      	negs	r3, r3
 800e582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e586:	486f      	ldr	r0, [pc, #444]	; (800e744 <_printf_i+0x21c>)
 800e588:	220a      	movs	r2, #10
 800e58a:	e039      	b.n	800e600 <_printf_i+0xd8>
 800e58c:	2973      	cmp	r1, #115	; 0x73
 800e58e:	f000 809d 	beq.w	800e6cc <_printf_i+0x1a4>
 800e592:	d808      	bhi.n	800e5a6 <_printf_i+0x7e>
 800e594:	296f      	cmp	r1, #111	; 0x6f
 800e596:	d020      	beq.n	800e5da <_printf_i+0xb2>
 800e598:	2970      	cmp	r1, #112	; 0x70
 800e59a:	d1dd      	bne.n	800e558 <_printf_i+0x30>
 800e59c:	6823      	ldr	r3, [r4, #0]
 800e59e:	f043 0320 	orr.w	r3, r3, #32
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	e003      	b.n	800e5ae <_printf_i+0x86>
 800e5a6:	2975      	cmp	r1, #117	; 0x75
 800e5a8:	d017      	beq.n	800e5da <_printf_i+0xb2>
 800e5aa:	2978      	cmp	r1, #120	; 0x78
 800e5ac:	d1d4      	bne.n	800e558 <_printf_i+0x30>
 800e5ae:	2378      	movs	r3, #120	; 0x78
 800e5b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5b4:	4864      	ldr	r0, [pc, #400]	; (800e748 <_printf_i+0x220>)
 800e5b6:	e055      	b.n	800e664 <_printf_i+0x13c>
 800e5b8:	6813      	ldr	r3, [r2, #0]
 800e5ba:	1d19      	adds	r1, r3, #4
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6011      	str	r1, [r2, #0]
 800e5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e08c      	b.n	800e6e6 <_printf_i+0x1be>
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	6011      	str	r1, [r2, #0]
 800e5d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5d4:	bf18      	it	ne
 800e5d6:	b21b      	sxthne	r3, r3
 800e5d8:	e7cf      	b.n	800e57a <_printf_i+0x52>
 800e5da:	6813      	ldr	r3, [r2, #0]
 800e5dc:	6825      	ldr	r5, [r4, #0]
 800e5de:	1d18      	adds	r0, r3, #4
 800e5e0:	6010      	str	r0, [r2, #0]
 800e5e2:	0628      	lsls	r0, r5, #24
 800e5e4:	d501      	bpl.n	800e5ea <_printf_i+0xc2>
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	e002      	b.n	800e5f0 <_printf_i+0xc8>
 800e5ea:	0668      	lsls	r0, r5, #25
 800e5ec:	d5fb      	bpl.n	800e5e6 <_printf_i+0xbe>
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	4854      	ldr	r0, [pc, #336]	; (800e744 <_printf_i+0x21c>)
 800e5f2:	296f      	cmp	r1, #111	; 0x6f
 800e5f4:	bf14      	ite	ne
 800e5f6:	220a      	movne	r2, #10
 800e5f8:	2208      	moveq	r2, #8
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e600:	6865      	ldr	r5, [r4, #4]
 800e602:	60a5      	str	r5, [r4, #8]
 800e604:	2d00      	cmp	r5, #0
 800e606:	f2c0 8095 	blt.w	800e734 <_printf_i+0x20c>
 800e60a:	6821      	ldr	r1, [r4, #0]
 800e60c:	f021 0104 	bic.w	r1, r1, #4
 800e610:	6021      	str	r1, [r4, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d13d      	bne.n	800e692 <_printf_i+0x16a>
 800e616:	2d00      	cmp	r5, #0
 800e618:	f040 808e 	bne.w	800e738 <_printf_i+0x210>
 800e61c:	4665      	mov	r5, ip
 800e61e:	2a08      	cmp	r2, #8
 800e620:	d10b      	bne.n	800e63a <_printf_i+0x112>
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	07db      	lsls	r3, r3, #31
 800e626:	d508      	bpl.n	800e63a <_printf_i+0x112>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	6862      	ldr	r2, [r4, #4]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	bfde      	ittt	le
 800e630:	2330      	movle	r3, #48	; 0x30
 800e632:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e636:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e63a:	ebac 0305 	sub.w	r3, ip, r5
 800e63e:	6123      	str	r3, [r4, #16]
 800e640:	f8cd 8000 	str.w	r8, [sp]
 800e644:	463b      	mov	r3, r7
 800e646:	aa03      	add	r2, sp, #12
 800e648:	4621      	mov	r1, r4
 800e64a:	4630      	mov	r0, r6
 800e64c:	f7ff fef6 	bl	800e43c <_printf_common>
 800e650:	3001      	adds	r0, #1
 800e652:	d14d      	bne.n	800e6f0 <_printf_i+0x1c8>
 800e654:	f04f 30ff 	mov.w	r0, #4294967295
 800e658:	b005      	add	sp, #20
 800e65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e65e:	4839      	ldr	r0, [pc, #228]	; (800e744 <_printf_i+0x21c>)
 800e660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e664:	6813      	ldr	r3, [r2, #0]
 800e666:	6821      	ldr	r1, [r4, #0]
 800e668:	1d1d      	adds	r5, r3, #4
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	6015      	str	r5, [r2, #0]
 800e66e:	060a      	lsls	r2, r1, #24
 800e670:	d50b      	bpl.n	800e68a <_printf_i+0x162>
 800e672:	07ca      	lsls	r2, r1, #31
 800e674:	bf44      	itt	mi
 800e676:	f041 0120 	orrmi.w	r1, r1, #32
 800e67a:	6021      	strmi	r1, [r4, #0]
 800e67c:	b91b      	cbnz	r3, 800e686 <_printf_i+0x15e>
 800e67e:	6822      	ldr	r2, [r4, #0]
 800e680:	f022 0220 	bic.w	r2, r2, #32
 800e684:	6022      	str	r2, [r4, #0]
 800e686:	2210      	movs	r2, #16
 800e688:	e7b7      	b.n	800e5fa <_printf_i+0xd2>
 800e68a:	064d      	lsls	r5, r1, #25
 800e68c:	bf48      	it	mi
 800e68e:	b29b      	uxthmi	r3, r3
 800e690:	e7ef      	b.n	800e672 <_printf_i+0x14a>
 800e692:	4665      	mov	r5, ip
 800e694:	fbb3 f1f2 	udiv	r1, r3, r2
 800e698:	fb02 3311 	mls	r3, r2, r1, r3
 800e69c:	5cc3      	ldrb	r3, [r0, r3]
 800e69e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	2900      	cmp	r1, #0
 800e6a6:	d1f5      	bne.n	800e694 <_printf_i+0x16c>
 800e6a8:	e7b9      	b.n	800e61e <_printf_i+0xf6>
 800e6aa:	6813      	ldr	r3, [r2, #0]
 800e6ac:	6825      	ldr	r5, [r4, #0]
 800e6ae:	6961      	ldr	r1, [r4, #20]
 800e6b0:	1d18      	adds	r0, r3, #4
 800e6b2:	6010      	str	r0, [r2, #0]
 800e6b4:	0628      	lsls	r0, r5, #24
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	d501      	bpl.n	800e6be <_printf_i+0x196>
 800e6ba:	6019      	str	r1, [r3, #0]
 800e6bc:	e002      	b.n	800e6c4 <_printf_i+0x19c>
 800e6be:	066a      	lsls	r2, r5, #25
 800e6c0:	d5fb      	bpl.n	800e6ba <_printf_i+0x192>
 800e6c2:	8019      	strh	r1, [r3, #0]
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	6123      	str	r3, [r4, #16]
 800e6c8:	4665      	mov	r5, ip
 800e6ca:	e7b9      	b.n	800e640 <_printf_i+0x118>
 800e6cc:	6813      	ldr	r3, [r2, #0]
 800e6ce:	1d19      	adds	r1, r3, #4
 800e6d0:	6011      	str	r1, [r2, #0]
 800e6d2:	681d      	ldr	r5, [r3, #0]
 800e6d4:	6862      	ldr	r2, [r4, #4]
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f7f1 fd81 	bl	80001e0 <memchr>
 800e6de:	b108      	cbz	r0, 800e6e4 <_printf_i+0x1bc>
 800e6e0:	1b40      	subs	r0, r0, r5
 800e6e2:	6060      	str	r0, [r4, #4]
 800e6e4:	6863      	ldr	r3, [r4, #4]
 800e6e6:	6123      	str	r3, [r4, #16]
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6ee:	e7a7      	b.n	800e640 <_printf_i+0x118>
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	462a      	mov	r2, r5
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	47c0      	blx	r8
 800e6fa:	3001      	adds	r0, #1
 800e6fc:	d0aa      	beq.n	800e654 <_printf_i+0x12c>
 800e6fe:	6823      	ldr	r3, [r4, #0]
 800e700:	079b      	lsls	r3, r3, #30
 800e702:	d413      	bmi.n	800e72c <_printf_i+0x204>
 800e704:	68e0      	ldr	r0, [r4, #12]
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	4298      	cmp	r0, r3
 800e70a:	bfb8      	it	lt
 800e70c:	4618      	movlt	r0, r3
 800e70e:	e7a3      	b.n	800e658 <_printf_i+0x130>
 800e710:	2301      	movs	r3, #1
 800e712:	464a      	mov	r2, r9
 800e714:	4639      	mov	r1, r7
 800e716:	4630      	mov	r0, r6
 800e718:	47c0      	blx	r8
 800e71a:	3001      	adds	r0, #1
 800e71c:	d09a      	beq.n	800e654 <_printf_i+0x12c>
 800e71e:	3501      	adds	r5, #1
 800e720:	68e3      	ldr	r3, [r4, #12]
 800e722:	9a03      	ldr	r2, [sp, #12]
 800e724:	1a9b      	subs	r3, r3, r2
 800e726:	42ab      	cmp	r3, r5
 800e728:	dcf2      	bgt.n	800e710 <_printf_i+0x1e8>
 800e72a:	e7eb      	b.n	800e704 <_printf_i+0x1dc>
 800e72c:	2500      	movs	r5, #0
 800e72e:	f104 0919 	add.w	r9, r4, #25
 800e732:	e7f5      	b.n	800e720 <_printf_i+0x1f8>
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1ac      	bne.n	800e692 <_printf_i+0x16a>
 800e738:	7803      	ldrb	r3, [r0, #0]
 800e73a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e73e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e742:	e76c      	b.n	800e61e <_printf_i+0xf6>
 800e744:	08012896 	.word	0x08012896
 800e748:	080128a7 	.word	0x080128a7

0800e74c <_scanf_float>:
 800e74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e750:	469a      	mov	sl, r3
 800e752:	688b      	ldr	r3, [r1, #8]
 800e754:	4616      	mov	r6, r2
 800e756:	1e5a      	subs	r2, r3, #1
 800e758:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e75c:	b087      	sub	sp, #28
 800e75e:	bf83      	ittte	hi
 800e760:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e764:	189b      	addhi	r3, r3, r2
 800e766:	9301      	strhi	r3, [sp, #4]
 800e768:	2300      	movls	r3, #0
 800e76a:	bf86      	itte	hi
 800e76c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e770:	608b      	strhi	r3, [r1, #8]
 800e772:	9301      	strls	r3, [sp, #4]
 800e774:	680b      	ldr	r3, [r1, #0]
 800e776:	4688      	mov	r8, r1
 800e778:	f04f 0b00 	mov.w	fp, #0
 800e77c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e780:	f848 3b1c 	str.w	r3, [r8], #28
 800e784:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e788:	4607      	mov	r7, r0
 800e78a:	460c      	mov	r4, r1
 800e78c:	4645      	mov	r5, r8
 800e78e:	465a      	mov	r2, fp
 800e790:	46d9      	mov	r9, fp
 800e792:	f8cd b008 	str.w	fp, [sp, #8]
 800e796:	68a1      	ldr	r1, [r4, #8]
 800e798:	b181      	cbz	r1, 800e7bc <_scanf_float+0x70>
 800e79a:	6833      	ldr	r3, [r6, #0]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2b49      	cmp	r3, #73	; 0x49
 800e7a0:	d071      	beq.n	800e886 <_scanf_float+0x13a>
 800e7a2:	d84d      	bhi.n	800e840 <_scanf_float+0xf4>
 800e7a4:	2b39      	cmp	r3, #57	; 0x39
 800e7a6:	d840      	bhi.n	800e82a <_scanf_float+0xde>
 800e7a8:	2b31      	cmp	r3, #49	; 0x31
 800e7aa:	f080 8088 	bcs.w	800e8be <_scanf_float+0x172>
 800e7ae:	2b2d      	cmp	r3, #45	; 0x2d
 800e7b0:	f000 8090 	beq.w	800e8d4 <_scanf_float+0x188>
 800e7b4:	d815      	bhi.n	800e7e2 <_scanf_float+0x96>
 800e7b6:	2b2b      	cmp	r3, #43	; 0x2b
 800e7b8:	f000 808c 	beq.w	800e8d4 <_scanf_float+0x188>
 800e7bc:	f1b9 0f00 	cmp.w	r9, #0
 800e7c0:	d003      	beq.n	800e7ca <_scanf_float+0x7e>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	3a01      	subs	r2, #1
 800e7cc:	2a01      	cmp	r2, #1
 800e7ce:	f200 80ea 	bhi.w	800e9a6 <_scanf_float+0x25a>
 800e7d2:	4545      	cmp	r5, r8
 800e7d4:	f200 80dc 	bhi.w	800e990 <_scanf_float+0x244>
 800e7d8:	2601      	movs	r6, #1
 800e7da:	4630      	mov	r0, r6
 800e7dc:	b007      	add	sp, #28
 800e7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e7e4:	f000 809f 	beq.w	800e926 <_scanf_float+0x1da>
 800e7e8:	2b30      	cmp	r3, #48	; 0x30
 800e7ea:	d1e7      	bne.n	800e7bc <_scanf_float+0x70>
 800e7ec:	6820      	ldr	r0, [r4, #0]
 800e7ee:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e7f2:	d064      	beq.n	800e8be <_scanf_float+0x172>
 800e7f4:	9b01      	ldr	r3, [sp, #4]
 800e7f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e7fa:	6020      	str	r0, [r4, #0]
 800e7fc:	f109 0901 	add.w	r9, r9, #1
 800e800:	b11b      	cbz	r3, 800e80a <_scanf_float+0xbe>
 800e802:	3b01      	subs	r3, #1
 800e804:	3101      	adds	r1, #1
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	60a1      	str	r1, [r4, #8]
 800e80a:	68a3      	ldr	r3, [r4, #8]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	60a3      	str	r3, [r4, #8]
 800e810:	6923      	ldr	r3, [r4, #16]
 800e812:	3301      	adds	r3, #1
 800e814:	6123      	str	r3, [r4, #16]
 800e816:	6873      	ldr	r3, [r6, #4]
 800e818:	3b01      	subs	r3, #1
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	6073      	str	r3, [r6, #4]
 800e81e:	f340 80ac 	ble.w	800e97a <_scanf_float+0x22e>
 800e822:	6833      	ldr	r3, [r6, #0]
 800e824:	3301      	adds	r3, #1
 800e826:	6033      	str	r3, [r6, #0]
 800e828:	e7b5      	b.n	800e796 <_scanf_float+0x4a>
 800e82a:	2b45      	cmp	r3, #69	; 0x45
 800e82c:	f000 8085 	beq.w	800e93a <_scanf_float+0x1ee>
 800e830:	2b46      	cmp	r3, #70	; 0x46
 800e832:	d06a      	beq.n	800e90a <_scanf_float+0x1be>
 800e834:	2b41      	cmp	r3, #65	; 0x41
 800e836:	d1c1      	bne.n	800e7bc <_scanf_float+0x70>
 800e838:	2a01      	cmp	r2, #1
 800e83a:	d1bf      	bne.n	800e7bc <_scanf_float+0x70>
 800e83c:	2202      	movs	r2, #2
 800e83e:	e046      	b.n	800e8ce <_scanf_float+0x182>
 800e840:	2b65      	cmp	r3, #101	; 0x65
 800e842:	d07a      	beq.n	800e93a <_scanf_float+0x1ee>
 800e844:	d818      	bhi.n	800e878 <_scanf_float+0x12c>
 800e846:	2b54      	cmp	r3, #84	; 0x54
 800e848:	d066      	beq.n	800e918 <_scanf_float+0x1cc>
 800e84a:	d811      	bhi.n	800e870 <_scanf_float+0x124>
 800e84c:	2b4e      	cmp	r3, #78	; 0x4e
 800e84e:	d1b5      	bne.n	800e7bc <_scanf_float+0x70>
 800e850:	2a00      	cmp	r2, #0
 800e852:	d146      	bne.n	800e8e2 <_scanf_float+0x196>
 800e854:	f1b9 0f00 	cmp.w	r9, #0
 800e858:	d145      	bne.n	800e8e6 <_scanf_float+0x19a>
 800e85a:	6821      	ldr	r1, [r4, #0]
 800e85c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e860:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e864:	d13f      	bne.n	800e8e6 <_scanf_float+0x19a>
 800e866:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e86a:	6021      	str	r1, [r4, #0]
 800e86c:	2201      	movs	r2, #1
 800e86e:	e02e      	b.n	800e8ce <_scanf_float+0x182>
 800e870:	2b59      	cmp	r3, #89	; 0x59
 800e872:	d01e      	beq.n	800e8b2 <_scanf_float+0x166>
 800e874:	2b61      	cmp	r3, #97	; 0x61
 800e876:	e7de      	b.n	800e836 <_scanf_float+0xea>
 800e878:	2b6e      	cmp	r3, #110	; 0x6e
 800e87a:	d0e9      	beq.n	800e850 <_scanf_float+0x104>
 800e87c:	d815      	bhi.n	800e8aa <_scanf_float+0x15e>
 800e87e:	2b66      	cmp	r3, #102	; 0x66
 800e880:	d043      	beq.n	800e90a <_scanf_float+0x1be>
 800e882:	2b69      	cmp	r3, #105	; 0x69
 800e884:	d19a      	bne.n	800e7bc <_scanf_float+0x70>
 800e886:	f1bb 0f00 	cmp.w	fp, #0
 800e88a:	d138      	bne.n	800e8fe <_scanf_float+0x1b2>
 800e88c:	f1b9 0f00 	cmp.w	r9, #0
 800e890:	d197      	bne.n	800e7c2 <_scanf_float+0x76>
 800e892:	6821      	ldr	r1, [r4, #0]
 800e894:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e898:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e89c:	d195      	bne.n	800e7ca <_scanf_float+0x7e>
 800e89e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e8a2:	6021      	str	r1, [r4, #0]
 800e8a4:	f04f 0b01 	mov.w	fp, #1
 800e8a8:	e011      	b.n	800e8ce <_scanf_float+0x182>
 800e8aa:	2b74      	cmp	r3, #116	; 0x74
 800e8ac:	d034      	beq.n	800e918 <_scanf_float+0x1cc>
 800e8ae:	2b79      	cmp	r3, #121	; 0x79
 800e8b0:	d184      	bne.n	800e7bc <_scanf_float+0x70>
 800e8b2:	f1bb 0f07 	cmp.w	fp, #7
 800e8b6:	d181      	bne.n	800e7bc <_scanf_float+0x70>
 800e8b8:	f04f 0b08 	mov.w	fp, #8
 800e8bc:	e007      	b.n	800e8ce <_scanf_float+0x182>
 800e8be:	eb12 0f0b 	cmn.w	r2, fp
 800e8c2:	f47f af7b 	bne.w	800e7bc <_scanf_float+0x70>
 800e8c6:	6821      	ldr	r1, [r4, #0]
 800e8c8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e8cc:	6021      	str	r1, [r4, #0]
 800e8ce:	702b      	strb	r3, [r5, #0]
 800e8d0:	3501      	adds	r5, #1
 800e8d2:	e79a      	b.n	800e80a <_scanf_float+0xbe>
 800e8d4:	6821      	ldr	r1, [r4, #0]
 800e8d6:	0608      	lsls	r0, r1, #24
 800e8d8:	f57f af70 	bpl.w	800e7bc <_scanf_float+0x70>
 800e8dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e8e0:	e7f4      	b.n	800e8cc <_scanf_float+0x180>
 800e8e2:	2a02      	cmp	r2, #2
 800e8e4:	d047      	beq.n	800e976 <_scanf_float+0x22a>
 800e8e6:	f1bb 0f01 	cmp.w	fp, #1
 800e8ea:	d003      	beq.n	800e8f4 <_scanf_float+0x1a8>
 800e8ec:	f1bb 0f04 	cmp.w	fp, #4
 800e8f0:	f47f af64 	bne.w	800e7bc <_scanf_float+0x70>
 800e8f4:	f10b 0b01 	add.w	fp, fp, #1
 800e8f8:	fa5f fb8b 	uxtb.w	fp, fp
 800e8fc:	e7e7      	b.n	800e8ce <_scanf_float+0x182>
 800e8fe:	f1bb 0f03 	cmp.w	fp, #3
 800e902:	d0f7      	beq.n	800e8f4 <_scanf_float+0x1a8>
 800e904:	f1bb 0f05 	cmp.w	fp, #5
 800e908:	e7f2      	b.n	800e8f0 <_scanf_float+0x1a4>
 800e90a:	f1bb 0f02 	cmp.w	fp, #2
 800e90e:	f47f af55 	bne.w	800e7bc <_scanf_float+0x70>
 800e912:	f04f 0b03 	mov.w	fp, #3
 800e916:	e7da      	b.n	800e8ce <_scanf_float+0x182>
 800e918:	f1bb 0f06 	cmp.w	fp, #6
 800e91c:	f47f af4e 	bne.w	800e7bc <_scanf_float+0x70>
 800e920:	f04f 0b07 	mov.w	fp, #7
 800e924:	e7d3      	b.n	800e8ce <_scanf_float+0x182>
 800e926:	6821      	ldr	r1, [r4, #0]
 800e928:	0588      	lsls	r0, r1, #22
 800e92a:	f57f af47 	bpl.w	800e7bc <_scanf_float+0x70>
 800e92e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e932:	6021      	str	r1, [r4, #0]
 800e934:	f8cd 9008 	str.w	r9, [sp, #8]
 800e938:	e7c9      	b.n	800e8ce <_scanf_float+0x182>
 800e93a:	6821      	ldr	r1, [r4, #0]
 800e93c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e940:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e944:	d006      	beq.n	800e954 <_scanf_float+0x208>
 800e946:	0548      	lsls	r0, r1, #21
 800e948:	f57f af38 	bpl.w	800e7bc <_scanf_float+0x70>
 800e94c:	f1b9 0f00 	cmp.w	r9, #0
 800e950:	f43f af3b 	beq.w	800e7ca <_scanf_float+0x7e>
 800e954:	0588      	lsls	r0, r1, #22
 800e956:	bf58      	it	pl
 800e958:	9802      	ldrpl	r0, [sp, #8]
 800e95a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e95e:	bf58      	it	pl
 800e960:	eba9 0000 	subpl.w	r0, r9, r0
 800e964:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e968:	bf58      	it	pl
 800e96a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e96e:	6021      	str	r1, [r4, #0]
 800e970:	f04f 0900 	mov.w	r9, #0
 800e974:	e7ab      	b.n	800e8ce <_scanf_float+0x182>
 800e976:	2203      	movs	r2, #3
 800e978:	e7a9      	b.n	800e8ce <_scanf_float+0x182>
 800e97a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e97e:	9205      	str	r2, [sp, #20]
 800e980:	4631      	mov	r1, r6
 800e982:	4638      	mov	r0, r7
 800e984:	4798      	blx	r3
 800e986:	9a05      	ldr	r2, [sp, #20]
 800e988:	2800      	cmp	r0, #0
 800e98a:	f43f af04 	beq.w	800e796 <_scanf_float+0x4a>
 800e98e:	e715      	b.n	800e7bc <_scanf_float+0x70>
 800e990:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e994:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e998:	4632      	mov	r2, r6
 800e99a:	4638      	mov	r0, r7
 800e99c:	4798      	blx	r3
 800e99e:	6923      	ldr	r3, [r4, #16]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	6123      	str	r3, [r4, #16]
 800e9a4:	e715      	b.n	800e7d2 <_scanf_float+0x86>
 800e9a6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e9aa:	2b06      	cmp	r3, #6
 800e9ac:	d80a      	bhi.n	800e9c4 <_scanf_float+0x278>
 800e9ae:	f1bb 0f02 	cmp.w	fp, #2
 800e9b2:	d968      	bls.n	800ea86 <_scanf_float+0x33a>
 800e9b4:	f1ab 0b03 	sub.w	fp, fp, #3
 800e9b8:	fa5f fb8b 	uxtb.w	fp, fp
 800e9bc:	eba5 0b0b 	sub.w	fp, r5, fp
 800e9c0:	455d      	cmp	r5, fp
 800e9c2:	d14b      	bne.n	800ea5c <_scanf_float+0x310>
 800e9c4:	6823      	ldr	r3, [r4, #0]
 800e9c6:	05da      	lsls	r2, r3, #23
 800e9c8:	d51f      	bpl.n	800ea0a <_scanf_float+0x2be>
 800e9ca:	055b      	lsls	r3, r3, #21
 800e9cc:	d468      	bmi.n	800eaa0 <_scanf_float+0x354>
 800e9ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e9d2:	6923      	ldr	r3, [r4, #16]
 800e9d4:	2965      	cmp	r1, #101	; 0x65
 800e9d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9da:	f105 3bff 	add.w	fp, r5, #4294967295
 800e9de:	6123      	str	r3, [r4, #16]
 800e9e0:	d00d      	beq.n	800e9fe <_scanf_float+0x2b2>
 800e9e2:	2945      	cmp	r1, #69	; 0x45
 800e9e4:	d00b      	beq.n	800e9fe <_scanf_float+0x2b2>
 800e9e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9ea:	4632      	mov	r2, r6
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	4798      	blx	r3
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	f1a5 0b02 	sub.w	fp, r5, #2
 800e9fc:	6123      	str	r3, [r4, #16]
 800e9fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea02:	4632      	mov	r2, r6
 800ea04:	4638      	mov	r0, r7
 800ea06:	4798      	blx	r3
 800ea08:	465d      	mov	r5, fp
 800ea0a:	6826      	ldr	r6, [r4, #0]
 800ea0c:	f016 0610 	ands.w	r6, r6, #16
 800ea10:	d17a      	bne.n	800eb08 <_scanf_float+0x3bc>
 800ea12:	702e      	strb	r6, [r5, #0]
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ea1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea1e:	d142      	bne.n	800eaa6 <_scanf_float+0x35a>
 800ea20:	9b02      	ldr	r3, [sp, #8]
 800ea22:	eba9 0303 	sub.w	r3, r9, r3
 800ea26:	425a      	negs	r2, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d149      	bne.n	800eac0 <_scanf_float+0x374>
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	4641      	mov	r1, r8
 800ea30:	4638      	mov	r0, r7
 800ea32:	f000 febd 	bl	800f7b0 <_strtod_r>
 800ea36:	6825      	ldr	r5, [r4, #0]
 800ea38:	f8da 3000 	ldr.w	r3, [sl]
 800ea3c:	f015 0f02 	tst.w	r5, #2
 800ea40:	f103 0204 	add.w	r2, r3, #4
 800ea44:	ec59 8b10 	vmov	r8, r9, d0
 800ea48:	f8ca 2000 	str.w	r2, [sl]
 800ea4c:	d043      	beq.n	800ead6 <_scanf_float+0x38a>
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	e9c3 8900 	strd	r8, r9, [r3]
 800ea54:	68e3      	ldr	r3, [r4, #12]
 800ea56:	3301      	adds	r3, #1
 800ea58:	60e3      	str	r3, [r4, #12]
 800ea5a:	e6be      	b.n	800e7da <_scanf_float+0x8e>
 800ea5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea64:	4632      	mov	r2, r6
 800ea66:	4638      	mov	r0, r7
 800ea68:	4798      	blx	r3
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	6123      	str	r3, [r4, #16]
 800ea70:	e7a6      	b.n	800e9c0 <_scanf_float+0x274>
 800ea72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea7a:	4632      	mov	r2, r6
 800ea7c:	4638      	mov	r0, r7
 800ea7e:	4798      	blx	r3
 800ea80:	6923      	ldr	r3, [r4, #16]
 800ea82:	3b01      	subs	r3, #1
 800ea84:	6123      	str	r3, [r4, #16]
 800ea86:	4545      	cmp	r5, r8
 800ea88:	d8f3      	bhi.n	800ea72 <_scanf_float+0x326>
 800ea8a:	e6a5      	b.n	800e7d8 <_scanf_float+0x8c>
 800ea8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea94:	4632      	mov	r2, r6
 800ea96:	4638      	mov	r0, r7
 800ea98:	4798      	blx	r3
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	6123      	str	r3, [r4, #16]
 800eaa0:	4545      	cmp	r5, r8
 800eaa2:	d8f3      	bhi.n	800ea8c <_scanf_float+0x340>
 800eaa4:	e698      	b.n	800e7d8 <_scanf_float+0x8c>
 800eaa6:	9b03      	ldr	r3, [sp, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d0bf      	beq.n	800ea2c <_scanf_float+0x2e0>
 800eaac:	9904      	ldr	r1, [sp, #16]
 800eaae:	230a      	movs	r3, #10
 800eab0:	4632      	mov	r2, r6
 800eab2:	3101      	adds	r1, #1
 800eab4:	4638      	mov	r0, r7
 800eab6:	f000 ff07 	bl	800f8c8 <_strtol_r>
 800eaba:	9b03      	ldr	r3, [sp, #12]
 800eabc:	9d04      	ldr	r5, [sp, #16]
 800eabe:	1ac2      	subs	r2, r0, r3
 800eac0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eac4:	429d      	cmp	r5, r3
 800eac6:	bf28      	it	cs
 800eac8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800eacc:	490f      	ldr	r1, [pc, #60]	; (800eb0c <_scanf_float+0x3c0>)
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f83c 	bl	800eb4c <siprintf>
 800ead4:	e7aa      	b.n	800ea2c <_scanf_float+0x2e0>
 800ead6:	f015 0504 	ands.w	r5, r5, #4
 800eada:	d1b8      	bne.n	800ea4e <_scanf_float+0x302>
 800eadc:	681f      	ldr	r7, [r3, #0]
 800eade:	ee10 2a10 	vmov	r2, s0
 800eae2:	464b      	mov	r3, r9
 800eae4:	ee10 0a10 	vmov	r0, s0
 800eae8:	4649      	mov	r1, r9
 800eaea:	f7f2 f81f 	bl	8000b2c <__aeabi_dcmpun>
 800eaee:	b128      	cbz	r0, 800eafc <_scanf_float+0x3b0>
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	f000 f825 	bl	800eb40 <nanf>
 800eaf6:	ed87 0a00 	vstr	s0, [r7]
 800eafa:	e7ab      	b.n	800ea54 <_scanf_float+0x308>
 800eafc:	4640      	mov	r0, r8
 800eafe:	4649      	mov	r1, r9
 800eb00:	f7f2 f872 	bl	8000be8 <__aeabi_d2f>
 800eb04:	6038      	str	r0, [r7, #0]
 800eb06:	e7a5      	b.n	800ea54 <_scanf_float+0x308>
 800eb08:	2600      	movs	r6, #0
 800eb0a:	e666      	b.n	800e7da <_scanf_float+0x8e>
 800eb0c:	080128b8 	.word	0x080128b8

0800eb10 <iprintf>:
 800eb10:	b40f      	push	{r0, r1, r2, r3}
 800eb12:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <iprintf+0x2c>)
 800eb14:	b513      	push	{r0, r1, r4, lr}
 800eb16:	681c      	ldr	r4, [r3, #0]
 800eb18:	b124      	cbz	r4, 800eb24 <iprintf+0x14>
 800eb1a:	69a3      	ldr	r3, [r4, #24]
 800eb1c:	b913      	cbnz	r3, 800eb24 <iprintf+0x14>
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f001 fd6a 	bl	80105f8 <__sinit>
 800eb24:	ab05      	add	r3, sp, #20
 800eb26:	9a04      	ldr	r2, [sp, #16]
 800eb28:	68a1      	ldr	r1, [r4, #8]
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f002 ff73 	bl	8011a18 <_vfiprintf_r>
 800eb32:	b002      	add	sp, #8
 800eb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb38:	b004      	add	sp, #16
 800eb3a:	4770      	bx	lr
 800eb3c:	20000048 	.word	0x20000048

0800eb40 <nanf>:
 800eb40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb48 <nanf+0x8>
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	7fc00000 	.word	0x7fc00000

0800eb4c <siprintf>:
 800eb4c:	b40e      	push	{r1, r2, r3}
 800eb4e:	b500      	push	{lr}
 800eb50:	b09c      	sub	sp, #112	; 0x70
 800eb52:	ab1d      	add	r3, sp, #116	; 0x74
 800eb54:	9002      	str	r0, [sp, #8]
 800eb56:	9006      	str	r0, [sp, #24]
 800eb58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb5c:	4809      	ldr	r0, [pc, #36]	; (800eb84 <siprintf+0x38>)
 800eb5e:	9107      	str	r1, [sp, #28]
 800eb60:	9104      	str	r1, [sp, #16]
 800eb62:	4909      	ldr	r1, [pc, #36]	; (800eb88 <siprintf+0x3c>)
 800eb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb68:	9105      	str	r1, [sp, #20]
 800eb6a:	6800      	ldr	r0, [r0, #0]
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	a902      	add	r1, sp, #8
 800eb70:	f002 fe30 	bl	80117d4 <_svfiprintf_r>
 800eb74:	9b02      	ldr	r3, [sp, #8]
 800eb76:	2200      	movs	r2, #0
 800eb78:	701a      	strb	r2, [r3, #0]
 800eb7a:	b01c      	add	sp, #112	; 0x70
 800eb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb80:	b003      	add	sp, #12
 800eb82:	4770      	bx	lr
 800eb84:	20000048 	.word	0x20000048
 800eb88:	ffff0208 	.word	0xffff0208

0800eb8c <sulp>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	4604      	mov	r4, r0
 800eb90:	460d      	mov	r5, r1
 800eb92:	ec45 4b10 	vmov	d0, r4, r5
 800eb96:	4616      	mov	r6, r2
 800eb98:	f002 fbd8 	bl	801134c <__ulp>
 800eb9c:	ec51 0b10 	vmov	r0, r1, d0
 800eba0:	b17e      	cbz	r6, 800ebc2 <sulp+0x36>
 800eba2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eba6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	dd09      	ble.n	800ebc2 <sulp+0x36>
 800ebae:	051b      	lsls	r3, r3, #20
 800ebb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ebb4:	2400      	movs	r4, #0
 800ebb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ebba:	4622      	mov	r2, r4
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	f7f1 fd1b 	bl	80005f8 <__aeabi_dmul>
 800ebc2:	bd70      	pop	{r4, r5, r6, pc}
 800ebc4:	0000      	movs	r0, r0
	...

0800ebc8 <_strtod_l>:
 800ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	461f      	mov	r7, r3
 800ebce:	b0a1      	sub	sp, #132	; 0x84
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4681      	mov	r9, r0
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	460e      	mov	r6, r1
 800ebd8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ebda:	931c      	str	r3, [sp, #112]	; 0x70
 800ebdc:	f002 f8bf 	bl	8010d5e <__localeconv_l>
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	6800      	ldr	r0, [r0, #0]
 800ebe4:	f7f1 faf4 	bl	80001d0 <strlen>
 800ebe8:	f04f 0a00 	mov.w	sl, #0
 800ebec:	4604      	mov	r4, r0
 800ebee:	f04f 0b00 	mov.w	fp, #0
 800ebf2:	961b      	str	r6, [sp, #108]	; 0x6c
 800ebf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ebf6:	781a      	ldrb	r2, [r3, #0]
 800ebf8:	2a0d      	cmp	r2, #13
 800ebfa:	d832      	bhi.n	800ec62 <_strtod_l+0x9a>
 800ebfc:	2a09      	cmp	r2, #9
 800ebfe:	d236      	bcs.n	800ec6e <_strtod_l+0xa6>
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	d03e      	beq.n	800ec82 <_strtod_l+0xba>
 800ec04:	2300      	movs	r3, #0
 800ec06:	930d      	str	r3, [sp, #52]	; 0x34
 800ec08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ec0a:	782b      	ldrb	r3, [r5, #0]
 800ec0c:	2b30      	cmp	r3, #48	; 0x30
 800ec0e:	f040 80ac 	bne.w	800ed6a <_strtod_l+0x1a2>
 800ec12:	786b      	ldrb	r3, [r5, #1]
 800ec14:	2b58      	cmp	r3, #88	; 0x58
 800ec16:	d001      	beq.n	800ec1c <_strtod_l+0x54>
 800ec18:	2b78      	cmp	r3, #120	; 0x78
 800ec1a:	d167      	bne.n	800ecec <_strtod_l+0x124>
 800ec1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	ab1c      	add	r3, sp, #112	; 0x70
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	9702      	str	r7, [sp, #8]
 800ec26:	ab1d      	add	r3, sp, #116	; 0x74
 800ec28:	4a88      	ldr	r2, [pc, #544]	; (800ee4c <_strtod_l+0x284>)
 800ec2a:	a91b      	add	r1, sp, #108	; 0x6c
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	f001 fdbc 	bl	80107aa <__gethex>
 800ec32:	f010 0407 	ands.w	r4, r0, #7
 800ec36:	4606      	mov	r6, r0
 800ec38:	d005      	beq.n	800ec46 <_strtod_l+0x7e>
 800ec3a:	2c06      	cmp	r4, #6
 800ec3c:	d12b      	bne.n	800ec96 <_strtod_l+0xce>
 800ec3e:	3501      	adds	r5, #1
 800ec40:	2300      	movs	r3, #0
 800ec42:	951b      	str	r5, [sp, #108]	; 0x6c
 800ec44:	930d      	str	r3, [sp, #52]	; 0x34
 800ec46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f040 859a 	bne.w	800f782 <_strtod_l+0xbba>
 800ec4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec50:	b1e3      	cbz	r3, 800ec8c <_strtod_l+0xc4>
 800ec52:	4652      	mov	r2, sl
 800ec54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec58:	ec43 2b10 	vmov	d0, r2, r3
 800ec5c:	b021      	add	sp, #132	; 0x84
 800ec5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec62:	2a2b      	cmp	r2, #43	; 0x2b
 800ec64:	d015      	beq.n	800ec92 <_strtod_l+0xca>
 800ec66:	2a2d      	cmp	r2, #45	; 0x2d
 800ec68:	d004      	beq.n	800ec74 <_strtod_l+0xac>
 800ec6a:	2a20      	cmp	r2, #32
 800ec6c:	d1ca      	bne.n	800ec04 <_strtod_l+0x3c>
 800ec6e:	3301      	adds	r3, #1
 800ec70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec72:	e7bf      	b.n	800ebf4 <_strtod_l+0x2c>
 800ec74:	2201      	movs	r2, #1
 800ec76:	920d      	str	r2, [sp, #52]	; 0x34
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ec7c:	785b      	ldrb	r3, [r3, #1]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1c2      	bne.n	800ec08 <_strtod_l+0x40>
 800ec82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec84:	961b      	str	r6, [sp, #108]	; 0x6c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f040 8579 	bne.w	800f77e <_strtod_l+0xbb6>
 800ec8c:	4652      	mov	r2, sl
 800ec8e:	465b      	mov	r3, fp
 800ec90:	e7e2      	b.n	800ec58 <_strtod_l+0x90>
 800ec92:	2200      	movs	r2, #0
 800ec94:	e7ef      	b.n	800ec76 <_strtod_l+0xae>
 800ec96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ec98:	b13a      	cbz	r2, 800ecaa <_strtod_l+0xe2>
 800ec9a:	2135      	movs	r1, #53	; 0x35
 800ec9c:	a81e      	add	r0, sp, #120	; 0x78
 800ec9e:	f002 fc4d 	bl	801153c <__copybits>
 800eca2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eca4:	4648      	mov	r0, r9
 800eca6:	f002 f8b9 	bl	8010e1c <_Bfree>
 800ecaa:	3c01      	subs	r4, #1
 800ecac:	2c04      	cmp	r4, #4
 800ecae:	d806      	bhi.n	800ecbe <_strtod_l+0xf6>
 800ecb0:	e8df f004 	tbb	[pc, r4]
 800ecb4:	1714030a 	.word	0x1714030a
 800ecb8:	0a          	.byte	0x0a
 800ecb9:	00          	.byte	0x00
 800ecba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ecbe:	0730      	lsls	r0, r6, #28
 800ecc0:	d5c1      	bpl.n	800ec46 <_strtod_l+0x7e>
 800ecc2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ecc6:	e7be      	b.n	800ec46 <_strtod_l+0x7e>
 800ecc8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800eccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ecce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ecd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ecd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ecda:	e7f0      	b.n	800ecbe <_strtod_l+0xf6>
 800ecdc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ee50 <_strtod_l+0x288>
 800ece0:	e7ed      	b.n	800ecbe <_strtod_l+0xf6>
 800ece2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ece6:	f04f 3aff 	mov.w	sl, #4294967295
 800ecea:	e7e8      	b.n	800ecbe <_strtod_l+0xf6>
 800ecec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	921b      	str	r2, [sp, #108]	; 0x6c
 800ecf2:	785b      	ldrb	r3, [r3, #1]
 800ecf4:	2b30      	cmp	r3, #48	; 0x30
 800ecf6:	d0f9      	beq.n	800ecec <_strtod_l+0x124>
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d0a4      	beq.n	800ec46 <_strtod_l+0x7e>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	2500      	movs	r5, #0
 800ed00:	9306      	str	r3, [sp, #24]
 800ed02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed04:	9308      	str	r3, [sp, #32]
 800ed06:	9507      	str	r5, [sp, #28]
 800ed08:	9505      	str	r5, [sp, #20]
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ed0e:	7807      	ldrb	r7, [r0, #0]
 800ed10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ed14:	b2d9      	uxtb	r1, r3
 800ed16:	2909      	cmp	r1, #9
 800ed18:	d929      	bls.n	800ed6e <_strtod_l+0x1a6>
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	f8d8 1000 	ldr.w	r1, [r8]
 800ed20:	f002 ffe3 	bl	8011cea <strncmp>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d031      	beq.n	800ed8c <_strtod_l+0x1c4>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	9c05      	ldr	r4, [sp, #20]
 800ed2c:	9004      	str	r0, [sp, #16]
 800ed2e:	463b      	mov	r3, r7
 800ed30:	4602      	mov	r2, r0
 800ed32:	2b65      	cmp	r3, #101	; 0x65
 800ed34:	d001      	beq.n	800ed3a <_strtod_l+0x172>
 800ed36:	2b45      	cmp	r3, #69	; 0x45
 800ed38:	d114      	bne.n	800ed64 <_strtod_l+0x19c>
 800ed3a:	b924      	cbnz	r4, 800ed46 <_strtod_l+0x17e>
 800ed3c:	b910      	cbnz	r0, 800ed44 <_strtod_l+0x17c>
 800ed3e:	9b06      	ldr	r3, [sp, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d09e      	beq.n	800ec82 <_strtod_l+0xba>
 800ed44:	2400      	movs	r4, #0
 800ed46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ed48:	1c73      	adds	r3, r6, #1
 800ed4a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ed4c:	7873      	ldrb	r3, [r6, #1]
 800ed4e:	2b2b      	cmp	r3, #43	; 0x2b
 800ed50:	d078      	beq.n	800ee44 <_strtod_l+0x27c>
 800ed52:	2b2d      	cmp	r3, #45	; 0x2d
 800ed54:	d070      	beq.n	800ee38 <_strtod_l+0x270>
 800ed56:	f04f 0c00 	mov.w	ip, #0
 800ed5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ed5e:	2f09      	cmp	r7, #9
 800ed60:	d97c      	bls.n	800ee5c <_strtod_l+0x294>
 800ed62:	961b      	str	r6, [sp, #108]	; 0x6c
 800ed64:	f04f 0e00 	mov.w	lr, #0
 800ed68:	e09a      	b.n	800eea0 <_strtod_l+0x2d8>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	e7c7      	b.n	800ecfe <_strtod_l+0x136>
 800ed6e:	9905      	ldr	r1, [sp, #20]
 800ed70:	2908      	cmp	r1, #8
 800ed72:	bfdd      	ittte	le
 800ed74:	9907      	ldrle	r1, [sp, #28]
 800ed76:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed7a:	9307      	strle	r3, [sp, #28]
 800ed7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800ed80:	9b05      	ldr	r3, [sp, #20]
 800ed82:	3001      	adds	r0, #1
 800ed84:	3301      	adds	r3, #1
 800ed86:	9305      	str	r3, [sp, #20]
 800ed88:	901b      	str	r0, [sp, #108]	; 0x6c
 800ed8a:	e7bf      	b.n	800ed0c <_strtod_l+0x144>
 800ed8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed8e:	191a      	adds	r2, r3, r4
 800ed90:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed92:	9a05      	ldr	r2, [sp, #20]
 800ed94:	5d1b      	ldrb	r3, [r3, r4]
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	d037      	beq.n	800ee0a <_strtod_l+0x242>
 800ed9a:	9c05      	ldr	r4, [sp, #20]
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800eda2:	2909      	cmp	r1, #9
 800eda4:	d913      	bls.n	800edce <_strtod_l+0x206>
 800eda6:	2101      	movs	r1, #1
 800eda8:	9104      	str	r1, [sp, #16]
 800edaa:	e7c2      	b.n	800ed32 <_strtod_l+0x16a>
 800edac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	921b      	str	r2, [sp, #108]	; 0x6c
 800edb2:	785b      	ldrb	r3, [r3, #1]
 800edb4:	3001      	adds	r0, #1
 800edb6:	2b30      	cmp	r3, #48	; 0x30
 800edb8:	d0f8      	beq.n	800edac <_strtod_l+0x1e4>
 800edba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800edbe:	2a08      	cmp	r2, #8
 800edc0:	f200 84e4 	bhi.w	800f78c <_strtod_l+0xbc4>
 800edc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800edc6:	9208      	str	r2, [sp, #32]
 800edc8:	4602      	mov	r2, r0
 800edca:	2000      	movs	r0, #0
 800edcc:	4604      	mov	r4, r0
 800edce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800edd2:	f100 0101 	add.w	r1, r0, #1
 800edd6:	d012      	beq.n	800edfe <_strtod_l+0x236>
 800edd8:	440a      	add	r2, r1
 800edda:	eb00 0c04 	add.w	ip, r0, r4
 800edde:	4621      	mov	r1, r4
 800ede0:	270a      	movs	r7, #10
 800ede2:	458c      	cmp	ip, r1
 800ede4:	d113      	bne.n	800ee0e <_strtod_l+0x246>
 800ede6:	1821      	adds	r1, r4, r0
 800ede8:	2908      	cmp	r1, #8
 800edea:	f104 0401 	add.w	r4, r4, #1
 800edee:	4404      	add	r4, r0
 800edf0:	dc19      	bgt.n	800ee26 <_strtod_l+0x25e>
 800edf2:	9b07      	ldr	r3, [sp, #28]
 800edf4:	210a      	movs	r1, #10
 800edf6:	fb01 e303 	mla	r3, r1, r3, lr
 800edfa:	9307      	str	r3, [sp, #28]
 800edfc:	2100      	movs	r1, #0
 800edfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee00:	1c58      	adds	r0, r3, #1
 800ee02:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee04:	785b      	ldrb	r3, [r3, #1]
 800ee06:	4608      	mov	r0, r1
 800ee08:	e7c9      	b.n	800ed9e <_strtod_l+0x1d6>
 800ee0a:	9805      	ldr	r0, [sp, #20]
 800ee0c:	e7d3      	b.n	800edb6 <_strtod_l+0x1ee>
 800ee0e:	2908      	cmp	r1, #8
 800ee10:	f101 0101 	add.w	r1, r1, #1
 800ee14:	dc03      	bgt.n	800ee1e <_strtod_l+0x256>
 800ee16:	9b07      	ldr	r3, [sp, #28]
 800ee18:	437b      	muls	r3, r7
 800ee1a:	9307      	str	r3, [sp, #28]
 800ee1c:	e7e1      	b.n	800ede2 <_strtod_l+0x21a>
 800ee1e:	2910      	cmp	r1, #16
 800ee20:	bfd8      	it	le
 800ee22:	437d      	mulle	r5, r7
 800ee24:	e7dd      	b.n	800ede2 <_strtod_l+0x21a>
 800ee26:	2c10      	cmp	r4, #16
 800ee28:	bfdc      	itt	le
 800ee2a:	210a      	movle	r1, #10
 800ee2c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ee30:	e7e4      	b.n	800edfc <_strtod_l+0x234>
 800ee32:	2301      	movs	r3, #1
 800ee34:	9304      	str	r3, [sp, #16]
 800ee36:	e781      	b.n	800ed3c <_strtod_l+0x174>
 800ee38:	f04f 0c01 	mov.w	ip, #1
 800ee3c:	1cb3      	adds	r3, r6, #2
 800ee3e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ee40:	78b3      	ldrb	r3, [r6, #2]
 800ee42:	e78a      	b.n	800ed5a <_strtod_l+0x192>
 800ee44:	f04f 0c00 	mov.w	ip, #0
 800ee48:	e7f8      	b.n	800ee3c <_strtod_l+0x274>
 800ee4a:	bf00      	nop
 800ee4c:	080128c0 	.word	0x080128c0
 800ee50:	7ff00000 	.word	0x7ff00000
 800ee54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee56:	1c5f      	adds	r7, r3, #1
 800ee58:	971b      	str	r7, [sp, #108]	; 0x6c
 800ee5a:	785b      	ldrb	r3, [r3, #1]
 800ee5c:	2b30      	cmp	r3, #48	; 0x30
 800ee5e:	d0f9      	beq.n	800ee54 <_strtod_l+0x28c>
 800ee60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ee64:	2f08      	cmp	r7, #8
 800ee66:	f63f af7d 	bhi.w	800ed64 <_strtod_l+0x19c>
 800ee6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ee6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee70:	930a      	str	r3, [sp, #40]	; 0x28
 800ee72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee74:	1c5f      	adds	r7, r3, #1
 800ee76:	971b      	str	r7, [sp, #108]	; 0x6c
 800ee78:	785b      	ldrb	r3, [r3, #1]
 800ee7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ee7e:	f1b8 0f09 	cmp.w	r8, #9
 800ee82:	d937      	bls.n	800eef4 <_strtod_l+0x32c>
 800ee84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee86:	1a7f      	subs	r7, r7, r1
 800ee88:	2f08      	cmp	r7, #8
 800ee8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ee8e:	dc37      	bgt.n	800ef00 <_strtod_l+0x338>
 800ee90:	45be      	cmp	lr, r7
 800ee92:	bfa8      	it	ge
 800ee94:	46be      	movge	lr, r7
 800ee96:	f1bc 0f00 	cmp.w	ip, #0
 800ee9a:	d001      	beq.n	800eea0 <_strtod_l+0x2d8>
 800ee9c:	f1ce 0e00 	rsb	lr, lr, #0
 800eea0:	2c00      	cmp	r4, #0
 800eea2:	d151      	bne.n	800ef48 <_strtod_l+0x380>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	f47f aece 	bne.w	800ec46 <_strtod_l+0x7e>
 800eeaa:	9a06      	ldr	r2, [sp, #24]
 800eeac:	2a00      	cmp	r2, #0
 800eeae:	f47f aeca 	bne.w	800ec46 <_strtod_l+0x7e>
 800eeb2:	9a04      	ldr	r2, [sp, #16]
 800eeb4:	2a00      	cmp	r2, #0
 800eeb6:	f47f aee4 	bne.w	800ec82 <_strtod_l+0xba>
 800eeba:	2b4e      	cmp	r3, #78	; 0x4e
 800eebc:	d027      	beq.n	800ef0e <_strtod_l+0x346>
 800eebe:	dc21      	bgt.n	800ef04 <_strtod_l+0x33c>
 800eec0:	2b49      	cmp	r3, #73	; 0x49
 800eec2:	f47f aede 	bne.w	800ec82 <_strtod_l+0xba>
 800eec6:	49a0      	ldr	r1, [pc, #640]	; (800f148 <_strtod_l+0x580>)
 800eec8:	a81b      	add	r0, sp, #108	; 0x6c
 800eeca:	f001 fea1 	bl	8010c10 <__match>
 800eece:	2800      	cmp	r0, #0
 800eed0:	f43f aed7 	beq.w	800ec82 <_strtod_l+0xba>
 800eed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eed6:	499d      	ldr	r1, [pc, #628]	; (800f14c <_strtod_l+0x584>)
 800eed8:	3b01      	subs	r3, #1
 800eeda:	a81b      	add	r0, sp, #108	; 0x6c
 800eedc:	931b      	str	r3, [sp, #108]	; 0x6c
 800eede:	f001 fe97 	bl	8010c10 <__match>
 800eee2:	b910      	cbnz	r0, 800eeea <_strtod_l+0x322>
 800eee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eee6:	3301      	adds	r3, #1
 800eee8:	931b      	str	r3, [sp, #108]	; 0x6c
 800eeea:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f160 <_strtod_l+0x598>
 800eeee:	f04f 0a00 	mov.w	sl, #0
 800eef2:	e6a8      	b.n	800ec46 <_strtod_l+0x7e>
 800eef4:	210a      	movs	r1, #10
 800eef6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800eefa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800eefe:	e7b8      	b.n	800ee72 <_strtod_l+0x2aa>
 800ef00:	46be      	mov	lr, r7
 800ef02:	e7c8      	b.n	800ee96 <_strtod_l+0x2ce>
 800ef04:	2b69      	cmp	r3, #105	; 0x69
 800ef06:	d0de      	beq.n	800eec6 <_strtod_l+0x2fe>
 800ef08:	2b6e      	cmp	r3, #110	; 0x6e
 800ef0a:	f47f aeba 	bne.w	800ec82 <_strtod_l+0xba>
 800ef0e:	4990      	ldr	r1, [pc, #576]	; (800f150 <_strtod_l+0x588>)
 800ef10:	a81b      	add	r0, sp, #108	; 0x6c
 800ef12:	f001 fe7d 	bl	8010c10 <__match>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f43f aeb3 	beq.w	800ec82 <_strtod_l+0xba>
 800ef1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b28      	cmp	r3, #40	; 0x28
 800ef22:	d10e      	bne.n	800ef42 <_strtod_l+0x37a>
 800ef24:	aa1e      	add	r2, sp, #120	; 0x78
 800ef26:	498b      	ldr	r1, [pc, #556]	; (800f154 <_strtod_l+0x58c>)
 800ef28:	a81b      	add	r0, sp, #108	; 0x6c
 800ef2a:	f001 fe85 	bl	8010c38 <__hexnan>
 800ef2e:	2805      	cmp	r0, #5
 800ef30:	d107      	bne.n	800ef42 <_strtod_l+0x37a>
 800ef32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ef38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ef3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ef40:	e681      	b.n	800ec46 <_strtod_l+0x7e>
 800ef42:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f168 <_strtod_l+0x5a0>
 800ef46:	e7d2      	b.n	800eeee <_strtod_l+0x326>
 800ef48:	ebae 0302 	sub.w	r3, lr, r2
 800ef4c:	9306      	str	r3, [sp, #24]
 800ef4e:	9b05      	ldr	r3, [sp, #20]
 800ef50:	9807      	ldr	r0, [sp, #28]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	bf08      	it	eq
 800ef56:	4623      	moveq	r3, r4
 800ef58:	2c10      	cmp	r4, #16
 800ef5a:	9305      	str	r3, [sp, #20]
 800ef5c:	46a0      	mov	r8, r4
 800ef5e:	bfa8      	it	ge
 800ef60:	f04f 0810 	movge.w	r8, #16
 800ef64:	f7f1 face 	bl	8000504 <__aeabi_ui2d>
 800ef68:	2c09      	cmp	r4, #9
 800ef6a:	4682      	mov	sl, r0
 800ef6c:	468b      	mov	fp, r1
 800ef6e:	dc13      	bgt.n	800ef98 <_strtod_l+0x3d0>
 800ef70:	9b06      	ldr	r3, [sp, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f43f ae67 	beq.w	800ec46 <_strtod_l+0x7e>
 800ef78:	9b06      	ldr	r3, [sp, #24]
 800ef7a:	dd7a      	ble.n	800f072 <_strtod_l+0x4aa>
 800ef7c:	2b16      	cmp	r3, #22
 800ef7e:	dc61      	bgt.n	800f044 <_strtod_l+0x47c>
 800ef80:	4a75      	ldr	r2, [pc, #468]	; (800f158 <_strtod_l+0x590>)
 800ef82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ef86:	e9de 0100 	ldrd	r0, r1, [lr]
 800ef8a:	4652      	mov	r2, sl
 800ef8c:	465b      	mov	r3, fp
 800ef8e:	f7f1 fb33 	bl	80005f8 <__aeabi_dmul>
 800ef92:	4682      	mov	sl, r0
 800ef94:	468b      	mov	fp, r1
 800ef96:	e656      	b.n	800ec46 <_strtod_l+0x7e>
 800ef98:	4b6f      	ldr	r3, [pc, #444]	; (800f158 <_strtod_l+0x590>)
 800ef9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ef9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800efa2:	f7f1 fb29 	bl	80005f8 <__aeabi_dmul>
 800efa6:	4606      	mov	r6, r0
 800efa8:	4628      	mov	r0, r5
 800efaa:	460f      	mov	r7, r1
 800efac:	f7f1 faaa 	bl	8000504 <__aeabi_ui2d>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4630      	mov	r0, r6
 800efb6:	4639      	mov	r1, r7
 800efb8:	f7f1 f968 	bl	800028c <__adddf3>
 800efbc:	2c0f      	cmp	r4, #15
 800efbe:	4682      	mov	sl, r0
 800efc0:	468b      	mov	fp, r1
 800efc2:	ddd5      	ble.n	800ef70 <_strtod_l+0x3a8>
 800efc4:	9b06      	ldr	r3, [sp, #24]
 800efc6:	eba4 0808 	sub.w	r8, r4, r8
 800efca:	4498      	add	r8, r3
 800efcc:	f1b8 0f00 	cmp.w	r8, #0
 800efd0:	f340 8096 	ble.w	800f100 <_strtod_l+0x538>
 800efd4:	f018 030f 	ands.w	r3, r8, #15
 800efd8:	d00a      	beq.n	800eff0 <_strtod_l+0x428>
 800efda:	495f      	ldr	r1, [pc, #380]	; (800f158 <_strtod_l+0x590>)
 800efdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efe0:	4652      	mov	r2, sl
 800efe2:	465b      	mov	r3, fp
 800efe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efe8:	f7f1 fb06 	bl	80005f8 <__aeabi_dmul>
 800efec:	4682      	mov	sl, r0
 800efee:	468b      	mov	fp, r1
 800eff0:	f038 080f 	bics.w	r8, r8, #15
 800eff4:	d073      	beq.n	800f0de <_strtod_l+0x516>
 800eff6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800effa:	dd47      	ble.n	800f08c <_strtod_l+0x4c4>
 800effc:	2400      	movs	r4, #0
 800effe:	46a0      	mov	r8, r4
 800f000:	9407      	str	r4, [sp, #28]
 800f002:	9405      	str	r4, [sp, #20]
 800f004:	2322      	movs	r3, #34	; 0x22
 800f006:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f160 <_strtod_l+0x598>
 800f00a:	f8c9 3000 	str.w	r3, [r9]
 800f00e:	f04f 0a00 	mov.w	sl, #0
 800f012:	9b07      	ldr	r3, [sp, #28]
 800f014:	2b00      	cmp	r3, #0
 800f016:	f43f ae16 	beq.w	800ec46 <_strtod_l+0x7e>
 800f01a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f01c:	4648      	mov	r0, r9
 800f01e:	f001 fefd 	bl	8010e1c <_Bfree>
 800f022:	9905      	ldr	r1, [sp, #20]
 800f024:	4648      	mov	r0, r9
 800f026:	f001 fef9 	bl	8010e1c <_Bfree>
 800f02a:	4641      	mov	r1, r8
 800f02c:	4648      	mov	r0, r9
 800f02e:	f001 fef5 	bl	8010e1c <_Bfree>
 800f032:	9907      	ldr	r1, [sp, #28]
 800f034:	4648      	mov	r0, r9
 800f036:	f001 fef1 	bl	8010e1c <_Bfree>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4648      	mov	r0, r9
 800f03e:	f001 feed 	bl	8010e1c <_Bfree>
 800f042:	e600      	b.n	800ec46 <_strtod_l+0x7e>
 800f044:	9a06      	ldr	r2, [sp, #24]
 800f046:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f04a:	4293      	cmp	r3, r2
 800f04c:	dbba      	blt.n	800efc4 <_strtod_l+0x3fc>
 800f04e:	4d42      	ldr	r5, [pc, #264]	; (800f158 <_strtod_l+0x590>)
 800f050:	f1c4 040f 	rsb	r4, r4, #15
 800f054:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f058:	4652      	mov	r2, sl
 800f05a:	465b      	mov	r3, fp
 800f05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f060:	f7f1 faca 	bl	80005f8 <__aeabi_dmul>
 800f064:	9b06      	ldr	r3, [sp, #24]
 800f066:	1b1c      	subs	r4, r3, r4
 800f068:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f06c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f070:	e78d      	b.n	800ef8e <_strtod_l+0x3c6>
 800f072:	f113 0f16 	cmn.w	r3, #22
 800f076:	dba5      	blt.n	800efc4 <_strtod_l+0x3fc>
 800f078:	4a37      	ldr	r2, [pc, #220]	; (800f158 <_strtod_l+0x590>)
 800f07a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f07e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f082:	4650      	mov	r0, sl
 800f084:	4659      	mov	r1, fp
 800f086:	f7f1 fbe1 	bl	800084c <__aeabi_ddiv>
 800f08a:	e782      	b.n	800ef92 <_strtod_l+0x3ca>
 800f08c:	2300      	movs	r3, #0
 800f08e:	4e33      	ldr	r6, [pc, #204]	; (800f15c <_strtod_l+0x594>)
 800f090:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f094:	4650      	mov	r0, sl
 800f096:	4659      	mov	r1, fp
 800f098:	461d      	mov	r5, r3
 800f09a:	f1b8 0f01 	cmp.w	r8, #1
 800f09e:	dc21      	bgt.n	800f0e4 <_strtod_l+0x51c>
 800f0a0:	b10b      	cbz	r3, 800f0a6 <_strtod_l+0x4de>
 800f0a2:	4682      	mov	sl, r0
 800f0a4:	468b      	mov	fp, r1
 800f0a6:	4b2d      	ldr	r3, [pc, #180]	; (800f15c <_strtod_l+0x594>)
 800f0a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f0ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f0b0:	4652      	mov	r2, sl
 800f0b2:	465b      	mov	r3, fp
 800f0b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f0b8:	f7f1 fa9e 	bl	80005f8 <__aeabi_dmul>
 800f0bc:	4b28      	ldr	r3, [pc, #160]	; (800f160 <_strtod_l+0x598>)
 800f0be:	460a      	mov	r2, r1
 800f0c0:	400b      	ands	r3, r1
 800f0c2:	4928      	ldr	r1, [pc, #160]	; (800f164 <_strtod_l+0x59c>)
 800f0c4:	428b      	cmp	r3, r1
 800f0c6:	4682      	mov	sl, r0
 800f0c8:	d898      	bhi.n	800effc <_strtod_l+0x434>
 800f0ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f0ce:	428b      	cmp	r3, r1
 800f0d0:	bf86      	itte	hi
 800f0d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f16c <_strtod_l+0x5a4>
 800f0d6:	f04f 3aff 	movhi.w	sl, #4294967295
 800f0da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f0de:	2300      	movs	r3, #0
 800f0e0:	9304      	str	r3, [sp, #16]
 800f0e2:	e077      	b.n	800f1d4 <_strtod_l+0x60c>
 800f0e4:	f018 0f01 	tst.w	r8, #1
 800f0e8:	d006      	beq.n	800f0f8 <_strtod_l+0x530>
 800f0ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	f7f1 fa81 	bl	80005f8 <__aeabi_dmul>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	3501      	adds	r5, #1
 800f0fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f0fe:	e7cc      	b.n	800f09a <_strtod_l+0x4d2>
 800f100:	d0ed      	beq.n	800f0de <_strtod_l+0x516>
 800f102:	f1c8 0800 	rsb	r8, r8, #0
 800f106:	f018 020f 	ands.w	r2, r8, #15
 800f10a:	d00a      	beq.n	800f122 <_strtod_l+0x55a>
 800f10c:	4b12      	ldr	r3, [pc, #72]	; (800f158 <_strtod_l+0x590>)
 800f10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f112:	4650      	mov	r0, sl
 800f114:	4659      	mov	r1, fp
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 fb97 	bl	800084c <__aeabi_ddiv>
 800f11e:	4682      	mov	sl, r0
 800f120:	468b      	mov	fp, r1
 800f122:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f126:	d0da      	beq.n	800f0de <_strtod_l+0x516>
 800f128:	f1b8 0f1f 	cmp.w	r8, #31
 800f12c:	dd20      	ble.n	800f170 <_strtod_l+0x5a8>
 800f12e:	2400      	movs	r4, #0
 800f130:	46a0      	mov	r8, r4
 800f132:	9407      	str	r4, [sp, #28]
 800f134:	9405      	str	r4, [sp, #20]
 800f136:	2322      	movs	r3, #34	; 0x22
 800f138:	f04f 0a00 	mov.w	sl, #0
 800f13c:	f04f 0b00 	mov.w	fp, #0
 800f140:	f8c9 3000 	str.w	r3, [r9]
 800f144:	e765      	b.n	800f012 <_strtod_l+0x44a>
 800f146:	bf00      	nop
 800f148:	08012889 	.word	0x08012889
 800f14c:	08012913 	.word	0x08012913
 800f150:	08012891 	.word	0x08012891
 800f154:	080128d4 	.word	0x080128d4
 800f158:	080129b8 	.word	0x080129b8
 800f15c:	08012990 	.word	0x08012990
 800f160:	7ff00000 	.word	0x7ff00000
 800f164:	7ca00000 	.word	0x7ca00000
 800f168:	fff80000 	.word	0xfff80000
 800f16c:	7fefffff 	.word	0x7fefffff
 800f170:	f018 0310 	ands.w	r3, r8, #16
 800f174:	bf18      	it	ne
 800f176:	236a      	movne	r3, #106	; 0x6a
 800f178:	4da0      	ldr	r5, [pc, #640]	; (800f3fc <_strtod_l+0x834>)
 800f17a:	9304      	str	r3, [sp, #16]
 800f17c:	4650      	mov	r0, sl
 800f17e:	4659      	mov	r1, fp
 800f180:	2300      	movs	r3, #0
 800f182:	f1b8 0f00 	cmp.w	r8, #0
 800f186:	f300 810a 	bgt.w	800f39e <_strtod_l+0x7d6>
 800f18a:	b10b      	cbz	r3, 800f190 <_strtod_l+0x5c8>
 800f18c:	4682      	mov	sl, r0
 800f18e:	468b      	mov	fp, r1
 800f190:	9b04      	ldr	r3, [sp, #16]
 800f192:	b1bb      	cbz	r3, 800f1c4 <_strtod_l+0x5fc>
 800f194:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f198:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	4659      	mov	r1, fp
 800f1a0:	dd10      	ble.n	800f1c4 <_strtod_l+0x5fc>
 800f1a2:	2b1f      	cmp	r3, #31
 800f1a4:	f340 8107 	ble.w	800f3b6 <_strtod_l+0x7ee>
 800f1a8:	2b34      	cmp	r3, #52	; 0x34
 800f1aa:	bfde      	ittt	le
 800f1ac:	3b20      	suble	r3, #32
 800f1ae:	f04f 32ff 	movle.w	r2, #4294967295
 800f1b2:	fa02 f303 	lslle.w	r3, r2, r3
 800f1b6:	f04f 0a00 	mov.w	sl, #0
 800f1ba:	bfcc      	ite	gt
 800f1bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f1c0:	ea03 0b01 	andle.w	fp, r3, r1
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	4650      	mov	r0, sl
 800f1ca:	4659      	mov	r1, fp
 800f1cc:	f7f1 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d1ac      	bne.n	800f12e <_strtod_l+0x566>
 800f1d4:	9b07      	ldr	r3, [sp, #28]
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	9a05      	ldr	r2, [sp, #20]
 800f1da:	9908      	ldr	r1, [sp, #32]
 800f1dc:	4623      	mov	r3, r4
 800f1de:	4648      	mov	r0, r9
 800f1e0:	f001 fe6e 	bl	8010ec0 <__s2b>
 800f1e4:	9007      	str	r0, [sp, #28]
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f43f af08 	beq.w	800effc <_strtod_l+0x434>
 800f1ec:	9a06      	ldr	r2, [sp, #24]
 800f1ee:	9b06      	ldr	r3, [sp, #24]
 800f1f0:	2a00      	cmp	r2, #0
 800f1f2:	f1c3 0300 	rsb	r3, r3, #0
 800f1f6:	bfa8      	it	ge
 800f1f8:	2300      	movge	r3, #0
 800f1fa:	930e      	str	r3, [sp, #56]	; 0x38
 800f1fc:	2400      	movs	r4, #0
 800f1fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f202:	9316      	str	r3, [sp, #88]	; 0x58
 800f204:	46a0      	mov	r8, r4
 800f206:	9b07      	ldr	r3, [sp, #28]
 800f208:	4648      	mov	r0, r9
 800f20a:	6859      	ldr	r1, [r3, #4]
 800f20c:	f001 fdd2 	bl	8010db4 <_Balloc>
 800f210:	9005      	str	r0, [sp, #20]
 800f212:	2800      	cmp	r0, #0
 800f214:	f43f aef6 	beq.w	800f004 <_strtod_l+0x43c>
 800f218:	9b07      	ldr	r3, [sp, #28]
 800f21a:	691a      	ldr	r2, [r3, #16]
 800f21c:	3202      	adds	r2, #2
 800f21e:	f103 010c 	add.w	r1, r3, #12
 800f222:	0092      	lsls	r2, r2, #2
 800f224:	300c      	adds	r0, #12
 800f226:	f7fe fe21 	bl	800de6c <memcpy>
 800f22a:	aa1e      	add	r2, sp, #120	; 0x78
 800f22c:	a91d      	add	r1, sp, #116	; 0x74
 800f22e:	ec4b ab10 	vmov	d0, sl, fp
 800f232:	4648      	mov	r0, r9
 800f234:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f238:	f002 f8fe 	bl	8011438 <__d2b>
 800f23c:	901c      	str	r0, [sp, #112]	; 0x70
 800f23e:	2800      	cmp	r0, #0
 800f240:	f43f aee0 	beq.w	800f004 <_strtod_l+0x43c>
 800f244:	2101      	movs	r1, #1
 800f246:	4648      	mov	r0, r9
 800f248:	f001 fec6 	bl	8010fd8 <__i2b>
 800f24c:	4680      	mov	r8, r0
 800f24e:	2800      	cmp	r0, #0
 800f250:	f43f aed8 	beq.w	800f004 <_strtod_l+0x43c>
 800f254:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f256:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f258:	2e00      	cmp	r6, #0
 800f25a:	bfab      	itete	ge
 800f25c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f25e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f260:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f262:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f264:	bfac      	ite	ge
 800f266:	18f7      	addge	r7, r6, r3
 800f268:	1b9d      	sublt	r5, r3, r6
 800f26a:	9b04      	ldr	r3, [sp, #16]
 800f26c:	1af6      	subs	r6, r6, r3
 800f26e:	4416      	add	r6, r2
 800f270:	4b63      	ldr	r3, [pc, #396]	; (800f400 <_strtod_l+0x838>)
 800f272:	3e01      	subs	r6, #1
 800f274:	429e      	cmp	r6, r3
 800f276:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f27a:	f280 80af 	bge.w	800f3dc <_strtod_l+0x814>
 800f27e:	1b9b      	subs	r3, r3, r6
 800f280:	2b1f      	cmp	r3, #31
 800f282:	eba2 0203 	sub.w	r2, r2, r3
 800f286:	f04f 0101 	mov.w	r1, #1
 800f28a:	f300 809b 	bgt.w	800f3c4 <_strtod_l+0x7fc>
 800f28e:	fa01 f303 	lsl.w	r3, r1, r3
 800f292:	930f      	str	r3, [sp, #60]	; 0x3c
 800f294:	2300      	movs	r3, #0
 800f296:	930a      	str	r3, [sp, #40]	; 0x28
 800f298:	18be      	adds	r6, r7, r2
 800f29a:	9b04      	ldr	r3, [sp, #16]
 800f29c:	42b7      	cmp	r7, r6
 800f29e:	4415      	add	r5, r2
 800f2a0:	441d      	add	r5, r3
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	bfa8      	it	ge
 800f2a6:	4633      	movge	r3, r6
 800f2a8:	42ab      	cmp	r3, r5
 800f2aa:	bfa8      	it	ge
 800f2ac:	462b      	movge	r3, r5
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	bfc2      	ittt	gt
 800f2b2:	1af6      	subgt	r6, r6, r3
 800f2b4:	1aed      	subgt	r5, r5, r3
 800f2b6:	1aff      	subgt	r7, r7, r3
 800f2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2ba:	b1bb      	cbz	r3, 800f2ec <_strtod_l+0x724>
 800f2bc:	4641      	mov	r1, r8
 800f2be:	461a      	mov	r2, r3
 800f2c0:	4648      	mov	r0, r9
 800f2c2:	f001 ff29 	bl	8011118 <__pow5mult>
 800f2c6:	4680      	mov	r8, r0
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	f43f ae9b 	beq.w	800f004 <_strtod_l+0x43c>
 800f2ce:	4601      	mov	r1, r0
 800f2d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f2d2:	4648      	mov	r0, r9
 800f2d4:	f001 fe89 	bl	8010fea <__multiply>
 800f2d8:	900c      	str	r0, [sp, #48]	; 0x30
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	f43f ae92 	beq.w	800f004 <_strtod_l+0x43c>
 800f2e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f2e2:	4648      	mov	r0, r9
 800f2e4:	f001 fd9a 	bl	8010e1c <_Bfree>
 800f2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2ea:	931c      	str	r3, [sp, #112]	; 0x70
 800f2ec:	2e00      	cmp	r6, #0
 800f2ee:	dc7a      	bgt.n	800f3e6 <_strtod_l+0x81e>
 800f2f0:	9b06      	ldr	r3, [sp, #24]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	dd08      	ble.n	800f308 <_strtod_l+0x740>
 800f2f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f2f8:	9905      	ldr	r1, [sp, #20]
 800f2fa:	4648      	mov	r0, r9
 800f2fc:	f001 ff0c 	bl	8011118 <__pow5mult>
 800f300:	9005      	str	r0, [sp, #20]
 800f302:	2800      	cmp	r0, #0
 800f304:	f43f ae7e 	beq.w	800f004 <_strtod_l+0x43c>
 800f308:	2d00      	cmp	r5, #0
 800f30a:	dd08      	ble.n	800f31e <_strtod_l+0x756>
 800f30c:	462a      	mov	r2, r5
 800f30e:	9905      	ldr	r1, [sp, #20]
 800f310:	4648      	mov	r0, r9
 800f312:	f001 ff4f 	bl	80111b4 <__lshift>
 800f316:	9005      	str	r0, [sp, #20]
 800f318:	2800      	cmp	r0, #0
 800f31a:	f43f ae73 	beq.w	800f004 <_strtod_l+0x43c>
 800f31e:	2f00      	cmp	r7, #0
 800f320:	dd08      	ble.n	800f334 <_strtod_l+0x76c>
 800f322:	4641      	mov	r1, r8
 800f324:	463a      	mov	r2, r7
 800f326:	4648      	mov	r0, r9
 800f328:	f001 ff44 	bl	80111b4 <__lshift>
 800f32c:	4680      	mov	r8, r0
 800f32e:	2800      	cmp	r0, #0
 800f330:	f43f ae68 	beq.w	800f004 <_strtod_l+0x43c>
 800f334:	9a05      	ldr	r2, [sp, #20]
 800f336:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f338:	4648      	mov	r0, r9
 800f33a:	f001 ffa9 	bl	8011290 <__mdiff>
 800f33e:	4604      	mov	r4, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	f43f ae5f 	beq.w	800f004 <_strtod_l+0x43c>
 800f346:	68c3      	ldr	r3, [r0, #12]
 800f348:	930c      	str	r3, [sp, #48]	; 0x30
 800f34a:	2300      	movs	r3, #0
 800f34c:	60c3      	str	r3, [r0, #12]
 800f34e:	4641      	mov	r1, r8
 800f350:	f001 ff84 	bl	801125c <__mcmp>
 800f354:	2800      	cmp	r0, #0
 800f356:	da55      	bge.n	800f404 <_strtod_l+0x83c>
 800f358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f35a:	b9e3      	cbnz	r3, 800f396 <_strtod_l+0x7ce>
 800f35c:	f1ba 0f00 	cmp.w	sl, #0
 800f360:	d119      	bne.n	800f396 <_strtod_l+0x7ce>
 800f362:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f366:	b9b3      	cbnz	r3, 800f396 <_strtod_l+0x7ce>
 800f368:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f36c:	0d1b      	lsrs	r3, r3, #20
 800f36e:	051b      	lsls	r3, r3, #20
 800f370:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f374:	d90f      	bls.n	800f396 <_strtod_l+0x7ce>
 800f376:	6963      	ldr	r3, [r4, #20]
 800f378:	b913      	cbnz	r3, 800f380 <_strtod_l+0x7b8>
 800f37a:	6923      	ldr	r3, [r4, #16]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	dd0a      	ble.n	800f396 <_strtod_l+0x7ce>
 800f380:	4621      	mov	r1, r4
 800f382:	2201      	movs	r2, #1
 800f384:	4648      	mov	r0, r9
 800f386:	f001 ff15 	bl	80111b4 <__lshift>
 800f38a:	4641      	mov	r1, r8
 800f38c:	4604      	mov	r4, r0
 800f38e:	f001 ff65 	bl	801125c <__mcmp>
 800f392:	2800      	cmp	r0, #0
 800f394:	dc67      	bgt.n	800f466 <_strtod_l+0x89e>
 800f396:	9b04      	ldr	r3, [sp, #16]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d171      	bne.n	800f480 <_strtod_l+0x8b8>
 800f39c:	e63d      	b.n	800f01a <_strtod_l+0x452>
 800f39e:	f018 0f01 	tst.w	r8, #1
 800f3a2:	d004      	beq.n	800f3ae <_strtod_l+0x7e6>
 800f3a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3a8:	f7f1 f926 	bl	80005f8 <__aeabi_dmul>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f3b2:	3508      	adds	r5, #8
 800f3b4:	e6e5      	b.n	800f182 <_strtod_l+0x5ba>
 800f3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f3be:	ea03 0a0a 	and.w	sl, r3, sl
 800f3c2:	e6ff      	b.n	800f1c4 <_strtod_l+0x5fc>
 800f3c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f3c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f3cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f3d0:	36e2      	adds	r6, #226	; 0xe2
 800f3d2:	fa01 f306 	lsl.w	r3, r1, r6
 800f3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f3d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800f3da:	e75d      	b.n	800f298 <_strtod_l+0x6d0>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	930a      	str	r3, [sp, #40]	; 0x28
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3e4:	e758      	b.n	800f298 <_strtod_l+0x6d0>
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f3ea:	4648      	mov	r0, r9
 800f3ec:	f001 fee2 	bl	80111b4 <__lshift>
 800f3f0:	901c      	str	r0, [sp, #112]	; 0x70
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f47f af7c 	bne.w	800f2f0 <_strtod_l+0x728>
 800f3f8:	e604      	b.n	800f004 <_strtod_l+0x43c>
 800f3fa:	bf00      	nop
 800f3fc:	080128e8 	.word	0x080128e8
 800f400:	fffffc02 	.word	0xfffffc02
 800f404:	465d      	mov	r5, fp
 800f406:	f040 8086 	bne.w	800f516 <_strtod_l+0x94e>
 800f40a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f410:	b32a      	cbz	r2, 800f45e <_strtod_l+0x896>
 800f412:	4aaf      	ldr	r2, [pc, #700]	; (800f6d0 <_strtod_l+0xb08>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d153      	bne.n	800f4c0 <_strtod_l+0x8f8>
 800f418:	9b04      	ldr	r3, [sp, #16]
 800f41a:	4650      	mov	r0, sl
 800f41c:	b1d3      	cbz	r3, 800f454 <_strtod_l+0x88c>
 800f41e:	4aad      	ldr	r2, [pc, #692]	; (800f6d4 <_strtod_l+0xb0c>)
 800f420:	402a      	ands	r2, r5
 800f422:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f426:	f04f 31ff 	mov.w	r1, #4294967295
 800f42a:	d816      	bhi.n	800f45a <_strtod_l+0x892>
 800f42c:	0d12      	lsrs	r2, r2, #20
 800f42e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f432:	fa01 f303 	lsl.w	r3, r1, r3
 800f436:	4298      	cmp	r0, r3
 800f438:	d142      	bne.n	800f4c0 <_strtod_l+0x8f8>
 800f43a:	4ba7      	ldr	r3, [pc, #668]	; (800f6d8 <_strtod_l+0xb10>)
 800f43c:	429d      	cmp	r5, r3
 800f43e:	d102      	bne.n	800f446 <_strtod_l+0x87e>
 800f440:	3001      	adds	r0, #1
 800f442:	f43f addf 	beq.w	800f004 <_strtod_l+0x43c>
 800f446:	4ba3      	ldr	r3, [pc, #652]	; (800f6d4 <_strtod_l+0xb0c>)
 800f448:	402b      	ands	r3, r5
 800f44a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f44e:	f04f 0a00 	mov.w	sl, #0
 800f452:	e7a0      	b.n	800f396 <_strtod_l+0x7ce>
 800f454:	f04f 33ff 	mov.w	r3, #4294967295
 800f458:	e7ed      	b.n	800f436 <_strtod_l+0x86e>
 800f45a:	460b      	mov	r3, r1
 800f45c:	e7eb      	b.n	800f436 <_strtod_l+0x86e>
 800f45e:	bb7b      	cbnz	r3, 800f4c0 <_strtod_l+0x8f8>
 800f460:	f1ba 0f00 	cmp.w	sl, #0
 800f464:	d12c      	bne.n	800f4c0 <_strtod_l+0x8f8>
 800f466:	9904      	ldr	r1, [sp, #16]
 800f468:	4a9a      	ldr	r2, [pc, #616]	; (800f6d4 <_strtod_l+0xb0c>)
 800f46a:	465b      	mov	r3, fp
 800f46c:	b1f1      	cbz	r1, 800f4ac <_strtod_l+0x8e4>
 800f46e:	ea02 010b 	and.w	r1, r2, fp
 800f472:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f476:	dc19      	bgt.n	800f4ac <_strtod_l+0x8e4>
 800f478:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f47c:	f77f ae5b 	ble.w	800f136 <_strtod_l+0x56e>
 800f480:	4a96      	ldr	r2, [pc, #600]	; (800f6dc <_strtod_l+0xb14>)
 800f482:	2300      	movs	r3, #0
 800f484:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f488:	4650      	mov	r0, sl
 800f48a:	4659      	mov	r1, fp
 800f48c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f490:	f7f1 f8b2 	bl	80005f8 <__aeabi_dmul>
 800f494:	4682      	mov	sl, r0
 800f496:	468b      	mov	fp, r1
 800f498:	2900      	cmp	r1, #0
 800f49a:	f47f adbe 	bne.w	800f01a <_strtod_l+0x452>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	f47f adbb 	bne.w	800f01a <_strtod_l+0x452>
 800f4a4:	2322      	movs	r3, #34	; 0x22
 800f4a6:	f8c9 3000 	str.w	r3, [r9]
 800f4aa:	e5b6      	b.n	800f01a <_strtod_l+0x452>
 800f4ac:	4013      	ands	r3, r2
 800f4ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f4b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f4b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f4ba:	f04f 3aff 	mov.w	sl, #4294967295
 800f4be:	e76a      	b.n	800f396 <_strtod_l+0x7ce>
 800f4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4c2:	b193      	cbz	r3, 800f4ea <_strtod_l+0x922>
 800f4c4:	422b      	tst	r3, r5
 800f4c6:	f43f af66 	beq.w	800f396 <_strtod_l+0x7ce>
 800f4ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4cc:	9a04      	ldr	r2, [sp, #16]
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	4659      	mov	r1, fp
 800f4d2:	b173      	cbz	r3, 800f4f2 <_strtod_l+0x92a>
 800f4d4:	f7ff fb5a 	bl	800eb8c <sulp>
 800f4d8:	4602      	mov	r2, r0
 800f4da:	460b      	mov	r3, r1
 800f4dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f4e0:	f7f0 fed4 	bl	800028c <__adddf3>
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	468b      	mov	fp, r1
 800f4e8:	e755      	b.n	800f396 <_strtod_l+0x7ce>
 800f4ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4ec:	ea13 0f0a 	tst.w	r3, sl
 800f4f0:	e7e9      	b.n	800f4c6 <_strtod_l+0x8fe>
 800f4f2:	f7ff fb4b 	bl	800eb8c <sulp>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f4fe:	f7f0 fec3 	bl	8000288 <__aeabi_dsub>
 800f502:	2200      	movs	r2, #0
 800f504:	2300      	movs	r3, #0
 800f506:	4682      	mov	sl, r0
 800f508:	468b      	mov	fp, r1
 800f50a:	f7f1 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f50e:	2800      	cmp	r0, #0
 800f510:	f47f ae11 	bne.w	800f136 <_strtod_l+0x56e>
 800f514:	e73f      	b.n	800f396 <_strtod_l+0x7ce>
 800f516:	4641      	mov	r1, r8
 800f518:	4620      	mov	r0, r4
 800f51a:	f001 ffdc 	bl	80114d6 <__ratio>
 800f51e:	ec57 6b10 	vmov	r6, r7, d0
 800f522:	2200      	movs	r2, #0
 800f524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f528:	ee10 0a10 	vmov	r0, s0
 800f52c:	4639      	mov	r1, r7
 800f52e:	f7f1 fadf 	bl	8000af0 <__aeabi_dcmple>
 800f532:	2800      	cmp	r0, #0
 800f534:	d077      	beq.n	800f626 <_strtod_l+0xa5e>
 800f536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d04a      	beq.n	800f5d2 <_strtod_l+0xa0a>
 800f53c:	4b68      	ldr	r3, [pc, #416]	; (800f6e0 <_strtod_l+0xb18>)
 800f53e:	2200      	movs	r2, #0
 800f540:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f544:	4f66      	ldr	r7, [pc, #408]	; (800f6e0 <_strtod_l+0xb18>)
 800f546:	2600      	movs	r6, #0
 800f548:	4b62      	ldr	r3, [pc, #392]	; (800f6d4 <_strtod_l+0xb0c>)
 800f54a:	402b      	ands	r3, r5
 800f54c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f54e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f550:	4b64      	ldr	r3, [pc, #400]	; (800f6e4 <_strtod_l+0xb1c>)
 800f552:	429a      	cmp	r2, r3
 800f554:	f040 80ce 	bne.w	800f6f4 <_strtod_l+0xb2c>
 800f558:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f55c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f560:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f564:	ec4b ab10 	vmov	d0, sl, fp
 800f568:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f56c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f570:	f001 feec 	bl	801134c <__ulp>
 800f574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f578:	ec53 2b10 	vmov	r2, r3, d0
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	4652      	mov	r2, sl
 800f582:	465b      	mov	r3, fp
 800f584:	f7f0 fe82 	bl	800028c <__adddf3>
 800f588:	460b      	mov	r3, r1
 800f58a:	4952      	ldr	r1, [pc, #328]	; (800f6d4 <_strtod_l+0xb0c>)
 800f58c:	4a56      	ldr	r2, [pc, #344]	; (800f6e8 <_strtod_l+0xb20>)
 800f58e:	4019      	ands	r1, r3
 800f590:	4291      	cmp	r1, r2
 800f592:	4682      	mov	sl, r0
 800f594:	d95b      	bls.n	800f64e <_strtod_l+0xa86>
 800f596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f598:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d103      	bne.n	800f5a8 <_strtod_l+0x9e0>
 800f5a0:	9b08      	ldr	r3, [sp, #32]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	f43f ad2e 	beq.w	800f004 <_strtod_l+0x43c>
 800f5a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f6d8 <_strtod_l+0xb10>
 800f5ac:	f04f 3aff 	mov.w	sl, #4294967295
 800f5b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5b2:	4648      	mov	r0, r9
 800f5b4:	f001 fc32 	bl	8010e1c <_Bfree>
 800f5b8:	9905      	ldr	r1, [sp, #20]
 800f5ba:	4648      	mov	r0, r9
 800f5bc:	f001 fc2e 	bl	8010e1c <_Bfree>
 800f5c0:	4641      	mov	r1, r8
 800f5c2:	4648      	mov	r0, r9
 800f5c4:	f001 fc2a 	bl	8010e1c <_Bfree>
 800f5c8:	4621      	mov	r1, r4
 800f5ca:	4648      	mov	r0, r9
 800f5cc:	f001 fc26 	bl	8010e1c <_Bfree>
 800f5d0:	e619      	b.n	800f206 <_strtod_l+0x63e>
 800f5d2:	f1ba 0f00 	cmp.w	sl, #0
 800f5d6:	d11a      	bne.n	800f60e <_strtod_l+0xa46>
 800f5d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5dc:	b9eb      	cbnz	r3, 800f61a <_strtod_l+0xa52>
 800f5de:	2200      	movs	r2, #0
 800f5e0:	4b3f      	ldr	r3, [pc, #252]	; (800f6e0 <_strtod_l+0xb18>)
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	f7f1 fa79 	bl	8000adc <__aeabi_dcmplt>
 800f5ea:	b9c8      	cbnz	r0, 800f620 <_strtod_l+0xa58>
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	4b3e      	ldr	r3, [pc, #248]	; (800f6ec <_strtod_l+0xb24>)
 800f5f4:	f7f1 f800 	bl	80005f8 <__aeabi_dmul>
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	460f      	mov	r7, r1
 800f5fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f600:	9618      	str	r6, [sp, #96]	; 0x60
 800f602:	9319      	str	r3, [sp, #100]	; 0x64
 800f604:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f608:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f60c:	e79c      	b.n	800f548 <_strtod_l+0x980>
 800f60e:	f1ba 0f01 	cmp.w	sl, #1
 800f612:	d102      	bne.n	800f61a <_strtod_l+0xa52>
 800f614:	2d00      	cmp	r5, #0
 800f616:	f43f ad8e 	beq.w	800f136 <_strtod_l+0x56e>
 800f61a:	2200      	movs	r2, #0
 800f61c:	4b34      	ldr	r3, [pc, #208]	; (800f6f0 <_strtod_l+0xb28>)
 800f61e:	e78f      	b.n	800f540 <_strtod_l+0x978>
 800f620:	2600      	movs	r6, #0
 800f622:	4f32      	ldr	r7, [pc, #200]	; (800f6ec <_strtod_l+0xb24>)
 800f624:	e7ea      	b.n	800f5fc <_strtod_l+0xa34>
 800f626:	4b31      	ldr	r3, [pc, #196]	; (800f6ec <_strtod_l+0xb24>)
 800f628:	4630      	mov	r0, r6
 800f62a:	4639      	mov	r1, r7
 800f62c:	2200      	movs	r2, #0
 800f62e:	f7f0 ffe3 	bl	80005f8 <__aeabi_dmul>
 800f632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f634:	4606      	mov	r6, r0
 800f636:	460f      	mov	r7, r1
 800f638:	b933      	cbnz	r3, 800f648 <_strtod_l+0xa80>
 800f63a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f63e:	9010      	str	r0, [sp, #64]	; 0x40
 800f640:	9311      	str	r3, [sp, #68]	; 0x44
 800f642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f646:	e7df      	b.n	800f608 <_strtod_l+0xa40>
 800f648:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f64c:	e7f9      	b.n	800f642 <_strtod_l+0xa7a>
 800f64e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f652:	9b04      	ldr	r3, [sp, #16]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d1ab      	bne.n	800f5b0 <_strtod_l+0x9e8>
 800f658:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f65c:	0d1b      	lsrs	r3, r3, #20
 800f65e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f660:	051b      	lsls	r3, r3, #20
 800f662:	429a      	cmp	r2, r3
 800f664:	465d      	mov	r5, fp
 800f666:	d1a3      	bne.n	800f5b0 <_strtod_l+0x9e8>
 800f668:	4639      	mov	r1, r7
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7f1 fa74 	bl	8000b58 <__aeabi_d2iz>
 800f670:	f7f0 ff58 	bl	8000524 <__aeabi_i2d>
 800f674:	460b      	mov	r3, r1
 800f676:	4602      	mov	r2, r0
 800f678:	4639      	mov	r1, r7
 800f67a:	4630      	mov	r0, r6
 800f67c:	f7f0 fe04 	bl	8000288 <__aeabi_dsub>
 800f680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f682:	4606      	mov	r6, r0
 800f684:	460f      	mov	r7, r1
 800f686:	b933      	cbnz	r3, 800f696 <_strtod_l+0xace>
 800f688:	f1ba 0f00 	cmp.w	sl, #0
 800f68c:	d103      	bne.n	800f696 <_strtod_l+0xace>
 800f68e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f692:	2d00      	cmp	r5, #0
 800f694:	d06d      	beq.n	800f772 <_strtod_l+0xbaa>
 800f696:	a30a      	add	r3, pc, #40	; (adr r3, 800f6c0 <_strtod_l+0xaf8>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4630      	mov	r0, r6
 800f69e:	4639      	mov	r1, r7
 800f6a0:	f7f1 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	f47f acb8 	bne.w	800f01a <_strtod_l+0x452>
 800f6aa:	a307      	add	r3, pc, #28	; (adr r3, 800f6c8 <_strtod_l+0xb00>)
 800f6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	4639      	mov	r1, r7
 800f6b4:	f7f1 fa30 	bl	8000b18 <__aeabi_dcmpgt>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f43f af79 	beq.w	800f5b0 <_strtod_l+0x9e8>
 800f6be:	e4ac      	b.n	800f01a <_strtod_l+0x452>
 800f6c0:	94a03595 	.word	0x94a03595
 800f6c4:	3fdfffff 	.word	0x3fdfffff
 800f6c8:	35afe535 	.word	0x35afe535
 800f6cc:	3fe00000 	.word	0x3fe00000
 800f6d0:	000fffff 	.word	0x000fffff
 800f6d4:	7ff00000 	.word	0x7ff00000
 800f6d8:	7fefffff 	.word	0x7fefffff
 800f6dc:	39500000 	.word	0x39500000
 800f6e0:	3ff00000 	.word	0x3ff00000
 800f6e4:	7fe00000 	.word	0x7fe00000
 800f6e8:	7c9fffff 	.word	0x7c9fffff
 800f6ec:	3fe00000 	.word	0x3fe00000
 800f6f0:	bff00000 	.word	0xbff00000
 800f6f4:	9b04      	ldr	r3, [sp, #16]
 800f6f6:	b333      	cbz	r3, 800f746 <_strtod_l+0xb7e>
 800f6f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f6fe:	d822      	bhi.n	800f746 <_strtod_l+0xb7e>
 800f700:	a327      	add	r3, pc, #156	; (adr r3, 800f7a0 <_strtod_l+0xbd8>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	4630      	mov	r0, r6
 800f708:	4639      	mov	r1, r7
 800f70a:	f7f1 f9f1 	bl	8000af0 <__aeabi_dcmple>
 800f70e:	b1a0      	cbz	r0, 800f73a <_strtod_l+0xb72>
 800f710:	4639      	mov	r1, r7
 800f712:	4630      	mov	r0, r6
 800f714:	f7f1 fa48 	bl	8000ba8 <__aeabi_d2uiz>
 800f718:	2800      	cmp	r0, #0
 800f71a:	bf08      	it	eq
 800f71c:	2001      	moveq	r0, #1
 800f71e:	f7f0 fef1 	bl	8000504 <__aeabi_ui2d>
 800f722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f724:	4606      	mov	r6, r0
 800f726:	460f      	mov	r7, r1
 800f728:	bb03      	cbnz	r3, 800f76c <_strtod_l+0xba4>
 800f72a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f72e:	9012      	str	r0, [sp, #72]	; 0x48
 800f730:	9313      	str	r3, [sp, #76]	; 0x4c
 800f732:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f736:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f73c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f73e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f742:	1a9b      	subs	r3, r3, r2
 800f744:	930b      	str	r3, [sp, #44]	; 0x2c
 800f746:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f74a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f74e:	f001 fdfd 	bl	801134c <__ulp>
 800f752:	4650      	mov	r0, sl
 800f754:	ec53 2b10 	vmov	r2, r3, d0
 800f758:	4659      	mov	r1, fp
 800f75a:	f7f0 ff4d 	bl	80005f8 <__aeabi_dmul>
 800f75e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f762:	f7f0 fd93 	bl	800028c <__adddf3>
 800f766:	4682      	mov	sl, r0
 800f768:	468b      	mov	fp, r1
 800f76a:	e772      	b.n	800f652 <_strtod_l+0xa8a>
 800f76c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f770:	e7df      	b.n	800f732 <_strtod_l+0xb6a>
 800f772:	a30d      	add	r3, pc, #52	; (adr r3, 800f7a8 <_strtod_l+0xbe0>)
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f7f1 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800f77c:	e79c      	b.n	800f6b8 <_strtod_l+0xaf0>
 800f77e:	2300      	movs	r3, #0
 800f780:	930d      	str	r3, [sp, #52]	; 0x34
 800f782:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	f7ff ba61 	b.w	800ec4e <_strtod_l+0x86>
 800f78c:	2b65      	cmp	r3, #101	; 0x65
 800f78e:	f04f 0200 	mov.w	r2, #0
 800f792:	f43f ab4e 	beq.w	800ee32 <_strtod_l+0x26a>
 800f796:	2101      	movs	r1, #1
 800f798:	4614      	mov	r4, r2
 800f79a:	9104      	str	r1, [sp, #16]
 800f79c:	f7ff bacb 	b.w	800ed36 <_strtod_l+0x16e>
 800f7a0:	ffc00000 	.word	0xffc00000
 800f7a4:	41dfffff 	.word	0x41dfffff
 800f7a8:	94a03595 	.word	0x94a03595
 800f7ac:	3fcfffff 	.word	0x3fcfffff

0800f7b0 <_strtod_r>:
 800f7b0:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <_strtod_r+0x18>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	b410      	push	{r4}
 800f7b6:	6a1b      	ldr	r3, [r3, #32]
 800f7b8:	4c04      	ldr	r4, [pc, #16]	; (800f7cc <_strtod_r+0x1c>)
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bf08      	it	eq
 800f7be:	4623      	moveq	r3, r4
 800f7c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7c4:	f7ff ba00 	b.w	800ebc8 <_strtod_l>
 800f7c8:	20000048 	.word	0x20000048
 800f7cc:	200000ac 	.word	0x200000ac

0800f7d0 <_strtol_l.isra.0>:
 800f7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	4689      	mov	r9, r1
 800f7d8:	4692      	mov	sl, r2
 800f7da:	461e      	mov	r6, r3
 800f7dc:	460f      	mov	r7, r1
 800f7de:	463d      	mov	r5, r7
 800f7e0:	9808      	ldr	r0, [sp, #32]
 800f7e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7e6:	f001 fab7 	bl	8010d58 <__locale_ctype_ptr_l>
 800f7ea:	4420      	add	r0, r4
 800f7ec:	7843      	ldrb	r3, [r0, #1]
 800f7ee:	f013 0308 	ands.w	r3, r3, #8
 800f7f2:	d132      	bne.n	800f85a <_strtol_l.isra.0+0x8a>
 800f7f4:	2c2d      	cmp	r4, #45	; 0x2d
 800f7f6:	d132      	bne.n	800f85e <_strtol_l.isra.0+0x8e>
 800f7f8:	787c      	ldrb	r4, [r7, #1]
 800f7fa:	1cbd      	adds	r5, r7, #2
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	2e00      	cmp	r6, #0
 800f800:	d05d      	beq.n	800f8be <_strtol_l.isra.0+0xee>
 800f802:	2e10      	cmp	r6, #16
 800f804:	d109      	bne.n	800f81a <_strtol_l.isra.0+0x4a>
 800f806:	2c30      	cmp	r4, #48	; 0x30
 800f808:	d107      	bne.n	800f81a <_strtol_l.isra.0+0x4a>
 800f80a:	782b      	ldrb	r3, [r5, #0]
 800f80c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f810:	2b58      	cmp	r3, #88	; 0x58
 800f812:	d14f      	bne.n	800f8b4 <_strtol_l.isra.0+0xe4>
 800f814:	786c      	ldrb	r4, [r5, #1]
 800f816:	2610      	movs	r6, #16
 800f818:	3502      	adds	r5, #2
 800f81a:	2a00      	cmp	r2, #0
 800f81c:	bf14      	ite	ne
 800f81e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f822:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f826:	2700      	movs	r7, #0
 800f828:	fbb1 fcf6 	udiv	ip, r1, r6
 800f82c:	4638      	mov	r0, r7
 800f82e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f832:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f836:	2b09      	cmp	r3, #9
 800f838:	d817      	bhi.n	800f86a <_strtol_l.isra.0+0x9a>
 800f83a:	461c      	mov	r4, r3
 800f83c:	42a6      	cmp	r6, r4
 800f83e:	dd23      	ble.n	800f888 <_strtol_l.isra.0+0xb8>
 800f840:	1c7b      	adds	r3, r7, #1
 800f842:	d007      	beq.n	800f854 <_strtol_l.isra.0+0x84>
 800f844:	4584      	cmp	ip, r0
 800f846:	d31c      	bcc.n	800f882 <_strtol_l.isra.0+0xb2>
 800f848:	d101      	bne.n	800f84e <_strtol_l.isra.0+0x7e>
 800f84a:	45a6      	cmp	lr, r4
 800f84c:	db19      	blt.n	800f882 <_strtol_l.isra.0+0xb2>
 800f84e:	fb00 4006 	mla	r0, r0, r6, r4
 800f852:	2701      	movs	r7, #1
 800f854:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f858:	e7eb      	b.n	800f832 <_strtol_l.isra.0+0x62>
 800f85a:	462f      	mov	r7, r5
 800f85c:	e7bf      	b.n	800f7de <_strtol_l.isra.0+0xe>
 800f85e:	2c2b      	cmp	r4, #43	; 0x2b
 800f860:	bf04      	itt	eq
 800f862:	1cbd      	addeq	r5, r7, #2
 800f864:	787c      	ldrbeq	r4, [r7, #1]
 800f866:	461a      	mov	r2, r3
 800f868:	e7c9      	b.n	800f7fe <_strtol_l.isra.0+0x2e>
 800f86a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f86e:	2b19      	cmp	r3, #25
 800f870:	d801      	bhi.n	800f876 <_strtol_l.isra.0+0xa6>
 800f872:	3c37      	subs	r4, #55	; 0x37
 800f874:	e7e2      	b.n	800f83c <_strtol_l.isra.0+0x6c>
 800f876:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f87a:	2b19      	cmp	r3, #25
 800f87c:	d804      	bhi.n	800f888 <_strtol_l.isra.0+0xb8>
 800f87e:	3c57      	subs	r4, #87	; 0x57
 800f880:	e7dc      	b.n	800f83c <_strtol_l.isra.0+0x6c>
 800f882:	f04f 37ff 	mov.w	r7, #4294967295
 800f886:	e7e5      	b.n	800f854 <_strtol_l.isra.0+0x84>
 800f888:	1c7b      	adds	r3, r7, #1
 800f88a:	d108      	bne.n	800f89e <_strtol_l.isra.0+0xce>
 800f88c:	2322      	movs	r3, #34	; 0x22
 800f88e:	f8c8 3000 	str.w	r3, [r8]
 800f892:	4608      	mov	r0, r1
 800f894:	f1ba 0f00 	cmp.w	sl, #0
 800f898:	d107      	bne.n	800f8aa <_strtol_l.isra.0+0xda>
 800f89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89e:	b102      	cbz	r2, 800f8a2 <_strtol_l.isra.0+0xd2>
 800f8a0:	4240      	negs	r0, r0
 800f8a2:	f1ba 0f00 	cmp.w	sl, #0
 800f8a6:	d0f8      	beq.n	800f89a <_strtol_l.isra.0+0xca>
 800f8a8:	b10f      	cbz	r7, 800f8ae <_strtol_l.isra.0+0xde>
 800f8aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800f8ae:	f8ca 9000 	str.w	r9, [sl]
 800f8b2:	e7f2      	b.n	800f89a <_strtol_l.isra.0+0xca>
 800f8b4:	2430      	movs	r4, #48	; 0x30
 800f8b6:	2e00      	cmp	r6, #0
 800f8b8:	d1af      	bne.n	800f81a <_strtol_l.isra.0+0x4a>
 800f8ba:	2608      	movs	r6, #8
 800f8bc:	e7ad      	b.n	800f81a <_strtol_l.isra.0+0x4a>
 800f8be:	2c30      	cmp	r4, #48	; 0x30
 800f8c0:	d0a3      	beq.n	800f80a <_strtol_l.isra.0+0x3a>
 800f8c2:	260a      	movs	r6, #10
 800f8c4:	e7a9      	b.n	800f81a <_strtol_l.isra.0+0x4a>
	...

0800f8c8 <_strtol_r>:
 800f8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ca:	4c06      	ldr	r4, [pc, #24]	; (800f8e4 <_strtol_r+0x1c>)
 800f8cc:	4d06      	ldr	r5, [pc, #24]	; (800f8e8 <_strtol_r+0x20>)
 800f8ce:	6824      	ldr	r4, [r4, #0]
 800f8d0:	6a24      	ldr	r4, [r4, #32]
 800f8d2:	2c00      	cmp	r4, #0
 800f8d4:	bf08      	it	eq
 800f8d6:	462c      	moveq	r4, r5
 800f8d8:	9400      	str	r4, [sp, #0]
 800f8da:	f7ff ff79 	bl	800f7d0 <_strtol_l.isra.0>
 800f8de:	b003      	add	sp, #12
 800f8e0:	bd30      	pop	{r4, r5, pc}
 800f8e2:	bf00      	nop
 800f8e4:	20000048 	.word	0x20000048
 800f8e8:	200000ac 	.word	0x200000ac

0800f8ec <quorem>:
 800f8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	6903      	ldr	r3, [r0, #16]
 800f8f2:	690c      	ldr	r4, [r1, #16]
 800f8f4:	42a3      	cmp	r3, r4
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	f2c0 8082 	blt.w	800fa00 <quorem+0x114>
 800f8fc:	3c01      	subs	r4, #1
 800f8fe:	f101 0714 	add.w	r7, r1, #20
 800f902:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f906:	f100 0614 	add.w	r6, r0, #20
 800f90a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f90e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f912:	eb06 030c 	add.w	r3, r6, ip
 800f916:	3501      	adds	r5, #1
 800f918:	eb07 090c 	add.w	r9, r7, ip
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	fbb0 f5f5 	udiv	r5, r0, r5
 800f922:	b395      	cbz	r5, 800f98a <quorem+0x9e>
 800f924:	f04f 0a00 	mov.w	sl, #0
 800f928:	4638      	mov	r0, r7
 800f92a:	46b6      	mov	lr, r6
 800f92c:	46d3      	mov	fp, sl
 800f92e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f932:	b293      	uxth	r3, r2
 800f934:	fb05 a303 	mla	r3, r5, r3, sl
 800f938:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	ebab 0303 	sub.w	r3, fp, r3
 800f942:	0c12      	lsrs	r2, r2, #16
 800f944:	f8de b000 	ldr.w	fp, [lr]
 800f948:	fb05 a202 	mla	r2, r5, r2, sl
 800f94c:	fa13 f38b 	uxtah	r3, r3, fp
 800f950:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f954:	fa1f fb82 	uxth.w	fp, r2
 800f958:	f8de 2000 	ldr.w	r2, [lr]
 800f95c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f964:	b29b      	uxth	r3, r3
 800f966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f96a:	4581      	cmp	r9, r0
 800f96c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f970:	f84e 3b04 	str.w	r3, [lr], #4
 800f974:	d2db      	bcs.n	800f92e <quorem+0x42>
 800f976:	f856 300c 	ldr.w	r3, [r6, ip]
 800f97a:	b933      	cbnz	r3, 800f98a <quorem+0x9e>
 800f97c:	9b01      	ldr	r3, [sp, #4]
 800f97e:	3b04      	subs	r3, #4
 800f980:	429e      	cmp	r6, r3
 800f982:	461a      	mov	r2, r3
 800f984:	d330      	bcc.n	800f9e8 <quorem+0xfc>
 800f986:	f8c8 4010 	str.w	r4, [r8, #16]
 800f98a:	4640      	mov	r0, r8
 800f98c:	f001 fc66 	bl	801125c <__mcmp>
 800f990:	2800      	cmp	r0, #0
 800f992:	db25      	blt.n	800f9e0 <quorem+0xf4>
 800f994:	3501      	adds	r5, #1
 800f996:	4630      	mov	r0, r6
 800f998:	f04f 0c00 	mov.w	ip, #0
 800f99c:	f857 2b04 	ldr.w	r2, [r7], #4
 800f9a0:	f8d0 e000 	ldr.w	lr, [r0]
 800f9a4:	b293      	uxth	r3, r2
 800f9a6:	ebac 0303 	sub.w	r3, ip, r3
 800f9aa:	0c12      	lsrs	r2, r2, #16
 800f9ac:	fa13 f38e 	uxtah	r3, r3, lr
 800f9b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9be:	45b9      	cmp	r9, r7
 800f9c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f9c4:	f840 3b04 	str.w	r3, [r0], #4
 800f9c8:	d2e8      	bcs.n	800f99c <quorem+0xb0>
 800f9ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f9ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f9d2:	b92a      	cbnz	r2, 800f9e0 <quorem+0xf4>
 800f9d4:	3b04      	subs	r3, #4
 800f9d6:	429e      	cmp	r6, r3
 800f9d8:	461a      	mov	r2, r3
 800f9da:	d30b      	bcc.n	800f9f4 <quorem+0x108>
 800f9dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	b003      	add	sp, #12
 800f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e8:	6812      	ldr	r2, [r2, #0]
 800f9ea:	3b04      	subs	r3, #4
 800f9ec:	2a00      	cmp	r2, #0
 800f9ee:	d1ca      	bne.n	800f986 <quorem+0x9a>
 800f9f0:	3c01      	subs	r4, #1
 800f9f2:	e7c5      	b.n	800f980 <quorem+0x94>
 800f9f4:	6812      	ldr	r2, [r2, #0]
 800f9f6:	3b04      	subs	r3, #4
 800f9f8:	2a00      	cmp	r2, #0
 800f9fa:	d1ef      	bne.n	800f9dc <quorem+0xf0>
 800f9fc:	3c01      	subs	r4, #1
 800f9fe:	e7ea      	b.n	800f9d6 <quorem+0xea>
 800fa00:	2000      	movs	r0, #0
 800fa02:	e7ee      	b.n	800f9e2 <quorem+0xf6>
 800fa04:	0000      	movs	r0, r0
	...

0800fa08 <_dtoa_r>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	ec57 6b10 	vmov	r6, r7, d0
 800fa10:	b097      	sub	sp, #92	; 0x5c
 800fa12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa14:	9106      	str	r1, [sp, #24]
 800fa16:	4604      	mov	r4, r0
 800fa18:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa1a:	9312      	str	r3, [sp, #72]	; 0x48
 800fa1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa20:	e9cd 6700 	strd	r6, r7, [sp]
 800fa24:	b93d      	cbnz	r5, 800fa36 <_dtoa_r+0x2e>
 800fa26:	2010      	movs	r0, #16
 800fa28:	f001 f9aa 	bl	8010d80 <malloc>
 800fa2c:	6260      	str	r0, [r4, #36]	; 0x24
 800fa2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa32:	6005      	str	r5, [r0, #0]
 800fa34:	60c5      	str	r5, [r0, #12]
 800fa36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa38:	6819      	ldr	r1, [r3, #0]
 800fa3a:	b151      	cbz	r1, 800fa52 <_dtoa_r+0x4a>
 800fa3c:	685a      	ldr	r2, [r3, #4]
 800fa3e:	604a      	str	r2, [r1, #4]
 800fa40:	2301      	movs	r3, #1
 800fa42:	4093      	lsls	r3, r2
 800fa44:	608b      	str	r3, [r1, #8]
 800fa46:	4620      	mov	r0, r4
 800fa48:	f001 f9e8 	bl	8010e1c <_Bfree>
 800fa4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa4e:	2200      	movs	r2, #0
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	1e3b      	subs	r3, r7, #0
 800fa54:	bfbb      	ittet	lt
 800fa56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa5a:	9301      	strlt	r3, [sp, #4]
 800fa5c:	2300      	movge	r3, #0
 800fa5e:	2201      	movlt	r2, #1
 800fa60:	bfac      	ite	ge
 800fa62:	f8c8 3000 	strge.w	r3, [r8]
 800fa66:	f8c8 2000 	strlt.w	r2, [r8]
 800fa6a:	4baf      	ldr	r3, [pc, #700]	; (800fd28 <_dtoa_r+0x320>)
 800fa6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa70:	ea33 0308 	bics.w	r3, r3, r8
 800fa74:	d114      	bne.n	800faa0 <_dtoa_r+0x98>
 800fa76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa78:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	9b00      	ldr	r3, [sp, #0]
 800fa80:	b923      	cbnz	r3, 800fa8c <_dtoa_r+0x84>
 800fa82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fa86:	2800      	cmp	r0, #0
 800fa88:	f000 8542 	beq.w	8010510 <_dtoa_r+0xb08>
 800fa8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fd3c <_dtoa_r+0x334>
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f000 8544 	beq.w	8010520 <_dtoa_r+0xb18>
 800fa98:	f10b 0303 	add.w	r3, fp, #3
 800fa9c:	f000 bd3e 	b.w	801051c <_dtoa_r+0xb14>
 800faa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800faa4:	2200      	movs	r2, #0
 800faa6:	2300      	movs	r3, #0
 800faa8:	4630      	mov	r0, r6
 800faaa:	4639      	mov	r1, r7
 800faac:	f7f1 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fab0:	4681      	mov	r9, r0
 800fab2:	b168      	cbz	r0, 800fad0 <_dtoa_r+0xc8>
 800fab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fab6:	2301      	movs	r3, #1
 800fab8:	6013      	str	r3, [r2, #0]
 800faba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f000 8524 	beq.w	801050a <_dtoa_r+0xb02>
 800fac2:	4b9a      	ldr	r3, [pc, #616]	; (800fd2c <_dtoa_r+0x324>)
 800fac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fac6:	f103 3bff 	add.w	fp, r3, #4294967295
 800faca:	6013      	str	r3, [r2, #0]
 800facc:	f000 bd28 	b.w	8010520 <_dtoa_r+0xb18>
 800fad0:	aa14      	add	r2, sp, #80	; 0x50
 800fad2:	a915      	add	r1, sp, #84	; 0x54
 800fad4:	ec47 6b10 	vmov	d0, r6, r7
 800fad8:	4620      	mov	r0, r4
 800fada:	f001 fcad 	bl	8011438 <__d2b>
 800fade:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fae2:	9004      	str	r0, [sp, #16]
 800fae4:	2d00      	cmp	r5, #0
 800fae6:	d07c      	beq.n	800fbe2 <_dtoa_r+0x1da>
 800fae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800faec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800faf0:	46b2      	mov	sl, r6
 800faf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800faf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fafa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fafe:	2200      	movs	r2, #0
 800fb00:	4b8b      	ldr	r3, [pc, #556]	; (800fd30 <_dtoa_r+0x328>)
 800fb02:	4650      	mov	r0, sl
 800fb04:	4659      	mov	r1, fp
 800fb06:	f7f0 fbbf 	bl	8000288 <__aeabi_dsub>
 800fb0a:	a381      	add	r3, pc, #516	; (adr r3, 800fd10 <_dtoa_r+0x308>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fd72 	bl	80005f8 <__aeabi_dmul>
 800fb14:	a380      	add	r3, pc, #512	; (adr r3, 800fd18 <_dtoa_r+0x310>)
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	f7f0 fbb7 	bl	800028c <__adddf3>
 800fb1e:	4606      	mov	r6, r0
 800fb20:	4628      	mov	r0, r5
 800fb22:	460f      	mov	r7, r1
 800fb24:	f7f0 fcfe 	bl	8000524 <__aeabi_i2d>
 800fb28:	a37d      	add	r3, pc, #500	; (adr r3, 800fd20 <_dtoa_r+0x318>)
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	f7f0 fd63 	bl	80005f8 <__aeabi_dmul>
 800fb32:	4602      	mov	r2, r0
 800fb34:	460b      	mov	r3, r1
 800fb36:	4630      	mov	r0, r6
 800fb38:	4639      	mov	r1, r7
 800fb3a:	f7f0 fba7 	bl	800028c <__adddf3>
 800fb3e:	4606      	mov	r6, r0
 800fb40:	460f      	mov	r7, r1
 800fb42:	f7f1 f809 	bl	8000b58 <__aeabi_d2iz>
 800fb46:	2200      	movs	r2, #0
 800fb48:	4682      	mov	sl, r0
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	4639      	mov	r1, r7
 800fb50:	f7f0 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800fb54:	b148      	cbz	r0, 800fb6a <_dtoa_r+0x162>
 800fb56:	4650      	mov	r0, sl
 800fb58:	f7f0 fce4 	bl	8000524 <__aeabi_i2d>
 800fb5c:	4632      	mov	r2, r6
 800fb5e:	463b      	mov	r3, r7
 800fb60:	f7f0 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb64:	b908      	cbnz	r0, 800fb6a <_dtoa_r+0x162>
 800fb66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb6a:	f1ba 0f16 	cmp.w	sl, #22
 800fb6e:	d859      	bhi.n	800fc24 <_dtoa_r+0x21c>
 800fb70:	4970      	ldr	r1, [pc, #448]	; (800fd34 <_dtoa_r+0x32c>)
 800fb72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fb76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb7e:	f7f0 ffcb 	bl	8000b18 <__aeabi_dcmpgt>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	d050      	beq.n	800fc28 <_dtoa_r+0x220>
 800fb86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb90:	1b5d      	subs	r5, r3, r5
 800fb92:	f1b5 0801 	subs.w	r8, r5, #1
 800fb96:	bf49      	itett	mi
 800fb98:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb9c:	2300      	movpl	r3, #0
 800fb9e:	9305      	strmi	r3, [sp, #20]
 800fba0:	f04f 0800 	movmi.w	r8, #0
 800fba4:	bf58      	it	pl
 800fba6:	9305      	strpl	r3, [sp, #20]
 800fba8:	f1ba 0f00 	cmp.w	sl, #0
 800fbac:	db3e      	blt.n	800fc2c <_dtoa_r+0x224>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	44d0      	add	r8, sl
 800fbb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fbb6:	9307      	str	r3, [sp, #28]
 800fbb8:	9b06      	ldr	r3, [sp, #24]
 800fbba:	2b09      	cmp	r3, #9
 800fbbc:	f200 8090 	bhi.w	800fce0 <_dtoa_r+0x2d8>
 800fbc0:	2b05      	cmp	r3, #5
 800fbc2:	bfc4      	itt	gt
 800fbc4:	3b04      	subgt	r3, #4
 800fbc6:	9306      	strgt	r3, [sp, #24]
 800fbc8:	9b06      	ldr	r3, [sp, #24]
 800fbca:	f1a3 0302 	sub.w	r3, r3, #2
 800fbce:	bfcc      	ite	gt
 800fbd0:	2500      	movgt	r5, #0
 800fbd2:	2501      	movle	r5, #1
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	f200 808f 	bhi.w	800fcf8 <_dtoa_r+0x2f0>
 800fbda:	e8df f003 	tbb	[pc, r3]
 800fbde:	7f7d      	.short	0x7f7d
 800fbe0:	7131      	.short	0x7131
 800fbe2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fbe6:	441d      	add	r5, r3
 800fbe8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fbec:	2820      	cmp	r0, #32
 800fbee:	dd13      	ble.n	800fc18 <_dtoa_r+0x210>
 800fbf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fbf4:	9b00      	ldr	r3, [sp, #0]
 800fbf6:	fa08 f800 	lsl.w	r8, r8, r0
 800fbfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fbfe:	fa23 f000 	lsr.w	r0, r3, r0
 800fc02:	ea48 0000 	orr.w	r0, r8, r0
 800fc06:	f7f0 fc7d 	bl	8000504 <__aeabi_ui2d>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	4682      	mov	sl, r0
 800fc0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fc12:	3d01      	subs	r5, #1
 800fc14:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc16:	e772      	b.n	800fafe <_dtoa_r+0xf6>
 800fc18:	9b00      	ldr	r3, [sp, #0]
 800fc1a:	f1c0 0020 	rsb	r0, r0, #32
 800fc1e:	fa03 f000 	lsl.w	r0, r3, r0
 800fc22:	e7f0      	b.n	800fc06 <_dtoa_r+0x1fe>
 800fc24:	2301      	movs	r3, #1
 800fc26:	e7b1      	b.n	800fb8c <_dtoa_r+0x184>
 800fc28:	900f      	str	r0, [sp, #60]	; 0x3c
 800fc2a:	e7b0      	b.n	800fb8e <_dtoa_r+0x186>
 800fc2c:	9b05      	ldr	r3, [sp, #20]
 800fc2e:	eba3 030a 	sub.w	r3, r3, sl
 800fc32:	9305      	str	r3, [sp, #20]
 800fc34:	f1ca 0300 	rsb	r3, sl, #0
 800fc38:	9307      	str	r3, [sp, #28]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	930e      	str	r3, [sp, #56]	; 0x38
 800fc3e:	e7bb      	b.n	800fbb8 <_dtoa_r+0x1b0>
 800fc40:	2301      	movs	r3, #1
 800fc42:	930a      	str	r3, [sp, #40]	; 0x28
 800fc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	dd59      	ble.n	800fcfe <_dtoa_r+0x2f6>
 800fc4a:	9302      	str	r3, [sp, #8]
 800fc4c:	4699      	mov	r9, r3
 800fc4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc50:	2200      	movs	r2, #0
 800fc52:	6072      	str	r2, [r6, #4]
 800fc54:	2204      	movs	r2, #4
 800fc56:	f102 0014 	add.w	r0, r2, #20
 800fc5a:	4298      	cmp	r0, r3
 800fc5c:	6871      	ldr	r1, [r6, #4]
 800fc5e:	d953      	bls.n	800fd08 <_dtoa_r+0x300>
 800fc60:	4620      	mov	r0, r4
 800fc62:	f001 f8a7 	bl	8010db4 <_Balloc>
 800fc66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc68:	6030      	str	r0, [r6, #0]
 800fc6a:	f1b9 0f0e 	cmp.w	r9, #14
 800fc6e:	f8d3 b000 	ldr.w	fp, [r3]
 800fc72:	f200 80e6 	bhi.w	800fe42 <_dtoa_r+0x43a>
 800fc76:	2d00      	cmp	r5, #0
 800fc78:	f000 80e3 	beq.w	800fe42 <_dtoa_r+0x43a>
 800fc7c:	ed9d 7b00 	vldr	d7, [sp]
 800fc80:	f1ba 0f00 	cmp.w	sl, #0
 800fc84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fc88:	dd74      	ble.n	800fd74 <_dtoa_r+0x36c>
 800fc8a:	4a2a      	ldr	r2, [pc, #168]	; (800fd34 <_dtoa_r+0x32c>)
 800fc8c:	f00a 030f 	and.w	r3, sl, #15
 800fc90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fc94:	ed93 7b00 	vldr	d7, [r3]
 800fc98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fc9c:	06f0      	lsls	r0, r6, #27
 800fc9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fca2:	d565      	bpl.n	800fd70 <_dtoa_r+0x368>
 800fca4:	4b24      	ldr	r3, [pc, #144]	; (800fd38 <_dtoa_r+0x330>)
 800fca6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fcaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcae:	f7f0 fdcd 	bl	800084c <__aeabi_ddiv>
 800fcb2:	e9cd 0100 	strd	r0, r1, [sp]
 800fcb6:	f006 060f 	and.w	r6, r6, #15
 800fcba:	2503      	movs	r5, #3
 800fcbc:	4f1e      	ldr	r7, [pc, #120]	; (800fd38 <_dtoa_r+0x330>)
 800fcbe:	e04c      	b.n	800fd5a <_dtoa_r+0x352>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	930a      	str	r3, [sp, #40]	; 0x28
 800fcc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcc6:	4453      	add	r3, sl
 800fcc8:	f103 0901 	add.w	r9, r3, #1
 800fccc:	9302      	str	r3, [sp, #8]
 800fcce:	464b      	mov	r3, r9
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	bfb8      	it	lt
 800fcd4:	2301      	movlt	r3, #1
 800fcd6:	e7ba      	b.n	800fc4e <_dtoa_r+0x246>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	e7b2      	b.n	800fc42 <_dtoa_r+0x23a>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	e7f0      	b.n	800fcc2 <_dtoa_r+0x2ba>
 800fce0:	2501      	movs	r5, #1
 800fce2:	2300      	movs	r3, #0
 800fce4:	9306      	str	r3, [sp, #24]
 800fce6:	950a      	str	r5, [sp, #40]	; 0x28
 800fce8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcec:	9302      	str	r3, [sp, #8]
 800fcee:	4699      	mov	r9, r3
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	2312      	movs	r3, #18
 800fcf4:	920b      	str	r2, [sp, #44]	; 0x2c
 800fcf6:	e7aa      	b.n	800fc4e <_dtoa_r+0x246>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	930a      	str	r3, [sp, #40]	; 0x28
 800fcfc:	e7f4      	b.n	800fce8 <_dtoa_r+0x2e0>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	9302      	str	r3, [sp, #8]
 800fd02:	4699      	mov	r9, r3
 800fd04:	461a      	mov	r2, r3
 800fd06:	e7f5      	b.n	800fcf4 <_dtoa_r+0x2ec>
 800fd08:	3101      	adds	r1, #1
 800fd0a:	6071      	str	r1, [r6, #4]
 800fd0c:	0052      	lsls	r2, r2, #1
 800fd0e:	e7a2      	b.n	800fc56 <_dtoa_r+0x24e>
 800fd10:	636f4361 	.word	0x636f4361
 800fd14:	3fd287a7 	.word	0x3fd287a7
 800fd18:	8b60c8b3 	.word	0x8b60c8b3
 800fd1c:	3fc68a28 	.word	0x3fc68a28
 800fd20:	509f79fb 	.word	0x509f79fb
 800fd24:	3fd34413 	.word	0x3fd34413
 800fd28:	7ff00000 	.word	0x7ff00000
 800fd2c:	08012895 	.word	0x08012895
 800fd30:	3ff80000 	.word	0x3ff80000
 800fd34:	080129b8 	.word	0x080129b8
 800fd38:	08012990 	.word	0x08012990
 800fd3c:	08012919 	.word	0x08012919
 800fd40:	07f1      	lsls	r1, r6, #31
 800fd42:	d508      	bpl.n	800fd56 <_dtoa_r+0x34e>
 800fd44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd4c:	f7f0 fc54 	bl	80005f8 <__aeabi_dmul>
 800fd50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd54:	3501      	adds	r5, #1
 800fd56:	1076      	asrs	r6, r6, #1
 800fd58:	3708      	adds	r7, #8
 800fd5a:	2e00      	cmp	r6, #0
 800fd5c:	d1f0      	bne.n	800fd40 <_dtoa_r+0x338>
 800fd5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd66:	f7f0 fd71 	bl	800084c <__aeabi_ddiv>
 800fd6a:	e9cd 0100 	strd	r0, r1, [sp]
 800fd6e:	e01a      	b.n	800fda6 <_dtoa_r+0x39e>
 800fd70:	2502      	movs	r5, #2
 800fd72:	e7a3      	b.n	800fcbc <_dtoa_r+0x2b4>
 800fd74:	f000 80a0 	beq.w	800feb8 <_dtoa_r+0x4b0>
 800fd78:	f1ca 0600 	rsb	r6, sl, #0
 800fd7c:	4b9f      	ldr	r3, [pc, #636]	; (800fffc <_dtoa_r+0x5f4>)
 800fd7e:	4fa0      	ldr	r7, [pc, #640]	; (8010000 <_dtoa_r+0x5f8>)
 800fd80:	f006 020f 	and.w	r2, r6, #15
 800fd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fd90:	f7f0 fc32 	bl	80005f8 <__aeabi_dmul>
 800fd94:	e9cd 0100 	strd	r0, r1, [sp]
 800fd98:	1136      	asrs	r6, r6, #4
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	2502      	movs	r5, #2
 800fd9e:	2e00      	cmp	r6, #0
 800fda0:	d17f      	bne.n	800fea2 <_dtoa_r+0x49a>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1e1      	bne.n	800fd6a <_dtoa_r+0x362>
 800fda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f000 8087 	beq.w	800febc <_dtoa_r+0x4b4>
 800fdae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	4b93      	ldr	r3, [pc, #588]	; (8010004 <_dtoa_r+0x5fc>)
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	4639      	mov	r1, r7
 800fdba:	f7f0 fe8f 	bl	8000adc <__aeabi_dcmplt>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d07c      	beq.n	800febc <_dtoa_r+0x4b4>
 800fdc2:	f1b9 0f00 	cmp.w	r9, #0
 800fdc6:	d079      	beq.n	800febc <_dtoa_r+0x4b4>
 800fdc8:	9b02      	ldr	r3, [sp, #8]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	dd35      	ble.n	800fe3a <_dtoa_r+0x432>
 800fdce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fdd2:	9308      	str	r3, [sp, #32]
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	4b8b      	ldr	r3, [pc, #556]	; (8010008 <_dtoa_r+0x600>)
 800fdda:	4630      	mov	r0, r6
 800fddc:	f7f0 fc0c 	bl	80005f8 <__aeabi_dmul>
 800fde0:	e9cd 0100 	strd	r0, r1, [sp]
 800fde4:	9f02      	ldr	r7, [sp, #8]
 800fde6:	3501      	adds	r5, #1
 800fde8:	4628      	mov	r0, r5
 800fdea:	f7f0 fb9b 	bl	8000524 <__aeabi_i2d>
 800fdee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdf2:	f7f0 fc01 	bl	80005f8 <__aeabi_dmul>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4b84      	ldr	r3, [pc, #528]	; (801000c <_dtoa_r+0x604>)
 800fdfa:	f7f0 fa47 	bl	800028c <__adddf3>
 800fdfe:	4605      	mov	r5, r0
 800fe00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fe04:	2f00      	cmp	r7, #0
 800fe06:	d15d      	bne.n	800fec4 <_dtoa_r+0x4bc>
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4b81      	ldr	r3, [pc, #516]	; (8010010 <_dtoa_r+0x608>)
 800fe0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe10:	f7f0 fa3a 	bl	8000288 <__aeabi_dsub>
 800fe14:	462a      	mov	r2, r5
 800fe16:	4633      	mov	r3, r6
 800fe18:	e9cd 0100 	strd	r0, r1, [sp]
 800fe1c:	f7f0 fe7c 	bl	8000b18 <__aeabi_dcmpgt>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	f040 8288 	bne.w	8010336 <_dtoa_r+0x92e>
 800fe26:	462a      	mov	r2, r5
 800fe28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fe2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe30:	f7f0 fe54 	bl	8000adc <__aeabi_dcmplt>
 800fe34:	2800      	cmp	r0, #0
 800fe36:	f040 827c 	bne.w	8010332 <_dtoa_r+0x92a>
 800fe3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fe3e:	e9cd 2300 	strd	r2, r3, [sp]
 800fe42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f2c0 8150 	blt.w	80100ea <_dtoa_r+0x6e2>
 800fe4a:	f1ba 0f0e 	cmp.w	sl, #14
 800fe4e:	f300 814c 	bgt.w	80100ea <_dtoa_r+0x6e2>
 800fe52:	4b6a      	ldr	r3, [pc, #424]	; (800fffc <_dtoa_r+0x5f4>)
 800fe54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe58:	ed93 7b00 	vldr	d7, [r3]
 800fe5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe64:	f280 80d8 	bge.w	8010018 <_dtoa_r+0x610>
 800fe68:	f1b9 0f00 	cmp.w	r9, #0
 800fe6c:	f300 80d4 	bgt.w	8010018 <_dtoa_r+0x610>
 800fe70:	f040 825e 	bne.w	8010330 <_dtoa_r+0x928>
 800fe74:	2200      	movs	r2, #0
 800fe76:	4b66      	ldr	r3, [pc, #408]	; (8010010 <_dtoa_r+0x608>)
 800fe78:	ec51 0b17 	vmov	r0, r1, d7
 800fe7c:	f7f0 fbbc 	bl	80005f8 <__aeabi_dmul>
 800fe80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe84:	f7f0 fe3e 	bl	8000b04 <__aeabi_dcmpge>
 800fe88:	464f      	mov	r7, r9
 800fe8a:	464e      	mov	r6, r9
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	f040 8234 	bne.w	80102fa <_dtoa_r+0x8f2>
 800fe92:	2331      	movs	r3, #49	; 0x31
 800fe94:	f10b 0501 	add.w	r5, fp, #1
 800fe98:	f88b 3000 	strb.w	r3, [fp]
 800fe9c:	f10a 0a01 	add.w	sl, sl, #1
 800fea0:	e22f      	b.n	8010302 <_dtoa_r+0x8fa>
 800fea2:	07f2      	lsls	r2, r6, #31
 800fea4:	d505      	bpl.n	800feb2 <_dtoa_r+0x4aa>
 800fea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feaa:	f7f0 fba5 	bl	80005f8 <__aeabi_dmul>
 800feae:	3501      	adds	r5, #1
 800feb0:	2301      	movs	r3, #1
 800feb2:	1076      	asrs	r6, r6, #1
 800feb4:	3708      	adds	r7, #8
 800feb6:	e772      	b.n	800fd9e <_dtoa_r+0x396>
 800feb8:	2502      	movs	r5, #2
 800feba:	e774      	b.n	800fda6 <_dtoa_r+0x39e>
 800febc:	f8cd a020 	str.w	sl, [sp, #32]
 800fec0:	464f      	mov	r7, r9
 800fec2:	e791      	b.n	800fde8 <_dtoa_r+0x3e0>
 800fec4:	4b4d      	ldr	r3, [pc, #308]	; (800fffc <_dtoa_r+0x5f4>)
 800fec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800feca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d047      	beq.n	800ff64 <_dtoa_r+0x55c>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	2000      	movs	r0, #0
 800feda:	494e      	ldr	r1, [pc, #312]	; (8010014 <_dtoa_r+0x60c>)
 800fedc:	f7f0 fcb6 	bl	800084c <__aeabi_ddiv>
 800fee0:	462a      	mov	r2, r5
 800fee2:	4633      	mov	r3, r6
 800fee4:	f7f0 f9d0 	bl	8000288 <__aeabi_dsub>
 800fee8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800feec:	465d      	mov	r5, fp
 800feee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fef2:	f7f0 fe31 	bl	8000b58 <__aeabi_d2iz>
 800fef6:	4606      	mov	r6, r0
 800fef8:	f7f0 fb14 	bl	8000524 <__aeabi_i2d>
 800fefc:	4602      	mov	r2, r0
 800fefe:	460b      	mov	r3, r1
 800ff00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff04:	f7f0 f9c0 	bl	8000288 <__aeabi_dsub>
 800ff08:	3630      	adds	r6, #48	; 0x30
 800ff0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ff0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff12:	e9cd 0100 	strd	r0, r1, [sp]
 800ff16:	f7f0 fde1 	bl	8000adc <__aeabi_dcmplt>
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d163      	bne.n	800ffe6 <_dtoa_r+0x5de>
 800ff1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff22:	2000      	movs	r0, #0
 800ff24:	4937      	ldr	r1, [pc, #220]	; (8010004 <_dtoa_r+0x5fc>)
 800ff26:	f7f0 f9af 	bl	8000288 <__aeabi_dsub>
 800ff2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff2e:	f7f0 fdd5 	bl	8000adc <__aeabi_dcmplt>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	f040 80b7 	bne.w	80100a6 <_dtoa_r+0x69e>
 800ff38:	eba5 030b 	sub.w	r3, r5, fp
 800ff3c:	429f      	cmp	r7, r3
 800ff3e:	f77f af7c 	ble.w	800fe3a <_dtoa_r+0x432>
 800ff42:	2200      	movs	r2, #0
 800ff44:	4b30      	ldr	r3, [pc, #192]	; (8010008 <_dtoa_r+0x600>)
 800ff46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff4a:	f7f0 fb55 	bl	80005f8 <__aeabi_dmul>
 800ff4e:	2200      	movs	r2, #0
 800ff50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff54:	4b2c      	ldr	r3, [pc, #176]	; (8010008 <_dtoa_r+0x600>)
 800ff56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff5a:	f7f0 fb4d 	bl	80005f8 <__aeabi_dmul>
 800ff5e:	e9cd 0100 	strd	r0, r1, [sp]
 800ff62:	e7c4      	b.n	800feee <_dtoa_r+0x4e6>
 800ff64:	462a      	mov	r2, r5
 800ff66:	4633      	mov	r3, r6
 800ff68:	f7f0 fb46 	bl	80005f8 <__aeabi_dmul>
 800ff6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff70:	eb0b 0507 	add.w	r5, fp, r7
 800ff74:	465e      	mov	r6, fp
 800ff76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff7a:	f7f0 fded 	bl	8000b58 <__aeabi_d2iz>
 800ff7e:	4607      	mov	r7, r0
 800ff80:	f7f0 fad0 	bl	8000524 <__aeabi_i2d>
 800ff84:	3730      	adds	r7, #48	; 0x30
 800ff86:	4602      	mov	r2, r0
 800ff88:	460b      	mov	r3, r1
 800ff8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff8e:	f7f0 f97b 	bl	8000288 <__aeabi_dsub>
 800ff92:	f806 7b01 	strb.w	r7, [r6], #1
 800ff96:	42ae      	cmp	r6, r5
 800ff98:	e9cd 0100 	strd	r0, r1, [sp]
 800ff9c:	f04f 0200 	mov.w	r2, #0
 800ffa0:	d126      	bne.n	800fff0 <_dtoa_r+0x5e8>
 800ffa2:	4b1c      	ldr	r3, [pc, #112]	; (8010014 <_dtoa_r+0x60c>)
 800ffa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ffa8:	f7f0 f970 	bl	800028c <__adddf3>
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffb4:	f7f0 fdb0 	bl	8000b18 <__aeabi_dcmpgt>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d174      	bne.n	80100a6 <_dtoa_r+0x69e>
 800ffbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	4914      	ldr	r1, [pc, #80]	; (8010014 <_dtoa_r+0x60c>)
 800ffc4:	f7f0 f960 	bl	8000288 <__aeabi_dsub>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd0:	f7f0 fd84 	bl	8000adc <__aeabi_dcmplt>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	f43f af30 	beq.w	800fe3a <_dtoa_r+0x432>
 800ffda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffde:	2b30      	cmp	r3, #48	; 0x30
 800ffe0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ffe4:	d002      	beq.n	800ffec <_dtoa_r+0x5e4>
 800ffe6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ffea:	e04a      	b.n	8010082 <_dtoa_r+0x67a>
 800ffec:	4615      	mov	r5, r2
 800ffee:	e7f4      	b.n	800ffda <_dtoa_r+0x5d2>
 800fff0:	4b05      	ldr	r3, [pc, #20]	; (8010008 <_dtoa_r+0x600>)
 800fff2:	f7f0 fb01 	bl	80005f8 <__aeabi_dmul>
 800fff6:	e9cd 0100 	strd	r0, r1, [sp]
 800fffa:	e7bc      	b.n	800ff76 <_dtoa_r+0x56e>
 800fffc:	080129b8 	.word	0x080129b8
 8010000:	08012990 	.word	0x08012990
 8010004:	3ff00000 	.word	0x3ff00000
 8010008:	40240000 	.word	0x40240000
 801000c:	401c0000 	.word	0x401c0000
 8010010:	40140000 	.word	0x40140000
 8010014:	3fe00000 	.word	0x3fe00000
 8010018:	e9dd 6700 	ldrd	r6, r7, [sp]
 801001c:	465d      	mov	r5, fp
 801001e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010022:	4630      	mov	r0, r6
 8010024:	4639      	mov	r1, r7
 8010026:	f7f0 fc11 	bl	800084c <__aeabi_ddiv>
 801002a:	f7f0 fd95 	bl	8000b58 <__aeabi_d2iz>
 801002e:	4680      	mov	r8, r0
 8010030:	f7f0 fa78 	bl	8000524 <__aeabi_i2d>
 8010034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010038:	f7f0 fade 	bl	80005f8 <__aeabi_dmul>
 801003c:	4602      	mov	r2, r0
 801003e:	460b      	mov	r3, r1
 8010040:	4630      	mov	r0, r6
 8010042:	4639      	mov	r1, r7
 8010044:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010048:	f7f0 f91e 	bl	8000288 <__aeabi_dsub>
 801004c:	f805 6b01 	strb.w	r6, [r5], #1
 8010050:	eba5 060b 	sub.w	r6, r5, fp
 8010054:	45b1      	cmp	r9, r6
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	d139      	bne.n	80100d0 <_dtoa_r+0x6c8>
 801005c:	f7f0 f916 	bl	800028c <__adddf3>
 8010060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010064:	4606      	mov	r6, r0
 8010066:	460f      	mov	r7, r1
 8010068:	f7f0 fd56 	bl	8000b18 <__aeabi_dcmpgt>
 801006c:	b9c8      	cbnz	r0, 80100a2 <_dtoa_r+0x69a>
 801006e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010072:	4630      	mov	r0, r6
 8010074:	4639      	mov	r1, r7
 8010076:	f7f0 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 801007a:	b110      	cbz	r0, 8010082 <_dtoa_r+0x67a>
 801007c:	f018 0f01 	tst.w	r8, #1
 8010080:	d10f      	bne.n	80100a2 <_dtoa_r+0x69a>
 8010082:	9904      	ldr	r1, [sp, #16]
 8010084:	4620      	mov	r0, r4
 8010086:	f000 fec9 	bl	8010e1c <_Bfree>
 801008a:	2300      	movs	r3, #0
 801008c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801008e:	702b      	strb	r3, [r5, #0]
 8010090:	f10a 0301 	add.w	r3, sl, #1
 8010094:	6013      	str	r3, [r2, #0]
 8010096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010098:	2b00      	cmp	r3, #0
 801009a:	f000 8241 	beq.w	8010520 <_dtoa_r+0xb18>
 801009e:	601d      	str	r5, [r3, #0]
 80100a0:	e23e      	b.n	8010520 <_dtoa_r+0xb18>
 80100a2:	f8cd a020 	str.w	sl, [sp, #32]
 80100a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80100aa:	2a39      	cmp	r2, #57	; 0x39
 80100ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80100b0:	d108      	bne.n	80100c4 <_dtoa_r+0x6bc>
 80100b2:	459b      	cmp	fp, r3
 80100b4:	d10a      	bne.n	80100cc <_dtoa_r+0x6c4>
 80100b6:	9b08      	ldr	r3, [sp, #32]
 80100b8:	3301      	adds	r3, #1
 80100ba:	9308      	str	r3, [sp, #32]
 80100bc:	2330      	movs	r3, #48	; 0x30
 80100be:	f88b 3000 	strb.w	r3, [fp]
 80100c2:	465b      	mov	r3, fp
 80100c4:	781a      	ldrb	r2, [r3, #0]
 80100c6:	3201      	adds	r2, #1
 80100c8:	701a      	strb	r2, [r3, #0]
 80100ca:	e78c      	b.n	800ffe6 <_dtoa_r+0x5de>
 80100cc:	461d      	mov	r5, r3
 80100ce:	e7ea      	b.n	80100a6 <_dtoa_r+0x69e>
 80100d0:	2200      	movs	r2, #0
 80100d2:	4b9b      	ldr	r3, [pc, #620]	; (8010340 <_dtoa_r+0x938>)
 80100d4:	f7f0 fa90 	bl	80005f8 <__aeabi_dmul>
 80100d8:	2200      	movs	r2, #0
 80100da:	2300      	movs	r3, #0
 80100dc:	4606      	mov	r6, r0
 80100de:	460f      	mov	r7, r1
 80100e0:	f7f0 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d09a      	beq.n	801001e <_dtoa_r+0x616>
 80100e8:	e7cb      	b.n	8010082 <_dtoa_r+0x67a>
 80100ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100ec:	2a00      	cmp	r2, #0
 80100ee:	f000 808b 	beq.w	8010208 <_dtoa_r+0x800>
 80100f2:	9a06      	ldr	r2, [sp, #24]
 80100f4:	2a01      	cmp	r2, #1
 80100f6:	dc6e      	bgt.n	80101d6 <_dtoa_r+0x7ce>
 80100f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80100fa:	2a00      	cmp	r2, #0
 80100fc:	d067      	beq.n	80101ce <_dtoa_r+0x7c6>
 80100fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010102:	9f07      	ldr	r7, [sp, #28]
 8010104:	9d05      	ldr	r5, [sp, #20]
 8010106:	9a05      	ldr	r2, [sp, #20]
 8010108:	2101      	movs	r1, #1
 801010a:	441a      	add	r2, r3
 801010c:	4620      	mov	r0, r4
 801010e:	9205      	str	r2, [sp, #20]
 8010110:	4498      	add	r8, r3
 8010112:	f000 ff61 	bl	8010fd8 <__i2b>
 8010116:	4606      	mov	r6, r0
 8010118:	2d00      	cmp	r5, #0
 801011a:	dd0c      	ble.n	8010136 <_dtoa_r+0x72e>
 801011c:	f1b8 0f00 	cmp.w	r8, #0
 8010120:	dd09      	ble.n	8010136 <_dtoa_r+0x72e>
 8010122:	4545      	cmp	r5, r8
 8010124:	9a05      	ldr	r2, [sp, #20]
 8010126:	462b      	mov	r3, r5
 8010128:	bfa8      	it	ge
 801012a:	4643      	movge	r3, r8
 801012c:	1ad2      	subs	r2, r2, r3
 801012e:	9205      	str	r2, [sp, #20]
 8010130:	1aed      	subs	r5, r5, r3
 8010132:	eba8 0803 	sub.w	r8, r8, r3
 8010136:	9b07      	ldr	r3, [sp, #28]
 8010138:	b1eb      	cbz	r3, 8010176 <_dtoa_r+0x76e>
 801013a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801013c:	2b00      	cmp	r3, #0
 801013e:	d067      	beq.n	8010210 <_dtoa_r+0x808>
 8010140:	b18f      	cbz	r7, 8010166 <_dtoa_r+0x75e>
 8010142:	4631      	mov	r1, r6
 8010144:	463a      	mov	r2, r7
 8010146:	4620      	mov	r0, r4
 8010148:	f000 ffe6 	bl	8011118 <__pow5mult>
 801014c:	9a04      	ldr	r2, [sp, #16]
 801014e:	4601      	mov	r1, r0
 8010150:	4606      	mov	r6, r0
 8010152:	4620      	mov	r0, r4
 8010154:	f000 ff49 	bl	8010fea <__multiply>
 8010158:	9904      	ldr	r1, [sp, #16]
 801015a:	9008      	str	r0, [sp, #32]
 801015c:	4620      	mov	r0, r4
 801015e:	f000 fe5d 	bl	8010e1c <_Bfree>
 8010162:	9b08      	ldr	r3, [sp, #32]
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	9b07      	ldr	r3, [sp, #28]
 8010168:	1bda      	subs	r2, r3, r7
 801016a:	d004      	beq.n	8010176 <_dtoa_r+0x76e>
 801016c:	9904      	ldr	r1, [sp, #16]
 801016e:	4620      	mov	r0, r4
 8010170:	f000 ffd2 	bl	8011118 <__pow5mult>
 8010174:	9004      	str	r0, [sp, #16]
 8010176:	2101      	movs	r1, #1
 8010178:	4620      	mov	r0, r4
 801017a:	f000 ff2d 	bl	8010fd8 <__i2b>
 801017e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010180:	4607      	mov	r7, r0
 8010182:	2b00      	cmp	r3, #0
 8010184:	f000 81d0 	beq.w	8010528 <_dtoa_r+0xb20>
 8010188:	461a      	mov	r2, r3
 801018a:	4601      	mov	r1, r0
 801018c:	4620      	mov	r0, r4
 801018e:	f000 ffc3 	bl	8011118 <__pow5mult>
 8010192:	9b06      	ldr	r3, [sp, #24]
 8010194:	2b01      	cmp	r3, #1
 8010196:	4607      	mov	r7, r0
 8010198:	dc40      	bgt.n	801021c <_dtoa_r+0x814>
 801019a:	9b00      	ldr	r3, [sp, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d139      	bne.n	8010214 <_dtoa_r+0x80c>
 80101a0:	9b01      	ldr	r3, [sp, #4]
 80101a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d136      	bne.n	8010218 <_dtoa_r+0x810>
 80101aa:	9b01      	ldr	r3, [sp, #4]
 80101ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101b0:	0d1b      	lsrs	r3, r3, #20
 80101b2:	051b      	lsls	r3, r3, #20
 80101b4:	b12b      	cbz	r3, 80101c2 <_dtoa_r+0x7ba>
 80101b6:	9b05      	ldr	r3, [sp, #20]
 80101b8:	3301      	adds	r3, #1
 80101ba:	9305      	str	r3, [sp, #20]
 80101bc:	f108 0801 	add.w	r8, r8, #1
 80101c0:	2301      	movs	r3, #1
 80101c2:	9307      	str	r3, [sp, #28]
 80101c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d12a      	bne.n	8010220 <_dtoa_r+0x818>
 80101ca:	2001      	movs	r0, #1
 80101cc:	e030      	b.n	8010230 <_dtoa_r+0x828>
 80101ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80101d4:	e795      	b.n	8010102 <_dtoa_r+0x6fa>
 80101d6:	9b07      	ldr	r3, [sp, #28]
 80101d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80101dc:	42bb      	cmp	r3, r7
 80101de:	bfbf      	itttt	lt
 80101e0:	9b07      	ldrlt	r3, [sp, #28]
 80101e2:	9707      	strlt	r7, [sp, #28]
 80101e4:	1afa      	sublt	r2, r7, r3
 80101e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80101e8:	bfbb      	ittet	lt
 80101ea:	189b      	addlt	r3, r3, r2
 80101ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80101ee:	1bdf      	subge	r7, r3, r7
 80101f0:	2700      	movlt	r7, #0
 80101f2:	f1b9 0f00 	cmp.w	r9, #0
 80101f6:	bfb5      	itete	lt
 80101f8:	9b05      	ldrlt	r3, [sp, #20]
 80101fa:	9d05      	ldrge	r5, [sp, #20]
 80101fc:	eba3 0509 	sublt.w	r5, r3, r9
 8010200:	464b      	movge	r3, r9
 8010202:	bfb8      	it	lt
 8010204:	2300      	movlt	r3, #0
 8010206:	e77e      	b.n	8010106 <_dtoa_r+0x6fe>
 8010208:	9f07      	ldr	r7, [sp, #28]
 801020a:	9d05      	ldr	r5, [sp, #20]
 801020c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801020e:	e783      	b.n	8010118 <_dtoa_r+0x710>
 8010210:	9a07      	ldr	r2, [sp, #28]
 8010212:	e7ab      	b.n	801016c <_dtoa_r+0x764>
 8010214:	2300      	movs	r3, #0
 8010216:	e7d4      	b.n	80101c2 <_dtoa_r+0x7ba>
 8010218:	9b00      	ldr	r3, [sp, #0]
 801021a:	e7d2      	b.n	80101c2 <_dtoa_r+0x7ba>
 801021c:	2300      	movs	r3, #0
 801021e:	9307      	str	r3, [sp, #28]
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010226:	6918      	ldr	r0, [r3, #16]
 8010228:	f000 fe88 	bl	8010f3c <__hi0bits>
 801022c:	f1c0 0020 	rsb	r0, r0, #32
 8010230:	4440      	add	r0, r8
 8010232:	f010 001f 	ands.w	r0, r0, #31
 8010236:	d047      	beq.n	80102c8 <_dtoa_r+0x8c0>
 8010238:	f1c0 0320 	rsb	r3, r0, #32
 801023c:	2b04      	cmp	r3, #4
 801023e:	dd3b      	ble.n	80102b8 <_dtoa_r+0x8b0>
 8010240:	9b05      	ldr	r3, [sp, #20]
 8010242:	f1c0 001c 	rsb	r0, r0, #28
 8010246:	4403      	add	r3, r0
 8010248:	9305      	str	r3, [sp, #20]
 801024a:	4405      	add	r5, r0
 801024c:	4480      	add	r8, r0
 801024e:	9b05      	ldr	r3, [sp, #20]
 8010250:	2b00      	cmp	r3, #0
 8010252:	dd05      	ble.n	8010260 <_dtoa_r+0x858>
 8010254:	461a      	mov	r2, r3
 8010256:	9904      	ldr	r1, [sp, #16]
 8010258:	4620      	mov	r0, r4
 801025a:	f000 ffab 	bl	80111b4 <__lshift>
 801025e:	9004      	str	r0, [sp, #16]
 8010260:	f1b8 0f00 	cmp.w	r8, #0
 8010264:	dd05      	ble.n	8010272 <_dtoa_r+0x86a>
 8010266:	4639      	mov	r1, r7
 8010268:	4642      	mov	r2, r8
 801026a:	4620      	mov	r0, r4
 801026c:	f000 ffa2 	bl	80111b4 <__lshift>
 8010270:	4607      	mov	r7, r0
 8010272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010274:	b353      	cbz	r3, 80102cc <_dtoa_r+0x8c4>
 8010276:	4639      	mov	r1, r7
 8010278:	9804      	ldr	r0, [sp, #16]
 801027a:	f000 ffef 	bl	801125c <__mcmp>
 801027e:	2800      	cmp	r0, #0
 8010280:	da24      	bge.n	80102cc <_dtoa_r+0x8c4>
 8010282:	2300      	movs	r3, #0
 8010284:	220a      	movs	r2, #10
 8010286:	9904      	ldr	r1, [sp, #16]
 8010288:	4620      	mov	r0, r4
 801028a:	f000 fdde 	bl	8010e4a <__multadd>
 801028e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010290:	9004      	str	r0, [sp, #16]
 8010292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 814d 	beq.w	8010536 <_dtoa_r+0xb2e>
 801029c:	2300      	movs	r3, #0
 801029e:	4631      	mov	r1, r6
 80102a0:	220a      	movs	r2, #10
 80102a2:	4620      	mov	r0, r4
 80102a4:	f000 fdd1 	bl	8010e4a <__multadd>
 80102a8:	9b02      	ldr	r3, [sp, #8]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	4606      	mov	r6, r0
 80102ae:	dc4f      	bgt.n	8010350 <_dtoa_r+0x948>
 80102b0:	9b06      	ldr	r3, [sp, #24]
 80102b2:	2b02      	cmp	r3, #2
 80102b4:	dd4c      	ble.n	8010350 <_dtoa_r+0x948>
 80102b6:	e011      	b.n	80102dc <_dtoa_r+0x8d4>
 80102b8:	d0c9      	beq.n	801024e <_dtoa_r+0x846>
 80102ba:	9a05      	ldr	r2, [sp, #20]
 80102bc:	331c      	adds	r3, #28
 80102be:	441a      	add	r2, r3
 80102c0:	9205      	str	r2, [sp, #20]
 80102c2:	441d      	add	r5, r3
 80102c4:	4498      	add	r8, r3
 80102c6:	e7c2      	b.n	801024e <_dtoa_r+0x846>
 80102c8:	4603      	mov	r3, r0
 80102ca:	e7f6      	b.n	80102ba <_dtoa_r+0x8b2>
 80102cc:	f1b9 0f00 	cmp.w	r9, #0
 80102d0:	dc38      	bgt.n	8010344 <_dtoa_r+0x93c>
 80102d2:	9b06      	ldr	r3, [sp, #24]
 80102d4:	2b02      	cmp	r3, #2
 80102d6:	dd35      	ble.n	8010344 <_dtoa_r+0x93c>
 80102d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80102dc:	9b02      	ldr	r3, [sp, #8]
 80102de:	b963      	cbnz	r3, 80102fa <_dtoa_r+0x8f2>
 80102e0:	4639      	mov	r1, r7
 80102e2:	2205      	movs	r2, #5
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 fdb0 	bl	8010e4a <__multadd>
 80102ea:	4601      	mov	r1, r0
 80102ec:	4607      	mov	r7, r0
 80102ee:	9804      	ldr	r0, [sp, #16]
 80102f0:	f000 ffb4 	bl	801125c <__mcmp>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	f73f adcc 	bgt.w	800fe92 <_dtoa_r+0x48a>
 80102fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102fc:	465d      	mov	r5, fp
 80102fe:	ea6f 0a03 	mvn.w	sl, r3
 8010302:	f04f 0900 	mov.w	r9, #0
 8010306:	4639      	mov	r1, r7
 8010308:	4620      	mov	r0, r4
 801030a:	f000 fd87 	bl	8010e1c <_Bfree>
 801030e:	2e00      	cmp	r6, #0
 8010310:	f43f aeb7 	beq.w	8010082 <_dtoa_r+0x67a>
 8010314:	f1b9 0f00 	cmp.w	r9, #0
 8010318:	d005      	beq.n	8010326 <_dtoa_r+0x91e>
 801031a:	45b1      	cmp	r9, r6
 801031c:	d003      	beq.n	8010326 <_dtoa_r+0x91e>
 801031e:	4649      	mov	r1, r9
 8010320:	4620      	mov	r0, r4
 8010322:	f000 fd7b 	bl	8010e1c <_Bfree>
 8010326:	4631      	mov	r1, r6
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fd77 	bl	8010e1c <_Bfree>
 801032e:	e6a8      	b.n	8010082 <_dtoa_r+0x67a>
 8010330:	2700      	movs	r7, #0
 8010332:	463e      	mov	r6, r7
 8010334:	e7e1      	b.n	80102fa <_dtoa_r+0x8f2>
 8010336:	f8dd a020 	ldr.w	sl, [sp, #32]
 801033a:	463e      	mov	r6, r7
 801033c:	e5a9      	b.n	800fe92 <_dtoa_r+0x48a>
 801033e:	bf00      	nop
 8010340:	40240000 	.word	0x40240000
 8010344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010346:	f8cd 9008 	str.w	r9, [sp, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 80fa 	beq.w	8010544 <_dtoa_r+0xb3c>
 8010350:	2d00      	cmp	r5, #0
 8010352:	dd05      	ble.n	8010360 <_dtoa_r+0x958>
 8010354:	4631      	mov	r1, r6
 8010356:	462a      	mov	r2, r5
 8010358:	4620      	mov	r0, r4
 801035a:	f000 ff2b 	bl	80111b4 <__lshift>
 801035e:	4606      	mov	r6, r0
 8010360:	9b07      	ldr	r3, [sp, #28]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d04c      	beq.n	8010400 <_dtoa_r+0x9f8>
 8010366:	6871      	ldr	r1, [r6, #4]
 8010368:	4620      	mov	r0, r4
 801036a:	f000 fd23 	bl	8010db4 <_Balloc>
 801036e:	6932      	ldr	r2, [r6, #16]
 8010370:	3202      	adds	r2, #2
 8010372:	4605      	mov	r5, r0
 8010374:	0092      	lsls	r2, r2, #2
 8010376:	f106 010c 	add.w	r1, r6, #12
 801037a:	300c      	adds	r0, #12
 801037c:	f7fd fd76 	bl	800de6c <memcpy>
 8010380:	2201      	movs	r2, #1
 8010382:	4629      	mov	r1, r5
 8010384:	4620      	mov	r0, r4
 8010386:	f000 ff15 	bl	80111b4 <__lshift>
 801038a:	9b00      	ldr	r3, [sp, #0]
 801038c:	f8cd b014 	str.w	fp, [sp, #20]
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	46b1      	mov	r9, r6
 8010396:	9307      	str	r3, [sp, #28]
 8010398:	4606      	mov	r6, r0
 801039a:	4639      	mov	r1, r7
 801039c:	9804      	ldr	r0, [sp, #16]
 801039e:	f7ff faa5 	bl	800f8ec <quorem>
 80103a2:	4649      	mov	r1, r9
 80103a4:	4605      	mov	r5, r0
 80103a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80103aa:	9804      	ldr	r0, [sp, #16]
 80103ac:	f000 ff56 	bl	801125c <__mcmp>
 80103b0:	4632      	mov	r2, r6
 80103b2:	9000      	str	r0, [sp, #0]
 80103b4:	4639      	mov	r1, r7
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 ff6a 	bl	8011290 <__mdiff>
 80103bc:	68c3      	ldr	r3, [r0, #12]
 80103be:	4602      	mov	r2, r0
 80103c0:	bb03      	cbnz	r3, 8010404 <_dtoa_r+0x9fc>
 80103c2:	4601      	mov	r1, r0
 80103c4:	9008      	str	r0, [sp, #32]
 80103c6:	9804      	ldr	r0, [sp, #16]
 80103c8:	f000 ff48 	bl	801125c <__mcmp>
 80103cc:	9a08      	ldr	r2, [sp, #32]
 80103ce:	4603      	mov	r3, r0
 80103d0:	4611      	mov	r1, r2
 80103d2:	4620      	mov	r0, r4
 80103d4:	9308      	str	r3, [sp, #32]
 80103d6:	f000 fd21 	bl	8010e1c <_Bfree>
 80103da:	9b08      	ldr	r3, [sp, #32]
 80103dc:	b9a3      	cbnz	r3, 8010408 <_dtoa_r+0xa00>
 80103de:	9a06      	ldr	r2, [sp, #24]
 80103e0:	b992      	cbnz	r2, 8010408 <_dtoa_r+0xa00>
 80103e2:	9a07      	ldr	r2, [sp, #28]
 80103e4:	b982      	cbnz	r2, 8010408 <_dtoa_r+0xa00>
 80103e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80103ea:	d029      	beq.n	8010440 <_dtoa_r+0xa38>
 80103ec:	9b00      	ldr	r3, [sp, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	dd01      	ble.n	80103f6 <_dtoa_r+0x9ee>
 80103f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80103f6:	9b05      	ldr	r3, [sp, #20]
 80103f8:	1c5d      	adds	r5, r3, #1
 80103fa:	f883 8000 	strb.w	r8, [r3]
 80103fe:	e782      	b.n	8010306 <_dtoa_r+0x8fe>
 8010400:	4630      	mov	r0, r6
 8010402:	e7c2      	b.n	801038a <_dtoa_r+0x982>
 8010404:	2301      	movs	r3, #1
 8010406:	e7e3      	b.n	80103d0 <_dtoa_r+0x9c8>
 8010408:	9a00      	ldr	r2, [sp, #0]
 801040a:	2a00      	cmp	r2, #0
 801040c:	db04      	blt.n	8010418 <_dtoa_r+0xa10>
 801040e:	d125      	bne.n	801045c <_dtoa_r+0xa54>
 8010410:	9a06      	ldr	r2, [sp, #24]
 8010412:	bb1a      	cbnz	r2, 801045c <_dtoa_r+0xa54>
 8010414:	9a07      	ldr	r2, [sp, #28]
 8010416:	bb0a      	cbnz	r2, 801045c <_dtoa_r+0xa54>
 8010418:	2b00      	cmp	r3, #0
 801041a:	ddec      	ble.n	80103f6 <_dtoa_r+0x9ee>
 801041c:	2201      	movs	r2, #1
 801041e:	9904      	ldr	r1, [sp, #16]
 8010420:	4620      	mov	r0, r4
 8010422:	f000 fec7 	bl	80111b4 <__lshift>
 8010426:	4639      	mov	r1, r7
 8010428:	9004      	str	r0, [sp, #16]
 801042a:	f000 ff17 	bl	801125c <__mcmp>
 801042e:	2800      	cmp	r0, #0
 8010430:	dc03      	bgt.n	801043a <_dtoa_r+0xa32>
 8010432:	d1e0      	bne.n	80103f6 <_dtoa_r+0x9ee>
 8010434:	f018 0f01 	tst.w	r8, #1
 8010438:	d0dd      	beq.n	80103f6 <_dtoa_r+0x9ee>
 801043a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801043e:	d1d8      	bne.n	80103f2 <_dtoa_r+0x9ea>
 8010440:	9b05      	ldr	r3, [sp, #20]
 8010442:	9a05      	ldr	r2, [sp, #20]
 8010444:	1c5d      	adds	r5, r3, #1
 8010446:	2339      	movs	r3, #57	; 0x39
 8010448:	7013      	strb	r3, [r2, #0]
 801044a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801044e:	2b39      	cmp	r3, #57	; 0x39
 8010450:	f105 32ff 	add.w	r2, r5, #4294967295
 8010454:	d04f      	beq.n	80104f6 <_dtoa_r+0xaee>
 8010456:	3301      	adds	r3, #1
 8010458:	7013      	strb	r3, [r2, #0]
 801045a:	e754      	b.n	8010306 <_dtoa_r+0x8fe>
 801045c:	9a05      	ldr	r2, [sp, #20]
 801045e:	2b00      	cmp	r3, #0
 8010460:	f102 0501 	add.w	r5, r2, #1
 8010464:	dd06      	ble.n	8010474 <_dtoa_r+0xa6c>
 8010466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801046a:	d0e9      	beq.n	8010440 <_dtoa_r+0xa38>
 801046c:	f108 0801 	add.w	r8, r8, #1
 8010470:	9b05      	ldr	r3, [sp, #20]
 8010472:	e7c2      	b.n	80103fa <_dtoa_r+0x9f2>
 8010474:	9a02      	ldr	r2, [sp, #8]
 8010476:	f805 8c01 	strb.w	r8, [r5, #-1]
 801047a:	eba5 030b 	sub.w	r3, r5, fp
 801047e:	4293      	cmp	r3, r2
 8010480:	d021      	beq.n	80104c6 <_dtoa_r+0xabe>
 8010482:	2300      	movs	r3, #0
 8010484:	220a      	movs	r2, #10
 8010486:	9904      	ldr	r1, [sp, #16]
 8010488:	4620      	mov	r0, r4
 801048a:	f000 fcde 	bl	8010e4a <__multadd>
 801048e:	45b1      	cmp	r9, r6
 8010490:	9004      	str	r0, [sp, #16]
 8010492:	f04f 0300 	mov.w	r3, #0
 8010496:	f04f 020a 	mov.w	r2, #10
 801049a:	4649      	mov	r1, r9
 801049c:	4620      	mov	r0, r4
 801049e:	d105      	bne.n	80104ac <_dtoa_r+0xaa4>
 80104a0:	f000 fcd3 	bl	8010e4a <__multadd>
 80104a4:	4681      	mov	r9, r0
 80104a6:	4606      	mov	r6, r0
 80104a8:	9505      	str	r5, [sp, #20]
 80104aa:	e776      	b.n	801039a <_dtoa_r+0x992>
 80104ac:	f000 fccd 	bl	8010e4a <__multadd>
 80104b0:	4631      	mov	r1, r6
 80104b2:	4681      	mov	r9, r0
 80104b4:	2300      	movs	r3, #0
 80104b6:	220a      	movs	r2, #10
 80104b8:	4620      	mov	r0, r4
 80104ba:	f000 fcc6 	bl	8010e4a <__multadd>
 80104be:	4606      	mov	r6, r0
 80104c0:	e7f2      	b.n	80104a8 <_dtoa_r+0xaa0>
 80104c2:	f04f 0900 	mov.w	r9, #0
 80104c6:	2201      	movs	r2, #1
 80104c8:	9904      	ldr	r1, [sp, #16]
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 fe72 	bl	80111b4 <__lshift>
 80104d0:	4639      	mov	r1, r7
 80104d2:	9004      	str	r0, [sp, #16]
 80104d4:	f000 fec2 	bl	801125c <__mcmp>
 80104d8:	2800      	cmp	r0, #0
 80104da:	dcb6      	bgt.n	801044a <_dtoa_r+0xa42>
 80104dc:	d102      	bne.n	80104e4 <_dtoa_r+0xadc>
 80104de:	f018 0f01 	tst.w	r8, #1
 80104e2:	d1b2      	bne.n	801044a <_dtoa_r+0xa42>
 80104e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104e8:	2b30      	cmp	r3, #48	; 0x30
 80104ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80104ee:	f47f af0a 	bne.w	8010306 <_dtoa_r+0x8fe>
 80104f2:	4615      	mov	r5, r2
 80104f4:	e7f6      	b.n	80104e4 <_dtoa_r+0xadc>
 80104f6:	4593      	cmp	fp, r2
 80104f8:	d105      	bne.n	8010506 <_dtoa_r+0xafe>
 80104fa:	2331      	movs	r3, #49	; 0x31
 80104fc:	f10a 0a01 	add.w	sl, sl, #1
 8010500:	f88b 3000 	strb.w	r3, [fp]
 8010504:	e6ff      	b.n	8010306 <_dtoa_r+0x8fe>
 8010506:	4615      	mov	r5, r2
 8010508:	e79f      	b.n	801044a <_dtoa_r+0xa42>
 801050a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010570 <_dtoa_r+0xb68>
 801050e:	e007      	b.n	8010520 <_dtoa_r+0xb18>
 8010510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010512:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010574 <_dtoa_r+0xb6c>
 8010516:	b11b      	cbz	r3, 8010520 <_dtoa_r+0xb18>
 8010518:	f10b 0308 	add.w	r3, fp, #8
 801051c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801051e:	6013      	str	r3, [r2, #0]
 8010520:	4658      	mov	r0, fp
 8010522:	b017      	add	sp, #92	; 0x5c
 8010524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010528:	9b06      	ldr	r3, [sp, #24]
 801052a:	2b01      	cmp	r3, #1
 801052c:	f77f ae35 	ble.w	801019a <_dtoa_r+0x792>
 8010530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010532:	9307      	str	r3, [sp, #28]
 8010534:	e649      	b.n	80101ca <_dtoa_r+0x7c2>
 8010536:	9b02      	ldr	r3, [sp, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dc03      	bgt.n	8010544 <_dtoa_r+0xb3c>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	2b02      	cmp	r3, #2
 8010540:	f73f aecc 	bgt.w	80102dc <_dtoa_r+0x8d4>
 8010544:	465d      	mov	r5, fp
 8010546:	4639      	mov	r1, r7
 8010548:	9804      	ldr	r0, [sp, #16]
 801054a:	f7ff f9cf 	bl	800f8ec <quorem>
 801054e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010552:	f805 8b01 	strb.w	r8, [r5], #1
 8010556:	9a02      	ldr	r2, [sp, #8]
 8010558:	eba5 030b 	sub.w	r3, r5, fp
 801055c:	429a      	cmp	r2, r3
 801055e:	ddb0      	ble.n	80104c2 <_dtoa_r+0xaba>
 8010560:	2300      	movs	r3, #0
 8010562:	220a      	movs	r2, #10
 8010564:	9904      	ldr	r1, [sp, #16]
 8010566:	4620      	mov	r0, r4
 8010568:	f000 fc6f 	bl	8010e4a <__multadd>
 801056c:	9004      	str	r0, [sp, #16]
 801056e:	e7ea      	b.n	8010546 <_dtoa_r+0xb3e>
 8010570:	08012894 	.word	0x08012894
 8010574:	08012910 	.word	0x08012910

08010578 <std>:
 8010578:	2300      	movs	r3, #0
 801057a:	b510      	push	{r4, lr}
 801057c:	4604      	mov	r4, r0
 801057e:	e9c0 3300 	strd	r3, r3, [r0]
 8010582:	6083      	str	r3, [r0, #8]
 8010584:	8181      	strh	r1, [r0, #12]
 8010586:	6643      	str	r3, [r0, #100]	; 0x64
 8010588:	81c2      	strh	r2, [r0, #14]
 801058a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801058e:	6183      	str	r3, [r0, #24]
 8010590:	4619      	mov	r1, r3
 8010592:	2208      	movs	r2, #8
 8010594:	305c      	adds	r0, #92	; 0x5c
 8010596:	f7fd fc74 	bl	800de82 <memset>
 801059a:	4b05      	ldr	r3, [pc, #20]	; (80105b0 <std+0x38>)
 801059c:	6263      	str	r3, [r4, #36]	; 0x24
 801059e:	4b05      	ldr	r3, [pc, #20]	; (80105b4 <std+0x3c>)
 80105a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80105a2:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <std+0x40>)
 80105a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105a6:	4b05      	ldr	r3, [pc, #20]	; (80105bc <std+0x44>)
 80105a8:	6224      	str	r4, [r4, #32]
 80105aa:	6323      	str	r3, [r4, #48]	; 0x30
 80105ac:	bd10      	pop	{r4, pc}
 80105ae:	bf00      	nop
 80105b0:	08011c65 	.word	0x08011c65
 80105b4:	08011c87 	.word	0x08011c87
 80105b8:	08011cbf 	.word	0x08011cbf
 80105bc:	08011ce3 	.word	0x08011ce3

080105c0 <_cleanup_r>:
 80105c0:	4901      	ldr	r1, [pc, #4]	; (80105c8 <_cleanup_r+0x8>)
 80105c2:	f000 b885 	b.w	80106d0 <_fwalk_reent>
 80105c6:	bf00      	nop
 80105c8:	08011ffd 	.word	0x08011ffd

080105cc <__sfmoreglue>:
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	1e4a      	subs	r2, r1, #1
 80105d0:	2568      	movs	r5, #104	; 0x68
 80105d2:	4355      	muls	r5, r2
 80105d4:	460e      	mov	r6, r1
 80105d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105da:	f001 f847 	bl	801166c <_malloc_r>
 80105de:	4604      	mov	r4, r0
 80105e0:	b140      	cbz	r0, 80105f4 <__sfmoreglue+0x28>
 80105e2:	2100      	movs	r1, #0
 80105e4:	e9c0 1600 	strd	r1, r6, [r0]
 80105e8:	300c      	adds	r0, #12
 80105ea:	60a0      	str	r0, [r4, #8]
 80105ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80105f0:	f7fd fc47 	bl	800de82 <memset>
 80105f4:	4620      	mov	r0, r4
 80105f6:	bd70      	pop	{r4, r5, r6, pc}

080105f8 <__sinit>:
 80105f8:	6983      	ldr	r3, [r0, #24]
 80105fa:	b510      	push	{r4, lr}
 80105fc:	4604      	mov	r4, r0
 80105fe:	bb33      	cbnz	r3, 801064e <__sinit+0x56>
 8010600:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010604:	6503      	str	r3, [r0, #80]	; 0x50
 8010606:	4b12      	ldr	r3, [pc, #72]	; (8010650 <__sinit+0x58>)
 8010608:	4a12      	ldr	r2, [pc, #72]	; (8010654 <__sinit+0x5c>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	6282      	str	r2, [r0, #40]	; 0x28
 801060e:	4298      	cmp	r0, r3
 8010610:	bf04      	itt	eq
 8010612:	2301      	moveq	r3, #1
 8010614:	6183      	streq	r3, [r0, #24]
 8010616:	f000 f81f 	bl	8010658 <__sfp>
 801061a:	6060      	str	r0, [r4, #4]
 801061c:	4620      	mov	r0, r4
 801061e:	f000 f81b 	bl	8010658 <__sfp>
 8010622:	60a0      	str	r0, [r4, #8]
 8010624:	4620      	mov	r0, r4
 8010626:	f000 f817 	bl	8010658 <__sfp>
 801062a:	2200      	movs	r2, #0
 801062c:	60e0      	str	r0, [r4, #12]
 801062e:	2104      	movs	r1, #4
 8010630:	6860      	ldr	r0, [r4, #4]
 8010632:	f7ff ffa1 	bl	8010578 <std>
 8010636:	2201      	movs	r2, #1
 8010638:	2109      	movs	r1, #9
 801063a:	68a0      	ldr	r0, [r4, #8]
 801063c:	f7ff ff9c 	bl	8010578 <std>
 8010640:	2202      	movs	r2, #2
 8010642:	2112      	movs	r1, #18
 8010644:	68e0      	ldr	r0, [r4, #12]
 8010646:	f7ff ff97 	bl	8010578 <std>
 801064a:	2301      	movs	r3, #1
 801064c:	61a3      	str	r3, [r4, #24]
 801064e:	bd10      	pop	{r4, pc}
 8010650:	08012880 	.word	0x08012880
 8010654:	080105c1 	.word	0x080105c1

08010658 <__sfp>:
 8010658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065a:	4b1b      	ldr	r3, [pc, #108]	; (80106c8 <__sfp+0x70>)
 801065c:	681e      	ldr	r6, [r3, #0]
 801065e:	69b3      	ldr	r3, [r6, #24]
 8010660:	4607      	mov	r7, r0
 8010662:	b913      	cbnz	r3, 801066a <__sfp+0x12>
 8010664:	4630      	mov	r0, r6
 8010666:	f7ff ffc7 	bl	80105f8 <__sinit>
 801066a:	3648      	adds	r6, #72	; 0x48
 801066c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010670:	3b01      	subs	r3, #1
 8010672:	d503      	bpl.n	801067c <__sfp+0x24>
 8010674:	6833      	ldr	r3, [r6, #0]
 8010676:	b133      	cbz	r3, 8010686 <__sfp+0x2e>
 8010678:	6836      	ldr	r6, [r6, #0]
 801067a:	e7f7      	b.n	801066c <__sfp+0x14>
 801067c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010680:	b16d      	cbz	r5, 801069e <__sfp+0x46>
 8010682:	3468      	adds	r4, #104	; 0x68
 8010684:	e7f4      	b.n	8010670 <__sfp+0x18>
 8010686:	2104      	movs	r1, #4
 8010688:	4638      	mov	r0, r7
 801068a:	f7ff ff9f 	bl	80105cc <__sfmoreglue>
 801068e:	6030      	str	r0, [r6, #0]
 8010690:	2800      	cmp	r0, #0
 8010692:	d1f1      	bne.n	8010678 <__sfp+0x20>
 8010694:	230c      	movs	r3, #12
 8010696:	603b      	str	r3, [r7, #0]
 8010698:	4604      	mov	r4, r0
 801069a:	4620      	mov	r0, r4
 801069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801069e:	4b0b      	ldr	r3, [pc, #44]	; (80106cc <__sfp+0x74>)
 80106a0:	6665      	str	r5, [r4, #100]	; 0x64
 80106a2:	e9c4 5500 	strd	r5, r5, [r4]
 80106a6:	60a5      	str	r5, [r4, #8]
 80106a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80106ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80106b0:	2208      	movs	r2, #8
 80106b2:	4629      	mov	r1, r5
 80106b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106b8:	f7fd fbe3 	bl	800de82 <memset>
 80106bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106c4:	e7e9      	b.n	801069a <__sfp+0x42>
 80106c6:	bf00      	nop
 80106c8:	08012880 	.word	0x08012880
 80106cc:	ffff0001 	.word	0xffff0001

080106d0 <_fwalk_reent>:
 80106d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106d4:	4680      	mov	r8, r0
 80106d6:	4689      	mov	r9, r1
 80106d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106dc:	2600      	movs	r6, #0
 80106de:	b914      	cbnz	r4, 80106e6 <_fwalk_reent+0x16>
 80106e0:	4630      	mov	r0, r6
 80106e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80106ea:	3f01      	subs	r7, #1
 80106ec:	d501      	bpl.n	80106f2 <_fwalk_reent+0x22>
 80106ee:	6824      	ldr	r4, [r4, #0]
 80106f0:	e7f5      	b.n	80106de <_fwalk_reent+0xe>
 80106f2:	89ab      	ldrh	r3, [r5, #12]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d907      	bls.n	8010708 <_fwalk_reent+0x38>
 80106f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106fc:	3301      	adds	r3, #1
 80106fe:	d003      	beq.n	8010708 <_fwalk_reent+0x38>
 8010700:	4629      	mov	r1, r5
 8010702:	4640      	mov	r0, r8
 8010704:	47c8      	blx	r9
 8010706:	4306      	orrs	r6, r0
 8010708:	3568      	adds	r5, #104	; 0x68
 801070a:	e7ee      	b.n	80106ea <_fwalk_reent+0x1a>

0801070c <rshift>:
 801070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070e:	6906      	ldr	r6, [r0, #16]
 8010710:	114b      	asrs	r3, r1, #5
 8010712:	429e      	cmp	r6, r3
 8010714:	f100 0414 	add.w	r4, r0, #20
 8010718:	dd30      	ble.n	801077c <rshift+0x70>
 801071a:	f011 011f 	ands.w	r1, r1, #31
 801071e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010722:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010726:	d108      	bne.n	801073a <rshift+0x2e>
 8010728:	4621      	mov	r1, r4
 801072a:	42b2      	cmp	r2, r6
 801072c:	460b      	mov	r3, r1
 801072e:	d211      	bcs.n	8010754 <rshift+0x48>
 8010730:	f852 3b04 	ldr.w	r3, [r2], #4
 8010734:	f841 3b04 	str.w	r3, [r1], #4
 8010738:	e7f7      	b.n	801072a <rshift+0x1e>
 801073a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801073e:	f1c1 0c20 	rsb	ip, r1, #32
 8010742:	40cd      	lsrs	r5, r1
 8010744:	3204      	adds	r2, #4
 8010746:	4623      	mov	r3, r4
 8010748:	42b2      	cmp	r2, r6
 801074a:	4617      	mov	r7, r2
 801074c:	d30c      	bcc.n	8010768 <rshift+0x5c>
 801074e:	601d      	str	r5, [r3, #0]
 8010750:	b105      	cbz	r5, 8010754 <rshift+0x48>
 8010752:	3304      	adds	r3, #4
 8010754:	1b1a      	subs	r2, r3, r4
 8010756:	42a3      	cmp	r3, r4
 8010758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801075c:	bf08      	it	eq
 801075e:	2300      	moveq	r3, #0
 8010760:	6102      	str	r2, [r0, #16]
 8010762:	bf08      	it	eq
 8010764:	6143      	streq	r3, [r0, #20]
 8010766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010768:	683f      	ldr	r7, [r7, #0]
 801076a:	fa07 f70c 	lsl.w	r7, r7, ip
 801076e:	433d      	orrs	r5, r7
 8010770:	f843 5b04 	str.w	r5, [r3], #4
 8010774:	f852 5b04 	ldr.w	r5, [r2], #4
 8010778:	40cd      	lsrs	r5, r1
 801077a:	e7e5      	b.n	8010748 <rshift+0x3c>
 801077c:	4623      	mov	r3, r4
 801077e:	e7e9      	b.n	8010754 <rshift+0x48>

08010780 <__hexdig_fun>:
 8010780:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010784:	2b09      	cmp	r3, #9
 8010786:	d802      	bhi.n	801078e <__hexdig_fun+0xe>
 8010788:	3820      	subs	r0, #32
 801078a:	b2c0      	uxtb	r0, r0
 801078c:	4770      	bx	lr
 801078e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010792:	2b05      	cmp	r3, #5
 8010794:	d801      	bhi.n	801079a <__hexdig_fun+0x1a>
 8010796:	3847      	subs	r0, #71	; 0x47
 8010798:	e7f7      	b.n	801078a <__hexdig_fun+0xa>
 801079a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801079e:	2b05      	cmp	r3, #5
 80107a0:	d801      	bhi.n	80107a6 <__hexdig_fun+0x26>
 80107a2:	3827      	subs	r0, #39	; 0x27
 80107a4:	e7f1      	b.n	801078a <__hexdig_fun+0xa>
 80107a6:	2000      	movs	r0, #0
 80107a8:	4770      	bx	lr

080107aa <__gethex>:
 80107aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ae:	b08b      	sub	sp, #44	; 0x2c
 80107b0:	468a      	mov	sl, r1
 80107b2:	9002      	str	r0, [sp, #8]
 80107b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80107b6:	9306      	str	r3, [sp, #24]
 80107b8:	4690      	mov	r8, r2
 80107ba:	f000 fad0 	bl	8010d5e <__localeconv_l>
 80107be:	6803      	ldr	r3, [r0, #0]
 80107c0:	9303      	str	r3, [sp, #12]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ef fd04 	bl	80001d0 <strlen>
 80107c8:	9b03      	ldr	r3, [sp, #12]
 80107ca:	9001      	str	r0, [sp, #4]
 80107cc:	4403      	add	r3, r0
 80107ce:	f04f 0b00 	mov.w	fp, #0
 80107d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80107d6:	9307      	str	r3, [sp, #28]
 80107d8:	f8da 3000 	ldr.w	r3, [sl]
 80107dc:	3302      	adds	r3, #2
 80107de:	461f      	mov	r7, r3
 80107e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80107e4:	2830      	cmp	r0, #48	; 0x30
 80107e6:	d06c      	beq.n	80108c2 <__gethex+0x118>
 80107e8:	f7ff ffca 	bl	8010780 <__hexdig_fun>
 80107ec:	4604      	mov	r4, r0
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d16a      	bne.n	80108c8 <__gethex+0x11e>
 80107f2:	9a01      	ldr	r2, [sp, #4]
 80107f4:	9903      	ldr	r1, [sp, #12]
 80107f6:	4638      	mov	r0, r7
 80107f8:	f001 fa77 	bl	8011cea <strncmp>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d166      	bne.n	80108ce <__gethex+0x124>
 8010800:	9b01      	ldr	r3, [sp, #4]
 8010802:	5cf8      	ldrb	r0, [r7, r3]
 8010804:	18fe      	adds	r6, r7, r3
 8010806:	f7ff ffbb 	bl	8010780 <__hexdig_fun>
 801080a:	2800      	cmp	r0, #0
 801080c:	d062      	beq.n	80108d4 <__gethex+0x12a>
 801080e:	4633      	mov	r3, r6
 8010810:	7818      	ldrb	r0, [r3, #0]
 8010812:	2830      	cmp	r0, #48	; 0x30
 8010814:	461f      	mov	r7, r3
 8010816:	f103 0301 	add.w	r3, r3, #1
 801081a:	d0f9      	beq.n	8010810 <__gethex+0x66>
 801081c:	f7ff ffb0 	bl	8010780 <__hexdig_fun>
 8010820:	fab0 f580 	clz	r5, r0
 8010824:	096d      	lsrs	r5, r5, #5
 8010826:	4634      	mov	r4, r6
 8010828:	f04f 0b01 	mov.w	fp, #1
 801082c:	463a      	mov	r2, r7
 801082e:	4616      	mov	r6, r2
 8010830:	3201      	adds	r2, #1
 8010832:	7830      	ldrb	r0, [r6, #0]
 8010834:	f7ff ffa4 	bl	8010780 <__hexdig_fun>
 8010838:	2800      	cmp	r0, #0
 801083a:	d1f8      	bne.n	801082e <__gethex+0x84>
 801083c:	9a01      	ldr	r2, [sp, #4]
 801083e:	9903      	ldr	r1, [sp, #12]
 8010840:	4630      	mov	r0, r6
 8010842:	f001 fa52 	bl	8011cea <strncmp>
 8010846:	b950      	cbnz	r0, 801085e <__gethex+0xb4>
 8010848:	b954      	cbnz	r4, 8010860 <__gethex+0xb6>
 801084a:	9b01      	ldr	r3, [sp, #4]
 801084c:	18f4      	adds	r4, r6, r3
 801084e:	4622      	mov	r2, r4
 8010850:	4616      	mov	r6, r2
 8010852:	3201      	adds	r2, #1
 8010854:	7830      	ldrb	r0, [r6, #0]
 8010856:	f7ff ff93 	bl	8010780 <__hexdig_fun>
 801085a:	2800      	cmp	r0, #0
 801085c:	d1f8      	bne.n	8010850 <__gethex+0xa6>
 801085e:	b10c      	cbz	r4, 8010864 <__gethex+0xba>
 8010860:	1ba4      	subs	r4, r4, r6
 8010862:	00a4      	lsls	r4, r4, #2
 8010864:	7833      	ldrb	r3, [r6, #0]
 8010866:	2b50      	cmp	r3, #80	; 0x50
 8010868:	d001      	beq.n	801086e <__gethex+0xc4>
 801086a:	2b70      	cmp	r3, #112	; 0x70
 801086c:	d140      	bne.n	80108f0 <__gethex+0x146>
 801086e:	7873      	ldrb	r3, [r6, #1]
 8010870:	2b2b      	cmp	r3, #43	; 0x2b
 8010872:	d031      	beq.n	80108d8 <__gethex+0x12e>
 8010874:	2b2d      	cmp	r3, #45	; 0x2d
 8010876:	d033      	beq.n	80108e0 <__gethex+0x136>
 8010878:	1c71      	adds	r1, r6, #1
 801087a:	f04f 0900 	mov.w	r9, #0
 801087e:	7808      	ldrb	r0, [r1, #0]
 8010880:	f7ff ff7e 	bl	8010780 <__hexdig_fun>
 8010884:	1e43      	subs	r3, r0, #1
 8010886:	b2db      	uxtb	r3, r3
 8010888:	2b18      	cmp	r3, #24
 801088a:	d831      	bhi.n	80108f0 <__gethex+0x146>
 801088c:	f1a0 0210 	sub.w	r2, r0, #16
 8010890:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010894:	f7ff ff74 	bl	8010780 <__hexdig_fun>
 8010898:	1e43      	subs	r3, r0, #1
 801089a:	b2db      	uxtb	r3, r3
 801089c:	2b18      	cmp	r3, #24
 801089e:	d922      	bls.n	80108e6 <__gethex+0x13c>
 80108a0:	f1b9 0f00 	cmp.w	r9, #0
 80108a4:	d000      	beq.n	80108a8 <__gethex+0xfe>
 80108a6:	4252      	negs	r2, r2
 80108a8:	4414      	add	r4, r2
 80108aa:	f8ca 1000 	str.w	r1, [sl]
 80108ae:	b30d      	cbz	r5, 80108f4 <__gethex+0x14a>
 80108b0:	f1bb 0f00 	cmp.w	fp, #0
 80108b4:	bf0c      	ite	eq
 80108b6:	2706      	moveq	r7, #6
 80108b8:	2700      	movne	r7, #0
 80108ba:	4638      	mov	r0, r7
 80108bc:	b00b      	add	sp, #44	; 0x2c
 80108be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c2:	f10b 0b01 	add.w	fp, fp, #1
 80108c6:	e78a      	b.n	80107de <__gethex+0x34>
 80108c8:	2500      	movs	r5, #0
 80108ca:	462c      	mov	r4, r5
 80108cc:	e7ae      	b.n	801082c <__gethex+0x82>
 80108ce:	463e      	mov	r6, r7
 80108d0:	2501      	movs	r5, #1
 80108d2:	e7c7      	b.n	8010864 <__gethex+0xba>
 80108d4:	4604      	mov	r4, r0
 80108d6:	e7fb      	b.n	80108d0 <__gethex+0x126>
 80108d8:	f04f 0900 	mov.w	r9, #0
 80108dc:	1cb1      	adds	r1, r6, #2
 80108de:	e7ce      	b.n	801087e <__gethex+0xd4>
 80108e0:	f04f 0901 	mov.w	r9, #1
 80108e4:	e7fa      	b.n	80108dc <__gethex+0x132>
 80108e6:	230a      	movs	r3, #10
 80108e8:	fb03 0202 	mla	r2, r3, r2, r0
 80108ec:	3a10      	subs	r2, #16
 80108ee:	e7cf      	b.n	8010890 <__gethex+0xe6>
 80108f0:	4631      	mov	r1, r6
 80108f2:	e7da      	b.n	80108aa <__gethex+0x100>
 80108f4:	1bf3      	subs	r3, r6, r7
 80108f6:	3b01      	subs	r3, #1
 80108f8:	4629      	mov	r1, r5
 80108fa:	2b07      	cmp	r3, #7
 80108fc:	dc49      	bgt.n	8010992 <__gethex+0x1e8>
 80108fe:	9802      	ldr	r0, [sp, #8]
 8010900:	f000 fa58 	bl	8010db4 <_Balloc>
 8010904:	9b01      	ldr	r3, [sp, #4]
 8010906:	f100 0914 	add.w	r9, r0, #20
 801090a:	f04f 0b00 	mov.w	fp, #0
 801090e:	f1c3 0301 	rsb	r3, r3, #1
 8010912:	4605      	mov	r5, r0
 8010914:	f8cd 9010 	str.w	r9, [sp, #16]
 8010918:	46da      	mov	sl, fp
 801091a:	9308      	str	r3, [sp, #32]
 801091c:	42b7      	cmp	r7, r6
 801091e:	d33b      	bcc.n	8010998 <__gethex+0x1ee>
 8010920:	9804      	ldr	r0, [sp, #16]
 8010922:	f840 ab04 	str.w	sl, [r0], #4
 8010926:	eba0 0009 	sub.w	r0, r0, r9
 801092a:	1080      	asrs	r0, r0, #2
 801092c:	6128      	str	r0, [r5, #16]
 801092e:	0147      	lsls	r7, r0, #5
 8010930:	4650      	mov	r0, sl
 8010932:	f000 fb03 	bl	8010f3c <__hi0bits>
 8010936:	f8d8 6000 	ldr.w	r6, [r8]
 801093a:	1a3f      	subs	r7, r7, r0
 801093c:	42b7      	cmp	r7, r6
 801093e:	dd64      	ble.n	8010a0a <__gethex+0x260>
 8010940:	1bbf      	subs	r7, r7, r6
 8010942:	4639      	mov	r1, r7
 8010944:	4628      	mov	r0, r5
 8010946:	f000 fe13 	bl	8011570 <__any_on>
 801094a:	4682      	mov	sl, r0
 801094c:	b178      	cbz	r0, 801096e <__gethex+0x1c4>
 801094e:	1e7b      	subs	r3, r7, #1
 8010950:	1159      	asrs	r1, r3, #5
 8010952:	f003 021f 	and.w	r2, r3, #31
 8010956:	f04f 0a01 	mov.w	sl, #1
 801095a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801095e:	fa0a f202 	lsl.w	r2, sl, r2
 8010962:	420a      	tst	r2, r1
 8010964:	d003      	beq.n	801096e <__gethex+0x1c4>
 8010966:	4553      	cmp	r3, sl
 8010968:	dc46      	bgt.n	80109f8 <__gethex+0x24e>
 801096a:	f04f 0a02 	mov.w	sl, #2
 801096e:	4639      	mov	r1, r7
 8010970:	4628      	mov	r0, r5
 8010972:	f7ff fecb 	bl	801070c <rshift>
 8010976:	443c      	add	r4, r7
 8010978:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801097c:	42a3      	cmp	r3, r4
 801097e:	da52      	bge.n	8010a26 <__gethex+0x27c>
 8010980:	4629      	mov	r1, r5
 8010982:	9802      	ldr	r0, [sp, #8]
 8010984:	f000 fa4a 	bl	8010e1c <_Bfree>
 8010988:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801098a:	2300      	movs	r3, #0
 801098c:	6013      	str	r3, [r2, #0]
 801098e:	27a3      	movs	r7, #163	; 0xa3
 8010990:	e793      	b.n	80108ba <__gethex+0x110>
 8010992:	3101      	adds	r1, #1
 8010994:	105b      	asrs	r3, r3, #1
 8010996:	e7b0      	b.n	80108fa <__gethex+0x150>
 8010998:	1e73      	subs	r3, r6, #1
 801099a:	9305      	str	r3, [sp, #20]
 801099c:	9a07      	ldr	r2, [sp, #28]
 801099e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d018      	beq.n	80109d8 <__gethex+0x22e>
 80109a6:	f1bb 0f20 	cmp.w	fp, #32
 80109aa:	d107      	bne.n	80109bc <__gethex+0x212>
 80109ac:	9b04      	ldr	r3, [sp, #16]
 80109ae:	f8c3 a000 	str.w	sl, [r3]
 80109b2:	3304      	adds	r3, #4
 80109b4:	f04f 0a00 	mov.w	sl, #0
 80109b8:	9304      	str	r3, [sp, #16]
 80109ba:	46d3      	mov	fp, sl
 80109bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80109c0:	f7ff fede 	bl	8010780 <__hexdig_fun>
 80109c4:	f000 000f 	and.w	r0, r0, #15
 80109c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80109cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80109d0:	f10b 0b04 	add.w	fp, fp, #4
 80109d4:	9b05      	ldr	r3, [sp, #20]
 80109d6:	e00d      	b.n	80109f4 <__gethex+0x24a>
 80109d8:	9b05      	ldr	r3, [sp, #20]
 80109da:	9a08      	ldr	r2, [sp, #32]
 80109dc:	4413      	add	r3, r2
 80109de:	42bb      	cmp	r3, r7
 80109e0:	d3e1      	bcc.n	80109a6 <__gethex+0x1fc>
 80109e2:	4618      	mov	r0, r3
 80109e4:	9a01      	ldr	r2, [sp, #4]
 80109e6:	9903      	ldr	r1, [sp, #12]
 80109e8:	9309      	str	r3, [sp, #36]	; 0x24
 80109ea:	f001 f97e 	bl	8011cea <strncmp>
 80109ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d1d8      	bne.n	80109a6 <__gethex+0x1fc>
 80109f4:	461e      	mov	r6, r3
 80109f6:	e791      	b.n	801091c <__gethex+0x172>
 80109f8:	1eb9      	subs	r1, r7, #2
 80109fa:	4628      	mov	r0, r5
 80109fc:	f000 fdb8 	bl	8011570 <__any_on>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d0b2      	beq.n	801096a <__gethex+0x1c0>
 8010a04:	f04f 0a03 	mov.w	sl, #3
 8010a08:	e7b1      	b.n	801096e <__gethex+0x1c4>
 8010a0a:	da09      	bge.n	8010a20 <__gethex+0x276>
 8010a0c:	1bf7      	subs	r7, r6, r7
 8010a0e:	4629      	mov	r1, r5
 8010a10:	463a      	mov	r2, r7
 8010a12:	9802      	ldr	r0, [sp, #8]
 8010a14:	f000 fbce 	bl	80111b4 <__lshift>
 8010a18:	1be4      	subs	r4, r4, r7
 8010a1a:	4605      	mov	r5, r0
 8010a1c:	f100 0914 	add.w	r9, r0, #20
 8010a20:	f04f 0a00 	mov.w	sl, #0
 8010a24:	e7a8      	b.n	8010978 <__gethex+0x1ce>
 8010a26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010a2a:	42a0      	cmp	r0, r4
 8010a2c:	dd6a      	ble.n	8010b04 <__gethex+0x35a>
 8010a2e:	1b04      	subs	r4, r0, r4
 8010a30:	42a6      	cmp	r6, r4
 8010a32:	dc2e      	bgt.n	8010a92 <__gethex+0x2e8>
 8010a34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a38:	2b02      	cmp	r3, #2
 8010a3a:	d022      	beq.n	8010a82 <__gethex+0x2d8>
 8010a3c:	2b03      	cmp	r3, #3
 8010a3e:	d024      	beq.n	8010a8a <__gethex+0x2e0>
 8010a40:	2b01      	cmp	r3, #1
 8010a42:	d115      	bne.n	8010a70 <__gethex+0x2c6>
 8010a44:	42a6      	cmp	r6, r4
 8010a46:	d113      	bne.n	8010a70 <__gethex+0x2c6>
 8010a48:	2e01      	cmp	r6, #1
 8010a4a:	dc0b      	bgt.n	8010a64 <__gethex+0x2ba>
 8010a4c:	9a06      	ldr	r2, [sp, #24]
 8010a4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a52:	6013      	str	r3, [r2, #0]
 8010a54:	2301      	movs	r3, #1
 8010a56:	612b      	str	r3, [r5, #16]
 8010a58:	f8c9 3000 	str.w	r3, [r9]
 8010a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a5e:	2762      	movs	r7, #98	; 0x62
 8010a60:	601d      	str	r5, [r3, #0]
 8010a62:	e72a      	b.n	80108ba <__gethex+0x110>
 8010a64:	1e71      	subs	r1, r6, #1
 8010a66:	4628      	mov	r0, r5
 8010a68:	f000 fd82 	bl	8011570 <__any_on>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d1ed      	bne.n	8010a4c <__gethex+0x2a2>
 8010a70:	4629      	mov	r1, r5
 8010a72:	9802      	ldr	r0, [sp, #8]
 8010a74:	f000 f9d2 	bl	8010e1c <_Bfree>
 8010a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	6013      	str	r3, [r2, #0]
 8010a7e:	2750      	movs	r7, #80	; 0x50
 8010a80:	e71b      	b.n	80108ba <__gethex+0x110>
 8010a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0e1      	beq.n	8010a4c <__gethex+0x2a2>
 8010a88:	e7f2      	b.n	8010a70 <__gethex+0x2c6>
 8010a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1dd      	bne.n	8010a4c <__gethex+0x2a2>
 8010a90:	e7ee      	b.n	8010a70 <__gethex+0x2c6>
 8010a92:	1e67      	subs	r7, r4, #1
 8010a94:	f1ba 0f00 	cmp.w	sl, #0
 8010a98:	d131      	bne.n	8010afe <__gethex+0x354>
 8010a9a:	b127      	cbz	r7, 8010aa6 <__gethex+0x2fc>
 8010a9c:	4639      	mov	r1, r7
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f000 fd66 	bl	8011570 <__any_on>
 8010aa4:	4682      	mov	sl, r0
 8010aa6:	117a      	asrs	r2, r7, #5
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f007 071f 	and.w	r7, r7, #31
 8010aae:	fa03 f707 	lsl.w	r7, r3, r7
 8010ab2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	421f      	tst	r7, r3
 8010aba:	4628      	mov	r0, r5
 8010abc:	bf18      	it	ne
 8010abe:	f04a 0a02 	orrne.w	sl, sl, #2
 8010ac2:	1b36      	subs	r6, r6, r4
 8010ac4:	f7ff fe22 	bl	801070c <rshift>
 8010ac8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010acc:	2702      	movs	r7, #2
 8010ace:	f1ba 0f00 	cmp.w	sl, #0
 8010ad2:	d048      	beq.n	8010b66 <__gethex+0x3bc>
 8010ad4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ad8:	2b02      	cmp	r3, #2
 8010ada:	d015      	beq.n	8010b08 <__gethex+0x35e>
 8010adc:	2b03      	cmp	r3, #3
 8010ade:	d017      	beq.n	8010b10 <__gethex+0x366>
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d109      	bne.n	8010af8 <__gethex+0x34e>
 8010ae4:	f01a 0f02 	tst.w	sl, #2
 8010ae8:	d006      	beq.n	8010af8 <__gethex+0x34e>
 8010aea:	f8d9 3000 	ldr.w	r3, [r9]
 8010aee:	ea4a 0a03 	orr.w	sl, sl, r3
 8010af2:	f01a 0f01 	tst.w	sl, #1
 8010af6:	d10e      	bne.n	8010b16 <__gethex+0x36c>
 8010af8:	f047 0710 	orr.w	r7, r7, #16
 8010afc:	e033      	b.n	8010b66 <__gethex+0x3bc>
 8010afe:	f04f 0a01 	mov.w	sl, #1
 8010b02:	e7d0      	b.n	8010aa6 <__gethex+0x2fc>
 8010b04:	2701      	movs	r7, #1
 8010b06:	e7e2      	b.n	8010ace <__gethex+0x324>
 8010b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b0a:	f1c3 0301 	rsb	r3, r3, #1
 8010b0e:	9315      	str	r3, [sp, #84]	; 0x54
 8010b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d0f0      	beq.n	8010af8 <__gethex+0x34e>
 8010b16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010b1a:	f105 0314 	add.w	r3, r5, #20
 8010b1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010b22:	eb03 010a 	add.w	r1, r3, sl
 8010b26:	f04f 0c00 	mov.w	ip, #0
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b34:	d01c      	beq.n	8010b70 <__gethex+0x3c6>
 8010b36:	3201      	adds	r2, #1
 8010b38:	6002      	str	r2, [r0, #0]
 8010b3a:	2f02      	cmp	r7, #2
 8010b3c:	f105 0314 	add.w	r3, r5, #20
 8010b40:	d138      	bne.n	8010bb4 <__gethex+0x40a>
 8010b42:	f8d8 2000 	ldr.w	r2, [r8]
 8010b46:	3a01      	subs	r2, #1
 8010b48:	42b2      	cmp	r2, r6
 8010b4a:	d10a      	bne.n	8010b62 <__gethex+0x3b8>
 8010b4c:	1171      	asrs	r1, r6, #5
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f006 061f 	and.w	r6, r6, #31
 8010b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b58:	fa02 f606 	lsl.w	r6, r2, r6
 8010b5c:	421e      	tst	r6, r3
 8010b5e:	bf18      	it	ne
 8010b60:	4617      	movne	r7, r2
 8010b62:	f047 0720 	orr.w	r7, r7, #32
 8010b66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b68:	601d      	str	r5, [r3, #0]
 8010b6a:	9b06      	ldr	r3, [sp, #24]
 8010b6c:	601c      	str	r4, [r3, #0]
 8010b6e:	e6a4      	b.n	80108ba <__gethex+0x110>
 8010b70:	4299      	cmp	r1, r3
 8010b72:	f843 cc04 	str.w	ip, [r3, #-4]
 8010b76:	d8d8      	bhi.n	8010b2a <__gethex+0x380>
 8010b78:	68ab      	ldr	r3, [r5, #8]
 8010b7a:	4599      	cmp	r9, r3
 8010b7c:	db12      	blt.n	8010ba4 <__gethex+0x3fa>
 8010b7e:	6869      	ldr	r1, [r5, #4]
 8010b80:	9802      	ldr	r0, [sp, #8]
 8010b82:	3101      	adds	r1, #1
 8010b84:	f000 f916 	bl	8010db4 <_Balloc>
 8010b88:	692a      	ldr	r2, [r5, #16]
 8010b8a:	3202      	adds	r2, #2
 8010b8c:	f105 010c 	add.w	r1, r5, #12
 8010b90:	4683      	mov	fp, r0
 8010b92:	0092      	lsls	r2, r2, #2
 8010b94:	300c      	adds	r0, #12
 8010b96:	f7fd f969 	bl	800de6c <memcpy>
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	9802      	ldr	r0, [sp, #8]
 8010b9e:	f000 f93d 	bl	8010e1c <_Bfree>
 8010ba2:	465d      	mov	r5, fp
 8010ba4:	692b      	ldr	r3, [r5, #16]
 8010ba6:	1c5a      	adds	r2, r3, #1
 8010ba8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010bac:	612a      	str	r2, [r5, #16]
 8010bae:	2201      	movs	r2, #1
 8010bb0:	615a      	str	r2, [r3, #20]
 8010bb2:	e7c2      	b.n	8010b3a <__gethex+0x390>
 8010bb4:	692a      	ldr	r2, [r5, #16]
 8010bb6:	454a      	cmp	r2, r9
 8010bb8:	dd0b      	ble.n	8010bd2 <__gethex+0x428>
 8010bba:	2101      	movs	r1, #1
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f7ff fda5 	bl	801070c <rshift>
 8010bc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010bc6:	3401      	adds	r4, #1
 8010bc8:	42a3      	cmp	r3, r4
 8010bca:	f6ff aed9 	blt.w	8010980 <__gethex+0x1d6>
 8010bce:	2701      	movs	r7, #1
 8010bd0:	e7c7      	b.n	8010b62 <__gethex+0x3b8>
 8010bd2:	f016 061f 	ands.w	r6, r6, #31
 8010bd6:	d0fa      	beq.n	8010bce <__gethex+0x424>
 8010bd8:	449a      	add	sl, r3
 8010bda:	f1c6 0620 	rsb	r6, r6, #32
 8010bde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010be2:	f000 f9ab 	bl	8010f3c <__hi0bits>
 8010be6:	42b0      	cmp	r0, r6
 8010be8:	dbe7      	blt.n	8010bba <__gethex+0x410>
 8010bea:	e7f0      	b.n	8010bce <__gethex+0x424>

08010bec <L_shift>:
 8010bec:	f1c2 0208 	rsb	r2, r2, #8
 8010bf0:	0092      	lsls	r2, r2, #2
 8010bf2:	b570      	push	{r4, r5, r6, lr}
 8010bf4:	f1c2 0620 	rsb	r6, r2, #32
 8010bf8:	6843      	ldr	r3, [r0, #4]
 8010bfa:	6804      	ldr	r4, [r0, #0]
 8010bfc:	fa03 f506 	lsl.w	r5, r3, r6
 8010c00:	432c      	orrs	r4, r5
 8010c02:	40d3      	lsrs	r3, r2
 8010c04:	6004      	str	r4, [r0, #0]
 8010c06:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c0a:	4288      	cmp	r0, r1
 8010c0c:	d3f4      	bcc.n	8010bf8 <L_shift+0xc>
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}

08010c10 <__match>:
 8010c10:	b530      	push	{r4, r5, lr}
 8010c12:	6803      	ldr	r3, [r0, #0]
 8010c14:	3301      	adds	r3, #1
 8010c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c1a:	b914      	cbnz	r4, 8010c22 <__match+0x12>
 8010c1c:	6003      	str	r3, [r0, #0]
 8010c1e:	2001      	movs	r0, #1
 8010c20:	bd30      	pop	{r4, r5, pc}
 8010c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010c2a:	2d19      	cmp	r5, #25
 8010c2c:	bf98      	it	ls
 8010c2e:	3220      	addls	r2, #32
 8010c30:	42a2      	cmp	r2, r4
 8010c32:	d0f0      	beq.n	8010c16 <__match+0x6>
 8010c34:	2000      	movs	r0, #0
 8010c36:	e7f3      	b.n	8010c20 <__match+0x10>

08010c38 <__hexnan>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	680b      	ldr	r3, [r1, #0]
 8010c3e:	6801      	ldr	r1, [r0, #0]
 8010c40:	115f      	asrs	r7, r3, #5
 8010c42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010c46:	f013 031f 	ands.w	r3, r3, #31
 8010c4a:	b087      	sub	sp, #28
 8010c4c:	bf18      	it	ne
 8010c4e:	3704      	addne	r7, #4
 8010c50:	2500      	movs	r5, #0
 8010c52:	1f3e      	subs	r6, r7, #4
 8010c54:	4682      	mov	sl, r0
 8010c56:	4690      	mov	r8, r2
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	f847 5c04 	str.w	r5, [r7, #-4]
 8010c5e:	46b1      	mov	r9, r6
 8010c60:	4634      	mov	r4, r6
 8010c62:	9502      	str	r5, [sp, #8]
 8010c64:	46ab      	mov	fp, r5
 8010c66:	784a      	ldrb	r2, [r1, #1]
 8010c68:	1c4b      	adds	r3, r1, #1
 8010c6a:	9303      	str	r3, [sp, #12]
 8010c6c:	b342      	cbz	r2, 8010cc0 <__hexnan+0x88>
 8010c6e:	4610      	mov	r0, r2
 8010c70:	9105      	str	r1, [sp, #20]
 8010c72:	9204      	str	r2, [sp, #16]
 8010c74:	f7ff fd84 	bl	8010780 <__hexdig_fun>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d143      	bne.n	8010d04 <__hexnan+0xcc>
 8010c7c:	9a04      	ldr	r2, [sp, #16]
 8010c7e:	9905      	ldr	r1, [sp, #20]
 8010c80:	2a20      	cmp	r2, #32
 8010c82:	d818      	bhi.n	8010cb6 <__hexnan+0x7e>
 8010c84:	9b02      	ldr	r3, [sp, #8]
 8010c86:	459b      	cmp	fp, r3
 8010c88:	dd13      	ble.n	8010cb2 <__hexnan+0x7a>
 8010c8a:	454c      	cmp	r4, r9
 8010c8c:	d206      	bcs.n	8010c9c <__hexnan+0x64>
 8010c8e:	2d07      	cmp	r5, #7
 8010c90:	dc04      	bgt.n	8010c9c <__hexnan+0x64>
 8010c92:	462a      	mov	r2, r5
 8010c94:	4649      	mov	r1, r9
 8010c96:	4620      	mov	r0, r4
 8010c98:	f7ff ffa8 	bl	8010bec <L_shift>
 8010c9c:	4544      	cmp	r4, r8
 8010c9e:	d944      	bls.n	8010d2a <__hexnan+0xf2>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f1a4 0904 	sub.w	r9, r4, #4
 8010ca6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010caa:	f8cd b008 	str.w	fp, [sp, #8]
 8010cae:	464c      	mov	r4, r9
 8010cb0:	461d      	mov	r5, r3
 8010cb2:	9903      	ldr	r1, [sp, #12]
 8010cb4:	e7d7      	b.n	8010c66 <__hexnan+0x2e>
 8010cb6:	2a29      	cmp	r2, #41	; 0x29
 8010cb8:	d14a      	bne.n	8010d50 <__hexnan+0x118>
 8010cba:	3102      	adds	r1, #2
 8010cbc:	f8ca 1000 	str.w	r1, [sl]
 8010cc0:	f1bb 0f00 	cmp.w	fp, #0
 8010cc4:	d044      	beq.n	8010d50 <__hexnan+0x118>
 8010cc6:	454c      	cmp	r4, r9
 8010cc8:	d206      	bcs.n	8010cd8 <__hexnan+0xa0>
 8010cca:	2d07      	cmp	r5, #7
 8010ccc:	dc04      	bgt.n	8010cd8 <__hexnan+0xa0>
 8010cce:	462a      	mov	r2, r5
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f7ff ff8a 	bl	8010bec <L_shift>
 8010cd8:	4544      	cmp	r4, r8
 8010cda:	d928      	bls.n	8010d2e <__hexnan+0xf6>
 8010cdc:	4643      	mov	r3, r8
 8010cde:	f854 2b04 	ldr.w	r2, [r4], #4
 8010ce2:	f843 2b04 	str.w	r2, [r3], #4
 8010ce6:	42a6      	cmp	r6, r4
 8010ce8:	d2f9      	bcs.n	8010cde <__hexnan+0xa6>
 8010cea:	2200      	movs	r2, #0
 8010cec:	f843 2b04 	str.w	r2, [r3], #4
 8010cf0:	429e      	cmp	r6, r3
 8010cf2:	d2fb      	bcs.n	8010cec <__hexnan+0xb4>
 8010cf4:	6833      	ldr	r3, [r6, #0]
 8010cf6:	b91b      	cbnz	r3, 8010d00 <__hexnan+0xc8>
 8010cf8:	4546      	cmp	r6, r8
 8010cfa:	d127      	bne.n	8010d4c <__hexnan+0x114>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	6033      	str	r3, [r6, #0]
 8010d00:	2005      	movs	r0, #5
 8010d02:	e026      	b.n	8010d52 <__hexnan+0x11a>
 8010d04:	3501      	adds	r5, #1
 8010d06:	2d08      	cmp	r5, #8
 8010d08:	f10b 0b01 	add.w	fp, fp, #1
 8010d0c:	dd06      	ble.n	8010d1c <__hexnan+0xe4>
 8010d0e:	4544      	cmp	r4, r8
 8010d10:	d9cf      	bls.n	8010cb2 <__hexnan+0x7a>
 8010d12:	2300      	movs	r3, #0
 8010d14:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d18:	2501      	movs	r5, #1
 8010d1a:	3c04      	subs	r4, #4
 8010d1c:	6822      	ldr	r2, [r4, #0]
 8010d1e:	f000 000f 	and.w	r0, r0, #15
 8010d22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010d26:	6020      	str	r0, [r4, #0]
 8010d28:	e7c3      	b.n	8010cb2 <__hexnan+0x7a>
 8010d2a:	2508      	movs	r5, #8
 8010d2c:	e7c1      	b.n	8010cb2 <__hexnan+0x7a>
 8010d2e:	9b01      	ldr	r3, [sp, #4]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d0df      	beq.n	8010cf4 <__hexnan+0xbc>
 8010d34:	f04f 32ff 	mov.w	r2, #4294967295
 8010d38:	f1c3 0320 	rsb	r3, r3, #32
 8010d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8010d40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010d44:	401a      	ands	r2, r3
 8010d46:	f847 2c04 	str.w	r2, [r7, #-4]
 8010d4a:	e7d3      	b.n	8010cf4 <__hexnan+0xbc>
 8010d4c:	3e04      	subs	r6, #4
 8010d4e:	e7d1      	b.n	8010cf4 <__hexnan+0xbc>
 8010d50:	2004      	movs	r0, #4
 8010d52:	b007      	add	sp, #28
 8010d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d58 <__locale_ctype_ptr_l>:
 8010d58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010d5c:	4770      	bx	lr

08010d5e <__localeconv_l>:
 8010d5e:	30f0      	adds	r0, #240	; 0xf0
 8010d60:	4770      	bx	lr
	...

08010d64 <_localeconv_r>:
 8010d64:	4b04      	ldr	r3, [pc, #16]	; (8010d78 <_localeconv_r+0x14>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6a18      	ldr	r0, [r3, #32]
 8010d6a:	4b04      	ldr	r3, [pc, #16]	; (8010d7c <_localeconv_r+0x18>)
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	bf08      	it	eq
 8010d70:	4618      	moveq	r0, r3
 8010d72:	30f0      	adds	r0, #240	; 0xf0
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	20000048 	.word	0x20000048
 8010d7c:	200000ac 	.word	0x200000ac

08010d80 <malloc>:
 8010d80:	4b02      	ldr	r3, [pc, #8]	; (8010d8c <malloc+0xc>)
 8010d82:	4601      	mov	r1, r0
 8010d84:	6818      	ldr	r0, [r3, #0]
 8010d86:	f000 bc71 	b.w	801166c <_malloc_r>
 8010d8a:	bf00      	nop
 8010d8c:	20000048 	.word	0x20000048

08010d90 <__ascii_mbtowc>:
 8010d90:	b082      	sub	sp, #8
 8010d92:	b901      	cbnz	r1, 8010d96 <__ascii_mbtowc+0x6>
 8010d94:	a901      	add	r1, sp, #4
 8010d96:	b142      	cbz	r2, 8010daa <__ascii_mbtowc+0x1a>
 8010d98:	b14b      	cbz	r3, 8010dae <__ascii_mbtowc+0x1e>
 8010d9a:	7813      	ldrb	r3, [r2, #0]
 8010d9c:	600b      	str	r3, [r1, #0]
 8010d9e:	7812      	ldrb	r2, [r2, #0]
 8010da0:	1c10      	adds	r0, r2, #0
 8010da2:	bf18      	it	ne
 8010da4:	2001      	movne	r0, #1
 8010da6:	b002      	add	sp, #8
 8010da8:	4770      	bx	lr
 8010daa:	4610      	mov	r0, r2
 8010dac:	e7fb      	b.n	8010da6 <__ascii_mbtowc+0x16>
 8010dae:	f06f 0001 	mvn.w	r0, #1
 8010db2:	e7f8      	b.n	8010da6 <__ascii_mbtowc+0x16>

08010db4 <_Balloc>:
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010db8:	4604      	mov	r4, r0
 8010dba:	460e      	mov	r6, r1
 8010dbc:	b93d      	cbnz	r5, 8010dce <_Balloc+0x1a>
 8010dbe:	2010      	movs	r0, #16
 8010dc0:	f7ff ffde 	bl	8010d80 <malloc>
 8010dc4:	6260      	str	r0, [r4, #36]	; 0x24
 8010dc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010dca:	6005      	str	r5, [r0, #0]
 8010dcc:	60c5      	str	r5, [r0, #12]
 8010dce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010dd0:	68eb      	ldr	r3, [r5, #12]
 8010dd2:	b183      	cbz	r3, 8010df6 <_Balloc+0x42>
 8010dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010ddc:	b9b8      	cbnz	r0, 8010e0e <_Balloc+0x5a>
 8010dde:	2101      	movs	r1, #1
 8010de0:	fa01 f506 	lsl.w	r5, r1, r6
 8010de4:	1d6a      	adds	r2, r5, #5
 8010de6:	0092      	lsls	r2, r2, #2
 8010de8:	4620      	mov	r0, r4
 8010dea:	f000 fbe2 	bl	80115b2 <_calloc_r>
 8010dee:	b160      	cbz	r0, 8010e0a <_Balloc+0x56>
 8010df0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010df4:	e00e      	b.n	8010e14 <_Balloc+0x60>
 8010df6:	2221      	movs	r2, #33	; 0x21
 8010df8:	2104      	movs	r1, #4
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f000 fbd9 	bl	80115b2 <_calloc_r>
 8010e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e02:	60e8      	str	r0, [r5, #12]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e4      	bne.n	8010dd4 <_Balloc+0x20>
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	bd70      	pop	{r4, r5, r6, pc}
 8010e0e:	6802      	ldr	r2, [r0, #0]
 8010e10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010e14:	2300      	movs	r3, #0
 8010e16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e1a:	e7f7      	b.n	8010e0c <_Balloc+0x58>

08010e1c <_Bfree>:
 8010e1c:	b570      	push	{r4, r5, r6, lr}
 8010e1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010e20:	4606      	mov	r6, r0
 8010e22:	460d      	mov	r5, r1
 8010e24:	b93c      	cbnz	r4, 8010e36 <_Bfree+0x1a>
 8010e26:	2010      	movs	r0, #16
 8010e28:	f7ff ffaa 	bl	8010d80 <malloc>
 8010e2c:	6270      	str	r0, [r6, #36]	; 0x24
 8010e2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e32:	6004      	str	r4, [r0, #0]
 8010e34:	60c4      	str	r4, [r0, #12]
 8010e36:	b13d      	cbz	r5, 8010e48 <_Bfree+0x2c>
 8010e38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010e3a:	686a      	ldr	r2, [r5, #4]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e42:	6029      	str	r1, [r5, #0]
 8010e44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010e48:	bd70      	pop	{r4, r5, r6, pc}

08010e4a <__multadd>:
 8010e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4e:	690d      	ldr	r5, [r1, #16]
 8010e50:	461f      	mov	r7, r3
 8010e52:	4606      	mov	r6, r0
 8010e54:	460c      	mov	r4, r1
 8010e56:	f101 0c14 	add.w	ip, r1, #20
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f8dc 0000 	ldr.w	r0, [ip]
 8010e60:	b281      	uxth	r1, r0
 8010e62:	fb02 7101 	mla	r1, r2, r1, r7
 8010e66:	0c0f      	lsrs	r7, r1, #16
 8010e68:	0c00      	lsrs	r0, r0, #16
 8010e6a:	fb02 7000 	mla	r0, r2, r0, r7
 8010e6e:	b289      	uxth	r1, r1
 8010e70:	3301      	adds	r3, #1
 8010e72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010e76:	429d      	cmp	r5, r3
 8010e78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010e7c:	f84c 1b04 	str.w	r1, [ip], #4
 8010e80:	dcec      	bgt.n	8010e5c <__multadd+0x12>
 8010e82:	b1d7      	cbz	r7, 8010eba <__multadd+0x70>
 8010e84:	68a3      	ldr	r3, [r4, #8]
 8010e86:	42ab      	cmp	r3, r5
 8010e88:	dc12      	bgt.n	8010eb0 <__multadd+0x66>
 8010e8a:	6861      	ldr	r1, [r4, #4]
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	3101      	adds	r1, #1
 8010e90:	f7ff ff90 	bl	8010db4 <_Balloc>
 8010e94:	6922      	ldr	r2, [r4, #16]
 8010e96:	3202      	adds	r2, #2
 8010e98:	f104 010c 	add.w	r1, r4, #12
 8010e9c:	4680      	mov	r8, r0
 8010e9e:	0092      	lsls	r2, r2, #2
 8010ea0:	300c      	adds	r0, #12
 8010ea2:	f7fc ffe3 	bl	800de6c <memcpy>
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f7ff ffb7 	bl	8010e1c <_Bfree>
 8010eae:	4644      	mov	r4, r8
 8010eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010eb4:	3501      	adds	r5, #1
 8010eb6:	615f      	str	r7, [r3, #20]
 8010eb8:	6125      	str	r5, [r4, #16]
 8010eba:	4620      	mov	r0, r4
 8010ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ec0 <__s2b>:
 8010ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	4615      	mov	r5, r2
 8010ec8:	461f      	mov	r7, r3
 8010eca:	2209      	movs	r2, #9
 8010ecc:	3308      	adds	r3, #8
 8010ece:	4606      	mov	r6, r0
 8010ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	db20      	blt.n	8010f1e <__s2b+0x5e>
 8010edc:	4630      	mov	r0, r6
 8010ede:	f7ff ff69 	bl	8010db4 <_Balloc>
 8010ee2:	9b08      	ldr	r3, [sp, #32]
 8010ee4:	6143      	str	r3, [r0, #20]
 8010ee6:	2d09      	cmp	r5, #9
 8010ee8:	f04f 0301 	mov.w	r3, #1
 8010eec:	6103      	str	r3, [r0, #16]
 8010eee:	dd19      	ble.n	8010f24 <__s2b+0x64>
 8010ef0:	f104 0809 	add.w	r8, r4, #9
 8010ef4:	46c1      	mov	r9, r8
 8010ef6:	442c      	add	r4, r5
 8010ef8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010efc:	4601      	mov	r1, r0
 8010efe:	3b30      	subs	r3, #48	; 0x30
 8010f00:	220a      	movs	r2, #10
 8010f02:	4630      	mov	r0, r6
 8010f04:	f7ff ffa1 	bl	8010e4a <__multadd>
 8010f08:	45a1      	cmp	r9, r4
 8010f0a:	d1f5      	bne.n	8010ef8 <__s2b+0x38>
 8010f0c:	eb08 0405 	add.w	r4, r8, r5
 8010f10:	3c08      	subs	r4, #8
 8010f12:	1b2d      	subs	r5, r5, r4
 8010f14:	1963      	adds	r3, r4, r5
 8010f16:	42bb      	cmp	r3, r7
 8010f18:	db07      	blt.n	8010f2a <__s2b+0x6a>
 8010f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f1e:	0052      	lsls	r2, r2, #1
 8010f20:	3101      	adds	r1, #1
 8010f22:	e7d9      	b.n	8010ed8 <__s2b+0x18>
 8010f24:	340a      	adds	r4, #10
 8010f26:	2509      	movs	r5, #9
 8010f28:	e7f3      	b.n	8010f12 <__s2b+0x52>
 8010f2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f2e:	4601      	mov	r1, r0
 8010f30:	3b30      	subs	r3, #48	; 0x30
 8010f32:	220a      	movs	r2, #10
 8010f34:	4630      	mov	r0, r6
 8010f36:	f7ff ff88 	bl	8010e4a <__multadd>
 8010f3a:	e7eb      	b.n	8010f14 <__s2b+0x54>

08010f3c <__hi0bits>:
 8010f3c:	0c02      	lsrs	r2, r0, #16
 8010f3e:	0412      	lsls	r2, r2, #16
 8010f40:	4603      	mov	r3, r0
 8010f42:	b9b2      	cbnz	r2, 8010f72 <__hi0bits+0x36>
 8010f44:	0403      	lsls	r3, r0, #16
 8010f46:	2010      	movs	r0, #16
 8010f48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010f4c:	bf04      	itt	eq
 8010f4e:	021b      	lsleq	r3, r3, #8
 8010f50:	3008      	addeq	r0, #8
 8010f52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010f56:	bf04      	itt	eq
 8010f58:	011b      	lsleq	r3, r3, #4
 8010f5a:	3004      	addeq	r0, #4
 8010f5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010f60:	bf04      	itt	eq
 8010f62:	009b      	lsleq	r3, r3, #2
 8010f64:	3002      	addeq	r0, #2
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	db06      	blt.n	8010f78 <__hi0bits+0x3c>
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	d503      	bpl.n	8010f76 <__hi0bits+0x3a>
 8010f6e:	3001      	adds	r0, #1
 8010f70:	4770      	bx	lr
 8010f72:	2000      	movs	r0, #0
 8010f74:	e7e8      	b.n	8010f48 <__hi0bits+0xc>
 8010f76:	2020      	movs	r0, #32
 8010f78:	4770      	bx	lr

08010f7a <__lo0bits>:
 8010f7a:	6803      	ldr	r3, [r0, #0]
 8010f7c:	f013 0207 	ands.w	r2, r3, #7
 8010f80:	4601      	mov	r1, r0
 8010f82:	d00b      	beq.n	8010f9c <__lo0bits+0x22>
 8010f84:	07da      	lsls	r2, r3, #31
 8010f86:	d423      	bmi.n	8010fd0 <__lo0bits+0x56>
 8010f88:	0798      	lsls	r0, r3, #30
 8010f8a:	bf49      	itett	mi
 8010f8c:	085b      	lsrmi	r3, r3, #1
 8010f8e:	089b      	lsrpl	r3, r3, #2
 8010f90:	2001      	movmi	r0, #1
 8010f92:	600b      	strmi	r3, [r1, #0]
 8010f94:	bf5c      	itt	pl
 8010f96:	600b      	strpl	r3, [r1, #0]
 8010f98:	2002      	movpl	r0, #2
 8010f9a:	4770      	bx	lr
 8010f9c:	b298      	uxth	r0, r3
 8010f9e:	b9a8      	cbnz	r0, 8010fcc <__lo0bits+0x52>
 8010fa0:	0c1b      	lsrs	r3, r3, #16
 8010fa2:	2010      	movs	r0, #16
 8010fa4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010fa8:	bf04      	itt	eq
 8010faa:	0a1b      	lsreq	r3, r3, #8
 8010fac:	3008      	addeq	r0, #8
 8010fae:	071a      	lsls	r2, r3, #28
 8010fb0:	bf04      	itt	eq
 8010fb2:	091b      	lsreq	r3, r3, #4
 8010fb4:	3004      	addeq	r0, #4
 8010fb6:	079a      	lsls	r2, r3, #30
 8010fb8:	bf04      	itt	eq
 8010fba:	089b      	lsreq	r3, r3, #2
 8010fbc:	3002      	addeq	r0, #2
 8010fbe:	07da      	lsls	r2, r3, #31
 8010fc0:	d402      	bmi.n	8010fc8 <__lo0bits+0x4e>
 8010fc2:	085b      	lsrs	r3, r3, #1
 8010fc4:	d006      	beq.n	8010fd4 <__lo0bits+0x5a>
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	600b      	str	r3, [r1, #0]
 8010fca:	4770      	bx	lr
 8010fcc:	4610      	mov	r0, r2
 8010fce:	e7e9      	b.n	8010fa4 <__lo0bits+0x2a>
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	4770      	bx	lr
 8010fd4:	2020      	movs	r0, #32
 8010fd6:	4770      	bx	lr

08010fd8 <__i2b>:
 8010fd8:	b510      	push	{r4, lr}
 8010fda:	460c      	mov	r4, r1
 8010fdc:	2101      	movs	r1, #1
 8010fde:	f7ff fee9 	bl	8010db4 <_Balloc>
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	6144      	str	r4, [r0, #20]
 8010fe6:	6102      	str	r2, [r0, #16]
 8010fe8:	bd10      	pop	{r4, pc}

08010fea <__multiply>:
 8010fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fee:	4614      	mov	r4, r2
 8010ff0:	690a      	ldr	r2, [r1, #16]
 8010ff2:	6923      	ldr	r3, [r4, #16]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	bfb8      	it	lt
 8010ff8:	460b      	movlt	r3, r1
 8010ffa:	4688      	mov	r8, r1
 8010ffc:	bfbc      	itt	lt
 8010ffe:	46a0      	movlt	r8, r4
 8011000:	461c      	movlt	r4, r3
 8011002:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011006:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801100a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801100e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011012:	eb07 0609 	add.w	r6, r7, r9
 8011016:	42b3      	cmp	r3, r6
 8011018:	bfb8      	it	lt
 801101a:	3101      	addlt	r1, #1
 801101c:	f7ff feca 	bl	8010db4 <_Balloc>
 8011020:	f100 0514 	add.w	r5, r0, #20
 8011024:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011028:	462b      	mov	r3, r5
 801102a:	2200      	movs	r2, #0
 801102c:	4573      	cmp	r3, lr
 801102e:	d316      	bcc.n	801105e <__multiply+0x74>
 8011030:	f104 0214 	add.w	r2, r4, #20
 8011034:	f108 0114 	add.w	r1, r8, #20
 8011038:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801103c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	9b00      	ldr	r3, [sp, #0]
 8011044:	9201      	str	r2, [sp, #4]
 8011046:	4293      	cmp	r3, r2
 8011048:	d80c      	bhi.n	8011064 <__multiply+0x7a>
 801104a:	2e00      	cmp	r6, #0
 801104c:	dd03      	ble.n	8011056 <__multiply+0x6c>
 801104e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011052:	2b00      	cmp	r3, #0
 8011054:	d05d      	beq.n	8011112 <__multiply+0x128>
 8011056:	6106      	str	r6, [r0, #16]
 8011058:	b003      	add	sp, #12
 801105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105e:	f843 2b04 	str.w	r2, [r3], #4
 8011062:	e7e3      	b.n	801102c <__multiply+0x42>
 8011064:	f8b2 b000 	ldrh.w	fp, [r2]
 8011068:	f1bb 0f00 	cmp.w	fp, #0
 801106c:	d023      	beq.n	80110b6 <__multiply+0xcc>
 801106e:	4689      	mov	r9, r1
 8011070:	46ac      	mov	ip, r5
 8011072:	f04f 0800 	mov.w	r8, #0
 8011076:	f859 4b04 	ldr.w	r4, [r9], #4
 801107a:	f8dc a000 	ldr.w	sl, [ip]
 801107e:	b2a3      	uxth	r3, r4
 8011080:	fa1f fa8a 	uxth.w	sl, sl
 8011084:	fb0b a303 	mla	r3, fp, r3, sl
 8011088:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801108c:	f8dc 4000 	ldr.w	r4, [ip]
 8011090:	4443      	add	r3, r8
 8011092:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011096:	fb0b 840a 	mla	r4, fp, sl, r8
 801109a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801109e:	46e2      	mov	sl, ip
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80110a6:	454f      	cmp	r7, r9
 80110a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80110ac:	f84a 3b04 	str.w	r3, [sl], #4
 80110b0:	d82b      	bhi.n	801110a <__multiply+0x120>
 80110b2:	f8cc 8004 	str.w	r8, [ip, #4]
 80110b6:	9b01      	ldr	r3, [sp, #4]
 80110b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80110bc:	3204      	adds	r2, #4
 80110be:	f1ba 0f00 	cmp.w	sl, #0
 80110c2:	d020      	beq.n	8011106 <__multiply+0x11c>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	4689      	mov	r9, r1
 80110c8:	46a8      	mov	r8, r5
 80110ca:	f04f 0b00 	mov.w	fp, #0
 80110ce:	f8b9 c000 	ldrh.w	ip, [r9]
 80110d2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80110d6:	fb0a 440c 	mla	r4, sl, ip, r4
 80110da:	445c      	add	r4, fp
 80110dc:	46c4      	mov	ip, r8
 80110de:	b29b      	uxth	r3, r3
 80110e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80110e4:	f84c 3b04 	str.w	r3, [ip], #4
 80110e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80110ec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80110f0:	0c1b      	lsrs	r3, r3, #16
 80110f2:	fb0a b303 	mla	r3, sl, r3, fp
 80110f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80110fa:	454f      	cmp	r7, r9
 80110fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011100:	d805      	bhi.n	801110e <__multiply+0x124>
 8011102:	f8c8 3004 	str.w	r3, [r8, #4]
 8011106:	3504      	adds	r5, #4
 8011108:	e79b      	b.n	8011042 <__multiply+0x58>
 801110a:	46d4      	mov	ip, sl
 801110c:	e7b3      	b.n	8011076 <__multiply+0x8c>
 801110e:	46e0      	mov	r8, ip
 8011110:	e7dd      	b.n	80110ce <__multiply+0xe4>
 8011112:	3e01      	subs	r6, #1
 8011114:	e799      	b.n	801104a <__multiply+0x60>
	...

08011118 <__pow5mult>:
 8011118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801111c:	4615      	mov	r5, r2
 801111e:	f012 0203 	ands.w	r2, r2, #3
 8011122:	4606      	mov	r6, r0
 8011124:	460f      	mov	r7, r1
 8011126:	d007      	beq.n	8011138 <__pow5mult+0x20>
 8011128:	3a01      	subs	r2, #1
 801112a:	4c21      	ldr	r4, [pc, #132]	; (80111b0 <__pow5mult+0x98>)
 801112c:	2300      	movs	r3, #0
 801112e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011132:	f7ff fe8a 	bl	8010e4a <__multadd>
 8011136:	4607      	mov	r7, r0
 8011138:	10ad      	asrs	r5, r5, #2
 801113a:	d035      	beq.n	80111a8 <__pow5mult+0x90>
 801113c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801113e:	b93c      	cbnz	r4, 8011150 <__pow5mult+0x38>
 8011140:	2010      	movs	r0, #16
 8011142:	f7ff fe1d 	bl	8010d80 <malloc>
 8011146:	6270      	str	r0, [r6, #36]	; 0x24
 8011148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801114c:	6004      	str	r4, [r0, #0]
 801114e:	60c4      	str	r4, [r0, #12]
 8011150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011158:	b94c      	cbnz	r4, 801116e <__pow5mult+0x56>
 801115a:	f240 2171 	movw	r1, #625	; 0x271
 801115e:	4630      	mov	r0, r6
 8011160:	f7ff ff3a 	bl	8010fd8 <__i2b>
 8011164:	2300      	movs	r3, #0
 8011166:	f8c8 0008 	str.w	r0, [r8, #8]
 801116a:	4604      	mov	r4, r0
 801116c:	6003      	str	r3, [r0, #0]
 801116e:	f04f 0800 	mov.w	r8, #0
 8011172:	07eb      	lsls	r3, r5, #31
 8011174:	d50a      	bpl.n	801118c <__pow5mult+0x74>
 8011176:	4639      	mov	r1, r7
 8011178:	4622      	mov	r2, r4
 801117a:	4630      	mov	r0, r6
 801117c:	f7ff ff35 	bl	8010fea <__multiply>
 8011180:	4639      	mov	r1, r7
 8011182:	4681      	mov	r9, r0
 8011184:	4630      	mov	r0, r6
 8011186:	f7ff fe49 	bl	8010e1c <_Bfree>
 801118a:	464f      	mov	r7, r9
 801118c:	106d      	asrs	r5, r5, #1
 801118e:	d00b      	beq.n	80111a8 <__pow5mult+0x90>
 8011190:	6820      	ldr	r0, [r4, #0]
 8011192:	b938      	cbnz	r0, 80111a4 <__pow5mult+0x8c>
 8011194:	4622      	mov	r2, r4
 8011196:	4621      	mov	r1, r4
 8011198:	4630      	mov	r0, r6
 801119a:	f7ff ff26 	bl	8010fea <__multiply>
 801119e:	6020      	str	r0, [r4, #0]
 80111a0:	f8c0 8000 	str.w	r8, [r0]
 80111a4:	4604      	mov	r4, r0
 80111a6:	e7e4      	b.n	8011172 <__pow5mult+0x5a>
 80111a8:	4638      	mov	r0, r7
 80111aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ae:	bf00      	nop
 80111b0:	08012a80 	.word	0x08012a80

080111b4 <__lshift>:
 80111b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b8:	460c      	mov	r4, r1
 80111ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111be:	6923      	ldr	r3, [r4, #16]
 80111c0:	6849      	ldr	r1, [r1, #4]
 80111c2:	eb0a 0903 	add.w	r9, sl, r3
 80111c6:	68a3      	ldr	r3, [r4, #8]
 80111c8:	4607      	mov	r7, r0
 80111ca:	4616      	mov	r6, r2
 80111cc:	f109 0501 	add.w	r5, r9, #1
 80111d0:	42ab      	cmp	r3, r5
 80111d2:	db32      	blt.n	801123a <__lshift+0x86>
 80111d4:	4638      	mov	r0, r7
 80111d6:	f7ff fded 	bl	8010db4 <_Balloc>
 80111da:	2300      	movs	r3, #0
 80111dc:	4680      	mov	r8, r0
 80111de:	f100 0114 	add.w	r1, r0, #20
 80111e2:	461a      	mov	r2, r3
 80111e4:	4553      	cmp	r3, sl
 80111e6:	db2b      	blt.n	8011240 <__lshift+0x8c>
 80111e8:	6920      	ldr	r0, [r4, #16]
 80111ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111ee:	f104 0314 	add.w	r3, r4, #20
 80111f2:	f016 021f 	ands.w	r2, r6, #31
 80111f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111fe:	d025      	beq.n	801124c <__lshift+0x98>
 8011200:	f1c2 0e20 	rsb	lr, r2, #32
 8011204:	2000      	movs	r0, #0
 8011206:	681e      	ldr	r6, [r3, #0]
 8011208:	468a      	mov	sl, r1
 801120a:	4096      	lsls	r6, r2
 801120c:	4330      	orrs	r0, r6
 801120e:	f84a 0b04 	str.w	r0, [sl], #4
 8011212:	f853 0b04 	ldr.w	r0, [r3], #4
 8011216:	459c      	cmp	ip, r3
 8011218:	fa20 f00e 	lsr.w	r0, r0, lr
 801121c:	d814      	bhi.n	8011248 <__lshift+0x94>
 801121e:	6048      	str	r0, [r1, #4]
 8011220:	b108      	cbz	r0, 8011226 <__lshift+0x72>
 8011222:	f109 0502 	add.w	r5, r9, #2
 8011226:	3d01      	subs	r5, #1
 8011228:	4638      	mov	r0, r7
 801122a:	f8c8 5010 	str.w	r5, [r8, #16]
 801122e:	4621      	mov	r1, r4
 8011230:	f7ff fdf4 	bl	8010e1c <_Bfree>
 8011234:	4640      	mov	r0, r8
 8011236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801123a:	3101      	adds	r1, #1
 801123c:	005b      	lsls	r3, r3, #1
 801123e:	e7c7      	b.n	80111d0 <__lshift+0x1c>
 8011240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011244:	3301      	adds	r3, #1
 8011246:	e7cd      	b.n	80111e4 <__lshift+0x30>
 8011248:	4651      	mov	r1, sl
 801124a:	e7dc      	b.n	8011206 <__lshift+0x52>
 801124c:	3904      	subs	r1, #4
 801124e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011252:	f841 2f04 	str.w	r2, [r1, #4]!
 8011256:	459c      	cmp	ip, r3
 8011258:	d8f9      	bhi.n	801124e <__lshift+0x9a>
 801125a:	e7e4      	b.n	8011226 <__lshift+0x72>

0801125c <__mcmp>:
 801125c:	6903      	ldr	r3, [r0, #16]
 801125e:	690a      	ldr	r2, [r1, #16]
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	b530      	push	{r4, r5, lr}
 8011264:	d10c      	bne.n	8011280 <__mcmp+0x24>
 8011266:	0092      	lsls	r2, r2, #2
 8011268:	3014      	adds	r0, #20
 801126a:	3114      	adds	r1, #20
 801126c:	1884      	adds	r4, r0, r2
 801126e:	4411      	add	r1, r2
 8011270:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011274:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011278:	4295      	cmp	r5, r2
 801127a:	d003      	beq.n	8011284 <__mcmp+0x28>
 801127c:	d305      	bcc.n	801128a <__mcmp+0x2e>
 801127e:	2301      	movs	r3, #1
 8011280:	4618      	mov	r0, r3
 8011282:	bd30      	pop	{r4, r5, pc}
 8011284:	42a0      	cmp	r0, r4
 8011286:	d3f3      	bcc.n	8011270 <__mcmp+0x14>
 8011288:	e7fa      	b.n	8011280 <__mcmp+0x24>
 801128a:	f04f 33ff 	mov.w	r3, #4294967295
 801128e:	e7f7      	b.n	8011280 <__mcmp+0x24>

08011290 <__mdiff>:
 8011290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011294:	460d      	mov	r5, r1
 8011296:	4607      	mov	r7, r0
 8011298:	4611      	mov	r1, r2
 801129a:	4628      	mov	r0, r5
 801129c:	4614      	mov	r4, r2
 801129e:	f7ff ffdd 	bl	801125c <__mcmp>
 80112a2:	1e06      	subs	r6, r0, #0
 80112a4:	d108      	bne.n	80112b8 <__mdiff+0x28>
 80112a6:	4631      	mov	r1, r6
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff fd83 	bl	8010db4 <_Balloc>
 80112ae:	2301      	movs	r3, #1
 80112b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80112b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b8:	bfa4      	itt	ge
 80112ba:	4623      	movge	r3, r4
 80112bc:	462c      	movge	r4, r5
 80112be:	4638      	mov	r0, r7
 80112c0:	6861      	ldr	r1, [r4, #4]
 80112c2:	bfa6      	itte	ge
 80112c4:	461d      	movge	r5, r3
 80112c6:	2600      	movge	r6, #0
 80112c8:	2601      	movlt	r6, #1
 80112ca:	f7ff fd73 	bl	8010db4 <_Balloc>
 80112ce:	692b      	ldr	r3, [r5, #16]
 80112d0:	60c6      	str	r6, [r0, #12]
 80112d2:	6926      	ldr	r6, [r4, #16]
 80112d4:	f105 0914 	add.w	r9, r5, #20
 80112d8:	f104 0214 	add.w	r2, r4, #20
 80112dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80112e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80112e4:	f100 0514 	add.w	r5, r0, #20
 80112e8:	f04f 0e00 	mov.w	lr, #0
 80112ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80112f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80112f4:	fa1e f18a 	uxtah	r1, lr, sl
 80112f8:	b2a3      	uxth	r3, r4
 80112fa:	1ac9      	subs	r1, r1, r3
 80112fc:	0c23      	lsrs	r3, r4, #16
 80112fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011302:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011306:	b289      	uxth	r1, r1
 8011308:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801130c:	45c8      	cmp	r8, r9
 801130e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011312:	4694      	mov	ip, r2
 8011314:	f845 3b04 	str.w	r3, [r5], #4
 8011318:	d8e8      	bhi.n	80112ec <__mdiff+0x5c>
 801131a:	45bc      	cmp	ip, r7
 801131c:	d304      	bcc.n	8011328 <__mdiff+0x98>
 801131e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011322:	b183      	cbz	r3, 8011346 <__mdiff+0xb6>
 8011324:	6106      	str	r6, [r0, #16]
 8011326:	e7c5      	b.n	80112b4 <__mdiff+0x24>
 8011328:	f85c 1b04 	ldr.w	r1, [ip], #4
 801132c:	fa1e f381 	uxtah	r3, lr, r1
 8011330:	141a      	asrs	r2, r3, #16
 8011332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011336:	b29b      	uxth	r3, r3
 8011338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801133c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011340:	f845 3b04 	str.w	r3, [r5], #4
 8011344:	e7e9      	b.n	801131a <__mdiff+0x8a>
 8011346:	3e01      	subs	r6, #1
 8011348:	e7e9      	b.n	801131e <__mdiff+0x8e>
	...

0801134c <__ulp>:
 801134c:	4b12      	ldr	r3, [pc, #72]	; (8011398 <__ulp+0x4c>)
 801134e:	ee10 2a90 	vmov	r2, s1
 8011352:	401a      	ands	r2, r3
 8011354:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011358:	2b00      	cmp	r3, #0
 801135a:	dd04      	ble.n	8011366 <__ulp+0x1a>
 801135c:	2000      	movs	r0, #0
 801135e:	4619      	mov	r1, r3
 8011360:	ec41 0b10 	vmov	d0, r0, r1
 8011364:	4770      	bx	lr
 8011366:	425b      	negs	r3, r3
 8011368:	151b      	asrs	r3, r3, #20
 801136a:	2b13      	cmp	r3, #19
 801136c:	f04f 0000 	mov.w	r0, #0
 8011370:	f04f 0100 	mov.w	r1, #0
 8011374:	dc04      	bgt.n	8011380 <__ulp+0x34>
 8011376:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801137a:	fa42 f103 	asr.w	r1, r2, r3
 801137e:	e7ef      	b.n	8011360 <__ulp+0x14>
 8011380:	3b14      	subs	r3, #20
 8011382:	2b1e      	cmp	r3, #30
 8011384:	f04f 0201 	mov.w	r2, #1
 8011388:	bfda      	itte	le
 801138a:	f1c3 031f 	rsble	r3, r3, #31
 801138e:	fa02 f303 	lslle.w	r3, r2, r3
 8011392:	4613      	movgt	r3, r2
 8011394:	4618      	mov	r0, r3
 8011396:	e7e3      	b.n	8011360 <__ulp+0x14>
 8011398:	7ff00000 	.word	0x7ff00000

0801139c <__b2d>:
 801139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139e:	6905      	ldr	r5, [r0, #16]
 80113a0:	f100 0714 	add.w	r7, r0, #20
 80113a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80113a8:	1f2e      	subs	r6, r5, #4
 80113aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80113ae:	4620      	mov	r0, r4
 80113b0:	f7ff fdc4 	bl	8010f3c <__hi0bits>
 80113b4:	f1c0 0320 	rsb	r3, r0, #32
 80113b8:	280a      	cmp	r0, #10
 80113ba:	600b      	str	r3, [r1, #0]
 80113bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011434 <__b2d+0x98>
 80113c0:	dc14      	bgt.n	80113ec <__b2d+0x50>
 80113c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80113c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80113ca:	42b7      	cmp	r7, r6
 80113cc:	ea41 030c 	orr.w	r3, r1, ip
 80113d0:	bf34      	ite	cc
 80113d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113d6:	2100      	movcs	r1, #0
 80113d8:	3015      	adds	r0, #21
 80113da:	fa04 f000 	lsl.w	r0, r4, r0
 80113de:	fa21 f10e 	lsr.w	r1, r1, lr
 80113e2:	ea40 0201 	orr.w	r2, r0, r1
 80113e6:	ec43 2b10 	vmov	d0, r2, r3
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ec:	42b7      	cmp	r7, r6
 80113ee:	bf3a      	itte	cc
 80113f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80113f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113f8:	2100      	movcs	r1, #0
 80113fa:	380b      	subs	r0, #11
 80113fc:	d015      	beq.n	801142a <__b2d+0x8e>
 80113fe:	4084      	lsls	r4, r0
 8011400:	f1c0 0520 	rsb	r5, r0, #32
 8011404:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011408:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801140c:	42be      	cmp	r6, r7
 801140e:	fa21 fc05 	lsr.w	ip, r1, r5
 8011412:	ea44 030c 	orr.w	r3, r4, ip
 8011416:	bf8c      	ite	hi
 8011418:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801141c:	2400      	movls	r4, #0
 801141e:	fa01 f000 	lsl.w	r0, r1, r0
 8011422:	40ec      	lsrs	r4, r5
 8011424:	ea40 0204 	orr.w	r2, r0, r4
 8011428:	e7dd      	b.n	80113e6 <__b2d+0x4a>
 801142a:	ea44 030c 	orr.w	r3, r4, ip
 801142e:	460a      	mov	r2, r1
 8011430:	e7d9      	b.n	80113e6 <__b2d+0x4a>
 8011432:	bf00      	nop
 8011434:	3ff00000 	.word	0x3ff00000

08011438 <__d2b>:
 8011438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801143c:	460e      	mov	r6, r1
 801143e:	2101      	movs	r1, #1
 8011440:	ec59 8b10 	vmov	r8, r9, d0
 8011444:	4615      	mov	r5, r2
 8011446:	f7ff fcb5 	bl	8010db4 <_Balloc>
 801144a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801144e:	4607      	mov	r7, r0
 8011450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011454:	bb34      	cbnz	r4, 80114a4 <__d2b+0x6c>
 8011456:	9301      	str	r3, [sp, #4]
 8011458:	f1b8 0300 	subs.w	r3, r8, #0
 801145c:	d027      	beq.n	80114ae <__d2b+0x76>
 801145e:	a802      	add	r0, sp, #8
 8011460:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011464:	f7ff fd89 	bl	8010f7a <__lo0bits>
 8011468:	9900      	ldr	r1, [sp, #0]
 801146a:	b1f0      	cbz	r0, 80114aa <__d2b+0x72>
 801146c:	9a01      	ldr	r2, [sp, #4]
 801146e:	f1c0 0320 	rsb	r3, r0, #32
 8011472:	fa02 f303 	lsl.w	r3, r2, r3
 8011476:	430b      	orrs	r3, r1
 8011478:	40c2      	lsrs	r2, r0
 801147a:	617b      	str	r3, [r7, #20]
 801147c:	9201      	str	r2, [sp, #4]
 801147e:	9b01      	ldr	r3, [sp, #4]
 8011480:	61bb      	str	r3, [r7, #24]
 8011482:	2b00      	cmp	r3, #0
 8011484:	bf14      	ite	ne
 8011486:	2102      	movne	r1, #2
 8011488:	2101      	moveq	r1, #1
 801148a:	6139      	str	r1, [r7, #16]
 801148c:	b1c4      	cbz	r4, 80114c0 <__d2b+0x88>
 801148e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011492:	4404      	add	r4, r0
 8011494:	6034      	str	r4, [r6, #0]
 8011496:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801149a:	6028      	str	r0, [r5, #0]
 801149c:	4638      	mov	r0, r7
 801149e:	b003      	add	sp, #12
 80114a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114a8:	e7d5      	b.n	8011456 <__d2b+0x1e>
 80114aa:	6179      	str	r1, [r7, #20]
 80114ac:	e7e7      	b.n	801147e <__d2b+0x46>
 80114ae:	a801      	add	r0, sp, #4
 80114b0:	f7ff fd63 	bl	8010f7a <__lo0bits>
 80114b4:	9b01      	ldr	r3, [sp, #4]
 80114b6:	617b      	str	r3, [r7, #20]
 80114b8:	2101      	movs	r1, #1
 80114ba:	6139      	str	r1, [r7, #16]
 80114bc:	3020      	adds	r0, #32
 80114be:	e7e5      	b.n	801148c <__d2b+0x54>
 80114c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80114c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80114c8:	6030      	str	r0, [r6, #0]
 80114ca:	6918      	ldr	r0, [r3, #16]
 80114cc:	f7ff fd36 	bl	8010f3c <__hi0bits>
 80114d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80114d4:	e7e1      	b.n	801149a <__d2b+0x62>

080114d6 <__ratio>:
 80114d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114da:	4688      	mov	r8, r1
 80114dc:	4669      	mov	r1, sp
 80114de:	4681      	mov	r9, r0
 80114e0:	f7ff ff5c 	bl	801139c <__b2d>
 80114e4:	a901      	add	r1, sp, #4
 80114e6:	4640      	mov	r0, r8
 80114e8:	ec57 6b10 	vmov	r6, r7, d0
 80114ec:	f7ff ff56 	bl	801139c <__b2d>
 80114f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80114f8:	eba3 0c02 	sub.w	ip, r3, r2
 80114fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011500:	1a9b      	subs	r3, r3, r2
 8011502:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011506:	ec5b ab10 	vmov	sl, fp, d0
 801150a:	2b00      	cmp	r3, #0
 801150c:	bfce      	itee	gt
 801150e:	463a      	movgt	r2, r7
 8011510:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011514:	465a      	movle	r2, fp
 8011516:	4659      	mov	r1, fp
 8011518:	463d      	mov	r5, r7
 801151a:	bfd4      	ite	le
 801151c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011520:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011524:	4630      	mov	r0, r6
 8011526:	ee10 2a10 	vmov	r2, s0
 801152a:	460b      	mov	r3, r1
 801152c:	4629      	mov	r1, r5
 801152e:	f7ef f98d 	bl	800084c <__aeabi_ddiv>
 8011532:	ec41 0b10 	vmov	d0, r0, r1
 8011536:	b003      	add	sp, #12
 8011538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801153c <__copybits>:
 801153c:	3901      	subs	r1, #1
 801153e:	b510      	push	{r4, lr}
 8011540:	1149      	asrs	r1, r1, #5
 8011542:	6914      	ldr	r4, [r2, #16]
 8011544:	3101      	adds	r1, #1
 8011546:	f102 0314 	add.w	r3, r2, #20
 801154a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801154e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011552:	42a3      	cmp	r3, r4
 8011554:	4602      	mov	r2, r0
 8011556:	d303      	bcc.n	8011560 <__copybits+0x24>
 8011558:	2300      	movs	r3, #0
 801155a:	428a      	cmp	r2, r1
 801155c:	d305      	bcc.n	801156a <__copybits+0x2e>
 801155e:	bd10      	pop	{r4, pc}
 8011560:	f853 2b04 	ldr.w	r2, [r3], #4
 8011564:	f840 2b04 	str.w	r2, [r0], #4
 8011568:	e7f3      	b.n	8011552 <__copybits+0x16>
 801156a:	f842 3b04 	str.w	r3, [r2], #4
 801156e:	e7f4      	b.n	801155a <__copybits+0x1e>

08011570 <__any_on>:
 8011570:	f100 0214 	add.w	r2, r0, #20
 8011574:	6900      	ldr	r0, [r0, #16]
 8011576:	114b      	asrs	r3, r1, #5
 8011578:	4298      	cmp	r0, r3
 801157a:	b510      	push	{r4, lr}
 801157c:	db11      	blt.n	80115a2 <__any_on+0x32>
 801157e:	dd0a      	ble.n	8011596 <__any_on+0x26>
 8011580:	f011 011f 	ands.w	r1, r1, #31
 8011584:	d007      	beq.n	8011596 <__any_on+0x26>
 8011586:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801158a:	fa24 f001 	lsr.w	r0, r4, r1
 801158e:	fa00 f101 	lsl.w	r1, r0, r1
 8011592:	428c      	cmp	r4, r1
 8011594:	d10b      	bne.n	80115ae <__any_on+0x3e>
 8011596:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801159a:	4293      	cmp	r3, r2
 801159c:	d803      	bhi.n	80115a6 <__any_on+0x36>
 801159e:	2000      	movs	r0, #0
 80115a0:	bd10      	pop	{r4, pc}
 80115a2:	4603      	mov	r3, r0
 80115a4:	e7f7      	b.n	8011596 <__any_on+0x26>
 80115a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115aa:	2900      	cmp	r1, #0
 80115ac:	d0f5      	beq.n	801159a <__any_on+0x2a>
 80115ae:	2001      	movs	r0, #1
 80115b0:	e7f6      	b.n	80115a0 <__any_on+0x30>

080115b2 <_calloc_r>:
 80115b2:	b538      	push	{r3, r4, r5, lr}
 80115b4:	fb02 f401 	mul.w	r4, r2, r1
 80115b8:	4621      	mov	r1, r4
 80115ba:	f000 f857 	bl	801166c <_malloc_r>
 80115be:	4605      	mov	r5, r0
 80115c0:	b118      	cbz	r0, 80115ca <_calloc_r+0x18>
 80115c2:	4622      	mov	r2, r4
 80115c4:	2100      	movs	r1, #0
 80115c6:	f7fc fc5c 	bl	800de82 <memset>
 80115ca:	4628      	mov	r0, r5
 80115cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080115d0 <_free_r>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4605      	mov	r5, r0
 80115d4:	2900      	cmp	r1, #0
 80115d6:	d045      	beq.n	8011664 <_free_r+0x94>
 80115d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115dc:	1f0c      	subs	r4, r1, #4
 80115de:	2b00      	cmp	r3, #0
 80115e0:	bfb8      	it	lt
 80115e2:	18e4      	addlt	r4, r4, r3
 80115e4:	f000 fdc3 	bl	801216e <__malloc_lock>
 80115e8:	4a1f      	ldr	r2, [pc, #124]	; (8011668 <_free_r+0x98>)
 80115ea:	6813      	ldr	r3, [r2, #0]
 80115ec:	4610      	mov	r0, r2
 80115ee:	b933      	cbnz	r3, 80115fe <_free_r+0x2e>
 80115f0:	6063      	str	r3, [r4, #4]
 80115f2:	6014      	str	r4, [r2, #0]
 80115f4:	4628      	mov	r0, r5
 80115f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115fa:	f000 bdb9 	b.w	8012170 <__malloc_unlock>
 80115fe:	42a3      	cmp	r3, r4
 8011600:	d90c      	bls.n	801161c <_free_r+0x4c>
 8011602:	6821      	ldr	r1, [r4, #0]
 8011604:	1862      	adds	r2, r4, r1
 8011606:	4293      	cmp	r3, r2
 8011608:	bf04      	itt	eq
 801160a:	681a      	ldreq	r2, [r3, #0]
 801160c:	685b      	ldreq	r3, [r3, #4]
 801160e:	6063      	str	r3, [r4, #4]
 8011610:	bf04      	itt	eq
 8011612:	1852      	addeq	r2, r2, r1
 8011614:	6022      	streq	r2, [r4, #0]
 8011616:	6004      	str	r4, [r0, #0]
 8011618:	e7ec      	b.n	80115f4 <_free_r+0x24>
 801161a:	4613      	mov	r3, r2
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	b10a      	cbz	r2, 8011624 <_free_r+0x54>
 8011620:	42a2      	cmp	r2, r4
 8011622:	d9fa      	bls.n	801161a <_free_r+0x4a>
 8011624:	6819      	ldr	r1, [r3, #0]
 8011626:	1858      	adds	r0, r3, r1
 8011628:	42a0      	cmp	r0, r4
 801162a:	d10b      	bne.n	8011644 <_free_r+0x74>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	4401      	add	r1, r0
 8011630:	1858      	adds	r0, r3, r1
 8011632:	4282      	cmp	r2, r0
 8011634:	6019      	str	r1, [r3, #0]
 8011636:	d1dd      	bne.n	80115f4 <_free_r+0x24>
 8011638:	6810      	ldr	r0, [r2, #0]
 801163a:	6852      	ldr	r2, [r2, #4]
 801163c:	605a      	str	r2, [r3, #4]
 801163e:	4401      	add	r1, r0
 8011640:	6019      	str	r1, [r3, #0]
 8011642:	e7d7      	b.n	80115f4 <_free_r+0x24>
 8011644:	d902      	bls.n	801164c <_free_r+0x7c>
 8011646:	230c      	movs	r3, #12
 8011648:	602b      	str	r3, [r5, #0]
 801164a:	e7d3      	b.n	80115f4 <_free_r+0x24>
 801164c:	6820      	ldr	r0, [r4, #0]
 801164e:	1821      	adds	r1, r4, r0
 8011650:	428a      	cmp	r2, r1
 8011652:	bf04      	itt	eq
 8011654:	6811      	ldreq	r1, [r2, #0]
 8011656:	6852      	ldreq	r2, [r2, #4]
 8011658:	6062      	str	r2, [r4, #4]
 801165a:	bf04      	itt	eq
 801165c:	1809      	addeq	r1, r1, r0
 801165e:	6021      	streq	r1, [r4, #0]
 8011660:	605c      	str	r4, [r3, #4]
 8011662:	e7c7      	b.n	80115f4 <_free_r+0x24>
 8011664:	bd38      	pop	{r3, r4, r5, pc}
 8011666:	bf00      	nop
 8011668:	2001d1f0 	.word	0x2001d1f0

0801166c <_malloc_r>:
 801166c:	b570      	push	{r4, r5, r6, lr}
 801166e:	1ccd      	adds	r5, r1, #3
 8011670:	f025 0503 	bic.w	r5, r5, #3
 8011674:	3508      	adds	r5, #8
 8011676:	2d0c      	cmp	r5, #12
 8011678:	bf38      	it	cc
 801167a:	250c      	movcc	r5, #12
 801167c:	2d00      	cmp	r5, #0
 801167e:	4606      	mov	r6, r0
 8011680:	db01      	blt.n	8011686 <_malloc_r+0x1a>
 8011682:	42a9      	cmp	r1, r5
 8011684:	d903      	bls.n	801168e <_malloc_r+0x22>
 8011686:	230c      	movs	r3, #12
 8011688:	6033      	str	r3, [r6, #0]
 801168a:	2000      	movs	r0, #0
 801168c:	bd70      	pop	{r4, r5, r6, pc}
 801168e:	f000 fd6e 	bl	801216e <__malloc_lock>
 8011692:	4a21      	ldr	r2, [pc, #132]	; (8011718 <_malloc_r+0xac>)
 8011694:	6814      	ldr	r4, [r2, #0]
 8011696:	4621      	mov	r1, r4
 8011698:	b991      	cbnz	r1, 80116c0 <_malloc_r+0x54>
 801169a:	4c20      	ldr	r4, [pc, #128]	; (801171c <_malloc_r+0xb0>)
 801169c:	6823      	ldr	r3, [r4, #0]
 801169e:	b91b      	cbnz	r3, 80116a8 <_malloc_r+0x3c>
 80116a0:	4630      	mov	r0, r6
 80116a2:	f000 facf 	bl	8011c44 <_sbrk_r>
 80116a6:	6020      	str	r0, [r4, #0]
 80116a8:	4629      	mov	r1, r5
 80116aa:	4630      	mov	r0, r6
 80116ac:	f000 faca 	bl	8011c44 <_sbrk_r>
 80116b0:	1c43      	adds	r3, r0, #1
 80116b2:	d124      	bne.n	80116fe <_malloc_r+0x92>
 80116b4:	230c      	movs	r3, #12
 80116b6:	6033      	str	r3, [r6, #0]
 80116b8:	4630      	mov	r0, r6
 80116ba:	f000 fd59 	bl	8012170 <__malloc_unlock>
 80116be:	e7e4      	b.n	801168a <_malloc_r+0x1e>
 80116c0:	680b      	ldr	r3, [r1, #0]
 80116c2:	1b5b      	subs	r3, r3, r5
 80116c4:	d418      	bmi.n	80116f8 <_malloc_r+0x8c>
 80116c6:	2b0b      	cmp	r3, #11
 80116c8:	d90f      	bls.n	80116ea <_malloc_r+0x7e>
 80116ca:	600b      	str	r3, [r1, #0]
 80116cc:	50cd      	str	r5, [r1, r3]
 80116ce:	18cc      	adds	r4, r1, r3
 80116d0:	4630      	mov	r0, r6
 80116d2:	f000 fd4d 	bl	8012170 <__malloc_unlock>
 80116d6:	f104 000b 	add.w	r0, r4, #11
 80116da:	1d23      	adds	r3, r4, #4
 80116dc:	f020 0007 	bic.w	r0, r0, #7
 80116e0:	1ac3      	subs	r3, r0, r3
 80116e2:	d0d3      	beq.n	801168c <_malloc_r+0x20>
 80116e4:	425a      	negs	r2, r3
 80116e6:	50e2      	str	r2, [r4, r3]
 80116e8:	e7d0      	b.n	801168c <_malloc_r+0x20>
 80116ea:	428c      	cmp	r4, r1
 80116ec:	684b      	ldr	r3, [r1, #4]
 80116ee:	bf16      	itet	ne
 80116f0:	6063      	strne	r3, [r4, #4]
 80116f2:	6013      	streq	r3, [r2, #0]
 80116f4:	460c      	movne	r4, r1
 80116f6:	e7eb      	b.n	80116d0 <_malloc_r+0x64>
 80116f8:	460c      	mov	r4, r1
 80116fa:	6849      	ldr	r1, [r1, #4]
 80116fc:	e7cc      	b.n	8011698 <_malloc_r+0x2c>
 80116fe:	1cc4      	adds	r4, r0, #3
 8011700:	f024 0403 	bic.w	r4, r4, #3
 8011704:	42a0      	cmp	r0, r4
 8011706:	d005      	beq.n	8011714 <_malloc_r+0xa8>
 8011708:	1a21      	subs	r1, r4, r0
 801170a:	4630      	mov	r0, r6
 801170c:	f000 fa9a 	bl	8011c44 <_sbrk_r>
 8011710:	3001      	adds	r0, #1
 8011712:	d0cf      	beq.n	80116b4 <_malloc_r+0x48>
 8011714:	6025      	str	r5, [r4, #0]
 8011716:	e7db      	b.n	80116d0 <_malloc_r+0x64>
 8011718:	2001d1f0 	.word	0x2001d1f0
 801171c:	2001d1f4 	.word	0x2001d1f4

08011720 <__ssputs_r>:
 8011720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011724:	688e      	ldr	r6, [r1, #8]
 8011726:	429e      	cmp	r6, r3
 8011728:	4682      	mov	sl, r0
 801172a:	460c      	mov	r4, r1
 801172c:	4690      	mov	r8, r2
 801172e:	4699      	mov	r9, r3
 8011730:	d837      	bhi.n	80117a2 <__ssputs_r+0x82>
 8011732:	898a      	ldrh	r2, [r1, #12]
 8011734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011738:	d031      	beq.n	801179e <__ssputs_r+0x7e>
 801173a:	6825      	ldr	r5, [r4, #0]
 801173c:	6909      	ldr	r1, [r1, #16]
 801173e:	1a6f      	subs	r7, r5, r1
 8011740:	6965      	ldr	r5, [r4, #20]
 8011742:	2302      	movs	r3, #2
 8011744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011748:	fb95 f5f3 	sdiv	r5, r5, r3
 801174c:	f109 0301 	add.w	r3, r9, #1
 8011750:	443b      	add	r3, r7
 8011752:	429d      	cmp	r5, r3
 8011754:	bf38      	it	cc
 8011756:	461d      	movcc	r5, r3
 8011758:	0553      	lsls	r3, r2, #21
 801175a:	d530      	bpl.n	80117be <__ssputs_r+0x9e>
 801175c:	4629      	mov	r1, r5
 801175e:	f7ff ff85 	bl	801166c <_malloc_r>
 8011762:	4606      	mov	r6, r0
 8011764:	b950      	cbnz	r0, 801177c <__ssputs_r+0x5c>
 8011766:	230c      	movs	r3, #12
 8011768:	f8ca 3000 	str.w	r3, [sl]
 801176c:	89a3      	ldrh	r3, [r4, #12]
 801176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011772:	81a3      	strh	r3, [r4, #12]
 8011774:	f04f 30ff 	mov.w	r0, #4294967295
 8011778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801177c:	463a      	mov	r2, r7
 801177e:	6921      	ldr	r1, [r4, #16]
 8011780:	f7fc fb74 	bl	800de6c <memcpy>
 8011784:	89a3      	ldrh	r3, [r4, #12]
 8011786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801178a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801178e:	81a3      	strh	r3, [r4, #12]
 8011790:	6126      	str	r6, [r4, #16]
 8011792:	6165      	str	r5, [r4, #20]
 8011794:	443e      	add	r6, r7
 8011796:	1bed      	subs	r5, r5, r7
 8011798:	6026      	str	r6, [r4, #0]
 801179a:	60a5      	str	r5, [r4, #8]
 801179c:	464e      	mov	r6, r9
 801179e:	454e      	cmp	r6, r9
 80117a0:	d900      	bls.n	80117a4 <__ssputs_r+0x84>
 80117a2:	464e      	mov	r6, r9
 80117a4:	4632      	mov	r2, r6
 80117a6:	4641      	mov	r1, r8
 80117a8:	6820      	ldr	r0, [r4, #0]
 80117aa:	f000 fcc7 	bl	801213c <memmove>
 80117ae:	68a3      	ldr	r3, [r4, #8]
 80117b0:	1b9b      	subs	r3, r3, r6
 80117b2:	60a3      	str	r3, [r4, #8]
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	441e      	add	r6, r3
 80117b8:	6026      	str	r6, [r4, #0]
 80117ba:	2000      	movs	r0, #0
 80117bc:	e7dc      	b.n	8011778 <__ssputs_r+0x58>
 80117be:	462a      	mov	r2, r5
 80117c0:	f000 fcd7 	bl	8012172 <_realloc_r>
 80117c4:	4606      	mov	r6, r0
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d1e2      	bne.n	8011790 <__ssputs_r+0x70>
 80117ca:	6921      	ldr	r1, [r4, #16]
 80117cc:	4650      	mov	r0, sl
 80117ce:	f7ff feff 	bl	80115d0 <_free_r>
 80117d2:	e7c8      	b.n	8011766 <__ssputs_r+0x46>

080117d4 <_svfiprintf_r>:
 80117d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	461d      	mov	r5, r3
 80117da:	898b      	ldrh	r3, [r1, #12]
 80117dc:	061f      	lsls	r7, r3, #24
 80117de:	b09d      	sub	sp, #116	; 0x74
 80117e0:	4680      	mov	r8, r0
 80117e2:	460c      	mov	r4, r1
 80117e4:	4616      	mov	r6, r2
 80117e6:	d50f      	bpl.n	8011808 <_svfiprintf_r+0x34>
 80117e8:	690b      	ldr	r3, [r1, #16]
 80117ea:	b96b      	cbnz	r3, 8011808 <_svfiprintf_r+0x34>
 80117ec:	2140      	movs	r1, #64	; 0x40
 80117ee:	f7ff ff3d 	bl	801166c <_malloc_r>
 80117f2:	6020      	str	r0, [r4, #0]
 80117f4:	6120      	str	r0, [r4, #16]
 80117f6:	b928      	cbnz	r0, 8011804 <_svfiprintf_r+0x30>
 80117f8:	230c      	movs	r3, #12
 80117fa:	f8c8 3000 	str.w	r3, [r8]
 80117fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011802:	e0c8      	b.n	8011996 <_svfiprintf_r+0x1c2>
 8011804:	2340      	movs	r3, #64	; 0x40
 8011806:	6163      	str	r3, [r4, #20]
 8011808:	2300      	movs	r3, #0
 801180a:	9309      	str	r3, [sp, #36]	; 0x24
 801180c:	2320      	movs	r3, #32
 801180e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011812:	2330      	movs	r3, #48	; 0x30
 8011814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011818:	9503      	str	r5, [sp, #12]
 801181a:	f04f 0b01 	mov.w	fp, #1
 801181e:	4637      	mov	r7, r6
 8011820:	463d      	mov	r5, r7
 8011822:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011826:	b10b      	cbz	r3, 801182c <_svfiprintf_r+0x58>
 8011828:	2b25      	cmp	r3, #37	; 0x25
 801182a:	d13e      	bne.n	80118aa <_svfiprintf_r+0xd6>
 801182c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011830:	d00b      	beq.n	801184a <_svfiprintf_r+0x76>
 8011832:	4653      	mov	r3, sl
 8011834:	4632      	mov	r2, r6
 8011836:	4621      	mov	r1, r4
 8011838:	4640      	mov	r0, r8
 801183a:	f7ff ff71 	bl	8011720 <__ssputs_r>
 801183e:	3001      	adds	r0, #1
 8011840:	f000 80a4 	beq.w	801198c <_svfiprintf_r+0x1b8>
 8011844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011846:	4453      	add	r3, sl
 8011848:	9309      	str	r3, [sp, #36]	; 0x24
 801184a:	783b      	ldrb	r3, [r7, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	f000 809d 	beq.w	801198c <_svfiprintf_r+0x1b8>
 8011852:	2300      	movs	r3, #0
 8011854:	f04f 32ff 	mov.w	r2, #4294967295
 8011858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801185c:	9304      	str	r3, [sp, #16]
 801185e:	9307      	str	r3, [sp, #28]
 8011860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011864:	931a      	str	r3, [sp, #104]	; 0x68
 8011866:	462f      	mov	r7, r5
 8011868:	2205      	movs	r2, #5
 801186a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801186e:	4850      	ldr	r0, [pc, #320]	; (80119b0 <_svfiprintf_r+0x1dc>)
 8011870:	f7ee fcb6 	bl	80001e0 <memchr>
 8011874:	9b04      	ldr	r3, [sp, #16]
 8011876:	b9d0      	cbnz	r0, 80118ae <_svfiprintf_r+0xda>
 8011878:	06d9      	lsls	r1, r3, #27
 801187a:	bf44      	itt	mi
 801187c:	2220      	movmi	r2, #32
 801187e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011882:	071a      	lsls	r2, r3, #28
 8011884:	bf44      	itt	mi
 8011886:	222b      	movmi	r2, #43	; 0x2b
 8011888:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801188c:	782a      	ldrb	r2, [r5, #0]
 801188e:	2a2a      	cmp	r2, #42	; 0x2a
 8011890:	d015      	beq.n	80118be <_svfiprintf_r+0xea>
 8011892:	9a07      	ldr	r2, [sp, #28]
 8011894:	462f      	mov	r7, r5
 8011896:	2000      	movs	r0, #0
 8011898:	250a      	movs	r5, #10
 801189a:	4639      	mov	r1, r7
 801189c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118a0:	3b30      	subs	r3, #48	; 0x30
 80118a2:	2b09      	cmp	r3, #9
 80118a4:	d94d      	bls.n	8011942 <_svfiprintf_r+0x16e>
 80118a6:	b1b8      	cbz	r0, 80118d8 <_svfiprintf_r+0x104>
 80118a8:	e00f      	b.n	80118ca <_svfiprintf_r+0xf6>
 80118aa:	462f      	mov	r7, r5
 80118ac:	e7b8      	b.n	8011820 <_svfiprintf_r+0x4c>
 80118ae:	4a40      	ldr	r2, [pc, #256]	; (80119b0 <_svfiprintf_r+0x1dc>)
 80118b0:	1a80      	subs	r0, r0, r2
 80118b2:	fa0b f000 	lsl.w	r0, fp, r0
 80118b6:	4318      	orrs	r0, r3
 80118b8:	9004      	str	r0, [sp, #16]
 80118ba:	463d      	mov	r5, r7
 80118bc:	e7d3      	b.n	8011866 <_svfiprintf_r+0x92>
 80118be:	9a03      	ldr	r2, [sp, #12]
 80118c0:	1d11      	adds	r1, r2, #4
 80118c2:	6812      	ldr	r2, [r2, #0]
 80118c4:	9103      	str	r1, [sp, #12]
 80118c6:	2a00      	cmp	r2, #0
 80118c8:	db01      	blt.n	80118ce <_svfiprintf_r+0xfa>
 80118ca:	9207      	str	r2, [sp, #28]
 80118cc:	e004      	b.n	80118d8 <_svfiprintf_r+0x104>
 80118ce:	4252      	negs	r2, r2
 80118d0:	f043 0302 	orr.w	r3, r3, #2
 80118d4:	9207      	str	r2, [sp, #28]
 80118d6:	9304      	str	r3, [sp, #16]
 80118d8:	783b      	ldrb	r3, [r7, #0]
 80118da:	2b2e      	cmp	r3, #46	; 0x2e
 80118dc:	d10c      	bne.n	80118f8 <_svfiprintf_r+0x124>
 80118de:	787b      	ldrb	r3, [r7, #1]
 80118e0:	2b2a      	cmp	r3, #42	; 0x2a
 80118e2:	d133      	bne.n	801194c <_svfiprintf_r+0x178>
 80118e4:	9b03      	ldr	r3, [sp, #12]
 80118e6:	1d1a      	adds	r2, r3, #4
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	9203      	str	r2, [sp, #12]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	bfb8      	it	lt
 80118f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80118f4:	3702      	adds	r7, #2
 80118f6:	9305      	str	r3, [sp, #20]
 80118f8:	4d2e      	ldr	r5, [pc, #184]	; (80119b4 <_svfiprintf_r+0x1e0>)
 80118fa:	7839      	ldrb	r1, [r7, #0]
 80118fc:	2203      	movs	r2, #3
 80118fe:	4628      	mov	r0, r5
 8011900:	f7ee fc6e 	bl	80001e0 <memchr>
 8011904:	b138      	cbz	r0, 8011916 <_svfiprintf_r+0x142>
 8011906:	2340      	movs	r3, #64	; 0x40
 8011908:	1b40      	subs	r0, r0, r5
 801190a:	fa03 f000 	lsl.w	r0, r3, r0
 801190e:	9b04      	ldr	r3, [sp, #16]
 8011910:	4303      	orrs	r3, r0
 8011912:	3701      	adds	r7, #1
 8011914:	9304      	str	r3, [sp, #16]
 8011916:	7839      	ldrb	r1, [r7, #0]
 8011918:	4827      	ldr	r0, [pc, #156]	; (80119b8 <_svfiprintf_r+0x1e4>)
 801191a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801191e:	2206      	movs	r2, #6
 8011920:	1c7e      	adds	r6, r7, #1
 8011922:	f7ee fc5d 	bl	80001e0 <memchr>
 8011926:	2800      	cmp	r0, #0
 8011928:	d038      	beq.n	801199c <_svfiprintf_r+0x1c8>
 801192a:	4b24      	ldr	r3, [pc, #144]	; (80119bc <_svfiprintf_r+0x1e8>)
 801192c:	bb13      	cbnz	r3, 8011974 <_svfiprintf_r+0x1a0>
 801192e:	9b03      	ldr	r3, [sp, #12]
 8011930:	3307      	adds	r3, #7
 8011932:	f023 0307 	bic.w	r3, r3, #7
 8011936:	3308      	adds	r3, #8
 8011938:	9303      	str	r3, [sp, #12]
 801193a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801193c:	444b      	add	r3, r9
 801193e:	9309      	str	r3, [sp, #36]	; 0x24
 8011940:	e76d      	b.n	801181e <_svfiprintf_r+0x4a>
 8011942:	fb05 3202 	mla	r2, r5, r2, r3
 8011946:	2001      	movs	r0, #1
 8011948:	460f      	mov	r7, r1
 801194a:	e7a6      	b.n	801189a <_svfiprintf_r+0xc6>
 801194c:	2300      	movs	r3, #0
 801194e:	3701      	adds	r7, #1
 8011950:	9305      	str	r3, [sp, #20]
 8011952:	4619      	mov	r1, r3
 8011954:	250a      	movs	r5, #10
 8011956:	4638      	mov	r0, r7
 8011958:	f810 2b01 	ldrb.w	r2, [r0], #1
 801195c:	3a30      	subs	r2, #48	; 0x30
 801195e:	2a09      	cmp	r2, #9
 8011960:	d903      	bls.n	801196a <_svfiprintf_r+0x196>
 8011962:	2b00      	cmp	r3, #0
 8011964:	d0c8      	beq.n	80118f8 <_svfiprintf_r+0x124>
 8011966:	9105      	str	r1, [sp, #20]
 8011968:	e7c6      	b.n	80118f8 <_svfiprintf_r+0x124>
 801196a:	fb05 2101 	mla	r1, r5, r1, r2
 801196e:	2301      	movs	r3, #1
 8011970:	4607      	mov	r7, r0
 8011972:	e7f0      	b.n	8011956 <_svfiprintf_r+0x182>
 8011974:	ab03      	add	r3, sp, #12
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	4622      	mov	r2, r4
 801197a:	4b11      	ldr	r3, [pc, #68]	; (80119c0 <_svfiprintf_r+0x1ec>)
 801197c:	a904      	add	r1, sp, #16
 801197e:	4640      	mov	r0, r8
 8011980:	f7fc fb1c 	bl	800dfbc <_printf_float>
 8011984:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011988:	4681      	mov	r9, r0
 801198a:	d1d6      	bne.n	801193a <_svfiprintf_r+0x166>
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	065b      	lsls	r3, r3, #25
 8011990:	f53f af35 	bmi.w	80117fe <_svfiprintf_r+0x2a>
 8011994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011996:	b01d      	add	sp, #116	; 0x74
 8011998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801199c:	ab03      	add	r3, sp, #12
 801199e:	9300      	str	r3, [sp, #0]
 80119a0:	4622      	mov	r2, r4
 80119a2:	4b07      	ldr	r3, [pc, #28]	; (80119c0 <_svfiprintf_r+0x1ec>)
 80119a4:	a904      	add	r1, sp, #16
 80119a6:	4640      	mov	r0, r8
 80119a8:	f7fc fdbe 	bl	800e528 <_printf_i>
 80119ac:	e7ea      	b.n	8011984 <_svfiprintf_r+0x1b0>
 80119ae:	bf00      	nop
 80119b0:	08012a8c 	.word	0x08012a8c
 80119b4:	08012a92 	.word	0x08012a92
 80119b8:	08012a96 	.word	0x08012a96
 80119bc:	0800dfbd 	.word	0x0800dfbd
 80119c0:	08011721 	.word	0x08011721

080119c4 <__sfputc_r>:
 80119c4:	6893      	ldr	r3, [r2, #8]
 80119c6:	3b01      	subs	r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	b410      	push	{r4}
 80119cc:	6093      	str	r3, [r2, #8]
 80119ce:	da08      	bge.n	80119e2 <__sfputc_r+0x1e>
 80119d0:	6994      	ldr	r4, [r2, #24]
 80119d2:	42a3      	cmp	r3, r4
 80119d4:	db01      	blt.n	80119da <__sfputc_r+0x16>
 80119d6:	290a      	cmp	r1, #10
 80119d8:	d103      	bne.n	80119e2 <__sfputc_r+0x1e>
 80119da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119de:	f000 b997 	b.w	8011d10 <__swbuf_r>
 80119e2:	6813      	ldr	r3, [r2, #0]
 80119e4:	1c58      	adds	r0, r3, #1
 80119e6:	6010      	str	r0, [r2, #0]
 80119e8:	7019      	strb	r1, [r3, #0]
 80119ea:	4608      	mov	r0, r1
 80119ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119f0:	4770      	bx	lr

080119f2 <__sfputs_r>:
 80119f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f4:	4606      	mov	r6, r0
 80119f6:	460f      	mov	r7, r1
 80119f8:	4614      	mov	r4, r2
 80119fa:	18d5      	adds	r5, r2, r3
 80119fc:	42ac      	cmp	r4, r5
 80119fe:	d101      	bne.n	8011a04 <__sfputs_r+0x12>
 8011a00:	2000      	movs	r0, #0
 8011a02:	e007      	b.n	8011a14 <__sfputs_r+0x22>
 8011a04:	463a      	mov	r2, r7
 8011a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	f7ff ffda 	bl	80119c4 <__sfputc_r>
 8011a10:	1c43      	adds	r3, r0, #1
 8011a12:	d1f3      	bne.n	80119fc <__sfputs_r+0xa>
 8011a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a18 <_vfiprintf_r>:
 8011a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a1c:	460c      	mov	r4, r1
 8011a1e:	b09d      	sub	sp, #116	; 0x74
 8011a20:	4617      	mov	r7, r2
 8011a22:	461d      	mov	r5, r3
 8011a24:	4606      	mov	r6, r0
 8011a26:	b118      	cbz	r0, 8011a30 <_vfiprintf_r+0x18>
 8011a28:	6983      	ldr	r3, [r0, #24]
 8011a2a:	b90b      	cbnz	r3, 8011a30 <_vfiprintf_r+0x18>
 8011a2c:	f7fe fde4 	bl	80105f8 <__sinit>
 8011a30:	4b7c      	ldr	r3, [pc, #496]	; (8011c24 <_vfiprintf_r+0x20c>)
 8011a32:	429c      	cmp	r4, r3
 8011a34:	d158      	bne.n	8011ae8 <_vfiprintf_r+0xd0>
 8011a36:	6874      	ldr	r4, [r6, #4]
 8011a38:	89a3      	ldrh	r3, [r4, #12]
 8011a3a:	0718      	lsls	r0, r3, #28
 8011a3c:	d55e      	bpl.n	8011afc <_vfiprintf_r+0xe4>
 8011a3e:	6923      	ldr	r3, [r4, #16]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d05b      	beq.n	8011afc <_vfiprintf_r+0xe4>
 8011a44:	2300      	movs	r3, #0
 8011a46:	9309      	str	r3, [sp, #36]	; 0x24
 8011a48:	2320      	movs	r3, #32
 8011a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a4e:	2330      	movs	r3, #48	; 0x30
 8011a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a54:	9503      	str	r5, [sp, #12]
 8011a56:	f04f 0b01 	mov.w	fp, #1
 8011a5a:	46b8      	mov	r8, r7
 8011a5c:	4645      	mov	r5, r8
 8011a5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011a62:	b10b      	cbz	r3, 8011a68 <_vfiprintf_r+0x50>
 8011a64:	2b25      	cmp	r3, #37	; 0x25
 8011a66:	d154      	bne.n	8011b12 <_vfiprintf_r+0xfa>
 8011a68:	ebb8 0a07 	subs.w	sl, r8, r7
 8011a6c:	d00b      	beq.n	8011a86 <_vfiprintf_r+0x6e>
 8011a6e:	4653      	mov	r3, sl
 8011a70:	463a      	mov	r2, r7
 8011a72:	4621      	mov	r1, r4
 8011a74:	4630      	mov	r0, r6
 8011a76:	f7ff ffbc 	bl	80119f2 <__sfputs_r>
 8011a7a:	3001      	adds	r0, #1
 8011a7c:	f000 80c2 	beq.w	8011c04 <_vfiprintf_r+0x1ec>
 8011a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a82:	4453      	add	r3, sl
 8011a84:	9309      	str	r3, [sp, #36]	; 0x24
 8011a86:	f898 3000 	ldrb.w	r3, [r8]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f000 80ba 	beq.w	8011c04 <_vfiprintf_r+0x1ec>
 8011a90:	2300      	movs	r3, #0
 8011a92:	f04f 32ff 	mov.w	r2, #4294967295
 8011a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a9a:	9304      	str	r3, [sp, #16]
 8011a9c:	9307      	str	r3, [sp, #28]
 8011a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8011aa4:	46a8      	mov	r8, r5
 8011aa6:	2205      	movs	r2, #5
 8011aa8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011aac:	485e      	ldr	r0, [pc, #376]	; (8011c28 <_vfiprintf_r+0x210>)
 8011aae:	f7ee fb97 	bl	80001e0 <memchr>
 8011ab2:	9b04      	ldr	r3, [sp, #16]
 8011ab4:	bb78      	cbnz	r0, 8011b16 <_vfiprintf_r+0xfe>
 8011ab6:	06d9      	lsls	r1, r3, #27
 8011ab8:	bf44      	itt	mi
 8011aba:	2220      	movmi	r2, #32
 8011abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ac0:	071a      	lsls	r2, r3, #28
 8011ac2:	bf44      	itt	mi
 8011ac4:	222b      	movmi	r2, #43	; 0x2b
 8011ac6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011aca:	782a      	ldrb	r2, [r5, #0]
 8011acc:	2a2a      	cmp	r2, #42	; 0x2a
 8011ace:	d02a      	beq.n	8011b26 <_vfiprintf_r+0x10e>
 8011ad0:	9a07      	ldr	r2, [sp, #28]
 8011ad2:	46a8      	mov	r8, r5
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	250a      	movs	r5, #10
 8011ad8:	4641      	mov	r1, r8
 8011ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ade:	3b30      	subs	r3, #48	; 0x30
 8011ae0:	2b09      	cmp	r3, #9
 8011ae2:	d969      	bls.n	8011bb8 <_vfiprintf_r+0x1a0>
 8011ae4:	b360      	cbz	r0, 8011b40 <_vfiprintf_r+0x128>
 8011ae6:	e024      	b.n	8011b32 <_vfiprintf_r+0x11a>
 8011ae8:	4b50      	ldr	r3, [pc, #320]	; (8011c2c <_vfiprintf_r+0x214>)
 8011aea:	429c      	cmp	r4, r3
 8011aec:	d101      	bne.n	8011af2 <_vfiprintf_r+0xda>
 8011aee:	68b4      	ldr	r4, [r6, #8]
 8011af0:	e7a2      	b.n	8011a38 <_vfiprintf_r+0x20>
 8011af2:	4b4f      	ldr	r3, [pc, #316]	; (8011c30 <_vfiprintf_r+0x218>)
 8011af4:	429c      	cmp	r4, r3
 8011af6:	bf08      	it	eq
 8011af8:	68f4      	ldreq	r4, [r6, #12]
 8011afa:	e79d      	b.n	8011a38 <_vfiprintf_r+0x20>
 8011afc:	4621      	mov	r1, r4
 8011afe:	4630      	mov	r0, r6
 8011b00:	f000 f978 	bl	8011df4 <__swsetup_r>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d09d      	beq.n	8011a44 <_vfiprintf_r+0x2c>
 8011b08:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0c:	b01d      	add	sp, #116	; 0x74
 8011b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b12:	46a8      	mov	r8, r5
 8011b14:	e7a2      	b.n	8011a5c <_vfiprintf_r+0x44>
 8011b16:	4a44      	ldr	r2, [pc, #272]	; (8011c28 <_vfiprintf_r+0x210>)
 8011b18:	1a80      	subs	r0, r0, r2
 8011b1a:	fa0b f000 	lsl.w	r0, fp, r0
 8011b1e:	4318      	orrs	r0, r3
 8011b20:	9004      	str	r0, [sp, #16]
 8011b22:	4645      	mov	r5, r8
 8011b24:	e7be      	b.n	8011aa4 <_vfiprintf_r+0x8c>
 8011b26:	9a03      	ldr	r2, [sp, #12]
 8011b28:	1d11      	adds	r1, r2, #4
 8011b2a:	6812      	ldr	r2, [r2, #0]
 8011b2c:	9103      	str	r1, [sp, #12]
 8011b2e:	2a00      	cmp	r2, #0
 8011b30:	db01      	blt.n	8011b36 <_vfiprintf_r+0x11e>
 8011b32:	9207      	str	r2, [sp, #28]
 8011b34:	e004      	b.n	8011b40 <_vfiprintf_r+0x128>
 8011b36:	4252      	negs	r2, r2
 8011b38:	f043 0302 	orr.w	r3, r3, #2
 8011b3c:	9207      	str	r2, [sp, #28]
 8011b3e:	9304      	str	r3, [sp, #16]
 8011b40:	f898 3000 	ldrb.w	r3, [r8]
 8011b44:	2b2e      	cmp	r3, #46	; 0x2e
 8011b46:	d10e      	bne.n	8011b66 <_vfiprintf_r+0x14e>
 8011b48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8011b4e:	d138      	bne.n	8011bc2 <_vfiprintf_r+0x1aa>
 8011b50:	9b03      	ldr	r3, [sp, #12]
 8011b52:	1d1a      	adds	r2, r3, #4
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	9203      	str	r2, [sp, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	bfb8      	it	lt
 8011b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b60:	f108 0802 	add.w	r8, r8, #2
 8011b64:	9305      	str	r3, [sp, #20]
 8011b66:	4d33      	ldr	r5, [pc, #204]	; (8011c34 <_vfiprintf_r+0x21c>)
 8011b68:	f898 1000 	ldrb.w	r1, [r8]
 8011b6c:	2203      	movs	r2, #3
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f7ee fb36 	bl	80001e0 <memchr>
 8011b74:	b140      	cbz	r0, 8011b88 <_vfiprintf_r+0x170>
 8011b76:	2340      	movs	r3, #64	; 0x40
 8011b78:	1b40      	subs	r0, r0, r5
 8011b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8011b7e:	9b04      	ldr	r3, [sp, #16]
 8011b80:	4303      	orrs	r3, r0
 8011b82:	f108 0801 	add.w	r8, r8, #1
 8011b86:	9304      	str	r3, [sp, #16]
 8011b88:	f898 1000 	ldrb.w	r1, [r8]
 8011b8c:	482a      	ldr	r0, [pc, #168]	; (8011c38 <_vfiprintf_r+0x220>)
 8011b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b92:	2206      	movs	r2, #6
 8011b94:	f108 0701 	add.w	r7, r8, #1
 8011b98:	f7ee fb22 	bl	80001e0 <memchr>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	d037      	beq.n	8011c10 <_vfiprintf_r+0x1f8>
 8011ba0:	4b26      	ldr	r3, [pc, #152]	; (8011c3c <_vfiprintf_r+0x224>)
 8011ba2:	bb1b      	cbnz	r3, 8011bec <_vfiprintf_r+0x1d4>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	3307      	adds	r3, #7
 8011ba8:	f023 0307 	bic.w	r3, r3, #7
 8011bac:	3308      	adds	r3, #8
 8011bae:	9303      	str	r3, [sp, #12]
 8011bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb2:	444b      	add	r3, r9
 8011bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8011bb6:	e750      	b.n	8011a5a <_vfiprintf_r+0x42>
 8011bb8:	fb05 3202 	mla	r2, r5, r2, r3
 8011bbc:	2001      	movs	r0, #1
 8011bbe:	4688      	mov	r8, r1
 8011bc0:	e78a      	b.n	8011ad8 <_vfiprintf_r+0xc0>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	f108 0801 	add.w	r8, r8, #1
 8011bc8:	9305      	str	r3, [sp, #20]
 8011bca:	4619      	mov	r1, r3
 8011bcc:	250a      	movs	r5, #10
 8011bce:	4640      	mov	r0, r8
 8011bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bd4:	3a30      	subs	r2, #48	; 0x30
 8011bd6:	2a09      	cmp	r2, #9
 8011bd8:	d903      	bls.n	8011be2 <_vfiprintf_r+0x1ca>
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d0c3      	beq.n	8011b66 <_vfiprintf_r+0x14e>
 8011bde:	9105      	str	r1, [sp, #20]
 8011be0:	e7c1      	b.n	8011b66 <_vfiprintf_r+0x14e>
 8011be2:	fb05 2101 	mla	r1, r5, r1, r2
 8011be6:	2301      	movs	r3, #1
 8011be8:	4680      	mov	r8, r0
 8011bea:	e7f0      	b.n	8011bce <_vfiprintf_r+0x1b6>
 8011bec:	ab03      	add	r3, sp, #12
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	4622      	mov	r2, r4
 8011bf2:	4b13      	ldr	r3, [pc, #76]	; (8011c40 <_vfiprintf_r+0x228>)
 8011bf4:	a904      	add	r1, sp, #16
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f7fc f9e0 	bl	800dfbc <_printf_float>
 8011bfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011c00:	4681      	mov	r9, r0
 8011c02:	d1d5      	bne.n	8011bb0 <_vfiprintf_r+0x198>
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	065b      	lsls	r3, r3, #25
 8011c08:	f53f af7e 	bmi.w	8011b08 <_vfiprintf_r+0xf0>
 8011c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c0e:	e77d      	b.n	8011b0c <_vfiprintf_r+0xf4>
 8011c10:	ab03      	add	r3, sp, #12
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4622      	mov	r2, r4
 8011c16:	4b0a      	ldr	r3, [pc, #40]	; (8011c40 <_vfiprintf_r+0x228>)
 8011c18:	a904      	add	r1, sp, #16
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f7fc fc84 	bl	800e528 <_printf_i>
 8011c20:	e7ec      	b.n	8011bfc <_vfiprintf_r+0x1e4>
 8011c22:	bf00      	nop
 8011c24:	08012940 	.word	0x08012940
 8011c28:	08012a8c 	.word	0x08012a8c
 8011c2c:	08012960 	.word	0x08012960
 8011c30:	08012920 	.word	0x08012920
 8011c34:	08012a92 	.word	0x08012a92
 8011c38:	08012a96 	.word	0x08012a96
 8011c3c:	0800dfbd 	.word	0x0800dfbd
 8011c40:	080119f3 	.word	0x080119f3

08011c44 <_sbrk_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	4c06      	ldr	r4, [pc, #24]	; (8011c60 <_sbrk_r+0x1c>)
 8011c48:	2300      	movs	r3, #0
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	4608      	mov	r0, r1
 8011c4e:	6023      	str	r3, [r4, #0]
 8011c50:	f7f5 fbf2 	bl	8007438 <_sbrk>
 8011c54:	1c43      	adds	r3, r0, #1
 8011c56:	d102      	bne.n	8011c5e <_sbrk_r+0x1a>
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	b103      	cbz	r3, 8011c5e <_sbrk_r+0x1a>
 8011c5c:	602b      	str	r3, [r5, #0]
 8011c5e:	bd38      	pop	{r3, r4, r5, pc}
 8011c60:	2001d73c 	.word	0x2001d73c

08011c64 <__sread>:
 8011c64:	b510      	push	{r4, lr}
 8011c66:	460c      	mov	r4, r1
 8011c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6c:	f000 faa8 	bl	80121c0 <_read_r>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	bfab      	itete	ge
 8011c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c76:	89a3      	ldrhlt	r3, [r4, #12]
 8011c78:	181b      	addge	r3, r3, r0
 8011c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c7e:	bfac      	ite	ge
 8011c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c82:	81a3      	strhlt	r3, [r4, #12]
 8011c84:	bd10      	pop	{r4, pc}

08011c86 <__swrite>:
 8011c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8a:	461f      	mov	r7, r3
 8011c8c:	898b      	ldrh	r3, [r1, #12]
 8011c8e:	05db      	lsls	r3, r3, #23
 8011c90:	4605      	mov	r5, r0
 8011c92:	460c      	mov	r4, r1
 8011c94:	4616      	mov	r6, r2
 8011c96:	d505      	bpl.n	8011ca4 <__swrite+0x1e>
 8011c98:	2302      	movs	r3, #2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ca0:	f000 f9d6 	bl	8012050 <_lseek_r>
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cae:	81a3      	strh	r3, [r4, #12]
 8011cb0:	4632      	mov	r2, r6
 8011cb2:	463b      	mov	r3, r7
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cba:	f000 b889 	b.w	8011dd0 <_write_r>

08011cbe <__sseek>:
 8011cbe:	b510      	push	{r4, lr}
 8011cc0:	460c      	mov	r4, r1
 8011cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cc6:	f000 f9c3 	bl	8012050 <_lseek_r>
 8011cca:	1c43      	adds	r3, r0, #1
 8011ccc:	89a3      	ldrh	r3, [r4, #12]
 8011cce:	bf15      	itete	ne
 8011cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011cda:	81a3      	strheq	r3, [r4, #12]
 8011cdc:	bf18      	it	ne
 8011cde:	81a3      	strhne	r3, [r4, #12]
 8011ce0:	bd10      	pop	{r4, pc}

08011ce2 <__sclose>:
 8011ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce6:	f000 b8f3 	b.w	8011ed0 <_close_r>

08011cea <strncmp>:
 8011cea:	b510      	push	{r4, lr}
 8011cec:	b16a      	cbz	r2, 8011d0a <strncmp+0x20>
 8011cee:	3901      	subs	r1, #1
 8011cf0:	1884      	adds	r4, r0, r2
 8011cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011cf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d103      	bne.n	8011d06 <strncmp+0x1c>
 8011cfe:	42a0      	cmp	r0, r4
 8011d00:	d001      	beq.n	8011d06 <strncmp+0x1c>
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d1f5      	bne.n	8011cf2 <strncmp+0x8>
 8011d06:	1a98      	subs	r0, r3, r2
 8011d08:	bd10      	pop	{r4, pc}
 8011d0a:	4610      	mov	r0, r2
 8011d0c:	e7fc      	b.n	8011d08 <strncmp+0x1e>
	...

08011d10 <__swbuf_r>:
 8011d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d12:	460e      	mov	r6, r1
 8011d14:	4614      	mov	r4, r2
 8011d16:	4605      	mov	r5, r0
 8011d18:	b118      	cbz	r0, 8011d22 <__swbuf_r+0x12>
 8011d1a:	6983      	ldr	r3, [r0, #24]
 8011d1c:	b90b      	cbnz	r3, 8011d22 <__swbuf_r+0x12>
 8011d1e:	f7fe fc6b 	bl	80105f8 <__sinit>
 8011d22:	4b21      	ldr	r3, [pc, #132]	; (8011da8 <__swbuf_r+0x98>)
 8011d24:	429c      	cmp	r4, r3
 8011d26:	d12a      	bne.n	8011d7e <__swbuf_r+0x6e>
 8011d28:	686c      	ldr	r4, [r5, #4]
 8011d2a:	69a3      	ldr	r3, [r4, #24]
 8011d2c:	60a3      	str	r3, [r4, #8]
 8011d2e:	89a3      	ldrh	r3, [r4, #12]
 8011d30:	071a      	lsls	r2, r3, #28
 8011d32:	d52e      	bpl.n	8011d92 <__swbuf_r+0x82>
 8011d34:	6923      	ldr	r3, [r4, #16]
 8011d36:	b363      	cbz	r3, 8011d92 <__swbuf_r+0x82>
 8011d38:	6923      	ldr	r3, [r4, #16]
 8011d3a:	6820      	ldr	r0, [r4, #0]
 8011d3c:	1ac0      	subs	r0, r0, r3
 8011d3e:	6963      	ldr	r3, [r4, #20]
 8011d40:	b2f6      	uxtb	r6, r6
 8011d42:	4283      	cmp	r3, r0
 8011d44:	4637      	mov	r7, r6
 8011d46:	dc04      	bgt.n	8011d52 <__swbuf_r+0x42>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f000 f956 	bl	8011ffc <_fflush_r>
 8011d50:	bb28      	cbnz	r0, 8011d9e <__swbuf_r+0x8e>
 8011d52:	68a3      	ldr	r3, [r4, #8]
 8011d54:	3b01      	subs	r3, #1
 8011d56:	60a3      	str	r3, [r4, #8]
 8011d58:	6823      	ldr	r3, [r4, #0]
 8011d5a:	1c5a      	adds	r2, r3, #1
 8011d5c:	6022      	str	r2, [r4, #0]
 8011d5e:	701e      	strb	r6, [r3, #0]
 8011d60:	6963      	ldr	r3, [r4, #20]
 8011d62:	3001      	adds	r0, #1
 8011d64:	4283      	cmp	r3, r0
 8011d66:	d004      	beq.n	8011d72 <__swbuf_r+0x62>
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	07db      	lsls	r3, r3, #31
 8011d6c:	d519      	bpl.n	8011da2 <__swbuf_r+0x92>
 8011d6e:	2e0a      	cmp	r6, #10
 8011d70:	d117      	bne.n	8011da2 <__swbuf_r+0x92>
 8011d72:	4621      	mov	r1, r4
 8011d74:	4628      	mov	r0, r5
 8011d76:	f000 f941 	bl	8011ffc <_fflush_r>
 8011d7a:	b190      	cbz	r0, 8011da2 <__swbuf_r+0x92>
 8011d7c:	e00f      	b.n	8011d9e <__swbuf_r+0x8e>
 8011d7e:	4b0b      	ldr	r3, [pc, #44]	; (8011dac <__swbuf_r+0x9c>)
 8011d80:	429c      	cmp	r4, r3
 8011d82:	d101      	bne.n	8011d88 <__swbuf_r+0x78>
 8011d84:	68ac      	ldr	r4, [r5, #8]
 8011d86:	e7d0      	b.n	8011d2a <__swbuf_r+0x1a>
 8011d88:	4b09      	ldr	r3, [pc, #36]	; (8011db0 <__swbuf_r+0xa0>)
 8011d8a:	429c      	cmp	r4, r3
 8011d8c:	bf08      	it	eq
 8011d8e:	68ec      	ldreq	r4, [r5, #12]
 8011d90:	e7cb      	b.n	8011d2a <__swbuf_r+0x1a>
 8011d92:	4621      	mov	r1, r4
 8011d94:	4628      	mov	r0, r5
 8011d96:	f000 f82d 	bl	8011df4 <__swsetup_r>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	d0cc      	beq.n	8011d38 <__swbuf_r+0x28>
 8011d9e:	f04f 37ff 	mov.w	r7, #4294967295
 8011da2:	4638      	mov	r0, r7
 8011da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011da6:	bf00      	nop
 8011da8:	08012940 	.word	0x08012940
 8011dac:	08012960 	.word	0x08012960
 8011db0:	08012920 	.word	0x08012920

08011db4 <__ascii_wctomb>:
 8011db4:	b149      	cbz	r1, 8011dca <__ascii_wctomb+0x16>
 8011db6:	2aff      	cmp	r2, #255	; 0xff
 8011db8:	bf85      	ittet	hi
 8011dba:	238a      	movhi	r3, #138	; 0x8a
 8011dbc:	6003      	strhi	r3, [r0, #0]
 8011dbe:	700a      	strbls	r2, [r1, #0]
 8011dc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011dc4:	bf98      	it	ls
 8011dc6:	2001      	movls	r0, #1
 8011dc8:	4770      	bx	lr
 8011dca:	4608      	mov	r0, r1
 8011dcc:	4770      	bx	lr
	...

08011dd0 <_write_r>:
 8011dd0:	b538      	push	{r3, r4, r5, lr}
 8011dd2:	4c07      	ldr	r4, [pc, #28]	; (8011df0 <_write_r+0x20>)
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	4608      	mov	r0, r1
 8011dd8:	4611      	mov	r1, r2
 8011dda:	2200      	movs	r2, #0
 8011ddc:	6022      	str	r2, [r4, #0]
 8011dde:	461a      	mov	r2, r3
 8011de0:	f7f5 fad9 	bl	8007396 <_write>
 8011de4:	1c43      	adds	r3, r0, #1
 8011de6:	d102      	bne.n	8011dee <_write_r+0x1e>
 8011de8:	6823      	ldr	r3, [r4, #0]
 8011dea:	b103      	cbz	r3, 8011dee <_write_r+0x1e>
 8011dec:	602b      	str	r3, [r5, #0]
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	2001d73c 	.word	0x2001d73c

08011df4 <__swsetup_r>:
 8011df4:	4b32      	ldr	r3, [pc, #200]	; (8011ec0 <__swsetup_r+0xcc>)
 8011df6:	b570      	push	{r4, r5, r6, lr}
 8011df8:	681d      	ldr	r5, [r3, #0]
 8011dfa:	4606      	mov	r6, r0
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	b125      	cbz	r5, 8011e0a <__swsetup_r+0x16>
 8011e00:	69ab      	ldr	r3, [r5, #24]
 8011e02:	b913      	cbnz	r3, 8011e0a <__swsetup_r+0x16>
 8011e04:	4628      	mov	r0, r5
 8011e06:	f7fe fbf7 	bl	80105f8 <__sinit>
 8011e0a:	4b2e      	ldr	r3, [pc, #184]	; (8011ec4 <__swsetup_r+0xd0>)
 8011e0c:	429c      	cmp	r4, r3
 8011e0e:	d10f      	bne.n	8011e30 <__swsetup_r+0x3c>
 8011e10:	686c      	ldr	r4, [r5, #4]
 8011e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	0715      	lsls	r5, r2, #28
 8011e1a:	d42c      	bmi.n	8011e76 <__swsetup_r+0x82>
 8011e1c:	06d0      	lsls	r0, r2, #27
 8011e1e:	d411      	bmi.n	8011e44 <__swsetup_r+0x50>
 8011e20:	2209      	movs	r2, #9
 8011e22:	6032      	str	r2, [r6, #0]
 8011e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e28:	81a3      	strh	r3, [r4, #12]
 8011e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e2e:	e03e      	b.n	8011eae <__swsetup_r+0xba>
 8011e30:	4b25      	ldr	r3, [pc, #148]	; (8011ec8 <__swsetup_r+0xd4>)
 8011e32:	429c      	cmp	r4, r3
 8011e34:	d101      	bne.n	8011e3a <__swsetup_r+0x46>
 8011e36:	68ac      	ldr	r4, [r5, #8]
 8011e38:	e7eb      	b.n	8011e12 <__swsetup_r+0x1e>
 8011e3a:	4b24      	ldr	r3, [pc, #144]	; (8011ecc <__swsetup_r+0xd8>)
 8011e3c:	429c      	cmp	r4, r3
 8011e3e:	bf08      	it	eq
 8011e40:	68ec      	ldreq	r4, [r5, #12]
 8011e42:	e7e6      	b.n	8011e12 <__swsetup_r+0x1e>
 8011e44:	0751      	lsls	r1, r2, #29
 8011e46:	d512      	bpl.n	8011e6e <__swsetup_r+0x7a>
 8011e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e4a:	b141      	cbz	r1, 8011e5e <__swsetup_r+0x6a>
 8011e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e50:	4299      	cmp	r1, r3
 8011e52:	d002      	beq.n	8011e5a <__swsetup_r+0x66>
 8011e54:	4630      	mov	r0, r6
 8011e56:	f7ff fbbb 	bl	80115d0 <_free_r>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8011e5e:	89a3      	ldrh	r3, [r4, #12]
 8011e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e64:	81a3      	strh	r3, [r4, #12]
 8011e66:	2300      	movs	r3, #0
 8011e68:	6063      	str	r3, [r4, #4]
 8011e6a:	6923      	ldr	r3, [r4, #16]
 8011e6c:	6023      	str	r3, [r4, #0]
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	f043 0308 	orr.w	r3, r3, #8
 8011e74:	81a3      	strh	r3, [r4, #12]
 8011e76:	6923      	ldr	r3, [r4, #16]
 8011e78:	b94b      	cbnz	r3, 8011e8e <__swsetup_r+0x9a>
 8011e7a:	89a3      	ldrh	r3, [r4, #12]
 8011e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e84:	d003      	beq.n	8011e8e <__swsetup_r+0x9a>
 8011e86:	4621      	mov	r1, r4
 8011e88:	4630      	mov	r0, r6
 8011e8a:	f000 f917 	bl	80120bc <__smakebuf_r>
 8011e8e:	89a2      	ldrh	r2, [r4, #12]
 8011e90:	f012 0301 	ands.w	r3, r2, #1
 8011e94:	d00c      	beq.n	8011eb0 <__swsetup_r+0xbc>
 8011e96:	2300      	movs	r3, #0
 8011e98:	60a3      	str	r3, [r4, #8]
 8011e9a:	6963      	ldr	r3, [r4, #20]
 8011e9c:	425b      	negs	r3, r3
 8011e9e:	61a3      	str	r3, [r4, #24]
 8011ea0:	6923      	ldr	r3, [r4, #16]
 8011ea2:	b953      	cbnz	r3, 8011eba <__swsetup_r+0xc6>
 8011ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ea8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011eac:	d1ba      	bne.n	8011e24 <__swsetup_r+0x30>
 8011eae:	bd70      	pop	{r4, r5, r6, pc}
 8011eb0:	0792      	lsls	r2, r2, #30
 8011eb2:	bf58      	it	pl
 8011eb4:	6963      	ldrpl	r3, [r4, #20]
 8011eb6:	60a3      	str	r3, [r4, #8]
 8011eb8:	e7f2      	b.n	8011ea0 <__swsetup_r+0xac>
 8011eba:	2000      	movs	r0, #0
 8011ebc:	e7f7      	b.n	8011eae <__swsetup_r+0xba>
 8011ebe:	bf00      	nop
 8011ec0:	20000048 	.word	0x20000048
 8011ec4:	08012940 	.word	0x08012940
 8011ec8:	08012960 	.word	0x08012960
 8011ecc:	08012920 	.word	0x08012920

08011ed0 <_close_r>:
 8011ed0:	b538      	push	{r3, r4, r5, lr}
 8011ed2:	4c06      	ldr	r4, [pc, #24]	; (8011eec <_close_r+0x1c>)
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	4608      	mov	r0, r1
 8011eda:	6023      	str	r3, [r4, #0]
 8011edc:	f7f5 fa77 	bl	80073ce <_close>
 8011ee0:	1c43      	adds	r3, r0, #1
 8011ee2:	d102      	bne.n	8011eea <_close_r+0x1a>
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	b103      	cbz	r3, 8011eea <_close_r+0x1a>
 8011ee8:	602b      	str	r3, [r5, #0]
 8011eea:	bd38      	pop	{r3, r4, r5, pc}
 8011eec:	2001d73c 	.word	0x2001d73c

08011ef0 <__sflush_r>:
 8011ef0:	898a      	ldrh	r2, [r1, #12]
 8011ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	0710      	lsls	r0, r2, #28
 8011efa:	460c      	mov	r4, r1
 8011efc:	d458      	bmi.n	8011fb0 <__sflush_r+0xc0>
 8011efe:	684b      	ldr	r3, [r1, #4]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	dc05      	bgt.n	8011f10 <__sflush_r+0x20>
 8011f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	dc02      	bgt.n	8011f10 <__sflush_r+0x20>
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f12:	2e00      	cmp	r6, #0
 8011f14:	d0f9      	beq.n	8011f0a <__sflush_r+0x1a>
 8011f16:	2300      	movs	r3, #0
 8011f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f1c:	682f      	ldr	r7, [r5, #0]
 8011f1e:	6a21      	ldr	r1, [r4, #32]
 8011f20:	602b      	str	r3, [r5, #0]
 8011f22:	d032      	beq.n	8011f8a <__sflush_r+0x9a>
 8011f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	075a      	lsls	r2, r3, #29
 8011f2a:	d505      	bpl.n	8011f38 <__sflush_r+0x48>
 8011f2c:	6863      	ldr	r3, [r4, #4]
 8011f2e:	1ac0      	subs	r0, r0, r3
 8011f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f32:	b10b      	cbz	r3, 8011f38 <__sflush_r+0x48>
 8011f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f36:	1ac0      	subs	r0, r0, r3
 8011f38:	2300      	movs	r3, #0
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f3e:	6a21      	ldr	r1, [r4, #32]
 8011f40:	4628      	mov	r0, r5
 8011f42:	47b0      	blx	r6
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	d106      	bne.n	8011f58 <__sflush_r+0x68>
 8011f4a:	6829      	ldr	r1, [r5, #0]
 8011f4c:	291d      	cmp	r1, #29
 8011f4e:	d848      	bhi.n	8011fe2 <__sflush_r+0xf2>
 8011f50:	4a29      	ldr	r2, [pc, #164]	; (8011ff8 <__sflush_r+0x108>)
 8011f52:	40ca      	lsrs	r2, r1
 8011f54:	07d6      	lsls	r6, r2, #31
 8011f56:	d544      	bpl.n	8011fe2 <__sflush_r+0xf2>
 8011f58:	2200      	movs	r2, #0
 8011f5a:	6062      	str	r2, [r4, #4]
 8011f5c:	04d9      	lsls	r1, r3, #19
 8011f5e:	6922      	ldr	r2, [r4, #16]
 8011f60:	6022      	str	r2, [r4, #0]
 8011f62:	d504      	bpl.n	8011f6e <__sflush_r+0x7e>
 8011f64:	1c42      	adds	r2, r0, #1
 8011f66:	d101      	bne.n	8011f6c <__sflush_r+0x7c>
 8011f68:	682b      	ldr	r3, [r5, #0]
 8011f6a:	b903      	cbnz	r3, 8011f6e <__sflush_r+0x7e>
 8011f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8011f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f70:	602f      	str	r7, [r5, #0]
 8011f72:	2900      	cmp	r1, #0
 8011f74:	d0c9      	beq.n	8011f0a <__sflush_r+0x1a>
 8011f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f7a:	4299      	cmp	r1, r3
 8011f7c:	d002      	beq.n	8011f84 <__sflush_r+0x94>
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f7ff fb26 	bl	80115d0 <_free_r>
 8011f84:	2000      	movs	r0, #0
 8011f86:	6360      	str	r0, [r4, #52]	; 0x34
 8011f88:	e7c0      	b.n	8011f0c <__sflush_r+0x1c>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	47b0      	blx	r6
 8011f90:	1c41      	adds	r1, r0, #1
 8011f92:	d1c8      	bne.n	8011f26 <__sflush_r+0x36>
 8011f94:	682b      	ldr	r3, [r5, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d0c5      	beq.n	8011f26 <__sflush_r+0x36>
 8011f9a:	2b1d      	cmp	r3, #29
 8011f9c:	d001      	beq.n	8011fa2 <__sflush_r+0xb2>
 8011f9e:	2b16      	cmp	r3, #22
 8011fa0:	d101      	bne.n	8011fa6 <__sflush_r+0xb6>
 8011fa2:	602f      	str	r7, [r5, #0]
 8011fa4:	e7b1      	b.n	8011f0a <__sflush_r+0x1a>
 8011fa6:	89a3      	ldrh	r3, [r4, #12]
 8011fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fac:	81a3      	strh	r3, [r4, #12]
 8011fae:	e7ad      	b.n	8011f0c <__sflush_r+0x1c>
 8011fb0:	690f      	ldr	r7, [r1, #16]
 8011fb2:	2f00      	cmp	r7, #0
 8011fb4:	d0a9      	beq.n	8011f0a <__sflush_r+0x1a>
 8011fb6:	0793      	lsls	r3, r2, #30
 8011fb8:	680e      	ldr	r6, [r1, #0]
 8011fba:	bf08      	it	eq
 8011fbc:	694b      	ldreq	r3, [r1, #20]
 8011fbe:	600f      	str	r7, [r1, #0]
 8011fc0:	bf18      	it	ne
 8011fc2:	2300      	movne	r3, #0
 8011fc4:	eba6 0807 	sub.w	r8, r6, r7
 8011fc8:	608b      	str	r3, [r1, #8]
 8011fca:	f1b8 0f00 	cmp.w	r8, #0
 8011fce:	dd9c      	ble.n	8011f0a <__sflush_r+0x1a>
 8011fd0:	4643      	mov	r3, r8
 8011fd2:	463a      	mov	r2, r7
 8011fd4:	6a21      	ldr	r1, [r4, #32]
 8011fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fd8:	4628      	mov	r0, r5
 8011fda:	47b0      	blx	r6
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	dc06      	bgt.n	8011fee <__sflush_r+0xfe>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fe6:	81a3      	strh	r3, [r4, #12]
 8011fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fec:	e78e      	b.n	8011f0c <__sflush_r+0x1c>
 8011fee:	4407      	add	r7, r0
 8011ff0:	eba8 0800 	sub.w	r8, r8, r0
 8011ff4:	e7e9      	b.n	8011fca <__sflush_r+0xda>
 8011ff6:	bf00      	nop
 8011ff8:	20400001 	.word	0x20400001

08011ffc <_fflush_r>:
 8011ffc:	b538      	push	{r3, r4, r5, lr}
 8011ffe:	690b      	ldr	r3, [r1, #16]
 8012000:	4605      	mov	r5, r0
 8012002:	460c      	mov	r4, r1
 8012004:	b1db      	cbz	r3, 801203e <_fflush_r+0x42>
 8012006:	b118      	cbz	r0, 8012010 <_fflush_r+0x14>
 8012008:	6983      	ldr	r3, [r0, #24]
 801200a:	b90b      	cbnz	r3, 8012010 <_fflush_r+0x14>
 801200c:	f7fe faf4 	bl	80105f8 <__sinit>
 8012010:	4b0c      	ldr	r3, [pc, #48]	; (8012044 <_fflush_r+0x48>)
 8012012:	429c      	cmp	r4, r3
 8012014:	d109      	bne.n	801202a <_fflush_r+0x2e>
 8012016:	686c      	ldr	r4, [r5, #4]
 8012018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801201c:	b17b      	cbz	r3, 801203e <_fflush_r+0x42>
 801201e:	4621      	mov	r1, r4
 8012020:	4628      	mov	r0, r5
 8012022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012026:	f7ff bf63 	b.w	8011ef0 <__sflush_r>
 801202a:	4b07      	ldr	r3, [pc, #28]	; (8012048 <_fflush_r+0x4c>)
 801202c:	429c      	cmp	r4, r3
 801202e:	d101      	bne.n	8012034 <_fflush_r+0x38>
 8012030:	68ac      	ldr	r4, [r5, #8]
 8012032:	e7f1      	b.n	8012018 <_fflush_r+0x1c>
 8012034:	4b05      	ldr	r3, [pc, #20]	; (801204c <_fflush_r+0x50>)
 8012036:	429c      	cmp	r4, r3
 8012038:	bf08      	it	eq
 801203a:	68ec      	ldreq	r4, [r5, #12]
 801203c:	e7ec      	b.n	8012018 <_fflush_r+0x1c>
 801203e:	2000      	movs	r0, #0
 8012040:	bd38      	pop	{r3, r4, r5, pc}
 8012042:	bf00      	nop
 8012044:	08012940 	.word	0x08012940
 8012048:	08012960 	.word	0x08012960
 801204c:	08012920 	.word	0x08012920

08012050 <_lseek_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4c07      	ldr	r4, [pc, #28]	; (8012070 <_lseek_r+0x20>)
 8012054:	4605      	mov	r5, r0
 8012056:	4608      	mov	r0, r1
 8012058:	4611      	mov	r1, r2
 801205a:	2200      	movs	r2, #0
 801205c:	6022      	str	r2, [r4, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	f7f5 f9dc 	bl	800741c <_lseek>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_lseek_r+0x1e>
 8012068:	6823      	ldr	r3, [r4, #0]
 801206a:	b103      	cbz	r3, 801206e <_lseek_r+0x1e>
 801206c:	602b      	str	r3, [r5, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	2001d73c 	.word	0x2001d73c

08012074 <__swhatbuf_r>:
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	460e      	mov	r6, r1
 8012078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801207c:	2900      	cmp	r1, #0
 801207e:	b096      	sub	sp, #88	; 0x58
 8012080:	4614      	mov	r4, r2
 8012082:	461d      	mov	r5, r3
 8012084:	da07      	bge.n	8012096 <__swhatbuf_r+0x22>
 8012086:	2300      	movs	r3, #0
 8012088:	602b      	str	r3, [r5, #0]
 801208a:	89b3      	ldrh	r3, [r6, #12]
 801208c:	061a      	lsls	r2, r3, #24
 801208e:	d410      	bmi.n	80120b2 <__swhatbuf_r+0x3e>
 8012090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012094:	e00e      	b.n	80120b4 <__swhatbuf_r+0x40>
 8012096:	466a      	mov	r2, sp
 8012098:	f000 f8a4 	bl	80121e4 <_fstat_r>
 801209c:	2800      	cmp	r0, #0
 801209e:	dbf2      	blt.n	8012086 <__swhatbuf_r+0x12>
 80120a0:	9a01      	ldr	r2, [sp, #4]
 80120a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80120a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80120aa:	425a      	negs	r2, r3
 80120ac:	415a      	adcs	r2, r3
 80120ae:	602a      	str	r2, [r5, #0]
 80120b0:	e7ee      	b.n	8012090 <__swhatbuf_r+0x1c>
 80120b2:	2340      	movs	r3, #64	; 0x40
 80120b4:	2000      	movs	r0, #0
 80120b6:	6023      	str	r3, [r4, #0]
 80120b8:	b016      	add	sp, #88	; 0x58
 80120ba:	bd70      	pop	{r4, r5, r6, pc}

080120bc <__smakebuf_r>:
 80120bc:	898b      	ldrh	r3, [r1, #12]
 80120be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120c0:	079d      	lsls	r5, r3, #30
 80120c2:	4606      	mov	r6, r0
 80120c4:	460c      	mov	r4, r1
 80120c6:	d507      	bpl.n	80120d8 <__smakebuf_r+0x1c>
 80120c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120cc:	6023      	str	r3, [r4, #0]
 80120ce:	6123      	str	r3, [r4, #16]
 80120d0:	2301      	movs	r3, #1
 80120d2:	6163      	str	r3, [r4, #20]
 80120d4:	b002      	add	sp, #8
 80120d6:	bd70      	pop	{r4, r5, r6, pc}
 80120d8:	ab01      	add	r3, sp, #4
 80120da:	466a      	mov	r2, sp
 80120dc:	f7ff ffca 	bl	8012074 <__swhatbuf_r>
 80120e0:	9900      	ldr	r1, [sp, #0]
 80120e2:	4605      	mov	r5, r0
 80120e4:	4630      	mov	r0, r6
 80120e6:	f7ff fac1 	bl	801166c <_malloc_r>
 80120ea:	b948      	cbnz	r0, 8012100 <__smakebuf_r+0x44>
 80120ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f0:	059a      	lsls	r2, r3, #22
 80120f2:	d4ef      	bmi.n	80120d4 <__smakebuf_r+0x18>
 80120f4:	f023 0303 	bic.w	r3, r3, #3
 80120f8:	f043 0302 	orr.w	r3, r3, #2
 80120fc:	81a3      	strh	r3, [r4, #12]
 80120fe:	e7e3      	b.n	80120c8 <__smakebuf_r+0xc>
 8012100:	4b0d      	ldr	r3, [pc, #52]	; (8012138 <__smakebuf_r+0x7c>)
 8012102:	62b3      	str	r3, [r6, #40]	; 0x28
 8012104:	89a3      	ldrh	r3, [r4, #12]
 8012106:	6020      	str	r0, [r4, #0]
 8012108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801210c:	81a3      	strh	r3, [r4, #12]
 801210e:	9b00      	ldr	r3, [sp, #0]
 8012110:	6163      	str	r3, [r4, #20]
 8012112:	9b01      	ldr	r3, [sp, #4]
 8012114:	6120      	str	r0, [r4, #16]
 8012116:	b15b      	cbz	r3, 8012130 <__smakebuf_r+0x74>
 8012118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801211c:	4630      	mov	r0, r6
 801211e:	f000 f873 	bl	8012208 <_isatty_r>
 8012122:	b128      	cbz	r0, 8012130 <__smakebuf_r+0x74>
 8012124:	89a3      	ldrh	r3, [r4, #12]
 8012126:	f023 0303 	bic.w	r3, r3, #3
 801212a:	f043 0301 	orr.w	r3, r3, #1
 801212e:	81a3      	strh	r3, [r4, #12]
 8012130:	89a3      	ldrh	r3, [r4, #12]
 8012132:	431d      	orrs	r5, r3
 8012134:	81a5      	strh	r5, [r4, #12]
 8012136:	e7cd      	b.n	80120d4 <__smakebuf_r+0x18>
 8012138:	080105c1 	.word	0x080105c1

0801213c <memmove>:
 801213c:	4288      	cmp	r0, r1
 801213e:	b510      	push	{r4, lr}
 8012140:	eb01 0302 	add.w	r3, r1, r2
 8012144:	d807      	bhi.n	8012156 <memmove+0x1a>
 8012146:	1e42      	subs	r2, r0, #1
 8012148:	4299      	cmp	r1, r3
 801214a:	d00a      	beq.n	8012162 <memmove+0x26>
 801214c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012150:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012154:	e7f8      	b.n	8012148 <memmove+0xc>
 8012156:	4283      	cmp	r3, r0
 8012158:	d9f5      	bls.n	8012146 <memmove+0xa>
 801215a:	1881      	adds	r1, r0, r2
 801215c:	1ad2      	subs	r2, r2, r3
 801215e:	42d3      	cmn	r3, r2
 8012160:	d100      	bne.n	8012164 <memmove+0x28>
 8012162:	bd10      	pop	{r4, pc}
 8012164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012168:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801216c:	e7f7      	b.n	801215e <memmove+0x22>

0801216e <__malloc_lock>:
 801216e:	4770      	bx	lr

08012170 <__malloc_unlock>:
 8012170:	4770      	bx	lr

08012172 <_realloc_r>:
 8012172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012174:	4607      	mov	r7, r0
 8012176:	4614      	mov	r4, r2
 8012178:	460e      	mov	r6, r1
 801217a:	b921      	cbnz	r1, 8012186 <_realloc_r+0x14>
 801217c:	4611      	mov	r1, r2
 801217e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012182:	f7ff ba73 	b.w	801166c <_malloc_r>
 8012186:	b922      	cbnz	r2, 8012192 <_realloc_r+0x20>
 8012188:	f7ff fa22 	bl	80115d0 <_free_r>
 801218c:	4625      	mov	r5, r4
 801218e:	4628      	mov	r0, r5
 8012190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012192:	f000 f849 	bl	8012228 <_malloc_usable_size_r>
 8012196:	42a0      	cmp	r0, r4
 8012198:	d20f      	bcs.n	80121ba <_realloc_r+0x48>
 801219a:	4621      	mov	r1, r4
 801219c:	4638      	mov	r0, r7
 801219e:	f7ff fa65 	bl	801166c <_malloc_r>
 80121a2:	4605      	mov	r5, r0
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d0f2      	beq.n	801218e <_realloc_r+0x1c>
 80121a8:	4631      	mov	r1, r6
 80121aa:	4622      	mov	r2, r4
 80121ac:	f7fb fe5e 	bl	800de6c <memcpy>
 80121b0:	4631      	mov	r1, r6
 80121b2:	4638      	mov	r0, r7
 80121b4:	f7ff fa0c 	bl	80115d0 <_free_r>
 80121b8:	e7e9      	b.n	801218e <_realloc_r+0x1c>
 80121ba:	4635      	mov	r5, r6
 80121bc:	e7e7      	b.n	801218e <_realloc_r+0x1c>
	...

080121c0 <_read_r>:
 80121c0:	b538      	push	{r3, r4, r5, lr}
 80121c2:	4c07      	ldr	r4, [pc, #28]	; (80121e0 <_read_r+0x20>)
 80121c4:	4605      	mov	r5, r0
 80121c6:	4608      	mov	r0, r1
 80121c8:	4611      	mov	r1, r2
 80121ca:	2200      	movs	r2, #0
 80121cc:	6022      	str	r2, [r4, #0]
 80121ce:	461a      	mov	r2, r3
 80121d0:	f7f5 f8c4 	bl	800735c <_read>
 80121d4:	1c43      	adds	r3, r0, #1
 80121d6:	d102      	bne.n	80121de <_read_r+0x1e>
 80121d8:	6823      	ldr	r3, [r4, #0]
 80121da:	b103      	cbz	r3, 80121de <_read_r+0x1e>
 80121dc:	602b      	str	r3, [r5, #0]
 80121de:	bd38      	pop	{r3, r4, r5, pc}
 80121e0:	2001d73c 	.word	0x2001d73c

080121e4 <_fstat_r>:
 80121e4:	b538      	push	{r3, r4, r5, lr}
 80121e6:	4c07      	ldr	r4, [pc, #28]	; (8012204 <_fstat_r+0x20>)
 80121e8:	2300      	movs	r3, #0
 80121ea:	4605      	mov	r5, r0
 80121ec:	4608      	mov	r0, r1
 80121ee:	4611      	mov	r1, r2
 80121f0:	6023      	str	r3, [r4, #0]
 80121f2:	f7f5 f8f8 	bl	80073e6 <_fstat>
 80121f6:	1c43      	adds	r3, r0, #1
 80121f8:	d102      	bne.n	8012200 <_fstat_r+0x1c>
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	b103      	cbz	r3, 8012200 <_fstat_r+0x1c>
 80121fe:	602b      	str	r3, [r5, #0]
 8012200:	bd38      	pop	{r3, r4, r5, pc}
 8012202:	bf00      	nop
 8012204:	2001d73c 	.word	0x2001d73c

08012208 <_isatty_r>:
 8012208:	b538      	push	{r3, r4, r5, lr}
 801220a:	4c06      	ldr	r4, [pc, #24]	; (8012224 <_isatty_r+0x1c>)
 801220c:	2300      	movs	r3, #0
 801220e:	4605      	mov	r5, r0
 8012210:	4608      	mov	r0, r1
 8012212:	6023      	str	r3, [r4, #0]
 8012214:	f7f5 f8f7 	bl	8007406 <_isatty>
 8012218:	1c43      	adds	r3, r0, #1
 801221a:	d102      	bne.n	8012222 <_isatty_r+0x1a>
 801221c:	6823      	ldr	r3, [r4, #0]
 801221e:	b103      	cbz	r3, 8012222 <_isatty_r+0x1a>
 8012220:	602b      	str	r3, [r5, #0]
 8012222:	bd38      	pop	{r3, r4, r5, pc}
 8012224:	2001d73c 	.word	0x2001d73c

08012228 <_malloc_usable_size_r>:
 8012228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801222c:	1f18      	subs	r0, r3, #4
 801222e:	2b00      	cmp	r3, #0
 8012230:	bfbc      	itt	lt
 8012232:	580b      	ldrlt	r3, [r1, r0]
 8012234:	18c0      	addlt	r0, r0, r3
 8012236:	4770      	bx	lr

08012238 <_init>:
 8012238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223a:	bf00      	nop
 801223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801223e:	bc08      	pop	{r3}
 8012240:	469e      	mov	lr, r3
 8012242:	4770      	bx	lr

08012244 <_fini>:
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012246:	bf00      	nop
 8012248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224a:	bc08      	pop	{r3}
 801224c:	469e      	mov	lr, r3
 801224e:	4770      	bx	lr

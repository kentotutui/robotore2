
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08010488  08010488  00020488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a20  08010a20  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08010a20  08010a20  00020a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a28  08010a28  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a28  08010a28  00020a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a2c  08010a2c  00020a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ef08  20000210  08010c40  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f118  08010c40  0003f118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bfa  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000491b  00000000  00000000  00052e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  00057758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c8  00000000  00000000  00059110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001738a  00000000  00000000  0007f362  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4b2  00000000  00000000  000966ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eac  00000000  00000000  00161c1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801046c 	.word	0x0801046c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0801046c 	.word	0x0801046c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc53 	bl	800184c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fcc4 	bl	8009a78 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fcc0 	bl	8009a78 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001eccc 	.word	0x2001eccc
 8001110:	2001ec8c 	.word	0x2001ec8c
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <updateEncoderCnt+0x178>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <updateEncoderCnt+0x17c>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <updateEncoderCnt+0x180>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <updateEncoderCnt+0x184>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <updateEncoderCnt+0x188>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <updateEncoderCnt+0x17c>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <updateEncoderCnt+0x188>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <updateEncoderCnt+0x18c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <updateEncoderCnt+0x184>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <updateEncoderCnt+0x18c>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <updateEncoderCnt+0x17c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <updateEncoderCnt+0x184>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <updateEncoderCnt+0x170>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <updateEncoderCnt+0x190>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <updateEncoderCnt+0x194>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <updateEncoderCnt+0x190>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <updateEncoderCnt+0x194>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	distance_30mm += distance_1ms;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <updateEncoderCnt+0x198>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <updateEncoderCnt+0x190>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <updateEncoderCnt+0x198>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <updateEncoderCnt+0x19c>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <updateEncoderCnt+0x190>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <updateEncoderCnt+0x19c>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <updateEncoderCnt+0x190>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <updateEncoderCnt+0x190>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <updateEncoderCnt+0x190>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <updateEncoderCnt+0x1ac>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <updateEncoderCnt+0x190>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <updateEncoderCnt+0x1ac>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001262:	ed93 7a00 	vldr	s14, [r3]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <updateEncoderCnt+0x190>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001272:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateEncoderCnt+0x178>)
 8001278:	f242 7210 	movw	r2, #10000	; 0x2710
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <updateEncoderCnt+0x180>)
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001286:	bf00      	nop
 8001288:	bd98      	pop	{r3, r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	bec93a2d 	.word	0xbec93a2d
 8001294:	3f8c463a 	.word	0x3f8c463a
 8001298:	40000400 	.word	0x40000400
 800129c:	20000244 	.word	0x20000244
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000246 	.word	0x20000246
 80012a8:	20000248 	.word	0x20000248
 80012ac:	2000024a 	.word	0x2000024a
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	20000250 	.word	0x20000250
 80012b8:	20000254 	.word	0x20000254
 80012bc:	20000258 	.word	0x20000258
 80012c0:	2000025c 	.word	0x2000025c
 80012c4:	20000260 	.word	0x20000260
 80012c8:	20000264 	.word	0x20000264
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <getEncoderCnt+0x2c>)
 80012e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <getEncoderCnt+0x30>)
 80012ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	801a      	strh	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000244 	.word	0x20000244
 8001304:	20000246 	.word	0x20000246

08001308 <getTotalDistance>:

float getTotalDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return total_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getTotalDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getGoalJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <getSideLineJudgeDistance+0x18>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
}
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000264 	.word	0x20000264

0800135c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <setTotalDistance+0x1c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	2000025c 	.word	0x2000025c

0800137c <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <getCrossLineIgnoreDistance+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000268 	.word	0x20000268

08001398 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	total_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearTotalDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearGoalJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearSideLineJudgeDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearCrossLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <clearSideLineIgnoreDistance+0x18>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000026c 	.word	0x2000026c

08001424 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <getDistance10mm+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000250 	.word	0x20000250

08001440 <clearDistance10mm>:

void clearDistance10mm(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <clearDistance10mm+0x18>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000250 	.word	0x20000250

0800145c <getDistance30mm>:

float getDistance30mm(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return distance_30mm;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <getDistance30mm+0x18>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000254 	.word	0x20000254

08001478 <clearDistance30mm>:

void clearDistance30mm(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	distance_30mm = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <clearDistance30mm+0x18>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000254 	.word	0x20000254
 8001494:	00000000 	.word	0x00000000

08001498 <getspeedcount>:

float getspeedcount(void){
 8001498:	b598      	push	{r3, r4, r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <getspeedcount+0x60>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	db16      	blt.n	80014de <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <getspeedcount+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	a30d      	add	r3, pc, #52	; (adr r3, 80014f0 <getspeedcount+0x58>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe fee4 	bl	800028c <__adddf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fb8c 	bl	8000be8 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <getspeedcount+0x64>)
 80014d4:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <getspeedcount+0x60>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <getspeedcount+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	bd98      	pop	{r3, r4, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fb99999 	.word	0x3fb99999
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000270 	.word	0x20000270

08001500 <clearspeedcount>:

void clearspeedcount(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <clearspeedcount+0x14>)
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <clearspeedcount+0x18>)
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000270 	.word	0x20000270
 8001518:	3dcccccd 	.word	0x3dcccccd

0800151c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FLASH_Unlock+0x1c>)
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Unlock+0x20>)
 8001524:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <FLASH_Unlock+0x1c>)
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <FLASH_Unlock+0x24>)
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	45670123 	.word	0x45670123
 8001540:	cdef89ab 	.word	0xcdef89ab

08001544 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <FLASH_Lock+0x1c>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <FLASH_Lock+0x1c>)
 800154e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001552:	6113      	str	r3, [r2, #16]

}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001568:	bf00      	nop
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <FLASH_WaitBusy+0x1c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <FLASH_WaitBusy+0x6>
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800158e:	f006 faab 	bl	8007ae8 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 fb61 	bl	8007c78 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015b6:	f006 fab9 	bl	8007b2c <HAL_FLASH_Lock>
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80015d0:	f7ff ffa4 	bl	800151c <FLASH_Unlock>

	FLASH_WaitBusy();
 80015d4:	f7ff ffc6 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80015f6:	f7ff ffb5 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <FLASH_Write_Word_F+0x50>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001606:	f7ff ff9d 	bl	8001544 <FLASH_Lock>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800161e:	f001 ffc3 	bl	80035a8 <IMU_init>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f005 f9c7 	bl	80069bc <HAL_Delay>

	return who_i_am;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <updateIMUValue>:

void updateIMUValue(){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800163e:	f001 ffd7 	bl	80035f0 <read_gyro_data>
	zg_ = zg;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <updateIMUValue+0x188>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <updateIMUValue+0x18c>)
 800164a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <updateIMUValue+0x188>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <updateIMUValue+0x190>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <updateIMUValue+0x18c>)
 8001692:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <updateIMUValue+0x18c>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <updateIMUValue+0x194>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <updateIMUValue+0x18c>)
 80016b8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <updateIMUValue+0x18c>)
 80016bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <updateIMUValue+0x190>)
 80016c2:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <updateIMUValue+0x18c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a332      	add	r3, pc, #200	; (adr r3, 80017a8 <updateIMUValue+0x170>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	a330      	add	r3, pc, #192	; (adr r3, 80017b0 <updateIMUValue+0x178>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <updateIMUValue+0x198>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4602      	mov	r2, r0
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <updateIMUValue+0x19c>)
 800171a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <updateIMUValue+0x1a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <updateIMUValue+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	a320      	add	r3, pc, #128	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <updateIMUValue+0x1a0>)
 800175a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <updateIMUValue+0x1a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a310      	add	r3, pc, #64	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <updateIMUValue+0x1a4>)
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	66666666 	.word	0x66666666
 80017ac:	40306666 	.word	0x40306666
 80017b0:	54411744 	.word	0x54411744
 80017b4:	400921fb 	.word	0x400921fb
 80017b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017bc:	3f50624d 	.word	0x3f50624d
 80017c0:	2001edf4 	.word	0x2001edf4
 80017c4:	2001ed0c 	.word	0x2001ed0c
 80017c8:	20000278 	.word	0x20000278
 80017cc:	20000274 	.word	0x20000274
 80017d0:	40668000 	.word	0x40668000
 80017d4:	2001ed1c 	.word	0x2001ed1c
 80017d8:	2001ed14 	.word	0x2001ed14
 80017dc:	2001ed18 	.word	0x2001ed18

080017e0 <IMU_average>:

void IMU_average(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	float average = 0;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	e015      	b.n	800181e <IMU_average+0x3e>
		average = average+zg;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <IMU_average+0x60>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ed97 7a01 	vldr	s14, [r7, #4]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f005 f8d5 	bl	80069bc <HAL_Delay>
		setLED2('A');
 8001812:	2041      	movs	r0, #65	; 0x41
 8001814:	f000 f920 	bl	8001a58 <setLED2>
	for(int i=0;i<=1000;i++){
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	dde5      	ble.n	80017f2 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001844 <IMU_average+0x64>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <IMU_average+0x68>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2001edf4 	.word	0x2001edf4
 8001844:	447a0000 	.word	0x447a0000
 8001848:	20000274 	.word	0x20000274

0800184c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <getTheta10mm+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2001ed14 	.word	0x2001ed14

08001868 <clearTheta10mm>:

void clearTheta10mm()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <clearTheta10mm+0x18>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2001ed14 	.word	0x2001ed14

08001884 <getaddTheta>:

float getaddTheta()
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return add_theta;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <getaddTheta+0x18>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
}
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	2001ed18 	.word	0x2001ed18

080018a0 <clearaddTheta>:

void clearaddTheta()
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	add_theta = 0;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <clearaddTheta+0x18>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2001ed18 	.word	0x2001ed18

080018bc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b52      	cmp	r3, #82	; 0x52
 80018ca:	d112      	bne.n	80018f2 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4860      	ldr	r0, [pc, #384]	; (8001a54 <setLED+0x198>)
 80018d4:	f006 fca4 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	485d      	ldr	r0, [pc, #372]	; (8001a54 <setLED+0x198>)
 80018e0:	f006 fc9e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	485a      	ldr	r0, [pc, #360]	; (8001a54 <setLED+0x198>)
 80018ec:	f006 fc98 	bl	8008220 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80018f0:	e0ab      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'G'){
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b47      	cmp	r3, #71	; 0x47
 80018f6:	d112      	bne.n	800191e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4855      	ldr	r0, [pc, #340]	; (8001a54 <setLED+0x198>)
 8001900:	f006 fc8e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	4852      	ldr	r0, [pc, #328]	; (8001a54 <setLED+0x198>)
 800190c:	f006 fc88 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	484f      	ldr	r0, [pc, #316]	; (8001a54 <setLED+0x198>)
 8001918:	f006 fc82 	bl	8008220 <HAL_GPIO_WritePin>
}
 800191c:	e095      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'B'){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b42      	cmp	r3, #66	; 0x42
 8001922:	d112      	bne.n	800194a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <setLED+0x198>)
 800192c:	f006 fc78 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4847      	ldr	r0, [pc, #284]	; (8001a54 <setLED+0x198>)
 8001938:	f006 fc72 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	4844      	ldr	r0, [pc, #272]	; (8001a54 <setLED+0x198>)
 8001944:	f006 fc6c 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001948:	e07f      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'M'){
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b4d      	cmp	r3, #77	; 0x4d
 800194e:	d112      	bne.n	8001976 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	483f      	ldr	r0, [pc, #252]	; (8001a54 <setLED+0x198>)
 8001958:	f006 fc62 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	483c      	ldr	r0, [pc, #240]	; (8001a54 <setLED+0x198>)
 8001964:	f006 fc5c 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	4839      	ldr	r0, [pc, #228]	; (8001a54 <setLED+0x198>)
 8001970:	f006 fc56 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001974:	e069      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'Y'){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b59      	cmp	r3, #89	; 0x59
 800197a:	d112      	bne.n	80019a2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001982:	4834      	ldr	r0, [pc, #208]	; (8001a54 <setLED+0x198>)
 8001984:	f006 fc4c 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198e:	4831      	ldr	r0, [pc, #196]	; (8001a54 <setLED+0x198>)
 8001990:	f006 fc46 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <setLED+0x198>)
 800199c:	f006 fc40 	bl	8008220 <HAL_GPIO_WritePin>
}
 80019a0:	e053      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'C'){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b43      	cmp	r3, #67	; 0x43
 80019a6:	d112      	bne.n	80019ce <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4829      	ldr	r0, [pc, #164]	; (8001a54 <setLED+0x198>)
 80019b0:	f006 fc36 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ba:	4826      	ldr	r0, [pc, #152]	; (8001a54 <setLED+0x198>)
 80019bc:	f006 fc30 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	4823      	ldr	r0, [pc, #140]	; (8001a54 <setLED+0x198>)
 80019c8:	f006 fc2a 	bl	8008220 <HAL_GPIO_WritePin>
}
 80019cc:	e03d      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'W'){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b57      	cmp	r3, #87	; 0x57
 80019d2:	d112      	bne.n	80019fa <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <setLED+0x198>)
 80019dc:	f006 fc20 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <setLED+0x198>)
 80019e8:	f006 fc1a 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <setLED+0x198>)
 80019f4:	f006 fc14 	bl	8008220 <HAL_GPIO_WritePin>
}
 80019f8:	e027      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'N'){
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b4e      	cmp	r3, #78	; 0x4e
 80019fe:	d112      	bne.n	8001a26 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <setLED+0x198>)
 8001a08:	f006 fc0a 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <setLED+0x198>)
 8001a14:	f006 fc04 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <setLED+0x198>)
 8001a20:	f006 fbfe 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001a24:	e011      	b.n	8001a4a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <setLED+0x198>)
 8001a2e:	f006 fbf7 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <setLED+0x198>)
 8001a3a:	f006 fbf1 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <setLED+0x198>)
 8001a46:	f006 fbeb 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020800 	.word	0x40020800

08001a58 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b52      	cmp	r3, #82	; 0x52
 8001a66:	d124      	bne.n	8001ab2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6e:	48c5      	ldr	r0, [pc, #788]	; (8001d84 <setLED2+0x32c>)
 8001a70:	f006 fbd6 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	48c3      	ldr	r0, [pc, #780]	; (8001d88 <setLED2+0x330>)
 8001a7c:	f006 fbd0 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	48c0      	ldr	r0, [pc, #768]	; (8001d88 <setLED2+0x330>)
 8001a88:	f006 fbca 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	48bd      	ldr	r0, [pc, #756]	; (8001d88 <setLED2+0x330>)
 8001a94:	f006 fbc4 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9e:	48ba      	ldr	r0, [pc, #744]	; (8001d88 <setLED2+0x330>)
 8001aa0:	f006 fbbe 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aaa:	48b7      	ldr	r0, [pc, #732]	; (8001d88 <setLED2+0x330>)
 8001aac:	f006 fbb8 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001ab0:	e163      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'G'){
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b47      	cmp	r3, #71	; 0x47
 8001ab6:	d124      	bne.n	8001b02 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abe:	48b1      	ldr	r0, [pc, #708]	; (8001d84 <setLED2+0x32c>)
 8001ac0:	f006 fbae 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	48af      	ldr	r0, [pc, #700]	; (8001d88 <setLED2+0x330>)
 8001acc:	f006 fba8 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	48ac      	ldr	r0, [pc, #688]	; (8001d88 <setLED2+0x330>)
 8001ad8:	f006 fba2 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae2:	48a9      	ldr	r0, [pc, #676]	; (8001d88 <setLED2+0x330>)
 8001ae4:	f006 fb9c 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aee:	48a6      	ldr	r0, [pc, #664]	; (8001d88 <setLED2+0x330>)
 8001af0:	f006 fb96 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	48a3      	ldr	r0, [pc, #652]	; (8001d88 <setLED2+0x330>)
 8001afc:	f006 fb90 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001b00:	e13b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'B'){
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b42      	cmp	r3, #66	; 0x42
 8001b06:	d124      	bne.n	8001b52 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0e:	489d      	ldr	r0, [pc, #628]	; (8001d84 <setLED2+0x32c>)
 8001b10:	f006 fb86 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	489b      	ldr	r0, [pc, #620]	; (8001d88 <setLED2+0x330>)
 8001b1c:	f006 fb80 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	4898      	ldr	r0, [pc, #608]	; (8001d88 <setLED2+0x330>)
 8001b28:	f006 fb7a 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b32:	4895      	ldr	r0, [pc, #596]	; (8001d88 <setLED2+0x330>)
 8001b34:	f006 fb74 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	4892      	ldr	r0, [pc, #584]	; (8001d88 <setLED2+0x330>)
 8001b40:	f006 fb6e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4a:	488f      	ldr	r0, [pc, #572]	; (8001d88 <setLED2+0x330>)
 8001b4c:	f006 fb68 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001b50:	e113      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'W'){
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b57      	cmp	r3, #87	; 0x57
 8001b56:	d124      	bne.n	8001ba2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5e:	4889      	ldr	r0, [pc, #548]	; (8001d84 <setLED2+0x32c>)
 8001b60:	f006 fb5e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6a:	4887      	ldr	r0, [pc, #540]	; (8001d88 <setLED2+0x330>)
 8001b6c:	f006 fb58 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4884      	ldr	r0, [pc, #528]	; (8001d88 <setLED2+0x330>)
 8001b78:	f006 fb52 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b82:	4881      	ldr	r0, [pc, #516]	; (8001d88 <setLED2+0x330>)
 8001b84:	f006 fb4c 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8e:	487e      	ldr	r0, [pc, #504]	; (8001d88 <setLED2+0x330>)
 8001b90:	f006 fb46 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9a:	487b      	ldr	r0, [pc, #492]	; (8001d88 <setLED2+0x330>)
 8001b9c:	f006 fb40 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001ba0:	e0eb      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'Y'){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b59      	cmp	r3, #89	; 0x59
 8001ba6:	d124      	bne.n	8001bf2 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4875      	ldr	r0, [pc, #468]	; (8001d84 <setLED2+0x32c>)
 8001bb0:	f006 fb36 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4873      	ldr	r0, [pc, #460]	; (8001d88 <setLED2+0x330>)
 8001bbc:	f006 fb30 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc6:	4870      	ldr	r0, [pc, #448]	; (8001d88 <setLED2+0x330>)
 8001bc8:	f006 fb2a 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	486d      	ldr	r0, [pc, #436]	; (8001d88 <setLED2+0x330>)
 8001bd4:	f006 fb24 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bde:	486a      	ldr	r0, [pc, #424]	; (8001d88 <setLED2+0x330>)
 8001be0:	f006 fb1e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bea:	4867      	ldr	r0, [pc, #412]	; (8001d88 <setLED2+0x330>)
 8001bec:	f006 fb18 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001bf0:	e0c3      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'X'){
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b58      	cmp	r3, #88	; 0x58
 8001bf6:	d124      	bne.n	8001c42 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfe:	4861      	ldr	r0, [pc, #388]	; (8001d84 <setLED2+0x32c>)
 8001c00:	f006 fb0e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0a:	485f      	ldr	r0, [pc, #380]	; (8001d88 <setLED2+0x330>)
 8001c0c:	f006 fb08 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <setLED2+0x330>)
 8001c18:	f006 fb02 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4859      	ldr	r0, [pc, #356]	; (8001d88 <setLED2+0x330>)
 8001c24:	f006 fafc 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2e:	4856      	ldr	r0, [pc, #344]	; (8001d88 <setLED2+0x330>)
 8001c30:	f006 faf6 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <setLED2+0x330>)
 8001c3c:	f006 faf0 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001c40:	e09b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'V'){
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b56      	cmp	r3, #86	; 0x56
 8001c46:	d124      	bne.n	8001c92 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c4e:	484d      	ldr	r0, [pc, #308]	; (8001d84 <setLED2+0x32c>)
 8001c50:	f006 fae6 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	484b      	ldr	r0, [pc, #300]	; (8001d88 <setLED2+0x330>)
 8001c5c:	f006 fae0 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	4848      	ldr	r0, [pc, #288]	; (8001d88 <setLED2+0x330>)
 8001c68:	f006 fada 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <setLED2+0x330>)
 8001c74:	f006 fad4 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	4842      	ldr	r0, [pc, #264]	; (8001d88 <setLED2+0x330>)
 8001c80:	f006 face 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c8a:	483f      	ldr	r0, [pc, #252]	; (8001d88 <setLED2+0x330>)
 8001c8c:	f006 fac8 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001c90:	e073      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'T'){
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b54      	cmp	r3, #84	; 0x54
 8001c96:	d124      	bne.n	8001ce2 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <setLED2+0x32c>)
 8001ca0:	f006 fabe 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	4837      	ldr	r0, [pc, #220]	; (8001d88 <setLED2+0x330>)
 8001cac:	f006 fab8 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <setLED2+0x330>)
 8001cb8:	f006 fab2 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	4831      	ldr	r0, [pc, #196]	; (8001d88 <setLED2+0x330>)
 8001cc4:	f006 faac 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cce:	482e      	ldr	r0, [pc, #184]	; (8001d88 <setLED2+0x330>)
 8001cd0:	f006 faa6 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cda:	482b      	ldr	r0, [pc, #172]	; (8001d88 <setLED2+0x330>)
 8001cdc:	f006 faa0 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001ce0:	e04b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'A'){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b41      	cmp	r3, #65	; 0x41
 8001ce6:	d124      	bne.n	8001d32 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <setLED2+0x32c>)
 8001cf0:	f006 fa96 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <setLED2+0x330>)
 8001cfc:	f006 fa90 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <setLED2+0x330>)
 8001d08:	f006 fa8a 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d12:	481d      	ldr	r0, [pc, #116]	; (8001d88 <setLED2+0x330>)
 8001d14:	f006 fa84 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1e:	481a      	ldr	r0, [pc, #104]	; (8001d88 <setLED2+0x330>)
 8001d20:	f006 fa7e 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2a:	4817      	ldr	r0, [pc, #92]	; (8001d88 <setLED2+0x330>)
 8001d2c:	f006 fa78 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001d30:	e023      	b.n	8001d7a <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <setLED2+0x32c>)
 8001d3a:	f006 fa71 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <setLED2+0x330>)
 8001d46:	f006 fa6b 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <setLED2+0x330>)
 8001d52:	f006 fa65 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5c:	480a      	ldr	r0, [pc, #40]	; (8001d88 <setLED2+0x330>)
 8001d5e:	f006 fa5f 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <setLED2+0x330>)
 8001d6a:	f006 fa59 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <setLED2+0x330>)
 8001d76:	f006 fa53 	bl	8008220 <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	00000000 	.word	0x00000000

08001d90 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001d98:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <calculateLineFollowingTermFlip+0x2d8>)
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	4bb3      	ldr	r3, [pc, #716]	; (800206c <calculateLineFollowingTermFlip+0x2dc>)
 8001d9e:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001da6:	4bb2      	ldr	r3, [pc, #712]	; (8002070 <calculateLineFollowingTermFlip+0x2e0>)
 8001da8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	f040 8140 	bne.w	8002032 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dba:	4baf      	ldr	r3, [pc, #700]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001dc2:	4bac      	ldr	r3, [pc, #688]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001dc8:	4bac      	ldr	r3, [pc, #688]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fba8 	bl	8000524 <__aeabi_i2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4ba9      	ldr	r3, [pc, #676]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	4625      	mov	r5, r4
 8001de4:	461c      	mov	r4, r3
 8001de6:	4ba5      	ldr	r3, [pc, #660]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb99 	bl	8000524 <__aeabi_i2d>
 8001df2:	a393      	add	r3, pc, #588	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa42 	bl	800028c <__adddf3>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4625      	mov	r5, r4
 8001e0e:	461c      	mov	r4, r3
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb84 	bl	8000524 <__aeabi_i2d>
 8001e1c:	a38a      	add	r3, pc, #552	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fbe9 	bl	80005f8 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fa2d 	bl	800028c <__adddf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4625      	mov	r5, r4
 8001e38:	461c      	mov	r4, r3
 8001e3a:	4b90      	ldr	r3, [pc, #576]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	a382      	add	r3, pc, #520	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbd4 	bl	80005f8 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa18 	bl	800028c <__adddf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4625      	mov	r5, r4
 8001e62:	461c      	mov	r4, r3
 8001e64:	4b85      	ldr	r3, [pc, #532]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb5a 	bl	8000524 <__aeabi_i2d>
 8001e70:	a379      	add	r3, pc, #484	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbbf 	bl	80005f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa03 	bl	800028c <__adddf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4625      	mov	r5, r4
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe f9f3 	bl	800028c <__adddf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001eb4:	f7fe fcca 	bl	800084c <__aeabi_ddiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4625      	mov	r5, r4
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	4b6e      	ldr	r3, [pc, #440]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_i2d>
 8001ecc:	4680      	mov	r8, r0
 8001ece:	4689      	mov	r9, r1
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ed2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb24 	bl	8000524 <__aeabi_i2d>
 8001edc:	a35e      	add	r3, pc, #376	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb89 	bl	80005f8 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe f9cd 	bl	800028c <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	4699      	mov	r9, r3
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001efc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb0f 	bl	8000524 <__aeabi_i2d>
 8001f06:	a352      	add	r3, pc, #328	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe f9b8 	bl	800028c <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	4b55      	ldr	r3, [pc, #340]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fafa 	bl	8000524 <__aeabi_i2d>
 8001f30:	a345      	add	r3, pc, #276	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb5f 	bl	80005f8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4649      	mov	r1, r9
 8001f42:	f7fe f9a3 	bl	800028c <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4b4b      	ldr	r3, [pc, #300]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fae5 	bl	8000524 <__aeabi_i2d>
 8001f5a:	a339      	add	r3, pc, #228	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb4a 	bl	80005f8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe f98e 	bl	800028c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4690      	mov	r8, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fad0 	bl	8000524 <__aeabi_i2d>
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4640      	mov	r0, r8
 8001f94:	4649      	mov	r1, r9
 8001f96:	f7fe f979 	bl	800028c <__adddf3>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001fa8:	f7fe fc50 	bl	800084c <__aeabi_ddiv>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe f968 	bl	8000288 <__aeabi_dsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	f7fe fe12 	bl	8000be8 <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fe2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	ee17 0a90 	vmov	r0, s15
 8001ff2:	f7fe faa9 	bl	8000548 <__aeabi_f2d>
 8001ff6:	a31a      	add	r3, pc, #104	; (adr r3, 8002060 <calculateLineFollowingTermFlip+0x2d0>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fc26 	bl	800084c <__aeabi_ddiv>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f7fe fdee 	bl	8000be8 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <calculateLineFollowingTermFlip+0x2fc>)
 8002028:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6013      	str	r3, [r2, #0]
	}
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	9999999a 	.word	0x9999999a
 8002044:	3ff99999 	.word	0x3ff99999
 8002048:	33333333 	.word	0x33333333
 800204c:	3ff73333 	.word	0x3ff73333
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	3ff4cccc 	.word	0x3ff4cccc
 8002058:	66666666 	.word	0x66666666
 800205c:	3ff26666 	.word	0x3ff26666
 8002060:	d2f1a9fc 	.word	0xd2f1a9fc
 8002064:	3f50624d 	.word	0x3f50624d
 8002068:	40733333 	.word	0x40733333
 800206c:	3ccccccd 	.word	0x3ccccccd
 8002070:	2000027a 	.word	0x2000027a
 8002074:	2000027b 	.word	0x2000027b
 8002078:	20000288 	.word	0x20000288
 800207c:	2001ec38 	.word	0x2001ec38
 8002080:	3ffc0000 	.word	0x3ffc0000
 8002084:	40180000 	.word	0x40180000
 8002088:	20000284 	.word	0x20000284
 800208c:	2000027c 	.word	0x2000027c

08002090 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <lineTraceFlip+0x150>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8097 	bne.w	80021d0 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 80020a2:	f001 fb55 	bl	8003750 <getVelocityControlTerm>
 80020a6:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <lineTraceFlip+0x154>)
 80020ac:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 80020ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	db02      	blt.n	80020c6 <lineTraceFlip+0x36>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e010      	b.n	80020e8 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 80020c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d805      	bhi.n	80020e8 <lineTraceFlip+0x58>
 80020dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e0:	eef1 7a67 	vneg.f32	s15, s15
 80020e4:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <lineTraceFlip+0x158>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80021ec <lineTraceFlip+0x15c>
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	db0d      	blt.n	8002126 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <lineTraceFlip+0x158>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80021ec <lineTraceFlip+0x15c>
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	edc7 7a04 	vstr	s15, [r7, #16]
 8002124:	e01a      	b.n	800215c <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <lineTraceFlip+0x158>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80021f0 <lineTraceFlip+0x160>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d80c      	bhi.n	800215c <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <lineTraceFlip+0x158>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ed97 7a05 	vldr	s14, [r7, #20]
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021f0 <lineTraceFlip+0x160>
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 800215c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002160:	edd7 7a04 	vldr	s15, [r7, #16]
 8002164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002168:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <lineTraceFlip+0x158>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	edd7 7a04 	vldr	s15, [r7, #16]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <lineTraceFlip+0x158>)
 800217c:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <lineTraceFlip+0x158>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ed97 7a05 	vldr	s14, [r7, #20]
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <lineTraceFlip+0x158>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed97 7a05 	vldr	s14, [r7, #20]
 800219c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a0:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <lineTraceFlip+0x164>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 80021aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b2:	ee17 3a90 	vmov	r3, s15
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c0:	ee17 2a90 	vmov	r2, s15
 80021c4:	b212      	sxth	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 f8c1 	bl	8005350 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021ce:	e003      	b.n	80021d8 <lineTraceFlip+0x148>
		setMotor(0, 0);
 80021d0:	2100      	movs	r1, #0
 80021d2:	2000      	movs	r0, #0
 80021d4:	f003 f8bc 	bl	8005350 <setMotor>
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000027a 	.word	0x2000027a
 80021e4:	44b264cd 	.word	0x44b264cd
 80021e8:	2000027c 	.word	0x2000027c
 80021ec:	44d1e000 	.word	0x44d1e000
 80021f0:	c4d1e000 	.word	0xc4d1e000
 80021f4:	2001ed20 	.word	0x2001ed20

080021f8 <startLineTrace>:

void startLineTrace()
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <startLineTrace+0x1c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <startLineTrace+0x20>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000027a 	.word	0x2000027a
 8002218:	2000027b 	.word	0x2000027b

0800221c <stopLineTrace>:

void stopLineTrace()
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <stopLineTrace+0x1c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <stopLineTrace+0x20>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2000027a 	.word	0x2000027a
 800223c:	2000027c 	.word	0x2000027c

08002240 <checkCourseOut>:

void checkCourseOut(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <checkCourseOut+0xb4>)
 8002248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224c:	461a      	mov	r2, r3
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <checkCourseOut+0xb4>)
 8002250:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002254:	4413      	add	r3, r2
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <checkCourseOut+0xb4>)
 8002258:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <checkCourseOut+0xb4>)
 8002260:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002264:	4413      	add	r3, r2
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <checkCourseOut+0xb4>)
 8002268:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800226c:	4413      	add	r3, r2
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <checkCourseOut+0xb4>)
 8002270:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002274:	4413      	add	r3, r2
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <checkCourseOut+0xb4>)
 8002278:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800227c:	4413      	add	r3, r2
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <checkCourseOut+0xb4>)
 8002280:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002284:	4413      	add	r3, r2
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <checkCourseOut+0xb4>)
 8002288:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800228c:	4413      	add	r3, r2
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <checkCourseOut+0xb4>)
 8002290:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002294:	4413      	add	r3, r2
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <checkCourseOut+0xb4>)
 8002298:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800229c:	4413      	add	r3, r2
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <checkCourseOut+0xb4>)
 80022a0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <checkCourseOut+0xb8>)
 80022a8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ac:	1052      	asrs	r2, r2, #1
 80022ae:	17db      	asrs	r3, r3, #31
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022ba:	d906      	bls.n	80022ca <checkCourseOut+0x8a>
		dark_cnt++;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <checkCourseOut+0xbc>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <checkCourseOut+0xbc>)
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	e002      	b.n	80022d0 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <checkCourseOut+0xbc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <checkCourseOut+0xbc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b13      	cmp	r3, #19
 80022d6:	d903      	bls.n	80022e0 <checkCourseOut+0xa0>
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <checkCourseOut+0xc0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 80022de:	e002      	b.n	80022e6 <checkCourseOut+0xa6>
	else dark_flag = false;
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <checkCourseOut+0xc0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2001ec38 	.word	0x2001ec38
 80022f8:	2aaaaaab 	.word	0x2aaaaaab
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000280 	.word	0x20000280

08002304 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return dark_flag;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <getCouseOutFlag+0x14>)
 800230a:	781b      	ldrb	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000280 	.word	0x20000280

0800231c <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002320:	2202      	movs	r2, #2
 8002322:	4905      	ldr	r1, [pc, #20]	; (8002338 <initADC+0x1c>)
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <initADC+0x20>)
 8002326:	f004 fbaf 	bl	8006a88 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800232a:	220c      	movs	r2, #12
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <initADC+0x24>)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <initADC+0x28>)
 8002330:	f004 fbaa 	bl	8006a88 <HAL_ADC_Start_DMA>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200002a8 	.word	0x200002a8
 800233c:	2001ed74 	.word	0x2001ed74
 8002340:	20000290 	.word	0x20000290
 8002344:	2001ed24 	.word	0x2001ed24

08002348 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800234c:	4bc9      	ldr	r3, [pc, #804]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002358:	4bc7      	ldr	r3, [pc, #796]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800235a:	edd3 7a01 	vldr	s15, [r3, #4]
 800235e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002362:	4bc6      	ldr	r3, [pc, #792]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002364:	ed93 7a01 	vldr	s14, [r3, #4]
 8002368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002374:	4bc3      	ldr	r3, [pc, #780]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	b219      	sxth	r1, r3
 8002384:	4bc0      	ldr	r3, [pc, #768]	; (8002688 <storeAnalogSensorBuffer+0x340>)
 8002386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800238a:	4bba      	ldr	r3, [pc, #744]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002396:	4bb8      	ldr	r3, [pc, #736]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023a0:	4bb6      	ldr	r3, [pc, #728]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023aa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	4bb4      	ldr	r3, [pc, #720]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	b219      	sxth	r1, r3
 80023c2:	4bb2      	ldr	r3, [pc, #712]	; (800268c <storeAnalogSensorBuffer+0x344>)
 80023c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023c8:	4baa      	ldr	r3, [pc, #680]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d4:	4ba8      	ldr	r3, [pc, #672]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80023d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023de:	4ba7      	ldr	r3, [pc, #668]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f0:	4ba4      	ldr	r3, [pc, #656]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fa:	ee17 3a90 	vmov	r3, s15
 80023fe:	b219      	sxth	r1, r3
 8002400:	4ba3      	ldr	r3, [pc, #652]	; (8002690 <storeAnalogSensorBuffer+0x348>)
 8002402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002406:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002408:	88db      	ldrh	r3, [r3, #6]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	4b99      	ldr	r3, [pc, #612]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002414:	edd3 7a03 	vldr	s15, [r3, #12]
 8002418:	ee77 6a67 	vsub.f32	s13, s14, s15
 800241c:	4b97      	ldr	r3, [pc, #604]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800241e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002426:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	b219      	sxth	r1, r3
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <storeAnalogSensorBuffer+0x34c>)
 8002440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002444:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002446:	891b      	ldrh	r3, [r3, #8]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002452:	edd3 7a04 	vldr	s15, [r3, #16]
 8002456:	ee77 6a67 	vsub.f32	s13, s14, s15
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800245c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002464:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	4b85      	ldr	r3, [pc, #532]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	b219      	sxth	r1, r3
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <storeAnalogSensorBuffer+0x350>)
 800247e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002484:	895b      	ldrh	r3, [r3, #10]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002490:	edd3 7a05 	vldr	s15, [r3, #20]
 8002494:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002498:	4b78      	ldr	r3, [pc, #480]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800249a:	ed93 7a05 	vldr	s14, [r3, #20]
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 3a90 	vmov	r3, s15
 80024b8:	b219      	sxth	r1, r3
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <storeAnalogSensorBuffer+0x354>)
 80024bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80024c2:	899b      	ldrh	r3, [r3, #12]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80024ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b69      	ldr	r3, [pc, #420]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80024d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f2:	ee17 3a90 	vmov	r3, s15
 80024f6:	b219      	sxth	r1, r3
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <storeAnalogSensorBuffer+0x358>)
 80024fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002500:	89db      	ldrh	r3, [r3, #14]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800250c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002510:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002516:	ed93 7a07 	vldr	s14, [r3, #28]
 800251a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
 8002534:	b219      	sxth	r1, r3
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <storeAnalogSensorBuffer+0x35c>)
 8002538:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800253e:	8a1b      	ldrh	r3, [r3, #16]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800254a:	edd3 7a08 	vldr	s15, [r3, #32]
 800254e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002554:	ed93 7a08 	vldr	s14, [r3, #32]
 8002558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	b219      	sxth	r1, r3
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <storeAnalogSensorBuffer+0x360>)
 8002576:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800257c:	8a5b      	ldrh	r3, [r3, #18]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002588:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800258c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002592:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 3a90 	vmov	r3, s15
 80025b0:	b219      	sxth	r1, r3
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <storeAnalogSensorBuffer+0x364>)
 80025b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025ba:	8a9b      	ldrh	r3, [r3, #20]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80025c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80025d0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	b219      	sxth	r1, r3
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <storeAnalogSensorBuffer+0x368>)
 80025f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025f8:	8adb      	ldrh	r3, [r3, #22]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002604:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002608:	ee77 6a67 	vsub.f32	s13, s14, s15
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800260e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002616:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	b219      	sxth	r1, r3
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <storeAnalogSensorBuffer+0x36c>)
 8002630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <storeAnalogSensorBuffer+0x370>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <storeAnalogSensorBuffer+0x374>)
 8002642:	edd3 7a01 	vldr	s15, [r3, #4]
 8002646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <storeAnalogSensorBuffer+0x378>)
 800264c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b219      	sxth	r1, r3
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <storeAnalogSensorBuffer+0x37c>)
 800266e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002672:	e029      	b.n	80026c8 <storeAnalogSensorBuffer+0x380>
 8002674:	20000290 	.word	0x20000290
 8002678:	2001ebf8 	.word	0x2001ebf8
 800267c:	2001ec5c 	.word	0x2001ec5c
 8002680:	447a0000 	.word	0x447a0000
 8002684:	20000030 	.word	0x20000030
 8002688:	200002c0 	.word	0x200002c0
 800268c:	200002ac 	.word	0x200002ac
 8002690:	200002d4 	.word	0x200002d4
 8002694:	200002e8 	.word	0x200002e8
 8002698:	200002fc 	.word	0x200002fc
 800269c:	20000310 	.word	0x20000310
 80026a0:	20000324 	.word	0x20000324
 80026a4:	20000338 	.word	0x20000338
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	20000360 	.word	0x20000360
 80026b0:	20000374 	.word	0x20000374
 80026b4:	20000388 	.word	0x20000388
 80026b8:	200002a8 	.word	0x200002a8
 80026bc:	2001ebf0 	.word	0x2001ebf0
 80026c0:	2001ec30 	.word	0x2001ec30
 80026c4:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <storeAnalogSensorBuffer+0x3d4>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <storeAnalogSensorBuffer+0x3d8>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <storeAnalogSensorBuffer+0x3dc>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002728 <storeAnalogSensorBuffer+0x3e0>
 80026ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fa:	ee17 3a90 	vmov	r3, s15
 80026fe:	b219      	sxth	r1, r3
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <storeAnalogSensorBuffer+0x3e8>)
 8002702:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	200002a8 	.word	0x200002a8
 8002720:	2001ebf0 	.word	0x2001ebf0
 8002724:	2001ec30 	.word	0x2001ec30
 8002728:	447a0000 	.word	0x447a0000
 800272c:	20000030 	.word	0x20000030
 8002730:	200003b0 	.word	0x200003b0

08002734 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800273a:	4bc9      	ldr	r3, [pc, #804]	; (8002a60 <updateAnalogSensor+0x32c>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002746:	4bc7      	ldr	r3, [pc, #796]	; (8002a64 <updateAnalogSensor+0x330>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002750:	4bc5      	ldr	r3, [pc, #788]	; (8002a68 <updateAnalogSensor+0x334>)
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a6c <updateAnalogSensor+0x338>
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 3a90 	vmov	r3, s15
 800276a:	b21a      	sxth	r2, r3
 800276c:	4bc0      	ldr	r3, [pc, #768]	; (8002a70 <updateAnalogSensor+0x33c>)
 800276e:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002770:	4bbb      	ldr	r3, [pc, #748]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277c:	4bb9      	ldr	r3, [pc, #740]	; (8002a64 <updateAnalogSensor+0x330>)
 800277e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002782:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002786:	4bb8      	ldr	r3, [pc, #736]	; (8002a68 <updateAnalogSensor+0x334>)
 8002788:	ed93 7a01 	vldr	s14, [r3, #4]
 800278c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002790:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a6c <updateAnalogSensor+0x338>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	4bb3      	ldr	r3, [pc, #716]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027a4:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80027a6:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	4bac      	ldr	r3, [pc, #688]	; (8002a64 <updateAnalogSensor+0x330>)
 80027b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027bc:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <updateAnalogSensor+0x334>)
 80027be:	ed93 7a02 	vldr	s14, [r3, #8]
 80027c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a6c <updateAnalogSensor+0x338>
 80027ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	ee17 3a90 	vmov	r3, s15
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4ba5      	ldr	r3, [pc, #660]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027da:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027de:	88db      	ldrh	r3, [r3, #6]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <updateAnalogSensor+0x330>)
 80027ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027f2:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <updateAnalogSensor+0x334>)
 80027f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fc:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a6c <updateAnalogSensor+0x338>
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002808:	ee17 3a90 	vmov	r3, s15
 800280c:	b21a      	sxth	r2, r3
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002810:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002812:	4b93      	ldr	r3, [pc, #588]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002814:	891b      	ldrh	r3, [r3, #8]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	4b91      	ldr	r3, [pc, #580]	; (8002a64 <updateAnalogSensor+0x330>)
 8002820:	edd3 7a04 	vldr	s15, [r3, #16]
 8002824:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <updateAnalogSensor+0x334>)
 800282a:	ed93 7a04 	vldr	s14, [r3, #16]
 800282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002832:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a6c <updateAnalogSensor+0x338>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b8a      	ldr	r3, [pc, #552]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002846:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002848:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <updateAnalogSensor+0x32c>)
 800284a:	895b      	ldrh	r3, [r3, #10]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <updateAnalogSensor+0x330>)
 8002856:	edd3 7a05 	vldr	s15, [r3, #20]
 800285a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <updateAnalogSensor+0x334>)
 8002860:	ed93 7a05 	vldr	s14, [r3, #20]
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a6c <updateAnalogSensor+0x338>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002874:	ee17 3a90 	vmov	r3, s15
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <updateAnalogSensor+0x33c>)
 800287c:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002880:	899b      	ldrh	r3, [r3, #12]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288a:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <updateAnalogSensor+0x330>)
 800288c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002890:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002894:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <updateAnalogSensor+0x334>)
 8002896:	ed93 7a06 	vldr	s14, [r3, #24]
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a6c <updateAnalogSensor+0x338>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	ee17 3a90 	vmov	r3, s15
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028b2:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028b6:	89db      	ldrh	r3, [r3, #14]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <updateAnalogSensor+0x330>)
 80028c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80028c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <updateAnalogSensor+0x334>)
 80028cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a6c <updateAnalogSensor+0x338>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028e8:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028ec:	8a1b      	ldrh	r3, [r3, #16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <updateAnalogSensor+0x330>)
 80028f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80028fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <updateAnalogSensor+0x334>)
 8002902:	ed93 7a08 	vldr	s14, [r3, #32]
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a6c <updateAnalogSensor+0x338>
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002916:	ee17 3a90 	vmov	r3, s15
 800291a:	b21a      	sxth	r2, r3
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <updateAnalogSensor+0x33c>)
 800291e:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002922:	8a5b      	ldrh	r3, [r3, #18]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <updateAnalogSensor+0x330>)
 800292e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <updateAnalogSensor+0x334>)
 8002938:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002940:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a6c <updateAnalogSensor+0x338>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002954:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002958:	8a9b      	ldrh	r3, [r3, #20]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <updateAnalogSensor+0x330>)
 8002964:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002968:	ee77 6a67 	vsub.f32	s13, s14, s15
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <updateAnalogSensor+0x334>)
 800296e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002976:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a6c <updateAnalogSensor+0x338>
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800297e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002982:	ee17 3a90 	vmov	r3, s15
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <updateAnalogSensor+0x33c>)
 800298a:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <updateAnalogSensor+0x32c>)
 800298e:	8adb      	ldrh	r3, [r3, #22]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <updateAnalogSensor+0x330>)
 800299a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800299e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <updateAnalogSensor+0x334>)
 80029a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80029a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a6c <updateAnalogSensor+0x338>
 80029b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b8:	ee17 3a90 	vmov	r3, s15
 80029bc:	b21a      	sxth	r2, r3
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <updateAnalogSensor+0x33c>)
 80029c0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <updateAnalogSensor+0x340>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <updateAnalogSensor+0x340>)
 80029cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <updateAnalogSensor+0x340>)
 80029d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <updateAnalogSensor+0x340>)
 80029dc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <updateAnalogSensor+0x340>)
 80029e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <updateAnalogSensor+0x340>)
 80029ec:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <updateAnalogSensor+0x340>)
 80029f4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <updateAnalogSensor+0x340>)
 80029fc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a04:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a0c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <updateAnalogSensor+0x344>)
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	1092      	asrs	r2, r2, #2
 8002a1a:	17db      	asrs	r3, r3, #31
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <updateAnalogSensor+0x348>)
 8002a22:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a36:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a3e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a4e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a56:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	e012      	b.n	8002a84 <updateAnalogSensor+0x350>
 8002a5e:	bf00      	nop
 8002a60:	20000290 	.word	0x20000290
 8002a64:	2001ebf8 	.word	0x2001ebf8
 8002a68:	2001ec5c 	.word	0x2001ec5c
 8002a6c:	447a0000 	.word	0x447a0000
 8002a70:	2001ec38 	.word	0x2001ec38
 8002a74:	2000039c 	.word	0x2000039c
 8002a78:	66666667 	.word	0x66666667
 8002a7c:	2001ebdc 	.word	0x2001ebdc
 8002a80:	200003b0 	.word	0x200003b0
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a86:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a8e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a96:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <updateAnalogSensor+0x3d4>)
 8002a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa2:	1092      	asrs	r2, r2, #2
 8002aa4:	17db      	asrs	r3, r3, #31
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <updateAnalogSensor+0x3d8>)
 8002aac:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e01a      	b.n	8002aea <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac0:	db05      	blt.n	8002ace <updateAnalogSensor+0x39a>
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc04      	bgt.n	8002ae4 <updateAnalogSensor+0x3b0>
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	dde1      	ble.n	8002ab4 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <updateAnalogSensor+0x3e0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]

}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200003b0 	.word	0x200003b0
 8002b08:	66666667 	.word	0x66666667
 8002b0c:	2001ec54 	.word	0x2001ec54
 8002b10:	2001ec38 	.word	0x2001ec38
 8002b14:	20000030 	.word	0x20000030

08002b18 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a0      	sub	sp, #128	; 0x80
 8002b1c:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b22:	2230      	movs	r2, #48	; 0x30
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f009 fa65 	bl	800bff6 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	2230      	movs	r2, #48	; 0x30
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 fa5e 	bl	800bff6 <memset>
 8002b3a:	4bd8      	ldr	r3, [pc, #864]	; (8002e9c <sensorCalibration+0x384>)
 8002b3c:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b44:	e026      	b.n	8002b94 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b4a:	4ad5      	ldr	r2, [pc, #852]	; (8002ea0 <sensorCalibration+0x388>)
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b56:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b5a:	4ad2      	ldr	r2, [pc, #840]	; (8002ea4 <sensorCalibration+0x38c>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	4ad1      	ldr	r2, [pc, #836]	; (8002ea8 <sensorCalibration+0x390>)
 8002b62:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b40      	subs	r3, #64	; 0x40
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b82:	4413      	add	r3, r2
 8002b84:	3b70      	subs	r3, #112	; 0x70
 8002b86:	4ac8      	ldr	r2, [pc, #800]	; (8002ea8 <sensorCalibration+0x390>)
 8002b88:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b8a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b94:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b98:	2b0b      	cmp	r3, #11
 8002b9a:	d9d4      	bls.n	8002b46 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002ba2:	e013      	b.n	8002bcc <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002ba4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ba8:	4ac0      	ldr	r2, [pc, #768]	; (8002eac <sensorCalibration+0x394>)
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002bb4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bb8:	4abd      	ldr	r2, [pc, #756]	; (8002eb0 <sensorCalibration+0x398>)
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4aba      	ldr	r2, [pc, #744]	; (8002ea8 <sensorCalibration+0x390>)
 8002bc0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002bcc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d9e7      	bls.n	8002ba4 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002bd4:	e0f5      	b.n	8002dc2 <sensorCalibration+0x2aa>

		setLED2('X');
 8002bd6:	2058      	movs	r0, #88	; 0x58
 8002bd8:	f7fe ff3e 	bl	8001a58 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002be2:	e06e      	b.n	8002cc2 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002be4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002be8:	4ab2      	ldr	r2, [pc, #712]	; (8002eb4 <sensorCalibration+0x39c>)
 8002bea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bf2:	ee07 2a90 	vmov	s15, r2
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c00:	4413      	add	r3, r2
 8002c02:	3b40      	subs	r3, #64	; 0x40
 8002c04:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002c08:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c0c:	4aa9      	ldr	r2, [pc, #676]	; (8002eb4 <sensorCalibration+0x39c>)
 8002c0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c16:	ee07 2a90 	vmov	s15, r2
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c24:	4413      	add	r3, r2
 8002c26:	3b70      	subs	r3, #112	; 0x70
 8002c28:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c2c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c36:	4413      	add	r3, r2
 8002c38:	3b40      	subs	r3, #64	; 0x40
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c42:	4a97      	ldr	r2, [pc, #604]	; (8002ea0 <sensorCalibration+0x388>)
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	dd0d      	ble.n	8002c72 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002c56:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c5a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c64:	440a      	add	r2, r1
 8002c66:	3a40      	subs	r2, #64	; 0x40
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	498d      	ldr	r1, [pc, #564]	; (8002ea0 <sensorCalibration+0x388>)
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c72:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b70      	subs	r3, #112	; 0x70
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c88:	4a86      	ldr	r2, [pc, #536]	; (8002ea4 <sensorCalibration+0x38c>)
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d50d      	bpl.n	8002cb8 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002c9c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002ca0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002caa:	440a      	add	r2, r1
 8002cac:	3a70      	subs	r2, #112	; 0x70
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	497c      	ldr	r1, [pc, #496]	; (8002ea4 <sensorCalibration+0x38c>)
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002cc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cc6:	2b0b      	cmp	r3, #11
 8002cc8:	d98c      	bls.n	8002be4 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002cd0:	e073      	b.n	8002dba <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cd2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cd6:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cdc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ce0:	ee07 2a90 	vmov	s15, r2
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b78      	subs	r3, #120	; 0x78
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cfa:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d04:	ee07 2a90 	vmov	s15, r2
 8002d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d12:	4413      	add	r3, r2
 8002d14:	3b80      	subs	r3, #128	; 0x80
 8002d16:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002d1a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d24:	4413      	add	r3, r2
 8002d26:	3b78      	subs	r3, #120	; 0x78
 8002d28:	ed93 7a00 	vldr	s14, [r3]
 8002d2c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <sensorCalibration+0x394>)
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dd10      	ble.n	8002d66 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002d44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d48:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d4e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d52:	ee07 2a90 	vmov	s15, r2
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	4a54      	ldr	r2, [pc, #336]	; (8002eac <sensorCalibration+0x394>)
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	edc3 7a00 	vstr	s15, [r3]
 8002d64:	e024      	b.n	8002db0 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d66:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d70:	4413      	add	r3, r2
 8002d72:	3b80      	subs	r3, #128	; 0x80
 8002d74:	ed93 7a00 	vldr	s14, [r3]
 8002d78:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <sensorCalibration+0x398>)
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d50f      	bpl.n	8002db0 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002d90:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d9a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d9e:	ee07 2a90 	vmov	s15, r2
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <sensorCalibration+0x398>)
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002db0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002dba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d987      	bls.n	8002cd2 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002dc2:	204c      	movs	r0, #76	; 0x4c
 8002dc4:	f003 fc7a 	bl	80066bc <getSwitchStatus>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f43f af03 	beq.w	8002bd6 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002dd6:	e01b      	b.n	8002e10 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002dd8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <sensorCalibration+0x388>)
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <sensorCalibration+0x38c>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <sensorCalibration+0x3a4>)
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002e10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	d9df      	bls.n	8002dd8 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e1e:	e010      	b.n	8002e42 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002e20:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e28:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <sensorCalibration+0x38c>)
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	440a      	add	r2, r1
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <sensorCalibration+0x3a8>)
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e38:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e46:	2b0b      	cmp	r3, #11
 8002e48:	d9ea      	bls.n	8002e20 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e50:	e01b      	b.n	8002e8a <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <sensorCalibration+0x394>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <sensorCalibration+0x398>)
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <sensorCalibration+0x3ac>)
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e80:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e8a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d9df      	bls.n	8002e52 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e98:	e027      	b.n	8002eea <sensorCalibration+0x3d2>
 8002e9a:	bf00      	nop
 8002e9c:	447a0000 	.word	0x447a0000
 8002ea0:	2001edbc 	.word	0x2001edbc
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	44bb8000 	.word	0x44bb8000
 8002eac:	2001ed6c 	.word	0x2001ed6c
 8002eb0:	2001edec 	.word	0x2001edec
 8002eb4:	20000290 	.word	0x20000290
 8002eb8:	200002a8 	.word	0x200002a8
 8002ebc:	2001ec5c 	.word	0x2001ec5c
 8002ec0:	2001ebf8 	.word	0x2001ebf8
 8002ec4:	2001ec30 	.word	0x2001ec30
		side_offset_values[i] = side_min_values[i];
 8002ec8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002ecc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ed0:	490a      	ldr	r1, [pc, #40]	; (8002efc <sensorCalibration+0x3e4>)
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	440a      	add	r2, r1
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <sensorCalibration+0x3e8>)
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ee0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002eea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d9ea      	bls.n	8002ec8 <sensorCalibration+0x3b0>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	3780      	adds	r7, #128	; 0x80
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2001edec 	.word	0x2001edec
 8002f00:	2001ebf0 	.word	0x2001ebf0

08002f04 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <initLog+0x60>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <initLog+0x64>)
 8002f0e:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <initLog+0x68>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <initLog+0x6c>)
 8002f16:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <initLog+0x70>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <initLog+0x74>)
 8002f1e:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <initLog+0x78>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <initLog+0x7c>)
 8002f26:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <initLog+0x80>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <initLog+0x84>)
 8002f2e:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <initLog+0x60>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <initLog+0x88>)
 8002f36:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <initLog+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <initLog+0x8c>)
 8002f3e:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <initLog+0x70>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <initLog+0x90>)
 8002f46:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <initLog+0x78>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <initLog+0x94>)
 8002f4e:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <initLog+0x80>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <initLog+0x98>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	080104f0 	.word	0x080104f0
 8002f68:	2001ebd8 	.word	0x2001ebd8
 8002f6c:	080104f4 	.word	0x080104f4
 8002f70:	2001ec2c 	.word	0x2001ec2c
 8002f74:	080104f8 	.word	0x080104f8
 8002f78:	2001ebe8 	.word	0x2001ebe8
 8002f7c:	080104fc 	.word	0x080104fc
 8002f80:	2001ebd4 	.word	0x2001ebd4
 8002f84:	08010500 	.word	0x08010500
 8002f88:	2001ebe4 	.word	0x2001ebe4
 8002f8c:	2001ebe0 	.word	0x2001ebe0
 8002f90:	2001ebec 	.word	0x2001ebec
 8002f94:	2001ec58 	.word	0x2001ec58
 8002f98:	2001ec50 	.word	0x2001ec50
 8002f9c:	2001ec28 	.word	0x2001ec28

08002fa0 <saveDistance>:

void saveDistance(float distance){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <saveDistance+0x2c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fb06 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <saveDistance+0x2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <saveDistance+0x2c>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2001ebd8 	.word	0x2001ebd8

08002fd0 <saveTheta>:

void saveTheta(float theta){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <saveTheta+0x2c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe faee 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <saveTheta+0x2c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <saveTheta+0x2c>)
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2001ec2c 	.word	0x2001ec2c

08003000 <saveCross>:

void saveCross(float cross){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <saveCross+0x2c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fad6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <saveCross+0x2c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3304      	adds	r3, #4
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <saveCross+0x2c>)
 8003020:	6013      	str	r3, [r2, #0]
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2001ebe8 	.word	0x2001ebe8

08003030 <saveSide>:

void saveSide(float side){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <saveSide+0x2c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fabe 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <saveSide+0x2c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3304      	adds	r3, #4
 800304e:	4a03      	ldr	r2, [pc, #12]	; (800305c <saveSide+0x2c>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2001ebd4 	.word	0x2001ebd4

08003060 <saveDebug>:

void saveDebug(float value){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <saveDebug+0x2c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe faa6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <saveDebug+0x2c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4a03      	ldr	r2, [pc, #12]	; (800308c <saveDebug+0x2c>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2001ebe4 	.word	0x2001ebe4

08003090 <ereaseLog>:


void ereaseLog(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003094:	2007      	movs	r0, #7
 8003096:	f7fe fa75 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 800309a:	2008      	movs	r0, #8
 800309c:	f7fe fa72 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 80030a0:	2009      	movs	r0, #9
 80030a2:	f7fe fa6f 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7fe fa6c 	bl	8001584 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80030ac:	200b      	movs	r0, #11
 80030ae:	f7fe fa69 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <ereaseLog+0x50>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <ereaseLog+0x54>)
 80030b8:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <ereaseLog+0x58>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <ereaseLog+0x5c>)
 80030c0:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <ereaseLog+0x60>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <ereaseLog+0x64>)
 80030c8:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <ereaseLog+0x68>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <ereaseLog+0x6c>)
 80030d0:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <ereaseLog+0x70>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <ereaseLog+0x74>)
 80030d8:	6013      	str	r3, [r2, #0]
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	080104f0 	.word	0x080104f0
 80030e4:	2001ebd8 	.word	0x2001ebd8
 80030e8:	080104f4 	.word	0x080104f4
 80030ec:	2001ec2c 	.word	0x2001ec2c
 80030f0:	080104f8 	.word	0x080104f8
 80030f4:	2001ebe8 	.word	0x2001ebe8
 80030f8:	080104fc 	.word	0x080104fc
 80030fc:	2001ebd4 	.word	0x2001ebd4
 8003100:	08010500 	.word	0x08010500
 8003104:	2001ebe4 	.word	0x2001ebe4

08003108 <ereaseDebugLog>:

void ereaseDebugLog(){
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 800310c:	200b      	movs	r0, #11
 800310e:	f7fe fa39 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <ereaseDebugLog+0x18>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <ereaseDebugLog+0x1c>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	08010500 	.word	0x08010500
 8003124:	2001ebe4 	.word	0x2001ebe4

08003128 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <getDistanceLogSize+0x14>)
 800312e:	881b      	ldrh	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20016e44 	.word	0x20016e44

08003140 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <getCrossLogSize+0x14>)
 8003146:	881b      	ldrh	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20016e48 	.word	0x20016e48

08003158 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	return log_side_cnt;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <getSideLogSize+0x14>)
 800315e:	881b      	ldrh	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20016e4a 	.word	0x20016e4a

08003170 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <getDebugLogSize+0x14>)
 8003176:	881b      	ldrh	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20016e4c 	.word	0x20016e4c

08003188 <loadDistance>:


void loadDistance(){
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <loadDistance+0x6c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <loadDistance+0x70>)
 8003198:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <loadDistance+0x74>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <loadDistance+0x70>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4915      	ldr	r1, [pc, #84]	; (8003200 <loadDistance+0x78>)
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <loadDistance+0x78>)
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eef4 7a67 	vcmp.f32	s15, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d60e      	bvs.n	80031e6 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <loadDistance+0x74>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <loadDistance+0x74>)
 80031d2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <loadDistance+0x70>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <loadDistance+0x70>)
 80031dc:	6013      	str	r3, [r2, #0]
		i++;
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	3301      	adds	r3, #1
 80031e2:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 80031e4:	e7dc      	b.n	80031a0 <loadDistance+0x18>
			break;
 80031e6:	bf00      	nop
	}
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	080104f0 	.word	0x080104f0
 80031f8:	2001ebe0 	.word	0x2001ebe0
 80031fc:	20016e44 	.word	0x20016e44
 8003200:	2000c264 	.word	0x2000c264

08003204 <loadTheta>:

void loadTheta(){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <loadTheta+0x6c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <loadTheta+0x70>)
 8003214:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <loadTheta+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <loadTheta+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4915      	ldr	r1, [pc, #84]	; (800327c <loadTheta+0x78>)
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <loadTheta+0x78>)
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eef4 7a67 	vcmp.f32	s15, s15
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d60e      	bvs.n	8003262 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <loadTheta+0x74>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <loadTheta+0x74>)
 800324e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <loadTheta+0x70>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <loadTheta+0x70>)
 8003258:	6013      	str	r3, [r2, #0]
		i++;
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	3301      	adds	r3, #1
 800325e:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003260:	e7dc      	b.n	800321c <loadTheta+0x18>
			break;
 8003262:	bf00      	nop
	}
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	080104f4 	.word	0x080104f4
 8003274:	2001ebec 	.word	0x2001ebec
 8003278:	20016e46 	.word	0x20016e46
 800327c:	20011854 	.word	0x20011854

08003280 <loadCross>:

void loadCross(){
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <loadCross+0x6c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <loadCross+0x70>)
 8003290:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <loadCross+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <loadCross+0x70>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4915      	ldr	r1, [pc, #84]	; (80032f8 <loadCross+0x78>)
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <loadCross+0x78>)
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eef4 7a67 	vcmp.f32	s15, s15
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	d60e      	bvs.n	80032de <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <loadCross+0x74>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <loadCross+0x74>)
 80032ca:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <loadCross+0x70>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <loadCross+0x70>)
 80032d4:	6013      	str	r3, [r2, #0]
		i++;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	3301      	adds	r3, #1
 80032da:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 80032dc:	e7dc      	b.n	8003298 <loadCross+0x18>
			break;
 80032de:	bf00      	nop
	}
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	080104f8 	.word	0x080104f8
 80032f0:	2001ec58 	.word	0x2001ec58
 80032f4:	20016e48 	.word	0x20016e48
 80032f8:	200003c4 	.word	0x200003c4

080032fc <loadSide>:

void loadSide(){
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <loadSide+0x6c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <loadSide+0x70>)
 800330c:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <loadSide+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <loadSide+0x70>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4915      	ldr	r1, [pc, #84]	; (8003374 <loadSide+0x78>)
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <loadSide+0x78>)
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef4 7a67 	vcmp.f32	s15, s15
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d60e      	bvs.n	800335a <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <loadSide+0x74>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <loadSide+0x74>)
 8003346:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <loadSide+0x70>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <loadSide+0x70>)
 8003350:	6013      	str	r3, [r2, #0]
		i++;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	3301      	adds	r3, #1
 8003356:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003358:	e7dc      	b.n	8003314 <loadSide+0x18>
			break;
 800335a:	bf00      	nop
	}
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	080104fc 	.word	0x080104fc
 800336c:	2001ec50 	.word	0x2001ec50
 8003370:	20016e4a 	.word	0x20016e4a
 8003374:	20000554 	.word	0x20000554

08003378 <loadDebug>:

void loadDebug(){
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <loadDebug+0x6c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <loadDebug+0x70>)
 8003388:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <loadDebug+0x74>)
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <loadDebug+0x70>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4915      	ldr	r1, [pc, #84]	; (80033f0 <loadDebug+0x78>)
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <loadDebug+0x78>)
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eef4 7a67 	vcmp.f32	s15, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d60e      	bvs.n	80033d6 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <loadDebug+0x74>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <loadDebug+0x74>)
 80033c2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <loadDebug+0x70>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <loadDebug+0x70>)
 80033cc:	6013      	str	r3, [r2, #0]
		i++;
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	3301      	adds	r3, #1
 80033d2:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80033d4:	e7dc      	b.n	8003390 <loadDebug+0x18>
			break;
 80033d6:	bf00      	nop
	}
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	08010500 	.word	0x08010500
 80033e8:	2001ec28 	.word	0x2001ec28
 80033ec:	20016e4c 	.word	0x20016e4c
 80033f0:	200006e4 	.word	0x200006e4

080033f4 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	return log_distance;
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <getDistanceArrayPointer+0x10>)
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	2000c264 	.word	0x2000c264

08003408 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	return log_theta;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <getThetaArrayPointer+0x10>)
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	20011854 	.word	0x20011854

0800341c <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <getDistanceLog+0x28>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	ee07 3a90 	vmov	s15, r3
}
 8003434:	eeb0 0a67 	vmov.f32	s0, s15
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000c264 	.word	0x2000c264

08003448 <getThetaLog>:

float getThetaLog(uint16_t idx){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	return log_theta[idx];
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <getThetaLog+0x28>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
}
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20011854 	.word	0x20011854

08003474 <getCrossLog>:

float getCrossLog(uint16_t idx){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <getCrossLog+0x28>)
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	200003c4 	.word	0x200003c4

080034a0 <getSideLog>:

float getSideLog(uint16_t idx){
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <getSideLog+0x28>)
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	ee07 3a90 	vmov	s15, r3
}
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000554 	.word	0x20000554

080034cc <getDebugLog>:

float getDebugLog(uint16_t idx){
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	4a06      	ldr	r2, [pc, #24]	; (80034f4 <getDebugLog+0x28>)
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	ee07 3a90 	vmov	s15, r3
}
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	200006e4 	.word	0x200006e4

080034f8 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003508:	b2db      	uxtb	r3, r3
 800350a:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 800350c:	2200      	movs	r2, #0
 800350e:	2104      	movs	r1, #4
 8003510:	480d      	ldr	r0, [pc, #52]	; (8003548 <read_byte+0x50>)
 8003512:	f004 fe85 	bl	8008220 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003516:	f107 010f 	add.w	r1, r7, #15
 800351a:	2364      	movs	r3, #100	; 0x64
 800351c:	2201      	movs	r2, #1
 800351e:	480b      	ldr	r0, [pc, #44]	; (800354c <read_byte+0x54>)
 8003520:	f005 fc70 	bl	8008e04 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003524:	f107 010e 	add.w	r1, r7, #14
 8003528:	2364      	movs	r3, #100	; 0x64
 800352a:	2201      	movs	r2, #1
 800352c:	4807      	ldr	r0, [pc, #28]	; (800354c <read_byte+0x54>)
 800352e:	f005 fd9d 	bl	800906c <HAL_SPI_Receive>
		CS_SET;
 8003532:	2201      	movs	r2, #1
 8003534:	2104      	movs	r1, #4
 8003536:	4804      	ldr	r0, [pc, #16]	; (8003548 <read_byte+0x50>)
 8003538:	f004 fe72 	bl	8008220 <HAL_GPIO_WritePin>

	return val;
 800353c:	7bbb      	ldrb	r3, [r7, #14]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40020c00 	.word	0x40020c00
 800354c:	2001eec0 	.word	0x2001eec0

08003550 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	460a      	mov	r2, r1
 800355a:	71fb      	strb	r3, [r7, #7]
 800355c:	4613      	mov	r3, r2
 800355e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003566:	b2db      	uxtb	r3, r3
 8003568:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800356a:	2200      	movs	r2, #0
 800356c:	2104      	movs	r1, #4
 800356e:	480c      	ldr	r0, [pc, #48]	; (80035a0 <write_byte+0x50>)
 8003570:	f004 fe56 	bl	8008220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003574:	f107 010f 	add.w	r1, r7, #15
 8003578:	2364      	movs	r3, #100	; 0x64
 800357a:	2201      	movs	r2, #1
 800357c:	4809      	ldr	r0, [pc, #36]	; (80035a4 <write_byte+0x54>)
 800357e:	f005 fc41 	bl	8008e04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003582:	1db9      	adds	r1, r7, #6
 8003584:	2364      	movs	r3, #100	; 0x64
 8003586:	2201      	movs	r2, #1
 8003588:	4806      	ldr	r0, [pc, #24]	; (80035a4 <write_byte+0x54>)
 800358a:	f005 fd6f 	bl	800906c <HAL_SPI_Receive>
	CS_SET;
 800358e:	2201      	movs	r2, #1
 8003590:	2104      	movs	r1, #4
 8003592:	4803      	ldr	r0, [pc, #12]	; (80035a0 <write_byte+0x50>)
 8003594:	f004 fe44 	bl	8008220 <HAL_GPIO_WritePin>
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40020c00 	.word	0x40020c00
 80035a4:	2001eec0 	.word	0x2001eec0

080035a8 <IMU_init>:

uint8_t IMU_init() {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 80035b2:	2075      	movs	r0, #117	; 0x75
 80035b4:	f7ff ffa0 	bl	80034f8 <read_byte>
 80035b8:	4603      	mov	r3, r0
 80035ba:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 80035bc:	79bb      	ldrb	r3, [r7, #6]
 80035be:	2b70      	cmp	r3, #112	; 0x70
 80035c0:	d110      	bne.n	80035e4 <IMU_init+0x3c>
		ret = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 80035c6:	2100      	movs	r1, #0
 80035c8:	206b      	movs	r0, #107	; 0x6b
 80035ca:	f7ff ffc1 	bl	8003550 <write_byte>
		HAL_Delay(100);
 80035ce:	2064      	movs	r0, #100	; 0x64
 80035d0:	f003 f9f4 	bl	80069bc <HAL_Delay>
		write_byte(0x1A, 0x00);
 80035d4:	2100      	movs	r1, #0
 80035d6:	201a      	movs	r0, #26
 80035d8:	f7ff ffba 	bl	8003550 <write_byte>
		write_byte(0x1B, 0x18);
 80035dc:	2118      	movs	r1, #24
 80035de:	201b      	movs	r0, #27
 80035e0:	f7ff ffb6 	bl	8003550 <write_byte>
	}
	return ret;
 80035e4:	79fb      	ldrb	r3, [r7, #7]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <read_gyro_data>:

void read_gyro_data() {
 80035f0:	b598      	push	{r3, r4, r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80035f4:	2047      	movs	r0, #71	; 0x47
 80035f6:	f7ff ff7f 	bl	80034f8 <read_byte>
 80035fa:	4603      	mov	r3, r0
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b21c      	sxth	r4, r3
 8003600:	2048      	movs	r0, #72	; 0x48
 8003602:	f7ff ff79 	bl	80034f8 <read_byte>
 8003606:	4603      	mov	r3, r0
 8003608:	b21b      	sxth	r3, r3
 800360a:	4323      	orrs	r3, r4
 800360c:	b21a      	sxth	r2, r3
 800360e:	4b02      	ldr	r3, [pc, #8]	; (8003618 <read_gyro_data+0x28>)
 8003610:	801a      	strh	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	bd98      	pop	{r3, r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	2001edf4 	.word	0x2001edf4
 800361c:	00000000 	.word	0x00000000

08003620 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <calculateVelocityControlFlip+0x108>)
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <calculateVelocityControlFlip+0x10c>)
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800363a:	f000 f8d9 	bl	80037f0 <getCurrentVelocity>
 800363e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <calculateVelocityControlFlip+0x110>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d163      	bne.n	8003712 <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 800364a:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <calculateVelocityControlFlip+0x114>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d106      	bne.n	8003660 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003652:	4b39      	ldr	r3, [pc, #228]	; (8003738 <calculateVelocityControlFlip+0x118>)
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <calculateVelocityControlFlip+0x114>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003660:	f000 f894 	bl	800378c <setvariablespeed>
 8003664:	eeb0 7a40 	vmov.f32	s14, s0
 8003668:	edd7 7a03 	vldr	s15, [r7, #12]
 800366c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003670:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003674:	ed97 7a07 	vldr	s14, [r7, #28]
 8003678:	edd7 7a04 	vldr	s15, [r7, #16]
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <calculateVelocityControlFlip+0x118>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc ff5d 	bl	8000548 <__aeabi_f2d>
 800368e:	4604      	mov	r4, r0
 8003690:	460d      	mov	r5, r1
 8003692:	ed97 7a06 	vldr	s14, [r7, #24]
 8003696:	edd7 7a04 	vldr	s15, [r7, #16]
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	ee17 0a90 	vmov	r0, s15
 80036a2:	f7fc ff51 	bl	8000548 <__aeabi_f2d>
 80036a6:	a31e      	add	r3, pc, #120	; (adr r3, 8003720 <calculateVelocityControlFlip+0x100>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc ffa4 	bl	80005f8 <__aeabi_dmul>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4620      	mov	r0, r4
 80036b6:	4629      	mov	r1, r5
 80036b8:	f7fc fde8 	bl	800028c <__adddf3>
 80036bc:	4603      	mov	r3, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	4618      	mov	r0, r3
 80036c2:	4621      	mov	r1, r4
 80036c4:	f7fd fa90 	bl	8000be8 <__aeabi_d2f>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <calculateVelocityControlFlip+0x118>)
 80036cc:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <calculateVelocityControlFlip+0x118>)
 80036d0:	ed93 7a00 	vldr	s14, [r3]
 80036d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <calculateVelocityControlFlip+0x11c>)
 80036de:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 80036e2:	4a17      	ldr	r2, [pc, #92]	; (8003740 <calculateVelocityControlFlip+0x120>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <calculateVelocityControlFlip+0x118>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <calculateVelocityControlFlip+0x124>)
 80036ee:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <calculateVelocityControlFlip+0x118>)
 80036f2:	ed93 7a00 	vldr	s14, [r3]
 80036f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <calculateVelocityControlFlip+0x128>)
 8003708:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 800370c:	4a0f      	ldr	r2, [pc, #60]	; (800374c <calculateVelocityControlFlip+0x12c>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6013      	str	r3, [r2, #0]

	}

}
 8003712:	bf00      	nop
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bdb0      	pop	{r4, r5, r7, pc}
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	d2f1a9fc 	.word	0xd2f1a9fc
 8003724:	3f50624d 	.word	0x3f50624d
 8003728:	44bb8000 	.word	0x44bb8000
 800372c:	469c4000 	.word	0x469c4000
 8003730:	20016e4e 	.word	0x20016e4e
 8003734:	20016e4f 	.word	0x20016e4f
 8003738:	20016e5c 	.word	0x20016e5c
 800373c:	2001ee00 	.word	0x2001ee00
 8003740:	2001ee10 	.word	0x2001ee10
 8003744:	2001ee08 	.word	0x2001ee08
 8003748:	20016e50 	.word	0x20016e50
 800374c:	20016e60 	.word	0x20016e60

08003750 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <getVelocityControlTerm+0x18>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	ee07 3a90 	vmov	s15, r3
}
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20016e50 	.word	0x20016e50

0800376c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <setTargetVelocity+0x1c>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	20016e54 	.word	0x20016e54

0800378c <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003790:	f7fd fe82 	bl	8001498 <getspeedcount>
 8003794:	eeb0 7a40 	vmov.f32	s14, s0
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <setvariablespeed+0x5c>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	db04      	blt.n	80037b2 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <setvariablespeed+0x5c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <setvariablespeed+0x60>)
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	e012      	b.n	80037d8 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 80037b2:	f7fd fe71 	bl	8001498 <getspeedcount>
 80037b6:	eeb0 7a40 	vmov.f32	s14, s0
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <setvariablespeed+0x5c>)
 80037bc:	edd3 7a00 	vldr	s15, [r3]
 80037c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c8:	d506      	bpl.n	80037d8 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 80037ca:	f7fd fe65 	bl	8001498 <getspeedcount>
 80037ce:	eef0 7a40 	vmov.f32	s15, s0
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <setvariablespeed+0x60>)
 80037d4:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <setvariablespeed+0x60>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	ee07 3a90 	vmov	s15, r3
}
 80037e0:	eeb0 0a67 	vmov.f32	s0, s15
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20016e54 	.word	0x20016e54
 80037ec:	20016e58 	.word	0x20016e58

080037f0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	80fb      	strh	r3, [r7, #6]
 80037fa:	2300      	movs	r3, #0
 80037fc:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80037fe:	1d3a      	adds	r2, r7, #4
 8003800:	1dbb      	adds	r3, r7, #6
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd fd65 	bl	80012d4 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 800380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380e:	461a      	mov	r2, r3
 8003810:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	0fda      	lsrs	r2, r3, #31
 8003818:	4413      	add	r3, r2
 800381a:	105b      	asrs	r3, r3, #1
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003824:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7fc fe8d 	bl	8000548 <__aeabi_f2d>
 800382e:	a30d      	add	r3, pc, #52	; (adr r3, 8003864 <getCurrentVelocity+0x74>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc fee0 	bl	80005f8 <__aeabi_dmul>
 8003838:	4603      	mov	r3, r0
 800383a:	460c      	mov	r4, r1
 800383c:	4618      	mov	r0, r3
 800383e:	4621      	mov	r1, r4
 8003840:	f7fd f9d2 	bl	8000be8 <__aeabi_d2f>
 8003844:	4603      	mov	r3, r0
 8003846:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003848:	4a05      	ldr	r2, [pc, #20]	; (8003860 <getCurrentVelocity+0x70>)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	ee07 3a90 	vmov	s15, r3
}
 8003854:	eeb0 0a67 	vmov.f32	s0, s15
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop
 8003860:	2001ee04 	.word	0x2001ee04
 8003864:	2df331e5 	.word	0x2df331e5
 8003868:	3f878fcc 	.word	0x3f878fcc

0800386c <getTargetVelocity>:

float getTargetVelocity()
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	return target_velocity;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <getTargetVelocity+0x18>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	ee07 3a90 	vmov	s15, r3
}
 8003878:	eeb0 0a67 	vmov.f32	s0, s15
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	20016e54 	.word	0x20016e54

08003888 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <startVelocityControl+0x1c>)
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <startVelocityControl+0x20>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20016e4e 	.word	0x20016e4e
 80038a8:	20016e4f 	.word	0x20016e4f

080038ac <stopVelocityControl>:

void stopVelocityControl(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <stopVelocityControl+0x14>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20016e4e 	.word	0x20016e4e

080038c4 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <setClearFlagOfVelocityControlI+0x14>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	20016e4f 	.word	0x20016e4f

080038dc <CreateXYcoordinates>:
static float target_X_coordinate;
static float target_Y_coordinate;
static float target_Theta;

void CreateXYcoordinates()
{
 80038dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038e0:	b08a      	sub	sp, #40	; 0x28
 80038e2:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80038e4:	f7ff fd86 	bl	80033f4 <getDistanceArrayPointer>
 80038e8:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80038ea:	f7ff fd8d 	bl	8003408 <getThetaArrayPointer>
 80038ee:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 8003902:	f7ff fc11 	bl	8003128 <getDistanceLogSize>
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 800390a:	2300      	movs	r3, #0
 800390c:	82fb      	strh	r3, [r7, #22]
 800390e:	e095      	b.n	8003a3c <CreateXYcoordinates+0x160>
		temp_distance = p_distance[i];
 8003910:	8afb      	ldrh	r3, [r7, #22]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 800391c:	8afb      	ldrh	r3, [r7, #22]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 8003928:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800392c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	d101      	bne.n	800393a <CreateXYcoordinates+0x5e>
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <CreateXYcoordinates+0x174>)
 8003938:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 800393a:	6a38      	ldr	r0, [r7, #32]
 800393c:	f7fc fe04 	bl	8000548 <__aeabi_f2d>
 8003940:	4604      	mov	r4, r0
 8003942:	460d      	mov	r5, r1
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fc fdff 	bl	8000548 <__aeabi_f2d>
 800394a:	4680      	mov	r8, r0
 800394c:	4689      	mov	r9, r1
 800394e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003952:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003956:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800395a:	edd7 7a06 	vldr	s15, [r7, #24]
 800395e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003962:	ee17 0a90 	vmov	r0, s15
 8003966:	f7fc fdef 	bl	8000548 <__aeabi_f2d>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	ec43 2b10 	vmov	d0, r2, r3
 8003972:	f007 fab5 	bl	800aee0 <cos>
 8003976:	ec53 2b10 	vmov	r2, r3, d0
 800397a:	4640      	mov	r0, r8
 800397c:	4649      	mov	r1, r9
 800397e:	f7fc fe3b 	bl	80005f8 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4620      	mov	r0, r4
 8003988:	4629      	mov	r1, r5
 800398a:	f7fc fc7f 	bl	800028c <__adddf3>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	4618      	mov	r0, r3
 8003994:	4621      	mov	r1, r4
 8003996:	f7fd f927 	bl	8000be8 <__aeabi_d2f>
 800399a:	4603      	mov	r3, r0
 800399c:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 800399e:	69f8      	ldr	r0, [r7, #28]
 80039a0:	f7fc fdd2 	bl	8000548 <__aeabi_f2d>
 80039a4:	4604      	mov	r4, r0
 80039a6:	460d      	mov	r5, r1
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fc fdcd 	bl	8000548 <__aeabi_f2d>
 80039ae:	4680      	mov	r8, r0
 80039b0:	4689      	mov	r9, r1
 80039b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80039ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039be:	edd7 7a06 	vldr	s15, [r7, #24]
 80039c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c6:	ee17 0a90 	vmov	r0, s15
 80039ca:	f7fc fdbd 	bl	8000548 <__aeabi_f2d>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	ec43 2b10 	vmov	d0, r2, r3
 80039d6:	f007 fac7 	bl	800af68 <sin>
 80039da:	ec53 2b10 	vmov	r2, r3, d0
 80039de:	4640      	mov	r0, r8
 80039e0:	4649      	mov	r1, r9
 80039e2:	f7fc fe09 	bl	80005f8 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fc4d 	bl	800028c <__adddf3>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	4618      	mov	r0, r3
 80039f8:	4621      	mov	r1, r4
 80039fa:	f7fd f8f5 	bl	8000be8 <__aeabi_d2f>
 80039fe:	4603      	mov	r3, r0
 8003a00:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 8003a02:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0e:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 8003a12:	8afb      	ldrh	r3, [r7, #22]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <CreateXYcoordinates+0x178>)
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 8003a1e:	8afb      	ldrh	r3, [r7, #22]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <CreateXYcoordinates+0x17c>)
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	601a      	str	r2, [r3, #0]
		Theta_table[i] = th;
 8003a2a:	8afb      	ldrh	r3, [r7, #22]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <CreateXYcoordinates+0x180>)
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < log_size; i++){
 8003a36:	8afb      	ldrh	r3, [r7, #22]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	82fb      	strh	r3, [r7, #22]
 8003a3c:	8afa      	ldrh	r2, [r7, #22]
 8003a3e:	897b      	ldrh	r3, [r7, #10]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	f4ff af65 	bcc.w	8003910 <CreateXYcoordinates+0x34>

		//saveDebug(X_table[i]);//X_tableに値が入っているか確認済み
	    //saveDebug(Y_table[i]);

	}
}
 8003a46:	bf00      	nop
 8003a48:	3728      	adds	r7, #40	; 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a50:	3727c5ac 	.word	0x3727c5ac
 8003a54:	20016e64 	.word	0x20016e64
 8003a58:	20018da4 	.word	0x20018da4
 8003a5c:	2001ace4 	.word	0x2001ace4

08003a60 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003a74:	f7fd fcd6 	bl	8001424 <getDistance10mm>
 8003a78:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003a7c:	f7fd fee6 	bl	800184c <getTheta10mm>
 8003a80:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	d101      	bne.n	8003a96 <CurrentXcoordinates+0x36>
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <CurrentXcoordinates+0xd0>)
 8003a94:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cos(pre_th + now_theta/2);
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <CurrentXcoordinates+0xd4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fc fd54 	bl	8000548 <__aeabi_f2d>
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	460d      	mov	r5, r1
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	f7fc fd4f 	bl	8000548 <__aeabi_f2d>
 8003aaa:	4680      	mov	r8, r0
 8003aac:	4689      	mov	r9, r1
 8003aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ab2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ab6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003aba:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <CurrentXcoordinates+0xd8>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac4:	ee17 0a90 	vmov	r0, s15
 8003ac8:	f7fc fd3e 	bl	8000548 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	ec43 2b10 	vmov	d0, r2, r3
 8003ad4:	f007 fa04 	bl	800aee0 <cos>
 8003ad8:	ec53 2b10 	vmov	r2, r3, d0
 8003adc:	4640      	mov	r0, r8
 8003ade:	4649      	mov	r1, r9
 8003ae0:	f7fc fd8a 	bl	80005f8 <__aeabi_dmul>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7fc fbce 	bl	800028c <__adddf3>
 8003af0:	4603      	mov	r3, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	4618      	mov	r0, r3
 8003af6:	4621      	mov	r1, r4
 8003af8:	f7fd f876 	bl	8000be8 <__aeabi_d2f>
 8003afc:	4603      	mov	r3, r0
 8003afe:	60bb      	str	r3, [r7, #8]
	th = pre_th + now_theta;
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <CurrentXcoordinates+0xd8>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0e:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 8003b12:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <CurrentXcoordinates+0xd4>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003b18:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <CurrentXcoordinates+0xd8>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6013      	str	r3, [r2, #0]

	return x;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	ee07 3a90 	vmov	s15, r3
}
 8003b24:	eeb0 0a67 	vmov.f32	s0, s15
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b30:	3727c5ac 	.word	0x3727c5ac
 8003b34:	2001cc30 	.word	0x2001cc30
 8003b38:	2001cc34 	.word	0x2001cc34

08003b3c <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8003b3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003b50:	f7fd fc68 	bl	8001424 <getDistance10mm>
 8003b54:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003b58:	f7fd fe78 	bl	800184c <getTheta10mm>
 8003b5c:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	d101      	bne.n	8003b72 <CurrentYcoordinates+0x36>
 8003b6e:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <CurrentYcoordinates+0xd0>)
 8003b70:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sin(pre_th + now_theta/2);
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <CurrentYcoordinates+0xd4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fce6 	bl	8000548 <__aeabi_f2d>
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	460d      	mov	r5, r1
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7fc fce1 	bl	8000548 <__aeabi_f2d>
 8003b86:	4680      	mov	r8, r0
 8003b88:	4689      	mov	r9, r1
 8003b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <CurrentYcoordinates+0xd8>)
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba0:	ee17 0a90 	vmov	r0, s15
 8003ba4:	f7fc fcd0 	bl	8000548 <__aeabi_f2d>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	ec43 2b10 	vmov	d0, r2, r3
 8003bb0:	f007 f9da 	bl	800af68 <sin>
 8003bb4:	ec53 2b10 	vmov	r2, r3, d0
 8003bb8:	4640      	mov	r0, r8
 8003bba:	4649      	mov	r1, r9
 8003bbc:	f7fc fd1c 	bl	80005f8 <__aeabi_dmul>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f7fc fb60 	bl	800028c <__adddf3>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	f7fd f808 	bl	8000be8 <__aeabi_d2f>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60bb      	str	r3, [r7, #8]
	th = pre_th + now_theta;
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <CurrentYcoordinates+0xd8>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bea:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <CurrentYcoordinates+0xd4>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003bf4:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <CurrentYcoordinates+0xd8>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]

	return y;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	ee07 3a90 	vmov	s15, r3
}
 8003c00:	eeb0 0a67 	vmov.f32	s0, s15
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c0c:	3727c5ac 	.word	0x3727c5ac
 8003c10:	2001cc38 	.word	0x2001cc38
 8003c14:	2001cc3c 	.word	0x2001cc3c

08003c18 <updateTargetpoint>:

void updateTargetpoint()
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	if(getTargetUpdateflag() == true){
 8003c1c:	f002 f924 	bl	8005e68 <getTargetUpdateflag>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d06c      	beq.n	8003d00 <updateTargetpoint+0xe8>
		if(getTotalDistance() >= ref_XYdistance){
 8003c26:	f7fd fb6f 	bl	8001308 <getTotalDistance>
 8003c2a:	eeb0 7a40 	vmov.f32	s14, s0
 8003c2e:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <updateTargetpoint+0xec>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3c:	db17      	blt.n	8003c6e <updateTargetpoint+0x56>
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
 8003c3e:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <updateTargetpoint+0xf0>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fbea 	bl	800341c <getDistanceLog>
 8003c48:	eeb0 7a40 	vmov.f32	s14, s0
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <updateTargetpoint+0xec>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <updateTargetpoint+0xec>)
 8003c58:	edc3 7a00 	vstr	s15, [r3]
			targetpoint_table_idx++;
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <updateTargetpoint+0xf0>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <updateTargetpoint+0xf0>)
 8003c66:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003c68:	f7fd fc06 	bl	8001478 <clearDistance30mm>
 8003c6c:	e021      	b.n	8003cb2 <updateTargetpoint+0x9a>
		}else if(getDistance30mm() >= 30){
 8003c6e:	f7fd fbf5 	bl	800145c <getDistance30mm>
 8003c72:	eeb0 7a40 	vmov.f32	s14, s0
 8003c76:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8003c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	db16      	blt.n	8003cb2 <updateTargetpoint+0x9a>
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <updateTargetpoint+0xf0>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fbc7 	bl	800341c <getDistanceLog>
 8003c8e:	eeb0 7a40 	vmov.f32	s14, s0
 8003c92:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <updateTargetpoint+0xec>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <updateTargetpoint+0xec>)
 8003c9e:	edc3 7a00 	vstr	s15, [r3]
			targetpoint_table_idx++;
 8003ca2:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <updateTargetpoint+0xf0>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <updateTargetpoint+0xf0>)
 8003cac:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003cae:	f7fd fbe3 	bl	8001478 <clearDistance30mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize()){
 8003cb2:	f7ff fa39 	bl	8003128 <getDistanceLogSize>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <updateTargetpoint+0xf0>)
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d806      	bhi.n	8003cd0 <updateTargetpoint+0xb8>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 8003cc2:	f7ff fa31 	bl	8003128 <getDistanceLogSize>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <updateTargetpoint+0xf0>)
 8003cce:	801a      	strh	r2, [r3, #0]
		}
		target_X_coordinate = X_table[targetpoint_table_idx];
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <updateTargetpoint+0xf0>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <updateTargetpoint+0xf4>)
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <updateTargetpoint+0xf8>)
 8003cde:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[targetpoint_table_idx];
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <updateTargetpoint+0xf0>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <updateTargetpoint+0xfc>)
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <updateTargetpoint+0x100>)
 8003cee:	6013      	str	r3, [r2, #0]
		target_Theta = Theta_table[targetpoint_table_idx];
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <updateTargetpoint+0xf0>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <updateTargetpoint+0x104>)
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <updateTargetpoint+0x108>)
 8003cfe:	6013      	str	r3, [r2, #0]
	}
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2001ee14 	.word	0x2001ee14
 8003d08:	2001ee18 	.word	0x2001ee18
 8003d0c:	20016e64 	.word	0x20016e64
 8003d10:	2001cc24 	.word	0x2001cc24
 8003d14:	20018da4 	.word	0x20018da4
 8003d18:	2001cc28 	.word	0x2001cc28
 8003d1c:	2001ace4 	.word	0x2001ace4
 8003d20:	2001cc2c 	.word	0x2001cc2c

08003d24 <ErrorTheta>:

float ErrorTheta(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
	float Theta_e = 0;
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	607b      	str	r3, [r7, #4]

	float now_theta = getaddTheta();
 8003d30:	f7fd fda8 	bl	8001884 <getaddTheta>
 8003d34:	ed87 0a00 	vstr	s0, [r7]

	Theta_e = target_Theta - now_theta;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <ErrorTheta+0x38>)
 8003d3a:	ed93 7a00 	vldr	s14, [r3]
 8003d3e:	edd7 7a00 	vldr	s15, [r7]
 8003d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d46:	edc7 7a01 	vstr	s15, [r7, #4]

	return Theta_e;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	ee07 3a90 	vmov	s15, r3
}
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2001cc2c 	.word	0x2001cc2c

08003d60 <ErrorXcoordinates>:

float ErrorXcoordinates(void)
{
 8003d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d64:	ed2d 8b02 	vpush	{d8}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
	float X_e = 0;
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	603b      	str	r3, [r7, #0]

	float error_theta = ErrorTheta();
 8003d72:	f7ff ffd7 	bl	8003d24 <ErrorTheta>
 8003d76:	ed87 0a01 	vstr	s0, [r7, #4]

	if(error_theta == 0) error_theta = 0.00001;
 8003d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	d101      	bne.n	8003d8c <ErrorXcoordinates+0x2c>
 8003d88:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <ErrorXcoordinates+0xe0>)
 8003d8a:	607b      	str	r3, [r7, #4]

	X_e = (target_X_coordinate - CurrentXcoordinates()) * cos(error_theta) + (target_Y_coordinate - CurrentYcoordinates()) * sin(error_theta);
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <ErrorXcoordinates+0xe4>)
 8003d8e:	ed93 8a00 	vldr	s16, [r3]
 8003d92:	f7ff fe65 	bl	8003a60 <CurrentXcoordinates>
 8003d96:	eef0 7a40 	vmov.f32	s15, s0
 8003d9a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003d9e:	ee17 0a90 	vmov	r0, s15
 8003da2:	f7fc fbd1 	bl	8000548 <__aeabi_f2d>
 8003da6:	4604      	mov	r4, r0
 8003da8:	460d      	mov	r5, r1
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fbcc 	bl	8000548 <__aeabi_f2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	ec43 2b10 	vmov	d0, r2, r3
 8003db8:	f007 f892 	bl	800aee0 <cos>
 8003dbc:	ec53 2b10 	vmov	r2, r3, d0
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc fc18 	bl	80005f8 <__aeabi_dmul>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	4625      	mov	r5, r4
 8003dce:	461c      	mov	r4, r3
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <ErrorXcoordinates+0xe8>)
 8003dd2:	ed93 8a00 	vldr	s16, [r3]
 8003dd6:	f7ff feb1 	bl	8003b3c <CurrentYcoordinates>
 8003dda:	eef0 7a40 	vmov.f32	s15, s0
 8003dde:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003de2:	ee17 0a90 	vmov	r0, s15
 8003de6:	f7fc fbaf 	bl	8000548 <__aeabi_f2d>
 8003dea:	4680      	mov	r8, r0
 8003dec:	4689      	mov	r9, r1
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fc fbaa 	bl	8000548 <__aeabi_f2d>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	ec43 2b10 	vmov	d0, r2, r3
 8003dfc:	f007 f8b4 	bl	800af68 <sin>
 8003e00:	ec53 2b10 	vmov	r2, r3, d0
 8003e04:	4640      	mov	r0, r8
 8003e06:	4649      	mov	r1, r9
 8003e08:	f7fc fbf6 	bl	80005f8 <__aeabi_dmul>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4620      	mov	r0, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	f7fc fa3a 	bl	800028c <__adddf3>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	4621      	mov	r1, r4
 8003e20:	f7fc fee2 	bl	8000be8 <__aeabi_d2f>
 8003e24:	4603      	mov	r3, r0
 8003e26:	603b      	str	r3, [r7, #0]

	return X_e;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	ee07 3a90 	vmov	s15, r3
}
 8003e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	ecbd 8b02 	vpop	{d8}
 8003e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e3e:	bf00      	nop
 8003e40:	3727c5ac 	.word	0x3727c5ac
 8003e44:	2001cc24 	.word	0x2001cc24
 8003e48:	2001cc28 	.word	0x2001cc28

08003e4c <ErrorYcoordinates>:

float ErrorYcoordinates(void)
{
 8003e4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e50:	ed2d 8b02 	vpush	{d8}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
	float Y_e = 0;
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	603b      	str	r3, [r7, #0]

	float error_theta = ErrorTheta();
 8003e5e:	f7ff ff61 	bl	8003d24 <ErrorTheta>
 8003e62:	ed87 0a01 	vstr	s0, [r7, #4]

	if(error_theta == 0) error_theta = 0.00001;
 8003e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	d101      	bne.n	8003e78 <ErrorYcoordinates+0x2c>
 8003e74:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <ErrorYcoordinates+0xe4>)
 8003e76:	607b      	str	r3, [r7, #4]

	Y_e = -(target_X_coordinate - CurrentXcoordinates()) * sin(error_theta) + (target_Y_coordinate - CurrentYcoordinates()) * cos(error_theta);
 8003e78:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <ErrorYcoordinates+0xe8>)
 8003e7a:	ed93 8a00 	vldr	s16, [r3]
 8003e7e:	f7ff fdef 	bl	8003a60 <CurrentXcoordinates>
 8003e82:	eef0 7a40 	vmov.f32	s15, s0
 8003e86:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003e8a:	eef1 7a67 	vneg.f32	s15, s15
 8003e8e:	ee17 3a90 	vmov	r3, s15
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb58 	bl	8000548 <__aeabi_f2d>
 8003e98:	4604      	mov	r4, r0
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fc fb53 	bl	8000548 <__aeabi_f2d>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	ec43 2b10 	vmov	d0, r2, r3
 8003eaa:	f007 f85d 	bl	800af68 <sin>
 8003eae:	ec53 2b10 	vmov	r2, r3, d0
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc fb9f 	bl	80005f8 <__aeabi_dmul>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	4625      	mov	r5, r4
 8003ec0:	461c      	mov	r4, r3
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <ErrorYcoordinates+0xec>)
 8003ec4:	ed93 8a00 	vldr	s16, [r3]
 8003ec8:	f7ff fe38 	bl	8003b3c <CurrentYcoordinates>
 8003ecc:	eef0 7a40 	vmov.f32	s15, s0
 8003ed0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003ed4:	ee17 0a90 	vmov	r0, s15
 8003ed8:	f7fc fb36 	bl	8000548 <__aeabi_f2d>
 8003edc:	4680      	mov	r8, r0
 8003ede:	4689      	mov	r9, r1
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fc fb31 	bl	8000548 <__aeabi_f2d>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	ec43 2b10 	vmov	d0, r2, r3
 8003eee:	f006 fff7 	bl	800aee0 <cos>
 8003ef2:	ec53 2b10 	vmov	r2, r3, d0
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc fb7d 	bl	80005f8 <__aeabi_dmul>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f9c1 	bl	800028c <__adddf3>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4621      	mov	r1, r4
 8003f12:	f7fc fe69 	bl	8000be8 <__aeabi_d2f>
 8003f16:	4603      	mov	r3, r0
 8003f18:	603b      	str	r3, [r7, #0]

	return Y_e;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	ee07 3a90 	vmov	s15, r3

}
 8003f20:	eeb0 0a67 	vmov.f32	s0, s15
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	ecbd 8b02 	vpop	{d8}
 8003f2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f30:	3727c5ac 	.word	0x3727c5ac
 8003f34:	2001cc24 	.word	0x2001cc24
 8003f38:	2001cc28 	.word	0x2001cc28

08003f3c <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003f44:	1d39      	adds	r1, r7, #4
 8003f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4803      	ldr	r0, [pc, #12]	; (8003f5c <__io_putchar+0x20>)
 8003f4e:	f006 fb66 	bl	800a61e <HAL_UART_Transmit>
	return ch;
 8003f52:	687b      	ldr	r3, [r7, #4]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2001ef18 	.word	0x2001ef18

08003f60 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d121      	bne.n	8003fb6 <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003f7a:	6013      	str	r3, [r2, #0]
      timer2++;
 8003f7c:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f84:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003f86:	f7fd f8cb 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003f8a:	f7fd fb55 	bl	8001638 <updateIMUValue>
      updateAnalogSensor();
 8003f8e:	f7fe fbd1 	bl	8002734 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003f92:	f7fd fefd 	bl	8001d90 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003f96:	f7ff fb43 	bl	8003620 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003f9a:	f7fc fff5 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003f9e:	f7fe f877 	bl	8002090 <lineTraceFlip>
      runningFlip();
 8003fa2:	f001 fc43 	bl	800582c <runningFlip>
      motorCtrlFlip();
 8003fa6:	f001 f95d 	bl	8005264 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003faa:	f001 f9bf 	bl	800532c <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003fae:	f001 fa2b 	bl	8005408 <updateSideSensorStatus>

      checkCourseOut();
 8003fb2:	f7fe f945 	bl	8002240 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d106      	bne.n	8003fce <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003fc8:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003fca:	f7fe f9bd 	bl	8002348 <storeAnalogSensorBuffer>

   }
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40001000 	.word	0x40001000
 8003fdc:	2001ee1c 	.word	0x2001ee1c
 8003fe0:	2001ee64 	.word	0x2001ee64
 8003fe4:	40001400 	.word	0x40001400
 8003fe8:	2001f03c 	.word	0x2001f03c

08003fec <init>:

void init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	  initADC();
 8003ff0:	f7fe f994 	bl	800231c <initADC>
	  initEncoder();
 8003ff4:	f7fd f876 	bl	80010e4 <initEncoder>
	  initLog();
 8003ff8:	f7fe ff84 	bl	8002f04 <initLog>
	  initGyro();
 8003ffc:	f7fd fb0c 	bl	8001618 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8004000:	4809      	ldr	r0, [pc, #36]	; (8004028 <init+0x3c>)
 8004002:	f005 fc1a 	bl	800983a <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8004006:	4809      	ldr	r0, [pc, #36]	; (800402c <init+0x40>)
 8004008:	f005 fc17 	bl	800983a <HAL_TIM_Base_Start_IT>

	  initMotor();
 800400c:	f001 f912 	bl	8005234 <initMotor>

	  setLED('R');
 8004010:	2052      	movs	r0, #82	; 0x52
 8004012:	f7fd fc53 	bl	80018bc <setLED>

	  sensorCalibration();
 8004016:	f7fe fd7f 	bl	8002b18 <sensorCalibration>

	  HAL_Delay(1000);
 800401a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401e:	f002 fccd 	bl	80069bc <HAL_Delay>

}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	2001efb8 	.word	0x2001efb8
 800402c:	2001f0a0 	.word	0x2001f0a0

08004030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004034:	b087      	sub	sp, #28
 8004036:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004038:	f002 fc4e 	bl	80068d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800403c:	f000 fba8 	bl	8004790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004040:	f001 f836 	bl	80050b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004044:	f001 f80c 	bl	8005060 <MX_DMA_Init>
  MX_TIM1_Init();
 8004048:	f000 fdbc 	bl	8004bc4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800404c:	f000 fe3c 	bl	8004cc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004050:	f000 fe8e 	bl	8004d70 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004054:	f000 ff4a 	bl	8004eec <MX_TIM8_Init>
  MX_ADC1_Init();
 8004058:	f000 fc04 	bl	8004864 <MX_ADC1_Init>
  MX_I2C1_Init();
 800405c:	f000 fd4e 	bl	8004afc <MX_I2C1_Init>
  MX_SPI3_Init();
 8004060:	f000 fd7a 	bl	8004b58 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8004064:	f000 ffd2 	bl	800500c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8004068:	f000 fed6 	bl	8004e18 <MX_TIM6_Init>
  MX_TIM7_Init();
 800406c:	f000 ff0a 	bl	8004e84 <MX_TIM7_Init>
  MX_ADC2_Init();
 8004070:	f000 fc58 	bl	8004924 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8004074:	f7ff ffba 	bl	8003fec <init>

  bool running_flag = false;
 8004078:	2300      	movs	r3, #0
 800407a:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 800407c:	204c      	movs	r0, #76	; 0x4c
 800407e:	f002 fb1d 	bl	80066bc <getSwitchStatus>
 8004082:	4603      	mov	r3, r0
 8004084:	2b01      	cmp	r3, #1
 8004086:	d109      	bne.n	800409c <main+0x6c>
 8004088:	4bb4      	ldr	r3, [pc, #720]	; (800435c <main+0x32c>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <main+0x6c>
		  timer = 0;
 8004090:	4bb3      	ldr	r3, [pc, #716]	; (8004360 <main+0x330>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8004096:	4bb1      	ldr	r3, [pc, #708]	; (800435c <main+0x32c>)
 8004098:	2201      	movs	r2, #1
 800409a:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 800409c:	204c      	movs	r0, #76	; 0x4c
 800409e:	f002 fb0d 	bl	80066bc <getSwitchStatus>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d10a      	bne.n	80040be <main+0x8e>
 80040a8:	4bad      	ldr	r3, [pc, #692]	; (8004360 <main+0x330>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b14      	cmp	r3, #20
 80040ae:	d906      	bls.n	80040be <main+0x8e>
 80040b0:	4baa      	ldr	r3, [pc, #680]	; (800435c <main+0x32c>)
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <main+0x8e>
		  sw = 2;
 80040b8:	4ba8      	ldr	r3, [pc, #672]	; (800435c <main+0x32c>)
 80040ba:	2202      	movs	r2, #2
 80040bc:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 80040be:	4ba8      	ldr	r3, [pc, #672]	; (8004360 <main+0x330>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b28      	cmp	r3, #40	; 0x28
 80040c4:	d906      	bls.n	80040d4 <main+0xa4>
 80040c6:	4ba5      	ldr	r3, [pc, #660]	; (800435c <main+0x32c>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d102      	bne.n	80040d4 <main+0xa4>
		  sw = 0;
 80040ce:	4ba3      	ldr	r3, [pc, #652]	; (800435c <main+0x32c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 80040d4:	204c      	movs	r0, #76	; 0x4c
 80040d6:	f002 faf1 	bl	80066bc <getSwitchStatus>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10c      	bne.n	80040fa <main+0xca>
 80040e0:	4b9e      	ldr	r3, [pc, #632]	; (800435c <main+0x32c>)
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d108      	bne.n	80040fa <main+0xca>
		  //mode_selector++;
		  soiya++;
 80040e8:	4b9e      	ldr	r3, [pc, #632]	; (8004364 <main+0x334>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	4b9c      	ldr	r3, [pc, #624]	; (8004364 <main+0x334>)
 80040f2:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 80040f4:	4b99      	ldr	r3, [pc, #612]	; (800435c <main+0x32c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 80040fa:	2052      	movs	r0, #82	; 0x52
 80040fc:	f002 fade 	bl	80066bc <getSwitchStatus>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d109      	bne.n	800411a <main+0xea>
 8004106:	4b98      	ldr	r3, [pc, #608]	; (8004368 <main+0x338>)
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <main+0xea>
	  	  timer = 0;
 800410e:	4b94      	ldr	r3, [pc, #592]	; (8004360 <main+0x330>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8004114:	4b94      	ldr	r3, [pc, #592]	; (8004368 <main+0x338>)
 8004116:	2201      	movs	r2, #1
 8004118:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 800411a:	2052      	movs	r0, #82	; 0x52
 800411c:	f002 face 	bl	80066bc <getSwitchStatus>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d10a      	bne.n	800413c <main+0x10c>
 8004126:	4b8e      	ldr	r3, [pc, #568]	; (8004360 <main+0x330>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b14      	cmp	r3, #20
 800412c:	d906      	bls.n	800413c <main+0x10c>
 800412e:	4b8e      	ldr	r3, [pc, #568]	; (8004368 <main+0x338>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <main+0x10c>
	  	  sw2 = 2;
 8004136:	4b8c      	ldr	r3, [pc, #560]	; (8004368 <main+0x338>)
 8004138:	2202      	movs	r2, #2
 800413a:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 800413c:	4b88      	ldr	r3, [pc, #544]	; (8004360 <main+0x330>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b28      	cmp	r3, #40	; 0x28
 8004142:	d906      	bls.n	8004152 <main+0x122>
 8004144:	4b88      	ldr	r3, [pc, #544]	; (8004368 <main+0x338>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <main+0x122>
	  	  sw2 = 0;
 800414c:	4b86      	ldr	r3, [pc, #536]	; (8004368 <main+0x338>)
 800414e:	2200      	movs	r2, #0
 8004150:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8004152:	2052      	movs	r0, #82	; 0x52
 8004154:	f002 fab2 	bl	80066bc <getSwitchStatus>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <main+0x148>
 800415e:	4b82      	ldr	r3, [pc, #520]	; (8004368 <main+0x338>)
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d108      	bne.n	8004178 <main+0x148>
	  	  cnt++;
 8004166:	4b81      	ldr	r3, [pc, #516]	; (800436c <main+0x33c>)
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	4b7f      	ldr	r3, [pc, #508]	; (800436c <main+0x33c>)
 8004170:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8004172:	4b7d      	ldr	r3, [pc, #500]	; (8004368 <main+0x338>)
 8004174:	2200      	movs	r2, #0
 8004176:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8004178:	4b7c      	ldr	r3, [pc, #496]	; (800436c <main+0x33c>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d902      	bls.n	8004186 <main+0x156>
		  cnt = 0;
 8004180:	4b7a      	ldr	r3, [pc, #488]	; (800436c <main+0x33c>)
 8004182:	2200      	movs	r2, #0
 8004184:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8004186:	4b79      	ldr	r3, [pc, #484]	; (800436c <main+0x33c>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <main+0x176>
		  HAL_Delay(1000);
 800418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004192:	f002 fc13 	bl	80069bc <HAL_Delay>
		  running_flag = true;
 8004196:	2301      	movs	r3, #1
 8004198:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 800419a:	4b75      	ldr	r3, [pc, #468]	; (8004370 <main+0x340>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 80041a0:	4b72      	ldr	r3, [pc, #456]	; (800436c <main+0x33c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f083 0301 	eor.w	r3, r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <main+0x18a>
		  stopLineTrace();
 80041b2:	f7fe f833 	bl	800221c <stopLineTrace>
		  stopVelocityControl();
 80041b6:	f7ff fb79 	bl	80038ac <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 80041ba:	f001 fe49 	bl	8005e50 <getgoalStatus>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <main+0x1a4>
		  running_flag = false;
 80041c4:	2300      	movs	r3, #0
 80041c6:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 80041c8:	4b68      	ldr	r3, [pc, #416]	; (800436c <main+0x33c>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f001 f8fc 	bl	80053cc <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 80041d4:	4b63      	ldr	r3, [pc, #396]	; (8004364 <main+0x334>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	2b0d      	cmp	r3, #13
 80041da:	d902      	bls.n	80041e2 <main+0x1b2>
		  soiya = 0;
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <main+0x334>)
 80041de:	2200      	movs	r2, #0
 80041e0:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 80041e2:	4b60      	ldr	r3, [pc, #384]	; (8004364 <main+0x334>)
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	2b0d      	cmp	r3, #13
 80041e8:	f200 82a7 	bhi.w	800473a <main+0x70a>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <main+0x1c4>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	08004259 	.word	0x08004259
 80041fc:	0800428f 	.word	0x0800428f
 8004200:	080042d3 	.word	0x080042d3
 8004204:	08004317 	.word	0x08004317
 8004208:	0800438d 	.word	0x0800438d
 800420c:	080043e1 	.word	0x080043e1
 8004210:	08004435 	.word	0x08004435
 8004214:	08004489 	.word	0x08004489
 8004218:	080044dd 	.word	0x080044dd
 800421c:	08004531 	.word	0x08004531
 8004220:	08004585 	.word	0x08004585
 8004224:	080045d9 	.word	0x080045d9
 8004228:	0800462d 	.word	0x0800462d

			  case 0:
				  setLED('W');
 800422c:	2057      	movs	r0, #87	; 0x57
 800422e:	f7fd fb45 	bl	80018bc <setLED>
				  setLED2('R');
 8004232:	2052      	movs	r0, #82	; 0x52
 8004234:	f7fd fc10 	bl	8001a58 <setLED2>
				  printf("0\r\n");
 8004238:	484e      	ldr	r0, [pc, #312]	; (8004374 <main+0x344>)
 800423a:	f008 fd97 	bl	800cd6c <puts>

				  if(running_flag == true){
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 827c 	beq.w	800473e <main+0x70e>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 8004246:	2002      	movs	r0, #2
 8004248:	f001 f908 	bl	800545c <setRunMode>
						  runningInit();
 800424c:	f001 fbf2 	bl	8005a34 <runningInit>
						  soiya = 13;
 8004250:	4b44      	ldr	r3, [pc, #272]	; (8004364 <main+0x334>)
 8004252:	220d      	movs	r2, #13
 8004254:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 8004256:	e272      	b.n	800473e <main+0x70e>

			  case 1:
				  setLED('G');
 8004258:	2047      	movs	r0, #71	; 0x47
 800425a:	f7fd fb2f 	bl	80018bc <setLED>
				  setLED2('G');
 800425e:	2047      	movs	r0, #71	; 0x47
 8004260:	f7fd fbfa 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 826b 	beq.w	8004742 <main+0x712>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800426c:	f7fd f948 	bl	8001500 <clearspeedcount>

					      //setVelocityRange(0, 0);
						  setTargetVelocity(0.0);
 8004270:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004378 <main+0x348>
 8004274:	f7ff fa7a 	bl	800376c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 8004278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800427c:	f001 f8a6 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 8004280:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004284:	f002 fb9a 	bl	80069bc <HAL_Delay>

						  running();
 8004288:	f001 f9d0 	bl	800562c <running>
				  }

				  break;
 800428c:	e259      	b.n	8004742 <main+0x712>

			  case 2:
				  setLED('Y');
 800428e:	2059      	movs	r0, #89	; 0x59
 8004290:	f7fd fb14 	bl	80018bc <setLED>
				  setLED2('R');
 8004294:	2052      	movs	r0, #82	; 0x52
 8004296:	f7fd fbdf 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8252 	beq.w	8004746 <main+0x716>
						  //startLineTrace();

					      clearspeedcount();
 80042a2:	f7fd f92d 	bl	8001500 <clearspeedcount>

					      IMU_average();
 80042a6:	f7fd fa9b 	bl	80017e0 <IMU_average>

					      setRunMode(1);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f001 f8d6 	bl	800545c <setRunMode>

					      setVelocityRange(1.0, 1.0);
 80042b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80042b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042b8:	f001 fde2 	bl	8005e80 <setVelocityRange>

						  setsuctionMotor(500);
 80042bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042c0:	f001 f884 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1000);
 80042c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042c8:	f002 fb78 	bl	80069bc <HAL_Delay>

						  running();
 80042cc:	f001 f9ae 	bl	800562c <running>
				  }

				  break;
 80042d0:	e239      	b.n	8004746 <main+0x716>

			  case 3:
				  setLED('Y');
 80042d2:	2059      	movs	r0, #89	; 0x59
 80042d4:	f7fd faf2 	bl	80018bc <setLED>
				  setLED2('G');
 80042d8:	2047      	movs	r0, #71	; 0x47
 80042da:	f7fd fbbd 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8232 	beq.w	800474a <main+0x71a>
						  //startLineTrace();

						  clearspeedcount();
 80042e6:	f7fd f90b 	bl	8001500 <clearspeedcount>

						  IMU_average();
 80042ea:	f7fd fa79 	bl	80017e0 <IMU_average>

						  setRunMode(1);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f001 f8b4 	bl	800545c <setRunMode>

						  setVelocityRange(2.2, 2.2);
 80042f4:	eddf 0a21 	vldr	s1, [pc, #132]	; 800437c <main+0x34c>
 80042f8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800437c <main+0x34c>
 80042fc:	f001 fdc0 	bl	8005e80 <setVelocityRange>

						  setsuctionMotor(500);
 8004300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004304:	f001 f862 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1000);
 8004308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800430c:	f002 fb56 	bl	80069bc <HAL_Delay>

						  running();
 8004310:	f001 f98c 	bl	800562c <running>
				  }

				  break;
 8004314:	e219      	b.n	800474a <main+0x71a>

			  case 4:
				  setLED('C');
 8004316:	2043      	movs	r0, #67	; 0x43
 8004318:	f7fd fad0 	bl	80018bc <setLED>
				  setLED2('R');
 800431c:	2052      	movs	r0, #82	; 0x52
 800431e:	f7fd fb9b 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8212 	beq.w	800474e <main+0x71e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800432a:	f7fd f8e9 	bl	8001500 <clearspeedcount>

						  IMU_average();
 800432e:	f7fd fa57 	bl	80017e0 <IMU_average>

						  setRunMode(5);
 8004332:	2005      	movs	r0, #5
 8004334:	f001 f892 	bl	800545c <setRunMode>

						  setVelocityRange(1.0, 1.0);
 8004338:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800433c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004340:	f001 fd9e 	bl	8005e80 <setVelocityRange>

						  setsuctionMotor(500);
 8004344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004348:	f001 f840 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 800434c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004350:	f002 fb34 	bl	80069bc <HAL_Delay>

						  running();
 8004354:	f001 f96a 	bl	800562c <running>
				  }

				  break;
 8004358:	e1f9      	b.n	800474e <main+0x71e>
 800435a:	bf00      	nop
 800435c:	2001f038 	.word	0x2001f038
 8004360:	2001ee1c 	.word	0x2001ee1c
 8004364:	2001cc42 	.word	0x2001cc42
 8004368:	2001cc40 	.word	0x2001cc40
 800436c:	2001eebc 	.word	0x2001eebc
 8004370:	2001ee64 	.word	0x2001ee64
 8004374:	08010488 	.word	0x08010488
 8004378:	00000000 	.word	0x00000000
 800437c:	400ccccd 	.word	0x400ccccd
 8004380:	40133333 	.word	0x40133333
 8004384:	40266666 	.word	0x40266666
 8004388:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 800438c:	2043      	movs	r0, #67	; 0x43
 800438e:	f7fd fa95 	bl	80018bc <setLED>
				  setLED2('G');
 8004392:	2047      	movs	r0, #71	; 0x47
 8004394:	f7fd fb60 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 81d9 	beq.w	8004752 <main+0x722>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80043a0:	f7fd f8ae 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80043a4:	2002      	movs	r0, #2
 80043a6:	f001 f859 	bl	800545c <setRunMode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 80043aa:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80043ae:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80043b2:	f001 fd65 	bl	8005e80 <setVelocityRange>
						  setAccDec(7, 3);
 80043b6:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80043ba:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80043be:	f001 fd77 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80043c2:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 8004388 <main+0x358>
 80043c6:	f001 fd8b 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 80043ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043ce:	f000 fffd 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 80043d2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80043d6:	f002 faf1 	bl	80069bc <HAL_Delay>

						  running();
 80043da:	f001 f927 	bl	800562c <running>
				  }

				  break;
 80043de:	e1b8      	b.n	8004752 <main+0x722>

			  case 6:
				  setLED('C');
 80043e0:	2043      	movs	r0, #67	; 0x43
 80043e2:	f7fd fa6b 	bl	80018bc <setLED>
				  setLED2('B');
 80043e6:	2042      	movs	r0, #66	; 0x42
 80043e8:	f7fd fb36 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 81b1 	beq.w	8004756 <main+0x726>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80043f4:	f7fd f884 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80043f8:	2002      	movs	r0, #2
 80043fa:	f001 f82f 	bl	800545c <setRunMode>

						  setVelocityRange(2.0, 6.0);
 80043fe:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004402:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004406:	f001 fd3b 	bl	8005e80 <setVelocityRange>
						  setAccDec(8, 5);
 800440a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800440e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004412:	f001 fd4d 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004416:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 8004388 <main+0x358>
 800441a:	f001 fd61 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 800441e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004422:	f000 ffd3 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 8004426:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800442a:	f002 fac7 	bl	80069bc <HAL_Delay>

						  running();
 800442e:	f001 f8fd 	bl	800562c <running>
				  }

				  break;
 8004432:	e190      	b.n	8004756 <main+0x726>

			  case 7:
				  setLED('C');
 8004434:	2043      	movs	r0, #67	; 0x43
 8004436:	f7fd fa41 	bl	80018bc <setLED>
				  setLED2('W');
 800443a:	2057      	movs	r0, #87	; 0x57
 800443c:	f7fd fb0c 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8189 	beq.w	800475a <main+0x72a>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004448:	f7fd f85a 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 800444c:	2002      	movs	r0, #2
 800444e:	f001 f805 	bl	800545c <setRunMode>

						  setVelocityRange(2.5, 6.0);
 8004452:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004456:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800445a:	f001 fd11 	bl	8005e80 <setVelocityRange>
						  setAccDec(8, 5);
 800445e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004462:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004466:	f001 fd23 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800446a:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 8004388 <main+0x358>
 800446e:	f001 fd37 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 8004472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004476:	f000 ffa9 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 800447a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800447e:	f002 fa9d 	bl	80069bc <HAL_Delay>

						  running();
 8004482:	f001 f8d3 	bl	800562c <running>
				  }

				  break;
 8004486:	e168      	b.n	800475a <main+0x72a>

			  case 8:
				  setLED('C');
 8004488:	2043      	movs	r0, #67	; 0x43
 800448a:	f7fd fa17 	bl	80018bc <setLED>
				  setLED2('Y');
 800448e:	2059      	movs	r0, #89	; 0x59
 8004490:	f7fd fae2 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8161 	beq.w	800475e <main+0x72e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800449c:	f7fd f830 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80044a0:	2003      	movs	r0, #3
 80044a2:	f000 ffdb 	bl	800545c <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80044a6:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80044aa:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 8004380 <main+0x350>
 80044ae:	f001 fce7 	bl	8005e80 <setVelocityRange>
						  setAccDec(7, 4);
 80044b2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80044b6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80044ba:	f001 fcf9 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80044be:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 8004388 <main+0x358>
 80044c2:	f001 fd0d 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 80044c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044ca:	f000 ff7f 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 80044ce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80044d2:	f002 fa73 	bl	80069bc <HAL_Delay>

						  running();
 80044d6:	f001 f8a9 	bl	800562c <running>
				  }

			  	  break;
 80044da:	e140      	b.n	800475e <main+0x72e>

			  case 9:
				  setLED('C');
 80044dc:	2043      	movs	r0, #67	; 0x43
 80044de:	f7fd f9ed 	bl	80018bc <setLED>
				  setLED2('X');
 80044e2:	2058      	movs	r0, #88	; 0x58
 80044e4:	f7fd fab8 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8139 	beq.w	8004762 <main+0x732>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80044f0:	f7fd f806 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80044f4:	2003      	movs	r0, #3
 80044f6:	f000 ffb1 	bl	800545c <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80044fa:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80044fe:	ed1f 0a60 	vldr	s0, [pc, #-384]	; 8004380 <main+0x350>
 8004502:	f001 fcbd 	bl	8005e80 <setVelocityRange>
						  setAccDec(8, 6);
 8004506:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800450a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800450e:	f001 fccf 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004512:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8004388 <main+0x358>
 8004516:	f001 fce3 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 800451a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800451e:	f000 ff55 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1500);
 8004522:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004526:	f002 fa49 	bl	80069bc <HAL_Delay>

						  running();
 800452a:	f001 f87f 	bl	800562c <running>
				  }

				  break;
 800452e:	e118      	b.n	8004762 <main+0x732>

			  case 10:
				  setLED('C');
 8004530:	2043      	movs	r0, #67	; 0x43
 8004532:	f7fd f9c3 	bl	80018bc <setLED>
				  setLED2('V');
 8004536:	2056      	movs	r0, #86	; 0x56
 8004538:	f7fd fa8e 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8111 	beq.w	8004766 <main+0x736>
						  //startLineTrace();

						  clearspeedcount();
 8004544:	f7fc ffdc 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004548:	2002      	movs	r0, #2
 800454a:	f000 ff87 	bl	800545c <setRunMode>

						  setVelocityRange(2.5, 7.5);
 800454e:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8004552:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004556:	f001 fc93 	bl	8005e80 <setVelocityRange>
						  setAccDec(7, 4);
 800455a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800455e:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004562:	f001 fca5 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004566:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 8004388 <main+0x358>
 800456a:	f001 fcb9 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 800456e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004572:	f000 ff2b 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1000);
 8004576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800457a:	f002 fa1f 	bl	80069bc <HAL_Delay>

						  running();
 800457e:	f001 f855 	bl	800562c <running>
				  }

				  break;
 8004582:	e0f0      	b.n	8004766 <main+0x736>


			  case 11:
				  setLED('C');
 8004584:	2043      	movs	r0, #67	; 0x43
 8004586:	f7fd f999 	bl	80018bc <setLED>
				  setLED2('T');
 800458a:	2054      	movs	r0, #84	; 0x54
 800458c:	f7fd fa64 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80e9 	beq.w	800476a <main+0x73a>
						  //startLineTrace();

						  clearspeedcount();
 8004598:	f7fc ffb2 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 800459c:	2003      	movs	r0, #3
 800459e:	f000 ff5d 	bl	800545c <setRunMode>

						  setVelocityRange(2.5, 8.5);
 80045a2:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 80045a6:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80045aa:	f001 fc69 	bl	8005e80 <setVelocityRange>
						  setAccDec(10, 5);
 80045ae:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80045b2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80045b6:	f001 fc7b 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80045ba:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 8004388 <main+0x358>
 80045be:	f001 fc8f 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 80045c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045c6:	f000 ff01 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1000);
 80045ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ce:	f002 f9f5 	bl	80069bc <HAL_Delay>

						  running();
 80045d2:	f001 f82b 	bl	800562c <running>
				  }

				  break;
 80045d6:	e0c8      	b.n	800476a <main+0x73a>

			  case 12:
				  setLED('C');
 80045d8:	2043      	movs	r0, #67	; 0x43
 80045da:	f7fd f96f 	bl	80018bc <setLED>
				  setLED2('A');
 80045de:	2041      	movs	r0, #65	; 0x41
 80045e0:	f7fd fa3a 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80c1 	beq.w	800476e <main+0x73e>
						  //startLineTrace();

						  clearspeedcount();
 80045ec:	f7fc ff88 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80045f0:	2002      	movs	r0, #2
 80045f2:	f000 ff33 	bl	800545c <setRunMode>

						  setVelocityRange(2.6, 10.0);
 80045f6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80045fa:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 8004384 <main+0x354>
 80045fe:	f001 fc3f 	bl	8005e80 <setVelocityRange>
						  setAccDec(7, 4);
 8004602:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004606:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800460a:	f001 fc51 	bl	8005eb0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800460e:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 8004388 <main+0x358>
 8004612:	f001 fc65 	bl	8005ee0 <setStraightRadius>

						  setsuctionMotor(500);
 8004616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800461a:	f000 fed7 	bl	80053cc <setsuctionMotor>

						  HAL_Delay(1000);
 800461e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004622:	f002 f9cb 	bl	80069bc <HAL_Delay>

						  running();
 8004626:	f001 f801 	bl	800562c <running>
				  }

				  break;
 800462a:	e0a0      	b.n	800476e <main+0x73e>

			  case 13:
				  setLED('M');
 800462c:	204d      	movs	r0, #77	; 0x4d
 800462e:	f7fd f945 	bl	80018bc <setLED>
				  setLED2('A');
 8004632:	2041      	movs	r0, #65	; 0x41
 8004634:	f7fd fa10 	bl	8001a58 <setLED2>
				  printf("6\r\n");
 8004638:	484f      	ldr	r0, [pc, #316]	; (8004778 <main+0x748>)
 800463a:	f008 fb97 	bl	800cd6c <puts>

				  if(running_flag == true){
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8096 	beq.w	8004772 <main+0x742>
					  loadDistance();
 8004646:	f7fe fd9f 	bl	8003188 <loadDistance>
					  loadTheta();
 800464a:	f7fe fddb 	bl	8003204 <loadTheta>
					  loadCross();
 800464e:	f7fe fe17 	bl	8003280 <loadCross>
					  loadSide();
 8004652:	f7fe fe53 	bl	80032fc <loadSide>
					  loadDebug();
 8004656:	f7fe fe8f 	bl	8003378 <loadDebug>



					  printf("Distance, Theta\r\n");
 800465a:	4848      	ldr	r0, [pc, #288]	; (800477c <main+0x74c>)
 800465c:	f008 fb86 	bl	800cd6c <puts>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 8004660:	2300      	movs	r3, #0
 8004662:	80bb      	strh	r3, [r7, #4]
 8004664:	e01f      	b.n	80046a6 <main+0x676>
						 printf("%f, %f\r\n", getDistanceLog(i), getThetaLog(i));
 8004666:	88bb      	ldrh	r3, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fed7 	bl	800341c <getDistanceLog>
 800466e:	ee10 3a10 	vmov	r3, s0
 8004672:	4618      	mov	r0, r3
 8004674:	f7fb ff68 	bl	8000548 <__aeabi_f2d>
 8004678:	4605      	mov	r5, r0
 800467a:	460e      	mov	r6, r1
 800467c:	88bb      	ldrh	r3, [r7, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fee2 	bl	8003448 <getThetaLog>
 8004684:	ee10 3a10 	vmov	r3, s0
 8004688:	4618      	mov	r0, r3
 800468a:	f7fb ff5d 	bl	8000548 <__aeabi_f2d>
 800468e:	4603      	mov	r3, r0
 8004690:	460c      	mov	r4, r1
 8004692:	e9cd 3400 	strd	r3, r4, [sp]
 8004696:	462a      	mov	r2, r5
 8004698:	4633      	mov	r3, r6
 800469a:	4839      	ldr	r0, [pc, #228]	; (8004780 <main+0x750>)
 800469c:	f008 faf2 	bl	800cc84 <iprintf>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 80046a0:	88bb      	ldrh	r3, [r7, #4]
 80046a2:	3301      	adds	r3, #1
 80046a4:	80bb      	strh	r3, [r7, #4]
 80046a6:	f7fe fd3f 	bl	8003128 <getDistanceLogSize>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	88bb      	ldrh	r3, [r7, #4]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d3d8      	bcc.n	8004666 <main+0x636>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 80046b4:	4833      	ldr	r0, [pc, #204]	; (8004784 <main+0x754>)
 80046b6:	f008 fb59 	bl	800cd6c <puts>
					  uint16_t size = getDebugLogSize();
 80046ba:	f7fe fd59 	bl	8003170 <getDebugLogSize>
 80046be:	4603      	mov	r3, r0
 80046c0:	803b      	strh	r3, [r7, #0]

					  for(uint16_t i = 0; i < size; i = i+3){
 80046c2:	2300      	movs	r3, #0
 80046c4:	807b      	strh	r3, [r7, #2]
 80046c6:	e030      	b.n	800472a <main+0x6fa>
						 printf("%f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2));
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fefe 	bl	80034cc <getDebugLog>
 80046d0:	ee10 3a10 	vmov	r3, s0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb ff37 	bl	8000548 <__aeabi_f2d>
 80046da:	4680      	mov	r8, r0
 80046dc:	4689      	mov	r9, r1
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	3301      	adds	r3, #1
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fef1 	bl	80034cc <getDebugLog>
 80046ea:	ee10 3a10 	vmov	r3, s0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb ff2a 	bl	8000548 <__aeabi_f2d>
 80046f4:	4604      	mov	r4, r0
 80046f6:	460d      	mov	r5, r1
 80046f8:	887b      	ldrh	r3, [r7, #2]
 80046fa:	3302      	adds	r3, #2
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fee4 	bl	80034cc <getDebugLog>
 8004704:	ee10 3a10 	vmov	r3, s0
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb ff1d 	bl	8000548 <__aeabi_f2d>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004716:	e9cd 4500 	strd	r4, r5, [sp]
 800471a:	4642      	mov	r2, r8
 800471c:	464b      	mov	r3, r9
 800471e:	481a      	ldr	r0, [pc, #104]	; (8004788 <main+0x758>)
 8004720:	f008 fab0 	bl	800cc84 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+3){
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	3303      	adds	r3, #3
 8004728:	807b      	strh	r3, [r7, #2]
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	883b      	ldrh	r3, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d3ca      	bcc.n	80046c8 <main+0x698>
					  /*
					  for(uint16_t i = 0; i < size; i = i+1){
						 printf("%f\r\n", getDebugLog(i));
					  }*/

					  printf("9999, 9999\r\n");
 8004732:	4816      	ldr	r0, [pc, #88]	; (800478c <main+0x75c>)
 8004734:	f008 fb1a 	bl	800cd6c <puts>
				  }

				  break;
 8004738:	e01b      	b.n	8004772 <main+0x742>

			  default:
				  break;
 800473a:	bf00      	nop
 800473c:	e49e      	b.n	800407c <main+0x4c>
				  break;
 800473e:	bf00      	nop
 8004740:	e49c      	b.n	800407c <main+0x4c>
				  break;
 8004742:	bf00      	nop
 8004744:	e49a      	b.n	800407c <main+0x4c>
				  break;
 8004746:	bf00      	nop
 8004748:	e498      	b.n	800407c <main+0x4c>
				  break;
 800474a:	bf00      	nop
 800474c:	e496      	b.n	800407c <main+0x4c>
				  break;
 800474e:	bf00      	nop
 8004750:	e494      	b.n	800407c <main+0x4c>
				  break;
 8004752:	bf00      	nop
 8004754:	e492      	b.n	800407c <main+0x4c>
				  break;
 8004756:	bf00      	nop
 8004758:	e490      	b.n	800407c <main+0x4c>
				  break;
 800475a:	bf00      	nop
 800475c:	e48e      	b.n	800407c <main+0x4c>
			  	  break;
 800475e:	bf00      	nop
 8004760:	e48c      	b.n	800407c <main+0x4c>
				  break;
 8004762:	bf00      	nop
 8004764:	e48a      	b.n	800407c <main+0x4c>
				  break;
 8004766:	bf00      	nop
 8004768:	e488      	b.n	800407c <main+0x4c>
				  break;
 800476a:	bf00      	nop
 800476c:	e486      	b.n	800407c <main+0x4c>
				  break;
 800476e:	bf00      	nop
 8004770:	e484      	b.n	800407c <main+0x4c>
				  break;
 8004772:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004774:	e482      	b.n	800407c <main+0x4c>
 8004776:	bf00      	nop
 8004778:	0801048c 	.word	0x0801048c
 800477c:	08010490 	.word	0x08010490
 8004780:	080104a4 	.word	0x080104a4
 8004784:	080104b0 	.word	0x080104b0
 8004788:	080104d4 	.word	0x080104d4
 800478c:	080104e4 	.word	0x080104e4

08004790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b094      	sub	sp, #80	; 0x50
 8004794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004796:	f107 0320 	add.w	r3, r7, #32
 800479a:	2230      	movs	r2, #48	; 0x30
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f007 fc29 	bl	800bff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <SystemClock_Config+0xcc>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	4a27      	ldr	r2, [pc, #156]	; (800485c <SystemClock_Config+0xcc>)
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6413      	str	r3, [r2, #64]	; 0x40
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <SystemClock_Config+0xcc>)
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047d0:	2300      	movs	r3, #0
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <SystemClock_Config+0xd0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a21      	ldr	r2, [pc, #132]	; (8004860 <SystemClock_Config+0xd0>)
 80047da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <SystemClock_Config+0xd0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047f0:	2301      	movs	r3, #1
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047f4:	2310      	movs	r3, #16
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047f8:	2302      	movs	r3, #2
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047fc:	2300      	movs	r3, #0
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004800:	2308      	movs	r3, #8
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004804:	23a8      	movs	r3, #168	; 0xa8
 8004806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004808:	2302      	movs	r3, #2
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800480c:	2304      	movs	r3, #4
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004810:	f107 0320 	add.w	r3, r7, #32
 8004814:	4618      	mov	r0, r3
 8004816:	f003 fe55 	bl	80084c4 <HAL_RCC_OscConfig>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004820:	f000 fd04 	bl	800522c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004824:	230f      	movs	r3, #15
 8004826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004828:	2302      	movs	r3, #2
 800482a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800483a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800483c:	f107 030c 	add.w	r3, r7, #12
 8004840:	2105      	movs	r1, #5
 8004842:	4618      	mov	r0, r3
 8004844:	f004 f8ae 	bl	80089a4 <HAL_RCC_ClockConfig>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800484e:	f000 fced 	bl	800522c <Error_Handler>
  }
}
 8004852:	bf00      	nop
 8004854:	3750      	adds	r7, #80	; 0x50
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000

08004864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800486a:	463b      	mov	r3, r7
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004876:	4b28      	ldr	r3, [pc, #160]	; (8004918 <MX_ADC1_Init+0xb4>)
 8004878:	4a28      	ldr	r2, [pc, #160]	; (800491c <MX_ADC1_Init+0xb8>)
 800487a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800487c:	4b26      	ldr	r3, [pc, #152]	; (8004918 <MX_ADC1_Init+0xb4>)
 800487e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004882:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004884:	4b24      	ldr	r3, [pc, #144]	; (8004918 <MX_ADC1_Init+0xb4>)
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800488a:	4b23      	ldr	r3, [pc, #140]	; (8004918 <MX_ADC1_Init+0xb4>)
 800488c:	2201      	movs	r2, #1
 800488e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <MX_ADC1_Init+0xb4>)
 8004892:	2201      	movs	r2, #1
 8004894:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <MX_ADC1_Init+0xb4>)
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <MX_ADC1_Init+0xbc>)
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048b2:	2202      	movs	r2, #2
 80048b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80048b6:	4b18      	ldr	r3, [pc, #96]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048be:	4b16      	ldr	r3, [pc, #88]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048c4:	4814      	ldr	r0, [pc, #80]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048c6:	f002 f89b 	bl	8006a00 <HAL_ADC_Init>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80048d0:	f000 fcac 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80048d4:	230c      	movs	r3, #12
 80048d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80048d8:	2301      	movs	r3, #1
 80048da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048dc:	2307      	movs	r3, #7
 80048de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048e0:	463b      	mov	r3, r7
 80048e2:	4619      	mov	r1, r3
 80048e4:	480c      	ldr	r0, [pc, #48]	; (8004918 <MX_ADC1_Init+0xb4>)
 80048e6:	f002 f9df 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80048f0:	f000 fc9c 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80048f4:	230d      	movs	r3, #13
 80048f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80048f8:	2302      	movs	r3, #2
 80048fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048fc:	463b      	mov	r3, r7
 80048fe:	4619      	mov	r1, r3
 8004900:	4805      	ldr	r0, [pc, #20]	; (8004918 <MX_ADC1_Init+0xb4>)
 8004902:	f002 f9d1 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800490c:	f000 fc8e 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2001ed74 	.word	0x2001ed74
 800491c:	40012000 	.word	0x40012000
 8004920:	0f000001 	.word	0x0f000001

08004924 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800492a:	463b      	mov	r3, r7
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004936:	4b6e      	ldr	r3, [pc, #440]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004938:	4a6e      	ldr	r2, [pc, #440]	; (8004af4 <MX_ADC2_Init+0x1d0>)
 800493a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800493c:	4b6c      	ldr	r3, [pc, #432]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 800493e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004942:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004944:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800494a:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 800494c:	2201      	movs	r2, #1
 800494e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004950:	4b67      	ldr	r3, [pc, #412]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004952:	2201      	movs	r2, #1
 8004954:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004956:	4b66      	ldr	r3, [pc, #408]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800495e:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004960:	2200      	movs	r2, #0
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004964:	4b62      	ldr	r3, [pc, #392]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004966:	4a64      	ldr	r2, [pc, #400]	; (8004af8 <MX_ADC2_Init+0x1d4>)
 8004968:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800496a:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 800496c:	2200      	movs	r2, #0
 800496e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8004970:	4b5f      	ldr	r3, [pc, #380]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004972:	220c      	movs	r2, #12
 8004974:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004976:	4b5e      	ldr	r3, [pc, #376]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800497e:	4b5c      	ldr	r3, [pc, #368]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004980:	2201      	movs	r2, #1
 8004982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004984:	485a      	ldr	r0, [pc, #360]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004986:	f002 f83b 	bl	8006a00 <HAL_ADC_Init>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004990:	f000 fc4c 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004994:	2300      	movs	r3, #0
 8004996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800499c:	2307      	movs	r3, #7
 800499e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049a0:	463b      	mov	r3, r7
 80049a2:	4619      	mov	r1, r3
 80049a4:	4852      	ldr	r0, [pc, #328]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 80049a6:	f002 f97f 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80049b0:	f000 fc3c 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80049b4:	2301      	movs	r3, #1
 80049b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80049b8:	2302      	movs	r3, #2
 80049ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049bc:	463b      	mov	r3, r7
 80049be:	4619      	mov	r1, r3
 80049c0:	484b      	ldr	r0, [pc, #300]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 80049c2:	f002 f971 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80049cc:	f000 fc2e 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80049d0:	2302      	movs	r3, #2
 80049d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80049d4:	2303      	movs	r3, #3
 80049d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049d8:	463b      	mov	r3, r7
 80049da:	4619      	mov	r1, r3
 80049dc:	4844      	ldr	r0, [pc, #272]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 80049de:	f002 f963 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80049e8:	f000 fc20 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80049ec:	2303      	movs	r3, #3
 80049ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80049f0:	2304      	movs	r3, #4
 80049f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049f4:	463b      	mov	r3, r7
 80049f6:	4619      	mov	r1, r3
 80049f8:	483d      	ldr	r0, [pc, #244]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 80049fa:	f002 f955 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004a04:	f000 fc12 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004a08:	2304      	movs	r3, #4
 8004a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004a0c:	2305      	movs	r3, #5
 8004a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a10:	463b      	mov	r3, r7
 8004a12:	4619      	mov	r1, r3
 8004a14:	4836      	ldr	r0, [pc, #216]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004a16:	f002 f947 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004a20:	f000 fc04 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004a24:	2305      	movs	r3, #5
 8004a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004a28:	2306      	movs	r3, #6
 8004a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	4619      	mov	r1, r3
 8004a30:	482f      	ldr	r0, [pc, #188]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004a32:	f002 f939 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004a3c:	f000 fbf6 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004a40:	2306      	movs	r3, #6
 8004a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004a44:	2307      	movs	r3, #7
 8004a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a48:	463b      	mov	r3, r7
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4828      	ldr	r0, [pc, #160]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004a4e:	f002 f92b 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004a58:	f000 fbe8 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004a5c:	2307      	movs	r3, #7
 8004a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004a60:	2308      	movs	r3, #8
 8004a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a64:	463b      	mov	r3, r7
 8004a66:	4619      	mov	r1, r3
 8004a68:	4821      	ldr	r0, [pc, #132]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004a6a:	f002 f91d 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004a74:	f000 fbda 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004a78:	2308      	movs	r3, #8
 8004a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004a7c:	2309      	movs	r3, #9
 8004a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a80:	463b      	mov	r3, r7
 8004a82:	4619      	mov	r1, r3
 8004a84:	481a      	ldr	r0, [pc, #104]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004a86:	f002 f90f 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004a90:	f000 fbcc 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004a94:	2309      	movs	r3, #9
 8004a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004a98:	230a      	movs	r3, #10
 8004a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4813      	ldr	r0, [pc, #76]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004aa2:	f002 f901 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004aac:	f000 fbbe 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004ab0:	230e      	movs	r3, #14
 8004ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004ab4:	230b      	movs	r3, #11
 8004ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ab8:	463b      	mov	r3, r7
 8004aba:	4619      	mov	r1, r3
 8004abc:	480c      	ldr	r0, [pc, #48]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004abe:	f002 f8f3 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004ac8:	f000 fbb0 	bl	800522c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004acc:	230f      	movs	r3, #15
 8004ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4805      	ldr	r0, [pc, #20]	; (8004af0 <MX_ADC2_Init+0x1cc>)
 8004ada:	f002 f8e5 	bl	8006ca8 <HAL_ADC_ConfigChannel>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004ae4:	f000 fba2 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	2001ed24 	.word	0x2001ed24
 8004af4:	40012100 	.word	0x40012100
 8004af8:	0f000001 	.word	0x0f000001

08004afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <MX_I2C1_Init+0x54>)
 8004b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b08:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <MX_I2C1_Init+0x58>)
 8004b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b38:	4804      	ldr	r0, [pc, #16]	; (8004b4c <MX_I2C1_Init+0x50>)
 8004b3a:	f003 fb8b 	bl	8008254 <HAL_I2C_Init>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004b44:	f000 fb72 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b48:	bf00      	nop
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2001ee68 	.word	0x2001ee68
 8004b50:	40005400 	.word	0x40005400
 8004b54:	000186a0 	.word	0x000186a0

08004b58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004b5c:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b5e:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <MX_SPI3_Init+0x68>)
 8004b60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b6a:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b76:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b88:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b8c:	2228      	movs	r2, #40	; 0x28
 8004b8e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b9c:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004ba8:	4804      	ldr	r0, [pc, #16]	; (8004bbc <MX_SPI3_Init+0x64>)
 8004baa:	f004 f8c7 	bl	8008d3c <HAL_SPI_Init>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004bb4:	f000 fb3a 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2001eec0 	.word	0x2001eec0
 8004bc0:	40003c00 	.word	0x40003c00

08004bc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b092      	sub	sp, #72	; 0x48
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
 8004be4:	615a      	str	r2, [r3, #20]
 8004be6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	2220      	movs	r2, #32
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f007 fa01 	bl	800bff6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bf4:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004bf6:	4a33      	ldr	r2, [pc, #204]	; (8004cc4 <MX_TIM1_Init+0x100>)
 8004bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004bfa:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c00:	4b2f      	ldr	r3, [pc, #188]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c08:	f240 3247 	movw	r2, #839	; 0x347
 8004c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c14:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c1a:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c20:	4827      	ldr	r0, [pc, #156]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c22:	f004 fe2e 	bl	8009882 <HAL_TIM_PWM_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004c2c:	f000 fafe 	bl	800522c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4820      	ldr	r0, [pc, #128]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c40:	f005 fbbe 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004c4a:	f000 faef 	bl	800522c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c4e:	2360      	movs	r3, #96	; 0x60
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c56:	2300      	movs	r3, #0
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4814      	ldr	r0, [pc, #80]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004c70:	f005 f842 	bl	8009cf8 <HAL_TIM_PWM_ConfigChannel>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004c7a:	f000 fad7 	bl	800522c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004ca2:	f005 fc09 	bl	800a4b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004cac:	f000 fabe 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004cb0:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <MX_TIM1_Init+0xfc>)
 8004cb2:	f001 fc05 	bl	80064c0 <HAL_TIM_MspPostInit>

}
 8004cb6:	bf00      	nop
 8004cb8:	3748      	adds	r7, #72	; 0x48
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2001eff8 	.word	0x2001eff8
 8004cc4:	40010000 	.word	0x40010000

08004cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	; 0x30
 8004ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f007 f98d 	bl	800bff6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ce4:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <MX_TIM3_Init+0xa4>)
 8004ce8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004cea:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d12:	2301      	movs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d22:	2301      	movs	r3, #1
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	4619      	mov	r1, r3
 8004d34:	480c      	ldr	r0, [pc, #48]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004d36:	f004 fe0d 	bl	8009954 <HAL_TIM_Encoder_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004d40:	f000 fa74 	bl	800522c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4805      	ldr	r0, [pc, #20]	; (8004d68 <MX_TIM3_Init+0xa0>)
 8004d52:	f005 fb35 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004d5c:	f000 fa66 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004d60:	bf00      	nop
 8004d62:	3730      	adds	r7, #48	; 0x30
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	2001eccc 	.word	0x2001eccc
 8004d6c:	40000400 	.word	0x40000400

08004d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d76:	f107 030c 	add.w	r3, r7, #12
 8004d7a:	2224      	movs	r2, #36	; 0x24
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f007 f939 	bl	800bff6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d84:	1d3b      	adds	r3, r7, #4
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004d8e:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <MX_TIM4_Init+0xa4>)
 8004d90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004d92:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dac:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004dd6:	f107 030c 	add.w	r3, r7, #12
 8004dda:	4619      	mov	r1, r3
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004dde:	f004 fdb9 	bl	8009954 <HAL_TIM_Encoder_Init>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004de8:	f000 fa20 	bl	800522c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dec:	2300      	movs	r3, #0
 8004dee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4805      	ldr	r0, [pc, #20]	; (8004e10 <MX_TIM4_Init+0xa0>)
 8004dfa:	f005 fae1 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004e04:	f000 fa12 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004e08:	bf00      	nop
 8004e0a:	3730      	adds	r7, #48	; 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	2001ec8c 	.word	0x2001ec8c
 8004e14:	40000800 	.word	0x40000800

08004e18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e1e:	463b      	mov	r3, r7
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <MX_TIM6_Init+0x68>)
 8004e2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e2e:	2253      	movs	r2, #83	; 0x53
 8004e30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004e46:	480d      	ldr	r0, [pc, #52]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e48:	f004 fccc 	bl	80097e4 <HAL_TIM_Base_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004e52:	f000 f9eb 	bl	800522c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004e5e:	463b      	mov	r3, r7
 8004e60:	4619      	mov	r1, r3
 8004e62:	4806      	ldr	r0, [pc, #24]	; (8004e7c <MX_TIM6_Init+0x64>)
 8004e64:	f005 faac 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004e6e:	f000 f9dd 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2001efb8 	.word	0x2001efb8
 8004e80:	40001000 	.word	0x40001000

08004e84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <MX_TIM7_Init+0x64>)
 8004e96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004e9a:	2253      	movs	r2, #83	; 0x53
 8004e9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004ea6:	2263      	movs	r2, #99	; 0x63
 8004ea8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004eb0:	480c      	ldr	r0, [pc, #48]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004eb2:	f004 fc97 	bl	80097e4 <HAL_TIM_Base_Init>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004ebc:	f000 f9b6 	bl	800522c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ec8:	463b      	mov	r3, r7
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4805      	ldr	r0, [pc, #20]	; (8004ee4 <MX_TIM7_Init+0x60>)
 8004ece:	f005 fa77 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004ed8:	f000 f9a8 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	2001f0a0 	.word	0x2001f0a0
 8004ee8:	40001400 	.word	0x40001400

08004eec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b092      	sub	sp, #72	; 0x48
 8004ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
 8004f0c:	615a      	str	r2, [r3, #20]
 8004f0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	2220      	movs	r2, #32
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f007 f86d 	bl	800bff6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004f1c:	4b39      	ldr	r3, [pc, #228]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f1e:	4a3a      	ldr	r2, [pc, #232]	; (8005008 <MX_TIM8_Init+0x11c>)
 8004f20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004f22:	4b38      	ldr	r3, [pc, #224]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f24:	2203      	movs	r2, #3
 8004f26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004f2e:	4b35      	ldr	r3, [pc, #212]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f30:	f240 628f 	movw	r2, #1679	; 0x68f
 8004f34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f36:	4b33      	ldr	r3, [pc, #204]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004f3c:	4b31      	ldr	r3, [pc, #196]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f42:	4b30      	ldr	r3, [pc, #192]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004f48:	482e      	ldr	r0, [pc, #184]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f4a:	f004 fc9a 	bl	8009882 <HAL_TIM_PWM_Init>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004f54:	f000 f96a 	bl	800522c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004f60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f64:	4619      	mov	r1, r3
 8004f66:	4827      	ldr	r0, [pc, #156]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f68:	f005 fa2a 	bl	800a3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004f72:	f000 f95b 	bl	800522c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f76:	2360      	movs	r3, #96	; 0x60
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f82:	2300      	movs	r3, #0
 8004f84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f96:	2200      	movs	r2, #0
 8004f98:	4619      	mov	r1, r3
 8004f9a:	481a      	ldr	r0, [pc, #104]	; (8005004 <MX_TIM8_Init+0x118>)
 8004f9c:	f004 feac 	bl	8009cf8 <HAL_TIM_PWM_ConfigChannel>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004fa6:	f000 f941 	bl	800522c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fae:	2208      	movs	r2, #8
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4814      	ldr	r0, [pc, #80]	; (8005004 <MX_TIM8_Init+0x118>)
 8004fb4:	f004 fea0 	bl	8009cf8 <HAL_TIM_PWM_ConfigChannel>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004fbe:	f000 f935 	bl	800522c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4807      	ldr	r0, [pc, #28]	; (8005004 <MX_TIM8_Init+0x118>)
 8004fe6:	f005 fa67 	bl	800a4b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004ff0:	f000 f91c 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004ff4:	4803      	ldr	r0, [pc, #12]	; (8005004 <MX_TIM8_Init+0x118>)
 8004ff6:	f001 fa63 	bl	80064c0 <HAL_TIM_MspPostInit>

}
 8004ffa:	bf00      	nop
 8004ffc:	3748      	adds	r7, #72	; 0x48
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2001ee20 	.word	0x2001ee20
 8005008:	40010400 	.word	0x40010400

0800500c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <MX_USART1_UART_Init+0x50>)
 8005014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005018:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800501c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005026:	2200      	movs	r2, #0
 8005028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 800502c:	2200      	movs	r2, #0
 800502e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005032:	220c      	movs	r2, #12
 8005034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005038:	2200      	movs	r2, #0
 800503a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 800503e:	2200      	movs	r2, #0
 8005040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005042:	4805      	ldr	r0, [pc, #20]	; (8005058 <MX_USART1_UART_Init+0x4c>)
 8005044:	f005 fa9e 	bl	800a584 <HAL_UART_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800504e:	f000 f8ed 	bl	800522c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2001ef18 	.word	0x2001ef18
 800505c:	40011000 	.word	0x40011000

08005060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <MX_DMA_Init+0x4c>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <MX_DMA_Init+0x4c>)
 8005070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005074:	6313      	str	r3, [r2, #48]	; 0x30
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <MX_DMA_Init+0x4c>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	2038      	movs	r0, #56	; 0x38
 8005088:	f002 f989 	bl	800739e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800508c:	2038      	movs	r0, #56	; 0x38
 800508e:	f002 f9a2 	bl	80073d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	203a      	movs	r0, #58	; 0x3a
 8005098:	f002 f981 	bl	800739e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800509c:	203a      	movs	r0, #58	; 0x3a
 800509e:	f002 f99a 	bl	80073d6 <HAL_NVIC_EnableIRQ>

}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800

080050b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	609a      	str	r2, [r3, #8]
 80050c2:	60da      	str	r2, [r3, #12]
 80050c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	4b53      	ldr	r3, [pc, #332]	; (8005218 <MX_GPIO_Init+0x168>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a52      	ldr	r2, [pc, #328]	; (8005218 <MX_GPIO_Init+0x168>)
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b50      	ldr	r3, [pc, #320]	; (8005218 <MX_GPIO_Init+0x168>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <MX_GPIO_Init+0x168>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a4b      	ldr	r2, [pc, #300]	; (8005218 <MX_GPIO_Init+0x168>)
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b49      	ldr	r3, [pc, #292]	; (8005218 <MX_GPIO_Init+0x168>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b45      	ldr	r3, [pc, #276]	; (8005218 <MX_GPIO_Init+0x168>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a44      	ldr	r2, [pc, #272]	; (8005218 <MX_GPIO_Init+0x168>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b42      	ldr	r3, [pc, #264]	; (8005218 <MX_GPIO_Init+0x168>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <MX_GPIO_Init+0x168>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a3d      	ldr	r2, [pc, #244]	; (8005218 <MX_GPIO_Init+0x168>)
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <MX_GPIO_Init+0x168>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4b37      	ldr	r3, [pc, #220]	; (8005218 <MX_GPIO_Init+0x168>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	4a36      	ldr	r2, [pc, #216]	; (8005218 <MX_GPIO_Init+0x168>)
 8005140:	f043 0308 	orr.w	r3, r3, #8
 8005144:	6313      	str	r3, [r2, #48]	; 0x30
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <MX_GPIO_Init+0x168>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8005152:	2200      	movs	r2, #0
 8005154:	f24e 2180 	movw	r1, #57984	; 0xe280
 8005158:	4830      	ldr	r0, [pc, #192]	; (800521c <MX_GPIO_Init+0x16c>)
 800515a:	f003 f861 	bl	8008220 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800515e:	2200      	movs	r2, #0
 8005160:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8005164:	482e      	ldr	r0, [pc, #184]	; (8005220 <MX_GPIO_Init+0x170>)
 8005166:	f003 f85b 	bl	8008220 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800516a:	2200      	movs	r2, #0
 800516c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005170:	482c      	ldr	r0, [pc, #176]	; (8005224 <MX_GPIO_Init+0x174>)
 8005172:	f003 f855 	bl	8008220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8005176:	2200      	movs	r2, #0
 8005178:	2104      	movs	r1, #4
 800517a:	482b      	ldr	r0, [pc, #172]	; (8005228 <MX_GPIO_Init+0x178>)
 800517c:	f003 f850 	bl	8008220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8005180:	f24e 2380 	movw	r3, #57984	; 0xe280
 8005184:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005186:	2301      	movs	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	2300      	movs	r3, #0
 8005190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005192:	f107 0314 	add.w	r3, r7, #20
 8005196:	4619      	mov	r1, r3
 8005198:	4820      	ldr	r0, [pc, #128]	; (800521c <MX_GPIO_Init+0x16c>)
 800519a:	f002 fe8f 	bl	8007ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800519e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80051a2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051a4:	2301      	movs	r3, #1
 80051a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ac:	2300      	movs	r3, #0
 80051ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b0:	f107 0314 	add.w	r3, r7, #20
 80051b4:	4619      	mov	r1, r3
 80051b6:	481a      	ldr	r0, [pc, #104]	; (8005220 <MX_GPIO_Init+0x170>)
 80051b8:	f002 fe80 	bl	8007ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80051bc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80051c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ca:	f107 0314 	add.w	r3, r7, #20
 80051ce:	4619      	mov	r1, r3
 80051d0:	4814      	ldr	r0, [pc, #80]	; (8005224 <MX_GPIO_Init+0x174>)
 80051d2:	f002 fe73 	bl	8007ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051dc:	2301      	movs	r3, #1
 80051de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e4:	2300      	movs	r3, #0
 80051e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e8:	f107 0314 	add.w	r3, r7, #20
 80051ec:	4619      	mov	r1, r3
 80051ee:	480d      	ldr	r0, [pc, #52]	; (8005224 <MX_GPIO_Init+0x174>)
 80051f0:	f002 fe64 	bl	8007ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051f4:	2304      	movs	r3, #4
 80051f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051f8:	2301      	movs	r3, #1
 80051fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005200:	2300      	movs	r3, #0
 8005202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	4619      	mov	r1, r3
 800520a:	4807      	ldr	r0, [pc, #28]	; (8005228 <MX_GPIO_Init+0x178>)
 800520c:	f002 fe56 	bl	8007ebc <HAL_GPIO_Init>

}
 8005210:	bf00      	nop
 8005212:	3728      	adds	r7, #40	; 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	40020800 	.word	0x40020800
 8005220:	40020400 	.word	0x40020400
 8005224:	40020000 	.word	0x40020000
 8005228:	40020c00 	.word	0x40020c00

0800522c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005230:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005232:	e7fe      	b.n	8005232 <Error_Handler+0x6>

08005234 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8005238:	2100      	movs	r1, #0
 800523a:	4808      	ldr	r0, [pc, #32]	; (800525c <initMotor+0x28>)
 800523c:	f004 fb4c 	bl	80098d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8005240:	2108      	movs	r1, #8
 8005242:	4806      	ldr	r0, [pc, #24]	; (800525c <initMotor+0x28>)
 8005244:	f004 fb48 	bl	80098d8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005248:	210c      	movs	r1, #12
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <initMotor+0x2c>)
 800524c:	f004 fb44 	bl	80098d8 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8005250:	2064      	movs	r0, #100	; 0x64
 8005252:	f001 fbb3 	bl	80069bc <HAL_Delay>
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2001ee20 	.word	0x2001ee20
 8005260:	2001eff8 	.word	0x2001eff8

08005264 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800526a:	4b2a      	ldr	r3, [pc, #168]	; (8005314 <motorCtrlFlip+0xb0>)
 800526c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005270:	2b00      	cmp	r3, #0
 8005272:	db0d      	blt.n	8005290 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <motorCtrlFlip+0xb0>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <motorCtrlFlip+0xb4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005282:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	4824      	ldr	r0, [pc, #144]	; (800531c <motorCtrlFlip+0xb8>)
 800528a:	f002 ffc9 	bl	8008220 <HAL_GPIO_WritePin>
 800528e:	e010      	b.n	80052b2 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8005290:	4b20      	ldr	r3, [pc, #128]	; (8005314 <motorCtrlFlip+0xb0>)
 8005292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005296:	b29b      	uxth	r3, r3
 8005298:	425b      	negs	r3, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <motorCtrlFlip+0xb4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80052a8:	2201      	movs	r2, #1
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	481b      	ldr	r0, [pc, #108]	; (800531c <motorCtrlFlip+0xb8>)
 80052ae:	f002 ffb7 	bl	8008220 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <motorCtrlFlip+0xbc>)
 80052b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0e      	blt.n	80052da <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <motorCtrlFlip+0xbc>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <motorCtrlFlip+0xb4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052ca:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80052cc:	2200      	movs	r2, #0
 80052ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052d2:	4812      	ldr	r0, [pc, #72]	; (800531c <motorCtrlFlip+0xb8>)
 80052d4:	f002 ffa4 	bl	8008220 <HAL_GPIO_WritePin>
 80052d8:	e011      	b.n	80052fe <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <motorCtrlFlip+0xbc>)
 80052dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	425b      	negs	r3, r3
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <motorCtrlFlip+0xb4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052f0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80052f2:	2201      	movs	r2, #1
 80052f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052f8:	4808      	ldr	r0, [pc, #32]	; (800531c <motorCtrlFlip+0xb8>)
 80052fa:	f002 ff91 	bl	8008220 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <motorCtrlFlip+0xc0>)
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <motorCtrlFlip+0xc4>)
 8005306:	88bb      	ldrh	r3, [r7, #4]
 8005308:	8013      	strh	r3, [r2, #0]
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	2001cc44 	.word	0x2001cc44
 8005318:	2001ee20 	.word	0x2001ee20
 800531c:	40020800 	.word	0x40020800
 8005320:	2001cc46 	.word	0x2001cc46
 8005324:	2001f0e4 	.word	0x2001f0e4
 8005328:	2001f0e2 	.word	0x2001f0e2

0800532c <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <suctionmotorCtrlFlip+0x1c>)
 8005332:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <suctionmotorCtrlFlip+0x20>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	2001cc48 	.word	0x2001cc48
 800534c:	2001eff8 	.word	0x2001eff8

08005350 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	460a      	mov	r2, r1
 800535a:	80fb      	strh	r3, [r7, #6]
 800535c:	4613      	mov	r3, r2
 800535e:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8005360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005364:	f240 628e 	movw	r2, #1678	; 0x68e
 8005368:	4293      	cmp	r3, r2
 800536a:	dd03      	ble.n	8005374 <setMotor+0x24>
 800536c:	f240 638f 	movw	r3, #1679	; 0x68f
 8005370:	80fb      	strh	r3, [r7, #6]
 8005372:	e007      	b.n	8005384 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8005374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005378:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <setMotor+0x70>)
 800537a:	4293      	cmp	r3, r2
 800537c:	da02      	bge.n	8005384 <setMotor+0x34>
 800537e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005382:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8005384:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005388:	f240 628e 	movw	r2, #1678	; 0x68e
 800538c:	4293      	cmp	r3, r2
 800538e:	dd03      	ble.n	8005398 <setMotor+0x48>
 8005390:	f240 638f 	movw	r3, #1679	; 0x68f
 8005394:	80bb      	strh	r3, [r7, #4]
 8005396:	e007      	b.n	80053a8 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8005398:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800539c:	4a08      	ldr	r2, [pc, #32]	; (80053c0 <setMotor+0x70>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	da02      	bge.n	80053a8 <setMotor+0x58>
 80053a2:	f64f 1371 	movw	r3, #63857	; 0xf971
 80053a6:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 80053a8:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <setMotor+0x74>)
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 80053ae:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <setMotor+0x78>)
 80053b0:	88bb      	ldrh	r3, [r7, #4]
 80053b2:	8013      	strh	r3, [r2, #0]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	fffff972 	.word	0xfffff972
 80053c4:	2001cc44 	.word	0x2001cc44
 80053c8:	2001cc46 	.word	0x2001cc46

080053cc <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 80053d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfb8      	it	lt
 80053de:	425b      	neglt	r3, r3
 80053e0:	b21a      	sxth	r2, r3
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <setsuctionMotor+0x38>)
 80053e4:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 80053e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ea:	f240 3246 	movw	r2, #838	; 0x346
 80053ee:	4293      	cmp	r3, r2
 80053f0:	dd02      	ble.n	80053f8 <setsuctionMotor+0x2c>
 80053f2:	f240 3347 	movw	r3, #839	; 0x347
 80053f6:	80fb      	strh	r3, [r7, #6]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	2001cc48 	.word	0x2001cc48

08005408 <updateSideSensorStatus>:
static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;
static int16_t V_motor;

void updateSideSensorStatus(){
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <updateSideSensorStatus+0x44>)
 800540e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005412:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005416:	dc03      	bgt.n	8005420 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8005418:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <updateSideSensorStatus+0x48>)
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	e002      	b.n	8005426 <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <updateSideSensorStatus+0x48>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <updateSideSensorStatus+0x4c>)
 8005428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800542c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005430:	dc03      	bgt.n	800543a <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <updateSideSensorStatus+0x50>)
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8005438:	e002      	b.n	8005440 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <updateSideSensorStatus+0x50>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	2001ec54 	.word	0x2001ec54
 8005450:	2001eb98 	.word	0x2001eb98
 8005454:	2001ebdc 	.word	0x2001ebdc
 8005458:	2001eb99 	.word	0x2001eb99

0800545c <setRunMode>:

void setRunMode(uint16_t num){
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	80fb      	strh	r3, [r7, #6]
	mode = num;
 8005466:	4a04      	ldr	r2, [pc, #16]	; (8005478 <setRunMode+0x1c>)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	8013      	strh	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	2001f0ec 	.word	0x2001f0ec

0800547c <isCrossLine>:

bool isCrossLine()
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <isCrossLine+0x88>)
 8005484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005490:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <isCrossLine+0x88>)
 8005496:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a2:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 80054a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80054aa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005508 <isCrossLine+0x8c>
 80054ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	d50f      	bpl.n	80054d8 <isCrossLine+0x5c>
 80054b8:	edd7 7a00 	vldr	s15, [r7]
 80054bc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005508 <isCrossLine+0x8c>
 80054c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	d506      	bpl.n	80054d8 <isCrossLine+0x5c>
		cnt++;
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <isCrossLine+0x90>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	4b0e      	ldr	r3, [pc, #56]	; (800550c <isCrossLine+0x90>)
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	e002      	b.n	80054de <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <isCrossLine+0x90>)
 80054da:	2200      	movs	r2, #0
 80054dc:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <isCrossLine+0x90>)
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d903      	bls.n	80054ee <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <isCrossLine+0x94>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e002      	b.n	80054f4 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <isCrossLine+0x94>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <isCrossLine+0x94>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	2001ec38 	.word	0x2001ec38
 8005508:	442f0000 	.word	0x442f0000
 800550c:	2001ebb8 	.word	0x2001ebb8
 8005510:	2001ebba 	.word	0x2001ebba
 8005514:	00000000 	.word	0x00000000

08005518 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005518:	b580      	push	{r7, lr}
 800551a:	ed2d 8b02 	vpush	{d8}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8005522:	2300      	movs	r3, #0
 8005524:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8005526:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <isContinuousCurvature+0xc8>)
 8005528:	ed93 8a00 	vldr	s16, [r3]
 800552c:	f7fc f98e 	bl	800184c <getTheta10mm>
 8005530:	eef0 7a40 	vmov.f32	s15, s0
 8005534:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005538:	eef0 7ae7 	vabs.f32	s15, s15
 800553c:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <isContinuousCurvature+0xcc>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005548:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <isContinuousCurvature+0xcc>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 800554e:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <isContinuousCurvature+0xd0>)
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8005556:	6838      	ldr	r0, [r7, #0]
 8005558:	f7fa fff6 	bl	8000548 <__aeabi_f2d>
 800555c:	a31e      	add	r3, pc, #120	; (adr r3, 80055d8 <isContinuousCurvature+0xc0>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fb fac5 	bl	8000af0 <__aeabi_dcmple>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <isContinuousCurvature+0x6a>
 800556c:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <isContinuousCurvature+0xd0>)
 800556e:	edd3 7a00 	vldr	s15, [r3]
 8005572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <isContinuousCurvature+0xd0>)
 800557c:	edc3 7a00 	vstr	s15, [r3]
 8005580:	e003      	b.n	800558a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8005582:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <isContinuousCurvature+0xd0>)
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 800558a:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <isContinuousCurvature+0xd0>)
 800558c:	edd3 7a00 	vldr	s15, [r3]
 8005590:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80055ec <isContinuousCurvature+0xd4>
 8005594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	db01      	blt.n	80055a2 <isContinuousCurvature+0x8a>
 800559e:	2301      	movs	r3, #1
 80055a0:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <isContinuousCurvature+0xd0>)
 80055a4:	edd3 7a00 	vldr	s15, [r3]
 80055a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80055f0 <isContinuousCurvature+0xd8>
 80055ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	db02      	blt.n	80055bc <isContinuousCurvature+0xa4>
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <isContinuousCurvature+0xd0>)
 80055b8:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <isContinuousCurvature+0xdc>)
 80055ba:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 80055bc:	f7fc f946 	bl	800184c <getTheta10mm>
 80055c0:	eef0 7a40 	vmov.f32	s15, s0
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <isContinuousCurvature+0xc8>)
 80055c6:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 80055ca:	79fb      	ldrb	r3, [r7, #7]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	ecbd 8b02 	vpop	{d8}
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	47ae147b 	.word	0x47ae147b
 80055dc:	3f947ae1 	.word	0x3f947ae1
 80055e0:	2001ebbc 	.word	0x2001ebbc
 80055e4:	2001eb9c 	.word	0x2001eb9c
 80055e8:	2001ebc0 	.word	0x2001ebc0
 80055ec:	42200000 	.word	0x42200000
 80055f0:	447a0000 	.word	0x447a0000
 80055f4:	447a0000 	.word	0x447a0000

080055f8 <isTargetDistance>:

bool isTargetDistance(float target){
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8005606:	f7fb ff0d 	bl	8001424 <getDistance10mm>
 800560a:	eeb0 7a40 	vmov.f32	s14, s0
 800560e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561a:	d801      	bhi.n	8005620 <isTargetDistance+0x28>
		ret = true;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <running>:

void running(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8005636:	f000 f9fd 	bl	8005a34 <runningInit>
	startLineTrace();
 800563a:	f7fc fddd 	bl	80021f8 <startLineTrace>
	startVelocityControl();
 800563e:	f7fe f923 	bl	8003888 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8005642:	4b73      	ldr	r3, [pc, #460]	; (8005810 <running+0x1e4>)
 8005644:	edd3 7a00 	vldr	s15, [r3]
 8005648:	eeb0 0a67 	vmov.f32	s0, s15
 800564c:	f7fe f88e 	bl	800376c <setTargetVelocity>

	while(goal_flag == false){
 8005650:	e0d2      	b.n	80057f8 <running+0x1cc>
		switch(pattern){
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b14      	cmp	r3, #20
 8005656:	f200 80c2 	bhi.w	80057de <running+0x1b2>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <running+0x34>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	080056b5 	.word	0x080056b5
 8005664:	080057df 	.word	0x080057df
 8005668:	080057df 	.word	0x080057df
 800566c:	080057df 	.word	0x080057df
 8005670:	080057df 	.word	0x080057df
 8005674:	08005703 	.word	0x08005703
 8005678:	080057df 	.word	0x080057df
 800567c:	080057df 	.word	0x080057df
 8005680:	080057df 	.word	0x080057df
 8005684:	080057df 	.word	0x080057df
 8005688:	08005717 	.word	0x08005717
 800568c:	080057df 	.word	0x080057df
 8005690:	080057df 	.word	0x080057df
 8005694:	080057df 	.word	0x080057df
 8005698:	080057df 	.word	0x080057df
 800569c:	080057df 	.word	0x080057df
 80056a0:	080057df 	.word	0x080057df
 80056a4:	080057df 	.word	0x080057df
 80056a8:	080057df 	.word	0x080057df
 80056ac:	080057df 	.word	0x080057df
 80056b0:	080057b3 	.word	0x080057b3

				  case 0:
					  if(getSideSensorStatusR() == true){
 80056b4:	f000 fc30 	bl	8005f18 <getSideSensorStatusR>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 808c 	beq.w	80057d8 <running+0x1ac>
						  start_goal_line_cnt++;
 80056c0:	4b54      	ldr	r3, [pc, #336]	; (8005814 <running+0x1e8>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	4b52      	ldr	r3, [pc, #328]	; (8005814 <running+0x1e8>)
 80056ca:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 80056cc:	4b52      	ldr	r3, [pc, #328]	; (8005818 <running+0x1ec>)
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d102      	bne.n	80056da <running+0xae>
 80056d4:	f000 fa42 	bl	8005b5c <startLogging>
 80056d8:	e00c      	b.n	80056f4 <running+0xc8>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 80056da:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <running+0x1ec>)
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d003      	beq.n	80056ea <running+0xbe>
 80056e2:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <running+0x1ec>)
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d102      	bne.n	80056f0 <running+0xc4>
 80056ea:	f000 fa71 	bl	8005bd0 <startVelocityUpdate>
 80056ee:	e001      	b.n	80056f4 <running+0xc8>
						  else startTargetUpdate();
 80056f0:	f000 fa50 	bl	8005b94 <startTargetUpdate>

						  clearGoalJudgeDistance();
 80056f4:	f7fb fe5e 	bl	80013b4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 80056f8:	f7fb fe6a 	bl	80013d0 <clearSideLineJudgeDistance>
						  pattern = 5;
 80056fc:	2305      	movs	r3, #5
 80056fe:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8005700:	e06a      	b.n	80057d8 <running+0x1ac>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8005702:	f000 fc09 	bl	8005f18 <getSideSensorStatusR>
 8005706:	4603      	mov	r3, r0
 8005708:	f083 0301 	eor.w	r3, r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <running+0xea>
 8005712:	230a      	movs	r3, #10
 8005714:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8005716:	f000 fbf3 	bl	8005f00 <getSideSensorStatusL>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <running+0xfe>
						  goal_judge_flag = false;
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <running+0x1f0>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005726:	f7fb fe45 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 800572a:	4b3c      	ldr	r3, [pc, #240]	; (800581c <running+0x1f0>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f083 0301 	eor.w	r3, r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <running+0x138>
 8005738:	f000 fbee 	bl	8005f18 <getSideSensorStatusR>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <running+0x138>
 8005742:	f7fb fdef 	bl	8001324 <getGoalJudgeDistance>
 8005746:	eeb0 7a40 	vmov.f32	s14, s0
 800574a:	eddf 7a35 	vldr	s15, [pc, #212]	; 8005820 <running+0x1f4>
 800574e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005756:	db05      	blt.n	8005764 <running+0x138>
						  goal_judge_flag = true;
 8005758:	4b30      	ldr	r3, [pc, #192]	; (800581c <running+0x1f0>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800575e:	f7fb fe29 	bl	80013b4 <clearGoalJudgeDistance>
 8005762:	e019      	b.n	8005798 <running+0x16c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8005764:	4b2d      	ldr	r3, [pc, #180]	; (800581c <running+0x1f0>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d015      	beq.n	8005798 <running+0x16c>
 800576c:	f7fb fdda 	bl	8001324 <getGoalJudgeDistance>
 8005770:	eeb0 7a40 	vmov.f32	s14, s0
 8005774:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005820 <running+0x1f4>
 8005778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005780:	db0a      	blt.n	8005798 <running+0x16c>
						  start_goal_line_cnt++;
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <running+0x1e8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	3301      	adds	r3, #1
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b22      	ldr	r3, [pc, #136]	; (8005814 <running+0x1e8>)
 800578c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 800578e:	4b23      	ldr	r3, [pc, #140]	; (800581c <running+0x1f0>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005794:	f7fb fe0e 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <running+0x1e8>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d91d      	bls.n	80057dc <running+0x1b0>
						  stopLogging();
 80057a0:	f000 f9ec 	bl	8005b7c <stopLogging>
						  stopVelocityUpdate();
 80057a4:	f000 fa36 	bl	8005c14 <stopVelocityUpdate>
						  stopTargetUpdate();
 80057a8:	f000 fa06 	bl	8005bb8 <stopTargetUpdate>
						  pattern = 20;
 80057ac:	2314      	movs	r3, #20
 80057ae:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 80057b0:	e014      	b.n	80057dc <running+0x1b0>

				  case 20:

					  setTargetVelocity(1.0);
 80057b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80057b6:	f7fd ffd9 	bl	800376c <setTargetVelocity>
					  HAL_Delay(100);
 80057ba:	2064      	movs	r0, #100	; 0x64
 80057bc:	f001 f8fe 	bl	80069bc <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 80057c0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005824 <running+0x1f8>
 80057c4:	f7fd ffd2 	bl	800376c <setTargetVelocity>
					  HAL_Delay(500);
 80057c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057cc:	f001 f8f6 	bl	80069bc <HAL_Delay>

					  goal_flag = true;
 80057d0:	4b15      	ldr	r3, [pc, #84]	; (8005828 <running+0x1fc>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]

					  break;
 80057d6:	e002      	b.n	80057de <running+0x1b2>
					  break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <running+0x1b2>
					  break;
 80057dc:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 80057de:	f7fc fd91 	bl	8002304 <getCouseOutFlag>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <running+0x1cc>
		{
			stopLogging();
 80057e8:	f000 f9c8 	bl	8005b7c <stopLogging>
			stopVelocityUpdate();
 80057ec:	f000 fa12 	bl	8005c14 <stopVelocityUpdate>
			stopTargetUpdate();
 80057f0:	f000 f9e2 	bl	8005bb8 <stopTargetUpdate>
		    pattern = 20;
 80057f4:	2314      	movs	r3, #20
 80057f6:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <running+0x1fc>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f083 0301 	eor.w	r3, r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	f47f af25 	bne.w	8005652 <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2001eba4 	.word	0x2001eba4
 8005814:	2001eb8c 	.word	0x2001eb8c
 8005818:	2001f0ec 	.word	0x2001f0ec
 800581c:	2001eb9b 	.word	0x2001eb9b
 8005820:	428c0000 	.word	0x428c0000
 8005824:	00000000 	.word	0x00000000
 8005828:	2001eb9a 	.word	0x2001eb9a

0800582c <runningFlip>:

void runningFlip()
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005830:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <runningFlip+0x1e0>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80e7 	beq.w	8005a08 <runningFlip+0x1dc>
		setLED('G');
 800583a:	2047      	movs	r0, #71	; 0x47
 800583c:	f7fc f83e 	bl	80018bc <setLED>
		updateTargetVelocity();//速度の更新
 8005840:	f000 f9f4 	bl	8005c2c <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 8005844:	f7fe f9e8 	bl	8003c18 <updateTargetpoint>

		if(isTargetDistance(30) == true){
 8005848:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800584c:	f7ff fed4 	bl	80055f8 <isTargetDistance>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <runningFlip+0x46>
			saveLog();
 8005856:	f000 f931 	bl	8005abc <saveLog>

			if(isContinuousCurvature() == true){
 800585a:	f7ff fe5d 	bl	8005518 <isContinuousCurvature>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8005864:	4b6a      	ldr	r3, [pc, #424]	; (8005a10 <runningFlip+0x1e4>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 800586a:	f7fb fde9 	bl	8001440 <clearDistance10mm>
			clearTheta10mm();
 800586e:	f7fb fffb 	bl	8001868 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8005872:	f7ff fe03 	bl	800547c <isCrossLine>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d026      	beq.n	80058ca <runningFlip+0x9e>
 800587c:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <runningFlip+0x1e8>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f083 0301 	eor.w	r3, r3, #1
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01f      	beq.n	80058ca <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <runningFlip+0x1e8>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005890:	4b5f      	ldr	r3, [pc, #380]	; (8005a10 <runningFlip+0x1e4>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005896:	f7fb fda9 	bl	80013ec <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 800589a:	f7fb fdb5 	bl	8001408 <clearSideLineIgnoreDistance>

			if(mode == 1){
 800589e:	4b5e      	ldr	r3, [pc, #376]	; (8005a18 <runningFlip+0x1ec>)
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10b      	bne.n	80058be <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 80058a6:	4b5d      	ldr	r3, [pc, #372]	; (8005a1c <runningFlip+0x1f0>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 80058ac:	f7fb fd2c 	bl	8001308 <getTotalDistance>
 80058b0:	eef0 7a40 	vmov.f32	s15, s0
 80058b4:	eeb0 0a67 	vmov.f32	s0, s15
 80058b8:	f7fd fba2 	bl	8003000 <saveCross>
			if(mode == 1){
 80058bc:	e017      	b.n	80058ee <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 80058be:	4b57      	ldr	r3, [pc, #348]	; (8005a1c <runningFlip+0x1f0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80058c4:	f000 fa18 	bl	8005cf8 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 80058c8:	e011      	b.n	80058ee <runningFlip+0xc2>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 80058ca:	4b52      	ldr	r3, [pc, #328]	; (8005a14 <runningFlip+0x1e8>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00d      	beq.n	80058ee <runningFlip+0xc2>
 80058d2:	f7fb fd53 	bl	800137c <getCrossLineIgnoreDistance>
 80058d6:	eeb0 7a40 	vmov.f32	s14, s0
 80058da:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005a20 <runningFlip+0x1f4>
 80058de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e6:	db02      	blt.n	80058ee <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 80058e8:	4b4a      	ldr	r3, [pc, #296]	; (8005a14 <runningFlip+0x1e8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 80058ee:	f000 fb13 	bl	8005f18 <getSideSensorStatusR>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <runningFlip+0xd6>
			side_line_judge_flag = false;
 80058f8:	4b4a      	ldr	r3, [pc, #296]	; (8005a24 <runningFlip+0x1f8>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80058fe:	f7fb fd67 	bl	80013d0 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8005902:	4b48      	ldr	r3, [pc, #288]	; (8005a24 <runningFlip+0x1f8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f083 0301 	eor.w	r3, r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d015      	beq.n	800593c <runningFlip+0x110>
 8005910:	f000 faf6 	bl	8005f00 <getSideSensorStatusL>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d010      	beq.n	800593c <runningFlip+0x110>
 800591a:	f7fb fd11 	bl	8001340 <getSideLineJudgeDistance>
 800591e:	eeb0 7a40 	vmov.f32	s14, s0
 8005922:	eddf 7a41 	vldr	s15, [pc, #260]	; 8005a28 <runningFlip+0x1fc>
 8005926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800592a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592e:	db05      	blt.n	800593c <runningFlip+0x110>
			side_line_judge_flag = true;
 8005930:	4b3c      	ldr	r3, [pc, #240]	; (8005a24 <runningFlip+0x1f8>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8005936:	f7fb fd4b 	bl	80013d0 <clearSideLineJudgeDistance>
 800593a:	e02f      	b.n	800599c <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 800593c:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <runningFlip+0x1f8>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02b      	beq.n	800599c <runningFlip+0x170>
 8005944:	f7fb fcfc 	bl	8001340 <getSideLineJudgeDistance>
 8005948:	eeb0 7a40 	vmov.f32	s14, s0
 800594c:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005a28 <runningFlip+0x1fc>
 8005950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005958:	db20      	blt.n	800599c <runningFlip+0x170>
			clearSideLineJudgeDistance();
 800595a:	f7fb fd39 	bl	80013d0 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 800595e:	4b31      	ldr	r3, [pc, #196]	; (8005a24 <runningFlip+0x1f8>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8005964:	4b2a      	ldr	r3, [pc, #168]	; (8005a10 <runningFlip+0x1e4>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d017      	beq.n	800599c <runningFlip+0x170>
				continuous_curve_flag = false;
 800596c:	4b28      	ldr	r3, [pc, #160]	; (8005a10 <runningFlip+0x1e4>)
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8005972:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <runningFlip+0x200>)
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <runningFlip+0x1ec>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10b      	bne.n	8005998 <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 8005980:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <runningFlip+0x204>)
 8005982:	2200      	movs	r2, #0
 8005984:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8005986:	f7fb fcbf 	bl	8001308 <getTotalDistance>
 800598a:	eef0 7a40 	vmov.f32	s15, s0
 800598e:	eeb0 0a67 	vmov.f32	s0, s15
 8005992:	f7fd fb4d 	bl	8003030 <saveSide>
 8005996:	e001      	b.n	800599c <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8005998:	f000 fa04 	bl	8005da4 <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <runningFlip+0x1f0>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <runningFlip+0x1f0>)
 80059a6:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <runningFlip+0x204>)
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <runningFlip+0x204>)
 80059b2:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <runningFlip+0x1f0>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80059bc:	4293      	cmp	r3, r2
 80059be:	d903      	bls.n	80059c8 <runningFlip+0x19c>
 80059c0:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <runningFlip+0x1f0>)
 80059c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80059c6:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 80059c8:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <runningFlip+0x204>)
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d903      	bls.n	80059dc <runningFlip+0x1b0>
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <runningFlip+0x204>)
 80059d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80059da:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 80059dc:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <runningFlip+0x204>)
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	2b96      	cmp	r3, #150	; 0x96
 80059e2:	d803      	bhi.n	80059ec <runningFlip+0x1c0>
 80059e4:	2047      	movs	r0, #71	; 0x47
 80059e6:	f7fc f837 	bl	8001a58 <setLED2>
 80059ea:	e002      	b.n	80059f2 <runningFlip+0x1c6>
	    else setLED2('N');
 80059ec:	204e      	movs	r0, #78	; 0x4e
 80059ee:	f7fc f833 	bl	8001a58 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <runningFlip+0x204>)
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2b96      	cmp	r3, #150	; 0x96
 80059f8:	d803      	bhi.n	8005a02 <runningFlip+0x1d6>
 80059fa:	2042      	movs	r0, #66	; 0x42
 80059fc:	f7fb ff5e 	bl	80018bc <setLED>
	    else setLED('G');
	}
}
 8005a00:	e002      	b.n	8005a08 <runningFlip+0x1dc>
	    else setLED('G');
 8005a02:	2047      	movs	r0, #71	; 0x47
 8005a04:	f7fb ff5a 	bl	80018bc <setLED>
}
 8005a08:	bf00      	nop
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	2001eb9e 	.word	0x2001eb9e
 8005a10:	2001eb9d 	.word	0x2001eb9d
 8005a14:	2001eb96 	.word	0x2001eb96
 8005a18:	2001f0ec 	.word	0x2001f0ec
 8005a1c:	2001eb92 	.word	0x2001eb92
 8005a20:	42480000 	.word	0x42480000
 8005a24:	2001eb97 	.word	0x2001eb97
 8005a28:	42700000 	.word	0x42700000
 8005a2c:	2001eb9c 	.word	0x2001eb9c
 8005a30:	2001eb94 	.word	0x2001eb94

08005a34 <runningInit>:

void runningInit()
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
	if(mode == 1){
 8005a38:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <runningInit+0x68>)
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <runningInit+0x18>
		setLED('W');
 8005a40:	2057      	movs	r0, #87	; 0x57
 8005a42:	f7fb ff3b 	bl	80018bc <setLED>
		ereaseLog();
 8005a46:	f7fd fb23 	bl	8003090 <ereaseLog>
 8005a4a:	e00b      	b.n	8005a64 <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 8005a4c:	f7fd fb5c 	bl	8003108 <ereaseDebugLog>
		loadDistance();
 8005a50:	f7fd fb9a 	bl	8003188 <loadDistance>
		loadTheta();
 8005a54:	f7fd fbd6 	bl	8003204 <loadTheta>
		loadCross();
 8005a58:	f7fd fc12 	bl	8003280 <loadCross>
		loadSide();
 8005a5c:	f7fd fc4e 	bl	80032fc <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 8005a60:	f7fd ff3c 	bl	80038dc <CreateXYcoordinates>
	}

	clearCrossLineIgnoreDistance();
 8005a64:	f7fb fcc2 	bl	80013ec <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005a68:	f7fb fcce 	bl	8001408 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <runningInit+0x6c>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 8005a72:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <runningInit+0x70>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <runningInit+0x74>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <runningInit+0x78>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <runningInit+0x7c>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <runningInit+0x80>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <runningInit+0x84>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2001f0ec 	.word	0x2001f0ec
 8005aa0:	2001eb8c 	.word	0x2001eb8c
 8005aa4:	2001eb96 	.word	0x2001eb96
 8005aa8:	2001eb97 	.word	0x2001eb97
 8005aac:	2001eb9b 	.word	0x2001eb9b
 8005ab0:	2001eb9c 	.word	0x2001eb9c
 8005ab4:	2001eb9d 	.word	0x2001eb9d
 8005ab8:	2001eb9e 	.word	0x2001eb9e

08005abc <saveLog>:

void saveLog(){
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <saveLog+0x94>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d010      	beq.n	8005aea <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8005ac8:	f7fb fcac 	bl	8001424 <getDistance10mm>
 8005acc:	eef0 7a40 	vmov.f32	s15, s0
 8005ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad4:	f7fd fa64 	bl	8002fa0 <saveDistance>
		saveTheta(getTheta10mm());
 8005ad8:	f7fb feb8 	bl	800184c <getTheta10mm>
 8005adc:	eef0 7a40 	vmov.f32	s15, s0
 8005ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae4:	f7fd fa74 	bl	8002fd0 <saveTheta>
		//saveDebug(CurrentYcoordinates());
		saveDebug(ErrorXcoordinates());
	    saveDebug(ErrorYcoordinates());
		saveDebug(ErrorTheta());
	}
}
 8005ae8:	e030      	b.n	8005b4c <saveLog+0x90>
	else if(velocity_update_flag == true){
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <saveLog+0x98>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d010      	beq.n	8005b14 <saveLog+0x58>
		saveDebug(getTargetVelocity());
 8005af2:	f7fd febb 	bl	800386c <getTargetVelocity>
 8005af6:	eef0 7a40 	vmov.f32	s15, s0
 8005afa:	eeb0 0a67 	vmov.f32	s0, s15
 8005afe:	f7fd faaf 	bl	8003060 <saveDebug>
		saveDebug(getCurrentVelocity());
 8005b02:	f7fd fe75 	bl	80037f0 <getCurrentVelocity>
 8005b06:	eef0 7a40 	vmov.f32	s15, s0
 8005b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b0e:	f7fd faa7 	bl	8003060 <saveDebug>
}
 8005b12:	e01b      	b.n	8005b4c <saveLog+0x90>
	else if(target_update_flag == true){
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <saveLog+0x9c>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <saveLog+0x90>
		saveDebug(ErrorXcoordinates());
 8005b1c:	f7fe f920 	bl	8003d60 <ErrorXcoordinates>
 8005b20:	eef0 7a40 	vmov.f32	s15, s0
 8005b24:	eeb0 0a67 	vmov.f32	s0, s15
 8005b28:	f7fd fa9a 	bl	8003060 <saveDebug>
	    saveDebug(ErrorYcoordinates());
 8005b2c:	f7fe f98e 	bl	8003e4c <ErrorYcoordinates>
 8005b30:	eef0 7a40 	vmov.f32	s15, s0
 8005b34:	eeb0 0a67 	vmov.f32	s0, s15
 8005b38:	f7fd fa92 	bl	8003060 <saveDebug>
		saveDebug(ErrorTheta());
 8005b3c:	f7fe f8f2 	bl	8003d24 <ErrorTheta>
 8005b40:	eef0 7a40 	vmov.f32	s15, s0
 8005b44:	eeb0 0a67 	vmov.f32	s0, s15
 8005b48:	f7fd fa8a 	bl	8003060 <saveDebug>
}
 8005b4c:	bf00      	nop
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	2001eb9f 	.word	0x2001eb9f
 8005b54:	2001eba1 	.word	0x2001eba1
 8005b58:	2001eba0 	.word	0x2001eba0

08005b5c <startLogging>:

void startLogging(){
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005b60:	f7fb fc6e 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 8005b64:	f7fb fe80 	bl	8001868 <clearTheta10mm>
	clearTotalDistance();
 8005b68:	f7fb fc16 	bl	8001398 <clearTotalDistance>
	logging_flag = true;
 8005b6c:	4b02      	ldr	r3, [pc, #8]	; (8005b78 <startLogging+0x1c>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	2001eb9f 	.word	0x2001eb9f

08005b7c <stopLogging>:

void stopLogging()
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
	logging_flag = false;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <stopLogging+0x14>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	2001eb9f 	.word	0x2001eb9f

08005b94 <startTargetUpdate>:

void startTargetUpdate()
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005b98:	f7fb fc52 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 8005b9c:	f7fb fe64 	bl	8001868 <clearTheta10mm>
	clearaddTheta();
 8005ba0:	f7fb fe7e 	bl	80018a0 <clearaddTheta>
	clearTotalDistance();
 8005ba4:	f7fb fbf8 	bl	8001398 <clearTotalDistance>
	target_update_flag = true;
 8005ba8:	4b02      	ldr	r3, [pc, #8]	; (8005bb4 <startTargetUpdate+0x20>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	2001eba0 	.word	0x2001eba0

08005bb8 <stopTargetUpdate>:

void stopTargetUpdate()
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
	target_update_flag = false;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <stopTargetUpdate+0x14>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	2001eba0 	.word	0x2001eba0

08005bd0 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005bd4:	f7fb fc34 	bl	8001440 <clearDistance10mm>
	clearTotalDistance();
 8005bd8:	f7fb fbde 	bl	8001398 <clearTotalDistance>
	velocity_table_idx = 0;
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <startVelocityUpdate+0x30>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005be2:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <startVelocityUpdate+0x34>)
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <startVelocityUpdate+0x38>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <startVelocityUpdate+0x3c>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <startVelocityUpdate+0x40>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	801a      	strh	r2, [r3, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	2001f0ee 	.word	0x2001f0ee
 8005c04:	2001f0e8 	.word	0x2001f0e8
 8005c08:	2001eba1 	.word	0x2001eba1
 8005c0c:	2001eb8e 	.word	0x2001eb8e
 8005c10:	2001eb90 	.word	0x2001eb90

08005c14 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <stopVelocityUpdate+0x14>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	2001eba1 	.word	0x2001eba1

08005c2c <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005c30:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <updateTargetVelocity+0xb8>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d053      	beq.n	8005ce0 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 8005c38:	f7fb fb66 	bl	8001308 <getTotalDistance>
 8005c3c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c40:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <updateTargetVelocity+0xbc>)
 8005c42:	edd3 7a00 	vldr	s15, [r3]
 8005c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4e:	db14      	blt.n	8005c7a <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005c50:	4b26      	ldr	r3, [pc, #152]	; (8005cec <updateTargetVelocity+0xc0>)
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd fbe1 	bl	800341c <getDistanceLog>
 8005c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8005c5e:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <updateTargetVelocity+0xbc>)
 8005c60:	edd3 7a00 	vldr	s15, [r3]
 8005c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c68:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <updateTargetVelocity+0xbc>)
 8005c6a:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005c6e:	4b1f      	ldr	r3, [pc, #124]	; (8005cec <updateTargetVelocity+0xc0>)
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <updateTargetVelocity+0xc0>)
 8005c78:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005c7a:	f7fd fa55 	bl	8003128 <getDistanceLogSize>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <updateTargetVelocity+0xc0>)
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d806      	bhi.n	8005c98 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005c8a:	f7fd fa4d 	bl	8003128 <getDistanceLogSize>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	4b15      	ldr	r3, [pc, #84]	; (8005cec <updateTargetVelocity+0xc0>)
 8005c96:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <updateTargetVelocity+0xc0>)
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <updateTargetVelocity+0xc4>)
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	edd3 7a00 	vldr	s15, [r3]
 8005ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8005caa:	f7fd fd5f 	bl	800376c <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <updateTargetVelocity+0xc0>)
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <updateTargetVelocity+0xc4>)
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	ed93 7a00 	vldr	s14, [r3]
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <updateTargetVelocity+0xc8>)
 8005cbe:	edd3 7a00 	vldr	s15, [r3]
 8005cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cca:	d501      	bpl.n	8005cd0 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8005ccc:	f7fd fdfa 	bl	80038c4 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <updateTargetVelocity+0xc0>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	4a06      	ldr	r2, [pc, #24]	; (8005cf0 <updateTargetVelocity+0xc4>)
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a05      	ldr	r2, [pc, #20]	; (8005cf4 <updateTargetVelocity+0xc8>)
 8005cde:	6013      	str	r3, [r2, #0]
	}
}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	2001eba1 	.word	0x2001eba1
 8005ce8:	2001f0e8 	.word	0x2001f0e8
 8005cec:	2001f0ee 	.word	0x2001f0ee
 8005cf0:	2001cc4c 	.word	0x2001cc4c
 8005cf4:	2001ebc4 	.word	0x2001ebc4

08005cf8 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005cfe:	e03f      	b.n	8005d80 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005d00:	4b25      	ldr	r3, [pc, #148]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fd fbb5 	bl	8003474 <getCrossLog>
 8005d0a:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005d0e:	f7fb fafb 	bl	8001308 <getTotalDistance>
 8005d12:	eeb0 7a40 	vmov.f32	s14, s0
 8005d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d1e:	eef0 7ae7 	vabs.f32	s15, s15
 8005d22:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005d26:	edd7 7a00 	vldr	s15, [r7]
 8005d2a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005d9c <correctionTotalDistanceFromCrossLine+0xa4>
 8005d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	d80d      	bhi.n	8005d54 <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005d3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d42:	f7fb fb0b 	bl	800135c <setTotalDistance>
			cross_line_idx++;
 8005d46:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d50:	801a      	strh	r2, [r3, #0]
			break;
 8005d52:	e01d      	b.n	8005d90 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005d54:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d5e:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005d60:	f7fd f9ee 	bl	8003140 <getCrossLogSize>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d807      	bhi.n	8005d80 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005d70:	f7fd f9e6 	bl	8003140 <getCrossLogSize>
 8005d74:	4603      	mov	r3, r0
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d7c:	801a      	strh	r2, [r3, #0]
			break;
 8005d7e:	e007      	b.n	8005d90 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005d80:	f7fd f9de 	bl	8003140 <getCrossLogSize>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d2b7      	bcs.n	8005d00 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	2001eb8e 	.word	0x2001eb8e
 8005d9c:	437a0000 	.word	0x437a0000
 8005da0:	2001eb92 	.word	0x2001eb92

08005da4 <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005daa:	e03f      	b.n	8005e2c <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fd fb75 	bl	80034a0 <getSideLog>
 8005db6:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005dba:	f7fb faa5 	bl	8001308 <getTotalDistance>
 8005dbe:	eeb0 7a40 	vmov.f32	s14, s0
 8005dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dca:	eef0 7ae7 	vabs.f32	s15, s15
 8005dce:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005dd2:	edd7 7a00 	vldr	s15, [r7]
 8005dd6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005e48 <correctionTotalDistanceFromSideLine+0xa4>
 8005dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de2:	d80d      	bhi.n	8005e00 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <correctionTotalDistanceFromSideLine+0xa8>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005dea:	ed97 0a01 	vldr	s0, [r7, #4]
 8005dee:	f7fb fab5 	bl	800135c <setTotalDistance>
			side_line_idx++;
 8005df2:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005dfc:	801a      	strh	r2, [r3, #0]
			break;
 8005dfe:	e01d      	b.n	8005e3c <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e0a:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005e0c:	f7fd f9a4 	bl	8003158 <getSideLogSize>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d807      	bhi.n	8005e2c <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005e1c:	f7fd f99c 	bl	8003158 <getSideLogSize>
 8005e20:	4603      	mov	r3, r0
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e28:	801a      	strh	r2, [r3, #0]
			break;
 8005e2a:	e007      	b.n	8005e3c <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005e2c:	f7fd f994 	bl	8003158 <getSideLogSize>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d2b7      	bcs.n	8005dac <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2001eb90 	.word	0x2001eb90
 8005e48:	437a0000 	.word	0x437a0000
 8005e4c:	2001eb94 	.word	0x2001eb94

08005e50 <getgoalStatus>:
		th = th + temp_theta;
	}
}
*/
bool getgoalStatus()
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
	return goal_flag;
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <getgoalStatus+0x14>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	2001eb9a 	.word	0x2001eb9a

08005e68 <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
	return target_update_flag;
 8005e6c:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <getTargetUpdateflag+0x14>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	2001eba0 	.word	0x2001eba0

08005e80 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e8a:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005e8e:	4a06      	ldr	r2, [pc, #24]	; (8005ea8 <setVelocityRange+0x28>)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005e94:	4a05      	ldr	r2, [pc, #20]	; (8005eac <setVelocityRange+0x2c>)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6013      	str	r3, [r2, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	2001eba4 	.word	0x2001eba4
 8005eac:	2001eba8 	.word	0x2001eba8

08005eb0 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005eba:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005ebe:	4a06      	ldr	r2, [pc, #24]	; (8005ed8 <setAccDec+0x28>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005ec4:	4a05      	ldr	r2, [pc, #20]	; (8005edc <setAccDec+0x2c>)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6013      	str	r3, [r2, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2001ebac 	.word	0x2001ebac
 8005edc:	2001ebb0 	.word	0x2001ebb0

08005ee0 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005eea:	4a04      	ldr	r2, [pc, #16]	; (8005efc <setStraightRadius+0x1c>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6013      	str	r3, [r2, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	2001ebb4 	.word	0x2001ebb4

08005f00 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <getSideSensorStatusL+0x14>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	2001eb98 	.word	0x2001eb98

08005f18 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <getSideSensorStatusR+0x14>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	2001eb99 	.word	0x2001eb99

08005f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <HAL_MspInit+0x4c>)
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <HAL_MspInit+0x4c>)
 8005f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f44:	6453      	str	r3, [r2, #68]	; 0x44
 8005f46:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <HAL_MspInit+0x4c>)
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	603b      	str	r3, [r7, #0]
 8005f56:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <HAL_MspInit+0x4c>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <HAL_MspInit+0x4c>)
 8005f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6413      	str	r3, [r2, #64]	; 0x40
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <HAL_MspInit+0x4c>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40023800 	.word	0x40023800

08005f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a79      	ldr	r2, [pc, #484]	; (8006184 <HAL_ADC_MspInit+0x204>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d158      	bne.n	8006054 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	4b78      	ldr	r3, [pc, #480]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005faa:	4a77      	ldr	r2, [pc, #476]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8005fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fb2:	4b75      	ldr	r3, [pc, #468]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	4b71      	ldr	r3, [pc, #452]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a70      	ldr	r2, [pc, #448]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b6e      	ldr	r3, [pc, #440]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005fda:	230e      	movs	r3, #14
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fea:	4619      	mov	r1, r3
 8005fec:	4867      	ldr	r0, [pc, #412]	; (800618c <HAL_ADC_MspInit+0x20c>)
 8005fee:	f001 ff65 	bl	8007ebc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005ff2:	4b67      	ldr	r3, [pc, #412]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8005ff4:	4a67      	ldr	r2, [pc, #412]	; (8006194 <HAL_ADC_MspInit+0x214>)
 8005ff6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005ff8:	4b65      	ldr	r3, [pc, #404]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ffe:	4b64      	ldr	r3, [pc, #400]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8006000:	2200      	movs	r2, #0
 8006002:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006004:	4b62      	ldr	r3, [pc, #392]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8006006:	2200      	movs	r2, #0
 8006008:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800600a:	4b61      	ldr	r3, [pc, #388]	; (8006190 <HAL_ADC_MspInit+0x210>)
 800600c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006010:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006012:	4b5f      	ldr	r3, [pc, #380]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8006014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006018:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800601a:	4b5d      	ldr	r3, [pc, #372]	; (8006190 <HAL_ADC_MspInit+0x210>)
 800601c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006020:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006022:	4b5b      	ldr	r3, [pc, #364]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8006024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006028:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800602a:	4b59      	ldr	r3, [pc, #356]	; (8006190 <HAL_ADC_MspInit+0x210>)
 800602c:	2200      	movs	r2, #0
 800602e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006030:	4b57      	ldr	r3, [pc, #348]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8006032:	2200      	movs	r2, #0
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006036:	4856      	ldr	r0, [pc, #344]	; (8006190 <HAL_ADC_MspInit+0x210>)
 8006038:	f001 f9e8 	bl	800740c <HAL_DMA_Init>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8006042:	f7ff f8f3 	bl	800522c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a51      	ldr	r2, [pc, #324]	; (8006190 <HAL_ADC_MspInit+0x210>)
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
 800604c:	4a50      	ldr	r2, [pc, #320]	; (8006190 <HAL_ADC_MspInit+0x210>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006052:	e092      	b.n	800617a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a4f      	ldr	r2, [pc, #316]	; (8006198 <HAL_ADC_MspInit+0x218>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f040 808d 	bne.w	800617a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	4b48      	ldr	r3, [pc, #288]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	4a47      	ldr	r2, [pc, #284]	; (8006188 <HAL_ADC_MspInit+0x208>)
 800606a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800606e:	6453      	str	r3, [r2, #68]	; 0x44
 8006070:	4b45      	ldr	r3, [pc, #276]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8006072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	4b41      	ldr	r3, [pc, #260]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	4a40      	ldr	r2, [pc, #256]	; (8006188 <HAL_ADC_MspInit+0x208>)
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	6313      	str	r3, [r2, #48]	; 0x30
 800608c:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <HAL_ADC_MspInit+0x208>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	4b3a      	ldr	r3, [pc, #232]	; (8006188 <HAL_ADC_MspInit+0x208>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	4a39      	ldr	r2, [pc, #228]	; (8006188 <HAL_ADC_MspInit+0x208>)
 80060a2:	f043 0304 	orr.w	r3, r3, #4
 80060a6:	6313      	str	r3, [r2, #48]	; 0x30
 80060a8:	4b37      	ldr	r3, [pc, #220]	; (8006188 <HAL_ADC_MspInit+0x208>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	4b33      	ldr	r3, [pc, #204]	; (8006188 <HAL_ADC_MspInit+0x208>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	4a32      	ldr	r2, [pc, #200]	; (8006188 <HAL_ADC_MspInit+0x208>)
 80060be:	f043 0302 	orr.w	r3, r3, #2
 80060c2:	6313      	str	r3, [r2, #48]	; 0x30
 80060c4:	4b30      	ldr	r3, [pc, #192]	; (8006188 <HAL_ADC_MspInit+0x208>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80060d0:	23ff      	movs	r3, #255	; 0xff
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060d4:	2303      	movs	r3, #3
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e0:	4619      	mov	r1, r3
 80060e2:	482e      	ldr	r0, [pc, #184]	; (800619c <HAL_ADC_MspInit+0x21c>)
 80060e4:	f001 feea 	bl	8007ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80060e8:	2330      	movs	r3, #48	; 0x30
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060ec:	2303      	movs	r3, #3
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060f8:	4619      	mov	r1, r3
 80060fa:	4824      	ldr	r0, [pc, #144]	; (800618c <HAL_ADC_MspInit+0x20c>)
 80060fc:	f001 fede 	bl	8007ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006100:	2303      	movs	r3, #3
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006104:	2303      	movs	r3, #3
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006108:	2300      	movs	r3, #0
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800610c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006110:	4619      	mov	r1, r3
 8006112:	4823      	ldr	r0, [pc, #140]	; (80061a0 <HAL_ADC_MspInit+0x220>)
 8006114:	f001 fed2 	bl	8007ebc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006118:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 800611a:	4a23      	ldr	r2, [pc, #140]	; (80061a8 <HAL_ADC_MspInit+0x228>)
 800611c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800611e:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006124:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006126:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006128:	2200      	movs	r2, #0
 800612a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800612c:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 800612e:	2200      	movs	r2, #0
 8006130:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006132:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006138:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800613a:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 800613c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006140:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006144:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006148:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 800614c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006150:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006152:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006154:	2200      	movs	r2, #0
 8006156:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006158:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 800615a:	2200      	movs	r2, #0
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800615e:	4811      	ldr	r0, [pc, #68]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006160:	f001 f954 	bl	800740c <HAL_DMA_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 800616a:	f7ff f85f 	bl	800522c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
 8006174:	4a0b      	ldr	r2, [pc, #44]	; (80061a4 <HAL_ADC_MspInit+0x224>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6393      	str	r3, [r2, #56]	; 0x38
}
 800617a:	bf00      	nop
 800617c:	3738      	adds	r7, #56	; 0x38
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40012000 	.word	0x40012000
 8006188:	40023800 	.word	0x40023800
 800618c:	40020800 	.word	0x40020800
 8006190:	2001ef58 	.word	0x2001ef58
 8006194:	40026410 	.word	0x40026410
 8006198:	40012100 	.word	0x40012100
 800619c:	40020000 	.word	0x40020000
 80061a0:	40020400 	.word	0x40020400
 80061a4:	2001f040 	.word	0x2001f040
 80061a8:	40026440 	.word	0x40026440

080061ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b4:	f107 0314 	add.w	r3, r7, #20
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <HAL_I2C_MspInit+0x84>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d12c      	bne.n	8006228 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	4b18      	ldr	r3, [pc, #96]	; (8006234 <HAL_I2C_MspInit+0x88>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	4a17      	ldr	r2, [pc, #92]	; (8006234 <HAL_I2C_MspInit+0x88>)
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	6313      	str	r3, [r2, #48]	; 0x30
 80061de:	4b15      	ldr	r3, [pc, #84]	; (8006234 <HAL_I2C_MspInit+0x88>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80061ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80061f0:	2312      	movs	r3, #18
 80061f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061f4:	2301      	movs	r3, #1
 80061f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f8:	2303      	movs	r3, #3
 80061fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80061fc:	2304      	movs	r3, #4
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4619      	mov	r1, r3
 8006206:	480c      	ldr	r0, [pc, #48]	; (8006238 <HAL_I2C_MspInit+0x8c>)
 8006208:	f001 fe58 	bl	8007ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <HAL_I2C_MspInit+0x88>)
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	4a07      	ldr	r2, [pc, #28]	; (8006234 <HAL_I2C_MspInit+0x88>)
 8006216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800621a:	6413      	str	r3, [r2, #64]	; 0x40
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_I2C_MspInit+0x88>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006228:	bf00      	nop
 800622a:	3728      	adds	r7, #40	; 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40005400 	.word	0x40005400
 8006234:	40023800 	.word	0x40023800
 8006238:	40020400 	.word	0x40020400

0800623c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	; 0x28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	609a      	str	r2, [r3, #8]
 8006250:	60da      	str	r2, [r3, #12]
 8006252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <HAL_SPI_MspInit+0x84>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d12c      	bne.n	80062b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <HAL_SPI_MspInit+0x88>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <HAL_SPI_MspInit+0x88>)
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	6413      	str	r3, [r2, #64]	; 0x40
 800626e:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <HAL_SPI_MspInit+0x88>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <HAL_SPI_MspInit+0x88>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <HAL_SPI_MspInit+0x88>)
 8006284:	f043 0304 	orr.w	r3, r3, #4
 8006288:	6313      	str	r3, [r2, #48]	; 0x30
 800628a:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <HAL_SPI_MspInit+0x88>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006296:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800629a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629c:	2302      	movs	r3, #2
 800629e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a4:	2303      	movs	r3, #3
 80062a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80062a8:	2306      	movs	r3, #6
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	4619      	mov	r1, r3
 80062b2:	4805      	ldr	r0, [pc, #20]	; (80062c8 <HAL_SPI_MspInit+0x8c>)
 80062b4:	f001 fe02 	bl	8007ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80062b8:	bf00      	nop
 80062ba:	3728      	adds	r7, #40	; 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40003c00 	.word	0x40003c00
 80062c4:	40023800 	.word	0x40023800
 80062c8:	40020800 	.word	0x40020800

080062cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a15      	ldr	r2, [pc, #84]	; (8006330 <HAL_TIM_PWM_MspInit+0x64>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10e      	bne.n	80062fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_TIM_PWM_MspInit+0x68>)
 80062e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <HAL_TIM_PWM_MspInit+0x68>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6453      	str	r3, [r2, #68]	; 0x44
 80062ee:	4b11      	ldr	r3, [pc, #68]	; (8006334 <HAL_TIM_PWM_MspInit+0x68>)
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80062fa:	e012      	b.n	8006322 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0d      	ldr	r2, [pc, #52]	; (8006338 <HAL_TIM_PWM_MspInit+0x6c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10d      	bne.n	8006322 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_TIM_PWM_MspInit+0x68>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <HAL_TIM_PWM_MspInit+0x68>)
 8006310:	f043 0302 	orr.w	r3, r3, #2
 8006314:	6453      	str	r3, [r2, #68]	; 0x44
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <HAL_TIM_PWM_MspInit+0x68>)
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40023800 	.word	0x40023800
 8006338:	40010400 	.word	0x40010400

0800633c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08c      	sub	sp, #48	; 0x30
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006344:	f107 031c 	add.w	r3, r7, #28
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a32      	ldr	r2, [pc, #200]	; (8006424 <HAL_TIM_Encoder_MspInit+0xe8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d12c      	bne.n	80063b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	4b31      	ldr	r3, [pc, #196]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4a30      	ldr	r2, [pc, #192]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 8006368:	f043 0302 	orr.w	r3, r3, #2
 800636c:	6413      	str	r3, [r2, #64]	; 0x40
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4a29      	ldr	r2, [pc, #164]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 8006384:	f043 0302 	orr.w	r3, r3, #2
 8006388:	6313      	str	r3, [r2, #48]	; 0x30
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006396:	2330      	movs	r3, #48	; 0x30
 8006398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639a:	2302      	movs	r3, #2
 800639c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063a2:	2300      	movs	r3, #0
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063a6:	2302      	movs	r3, #2
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063aa:	f107 031c 	add.w	r3, r7, #28
 80063ae:	4619      	mov	r1, r3
 80063b0:	481e      	ldr	r0, [pc, #120]	; (800642c <HAL_TIM_Encoder_MspInit+0xf0>)
 80063b2:	f001 fd83 	bl	8007ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80063b6:	e030      	b.n	800641a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <HAL_TIM_Encoder_MspInit+0xf4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d12b      	bne.n	800641a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	4b18      	ldr	r3, [pc, #96]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 80063cc:	f043 0304 	orr.w	r3, r3, #4
 80063d0:	6413      	str	r3, [r2, #64]	; 0x40
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	613b      	str	r3, [r7, #16]
 80063dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	4a10      	ldr	r2, [pc, #64]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	6313      	str	r3, [r2, #48]	; 0x30
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <HAL_TIM_Encoder_MspInit+0xec>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063fa:	23c0      	movs	r3, #192	; 0xc0
 80063fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fe:	2302      	movs	r3, #2
 8006400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006402:	2300      	movs	r3, #0
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006406:	2300      	movs	r3, #0
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800640a:	2302      	movs	r3, #2
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640e:	f107 031c 	add.w	r3, r7, #28
 8006412:	4619      	mov	r1, r3
 8006414:	4805      	ldr	r0, [pc, #20]	; (800642c <HAL_TIM_Encoder_MspInit+0xf0>)
 8006416:	f001 fd51 	bl	8007ebc <HAL_GPIO_Init>
}
 800641a:	bf00      	nop
 800641c:	3730      	adds	r7, #48	; 0x30
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40000400 	.word	0x40000400
 8006428:	40023800 	.word	0x40023800
 800642c:	40020400 	.word	0x40020400
 8006430:	40000800 	.word	0x40000800

08006434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <HAL_TIM_Base_MspInit+0x80>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d116      	bne.n	8006474 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <HAL_TIM_Base_MspInit+0x84>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	4a1a      	ldr	r2, [pc, #104]	; (80064b8 <HAL_TIM_Base_MspInit+0x84>)
 8006450:	f043 0310 	orr.w	r3, r3, #16
 8006454:	6413      	str	r3, [r2, #64]	; 0x40
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <HAL_TIM_Base_MspInit+0x84>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006462:	2200      	movs	r2, #0
 8006464:	2101      	movs	r1, #1
 8006466:	2036      	movs	r0, #54	; 0x36
 8006468:	f000 ff99 	bl	800739e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800646c:	2036      	movs	r0, #54	; 0x36
 800646e:	f000 ffb2 	bl	80073d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006472:	e01a      	b.n	80064aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a10      	ldr	r2, [pc, #64]	; (80064bc <HAL_TIM_Base_MspInit+0x88>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d115      	bne.n	80064aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <HAL_TIM_Base_MspInit+0x84>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <HAL_TIM_Base_MspInit+0x84>)
 8006488:	f043 0320 	orr.w	r3, r3, #32
 800648c:	6413      	str	r3, [r2, #64]	; 0x40
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <HAL_TIM_Base_MspInit+0x84>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800649a:	2200      	movs	r2, #0
 800649c:	2100      	movs	r1, #0
 800649e:	2037      	movs	r0, #55	; 0x37
 80064a0:	f000 ff7d 	bl	800739e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80064a4:	2037      	movs	r0, #55	; 0x37
 80064a6:	f000 ff96 	bl	80073d6 <HAL_NVIC_EnableIRQ>
}
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40001000 	.word	0x40001000
 80064b8:	40023800 	.word	0x40023800
 80064bc:	40001400 	.word	0x40001400

080064c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a25      	ldr	r2, [pc, #148]	; (8006574 <HAL_TIM_MspPostInit+0xb4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d11f      	bne.n	8006522 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_TIM_MspPostInit+0xb8>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	4a23      	ldr	r2, [pc, #140]	; (8006578 <HAL_TIM_MspPostInit+0xb8>)
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	6313      	str	r3, [r2, #48]	; 0x30
 80064f2:	4b21      	ldr	r3, [pc, #132]	; (8006578 <HAL_TIM_MspPostInit+0xb8>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80064fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006504:	2302      	movs	r3, #2
 8006506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800650c:	2300      	movs	r3, #0
 800650e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006510:	2301      	movs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	4619      	mov	r1, r3
 800651a:	4818      	ldr	r0, [pc, #96]	; (800657c <HAL_TIM_MspPostInit+0xbc>)
 800651c:	f001 fcce 	bl	8007ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006520:	e023      	b.n	800656a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a16      	ldr	r2, [pc, #88]	; (8006580 <HAL_TIM_MspPostInit+0xc0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d11e      	bne.n	800656a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <HAL_TIM_MspPostInit+0xb8>)
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	4a10      	ldr	r2, [pc, #64]	; (8006578 <HAL_TIM_MspPostInit+0xb8>)
 8006536:	f043 0304 	orr.w	r3, r3, #4
 800653a:	6313      	str	r3, [r2, #48]	; 0x30
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <HAL_TIM_MspPostInit+0xb8>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8006548:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800654c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654e:	2302      	movs	r3, #2
 8006550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006556:	2300      	movs	r3, #0
 8006558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800655a:	2303      	movs	r3, #3
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	4619      	mov	r1, r3
 8006564:	4807      	ldr	r0, [pc, #28]	; (8006584 <HAL_TIM_MspPostInit+0xc4>)
 8006566:	f001 fca9 	bl	8007ebc <HAL_GPIO_Init>
}
 800656a:	bf00      	nop
 800656c:	3728      	adds	r7, #40	; 0x28
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40023800 	.word	0x40023800
 800657c:	40020000 	.word	0x40020000
 8006580:	40010400 	.word	0x40010400
 8006584:	40020800 	.word	0x40020800

08006588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	; 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006590:	f107 0314 	add.w	r3, r7, #20
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	60da      	str	r2, [r3, #12]
 800659e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <HAL_UART_MspInit+0x84>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d12c      	bne.n	8006604 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <HAL_UART_MspInit+0x88>)
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	4a17      	ldr	r2, [pc, #92]	; (8006610 <HAL_UART_MspInit+0x88>)
 80065b4:	f043 0310 	orr.w	r3, r3, #16
 80065b8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_UART_MspInit+0x88>)
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_UART_MspInit+0x88>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <HAL_UART_MspInit+0x88>)
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	6313      	str	r3, [r2, #48]	; 0x30
 80065d6:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <HAL_UART_MspInit+0x88>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80065e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80065e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e8:	2302      	movs	r3, #2
 80065ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065f0:	2303      	movs	r3, #3
 80065f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80065f4:	2307      	movs	r3, #7
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f8:	f107 0314 	add.w	r3, r7, #20
 80065fc:	4619      	mov	r1, r3
 80065fe:	4805      	ldr	r0, [pc, #20]	; (8006614 <HAL_UART_MspInit+0x8c>)
 8006600:	f001 fc5c 	bl	8007ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006604:	bf00      	nop
 8006606:	3728      	adds	r7, #40	; 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40011000 	.word	0x40011000
 8006610:	40023800 	.word	0x40023800
 8006614:	40020000 	.word	0x40020000

08006618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800661c:	e7fe      	b.n	800661c <NMI_Handler+0x4>

0800661e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800661e:	b480      	push	{r7}
 8006620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006622:	e7fe      	b.n	8006622 <HardFault_Handler+0x4>

08006624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006628:	e7fe      	b.n	8006628 <MemManage_Handler+0x4>

0800662a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800662e:	e7fe      	b.n	800662e <BusFault_Handler+0x4>

08006630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006634:	e7fe      	b.n	8006634 <UsageFault_Handler+0x4>

08006636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006636:	b480      	push	{r7}
 8006638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800663a:	bf00      	nop
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006648:	bf00      	nop
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006664:	f000 f98a 	bl	800697c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006668:	bf00      	nop
 800666a:	bd80      	pop	{r7, pc}

0800666c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <TIM6_DAC_IRQHandler+0x10>)
 8006672:	f003 fa38 	bl	8009ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	2001efb8 	.word	0x2001efb8

08006680 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006684:	4802      	ldr	r0, [pc, #8]	; (8006690 <TIM7_IRQHandler+0x10>)
 8006686:	f003 fa2e 	bl	8009ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	2001f0a0 	.word	0x2001f0a0

08006694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006698:	4802      	ldr	r0, [pc, #8]	; (80066a4 <DMA2_Stream0_IRQHandler+0x10>)
 800669a:	f000 ffbd 	bl	8007618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2001ef58 	.word	0x2001ef58

080066a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80066ac:	4802      	ldr	r0, [pc, #8]	; (80066b8 <DMA2_Stream2_IRQHandler+0x10>)
 80066ae:	f000 ffb3 	bl	8007618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2001f040 	.word	0x2001f040

080066bc <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	2b52      	cmp	r3, #82	; 0x52
 80066ce:	d10a      	bne.n	80066e6 <getSwitchStatus+0x2a>
 80066d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066d4:	480d      	ldr	r0, [pc, #52]	; (800670c <getSwitchStatus+0x50>)
 80066d6:	f001 fd8b 	bl	80081f0 <HAL_GPIO_ReadPin>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <getSwitchStatus+0x2a>
		ret = 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	81fb      	strh	r3, [r7, #14]
 80066e4:	e00c      	b.n	8006700 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b4c      	cmp	r3, #76	; 0x4c
 80066ea:	d109      	bne.n	8006700 <getSwitchStatus+0x44>
 80066ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066f0:	4806      	ldr	r0, [pc, #24]	; (800670c <getSwitchStatus+0x50>)
 80066f2:	f001 fd7d 	bl	80081f0 <HAL_GPIO_ReadPin>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <getSwitchStatus+0x44>
		ret = 1;
 80066fc:	2301      	movs	r3, #1
 80066fe:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8006700:	89fb      	ldrh	r3, [r7, #14]

}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40020000 	.word	0x40020000

08006710 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	e00a      	b.n	8006738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006722:	f3af 8000 	nop.w
 8006726:	4601      	mov	r1, r0
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	60ba      	str	r2, [r7, #8]
 800672e:	b2ca      	uxtb	r2, r1
 8006730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	3301      	adds	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	dbf0      	blt.n	8006722 <_read+0x12>
	}

return len;
 8006740:	687b      	ldr	r3, [r7, #4]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e009      	b.n	8006770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	60ba      	str	r2, [r7, #8]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fd fbe9 	bl	8003f3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	3301      	adds	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	dbf1      	blt.n	800675c <_write+0x12>
	}
	return len;
 8006778:	687b      	ldr	r3, [r7, #4]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <_close>:

int _close(int file)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
	return -1;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067aa:	605a      	str	r2, [r3, #4]
	return 0;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <_isatty>:

int _isatty(int file)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
	return 1;
 80067c2:	2301      	movs	r3, #1
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
	return 0;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <_sbrk+0x5c>)
 80067f6:	4b15      	ldr	r3, [pc, #84]	; (800684c <_sbrk+0x60>)
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006800:	4b13      	ldr	r3, [pc, #76]	; (8006850 <_sbrk+0x64>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <_sbrk+0x64>)
 800680a:	4a12      	ldr	r2, [pc, #72]	; (8006854 <_sbrk+0x68>)
 800680c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <_sbrk+0x64>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4413      	add	r3, r2
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	429a      	cmp	r2, r3
 800681a:	d207      	bcs.n	800682c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800681c:	f005 fbb6 	bl	800bf8c <__errno>
 8006820:	4602      	mov	r2, r0
 8006822:	230c      	movs	r3, #12
 8006824:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006826:	f04f 33ff 	mov.w	r3, #4294967295
 800682a:	e009      	b.n	8006840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800682c:	4b08      	ldr	r3, [pc, #32]	; (8006850 <_sbrk+0x64>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006832:	4b07      	ldr	r3, [pc, #28]	; (8006850 <_sbrk+0x64>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	4a05      	ldr	r2, [pc, #20]	; (8006850 <_sbrk+0x64>)
 800683c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20020000 	.word	0x20020000
 800684c:	00000400 	.word	0x00000400
 8006850:	2001ebc8 	.word	0x2001ebc8
 8006854:	2001f118 	.word	0x2001f118

08006858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <SystemInit+0x28>)
 800685e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006862:	4a07      	ldr	r2, [pc, #28]	; (8006880 <SystemInit+0x28>)
 8006864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <SystemInit+0x28>)
 800686e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006872:	609a      	str	r2, [r3, #8]
#endif
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	e000ed00 	.word	0xe000ed00

08006884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006888:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800688a:	e003      	b.n	8006894 <LoopCopyDataInit>

0800688c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800688e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006890:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006892:	3104      	adds	r1, #4

08006894 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006894:	480b      	ldr	r0, [pc, #44]	; (80068c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006898:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800689a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800689c:	d3f6      	bcc.n	800688c <CopyDataInit>
  ldr  r2, =_sbss
 800689e:	4a0b      	ldr	r2, [pc, #44]	; (80068cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80068a0:	e002      	b.n	80068a8 <LoopFillZerobss>

080068a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80068a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80068a4:	f842 3b04 	str.w	r3, [r2], #4

080068a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80068a8:	4b09      	ldr	r3, [pc, #36]	; (80068d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80068aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80068ac:	d3f9      	bcc.n	80068a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068ae:	f7ff ffd3 	bl	8006858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068b2:	f005 fb71 	bl	800bf98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068b6:	f7fd fbbb 	bl	8004030 <main>
  bx  lr    
 80068ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80068c0:	08010a30 	.word	0x08010a30
  ldr  r0, =_sdata
 80068c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80068c8:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80068cc:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80068d0:	2001f118 	.word	0x2001f118

080068d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068d4:	e7fe      	b.n	80068d4 <ADC_IRQHandler>
	...

080068d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068dc:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <HAL_Init+0x40>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0d      	ldr	r2, [pc, #52]	; (8006918 <HAL_Init+0x40>)
 80068e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_Init+0x40>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <HAL_Init+0x40>)
 80068ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068f4:	4b08      	ldr	r3, [pc, #32]	; (8006918 <HAL_Init+0x40>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a07      	ldr	r2, [pc, #28]	; (8006918 <HAL_Init+0x40>)
 80068fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006900:	2003      	movs	r0, #3
 8006902:	f000 fd41 	bl	8007388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006906:	2000      	movs	r0, #0
 8006908:	f000 f808 	bl	800691c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800690c:	f7ff fb10 	bl	8005f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40023c00 	.word	0x40023c00

0800691c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006924:	4b12      	ldr	r3, [pc, #72]	; (8006970 <HAL_InitTick+0x54>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <HAL_InitTick+0x58>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006932:	fbb3 f3f1 	udiv	r3, r3, r1
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fd59 	bl	80073f2 <HAL_SYSTICK_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e00e      	b.n	8006968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b0f      	cmp	r3, #15
 800694e:	d80a      	bhi.n	8006966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006950:	2200      	movs	r2, #0
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	f000 fd21 	bl	800739e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <HAL_InitTick+0x5c>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000034 	.word	0x20000034
 8006974:	2000003c 	.word	0x2000003c
 8006978:	20000038 	.word	0x20000038

0800697c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <HAL_IncTick+0x20>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_IncTick+0x24>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4413      	add	r3, r2
 800698c:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <HAL_IncTick+0x24>)
 800698e:	6013      	str	r3, [r2, #0]
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	2000003c 	.word	0x2000003c
 80069a0:	2001f0f0 	.word	0x2001f0f0

080069a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  return uwTick;
 80069a8:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <HAL_GetTick+0x14>)
 80069aa:	681b      	ldr	r3, [r3, #0]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	2001f0f0 	.word	0x2001f0f0

080069bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069c4:	f7ff ffee 	bl	80069a4 <HAL_GetTick>
 80069c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d005      	beq.n	80069e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <HAL_Delay+0x40>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069e2:	bf00      	nop
 80069e4:	f7ff ffde 	bl	80069a4 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d8f7      	bhi.n	80069e4 <HAL_Delay+0x28>
  {
  }
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	2000003c 	.word	0x2000003c

08006a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e033      	b.n	8006a7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff faae 	bl	8005f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d118      	bne.n	8006a70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a46:	f023 0302 	bic.w	r3, r3, #2
 8006a4a:	f043 0202 	orr.w	r2, r3, #2
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa4a 	bl	8006eec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f023 0303 	bic.w	r3, r3, #3
 8006a66:	f043 0201 	orr.w	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8006a6e:	e001      	b.n	8006a74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_ADC_Start_DMA+0x1e>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e0cc      	b.n	8006c40 <HAL_ADC_Start_DMA+0x1b8>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d018      	beq.n	8006aee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006acc:	4b5e      	ldr	r3, [pc, #376]	; (8006c48 <HAL_ADC_Start_DMA+0x1c0>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a5e      	ldr	r2, [pc, #376]	; (8006c4c <HAL_ADC_Start_DMA+0x1c4>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	0c9a      	lsrs	r2, r3, #18
 8006ad8:	4613      	mov	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4413      	add	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ae0:	e002      	b.n	8006ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f9      	bne.n	8006ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	f040 80a0 	bne.w	8006c3e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3c:	d106      	bne.n	8006b4c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	f023 0206 	bic.w	r2, r3, #6
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44
 8006b4a:	e002      	b.n	8006b52 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b5a:	4b3d      	ldr	r3, [pc, #244]	; (8006c50 <HAL_ADC_Start_DMA+0x1c8>)
 8006b5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	4a3c      	ldr	r2, [pc, #240]	; (8006c54 <HAL_ADC_Start_DMA+0x1cc>)
 8006b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	4a3b      	ldr	r2, [pc, #236]	; (8006c58 <HAL_ADC_Start_DMA+0x1d0>)
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	4a3a      	ldr	r2, [pc, #232]	; (8006c5c <HAL_ADC_Start_DMA+0x1d4>)
 8006b74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006b7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006b8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	334c      	adds	r3, #76	; 0x4c
 8006baa:	4619      	mov	r1, r3
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f000 fcda 	bl	8007568 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d12a      	bne.n	8006c16 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <HAL_ADC_Start_DMA+0x1d8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d015      	beq.n	8006bf6 <HAL_ADC_Start_DMA+0x16e>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a25      	ldr	r2, [pc, #148]	; (8006c64 <HAL_ADC_Start_DMA+0x1dc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d105      	bne.n	8006be0 <HAL_ADC_Start_DMA+0x158>
 8006bd4:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <HAL_ADC_Start_DMA+0x1c8>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <HAL_ADC_Start_DMA+0x1e0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d129      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x1b6>
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <HAL_ADC_Start_DMA+0x1c8>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d823      	bhi.n	8006c3e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11c      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	e013      	b.n	8006c3e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a11      	ldr	r2, [pc, #68]	; (8006c60 <HAL_ADC_Start_DMA+0x1d8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10e      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x1b6>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c3c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20000034 	.word	0x20000034
 8006c4c:	431bde83 	.word	0x431bde83
 8006c50:	40012300 	.word	0x40012300
 8006c54:	080070e5 	.word	0x080070e5
 8006c58:	0800719f 	.word	0x0800719f
 8006c5c:	080071bb 	.word	0x080071bb
 8006c60:	40012000 	.word	0x40012000
 8006c64:	40012100 	.word	0x40012100
 8006c68:	40012200 	.word	0x40012200

08006c6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e105      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x228>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d925      	bls.n	8006d20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68d9      	ldr	r1, [r3, #12]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3b1e      	subs	r3, #30
 8006cea:	2207      	movs	r2, #7
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43da      	mvns	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	400a      	ands	r2, r1
 8006cf8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68d9      	ldr	r1, [r3, #12]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	4403      	add	r3, r0
 8006d12:	3b1e      	subs	r3, #30
 8006d14:	409a      	lsls	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	60da      	str	r2, [r3, #12]
 8006d1e:	e022      	b.n	8006d66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6919      	ldr	r1, [r3, #16]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	2207      	movs	r2, #7
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43da      	mvns	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	400a      	ands	r2, r1
 8006d42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6919      	ldr	r1, [r3, #16]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	4618      	mov	r0, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4403      	add	r3, r0
 8006d5c:	409a      	lsls	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d824      	bhi.n	8006db8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3b05      	subs	r3, #5
 8006d80:	221f      	movs	r2, #31
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43da      	mvns	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	3b05      	subs	r3, #5
 8006daa:	fa00 f203 	lsl.w	r2, r0, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	635a      	str	r2, [r3, #52]	; 0x34
 8006db6:	e04c      	b.n	8006e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b0c      	cmp	r3, #12
 8006dbe:	d824      	bhi.n	8006e0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	3b23      	subs	r3, #35	; 0x23
 8006dd2:	221f      	movs	r2, #31
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	43da      	mvns	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	400a      	ands	r2, r1
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4618      	mov	r0, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	3b23      	subs	r3, #35	; 0x23
 8006dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
 8006e08:	e023      	b.n	8006e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	3b41      	subs	r3, #65	; 0x41
 8006e1c:	221f      	movs	r2, #31
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43da      	mvns	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	400a      	ands	r2, r1
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	4618      	mov	r0, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	3b41      	subs	r3, #65	; 0x41
 8006e46:	fa00 f203 	lsl.w	r2, r0, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e52:	4b22      	ldr	r3, [pc, #136]	; (8006edc <HAL_ADC_ConfigChannel+0x234>)
 8006e54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <HAL_ADC_ConfigChannel+0x238>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d109      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x1cc>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b12      	cmp	r3, #18
 8006e66:	d105      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <HAL_ADC_ConfigChannel+0x238>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d123      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x21e>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d003      	beq.n	8006e8e <HAL_ADC_ConfigChannel+0x1e6>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b11      	cmp	r3, #17
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d111      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <HAL_ADC_ConfigChannel+0x23c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a10      	ldr	r2, [pc, #64]	; (8006ee8 <HAL_ADC_ConfigChannel+0x240>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	0c9a      	lsrs	r2, r3, #18
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006eb8:	e002      	b.n	8006ec0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f9      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40012300 	.word	0x40012300
 8006ee0:	40012000 	.word	0x40012000
 8006ee4:	20000034 	.word	0x20000034
 8006ee8:	431bde83 	.word	0x431bde83

08006eec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ef4:	4b79      	ldr	r3, [pc, #484]	; (80070dc <ADC_Init+0x1f0>)
 8006ef6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6859      	ldr	r1, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	021a      	lsls	r2, r3, #8
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6859      	ldr	r1, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6899      	ldr	r1, [r3, #8]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	4a58      	ldr	r2, [pc, #352]	; (80070e0 <ADC_Init+0x1f4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d022      	beq.n	8006fca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6899      	ldr	r1, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6899      	ldr	r1, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	e00f      	b.n	8006fea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fe8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0202 	bic.w	r2, r2, #2
 8006ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6899      	ldr	r1, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7e1b      	ldrb	r3, [r3, #24]
 8007004:	005a      	lsls	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01b      	beq.n	8007050 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007026:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007036:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6859      	ldr	r1, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	3b01      	subs	r3, #1
 8007044:	035a      	lsls	r2, r3, #13
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	e007      	b.n	8007060 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800705e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800706e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	3b01      	subs	r3, #1
 800707c:	051a      	lsls	r2, r3, #20
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6899      	ldr	r1, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070a2:	025a      	lsls	r2, r3, #9
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6899      	ldr	r1, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	029a      	lsls	r2, r3, #10
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	609a      	str	r2, [r3, #8]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	40012300 	.word	0x40012300
 80070e0:	0f000001 	.word	0x0f000001

080070e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d13c      	bne.n	8007178 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d12b      	bne.n	8007170 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800711c:	2b00      	cmp	r3, #0
 800711e:	d127      	bne.n	8007170 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800712a:	2b00      	cmp	r3, #0
 800712c:	d006      	beq.n	800713c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007138:	2b00      	cmp	r3, #0
 800713a:	d119      	bne.n	8007170 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0220 	bic.w	r2, r2, #32
 800714a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d105      	bne.n	8007170 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f043 0201 	orr.w	r2, r3, #1
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff fd7b 	bl	8006c6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007176:	e00e      	b.n	8007196 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fd85 	bl	8006c94 <HAL_ADC_ErrorCallback>
}
 800718a:	e004      	b.n	8007196 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7ff fd67 	bl	8006c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2240      	movs	r2, #64	; 0x40
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	f043 0204 	orr.w	r2, r3, #4
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fd5a 	bl	8006c94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <__NVIC_SetPriorityGrouping+0x44>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007204:	4013      	ands	r3, r2
 8007206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800721a:	4a04      	ldr	r2, [pc, #16]	; (800722c <__NVIC_SetPriorityGrouping+0x44>)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	60d3      	str	r3, [r2, #12]
}
 8007220:	bf00      	nop
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	e000ed00 	.word	0xe000ed00

08007230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <__NVIC_GetPriorityGrouping+0x18>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	f003 0307 	and.w	r3, r3, #7
}
 800723e:	4618      	mov	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	e000ed00 	.word	0xe000ed00

0800724c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725a:	2b00      	cmp	r3, #0
 800725c:	db0b      	blt.n	8007276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	f003 021f 	and.w	r2, r3, #31
 8007264:	4907      	ldr	r1, [pc, #28]	; (8007284 <__NVIC_EnableIRQ+0x38>)
 8007266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2001      	movs	r0, #1
 800726e:	fa00 f202 	lsl.w	r2, r0, r2
 8007272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	e000e100 	.word	0xe000e100

08007288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	6039      	str	r1, [r7, #0]
 8007292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007298:	2b00      	cmp	r3, #0
 800729a:	db0a      	blt.n	80072b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	490c      	ldr	r1, [pc, #48]	; (80072d4 <__NVIC_SetPriority+0x4c>)
 80072a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a6:	0112      	lsls	r2, r2, #4
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	440b      	add	r3, r1
 80072ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072b0:	e00a      	b.n	80072c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	4908      	ldr	r1, [pc, #32]	; (80072d8 <__NVIC_SetPriority+0x50>)
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	3b04      	subs	r3, #4
 80072c0:	0112      	lsls	r2, r2, #4
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	440b      	add	r3, r1
 80072c6:	761a      	strb	r2, [r3, #24]
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	e000e100 	.word	0xe000e100
 80072d8:	e000ed00 	.word	0xe000ed00

080072dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072dc:	b480      	push	{r7}
 80072de:	b089      	sub	sp, #36	; 0x24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f1c3 0307 	rsb	r3, r3, #7
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	bf28      	it	cs
 80072fa:	2304      	movcs	r3, #4
 80072fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	3304      	adds	r3, #4
 8007302:	2b06      	cmp	r3, #6
 8007304:	d902      	bls.n	800730c <NVIC_EncodePriority+0x30>
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	3b03      	subs	r3, #3
 800730a:	e000      	b.n	800730e <NVIC_EncodePriority+0x32>
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007310:	f04f 32ff 	mov.w	r2, #4294967295
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	43da      	mvns	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	401a      	ands	r2, r3
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007324:	f04f 31ff 	mov.w	r1, #4294967295
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	fa01 f303 	lsl.w	r3, r1, r3
 800732e:	43d9      	mvns	r1, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007334:	4313      	orrs	r3, r2
         );
}
 8007336:	4618      	mov	r0, r3
 8007338:	3724      	adds	r7, #36	; 0x24
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3b01      	subs	r3, #1
 8007350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007354:	d301      	bcc.n	800735a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007356:	2301      	movs	r3, #1
 8007358:	e00f      	b.n	800737a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800735a:	4a0a      	ldr	r2, [pc, #40]	; (8007384 <SysTick_Config+0x40>)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3b01      	subs	r3, #1
 8007360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007362:	210f      	movs	r1, #15
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	f7ff ff8e 	bl	8007288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <SysTick_Config+0x40>)
 800736e:	2200      	movs	r2, #0
 8007370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <SysTick_Config+0x40>)
 8007374:	2207      	movs	r2, #7
 8007376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	e000e010 	.word	0xe000e010

08007388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff ff29 	bl	80071e8 <__NVIC_SetPriorityGrouping>
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	4603      	mov	r3, r0
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073b0:	f7ff ff3e 	bl	8007230 <__NVIC_GetPriorityGrouping>
 80073b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	6978      	ldr	r0, [r7, #20]
 80073bc:	f7ff ff8e 	bl	80072dc <NVIC_EncodePriority>
 80073c0:	4602      	mov	r2, r0
 80073c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff5d 	bl	8007288 <__NVIC_SetPriority>
}
 80073ce:	bf00      	nop
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	4603      	mov	r3, r0
 80073de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ff31 	bl	800724c <__NVIC_EnableIRQ>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ffa2 	bl	8007344 <SysTick_Config>
 8007400:	4603      	mov	r3, r0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007418:	f7ff fac4 	bl	80069a4 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e099      	b.n	800755c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007448:	e00f      	b.n	800746a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800744a:	f7ff faab 	bl	80069a4 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b05      	cmp	r3, #5
 8007456:	d908      	bls.n	800746a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2203      	movs	r2, #3
 8007462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e078      	b.n	800755c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e8      	bne.n	800744a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4b38      	ldr	r3, [pc, #224]	; (8007564 <HAL_DMA_Init+0x158>)
 8007484:	4013      	ands	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d107      	bne.n	80074d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	4313      	orrs	r3, r2
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0307 	bic.w	r3, r3, #7
 80074ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d117      	bne.n	800752e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00e      	beq.n	800752e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fa6f 	bl	80079f4 <DMA_CheckFifoParam>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d008      	beq.n	800752e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2240      	movs	r2, #64	; 0x40
 8007520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800752a:	2301      	movs	r3, #1
 800752c:	e016      	b.n	800755c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa26 	bl	8007988 <DMA_CalcBaseAndBitshift>
 800753c:	4603      	mov	r3, r0
 800753e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007544:	223f      	movs	r2, #63	; 0x3f
 8007546:	409a      	lsls	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	f010803f 	.word	0xf010803f

08007568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <HAL_DMA_Start_IT+0x26>
 800758a:	2302      	movs	r3, #2
 800758c:	e040      	b.n	8007610 <HAL_DMA_Start_IT+0xa8>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d12f      	bne.n	8007602 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f9b8 	bl	800792c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c0:	223f      	movs	r2, #63	; 0x3f
 80075c2:	409a      	lsls	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0216 	orr.w	r2, r2, #22
 80075d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0208 	orr.w	r2, r2, #8
 80075ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e005      	b.n	800760e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800760a:	2302      	movs	r3, #2
 800760c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007624:	4b92      	ldr	r3, [pc, #584]	; (8007870 <HAL_DMA_IRQHandler+0x258>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a92      	ldr	r2, [pc, #584]	; (8007874 <HAL_DMA_IRQHandler+0x25c>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	0a9b      	lsrs	r3, r3, #10
 8007630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007642:	2208      	movs	r2, #8
 8007644:	409a      	lsls	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01a      	beq.n	8007684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d013      	beq.n	8007684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0204 	bic.w	r2, r2, #4
 800766a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007670:	2208      	movs	r2, #8
 8007672:	409a      	lsls	r2, r3
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d012      	beq.n	80076ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a6:	2201      	movs	r2, #1
 80076a8:	409a      	lsls	r2, r3
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f043 0202 	orr.w	r2, r3, #2
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076be:	2204      	movs	r2, #4
 80076c0:	409a      	lsls	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d012      	beq.n	80076f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076dc:	2204      	movs	r2, #4
 80076de:	409a      	lsls	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	f043 0204 	orr.w	r2, r3, #4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f4:	2210      	movs	r2, #16
 80076f6:	409a      	lsls	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d043      	beq.n	8007788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d03c      	beq.n	8007788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007712:	2210      	movs	r2, #16
 8007714:	409a      	lsls	r2, r3
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d018      	beq.n	800775a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d108      	bne.n	8007748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d024      	beq.n	8007788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	e01f      	b.n	8007788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01b      	beq.n	8007788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
 8007758:	e016      	b.n	8007788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d107      	bne.n	8007778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0208 	bic.w	r2, r2, #8
 8007776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778c:	2220      	movs	r2, #32
 800778e:	409a      	lsls	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 808e 	beq.w	80078b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8086 	beq.w	80078b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ae:	2220      	movs	r2, #32
 80077b0:	409a      	lsls	r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b05      	cmp	r3, #5
 80077c0:	d136      	bne.n	8007830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0216 	bic.w	r2, r2, #22
 80077d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695a      	ldr	r2, [r3, #20]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <HAL_DMA_IRQHandler+0x1da>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0208 	bic.w	r2, r2, #8
 8007800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	223f      	movs	r2, #63	; 0x3f
 8007808:	409a      	lsls	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	2b00      	cmp	r3, #0
 8007824:	d07d      	beq.n	8007922 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
        }
        return;
 800782e:	e078      	b.n	8007922 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01c      	beq.n	8007878 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d108      	bne.n	800785e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	2b00      	cmp	r3, #0
 8007852:	d030      	beq.n	80078b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
 800785c:	e02b      	b.n	80078b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d027      	beq.n	80078b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
 800786e:	e022      	b.n	80078b6 <HAL_DMA_IRQHandler+0x29e>
 8007870:	20000034 	.word	0x20000034
 8007874:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10f      	bne.n	80078a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0210 	bic.w	r2, r2, #16
 8007894:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d032      	beq.n	8007924 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d022      	beq.n	8007910 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2205      	movs	r2, #5
 80078ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60bb      	str	r3, [r7, #8]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d307      	bcc.n	80078fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f2      	bne.n	80078e2 <HAL_DMA_IRQHandler+0x2ca>
 80078fc:	e000      	b.n	8007900 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80078fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
 8007920:	e000      	b.n	8007924 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007922:	bf00      	nop
    }
  }
}
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop

0800792c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007948:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d108      	bne.n	800796c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800796a:	e007      	b.n	800797c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]
}
 800797c:	bf00      	nop
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	3b10      	subs	r3, #16
 8007998:	4a14      	ldr	r2, [pc, #80]	; (80079ec <DMA_CalcBaseAndBitshift+0x64>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079a2:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <DMA_CalcBaseAndBitshift+0x68>)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d909      	bls.n	80079ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	1d1a      	adds	r2, r3, #4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	659a      	str	r2, [r3, #88]	; 0x58
 80079c8:	e007      	b.n	80079da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	aaaaaaab 	.word	0xaaaaaaab
 80079f0:	0801051c 	.word	0x0801051c

080079f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d11f      	bne.n	8007a4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d855      	bhi.n	8007ac0 <DMA_CheckFifoParam+0xcc>
 8007a14:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <DMA_CheckFifoParam+0x28>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a3f 	.word	0x08007a3f
 8007a24:	08007a2d 	.word	0x08007a2d
 8007a28:	08007ac1 	.word	0x08007ac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d045      	beq.n	8007ac4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a3c:	e042      	b.n	8007ac4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a46:	d13f      	bne.n	8007ac8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a4c:	e03c      	b.n	8007ac8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a56:	d121      	bne.n	8007a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d836      	bhi.n	8007acc <DMA_CheckFifoParam+0xd8>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <DMA_CheckFifoParam+0x70>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a7b 	.word	0x08007a7b
 8007a6c:	08007a75 	.word	0x08007a75
 8007a70:	08007a8d 	.word	0x08007a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	e02f      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d024      	beq.n	8007ad0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a8a:	e021      	b.n	8007ad0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a94:	d11e      	bne.n	8007ad4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a9a:	e01b      	b.n	8007ad4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d902      	bls.n	8007aa8 <DMA_CheckFifoParam+0xb4>
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d003      	beq.n	8007aae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007aa6:	e018      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e015      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00e      	beq.n	8007ad8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
      break;
 8007abe:	e00b      	b.n	8007ad8 <DMA_CheckFifoParam+0xe4>
      break;
 8007ac0:	bf00      	nop
 8007ac2:	e00a      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      break;
 8007ac4:	bf00      	nop
 8007ac6:	e008      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e006      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      break;
 8007acc:	bf00      	nop
 8007ace:	e004      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e002      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      break;   
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <DMA_CheckFifoParam+0xe6>
      break;
 8007ad8:	bf00      	nop
    }
  } 
  
  return status; 
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <HAL_FLASH_Unlock+0x38>)
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da0b      	bge.n	8007b12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <HAL_FLASH_Unlock+0x38>)
 8007afc:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <HAL_FLASH_Unlock+0x3c>)
 8007afe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <HAL_FLASH_Unlock+0x38>)
 8007b02:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <HAL_FLASH_Unlock+0x40>)
 8007b04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b06:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <HAL_FLASH_Unlock+0x38>)
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da01      	bge.n	8007b12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007b12:	79fb      	ldrb	r3, [r7, #7]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	40023c00 	.word	0x40023c00
 8007b24:	45670123 	.word	0x45670123
 8007b28:	cdef89ab 	.word	0xcdef89ab

08007b2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <HAL_FLASH_Lock+0x1c>)
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <HAL_FLASH_Lock+0x1c>)
 8007b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b3a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40023c00 	.word	0x40023c00

08007b4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b58:	4b1a      	ldr	r3, [pc, #104]	; (8007bc4 <FLASH_WaitForLastOperation+0x78>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007b5e:	f7fe ff21 	bl	80069a4 <HAL_GetTick>
 8007b62:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007b64:	e010      	b.n	8007b88 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d00c      	beq.n	8007b88 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <FLASH_WaitForLastOperation+0x38>
 8007b74:	f7fe ff16 	bl	80069a4 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d201      	bcs.n	8007b88 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e019      	b.n	8007bbc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007b88:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <FLASH_WaitForLastOperation+0x7c>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e8      	bne.n	8007b66 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <FLASH_WaitForLastOperation+0x7c>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ba0:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <FLASH_WaitForLastOperation+0x7c>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <FLASH_WaitForLastOperation+0x7c>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007bb2:	f000 f80b 	bl	8007bcc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
  
}  
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	2001f0f4 	.word	0x2001f0f4
 8007bc8:	40023c00 	.word	0x40023c00

08007bcc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007bd0:	4b27      	ldr	r3, [pc, #156]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007bdc:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f043 0310 	orr.w	r3, r3, #16
 8007be4:	4a23      	ldr	r2, [pc, #140]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007be6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007be8:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007bea:	2210      	movs	r2, #16
 8007bec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007bee:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007bfa:	4b1e      	ldr	r3, [pc, #120]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f043 0308 	orr.w	r3, r3, #8
 8007c02:	4a1c      	ldr	r2, [pc, #112]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c04:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c08:	2220      	movs	r2, #32
 8007c0a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007c0c:	4b18      	ldr	r3, [pc, #96]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007c18:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f043 0304 	orr.w	r3, r3, #4
 8007c20:	4a14      	ldr	r2, [pc, #80]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c22:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007c24:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c26:	2240      	movs	r2, #64	; 0x40
 8007c28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007c2a:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007c36:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f043 0302 	orr.w	r3, r3, #2
 8007c3e:	4a0d      	ldr	r2, [pc, #52]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c40:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007c42:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c44:	2280      	movs	r2, #128	; 0x80
 8007c46:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007c54:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f043 0320 	orr.w	r3, r3, #32
 8007c5c:	4a05      	ldr	r2, [pc, #20]	; (8007c74 <FLASH_SetErrorCode+0xa8>)
 8007c5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007c60:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <FLASH_SetErrorCode+0xa4>)
 8007c62:	2202      	movs	r2, #2
 8007c64:	60da      	str	r2, [r3, #12]
  }
}
 8007c66:	bf00      	nop
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	40023c00 	.word	0x40023c00
 8007c74:	2001f0f4 	.word	0x2001f0f4

08007c78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007c8a:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <HAL_FLASHEx_Erase+0xd8>)
 8007c8c:	7e1b      	ldrb	r3, [r3, #24]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_FLASHEx_Erase+0x1e>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e058      	b.n	8007d48 <HAL_FLASHEx_Erase+0xd0>
 8007c96:	4b2e      	ldr	r3, [pc, #184]	; (8007d50 <HAL_FLASHEx_Erase+0xd8>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ca0:	f7ff ff54 	bl	8007b4c <FLASH_WaitForLastOperation>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d148      	bne.n	8007d40 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d115      	bne.n	8007cea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f000 f844 	bl	8007d58 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007cd4:	f7ff ff3a 	bl	8007b4c <FLASH_WaitForLastOperation>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	; (8007d54 <HAL_FLASHEx_Erase+0xdc>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4a1c      	ldr	r2, [pc, #112]	; (8007d54 <HAL_FLASHEx_Erase+0xdc>)
 8007ce2:	f023 0304 	bic.w	r3, r3, #4
 8007ce6:	6113      	str	r3, [r2, #16]
 8007ce8:	e028      	b.n	8007d3c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	e01c      	b.n	8007d2c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	68b8      	ldr	r0, [r7, #8]
 8007cfc:	f000 f850 	bl	8007da0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d04:	f7ff ff22 	bl	8007b4c <FLASH_WaitForLastOperation>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007d0c:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <HAL_FLASHEx_Erase+0xdc>)
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <HAL_FLASHEx_Erase+0xdc>)
 8007d12:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007d16:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	601a      	str	r2, [r3, #0]
          break;
 8007d24:	e00a      	b.n	8007d3c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60bb      	str	r3, [r7, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d3da      	bcc.n	8007cf2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007d3c:	f000 f878 	bl	8007e30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007d40:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <HAL_FLASHEx_Erase+0xd8>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	761a      	strb	r2, [r3, #24]

  return status;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	2001f0f4 	.word	0x2001f0f4
 8007d54:	40023c00 	.word	0x40023c00

08007d58 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d64:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <FLASH_MassErase+0x44>)
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	4a0c      	ldr	r2, [pc, #48]	; (8007d9c <FLASH_MassErase+0x44>)
 8007d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <FLASH_MassErase+0x44>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <FLASH_MassErase+0x44>)
 8007d76:	f043 0304 	orr.w	r3, r3, #4
 8007d7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007d7c:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <FLASH_MassErase+0x44>)
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	4313      	orrs	r3, r2
 8007d86:	4a05      	ldr	r2, [pc, #20]	; (8007d9c <FLASH_MassErase+0x44>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	6113      	str	r3, [r2, #16]
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40023c00 	.word	0x40023c00

08007da0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e010      	b.n	8007dde <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d103      	bne.n	8007dca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e009      	b.n	8007dde <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d103      	bne.n	8007dd8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	e002      	b.n	8007dde <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007dd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ddc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007dea:	4b10      	ldr	r3, [pc, #64]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	490f      	ldr	r1, [pc, #60]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007dfc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007e02:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007e04:	691a      	ldr	r2, [r3, #16]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	4a07      	ldr	r2, [pc, #28]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007e0e:	f043 0302 	orr.w	r3, r3, #2
 8007e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	4a04      	ldr	r2, [pc, #16]	; (8007e2c <FLASH_Erase_Sector+0x8c>)
 8007e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e1e:	6113      	str	r3, [r2, #16]
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	40023c00 	.word	0x40023c00

08007e30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007e34:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d017      	beq.n	8007e70 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e4a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e62:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e64:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a13      	ldr	r2, [pc, #76]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e6e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007e70:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d017      	beq.n	8007eac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0d      	ldr	r2, [pc, #52]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e86:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007e88:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e9e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <FLASH_FlushCaches+0x88>)
 8007ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007eaa:	6013      	str	r3, [r2, #0]
  }
}
 8007eac:	bf00      	nop
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40023c00 	.word	0x40023c00

08007ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	; 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	e16b      	b.n	80081b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ed8:	2201      	movs	r2, #1
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	f040 815a 	bne.w	80081aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d00b      	beq.n	8007f16 <HAL_GPIO_Init+0x5a>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d007      	beq.n	8007f16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f0a:	2b11      	cmp	r3, #17
 8007f0c:	d003      	beq.n	8007f16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b12      	cmp	r3, #18
 8007f14:	d130      	bne.n	8007f78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	2203      	movs	r2, #3
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	43db      	mvns	r3, r3
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	091b      	lsrs	r3, r3, #4
 8007f62:	f003 0201 	and.w	r2, r3, #1
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	2203      	movs	r2, #3
 8007f84:	fa02 f303 	lsl.w	r3, r2, r3
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d003      	beq.n	8007fb8 <HAL_GPIO_Init+0xfc>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b12      	cmp	r3, #18
 8007fb6:	d123      	bne.n	8008000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	08da      	lsrs	r2, r3, #3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3208      	adds	r2, #8
 8007fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	220f      	movs	r2, #15
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	08da      	lsrs	r2, r3, #3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3208      	adds	r2, #8
 8007ffa:	69b9      	ldr	r1, [r7, #24]
 8007ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	2203      	movs	r2, #3
 800800c:	fa02 f303 	lsl.w	r3, r2, r3
 8008010:	43db      	mvns	r3, r3
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	4013      	ands	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f003 0203 	and.w	r2, r3, #3
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4313      	orrs	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80b4 	beq.w	80081aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	4b5f      	ldr	r3, [pc, #380]	; (80081c4 <HAL_GPIO_Init+0x308>)
 8008048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804a:	4a5e      	ldr	r2, [pc, #376]	; (80081c4 <HAL_GPIO_Init+0x308>)
 800804c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008050:	6453      	str	r3, [r2, #68]	; 0x44
 8008052:	4b5c      	ldr	r3, [pc, #368]	; (80081c4 <HAL_GPIO_Init+0x308>)
 8008054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800805e:	4a5a      	ldr	r2, [pc, #360]	; (80081c8 <HAL_GPIO_Init+0x30c>)
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	089b      	lsrs	r3, r3, #2
 8008064:	3302      	adds	r3, #2
 8008066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	220f      	movs	r2, #15
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	43db      	mvns	r3, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	4013      	ands	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a51      	ldr	r2, [pc, #324]	; (80081cc <HAL_GPIO_Init+0x310>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d02b      	beq.n	80080e2 <HAL_GPIO_Init+0x226>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a50      	ldr	r2, [pc, #320]	; (80081d0 <HAL_GPIO_Init+0x314>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d025      	beq.n	80080de <HAL_GPIO_Init+0x222>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a4f      	ldr	r2, [pc, #316]	; (80081d4 <HAL_GPIO_Init+0x318>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01f      	beq.n	80080da <HAL_GPIO_Init+0x21e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a4e      	ldr	r2, [pc, #312]	; (80081d8 <HAL_GPIO_Init+0x31c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d019      	beq.n	80080d6 <HAL_GPIO_Init+0x21a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a4d      	ldr	r2, [pc, #308]	; (80081dc <HAL_GPIO_Init+0x320>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <HAL_GPIO_Init+0x216>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a4c      	ldr	r2, [pc, #304]	; (80081e0 <HAL_GPIO_Init+0x324>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00d      	beq.n	80080ce <HAL_GPIO_Init+0x212>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a4b      	ldr	r2, [pc, #300]	; (80081e4 <HAL_GPIO_Init+0x328>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d007      	beq.n	80080ca <HAL_GPIO_Init+0x20e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a4a      	ldr	r2, [pc, #296]	; (80081e8 <HAL_GPIO_Init+0x32c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d101      	bne.n	80080c6 <HAL_GPIO_Init+0x20a>
 80080c2:	2307      	movs	r3, #7
 80080c4:	e00e      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080c6:	2308      	movs	r3, #8
 80080c8:	e00c      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080ca:	2306      	movs	r3, #6
 80080cc:	e00a      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080ce:	2305      	movs	r3, #5
 80080d0:	e008      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080d2:	2304      	movs	r3, #4
 80080d4:	e006      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080d6:	2303      	movs	r3, #3
 80080d8:	e004      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080da:	2302      	movs	r3, #2
 80080dc:	e002      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <HAL_GPIO_Init+0x228>
 80080e2:	2300      	movs	r3, #0
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	f002 0203 	and.w	r2, r2, #3
 80080ea:	0092      	lsls	r2, r2, #2
 80080ec:	4093      	lsls	r3, r2
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080f4:	4934      	ldr	r1, [pc, #208]	; (80081c8 <HAL_GPIO_Init+0x30c>)
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	089b      	lsrs	r3, r3, #2
 80080fa:	3302      	adds	r3, #2
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008102:	4b3a      	ldr	r3, [pc, #232]	; (80081ec <HAL_GPIO_Init+0x330>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	43db      	mvns	r3, r3
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	4013      	ands	r3, r2
 8008110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008126:	4a31      	ldr	r2, [pc, #196]	; (80081ec <HAL_GPIO_Init+0x330>)
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800812c:	4b2f      	ldr	r3, [pc, #188]	; (80081ec <HAL_GPIO_Init+0x330>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	43db      	mvns	r3, r3
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4013      	ands	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008150:	4a26      	ldr	r2, [pc, #152]	; (80081ec <HAL_GPIO_Init+0x330>)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008156:	4b25      	ldr	r3, [pc, #148]	; (80081ec <HAL_GPIO_Init+0x330>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	43db      	mvns	r3, r3
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	4013      	ands	r3, r2
 8008164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	4313      	orrs	r3, r2
 8008178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800817a:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <HAL_GPIO_Init+0x330>)
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <HAL_GPIO_Init+0x330>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	43db      	mvns	r3, r3
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	4013      	ands	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081a4:	4a11      	ldr	r2, [pc, #68]	; (80081ec <HAL_GPIO_Init+0x330>)
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	3301      	adds	r3, #1
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	2b0f      	cmp	r3, #15
 80081b4:	f67f ae90 	bls.w	8007ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081b8:	bf00      	nop
 80081ba:	3724      	adds	r7, #36	; 0x24
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	40023800 	.word	0x40023800
 80081c8:	40013800 	.word	0x40013800
 80081cc:	40020000 	.word	0x40020000
 80081d0:	40020400 	.word	0x40020400
 80081d4:	40020800 	.word	0x40020800
 80081d8:	40020c00 	.word	0x40020c00
 80081dc:	40021000 	.word	0x40021000
 80081e0:	40021400 	.word	0x40021400
 80081e4:	40021800 	.word	0x40021800
 80081e8:	40021c00 	.word	0x40021c00
 80081ec:	40013c00 	.word	0x40013c00

080081f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	887b      	ldrh	r3, [r7, #2]
 8008202:	4013      	ands	r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	e001      	b.n	8008212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	807b      	strh	r3, [r7, #2]
 800822c:	4613      	mov	r3, r2
 800822e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008230:	787b      	ldrb	r3, [r7, #1]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008236:	887a      	ldrh	r2, [r7, #2]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800823c:	e003      	b.n	8008246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800823e:	887b      	ldrh	r3, [r7, #2]
 8008240:	041a      	lsls	r2, r3, #16
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	619a      	str	r2, [r3, #24]
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e11f      	b.n	80084a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fd ff96 	bl	80061ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	; 0x24
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80082b8:	f000 fd18 	bl	8008cec <HAL_RCC_GetPCLK1Freq>
 80082bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	4a7b      	ldr	r2, [pc, #492]	; (80084b0 <HAL_I2C_Init+0x25c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d807      	bhi.n	80082d8 <HAL_I2C_Init+0x84>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a7a      	ldr	r2, [pc, #488]	; (80084b4 <HAL_I2C_Init+0x260>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bf94      	ite	ls
 80082d0:	2301      	movls	r3, #1
 80082d2:	2300      	movhi	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e006      	b.n	80082e6 <HAL_I2C_Init+0x92>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a77      	ldr	r2, [pc, #476]	; (80084b8 <HAL_I2C_Init+0x264>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	bf94      	ite	ls
 80082e0:	2301      	movls	r3, #1
 80082e2:	2300      	movhi	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e0db      	b.n	80084a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a72      	ldr	r2, [pc, #456]	; (80084bc <HAL_I2C_Init+0x268>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	0c9b      	lsrs	r3, r3, #18
 80082f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	4a64      	ldr	r2, [pc, #400]	; (80084b0 <HAL_I2C_Init+0x25c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d802      	bhi.n	8008328 <HAL_I2C_Init+0xd4>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3301      	adds	r3, #1
 8008326:	e009      	b.n	800833c <HAL_I2C_Init+0xe8>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800832e:	fb02 f303 	mul.w	r3, r2, r3
 8008332:	4a63      	ldr	r2, [pc, #396]	; (80084c0 <HAL_I2C_Init+0x26c>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	099b      	lsrs	r3, r3, #6
 800833a:	3301      	adds	r3, #1
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	430b      	orrs	r3, r1
 8008342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800834e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	4956      	ldr	r1, [pc, #344]	; (80084b0 <HAL_I2C_Init+0x25c>)
 8008358:	428b      	cmp	r3, r1
 800835a:	d80d      	bhi.n	8008378 <HAL_I2C_Init+0x124>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	1e59      	subs	r1, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	fbb1 f3f3 	udiv	r3, r1, r3
 800836a:	3301      	adds	r3, #1
 800836c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008370:	2b04      	cmp	r3, #4
 8008372:	bf38      	it	cc
 8008374:	2304      	movcc	r3, #4
 8008376:	e04f      	b.n	8008418 <HAL_I2C_Init+0x1c4>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d111      	bne.n	80083a4 <HAL_I2C_Init+0x150>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	1e58      	subs	r0, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6859      	ldr	r1, [r3, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	440b      	add	r3, r1
 800838e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008392:	3301      	adds	r3, #1
 8008394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008398:	2b00      	cmp	r3, #0
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	e012      	b.n	80083ca <HAL_I2C_Init+0x176>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1e58      	subs	r0, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6859      	ldr	r1, [r3, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	0099      	lsls	r1, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ba:	3301      	adds	r3, #1
 80083bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <HAL_I2C_Init+0x17e>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e022      	b.n	8008418 <HAL_I2C_Init+0x1c4>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10e      	bne.n	80083f8 <HAL_I2C_Init+0x1a4>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	1e58      	subs	r0, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6859      	ldr	r1, [r3, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	440b      	add	r3, r1
 80083e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ec:	3301      	adds	r3, #1
 80083ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f6:	e00f      	b.n	8008418 <HAL_I2C_Init+0x1c4>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	1e58      	subs	r0, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6859      	ldr	r1, [r3, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	440b      	add	r3, r1
 8008406:	0099      	lsls	r1, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	fbb0 f3f3 	udiv	r3, r0, r3
 800840e:	3301      	adds	r3, #1
 8008410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	6809      	ldr	r1, [r1, #0]
 800841c:	4313      	orrs	r3, r2
 800841e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69da      	ldr	r2, [r3, #28]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6911      	ldr	r1, [r2, #16]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	68d2      	ldr	r2, [r2, #12]
 8008452:	4311      	orrs	r1, r2
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6812      	ldr	r2, [r2, #0]
 8008458:	430b      	orrs	r3, r1
 800845a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695a      	ldr	r2, [r3, #20]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	000186a0 	.word	0x000186a0
 80084b4:	001e847f 	.word	0x001e847f
 80084b8:	003d08ff 	.word	0x003d08ff
 80084bc:	431bde83 	.word	0x431bde83
 80084c0:	10624dd3 	.word	0x10624dd3

080084c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e25b      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d075      	beq.n	80085ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084e2:	4ba3      	ldr	r3, [pc, #652]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d00c      	beq.n	8008508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ee:	4ba0      	ldr	r3, [pc, #640]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d112      	bne.n	8008520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084fa:	4b9d      	ldr	r3, [pc, #628]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008506:	d10b      	bne.n	8008520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008508:	4b99      	ldr	r3, [pc, #612]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d05b      	beq.n	80085cc <HAL_RCC_OscConfig+0x108>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d157      	bne.n	80085cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e236      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008528:	d106      	bne.n	8008538 <HAL_RCC_OscConfig+0x74>
 800852a:	4b91      	ldr	r3, [pc, #580]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a90      	ldr	r2, [pc, #576]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	e01d      	b.n	8008574 <HAL_RCC_OscConfig+0xb0>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008540:	d10c      	bne.n	800855c <HAL_RCC_OscConfig+0x98>
 8008542:	4b8b      	ldr	r3, [pc, #556]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a8a      	ldr	r2, [pc, #552]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	4b88      	ldr	r3, [pc, #544]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a87      	ldr	r2, [pc, #540]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e00b      	b.n	8008574 <HAL_RCC_OscConfig+0xb0>
 800855c:	4b84      	ldr	r3, [pc, #528]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a83      	ldr	r2, [pc, #524]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	4b81      	ldr	r3, [pc, #516]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a80      	ldr	r2, [pc, #512]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 800856e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d013      	beq.n	80085a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800857c:	f7fe fa12 	bl	80069a4 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008584:	f7fe fa0e 	bl	80069a4 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b64      	cmp	r3, #100	; 0x64
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e1fb      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008596:	4b76      	ldr	r3, [pc, #472]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0f0      	beq.n	8008584 <HAL_RCC_OscConfig+0xc0>
 80085a2:	e014      	b.n	80085ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085a4:	f7fe f9fe 	bl	80069a4 <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085ac:	f7fe f9fa 	bl	80069a4 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b64      	cmp	r3, #100	; 0x64
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e1e7      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085be:	4b6c      	ldr	r3, [pc, #432]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0xe8>
 80085ca:	e000      	b.n	80085ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d063      	beq.n	80086a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085da:	4b65      	ldr	r3, [pc, #404]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 030c 	and.w	r3, r3, #12
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085e6:	4b62      	ldr	r3, [pc, #392]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d11c      	bne.n	800862c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085f2:	4b5f      	ldr	r3, [pc, #380]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d116      	bne.n	800862c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085fe:	4b5c      	ldr	r3, [pc, #368]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <HAL_RCC_OscConfig+0x152>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d001      	beq.n	8008616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e1bb      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008616:	4b56      	ldr	r3, [pc, #344]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	4952      	ldr	r1, [pc, #328]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008626:	4313      	orrs	r3, r2
 8008628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800862a:	e03a      	b.n	80086a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d020      	beq.n	8008676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008634:	4b4f      	ldr	r3, [pc, #316]	; (8008774 <HAL_RCC_OscConfig+0x2b0>)
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863a:	f7fe f9b3 	bl	80069a4 <HAL_GetTick>
 800863e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008640:	e008      	b.n	8008654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008642:	f7fe f9af 	bl	80069a4 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e19c      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008654:	4b46      	ldr	r3, [pc, #280]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0f0      	beq.n	8008642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008660:	4b43      	ldr	r3, [pc, #268]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4940      	ldr	r1, [pc, #256]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008670:	4313      	orrs	r3, r2
 8008672:	600b      	str	r3, [r1, #0]
 8008674:	e015      	b.n	80086a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008676:	4b3f      	ldr	r3, [pc, #252]	; (8008774 <HAL_RCC_OscConfig+0x2b0>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867c:	f7fe f992 	bl	80069a4 <HAL_GetTick>
 8008680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008684:	f7fe f98e 	bl	80069a4 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e17b      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008696:	4b36      	ldr	r3, [pc, #216]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f0      	bne.n	8008684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d030      	beq.n	8008710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d016      	beq.n	80086e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086b6:	4b30      	ldr	r3, [pc, #192]	; (8008778 <HAL_RCC_OscConfig+0x2b4>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086bc:	f7fe f972 	bl	80069a4 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086c4:	f7fe f96e 	bl	80069a4 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e15b      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 80086d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0x200>
 80086e2:	e015      	b.n	8008710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086e4:	4b24      	ldr	r3, [pc, #144]	; (8008778 <HAL_RCC_OscConfig+0x2b4>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ea:	f7fe f95b 	bl	80069a4 <HAL_GetTick>
 80086ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f0:	e008      	b.n	8008704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086f2:	f7fe f957 	bl	80069a4 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e144      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008704:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1f0      	bne.n	80086f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80a0 	beq.w	800885e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800871e:	2300      	movs	r3, #0
 8008720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10f      	bne.n	800874e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873c:	6413      	str	r3, [r2, #64]	; 0x40
 800873e:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <HAL_RCC_OscConfig+0x2ac>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008746:	60bb      	str	r3, [r7, #8]
 8008748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800874a:	2301      	movs	r3, #1
 800874c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <HAL_RCC_OscConfig+0x2b8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d121      	bne.n	800879e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800875a:	4b08      	ldr	r3, [pc, #32]	; (800877c <HAL_RCC_OscConfig+0x2b8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a07      	ldr	r2, [pc, #28]	; (800877c <HAL_RCC_OscConfig+0x2b8>)
 8008760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008766:	f7fe f91d 	bl	80069a4 <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800876c:	e011      	b.n	8008792 <HAL_RCC_OscConfig+0x2ce>
 800876e:	bf00      	nop
 8008770:	40023800 	.word	0x40023800
 8008774:	42470000 	.word	0x42470000
 8008778:	42470e80 	.word	0x42470e80
 800877c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008780:	f7fe f910 	bl	80069a4 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e0fd      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008792:	4b81      	ldr	r3, [pc, #516]	; (8008998 <HAL_RCC_OscConfig+0x4d4>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f0      	beq.n	8008780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d106      	bne.n	80087b4 <HAL_RCC_OscConfig+0x2f0>
 80087a6:	4b7d      	ldr	r3, [pc, #500]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087aa:	4a7c      	ldr	r2, [pc, #496]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	6713      	str	r3, [r2, #112]	; 0x70
 80087b2:	e01c      	b.n	80087ee <HAL_RCC_OscConfig+0x32a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2b05      	cmp	r3, #5
 80087ba:	d10c      	bne.n	80087d6 <HAL_RCC_OscConfig+0x312>
 80087bc:	4b77      	ldr	r3, [pc, #476]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c0:	4a76      	ldr	r2, [pc, #472]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087c2:	f043 0304 	orr.w	r3, r3, #4
 80087c6:	6713      	str	r3, [r2, #112]	; 0x70
 80087c8:	4b74      	ldr	r3, [pc, #464]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087cc:	4a73      	ldr	r2, [pc, #460]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	6713      	str	r3, [r2, #112]	; 0x70
 80087d4:	e00b      	b.n	80087ee <HAL_RCC_OscConfig+0x32a>
 80087d6:	4b71      	ldr	r3, [pc, #452]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087da:	4a70      	ldr	r2, [pc, #448]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	6713      	str	r3, [r2, #112]	; 0x70
 80087e2:	4b6e      	ldr	r3, [pc, #440]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e6:	4a6d      	ldr	r2, [pc, #436]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80087e8:	f023 0304 	bic.w	r3, r3, #4
 80087ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d015      	beq.n	8008822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f6:	f7fe f8d5 	bl	80069a4 <HAL_GetTick>
 80087fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087fc:	e00a      	b.n	8008814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087fe:	f7fe f8d1 	bl	80069a4 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	f241 3288 	movw	r2, #5000	; 0x1388
 800880c:	4293      	cmp	r3, r2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e0bc      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008814:	4b61      	ldr	r3, [pc, #388]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 8008816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0ee      	beq.n	80087fe <HAL_RCC_OscConfig+0x33a>
 8008820:	e014      	b.n	800884c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008822:	f7fe f8bf 	bl	80069a4 <HAL_GetTick>
 8008826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008828:	e00a      	b.n	8008840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800882a:	f7fe f8bb 	bl	80069a4 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f241 3288 	movw	r2, #5000	; 0x1388
 8008838:	4293      	cmp	r3, r2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e0a6      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008840:	4b56      	ldr	r3, [pc, #344]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 8008842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1ee      	bne.n	800882a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d105      	bne.n	800885e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008852:	4b52      	ldr	r3, [pc, #328]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	4a51      	ldr	r2, [pc, #324]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 8008858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800885c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 8092 	beq.w	800898c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008868:	4b4c      	ldr	r3, [pc, #304]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f003 030c 	and.w	r3, r3, #12
 8008870:	2b08      	cmp	r3, #8
 8008872:	d05c      	beq.n	800892e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	2b02      	cmp	r3, #2
 800887a:	d141      	bne.n	8008900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800887c:	4b48      	ldr	r3, [pc, #288]	; (80089a0 <HAL_RCC_OscConfig+0x4dc>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008882:	f7fe f88f 	bl	80069a4 <HAL_GetTick>
 8008886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800888a:	f7fe f88b 	bl	80069a4 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e078      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800889c:	4b3f      	ldr	r3, [pc, #252]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69da      	ldr	r2, [r3, #28]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	431a      	orrs	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	019b      	lsls	r3, r3, #6
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	3b01      	subs	r3, #1
 80088c2:	041b      	lsls	r3, r3, #16
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	061b      	lsls	r3, r3, #24
 80088cc:	4933      	ldr	r1, [pc, #204]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088d2:	4b33      	ldr	r3, [pc, #204]	; (80089a0 <HAL_RCC_OscConfig+0x4dc>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d8:	f7fe f864 	bl	80069a4 <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088e0:	f7fe f860 	bl	80069a4 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e04d      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088f2:	4b2a      	ldr	r3, [pc, #168]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0x41c>
 80088fe:	e045      	b.n	800898c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008900:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <HAL_RCC_OscConfig+0x4dc>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008906:	f7fe f84d 	bl	80069a4 <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800890c:	e008      	b.n	8008920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890e:	f7fe f849 	bl	80069a4 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e036      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008920:	4b1e      	ldr	r3, [pc, #120]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1f0      	bne.n	800890e <HAL_RCC_OscConfig+0x44a>
 800892c:	e02e      	b.n	800898c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e029      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800893a:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_RCC_OscConfig+0x4d8>)
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	429a      	cmp	r2, r3
 800894c:	d11c      	bne.n	8008988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008958:	429a      	cmp	r2, r3
 800895a:	d115      	bne.n	8008988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008962:	4013      	ands	r3, r2
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008968:	4293      	cmp	r3, r2
 800896a:	d10d      	bne.n	8008988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008976:	429a      	cmp	r2, r3
 8008978:	d106      	bne.n	8008988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008984:	429a      	cmp	r2, r3
 8008986:	d001      	beq.n	800898c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	40007000 	.word	0x40007000
 800899c:	40023800 	.word	0x40023800
 80089a0:	42470060 	.word	0x42470060

080089a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0cc      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089b8:	4b68      	ldr	r3, [pc, #416]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d90c      	bls.n	80089e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b65      	ldr	r3, [pc, #404]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ce:	4b63      	ldr	r3, [pc, #396]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d001      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0b8      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d020      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089f8:	4b59      	ldr	r3, [pc, #356]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	4a58      	ldr	r2, [pc, #352]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a10:	4b53      	ldr	r3, [pc, #332]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	4a52      	ldr	r2, [pc, #328]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a1c:	4b50      	ldr	r3, [pc, #320]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	494d      	ldr	r1, [pc, #308]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d044      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d107      	bne.n	8008a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a42:	4b47      	ldr	r3, [pc, #284]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d119      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e07f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d003      	beq.n	8008a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d107      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a62:	4b3f      	ldr	r3, [pc, #252]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e06f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a72:	4b3b      	ldr	r3, [pc, #236]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e067      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a82:	4b37      	ldr	r3, [pc, #220]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f023 0203 	bic.w	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	4934      	ldr	r1, [pc, #208]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a94:	f7fd ff86 	bl	80069a4 <HAL_GetTick>
 8008a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a9c:	f7fd ff82 	bl	80069a4 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e04f      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f003 020c 	and.w	r2, r3, #12
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d1eb      	bne.n	8008a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ac4:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20c      	bcs.n	8008aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad2:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ada:	4b20      	ldr	r3, [pc, #128]	; (8008b5c <HAL_RCC_ClockConfig+0x1b8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 030f 	and.w	r3, r3, #15
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d001      	beq.n	8008aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e032      	b.n	8008b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008af8:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	4916      	ldr	r1, [pc, #88]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b16:	4b12      	ldr	r3, [pc, #72]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	490e      	ldr	r1, [pc, #56]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b2a:	f000 f821 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 8008b2e:	4601      	mov	r1, r0
 8008b30:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	4a0a      	ldr	r2, [pc, #40]	; (8008b64 <HAL_RCC_ClockConfig+0x1c0>)
 8008b3c:	5cd3      	ldrb	r3, [r2, r3]
 8008b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8008b42:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <HAL_RCC_ClockConfig+0x1c4>)
 8008b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <HAL_RCC_ClockConfig+0x1c8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd fee6 	bl	800691c <HAL_InitTick>

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	40023c00 	.word	0x40023c00
 8008b60:	40023800 	.word	0x40023800
 8008b64:	08010504 	.word	0x08010504
 8008b68:	20000034 	.word	0x20000034
 8008b6c:	20000038 	.word	0x20000038

08008b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b86:	4b50      	ldr	r3, [pc, #320]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f003 030c 	and.w	r3, r3, #12
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d007      	beq.n	8008ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d008      	beq.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f040 808d 	bne.w	8008cb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b9c:	4b4b      	ldr	r3, [pc, #300]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8008b9e:	60bb      	str	r3, [r7, #8]
       break;
 8008ba0:	e08c      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ba2:	4b4b      	ldr	r3, [pc, #300]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ba4:	60bb      	str	r3, [r7, #8]
      break;
 8008ba6:	e089      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ba8:	4b47      	ldr	r3, [pc, #284]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bb2:	4b45      	ldr	r3, [pc, #276]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d023      	beq.n	8008c06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bbe:	4b42      	ldr	r3, [pc, #264]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	099b      	lsrs	r3, r3, #6
 8008bc4:	f04f 0400 	mov.w	r4, #0
 8008bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	ea03 0501 	and.w	r5, r3, r1
 8008bd4:	ea04 0602 	and.w	r6, r4, r2
 8008bd8:	4a3d      	ldr	r2, [pc, #244]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bda:	fb02 f106 	mul.w	r1, r2, r6
 8008bde:	2200      	movs	r2, #0
 8008be0:	fb02 f205 	mul.w	r2, r2, r5
 8008be4:	440a      	add	r2, r1
 8008be6:	493a      	ldr	r1, [pc, #232]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008be8:	fba5 0101 	umull	r0, r1, r5, r1
 8008bec:	1853      	adds	r3, r2, r1
 8008bee:	4619      	mov	r1, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f04f 0400 	mov.w	r4, #0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	f7f8 f845 	bl	8000c88 <__aeabi_uldivmod>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e049      	b.n	8008c9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c06:	4b30      	ldr	r3, [pc, #192]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	099b      	lsrs	r3, r3, #6
 8008c0c:	f04f 0400 	mov.w	r4, #0
 8008c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	ea03 0501 	and.w	r5, r3, r1
 8008c1c:	ea04 0602 	and.w	r6, r4, r2
 8008c20:	4629      	mov	r1, r5
 8008c22:	4632      	mov	r2, r6
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	f04f 0400 	mov.w	r4, #0
 8008c2c:	0154      	lsls	r4, r2, #5
 8008c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c32:	014b      	lsls	r3, r1, #5
 8008c34:	4619      	mov	r1, r3
 8008c36:	4622      	mov	r2, r4
 8008c38:	1b49      	subs	r1, r1, r5
 8008c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	f04f 0400 	mov.w	r4, #0
 8008c46:	0194      	lsls	r4, r2, #6
 8008c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c4c:	018b      	lsls	r3, r1, #6
 8008c4e:	1a5b      	subs	r3, r3, r1
 8008c50:	eb64 0402 	sbc.w	r4, r4, r2
 8008c54:	f04f 0100 	mov.w	r1, #0
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	00e2      	lsls	r2, r4, #3
 8008c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c62:	00d9      	lsls	r1, r3, #3
 8008c64:	460b      	mov	r3, r1
 8008c66:	4614      	mov	r4, r2
 8008c68:	195b      	adds	r3, r3, r5
 8008c6a:	eb44 0406 	adc.w	r4, r4, r6
 8008c6e:	f04f 0100 	mov.w	r1, #0
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	02a2      	lsls	r2, r4, #10
 8008c78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008c7c:	0299      	lsls	r1, r3, #10
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4614      	mov	r4, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	4621      	mov	r1, r4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f04f 0400 	mov.w	r4, #0
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4623      	mov	r3, r4
 8008c90:	f7f7 fffa 	bl	8000c88 <__aeabi_uldivmod>
 8008c94:	4603      	mov	r3, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	0c1b      	lsrs	r3, r3, #16
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb2:	60bb      	str	r3, [r7, #8]
      break;
 8008cb4:	e002      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8008cb8:	60bb      	str	r3, [r7, #8]
      break;
 8008cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	00f42400 	.word	0x00f42400
 8008cd0:	00bebc20 	.word	0x00bebc20

08008cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cd8:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cda:	681b      	ldr	r3, [r3, #0]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20000034 	.word	0x20000034

08008cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cf0:	f7ff fff0 	bl	8008cd4 <HAL_RCC_GetHCLKFreq>
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	0a9b      	lsrs	r3, r3, #10
 8008cfc:	f003 0307 	and.w	r3, r3, #7
 8008d00:	4a03      	ldr	r2, [pc, #12]	; (8008d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d02:	5cd3      	ldrb	r3, [r2, r3]
 8008d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	08010514 	.word	0x08010514

08008d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d18:	f7ff ffdc 	bl	8008cd4 <HAL_RCC_GetHCLKFreq>
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	0b5b      	lsrs	r3, r3, #13
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	4a03      	ldr	r2, [pc, #12]	; (8008d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d2a:	5cd3      	ldrb	r3, [r2, r3]
 8008d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40023800 	.word	0x40023800
 8008d38:	08010514 	.word	0x08010514

08008d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e056      	b.n	8008dfc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fd fa67 	bl	800623c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	431a      	orrs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	ea42 0103 	orr.w	r1, r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	f003 0104 	and.w	r1, r3, #4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69da      	ldr	r2, [r3, #28]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	4613      	mov	r3, r2
 8008e12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_SPI_Transmit+0x22>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e11e      	b.n	8009064 <HAL_SPI_Transmit+0x260>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e2e:	f7fd fdb9 	bl	80069a4 <HAL_GetTick>
 8008e32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d002      	beq.n	8008e4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008e44:	2302      	movs	r3, #2
 8008e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e48:	e103      	b.n	8009052 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_SPI_Transmit+0x52>
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e5a:	e0fa      	b.n	8009052 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	88fa      	ldrh	r2, [r7, #6]
 8008e74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	88fa      	ldrh	r2, [r7, #6]
 8008e7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea2:	d107      	bne.n	8008eb4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008eb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebe:	2b40      	cmp	r3, #64	; 0x40
 8008ec0:	d007      	beq.n	8008ed2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eda:	d14b      	bne.n	8008f74 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <HAL_SPI_Transmit+0xe6>
 8008ee4:	8afb      	ldrh	r3, [r7, #22]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d13e      	bne.n	8008f68 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eee:	881a      	ldrh	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	1c9a      	adds	r2, r3, #2
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f0e:	e02b      	b.n	8008f68 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d112      	bne.n	8008f44 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	881a      	ldrh	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	1c9a      	adds	r2, r3, #2
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f42:	e011      	b.n	8008f68 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f44:	f7fd fd2e 	bl	80069a4 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d803      	bhi.n	8008f5c <HAL_SPI_Transmit+0x158>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d102      	bne.n	8008f62 <HAL_SPI_Transmit+0x15e>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f66:	e074      	b.n	8009052 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1ce      	bne.n	8008f10 <HAL_SPI_Transmit+0x10c>
 8008f72:	e04c      	b.n	800900e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <HAL_SPI_Transmit+0x17e>
 8008f7c:	8afb      	ldrh	r3, [r7, #22]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d140      	bne.n	8009004 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	330c      	adds	r3, #12
 8008f8c:	7812      	ldrb	r2, [r2, #0]
 8008f8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008fa8:	e02c      	b.n	8009004 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d113      	bne.n	8008fe0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8008fde:	e011      	b.n	8009004 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe0:	f7fd fce0 	bl	80069a4 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d803      	bhi.n	8008ff8 <HAL_SPI_Transmit+0x1f4>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d102      	bne.n	8008ffe <HAL_SPI_Transmit+0x1fa>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009002:	e026      	b.n	8009052 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009008:	b29b      	uxth	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1cd      	bne.n	8008faa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fba4 	bl	8009760 <SPI_EndRxTxTransaction>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	613b      	str	r3, [r7, #16]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	77fb      	strb	r3, [r7, #31]
 800904e:	e000      	b.n	8009052 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009062:	7ffb      	ldrb	r3, [r7, #31]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3720      	adds	r7, #32
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af02      	add	r7, sp, #8
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	4613      	mov	r3, r2
 800907a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009088:	d112      	bne.n	80090b0 <HAL_SPI_Receive+0x44>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10e      	bne.n	80090b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2204      	movs	r2, #4
 8009096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	4613      	mov	r3, r2
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 f8e9 	bl	800927e <HAL_SPI_TransmitReceive>
 80090ac:	4603      	mov	r3, r0
 80090ae:	e0e2      	b.n	8009276 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_SPI_Receive+0x52>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e0db      	b.n	8009276 <HAL_SPI_Receive+0x20a>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090c6:	f7fd fc6d 	bl	80069a4 <HAL_GetTick>
 80090ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d002      	beq.n	80090de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80090d8:	2302      	movs	r3, #2
 80090da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80090dc:	e0c2      	b.n	8009264 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <HAL_SPI_Receive+0x7e>
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80090ee:	e0b9      	b.n	8009264 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2204      	movs	r2, #4
 80090f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88fa      	ldrh	r2, [r7, #6]
 8009108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	88fa      	ldrh	r2, [r7, #6]
 800910e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009136:	d107      	bne.n	8009148 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009146:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009152:	2b40      	cmp	r3, #64	; 0x40
 8009154:	d007      	beq.n	8009166 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009164:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d162      	bne.n	8009234 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800916e:	e02e      	b.n	80091ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b01      	cmp	r3, #1
 800917c:	d115      	bne.n	80091aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f103 020c 	add.w	r2, r3, #12
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	7812      	ldrb	r2, [r2, #0]
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091a8:	e011      	b.n	80091ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091aa:	f7fd fbfb 	bl	80069a4 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d803      	bhi.n	80091c2 <HAL_SPI_Receive+0x156>
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d102      	bne.n	80091c8 <HAL_SPI_Receive+0x15c>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80091cc:	e04a      	b.n	8009264 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1cb      	bne.n	8009170 <HAL_SPI_Receive+0x104>
 80091d8:	e031      	b.n	800923e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d113      	bne.n	8009210 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	b292      	uxth	r2, r2
 80091f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	1c9a      	adds	r2, r3, #2
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800920e:	e011      	b.n	8009234 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009210:	f7fd fbc8 	bl	80069a4 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d803      	bhi.n	8009228 <HAL_SPI_Receive+0x1bc>
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d102      	bne.n	800922e <HAL_SPI_Receive+0x1c2>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009232:	e017      	b.n	8009264 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1cd      	bne.n	80091da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fa27 	bl	8009696 <SPI_EndRxTransaction>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2220      	movs	r2, #32
 8009252:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	75fb      	strb	r3, [r7, #23]
 8009260:	e000      	b.n	8009264 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b08c      	sub	sp, #48	; 0x30
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
 800928a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800928c:	2301      	movs	r3, #1
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_SPI_TransmitReceive+0x26>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e18a      	b.n	80095ba <HAL_SPI_TransmitReceive+0x33c>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092ac:	f7fd fb7a 	bl	80069a4 <HAL_GetTick>
 80092b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80092c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d00f      	beq.n	80092ee <HAL_SPI_TransmitReceive+0x70>
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092d4:	d107      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d103      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x68>
 80092de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	d003      	beq.n	80092ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
 80092e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092ec:	e15b      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <HAL_SPI_TransmitReceive+0x82>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <HAL_SPI_TransmitReceive+0x82>
 80092fa:	887b      	ldrh	r3, [r7, #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d103      	bne.n	8009308 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009306:	e14e      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b04      	cmp	r3, #4
 8009312:	d003      	beq.n	800931c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2205      	movs	r2, #5
 8009318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	887a      	ldrh	r2, [r7, #2]
 800932c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	887a      	ldrh	r2, [r7, #2]
 8009332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	887a      	ldrh	r2, [r7, #2]
 800933e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	887a      	ldrh	r2, [r7, #2]
 8009344:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d007      	beq.n	8009370 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800936e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009378:	d178      	bne.n	800946c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <HAL_SPI_TransmitReceive+0x10a>
 8009382:	8b7b      	ldrh	r3, [r7, #26]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d166      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	881a      	ldrh	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009398:	1c9a      	adds	r2, r3, #2
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	3b01      	subs	r3, #1
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093ac:	e053      	b.n	8009456 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d11b      	bne.n	80093f4 <HAL_SPI_TransmitReceive+0x176>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <HAL_SPI_TransmitReceive+0x176>
 80093c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d113      	bne.n	80093f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d0:	881a      	ldrh	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093dc:	1c9a      	adds	r2, r3, #2
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d119      	bne.n	8009436 <HAL_SPI_TransmitReceive+0x1b8>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009406:	b29b      	uxth	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d014      	beq.n	8009436 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	b292      	uxth	r2, r2
 8009418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	1c9a      	adds	r2, r3, #2
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009432:	2301      	movs	r3, #1
 8009434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009436:	f7fd fab5 	bl	80069a4 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009442:	429a      	cmp	r2, r3
 8009444:	d807      	bhi.n	8009456 <HAL_SPI_TransmitReceive+0x1d8>
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944c:	d003      	beq.n	8009456 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009454:	e0a7      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800945a:	b29b      	uxth	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1a6      	bne.n	80093ae <HAL_SPI_TransmitReceive+0x130>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1a1      	bne.n	80093ae <HAL_SPI_TransmitReceive+0x130>
 800946a:	e07c      	b.n	8009566 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_SPI_TransmitReceive+0x1fc>
 8009474:	8b7b      	ldrh	r3, [r7, #26]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d16b      	bne.n	8009552 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	7812      	ldrb	r2, [r2, #0]
 8009486:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009496:	b29b      	uxth	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094a0:	e057      	b.n	8009552 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d11c      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x26c>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d017      	beq.n	80094ea <HAL_SPI_TransmitReceive+0x26c>
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d114      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	330c      	adds	r3, #12
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d119      	bne.n	800952c <HAL_SPI_TransmitReceive+0x2ae>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d014      	beq.n	800952c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	b2d2      	uxtb	r2, r2
 800950e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009528:	2301      	movs	r3, #1
 800952a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800952c:	f7fd fa3a 	bl	80069a4 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009538:	429a      	cmp	r2, r3
 800953a:	d803      	bhi.n	8009544 <HAL_SPI_TransmitReceive+0x2c6>
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009542:	d102      	bne.n	800954a <HAL_SPI_TransmitReceive+0x2cc>
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	2b00      	cmp	r3, #0
 8009548:	d103      	bne.n	8009552 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009550:	e029      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009556:	b29b      	uxth	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1a2      	bne.n	80094a2 <HAL_SPI_TransmitReceive+0x224>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d19d      	bne.n	80094a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f8f8 	bl	8009760 <SPI_EndRxTxTransaction>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d006      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2220      	movs	r2, #32
 8009580:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009582:	e010      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10b      	bne.n	80095a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	e000      	b.n	80095a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80095a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3730      	adds	r7, #48	; 0x30
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	603b      	str	r3, [r7, #0]
 80095ce:	4613      	mov	r3, r2
 80095d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095d2:	e04c      	b.n	800966e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	d048      	beq.n	800966e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80095dc:	f7fd f9e2 	bl	80069a4 <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d902      	bls.n	80095f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d13d      	bne.n	800966e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800960a:	d111      	bne.n	8009630 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009614:	d004      	beq.n	8009620 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800961e:	d107      	bne.n	8009630 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800962e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009638:	d10f      	bne.n	800965a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e00f      	b.n	800968e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689a      	ldr	r2, [r3, #8]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4013      	ands	r3, r2
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	429a      	cmp	r2, r3
 800967c:	bf0c      	ite	eq
 800967e:	2301      	moveq	r3, #1
 8009680:	2300      	movne	r3, #0
 8009682:	b2db      	uxtb	r3, r3
 8009684:	461a      	mov	r2, r3
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	429a      	cmp	r2, r3
 800968a:	d1a3      	bne.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b086      	sub	sp, #24
 800969a:	af02      	add	r7, sp, #8
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096aa:	d111      	bne.n	80096d0 <SPI_EndRxTransaction+0x3a>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b4:	d004      	beq.n	80096c0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096be:	d107      	bne.n	80096d0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ce:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d8:	d12a      	bne.n	8009730 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e2:	d012      	beq.n	800970a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2200      	movs	r2, #0
 80096ec:	2180      	movs	r1, #128	; 0x80
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7ff ff67 	bl	80095c2 <SPI_WaitFlagStateUntilTimeout>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d02d      	beq.n	8009756 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fe:	f043 0220 	orr.w	r2, r3, #32
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e026      	b.n	8009758 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2200      	movs	r2, #0
 8009712:	2101      	movs	r1, #1
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff ff54 	bl	80095c2 <SPI_WaitFlagStateUntilTimeout>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01a      	beq.n	8009756 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009724:	f043 0220 	orr.w	r2, r3, #32
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e013      	b.n	8009758 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2200      	movs	r2, #0
 8009738:	2101      	movs	r1, #1
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7ff ff41 	bl	80095c2 <SPI_WaitFlagStateUntilTimeout>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d007      	beq.n	8009756 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974a:	f043 0220 	orr.w	r2, r3, #32
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e000      	b.n	8009758 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af02      	add	r7, sp, #8
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800976c:	4b1b      	ldr	r3, [pc, #108]	; (80097dc <SPI_EndRxTxTransaction+0x7c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a1b      	ldr	r2, [pc, #108]	; (80097e0 <SPI_EndRxTxTransaction+0x80>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	0d5b      	lsrs	r3, r3, #21
 8009778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800977c:	fb02 f303 	mul.w	r3, r2, r3
 8009780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800978a:	d112      	bne.n	80097b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	2180      	movs	r1, #128	; 0x80
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f7ff ff13 	bl	80095c2 <SPI_WaitFlagStateUntilTimeout>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d016      	beq.n	80097d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a6:	f043 0220 	orr.w	r2, r3, #32
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e00f      	b.n	80097d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00a      	beq.n	80097ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c8:	2b80      	cmp	r3, #128	; 0x80
 80097ca:	d0f2      	beq.n	80097b2 <SPI_EndRxTxTransaction+0x52>
 80097cc:	e000      	b.n	80097d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80097ce:	bf00      	nop
  }

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000034 	.word	0x20000034
 80097e0:	165e9f81 	.word	0x165e9f81

080097e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e01d      	b.n	8009832 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d106      	bne.n	8009810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7fc fe12 	bl	8006434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f000 fb56 	bl	8009ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0201 	orr.w	r2, r2, #1
 8009850:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b06      	cmp	r3, #6
 8009862:	d007      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e01d      	b.n	80098d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d106      	bne.n	80098ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7fc fd0f 	bl	80062cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2202      	movs	r2, #2
 80098b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3304      	adds	r3, #4
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f000 fb07 	bl	8009ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fd42 	bl	800a374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a15      	ldr	r2, [pc, #84]	; (800994c <HAL_TIM_PWM_Start+0x74>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <HAL_TIM_PWM_Start+0x2c>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a14      	ldr	r2, [pc, #80]	; (8009950 <HAL_TIM_PWM_Start+0x78>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d101      	bne.n	8009908 <HAL_TIM_PWM_Start+0x30>
 8009904:	2301      	movs	r3, #1
 8009906:	e000      	b.n	800990a <HAL_TIM_PWM_Start+0x32>
 8009908:	2300      	movs	r3, #0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d007      	beq.n	800991e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800991c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b06      	cmp	r3, #6
 800992e:	d007      	beq.n	8009940 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0201 	orr.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	40010000 	.word	0x40010000
 8009950:	40010400 	.word	0x40010400

08009954 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e083      	b.n	8009a70 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d106      	bne.n	8009982 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fc fcdd 	bl	800633c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009998:	f023 0307 	bic.w	r3, r3, #7
 800999c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3304      	adds	r3, #4
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f000 fa93 	bl	8009ed4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	021b      	lsls	r3, r3, #8
 80099e6:	4313      	orrs	r3, r2
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80099f4:	f023 030c 	bic.w	r3, r3, #12
 80099f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	021b      	lsls	r3, r3, #8
 8009a10:	4313      	orrs	r3, r2
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	011a      	lsls	r2, r3, #4
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	031b      	lsls	r3, r3, #12
 8009a24:	4313      	orrs	r3, r2
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	4313      	orrs	r3, r2
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <HAL_TIM_Encoder_Start+0x16>
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d008      	beq.n	8009a9e <HAL_TIM_Encoder_Start+0x26>
 8009a8c:	e00f      	b.n	8009aae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2201      	movs	r2, #1
 8009a94:	2100      	movs	r1, #0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fc6c 	bl	800a374 <TIM_CCxChannelCmd>
      break;
 8009a9c:	e016      	b.n	8009acc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	2104      	movs	r1, #4
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fc64 	bl	800a374 <TIM_CCxChannelCmd>
      break;
 8009aac:	e00e      	b.n	8009acc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fc5c 	bl	800a374 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	2104      	movs	r1, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fc55 	bl	800a374 <TIM_CCxChannelCmd>
      break;
 8009aca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d122      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d11b      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f06f 0202 	mvn.w	r2, #2
 8009b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9b5 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009b2e:	e005      	b.n	8009b3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f9a7 	bl	8009e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f9b8 	bl	8009eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d122      	bne.n	8009b96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d11b      	bne.n	8009b96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f06f 0204 	mvn.w	r2, #4
 8009b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f98b 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009b82:	e005      	b.n	8009b90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f97d 	bl	8009e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f98e 	bl	8009eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d122      	bne.n	8009bea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f003 0308 	and.w	r3, r3, #8
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d11b      	bne.n	8009bea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f06f 0208 	mvn.w	r2, #8
 8009bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2204      	movs	r2, #4
 8009bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f961 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009bd6:	e005      	b.n	8009be4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f953 	bl	8009e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f964 	bl	8009eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d122      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f003 0310 	and.w	r3, r3, #16
 8009c02:	2b10      	cmp	r3, #16
 8009c04:	d11b      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f06f 0210 	mvn.w	r2, #16
 8009c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2208      	movs	r2, #8
 8009c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69db      	ldr	r3, [r3, #28]
 8009c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f937 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009c2a:	e005      	b.n	8009c38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f929 	bl	8009e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f93a 	bl	8009eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d10e      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d107      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f06f 0201 	mvn.w	r2, #1
 8009c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7fa f97b 	bl	8003f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c74:	2b80      	cmp	r3, #128	; 0x80
 8009c76:	d10e      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d107      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fc6d 	bl	800a570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca0:	2b40      	cmp	r3, #64	; 0x40
 8009ca2:	d10e      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cae:	2b40      	cmp	r3, #64	; 0x40
 8009cb0:	d107      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f8ff 	bl	8009ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d10e      	bne.n	8009cee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d107      	bne.n	8009cee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f06f 0220 	mvn.w	r2, #32
 8009ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fc37 	bl	800a55c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d101      	bne.n	8009d12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e0b4      	b.n	8009e7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	f200 809f 	bhi.w	8009e68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009d2a:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d65 	.word	0x08009d65
 8009d34:	08009e69 	.word	0x08009e69
 8009d38:	08009e69 	.word	0x08009e69
 8009d3c:	08009e69 	.word	0x08009e69
 8009d40:	08009da5 	.word	0x08009da5
 8009d44:	08009e69 	.word	0x08009e69
 8009d48:	08009e69 	.word	0x08009e69
 8009d4c:	08009e69 	.word	0x08009e69
 8009d50:	08009de7 	.word	0x08009de7
 8009d54:	08009e69 	.word	0x08009e69
 8009d58:	08009e69 	.word	0x08009e69
 8009d5c:	08009e69 	.word	0x08009e69
 8009d60:	08009e27 	.word	0x08009e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f952 	bl	800a014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0208 	orr.w	r2, r2, #8
 8009d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0204 	bic.w	r2, r2, #4
 8009d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6999      	ldr	r1, [r3, #24]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	619a      	str	r2, [r3, #24]
      break;
 8009da2:	e062      	b.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 f9a2 	bl	800a0f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6999      	ldr	r1, [r3, #24]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	021a      	lsls	r2, r3, #8
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	619a      	str	r2, [r3, #24]
      break;
 8009de4:	e041      	b.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 f9f7 	bl	800a1e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69da      	ldr	r2, [r3, #28]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0208 	orr.w	r2, r2, #8
 8009e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69da      	ldr	r2, [r3, #28]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0204 	bic.w	r2, r2, #4
 8009e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69d9      	ldr	r1, [r3, #28]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	691a      	ldr	r2, [r3, #16]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	61da      	str	r2, [r3, #28]
      break;
 8009e24:	e021      	b.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fa4b 	bl	800a2c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69da      	ldr	r2, [r3, #28]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69d9      	ldr	r1, [r3, #28]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	021a      	lsls	r2, r3, #8
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	61da      	str	r2, [r3, #28]
      break;
 8009e66:	e000      	b.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009e68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a40      	ldr	r2, [pc, #256]	; (8009fe8 <TIM_Base_SetConfig+0x114>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d013      	beq.n	8009f14 <TIM_Base_SetConfig+0x40>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef2:	d00f      	beq.n	8009f14 <TIM_Base_SetConfig+0x40>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a3d      	ldr	r2, [pc, #244]	; (8009fec <TIM_Base_SetConfig+0x118>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00b      	beq.n	8009f14 <TIM_Base_SetConfig+0x40>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a3c      	ldr	r2, [pc, #240]	; (8009ff0 <TIM_Base_SetConfig+0x11c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d007      	beq.n	8009f14 <TIM_Base_SetConfig+0x40>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a3b      	ldr	r2, [pc, #236]	; (8009ff4 <TIM_Base_SetConfig+0x120>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_Base_SetConfig+0x40>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a3a      	ldr	r2, [pc, #232]	; (8009ff8 <TIM_Base_SetConfig+0x124>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d108      	bne.n	8009f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a2f      	ldr	r2, [pc, #188]	; (8009fe8 <TIM_Base_SetConfig+0x114>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d02b      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d027      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a2c      	ldr	r2, [pc, #176]	; (8009fec <TIM_Base_SetConfig+0x118>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d023      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a2b      	ldr	r2, [pc, #172]	; (8009ff0 <TIM_Base_SetConfig+0x11c>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d01f      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a2a      	ldr	r2, [pc, #168]	; (8009ff4 <TIM_Base_SetConfig+0x120>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d01b      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a29      	ldr	r2, [pc, #164]	; (8009ff8 <TIM_Base_SetConfig+0x124>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d017      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a28      	ldr	r2, [pc, #160]	; (8009ffc <TIM_Base_SetConfig+0x128>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d013      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a27      	ldr	r2, [pc, #156]	; (800a000 <TIM_Base_SetConfig+0x12c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d00f      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a26      	ldr	r2, [pc, #152]	; (800a004 <TIM_Base_SetConfig+0x130>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d00b      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a25      	ldr	r2, [pc, #148]	; (800a008 <TIM_Base_SetConfig+0x134>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d007      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a24      	ldr	r2, [pc, #144]	; (800a00c <TIM_Base_SetConfig+0x138>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d003      	beq.n	8009f86 <TIM_Base_SetConfig+0xb2>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a23      	ldr	r2, [pc, #140]	; (800a010 <TIM_Base_SetConfig+0x13c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d108      	bne.n	8009f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	689a      	ldr	r2, [r3, #8]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a0a      	ldr	r2, [pc, #40]	; (8009fe8 <TIM_Base_SetConfig+0x114>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d003      	beq.n	8009fcc <TIM_Base_SetConfig+0xf8>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a0c      	ldr	r2, [pc, #48]	; (8009ff8 <TIM_Base_SetConfig+0x124>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d103      	bne.n	8009fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	615a      	str	r2, [r3, #20]
}
 8009fda:	bf00      	nop
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40000400 	.word	0x40000400
 8009ff0:	40000800 	.word	0x40000800
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40010400 	.word	0x40010400
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40014400 	.word	0x40014400
 800a004:	40014800 	.word	0x40014800
 800a008:	40001800 	.word	0x40001800
 800a00c:	40001c00 	.word	0x40001c00
 800a010:	40002000 	.word	0x40002000

0800a014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	f023 0201 	bic.w	r2, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f023 0303 	bic.w	r3, r3, #3
 800a04a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f023 0302 	bic.w	r3, r3, #2
 800a05c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	4313      	orrs	r3, r2
 800a066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <TIM_OC1_SetConfig+0xd8>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d003      	beq.n	800a078 <TIM_OC1_SetConfig+0x64>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <TIM_OC1_SetConfig+0xdc>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d10c      	bne.n	800a092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f023 0308 	bic.w	r3, r3, #8
 800a07e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f023 0304 	bic.w	r3, r3, #4
 800a090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <TIM_OC1_SetConfig+0xd8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d003      	beq.n	800a0a2 <TIM_OC1_SetConfig+0x8e>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a14      	ldr	r2, [pc, #80]	; (800a0f0 <TIM_OC1_SetConfig+0xdc>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d111      	bne.n	800a0c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	621a      	str	r2, [r3, #32]
}
 800a0e0:	bf00      	nop
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40010400 	.word	0x40010400

0800a0f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	f023 0210 	bic.w	r2, r3, #16
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f023 0320 	bic.w	r3, r3, #32
 800a13e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	011b      	lsls	r3, r3, #4
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a22      	ldr	r2, [pc, #136]	; (800a1d8 <TIM_OC2_SetConfig+0xe4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_OC2_SetConfig+0x68>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a21      	ldr	r2, [pc, #132]	; (800a1dc <TIM_OC2_SetConfig+0xe8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d10d      	bne.n	800a178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a17      	ldr	r2, [pc, #92]	; (800a1d8 <TIM_OC2_SetConfig+0xe4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_OC2_SetConfig+0x94>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a16      	ldr	r2, [pc, #88]	; (800a1dc <TIM_OC2_SetConfig+0xe8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d113      	bne.n	800a1b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a18e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	621a      	str	r2, [r3, #32]
}
 800a1ca:	bf00      	nop
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	40010000 	.word	0x40010000
 800a1dc:	40010400 	.word	0x40010400

0800a1e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	021b      	lsls	r3, r3, #8
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a21      	ldr	r2, [pc, #132]	; (800a2c0 <TIM_OC3_SetConfig+0xe0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <TIM_OC3_SetConfig+0x66>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a20      	ldr	r2, [pc, #128]	; (800a2c4 <TIM_OC3_SetConfig+0xe4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d10d      	bne.n	800a262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a24c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	4313      	orrs	r3, r2
 800a258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <TIM_OC3_SetConfig+0xe0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d003      	beq.n	800a272 <TIM_OC3_SetConfig+0x92>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a15      	ldr	r2, [pc, #84]	; (800a2c4 <TIM_OC3_SetConfig+0xe4>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d113      	bne.n	800a29a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	4313      	orrs	r3, r2
 800a298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	621a      	str	r2, [r3, #32]
}
 800a2b4:	bf00      	nop
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40010400 	.word	0x40010400

0800a2c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	031b      	lsls	r3, r3, #12
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a12      	ldr	r2, [pc, #72]	; (800a36c <TIM_OC4_SetConfig+0xa4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d003      	beq.n	800a330 <TIM_OC4_SetConfig+0x68>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a11      	ldr	r2, [pc, #68]	; (800a370 <TIM_OC4_SetConfig+0xa8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d109      	bne.n	800a344 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	019b      	lsls	r3, r3, #6
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	40010000 	.word	0x40010000
 800a370:	40010400 	.word	0x40010400

0800a374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	f003 031f 	and.w	r3, r3, #31
 800a386:	2201      	movs	r2, #1
 800a388:	fa02 f303 	lsl.w	r3, r2, r3
 800a38c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6a1a      	ldr	r2, [r3, #32]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	43db      	mvns	r3, r3
 800a396:	401a      	ands	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f003 031f 	and.w	r3, r3, #31
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	621a      	str	r2, [r3, #32]
}
 800a3b2:	bf00      	nop
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e05a      	b.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a21      	ldr	r2, [pc, #132]	; (800a49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d022      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a424:	d01d      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a1d      	ldr	r2, [pc, #116]	; (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d018      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d013      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a1a      	ldr	r2, [pc, #104]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00e      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a18      	ldr	r2, [pc, #96]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d009      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a17      	ldr	r2, [pc, #92]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d004      	beq.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a15      	ldr	r2, [pc, #84]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d10c      	bne.n	800a47c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4313      	orrs	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	40010000 	.word	0x40010000
 800a4a0:	40000400 	.word	0x40000400
 800a4a4:	40000800 	.word	0x40000800
 800a4a8:	40000c00 	.word	0x40000c00
 800a4ac:	40010400 	.word	0x40010400
 800a4b0:	40014000 	.word	0x40014000
 800a4b4:	40001800 	.word	0x40001800

0800a4b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e03d      	b.n	800a550 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e03f      	b.n	800a616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7fb ffec 	bl	8006588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2224      	movs	r2, #36	; 0x24
 800a5b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f90b 	bl	800a7e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	695a      	ldr	r2, [r3, #20]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2220      	movs	r2, #32
 800a610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b088      	sub	sp, #32
 800a622:	af02      	add	r7, sp, #8
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	603b      	str	r3, [r7, #0]
 800a62a:	4613      	mov	r3, r2
 800a62c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	f040 8083 	bne.w	800a746 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_UART_Transmit+0x2e>
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e07b      	b.n	800a748 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_UART_Transmit+0x40>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e074      	b.n	800a748 <HAL_UART_Transmit+0x12a>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2221      	movs	r2, #33	; 0x21
 800a670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a674:	f7fc f996 	bl	80069a4 <HAL_GetTick>
 800a678:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	88fa      	ldrh	r2, [r7, #6]
 800a67e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	88fa      	ldrh	r2, [r7, #6]
 800a684:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a68e:	e042      	b.n	800a716 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a694:	b29b      	uxth	r3, r3
 800a696:	3b01      	subs	r3, #1
 800a698:	b29a      	uxth	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6a6:	d122      	bne.n	800a6ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2180      	movs	r1, #128	; 0x80
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f84c 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e042      	b.n	800a748 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d103      	bne.n	800a6e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	3302      	adds	r3, #2
 800a6e2:	60bb      	str	r3, [r7, #8]
 800a6e4:	e017      	b.n	800a716 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	60bb      	str	r3, [r7, #8]
 800a6ec:	e013      	b.n	800a716 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2180      	movs	r1, #128	; 0x80
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f829 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e01f      	b.n	800a748 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	60ba      	str	r2, [r7, #8]
 800a70e:	781a      	ldrb	r2, [r3, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1b7      	bne.n	800a690 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2200      	movs	r2, #0
 800a728:	2140      	movs	r1, #64	; 0x40
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 f810 	bl	800a750 <UART_WaitOnFlagUntilTimeout>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e006      	b.n	800a748 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	e000      	b.n	800a748 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a746:	2302      	movs	r3, #2
  }
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	4613      	mov	r3, r2
 800a75e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a760:	e02c      	b.n	800a7bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d028      	beq.n	800a7bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d007      	beq.n	800a780 <UART_WaitOnFlagUntilTimeout+0x30>
 800a770:	f7fc f918 	bl	80069a4 <HAL_GetTick>
 800a774:	4602      	mov	r2, r0
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	69ba      	ldr	r2, [r7, #24]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d21d      	bcs.n	800a7bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a78e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695a      	ldr	r2, [r3, #20]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 0201 	bic.w	r2, r2, #1
 800a79e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e00f      	b.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2301      	moveq	r3, #1
 800a7ce:	2300      	movne	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d0c3      	beq.n	800a762 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68da      	ldr	r2, [r3, #12]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	431a      	orrs	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a826:	f023 030c 	bic.w	r3, r3, #12
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	6812      	ldr	r2, [r2, #0]
 800a82e:	68f9      	ldr	r1, [r7, #12]
 800a830:	430b      	orrs	r3, r1
 800a832:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699a      	ldr	r2, [r3, #24]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a852:	f040 818b 	bne.w	800ab6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4ac1      	ldr	r2, [pc, #772]	; (800ab60 <UART_SetConfig+0x37c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d005      	beq.n	800a86c <UART_SetConfig+0x88>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4abf      	ldr	r2, [pc, #764]	; (800ab64 <UART_SetConfig+0x380>)
 800a866:	4293      	cmp	r3, r2
 800a868:	f040 80bd 	bne.w	800a9e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a86c:	f7fe fa52 	bl	8008d14 <HAL_RCC_GetPCLK2Freq>
 800a870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	461d      	mov	r5, r3
 800a876:	f04f 0600 	mov.w	r6, #0
 800a87a:	46a8      	mov	r8, r5
 800a87c:	46b1      	mov	r9, r6
 800a87e:	eb18 0308 	adds.w	r3, r8, r8
 800a882:	eb49 0409 	adc.w	r4, r9, r9
 800a886:	4698      	mov	r8, r3
 800a888:	46a1      	mov	r9, r4
 800a88a:	eb18 0805 	adds.w	r8, r8, r5
 800a88e:	eb49 0906 	adc.w	r9, r9, r6
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a89e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8a6:	4688      	mov	r8, r1
 800a8a8:	4691      	mov	r9, r2
 800a8aa:	eb18 0005 	adds.w	r0, r8, r5
 800a8ae:	eb49 0106 	adc.w	r1, r9, r6
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	461d      	mov	r5, r3
 800a8b8:	f04f 0600 	mov.w	r6, #0
 800a8bc:	196b      	adds	r3, r5, r5
 800a8be:	eb46 0406 	adc.w	r4, r6, r6
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4623      	mov	r3, r4
 800a8c6:	f7f6 f9df 	bl	8000c88 <__aeabi_uldivmod>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4ba5      	ldr	r3, [pc, #660]	; (800ab68 <UART_SetConfig+0x384>)
 800a8d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8d6:	095b      	lsrs	r3, r3, #5
 800a8d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	461d      	mov	r5, r3
 800a8e0:	f04f 0600 	mov.w	r6, #0
 800a8e4:	46a9      	mov	r9, r5
 800a8e6:	46b2      	mov	sl, r6
 800a8e8:	eb19 0309 	adds.w	r3, r9, r9
 800a8ec:	eb4a 040a 	adc.w	r4, sl, sl
 800a8f0:	4699      	mov	r9, r3
 800a8f2:	46a2      	mov	sl, r4
 800a8f4:	eb19 0905 	adds.w	r9, r9, r5
 800a8f8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8fc:	f04f 0100 	mov.w	r1, #0
 800a900:	f04f 0200 	mov.w	r2, #0
 800a904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a90c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a910:	4689      	mov	r9, r1
 800a912:	4692      	mov	sl, r2
 800a914:	eb19 0005 	adds.w	r0, r9, r5
 800a918:	eb4a 0106 	adc.w	r1, sl, r6
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	461d      	mov	r5, r3
 800a922:	f04f 0600 	mov.w	r6, #0
 800a926:	196b      	adds	r3, r5, r5
 800a928:	eb46 0406 	adc.w	r4, r6, r6
 800a92c:	461a      	mov	r2, r3
 800a92e:	4623      	mov	r3, r4
 800a930:	f7f6 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 800a934:	4603      	mov	r3, r0
 800a936:	460c      	mov	r4, r1
 800a938:	461a      	mov	r2, r3
 800a93a:	4b8b      	ldr	r3, [pc, #556]	; (800ab68 <UART_SetConfig+0x384>)
 800a93c:	fba3 1302 	umull	r1, r3, r3, r2
 800a940:	095b      	lsrs	r3, r3, #5
 800a942:	2164      	movs	r1, #100	; 0x64
 800a944:	fb01 f303 	mul.w	r3, r1, r3
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	3332      	adds	r3, #50	; 0x32
 800a94e:	4a86      	ldr	r2, [pc, #536]	; (800ab68 <UART_SetConfig+0x384>)
 800a950:	fba2 2303 	umull	r2, r3, r2, r3
 800a954:	095b      	lsrs	r3, r3, #5
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a95c:	4498      	add	r8, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	461d      	mov	r5, r3
 800a962:	f04f 0600 	mov.w	r6, #0
 800a966:	46a9      	mov	r9, r5
 800a968:	46b2      	mov	sl, r6
 800a96a:	eb19 0309 	adds.w	r3, r9, r9
 800a96e:	eb4a 040a 	adc.w	r4, sl, sl
 800a972:	4699      	mov	r9, r3
 800a974:	46a2      	mov	sl, r4
 800a976:	eb19 0905 	adds.w	r9, r9, r5
 800a97a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a97e:	f04f 0100 	mov.w	r1, #0
 800a982:	f04f 0200 	mov.w	r2, #0
 800a986:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a98a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a98e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a992:	4689      	mov	r9, r1
 800a994:	4692      	mov	sl, r2
 800a996:	eb19 0005 	adds.w	r0, r9, r5
 800a99a:	eb4a 0106 	adc.w	r1, sl, r6
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	461d      	mov	r5, r3
 800a9a4:	f04f 0600 	mov.w	r6, #0
 800a9a8:	196b      	adds	r3, r5, r5
 800a9aa:	eb46 0406 	adc.w	r4, r6, r6
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4623      	mov	r3, r4
 800a9b2:	f7f6 f969 	bl	8000c88 <__aeabi_uldivmod>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	4b6a      	ldr	r3, [pc, #424]	; (800ab68 <UART_SetConfig+0x384>)
 800a9be:	fba3 1302 	umull	r1, r3, r3, r2
 800a9c2:	095b      	lsrs	r3, r3, #5
 800a9c4:	2164      	movs	r1, #100	; 0x64
 800a9c6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	3332      	adds	r3, #50	; 0x32
 800a9d0:	4a65      	ldr	r2, [pc, #404]	; (800ab68 <UART_SetConfig+0x384>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	095b      	lsrs	r3, r3, #5
 800a9d8:	f003 0207 	and.w	r2, r3, #7
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4442      	add	r2, r8
 800a9e2:	609a      	str	r2, [r3, #8]
 800a9e4:	e26f      	b.n	800aec6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9e6:	f7fe f981 	bl	8008cec <HAL_RCC_GetPCLK1Freq>
 800a9ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	461d      	mov	r5, r3
 800a9f0:	f04f 0600 	mov.w	r6, #0
 800a9f4:	46a8      	mov	r8, r5
 800a9f6:	46b1      	mov	r9, r6
 800a9f8:	eb18 0308 	adds.w	r3, r8, r8
 800a9fc:	eb49 0409 	adc.w	r4, r9, r9
 800aa00:	4698      	mov	r8, r3
 800aa02:	46a1      	mov	r9, r4
 800aa04:	eb18 0805 	adds.w	r8, r8, r5
 800aa08:	eb49 0906 	adc.w	r9, r9, r6
 800aa0c:	f04f 0100 	mov.w	r1, #0
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa20:	4688      	mov	r8, r1
 800aa22:	4691      	mov	r9, r2
 800aa24:	eb18 0005 	adds.w	r0, r8, r5
 800aa28:	eb49 0106 	adc.w	r1, r9, r6
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	461d      	mov	r5, r3
 800aa32:	f04f 0600 	mov.w	r6, #0
 800aa36:	196b      	adds	r3, r5, r5
 800aa38:	eb46 0406 	adc.w	r4, r6, r6
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4623      	mov	r3, r4
 800aa40:	f7f6 f922 	bl	8000c88 <__aeabi_uldivmod>
 800aa44:	4603      	mov	r3, r0
 800aa46:	460c      	mov	r4, r1
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b47      	ldr	r3, [pc, #284]	; (800ab68 <UART_SetConfig+0x384>)
 800aa4c:	fba3 2302 	umull	r2, r3, r3, r2
 800aa50:	095b      	lsrs	r3, r3, #5
 800aa52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	461d      	mov	r5, r3
 800aa5a:	f04f 0600 	mov.w	r6, #0
 800aa5e:	46a9      	mov	r9, r5
 800aa60:	46b2      	mov	sl, r6
 800aa62:	eb19 0309 	adds.w	r3, r9, r9
 800aa66:	eb4a 040a 	adc.w	r4, sl, sl
 800aa6a:	4699      	mov	r9, r3
 800aa6c:	46a2      	mov	sl, r4
 800aa6e:	eb19 0905 	adds.w	r9, r9, r5
 800aa72:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa76:	f04f 0100 	mov.w	r1, #0
 800aa7a:	f04f 0200 	mov.w	r2, #0
 800aa7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa8a:	4689      	mov	r9, r1
 800aa8c:	4692      	mov	sl, r2
 800aa8e:	eb19 0005 	adds.w	r0, r9, r5
 800aa92:	eb4a 0106 	adc.w	r1, sl, r6
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	461d      	mov	r5, r3
 800aa9c:	f04f 0600 	mov.w	r6, #0
 800aaa0:	196b      	adds	r3, r5, r5
 800aaa2:	eb46 0406 	adc.w	r4, r6, r6
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	4623      	mov	r3, r4
 800aaaa:	f7f6 f8ed 	bl	8000c88 <__aeabi_uldivmod>
 800aaae:	4603      	mov	r3, r0
 800aab0:	460c      	mov	r4, r1
 800aab2:	461a      	mov	r2, r3
 800aab4:	4b2c      	ldr	r3, [pc, #176]	; (800ab68 <UART_SetConfig+0x384>)
 800aab6:	fba3 1302 	umull	r1, r3, r3, r2
 800aaba:	095b      	lsrs	r3, r3, #5
 800aabc:	2164      	movs	r1, #100	; 0x64
 800aabe:	fb01 f303 	mul.w	r3, r1, r3
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	3332      	adds	r3, #50	; 0x32
 800aac8:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <UART_SetConfig+0x384>)
 800aaca:	fba2 2303 	umull	r2, r3, r2, r3
 800aace:	095b      	lsrs	r3, r3, #5
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aad6:	4498      	add	r8, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	461d      	mov	r5, r3
 800aadc:	f04f 0600 	mov.w	r6, #0
 800aae0:	46a9      	mov	r9, r5
 800aae2:	46b2      	mov	sl, r6
 800aae4:	eb19 0309 	adds.w	r3, r9, r9
 800aae8:	eb4a 040a 	adc.w	r4, sl, sl
 800aaec:	4699      	mov	r9, r3
 800aaee:	46a2      	mov	sl, r4
 800aaf0:	eb19 0905 	adds.w	r9, r9, r5
 800aaf4:	eb4a 0a06 	adc.w	sl, sl, r6
 800aaf8:	f04f 0100 	mov.w	r1, #0
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	4692      	mov	sl, r2
 800ab10:	eb19 0005 	adds.w	r0, r9, r5
 800ab14:	eb4a 0106 	adc.w	r1, sl, r6
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	461d      	mov	r5, r3
 800ab1e:	f04f 0600 	mov.w	r6, #0
 800ab22:	196b      	adds	r3, r5, r5
 800ab24:	eb46 0406 	adc.w	r4, r6, r6
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4623      	mov	r3, r4
 800ab2c:	f7f6 f8ac 	bl	8000c88 <__aeabi_uldivmod>
 800ab30:	4603      	mov	r3, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	461a      	mov	r2, r3
 800ab36:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <UART_SetConfig+0x384>)
 800ab38:	fba3 1302 	umull	r1, r3, r3, r2
 800ab3c:	095b      	lsrs	r3, r3, #5
 800ab3e:	2164      	movs	r1, #100	; 0x64
 800ab40:	fb01 f303 	mul.w	r3, r1, r3
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	3332      	adds	r3, #50	; 0x32
 800ab4a:	4a07      	ldr	r2, [pc, #28]	; (800ab68 <UART_SetConfig+0x384>)
 800ab4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	f003 0207 	and.w	r2, r3, #7
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4442      	add	r2, r8
 800ab5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ab5e:	e1b2      	b.n	800aec6 <UART_SetConfig+0x6e2>
 800ab60:	40011000 	.word	0x40011000
 800ab64:	40011400 	.word	0x40011400
 800ab68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4ad7      	ldr	r2, [pc, #860]	; (800aed0 <UART_SetConfig+0x6ec>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d005      	beq.n	800ab82 <UART_SetConfig+0x39e>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4ad6      	ldr	r2, [pc, #856]	; (800aed4 <UART_SetConfig+0x6f0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	f040 80d1 	bne.w	800ad24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab82:	f7fe f8c7 	bl	8008d14 <HAL_RCC_GetPCLK2Freq>
 800ab86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	469a      	mov	sl, r3
 800ab8c:	f04f 0b00 	mov.w	fp, #0
 800ab90:	46d0      	mov	r8, sl
 800ab92:	46d9      	mov	r9, fp
 800ab94:	eb18 0308 	adds.w	r3, r8, r8
 800ab98:	eb49 0409 	adc.w	r4, r9, r9
 800ab9c:	4698      	mov	r8, r3
 800ab9e:	46a1      	mov	r9, r4
 800aba0:	eb18 080a 	adds.w	r8, r8, sl
 800aba4:	eb49 090b 	adc.w	r9, r9, fp
 800aba8:	f04f 0100 	mov.w	r1, #0
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800abb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800abb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800abbc:	4688      	mov	r8, r1
 800abbe:	4691      	mov	r9, r2
 800abc0:	eb1a 0508 	adds.w	r5, sl, r8
 800abc4:	eb4b 0609 	adc.w	r6, fp, r9
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	4619      	mov	r1, r3
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	f04f 0400 	mov.w	r4, #0
 800abda:	0094      	lsls	r4, r2, #2
 800abdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abe0:	008b      	lsls	r3, r1, #2
 800abe2:	461a      	mov	r2, r3
 800abe4:	4623      	mov	r3, r4
 800abe6:	4628      	mov	r0, r5
 800abe8:	4631      	mov	r1, r6
 800abea:	f7f6 f84d 	bl	8000c88 <__aeabi_uldivmod>
 800abee:	4603      	mov	r3, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	461a      	mov	r2, r3
 800abf4:	4bb8      	ldr	r3, [pc, #736]	; (800aed8 <UART_SetConfig+0x6f4>)
 800abf6:	fba3 2302 	umull	r2, r3, r3, r2
 800abfa:	095b      	lsrs	r3, r3, #5
 800abfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	469b      	mov	fp, r3
 800ac04:	f04f 0c00 	mov.w	ip, #0
 800ac08:	46d9      	mov	r9, fp
 800ac0a:	46e2      	mov	sl, ip
 800ac0c:	eb19 0309 	adds.w	r3, r9, r9
 800ac10:	eb4a 040a 	adc.w	r4, sl, sl
 800ac14:	4699      	mov	r9, r3
 800ac16:	46a2      	mov	sl, r4
 800ac18:	eb19 090b 	adds.w	r9, r9, fp
 800ac1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac20:	f04f 0100 	mov.w	r1, #0
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac34:	4689      	mov	r9, r1
 800ac36:	4692      	mov	sl, r2
 800ac38:	eb1b 0509 	adds.w	r5, fp, r9
 800ac3c:	eb4c 060a 	adc.w	r6, ip, sl
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	4619      	mov	r1, r3
 800ac46:	f04f 0200 	mov.w	r2, #0
 800ac4a:	f04f 0300 	mov.w	r3, #0
 800ac4e:	f04f 0400 	mov.w	r4, #0
 800ac52:	0094      	lsls	r4, r2, #2
 800ac54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac58:	008b      	lsls	r3, r1, #2
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	4628      	mov	r0, r5
 800ac60:	4631      	mov	r1, r6
 800ac62:	f7f6 f811 	bl	8000c88 <__aeabi_uldivmod>
 800ac66:	4603      	mov	r3, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4b9a      	ldr	r3, [pc, #616]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ac6e:	fba3 1302 	umull	r1, r3, r3, r2
 800ac72:	095b      	lsrs	r3, r3, #5
 800ac74:	2164      	movs	r1, #100	; 0x64
 800ac76:	fb01 f303 	mul.w	r3, r1, r3
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	3332      	adds	r3, #50	; 0x32
 800ac80:	4a95      	ldr	r2, [pc, #596]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac8c:	4498      	add	r8, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	469b      	mov	fp, r3
 800ac92:	f04f 0c00 	mov.w	ip, #0
 800ac96:	46d9      	mov	r9, fp
 800ac98:	46e2      	mov	sl, ip
 800ac9a:	eb19 0309 	adds.w	r3, r9, r9
 800ac9e:	eb4a 040a 	adc.w	r4, sl, sl
 800aca2:	4699      	mov	r9, r3
 800aca4:	46a2      	mov	sl, r4
 800aca6:	eb19 090b 	adds.w	r9, r9, fp
 800acaa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acae:	f04f 0100 	mov.w	r1, #0
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acc2:	4689      	mov	r9, r1
 800acc4:	4692      	mov	sl, r2
 800acc6:	eb1b 0509 	adds.w	r5, fp, r9
 800acca:	eb4c 060a 	adc.w	r6, ip, sl
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	4619      	mov	r1, r3
 800acd4:	f04f 0200 	mov.w	r2, #0
 800acd8:	f04f 0300 	mov.w	r3, #0
 800acdc:	f04f 0400 	mov.w	r4, #0
 800ace0:	0094      	lsls	r4, r2, #2
 800ace2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ace6:	008b      	lsls	r3, r1, #2
 800ace8:	461a      	mov	r2, r3
 800acea:	4623      	mov	r3, r4
 800acec:	4628      	mov	r0, r5
 800acee:	4631      	mov	r1, r6
 800acf0:	f7f5 ffca 	bl	8000c88 <__aeabi_uldivmod>
 800acf4:	4603      	mov	r3, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	461a      	mov	r2, r3
 800acfa:	4b77      	ldr	r3, [pc, #476]	; (800aed8 <UART_SetConfig+0x6f4>)
 800acfc:	fba3 1302 	umull	r1, r3, r3, r2
 800ad00:	095b      	lsrs	r3, r3, #5
 800ad02:	2164      	movs	r1, #100	; 0x64
 800ad04:	fb01 f303 	mul.w	r3, r1, r3
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	3332      	adds	r3, #50	; 0x32
 800ad0e:	4a72      	ldr	r2, [pc, #456]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ad10:	fba2 2303 	umull	r2, r3, r2, r3
 800ad14:	095b      	lsrs	r3, r3, #5
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4442      	add	r2, r8
 800ad20:	609a      	str	r2, [r3, #8]
 800ad22:	e0d0      	b.n	800aec6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad24:	f7fd ffe2 	bl	8008cec <HAL_RCC_GetPCLK1Freq>
 800ad28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	469a      	mov	sl, r3
 800ad2e:	f04f 0b00 	mov.w	fp, #0
 800ad32:	46d0      	mov	r8, sl
 800ad34:	46d9      	mov	r9, fp
 800ad36:	eb18 0308 	adds.w	r3, r8, r8
 800ad3a:	eb49 0409 	adc.w	r4, r9, r9
 800ad3e:	4698      	mov	r8, r3
 800ad40:	46a1      	mov	r9, r4
 800ad42:	eb18 080a 	adds.w	r8, r8, sl
 800ad46:	eb49 090b 	adc.w	r9, r9, fp
 800ad4a:	f04f 0100 	mov.w	r1, #0
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ad56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ad5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ad5e:	4688      	mov	r8, r1
 800ad60:	4691      	mov	r9, r2
 800ad62:	eb1a 0508 	adds.w	r5, sl, r8
 800ad66:	eb4b 0609 	adc.w	r6, fp, r9
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	f04f 0400 	mov.w	r4, #0
 800ad7c:	0094      	lsls	r4, r2, #2
 800ad7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad82:	008b      	lsls	r3, r1, #2
 800ad84:	461a      	mov	r2, r3
 800ad86:	4623      	mov	r3, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	f7f5 ff7c 	bl	8000c88 <__aeabi_uldivmod>
 800ad90:	4603      	mov	r3, r0
 800ad92:	460c      	mov	r4, r1
 800ad94:	461a      	mov	r2, r3
 800ad96:	4b50      	ldr	r3, [pc, #320]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ad98:	fba3 2302 	umull	r2, r3, r3, r2
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	469b      	mov	fp, r3
 800ada6:	f04f 0c00 	mov.w	ip, #0
 800adaa:	46d9      	mov	r9, fp
 800adac:	46e2      	mov	sl, ip
 800adae:	eb19 0309 	adds.w	r3, r9, r9
 800adb2:	eb4a 040a 	adc.w	r4, sl, sl
 800adb6:	4699      	mov	r9, r3
 800adb8:	46a2      	mov	sl, r4
 800adba:	eb19 090b 	adds.w	r9, r9, fp
 800adbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800adc2:	f04f 0100 	mov.w	r1, #0
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800add2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800add6:	4689      	mov	r9, r1
 800add8:	4692      	mov	sl, r2
 800adda:	eb1b 0509 	adds.w	r5, fp, r9
 800adde:	eb4c 060a 	adc.w	r6, ip, sl
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	4619      	mov	r1, r3
 800ade8:	f04f 0200 	mov.w	r2, #0
 800adec:	f04f 0300 	mov.w	r3, #0
 800adf0:	f04f 0400 	mov.w	r4, #0
 800adf4:	0094      	lsls	r4, r2, #2
 800adf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800adfa:	008b      	lsls	r3, r1, #2
 800adfc:	461a      	mov	r2, r3
 800adfe:	4623      	mov	r3, r4
 800ae00:	4628      	mov	r0, r5
 800ae02:	4631      	mov	r1, r6
 800ae04:	f7f5 ff40 	bl	8000c88 <__aeabi_uldivmod>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4b32      	ldr	r3, [pc, #200]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ae10:	fba3 1302 	umull	r1, r3, r3, r2
 800ae14:	095b      	lsrs	r3, r3, #5
 800ae16:	2164      	movs	r1, #100	; 0x64
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	3332      	adds	r3, #50	; 0x32
 800ae22:	4a2d      	ldr	r2, [pc, #180]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ae24:	fba2 2303 	umull	r2, r3, r2, r3
 800ae28:	095b      	lsrs	r3, r3, #5
 800ae2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae2e:	4498      	add	r8, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	469b      	mov	fp, r3
 800ae34:	f04f 0c00 	mov.w	ip, #0
 800ae38:	46d9      	mov	r9, fp
 800ae3a:	46e2      	mov	sl, ip
 800ae3c:	eb19 0309 	adds.w	r3, r9, r9
 800ae40:	eb4a 040a 	adc.w	r4, sl, sl
 800ae44:	4699      	mov	r9, r3
 800ae46:	46a2      	mov	sl, r4
 800ae48:	eb19 090b 	adds.w	r9, r9, fp
 800ae4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ae50:	f04f 0100 	mov.w	r1, #0
 800ae54:	f04f 0200 	mov.w	r2, #0
 800ae58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae64:	4689      	mov	r9, r1
 800ae66:	4692      	mov	sl, r2
 800ae68:	eb1b 0509 	adds.w	r5, fp, r9
 800ae6c:	eb4c 060a 	adc.w	r6, ip, sl
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4619      	mov	r1, r3
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	f04f 0300 	mov.w	r3, #0
 800ae7e:	f04f 0400 	mov.w	r4, #0
 800ae82:	0094      	lsls	r4, r2, #2
 800ae84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae88:	008b      	lsls	r3, r1, #2
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	4628      	mov	r0, r5
 800ae90:	4631      	mov	r1, r6
 800ae92:	f7f5 fef9 	bl	8000c88 <__aeabi_uldivmod>
 800ae96:	4603      	mov	r3, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	4b0e      	ldr	r3, [pc, #56]	; (800aed8 <UART_SetConfig+0x6f4>)
 800ae9e:	fba3 1302 	umull	r1, r3, r3, r2
 800aea2:	095b      	lsrs	r3, r3, #5
 800aea4:	2164      	movs	r1, #100	; 0x64
 800aea6:	fb01 f303 	mul.w	r3, r1, r3
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	3332      	adds	r3, #50	; 0x32
 800aeb0:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <UART_SetConfig+0x6f4>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	095b      	lsrs	r3, r3, #5
 800aeb8:	f003 020f 	and.w	r2, r3, #15
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4442      	add	r2, r8
 800aec2:	609a      	str	r2, [r3, #8]
}
 800aec4:	e7ff      	b.n	800aec6 <UART_SetConfig+0x6e2>
 800aec6:	bf00      	nop
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed0:	40011000 	.word	0x40011000
 800aed4:	40011400 	.word	0x40011400
 800aed8:	51eb851f 	.word	0x51eb851f
 800aedc:	00000000 	.word	0x00000000

0800aee0 <cos>:
 800aee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aee2:	ec51 0b10 	vmov	r0, r1, d0
 800aee6:	4a1e      	ldr	r2, [pc, #120]	; (800af60 <cos+0x80>)
 800aee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aeec:	4293      	cmp	r3, r2
 800aeee:	dc06      	bgt.n	800aefe <cos+0x1e>
 800aef0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800af58 <cos+0x78>
 800aef4:	f000 fa74 	bl	800b3e0 <__kernel_cos>
 800aef8:	ec51 0b10 	vmov	r0, r1, d0
 800aefc:	e007      	b.n	800af0e <cos+0x2e>
 800aefe:	4a19      	ldr	r2, [pc, #100]	; (800af64 <cos+0x84>)
 800af00:	4293      	cmp	r3, r2
 800af02:	dd09      	ble.n	800af18 <cos+0x38>
 800af04:	ee10 2a10 	vmov	r2, s0
 800af08:	460b      	mov	r3, r1
 800af0a:	f7f5 f9bd 	bl	8000288 <__aeabi_dsub>
 800af0e:	ec41 0b10 	vmov	d0, r0, r1
 800af12:	b005      	add	sp, #20
 800af14:	f85d fb04 	ldr.w	pc, [sp], #4
 800af18:	4668      	mov	r0, sp
 800af1a:	f000 f86d 	bl	800aff8 <__ieee754_rem_pio2>
 800af1e:	f000 0003 	and.w	r0, r0, #3
 800af22:	2801      	cmp	r0, #1
 800af24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af28:	ed9d 0b00 	vldr	d0, [sp]
 800af2c:	d007      	beq.n	800af3e <cos+0x5e>
 800af2e:	2802      	cmp	r0, #2
 800af30:	d00e      	beq.n	800af50 <cos+0x70>
 800af32:	2800      	cmp	r0, #0
 800af34:	d0de      	beq.n	800aef4 <cos+0x14>
 800af36:	2001      	movs	r0, #1
 800af38:	f000 fe5a 	bl	800bbf0 <__kernel_sin>
 800af3c:	e7dc      	b.n	800aef8 <cos+0x18>
 800af3e:	f000 fe57 	bl	800bbf0 <__kernel_sin>
 800af42:	ec53 2b10 	vmov	r2, r3, d0
 800af46:	ee10 0a10 	vmov	r0, s0
 800af4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800af4e:	e7de      	b.n	800af0e <cos+0x2e>
 800af50:	f000 fa46 	bl	800b3e0 <__kernel_cos>
 800af54:	e7f5      	b.n	800af42 <cos+0x62>
 800af56:	bf00      	nop
	...
 800af60:	3fe921fb 	.word	0x3fe921fb
 800af64:	7fefffff 	.word	0x7fefffff

0800af68 <sin>:
 800af68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af6a:	ec51 0b10 	vmov	r0, r1, d0
 800af6e:	4a20      	ldr	r2, [pc, #128]	; (800aff0 <sin+0x88>)
 800af70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af74:	4293      	cmp	r3, r2
 800af76:	dc07      	bgt.n	800af88 <sin+0x20>
 800af78:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800afe8 <sin+0x80>
 800af7c:	2000      	movs	r0, #0
 800af7e:	f000 fe37 	bl	800bbf0 <__kernel_sin>
 800af82:	ec51 0b10 	vmov	r0, r1, d0
 800af86:	e007      	b.n	800af98 <sin+0x30>
 800af88:	4a1a      	ldr	r2, [pc, #104]	; (800aff4 <sin+0x8c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	dd09      	ble.n	800afa2 <sin+0x3a>
 800af8e:	ee10 2a10 	vmov	r2, s0
 800af92:	460b      	mov	r3, r1
 800af94:	f7f5 f978 	bl	8000288 <__aeabi_dsub>
 800af98:	ec41 0b10 	vmov	d0, r0, r1
 800af9c:	b005      	add	sp, #20
 800af9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800afa2:	4668      	mov	r0, sp
 800afa4:	f000 f828 	bl	800aff8 <__ieee754_rem_pio2>
 800afa8:	f000 0003 	and.w	r0, r0, #3
 800afac:	2801      	cmp	r0, #1
 800afae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afb2:	ed9d 0b00 	vldr	d0, [sp]
 800afb6:	d004      	beq.n	800afc2 <sin+0x5a>
 800afb8:	2802      	cmp	r0, #2
 800afba:	d005      	beq.n	800afc8 <sin+0x60>
 800afbc:	b970      	cbnz	r0, 800afdc <sin+0x74>
 800afbe:	2001      	movs	r0, #1
 800afc0:	e7dd      	b.n	800af7e <sin+0x16>
 800afc2:	f000 fa0d 	bl	800b3e0 <__kernel_cos>
 800afc6:	e7dc      	b.n	800af82 <sin+0x1a>
 800afc8:	2001      	movs	r0, #1
 800afca:	f000 fe11 	bl	800bbf0 <__kernel_sin>
 800afce:	ec53 2b10 	vmov	r2, r3, d0
 800afd2:	ee10 0a10 	vmov	r0, s0
 800afd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afda:	e7dd      	b.n	800af98 <sin+0x30>
 800afdc:	f000 fa00 	bl	800b3e0 <__kernel_cos>
 800afe0:	e7f5      	b.n	800afce <sin+0x66>
 800afe2:	bf00      	nop
 800afe4:	f3af 8000 	nop.w
	...
 800aff0:	3fe921fb 	.word	0x3fe921fb
 800aff4:	7fefffff 	.word	0x7fefffff

0800aff8 <__ieee754_rem_pio2>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ec57 6b10 	vmov	r6, r7, d0
 800b000:	4bc3      	ldr	r3, [pc, #780]	; (800b310 <__ieee754_rem_pio2+0x318>)
 800b002:	b08d      	sub	sp, #52	; 0x34
 800b004:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b008:	4598      	cmp	r8, r3
 800b00a:	4604      	mov	r4, r0
 800b00c:	9704      	str	r7, [sp, #16]
 800b00e:	dc07      	bgt.n	800b020 <__ieee754_rem_pio2+0x28>
 800b010:	2200      	movs	r2, #0
 800b012:	2300      	movs	r3, #0
 800b014:	ed84 0b00 	vstr	d0, [r4]
 800b018:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b01c:	2500      	movs	r5, #0
 800b01e:	e027      	b.n	800b070 <__ieee754_rem_pio2+0x78>
 800b020:	4bbc      	ldr	r3, [pc, #752]	; (800b314 <__ieee754_rem_pio2+0x31c>)
 800b022:	4598      	cmp	r8, r3
 800b024:	dc75      	bgt.n	800b112 <__ieee754_rem_pio2+0x11a>
 800b026:	9b04      	ldr	r3, [sp, #16]
 800b028:	4dbb      	ldr	r5, [pc, #748]	; (800b318 <__ieee754_rem_pio2+0x320>)
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	ee10 0a10 	vmov	r0, s0
 800b030:	a3a9      	add	r3, pc, #676	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2e0>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	4639      	mov	r1, r7
 800b038:	dd36      	ble.n	800b0a8 <__ieee754_rem_pio2+0xb0>
 800b03a:	f7f5 f925 	bl	8000288 <__aeabi_dsub>
 800b03e:	45a8      	cmp	r8, r5
 800b040:	4606      	mov	r6, r0
 800b042:	460f      	mov	r7, r1
 800b044:	d018      	beq.n	800b078 <__ieee754_rem_pio2+0x80>
 800b046:	a3a6      	add	r3, pc, #664	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x2e8>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 f91c 	bl	8000288 <__aeabi_dsub>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	e9c4 2300 	strd	r2, r3, [r4]
 800b058:	4630      	mov	r0, r6
 800b05a:	4639      	mov	r1, r7
 800b05c:	f7f5 f914 	bl	8000288 <__aeabi_dsub>
 800b060:	a39f      	add	r3, pc, #636	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x2e8>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f90f 	bl	8000288 <__aeabi_dsub>
 800b06a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b06e:	2501      	movs	r5, #1
 800b070:	4628      	mov	r0, r5
 800b072:	b00d      	add	sp, #52	; 0x34
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	a39b      	add	r3, pc, #620	; (adr r3, 800b2e8 <__ieee754_rem_pio2+0x2f0>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 f903 	bl	8000288 <__aeabi_dsub>
 800b082:	a39b      	add	r3, pc, #620	; (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2f8>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	4606      	mov	r6, r0
 800b08a:	460f      	mov	r7, r1
 800b08c:	f7f5 f8fc 	bl	8000288 <__aeabi_dsub>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	e9c4 2300 	strd	r2, r3, [r4]
 800b098:	4630      	mov	r0, r6
 800b09a:	4639      	mov	r1, r7
 800b09c:	f7f5 f8f4 	bl	8000288 <__aeabi_dsub>
 800b0a0:	a393      	add	r3, pc, #588	; (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2f8>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	e7de      	b.n	800b066 <__ieee754_rem_pio2+0x6e>
 800b0a8:	f7f5 f8f0 	bl	800028c <__adddf3>
 800b0ac:	45a8      	cmp	r8, r5
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	460f      	mov	r7, r1
 800b0b2:	d016      	beq.n	800b0e2 <__ieee754_rem_pio2+0xea>
 800b0b4:	a38a      	add	r3, pc, #552	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x2e8>)
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	f7f5 f8e7 	bl	800028c <__adddf3>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	e9c4 2300 	strd	r2, r3, [r4]
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 f8dd 	bl	8000288 <__aeabi_dsub>
 800b0ce:	a384      	add	r3, pc, #528	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x2e8>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f7f5 f8da 	bl	800028c <__adddf3>
 800b0d8:	f04f 35ff 	mov.w	r5, #4294967295
 800b0dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0e0:	e7c6      	b.n	800b070 <__ieee754_rem_pio2+0x78>
 800b0e2:	a381      	add	r3, pc, #516	; (adr r3, 800b2e8 <__ieee754_rem_pio2+0x2f0>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f8d0 	bl	800028c <__adddf3>
 800b0ec:	a380      	add	r3, pc, #512	; (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2f8>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	460f      	mov	r7, r1
 800b0f6:	f7f5 f8c9 	bl	800028c <__adddf3>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	e9c4 2300 	strd	r2, r3, [r4]
 800b102:	4630      	mov	r0, r6
 800b104:	4639      	mov	r1, r7
 800b106:	f7f5 f8bf 	bl	8000288 <__aeabi_dsub>
 800b10a:	a379      	add	r3, pc, #484	; (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2f8>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	e7e0      	b.n	800b0d4 <__ieee754_rem_pio2+0xdc>
 800b112:	4b82      	ldr	r3, [pc, #520]	; (800b31c <__ieee754_rem_pio2+0x324>)
 800b114:	4598      	cmp	r8, r3
 800b116:	f300 80d0 	bgt.w	800b2ba <__ieee754_rem_pio2+0x2c2>
 800b11a:	f000 fe23 	bl	800bd64 <fabs>
 800b11e:	ec57 6b10 	vmov	r6, r7, d0
 800b122:	ee10 0a10 	vmov	r0, s0
 800b126:	a374      	add	r3, pc, #464	; (adr r3, 800b2f8 <__ieee754_rem_pio2+0x300>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	4639      	mov	r1, r7
 800b12e:	f7f5 fa63 	bl	80005f8 <__aeabi_dmul>
 800b132:	2200      	movs	r2, #0
 800b134:	4b7a      	ldr	r3, [pc, #488]	; (800b320 <__ieee754_rem_pio2+0x328>)
 800b136:	f7f5 f8a9 	bl	800028c <__adddf3>
 800b13a:	f7f5 fd0d 	bl	8000b58 <__aeabi_d2iz>
 800b13e:	4605      	mov	r5, r0
 800b140:	f7f5 f9f0 	bl	8000524 <__aeabi_i2d>
 800b144:	a364      	add	r3, pc, #400	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2e0>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b14e:	f7f5 fa53 	bl	80005f8 <__aeabi_dmul>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	a360      	add	r3, pc, #384	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x2e8>)
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	4682      	mov	sl, r0
 800b166:	468b      	mov	fp, r1
 800b168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b16c:	f7f5 fa44 	bl	80005f8 <__aeabi_dmul>
 800b170:	2d1f      	cmp	r5, #31
 800b172:	4606      	mov	r6, r0
 800b174:	460f      	mov	r7, r1
 800b176:	dc0c      	bgt.n	800b192 <__ieee754_rem_pio2+0x19a>
 800b178:	1e6a      	subs	r2, r5, #1
 800b17a:	4b6a      	ldr	r3, [pc, #424]	; (800b324 <__ieee754_rem_pio2+0x32c>)
 800b17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b180:	4543      	cmp	r3, r8
 800b182:	d006      	beq.n	800b192 <__ieee754_rem_pio2+0x19a>
 800b184:	4632      	mov	r2, r6
 800b186:	463b      	mov	r3, r7
 800b188:	4650      	mov	r0, sl
 800b18a:	4659      	mov	r1, fp
 800b18c:	f7f5 f87c 	bl	8000288 <__aeabi_dsub>
 800b190:	e00e      	b.n	800b1b0 <__ieee754_rem_pio2+0x1b8>
 800b192:	4632      	mov	r2, r6
 800b194:	463b      	mov	r3, r7
 800b196:	4650      	mov	r0, sl
 800b198:	4659      	mov	r1, fp
 800b19a:	f7f5 f875 	bl	8000288 <__aeabi_dsub>
 800b19e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	9a05      	ldr	r2, [sp, #20]
 800b1a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b10      	cmp	r3, #16
 800b1ae:	dc02      	bgt.n	800b1b6 <__ieee754_rem_pio2+0x1be>
 800b1b0:	e9c4 0100 	strd	r0, r1, [r4]
 800b1b4:	e039      	b.n	800b22a <__ieee754_rem_pio2+0x232>
 800b1b6:	a34c      	add	r3, pc, #304	; (adr r3, 800b2e8 <__ieee754_rem_pio2+0x2f0>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	460f      	mov	r7, r1
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4650      	mov	r0, sl
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	f7f5 f85a 	bl	8000288 <__aeabi_dsub>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4680      	mov	r8, r0
 800b1da:	4689      	mov	r9, r1
 800b1dc:	4650      	mov	r0, sl
 800b1de:	4659      	mov	r1, fp
 800b1e0:	f7f5 f852 	bl	8000288 <__aeabi_dsub>
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	f7f5 f84e 	bl	8000288 <__aeabi_dsub>
 800b1ec:	a340      	add	r3, pc, #256	; (adr r3, 800b2f0 <__ieee754_rem_pio2+0x2f8>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1fa:	f7f5 f9fd 	bl	80005f8 <__aeabi_dmul>
 800b1fe:	4632      	mov	r2, r6
 800b200:	463b      	mov	r3, r7
 800b202:	f7f5 f841 	bl	8000288 <__aeabi_dsub>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	4606      	mov	r6, r0
 800b20c:	460f      	mov	r7, r1
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 f839 	bl	8000288 <__aeabi_dsub>
 800b216:	9a05      	ldr	r2, [sp, #20]
 800b218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	2b31      	cmp	r3, #49	; 0x31
 800b220:	dc20      	bgt.n	800b264 <__ieee754_rem_pio2+0x26c>
 800b222:	e9c4 0100 	strd	r0, r1, [r4]
 800b226:	46c2      	mov	sl, r8
 800b228:	46cb      	mov	fp, r9
 800b22a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b22e:	4650      	mov	r0, sl
 800b230:	4642      	mov	r2, r8
 800b232:	464b      	mov	r3, r9
 800b234:	4659      	mov	r1, fp
 800b236:	f7f5 f827 	bl	8000288 <__aeabi_dsub>
 800b23a:	463b      	mov	r3, r7
 800b23c:	4632      	mov	r2, r6
 800b23e:	f7f5 f823 	bl	8000288 <__aeabi_dsub>
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b24a:	f6bf af11 	bge.w	800b070 <__ieee754_rem_pio2+0x78>
 800b24e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b252:	6063      	str	r3, [r4, #4]
 800b254:	f8c4 8000 	str.w	r8, [r4]
 800b258:	60a0      	str	r0, [r4, #8]
 800b25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b25e:	60e3      	str	r3, [r4, #12]
 800b260:	426d      	negs	r5, r5
 800b262:	e705      	b.n	800b070 <__ieee754_rem_pio2+0x78>
 800b264:	a326      	add	r3, pc, #152	; (adr r3, 800b300 <__ieee754_rem_pio2+0x308>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26e:	f7f5 f9c3 	bl	80005f8 <__aeabi_dmul>
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 f803 	bl	8000288 <__aeabi_dsub>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4682      	mov	sl, r0
 800b288:	468b      	mov	fp, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f4 fffb 	bl	8000288 <__aeabi_dsub>
 800b292:	4632      	mov	r2, r6
 800b294:	463b      	mov	r3, r7
 800b296:	f7f4 fff7 	bl	8000288 <__aeabi_dsub>
 800b29a:	a31b      	add	r3, pc, #108	; (adr r3, 800b308 <__ieee754_rem_pio2+0x310>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a8:	f7f5 f9a6 	bl	80005f8 <__aeabi_dmul>
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	f7f4 ffea 	bl	8000288 <__aeabi_dsub>
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	e764      	b.n	800b184 <__ieee754_rem_pio2+0x18c>
 800b2ba:	4b1b      	ldr	r3, [pc, #108]	; (800b328 <__ieee754_rem_pio2+0x330>)
 800b2bc:	4598      	cmp	r8, r3
 800b2be:	dd35      	ble.n	800b32c <__ieee754_rem_pio2+0x334>
 800b2c0:	ee10 2a10 	vmov	r2, s0
 800b2c4:	463b      	mov	r3, r7
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f4 ffdd 	bl	8000288 <__aeabi_dsub>
 800b2ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2d2:	e9c4 0100 	strd	r0, r1, [r4]
 800b2d6:	e6a1      	b.n	800b01c <__ieee754_rem_pio2+0x24>
 800b2d8:	54400000 	.word	0x54400000
 800b2dc:	3ff921fb 	.word	0x3ff921fb
 800b2e0:	1a626331 	.word	0x1a626331
 800b2e4:	3dd0b461 	.word	0x3dd0b461
 800b2e8:	1a600000 	.word	0x1a600000
 800b2ec:	3dd0b461 	.word	0x3dd0b461
 800b2f0:	2e037073 	.word	0x2e037073
 800b2f4:	3ba3198a 	.word	0x3ba3198a
 800b2f8:	6dc9c883 	.word	0x6dc9c883
 800b2fc:	3fe45f30 	.word	0x3fe45f30
 800b300:	2e000000 	.word	0x2e000000
 800b304:	3ba3198a 	.word	0x3ba3198a
 800b308:	252049c1 	.word	0x252049c1
 800b30c:	397b839a 	.word	0x397b839a
 800b310:	3fe921fb 	.word	0x3fe921fb
 800b314:	4002d97b 	.word	0x4002d97b
 800b318:	3ff921fb 	.word	0x3ff921fb
 800b31c:	413921fb 	.word	0x413921fb
 800b320:	3fe00000 	.word	0x3fe00000
 800b324:	08010524 	.word	0x08010524
 800b328:	7fefffff 	.word	0x7fefffff
 800b32c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b330:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b334:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b338:	4630      	mov	r0, r6
 800b33a:	460f      	mov	r7, r1
 800b33c:	f7f5 fc0c 	bl	8000b58 <__aeabi_d2iz>
 800b340:	f7f5 f8f0 	bl	8000524 <__aeabi_i2d>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b350:	f7f4 ff9a 	bl	8000288 <__aeabi_dsub>
 800b354:	2200      	movs	r2, #0
 800b356:	4b1f      	ldr	r3, [pc, #124]	; (800b3d4 <__ieee754_rem_pio2+0x3dc>)
 800b358:	f7f5 f94e 	bl	80005f8 <__aeabi_dmul>
 800b35c:	460f      	mov	r7, r1
 800b35e:	4606      	mov	r6, r0
 800b360:	f7f5 fbfa 	bl	8000b58 <__aeabi_d2iz>
 800b364:	f7f5 f8de 	bl	8000524 <__aeabi_i2d>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b374:	f7f4 ff88 	bl	8000288 <__aeabi_dsub>
 800b378:	2200      	movs	r2, #0
 800b37a:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <__ieee754_rem_pio2+0x3dc>)
 800b37c:	f7f5 f93c 	bl	80005f8 <__aeabi_dmul>
 800b380:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b384:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b388:	f04f 0803 	mov.w	r8, #3
 800b38c:	2600      	movs	r6, #0
 800b38e:	2700      	movs	r7, #0
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b398:	f108 3aff 	add.w	sl, r8, #4294967295
 800b39c:	f7f5 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a0:	b9b0      	cbnz	r0, 800b3d0 <__ieee754_rem_pio2+0x3d8>
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <__ieee754_rem_pio2+0x3e0>)
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4643      	mov	r3, r8
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	a806      	add	r0, sp, #24
 800b3b2:	f000 f8dd 	bl	800b570 <__kernel_rem_pio2>
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	f6bf ae58 	bge.w	800b070 <__ieee754_rem_pio2+0x78>
 800b3c0:	6863      	ldr	r3, [r4, #4]
 800b3c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	68e3      	ldr	r3, [r4, #12]
 800b3ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3ce:	e746      	b.n	800b25e <__ieee754_rem_pio2+0x266>
 800b3d0:	46d0      	mov	r8, sl
 800b3d2:	e7dd      	b.n	800b390 <__ieee754_rem_pio2+0x398>
 800b3d4:	41700000 	.word	0x41700000
 800b3d8:	080105a4 	.word	0x080105a4
 800b3dc:	00000000 	.word	0x00000000

0800b3e0 <__kernel_cos>:
 800b3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	ec59 8b10 	vmov	r8, r9, d0
 800b3e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b3ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b3f0:	ed2d 8b02 	vpush	{d8}
 800b3f4:	eeb0 8a41 	vmov.f32	s16, s2
 800b3f8:	eef0 8a61 	vmov.f32	s17, s3
 800b3fc:	da07      	bge.n	800b40e <__kernel_cos+0x2e>
 800b3fe:	ee10 0a10 	vmov	r0, s0
 800b402:	4649      	mov	r1, r9
 800b404:	f7f5 fba8 	bl	8000b58 <__aeabi_d2iz>
 800b408:	2800      	cmp	r0, #0
 800b40a:	f000 8089 	beq.w	800b520 <__kernel_cos+0x140>
 800b40e:	4642      	mov	r2, r8
 800b410:	464b      	mov	r3, r9
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f5 f8ef 	bl	80005f8 <__aeabi_dmul>
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b4e      	ldr	r3, [pc, #312]	; (800b558 <__kernel_cos+0x178>)
 800b41e:	4604      	mov	r4, r0
 800b420:	460d      	mov	r5, r1
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	a340      	add	r3, pc, #256	; (adr r3, 800b528 <__kernel_cos+0x148>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4682      	mov	sl, r0
 800b42e:	468b      	mov	fp, r1
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	a33d      	add	r3, pc, #244	; (adr r3, 800b530 <__kernel_cos+0x150>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f7f4 ff25 	bl	800028c <__adddf3>
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	f7f5 f8d7 	bl	80005f8 <__aeabi_dmul>
 800b44a:	a33b      	add	r3, pc, #236	; (adr r3, 800b538 <__kernel_cos+0x158>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f7f4 ff1a 	bl	8000288 <__aeabi_dsub>
 800b454:	4622      	mov	r2, r4
 800b456:	462b      	mov	r3, r5
 800b458:	f7f5 f8ce 	bl	80005f8 <__aeabi_dmul>
 800b45c:	a338      	add	r3, pc, #224	; (adr r3, 800b540 <__kernel_cos+0x160>)
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	f7f4 ff13 	bl	800028c <__adddf3>
 800b466:	4622      	mov	r2, r4
 800b468:	462b      	mov	r3, r5
 800b46a:	f7f5 f8c5 	bl	80005f8 <__aeabi_dmul>
 800b46e:	a336      	add	r3, pc, #216	; (adr r3, 800b548 <__kernel_cos+0x168>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f7f4 ff08 	bl	8000288 <__aeabi_dsub>
 800b478:	4622      	mov	r2, r4
 800b47a:	462b      	mov	r3, r5
 800b47c:	f7f5 f8bc 	bl	80005f8 <__aeabi_dmul>
 800b480:	a333      	add	r3, pc, #204	; (adr r3, 800b550 <__kernel_cos+0x170>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f4 ff01 	bl	800028c <__adddf3>
 800b48a:	4622      	mov	r2, r4
 800b48c:	462b      	mov	r3, r5
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	4622      	mov	r2, r4
 800b494:	462b      	mov	r3, r5
 800b496:	f7f5 f8af 	bl	80005f8 <__aeabi_dmul>
 800b49a:	ec53 2b18 	vmov	r2, r3, d8
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f5 f8a7 	bl	80005f8 <__aeabi_dmul>
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f7f4 fee9 	bl	8000288 <__aeabi_dsub>
 800b4b6:	4b29      	ldr	r3, [pc, #164]	; (800b55c <__kernel_cos+0x17c>)
 800b4b8:	429e      	cmp	r6, r3
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	4689      	mov	r9, r1
 800b4be:	dc11      	bgt.n	800b4e4 <__kernel_cos+0x104>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4650      	mov	r0, sl
 800b4c6:	4659      	mov	r1, fp
 800b4c8:	f7f4 fede 	bl	8000288 <__aeabi_dsub>
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4924      	ldr	r1, [pc, #144]	; (800b560 <__kernel_cos+0x180>)
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	f7f4 fed8 	bl	8000288 <__aeabi_dsub>
 800b4d8:	ecbd 8b02 	vpop	{d8}
 800b4dc:	ec41 0b10 	vmov	d0, r0, r1
 800b4e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	4b1f      	ldr	r3, [pc, #124]	; (800b564 <__kernel_cos+0x184>)
 800b4e6:	491e      	ldr	r1, [pc, #120]	; (800b560 <__kernel_cos+0x180>)
 800b4e8:	429e      	cmp	r6, r3
 800b4ea:	bfcc      	ite	gt
 800b4ec:	4d1e      	ldrgt	r5, [pc, #120]	; (800b568 <__kernel_cos+0x188>)
 800b4ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b4f2:	2400      	movs	r4, #0
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	f7f4 fec5 	bl	8000288 <__aeabi_dsub>
 800b4fe:	4622      	mov	r2, r4
 800b500:	4606      	mov	r6, r0
 800b502:	460f      	mov	r7, r1
 800b504:	462b      	mov	r3, r5
 800b506:	4650      	mov	r0, sl
 800b508:	4659      	mov	r1, fp
 800b50a:	f7f4 febd 	bl	8000288 <__aeabi_dsub>
 800b50e:	4642      	mov	r2, r8
 800b510:	464b      	mov	r3, r9
 800b512:	f7f4 feb9 	bl	8000288 <__aeabi_dsub>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	e7d9      	b.n	800b4d4 <__kernel_cos+0xf4>
 800b520:	2000      	movs	r0, #0
 800b522:	490f      	ldr	r1, [pc, #60]	; (800b560 <__kernel_cos+0x180>)
 800b524:	e7d8      	b.n	800b4d8 <__kernel_cos+0xf8>
 800b526:	bf00      	nop
 800b528:	be8838d4 	.word	0xbe8838d4
 800b52c:	bda8fae9 	.word	0xbda8fae9
 800b530:	bdb4b1c4 	.word	0xbdb4b1c4
 800b534:	3e21ee9e 	.word	0x3e21ee9e
 800b538:	809c52ad 	.word	0x809c52ad
 800b53c:	3e927e4f 	.word	0x3e927e4f
 800b540:	19cb1590 	.word	0x19cb1590
 800b544:	3efa01a0 	.word	0x3efa01a0
 800b548:	16c15177 	.word	0x16c15177
 800b54c:	3f56c16c 	.word	0x3f56c16c
 800b550:	5555554c 	.word	0x5555554c
 800b554:	3fa55555 	.word	0x3fa55555
 800b558:	3fe00000 	.word	0x3fe00000
 800b55c:	3fd33332 	.word	0x3fd33332
 800b560:	3ff00000 	.word	0x3ff00000
 800b564:	3fe90000 	.word	0x3fe90000
 800b568:	3fd20000 	.word	0x3fd20000
 800b56c:	00000000 	.word	0x00000000

0800b570 <__kernel_rem_pio2>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	ed2d 8b02 	vpush	{d8}
 800b578:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b57c:	1ed4      	subs	r4, r2, #3
 800b57e:	9308      	str	r3, [sp, #32]
 800b580:	9101      	str	r1, [sp, #4]
 800b582:	4bc5      	ldr	r3, [pc, #788]	; (800b898 <__kernel_rem_pio2+0x328>)
 800b584:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b586:	9009      	str	r0, [sp, #36]	; 0x24
 800b588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	9b08      	ldr	r3, [sp, #32]
 800b590:	3b01      	subs	r3, #1
 800b592:	9307      	str	r3, [sp, #28]
 800b594:	2318      	movs	r3, #24
 800b596:	fb94 f4f3 	sdiv	r4, r4, r3
 800b59a:	f06f 0317 	mvn.w	r3, #23
 800b59e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b5a2:	fb04 3303 	mla	r3, r4, r3, r3
 800b5a6:	eb03 0a02 	add.w	sl, r3, r2
 800b5aa:	9b04      	ldr	r3, [sp, #16]
 800b5ac:	9a07      	ldr	r2, [sp, #28]
 800b5ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b888 <__kernel_rem_pio2+0x318>
 800b5b2:	eb03 0802 	add.w	r8, r3, r2
 800b5b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b5b8:	1aa7      	subs	r7, r4, r2
 800b5ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b5be:	ae22      	add	r6, sp, #136	; 0x88
 800b5c0:	2500      	movs	r5, #0
 800b5c2:	4545      	cmp	r5, r8
 800b5c4:	dd13      	ble.n	800b5ee <__kernel_rem_pio2+0x7e>
 800b5c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b888 <__kernel_rem_pio2+0x318>
 800b5ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b5ce:	2600      	movs	r6, #0
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	429e      	cmp	r6, r3
 800b5d4:	dc32      	bgt.n	800b63c <__kernel_rem_pio2+0xcc>
 800b5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d8:	9302      	str	r3, [sp, #8]
 800b5da:	9b08      	ldr	r3, [sp, #32]
 800b5dc:	199d      	adds	r5, r3, r6
 800b5de:	ab22      	add	r3, sp, #136	; 0x88
 800b5e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b5e4:	9306      	str	r3, [sp, #24]
 800b5e6:	ec59 8b18 	vmov	r8, r9, d8
 800b5ea:	2700      	movs	r7, #0
 800b5ec:	e01f      	b.n	800b62e <__kernel_rem_pio2+0xbe>
 800b5ee:	42ef      	cmn	r7, r5
 800b5f0:	d407      	bmi.n	800b602 <__kernel_rem_pio2+0x92>
 800b5f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b5f6:	f7f4 ff95 	bl	8000524 <__aeabi_i2d>
 800b5fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b5fe:	3501      	adds	r5, #1
 800b600:	e7df      	b.n	800b5c2 <__kernel_rem_pio2+0x52>
 800b602:	ec51 0b18 	vmov	r0, r1, d8
 800b606:	e7f8      	b.n	800b5fa <__kernel_rem_pio2+0x8a>
 800b608:	9906      	ldr	r1, [sp, #24]
 800b60a:	9d02      	ldr	r5, [sp, #8]
 800b60c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b610:	9106      	str	r1, [sp, #24]
 800b612:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b616:	9502      	str	r5, [sp, #8]
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4640      	mov	r0, r8
 800b622:	4649      	mov	r1, r9
 800b624:	f7f4 fe32 	bl	800028c <__adddf3>
 800b628:	3701      	adds	r7, #1
 800b62a:	4680      	mov	r8, r0
 800b62c:	4689      	mov	r9, r1
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	429f      	cmp	r7, r3
 800b632:	dde9      	ble.n	800b608 <__kernel_rem_pio2+0x98>
 800b634:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b638:	3601      	adds	r6, #1
 800b63a:	e7c9      	b.n	800b5d0 <__kernel_rem_pio2+0x60>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	aa0e      	add	r2, sp, #56	; 0x38
 800b640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b644:	930c      	str	r3, [sp, #48]	; 0x30
 800b646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b648:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b64c:	9c04      	ldr	r4, [sp, #16]
 800b64e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b650:	ab9a      	add	r3, sp, #616	; 0x268
 800b652:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b656:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b65a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b65e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b662:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b666:	ab9a      	add	r3, sp, #616	; 0x268
 800b668:	445b      	add	r3, fp
 800b66a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b66e:	2500      	movs	r5, #0
 800b670:	1b63      	subs	r3, r4, r5
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc78      	bgt.n	800b768 <__kernel_rem_pio2+0x1f8>
 800b676:	4650      	mov	r0, sl
 800b678:	ec49 8b10 	vmov	d0, r8, r9
 800b67c:	f000 fc00 	bl	800be80 <scalbn>
 800b680:	ec57 6b10 	vmov	r6, r7, d0
 800b684:	2200      	movs	r2, #0
 800b686:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b68a:	ee10 0a10 	vmov	r0, s0
 800b68e:	4639      	mov	r1, r7
 800b690:	f7f4 ffb2 	bl	80005f8 <__aeabi_dmul>
 800b694:	ec41 0b10 	vmov	d0, r0, r1
 800b698:	f000 fb6e 	bl	800bd78 <floor>
 800b69c:	2200      	movs	r2, #0
 800b69e:	ec51 0b10 	vmov	r0, r1, d0
 800b6a2:	4b7e      	ldr	r3, [pc, #504]	; (800b89c <__kernel_rem_pio2+0x32c>)
 800b6a4:	f7f4 ffa8 	bl	80005f8 <__aeabi_dmul>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 fdea 	bl	8000288 <__aeabi_dsub>
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	f7f5 fa4e 	bl	8000b58 <__aeabi_d2iz>
 800b6bc:	9006      	str	r0, [sp, #24]
 800b6be:	f7f4 ff31 	bl	8000524 <__aeabi_i2d>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7f4 fddd 	bl	8000288 <__aeabi_dsub>
 800b6ce:	f1ba 0f00 	cmp.w	sl, #0
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	dd6c      	ble.n	800b7b2 <__kernel_rem_pio2+0x242>
 800b6d8:	1e62      	subs	r2, r4, #1
 800b6da:	ab0e      	add	r3, sp, #56	; 0x38
 800b6dc:	f1ca 0118 	rsb	r1, sl, #24
 800b6e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b6e4:	9d06      	ldr	r5, [sp, #24]
 800b6e6:	fa40 f301 	asr.w	r3, r0, r1
 800b6ea:	441d      	add	r5, r3
 800b6ec:	408b      	lsls	r3, r1
 800b6ee:	1ac0      	subs	r0, r0, r3
 800b6f0:	ab0e      	add	r3, sp, #56	; 0x38
 800b6f2:	9506      	str	r5, [sp, #24]
 800b6f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b6f8:	f1ca 0317 	rsb	r3, sl, #23
 800b6fc:	fa40 f303 	asr.w	r3, r0, r3
 800b700:	9302      	str	r3, [sp, #8]
 800b702:	9b02      	ldr	r3, [sp, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	dd62      	ble.n	800b7ce <__kernel_rem_pio2+0x25e>
 800b708:	9b06      	ldr	r3, [sp, #24]
 800b70a:	2200      	movs	r2, #0
 800b70c:	3301      	adds	r3, #1
 800b70e:	9306      	str	r3, [sp, #24]
 800b710:	4615      	mov	r5, r2
 800b712:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b716:	4294      	cmp	r4, r2
 800b718:	f300 8095 	bgt.w	800b846 <__kernel_rem_pio2+0x2d6>
 800b71c:	f1ba 0f00 	cmp.w	sl, #0
 800b720:	dd07      	ble.n	800b732 <__kernel_rem_pio2+0x1c2>
 800b722:	f1ba 0f01 	cmp.w	sl, #1
 800b726:	f000 80a2 	beq.w	800b86e <__kernel_rem_pio2+0x2fe>
 800b72a:	f1ba 0f02 	cmp.w	sl, #2
 800b72e:	f000 80c1 	beq.w	800b8b4 <__kernel_rem_pio2+0x344>
 800b732:	9b02      	ldr	r3, [sp, #8]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d14a      	bne.n	800b7ce <__kernel_rem_pio2+0x25e>
 800b738:	4632      	mov	r2, r6
 800b73a:	463b      	mov	r3, r7
 800b73c:	2000      	movs	r0, #0
 800b73e:	4958      	ldr	r1, [pc, #352]	; (800b8a0 <__kernel_rem_pio2+0x330>)
 800b740:	f7f4 fda2 	bl	8000288 <__aeabi_dsub>
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	2d00      	cmp	r5, #0
 800b74a:	d040      	beq.n	800b7ce <__kernel_rem_pio2+0x25e>
 800b74c:	4650      	mov	r0, sl
 800b74e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b890 <__kernel_rem_pio2+0x320>
 800b752:	f000 fb95 	bl	800be80 <scalbn>
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	ec53 2b10 	vmov	r2, r3, d0
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	4606      	mov	r6, r0
 800b764:	460f      	mov	r7, r1
 800b766:	e032      	b.n	800b7ce <__kernel_rem_pio2+0x25e>
 800b768:	2200      	movs	r2, #0
 800b76a:	4b4e      	ldr	r3, [pc, #312]	; (800b8a4 <__kernel_rem_pio2+0x334>)
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f4 ff42 	bl	80005f8 <__aeabi_dmul>
 800b774:	f7f5 f9f0 	bl	8000b58 <__aeabi_d2iz>
 800b778:	f7f4 fed4 	bl	8000524 <__aeabi_i2d>
 800b77c:	2200      	movs	r2, #0
 800b77e:	4b4a      	ldr	r3, [pc, #296]	; (800b8a8 <__kernel_rem_pio2+0x338>)
 800b780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b784:	f7f4 ff38 	bl	80005f8 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4640      	mov	r0, r8
 800b78e:	4649      	mov	r1, r9
 800b790:	f7f4 fd7a 	bl	8000288 <__aeabi_dsub>
 800b794:	f7f5 f9e0 	bl	8000b58 <__aeabi_d2iz>
 800b798:	ab0e      	add	r3, sp, #56	; 0x38
 800b79a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b79e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a6:	f7f4 fd71 	bl	800028c <__adddf3>
 800b7aa:	3501      	adds	r5, #1
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	4689      	mov	r9, r1
 800b7b0:	e75e      	b.n	800b670 <__kernel_rem_pio2+0x100>
 800b7b2:	d105      	bne.n	800b7c0 <__kernel_rem_pio2+0x250>
 800b7b4:	1e63      	subs	r3, r4, #1
 800b7b6:	aa0e      	add	r2, sp, #56	; 0x38
 800b7b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b7bc:	15c3      	asrs	r3, r0, #23
 800b7be:	e79f      	b.n	800b700 <__kernel_rem_pio2+0x190>
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	4b3a      	ldr	r3, [pc, #232]	; (800b8ac <__kernel_rem_pio2+0x33c>)
 800b7c4:	f7f5 f99e 	bl	8000b04 <__aeabi_dcmpge>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d139      	bne.n	800b840 <__kernel_rem_pio2+0x2d0>
 800b7cc:	9002      	str	r0, [sp, #8]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f5 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f000 80c7 	beq.w	800b96e <__kernel_rem_pio2+0x3fe>
 800b7e0:	1e65      	subs	r5, r4, #1
 800b7e2:	462b      	mov	r3, r5
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	9904      	ldr	r1, [sp, #16]
 800b7e8:	428b      	cmp	r3, r1
 800b7ea:	da6a      	bge.n	800b8c2 <__kernel_rem_pio2+0x352>
 800b7ec:	2a00      	cmp	r2, #0
 800b7ee:	f000 8088 	beq.w	800b902 <__kernel_rem_pio2+0x392>
 800b7f2:	ab0e      	add	r3, sp, #56	; 0x38
 800b7f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b7f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 80b4 	beq.w	800b96a <__kernel_rem_pio2+0x3fa>
 800b802:	4650      	mov	r0, sl
 800b804:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b890 <__kernel_rem_pio2+0x320>
 800b808:	f000 fb3a 	bl	800be80 <scalbn>
 800b80c:	00ec      	lsls	r4, r5, #3
 800b80e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b810:	191e      	adds	r6, r3, r4
 800b812:	ec59 8b10 	vmov	r8, r9, d0
 800b816:	f106 0a08 	add.w	sl, r6, #8
 800b81a:	462f      	mov	r7, r5
 800b81c:	2f00      	cmp	r7, #0
 800b81e:	f280 80df 	bge.w	800b9e0 <__kernel_rem_pio2+0x470>
 800b822:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b888 <__kernel_rem_pio2+0x318>
 800b826:	f04f 0a00 	mov.w	sl, #0
 800b82a:	eba5 030a 	sub.w	r3, r5, sl
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f2c0 810a 	blt.w	800ba48 <__kernel_rem_pio2+0x4d8>
 800b834:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b8b0 <__kernel_rem_pio2+0x340>
 800b838:	ec59 8b18 	vmov	r8, r9, d8
 800b83c:	2700      	movs	r7, #0
 800b83e:	e0f5      	b.n	800ba2c <__kernel_rem_pio2+0x4bc>
 800b840:	2302      	movs	r3, #2
 800b842:	9302      	str	r3, [sp, #8]
 800b844:	e760      	b.n	800b708 <__kernel_rem_pio2+0x198>
 800b846:	ab0e      	add	r3, sp, #56	; 0x38
 800b848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84c:	b94d      	cbnz	r5, 800b862 <__kernel_rem_pio2+0x2f2>
 800b84e:	b12b      	cbz	r3, 800b85c <__kernel_rem_pio2+0x2ec>
 800b850:	a80e      	add	r0, sp, #56	; 0x38
 800b852:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b856:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b85a:	2301      	movs	r3, #1
 800b85c:	3201      	adds	r2, #1
 800b85e:	461d      	mov	r5, r3
 800b860:	e759      	b.n	800b716 <__kernel_rem_pio2+0x1a6>
 800b862:	a80e      	add	r0, sp, #56	; 0x38
 800b864:	1acb      	subs	r3, r1, r3
 800b866:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b86a:	462b      	mov	r3, r5
 800b86c:	e7f6      	b.n	800b85c <__kernel_rem_pio2+0x2ec>
 800b86e:	1e62      	subs	r2, r4, #1
 800b870:	ab0e      	add	r3, sp, #56	; 0x38
 800b872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b876:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b87a:	a90e      	add	r1, sp, #56	; 0x38
 800b87c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b880:	e757      	b.n	800b732 <__kernel_rem_pio2+0x1c2>
 800b882:	bf00      	nop
 800b884:	f3af 8000 	nop.w
	...
 800b894:	3ff00000 	.word	0x3ff00000
 800b898:	080106f0 	.word	0x080106f0
 800b89c:	40200000 	.word	0x40200000
 800b8a0:	3ff00000 	.word	0x3ff00000
 800b8a4:	3e700000 	.word	0x3e700000
 800b8a8:	41700000 	.word	0x41700000
 800b8ac:	3fe00000 	.word	0x3fe00000
 800b8b0:	080106b0 	.word	0x080106b0
 800b8b4:	1e62      	subs	r2, r4, #1
 800b8b6:	ab0e      	add	r3, sp, #56	; 0x38
 800b8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b8c0:	e7db      	b.n	800b87a <__kernel_rem_pio2+0x30a>
 800b8c2:	a90e      	add	r1, sp, #56	; 0x38
 800b8c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	e78b      	b.n	800b7e6 <__kernel_rem_pio2+0x276>
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	d0fa      	beq.n	800b8ce <__kernel_rem_pio2+0x35e>
 800b8d8:	9a08      	ldr	r2, [sp, #32]
 800b8da:	4422      	add	r2, r4
 800b8dc:	00d2      	lsls	r2, r2, #3
 800b8de:	a922      	add	r1, sp, #136	; 0x88
 800b8e0:	18e3      	adds	r3, r4, r3
 800b8e2:	9206      	str	r2, [sp, #24]
 800b8e4:	440a      	add	r2, r1
 800b8e6:	9302      	str	r3, [sp, #8]
 800b8e8:	f10b 0108 	add.w	r1, fp, #8
 800b8ec:	f102 0308 	add.w	r3, r2, #8
 800b8f0:	1c66      	adds	r6, r4, #1
 800b8f2:	910a      	str	r1, [sp, #40]	; 0x28
 800b8f4:	2500      	movs	r5, #0
 800b8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8f8:	9b02      	ldr	r3, [sp, #8]
 800b8fa:	42b3      	cmp	r3, r6
 800b8fc:	da04      	bge.n	800b908 <__kernel_rem_pio2+0x398>
 800b8fe:	461c      	mov	r4, r3
 800b900:	e6a6      	b.n	800b650 <__kernel_rem_pio2+0xe0>
 800b902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b904:	2301      	movs	r3, #1
 800b906:	e7e3      	b.n	800b8d0 <__kernel_rem_pio2+0x360>
 800b908:	9b06      	ldr	r3, [sp, #24]
 800b90a:	18ef      	adds	r7, r5, r3
 800b90c:	ab22      	add	r3, sp, #136	; 0x88
 800b90e:	441f      	add	r7, r3
 800b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b912:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b916:	f7f4 fe05 	bl	8000524 <__aeabi_i2d>
 800b91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91c:	461c      	mov	r4, r3
 800b91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b920:	e9c7 0100 	strd	r0, r1, [r7]
 800b924:	eb03 0b05 	add.w	fp, r3, r5
 800b928:	2700      	movs	r7, #0
 800b92a:	f04f 0800 	mov.w	r8, #0
 800b92e:	f04f 0900 	mov.w	r9, #0
 800b932:	9b07      	ldr	r3, [sp, #28]
 800b934:	429f      	cmp	r7, r3
 800b936:	dd08      	ble.n	800b94a <__kernel_rem_pio2+0x3da>
 800b938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b93a:	aa72      	add	r2, sp, #456	; 0x1c8
 800b93c:	18eb      	adds	r3, r5, r3
 800b93e:	4413      	add	r3, r2
 800b940:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b944:	3601      	adds	r6, #1
 800b946:	3508      	adds	r5, #8
 800b948:	e7d6      	b.n	800b8f8 <__kernel_rem_pio2+0x388>
 800b94a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b94e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b952:	f7f4 fe51 	bl	80005f8 <__aeabi_dmul>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	4640      	mov	r0, r8
 800b95c:	4649      	mov	r1, r9
 800b95e:	f7f4 fc95 	bl	800028c <__adddf3>
 800b962:	3701      	adds	r7, #1
 800b964:	4680      	mov	r8, r0
 800b966:	4689      	mov	r9, r1
 800b968:	e7e3      	b.n	800b932 <__kernel_rem_pio2+0x3c2>
 800b96a:	3d01      	subs	r5, #1
 800b96c:	e741      	b.n	800b7f2 <__kernel_rem_pio2+0x282>
 800b96e:	f1ca 0000 	rsb	r0, sl, #0
 800b972:	ec47 6b10 	vmov	d0, r6, r7
 800b976:	f000 fa83 	bl	800be80 <scalbn>
 800b97a:	ec57 6b10 	vmov	r6, r7, d0
 800b97e:	2200      	movs	r2, #0
 800b980:	4b99      	ldr	r3, [pc, #612]	; (800bbe8 <__kernel_rem_pio2+0x678>)
 800b982:	ee10 0a10 	vmov	r0, s0
 800b986:	4639      	mov	r1, r7
 800b988:	f7f5 f8bc 	bl	8000b04 <__aeabi_dcmpge>
 800b98c:	b1f8      	cbz	r0, 800b9ce <__kernel_rem_pio2+0x45e>
 800b98e:	2200      	movs	r2, #0
 800b990:	4b96      	ldr	r3, [pc, #600]	; (800bbec <__kernel_rem_pio2+0x67c>)
 800b992:	4630      	mov	r0, r6
 800b994:	4639      	mov	r1, r7
 800b996:	f7f4 fe2f 	bl	80005f8 <__aeabi_dmul>
 800b99a:	f7f5 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800b99e:	4680      	mov	r8, r0
 800b9a0:	f7f4 fdc0 	bl	8000524 <__aeabi_i2d>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4b90      	ldr	r3, [pc, #576]	; (800bbe8 <__kernel_rem_pio2+0x678>)
 800b9a8:	f7f4 fe26 	bl	80005f8 <__aeabi_dmul>
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7f4 fc68 	bl	8000288 <__aeabi_dsub>
 800b9b8:	f7f5 f8ce 	bl	8000b58 <__aeabi_d2iz>
 800b9bc:	1c65      	adds	r5, r4, #1
 800b9be:	ab0e      	add	r3, sp, #56	; 0x38
 800b9c0:	f10a 0a18 	add.w	sl, sl, #24
 800b9c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b9c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b9cc:	e719      	b.n	800b802 <__kernel_rem_pio2+0x292>
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f5 f8c1 	bl	8000b58 <__aeabi_d2iz>
 800b9d6:	ab0e      	add	r3, sp, #56	; 0x38
 800b9d8:	4625      	mov	r5, r4
 800b9da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b9de:	e710      	b.n	800b802 <__kernel_rem_pio2+0x292>
 800b9e0:	ab0e      	add	r3, sp, #56	; 0x38
 800b9e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b9e6:	f7f4 fd9d 	bl	8000524 <__aeabi_i2d>
 800b9ea:	4642      	mov	r2, r8
 800b9ec:	464b      	mov	r3, r9
 800b9ee:	f7f4 fe03 	bl	80005f8 <__aeabi_dmul>
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b9f8:	4b7c      	ldr	r3, [pc, #496]	; (800bbec <__kernel_rem_pio2+0x67c>)
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ba02:	3f01      	subs	r7, #1
 800ba04:	4680      	mov	r8, r0
 800ba06:	4689      	mov	r9, r1
 800ba08:	e708      	b.n	800b81c <__kernel_rem_pio2+0x2ac>
 800ba0a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ba16:	f7f4 fdef 	bl	80005f8 <__aeabi_dmul>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4649      	mov	r1, r9
 800ba22:	f7f4 fc33 	bl	800028c <__adddf3>
 800ba26:	3701      	adds	r7, #1
 800ba28:	4680      	mov	r8, r0
 800ba2a:	4689      	mov	r9, r1
 800ba2c:	9b04      	ldr	r3, [sp, #16]
 800ba2e:	429f      	cmp	r7, r3
 800ba30:	dc01      	bgt.n	800ba36 <__kernel_rem_pio2+0x4c6>
 800ba32:	45ba      	cmp	sl, r7
 800ba34:	dae9      	bge.n	800ba0a <__kernel_rem_pio2+0x49a>
 800ba36:	ab4a      	add	r3, sp, #296	; 0x128
 800ba38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba3c:	e9c3 8900 	strd	r8, r9, [r3]
 800ba40:	f10a 0a01 	add.w	sl, sl, #1
 800ba44:	3e08      	subs	r6, #8
 800ba46:	e6f0      	b.n	800b82a <__kernel_rem_pio2+0x2ba>
 800ba48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d85b      	bhi.n	800bb06 <__kernel_rem_pio2+0x596>
 800ba4e:	e8df f003 	tbb	[pc, r3]
 800ba52:	264a      	.short	0x264a
 800ba54:	0226      	.short	0x0226
 800ba56:	ab9a      	add	r3, sp, #616	; 0x268
 800ba58:	441c      	add	r4, r3
 800ba5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ba5e:	46a2      	mov	sl, r4
 800ba60:	46ab      	mov	fp, r5
 800ba62:	f1bb 0f00 	cmp.w	fp, #0
 800ba66:	dc6c      	bgt.n	800bb42 <__kernel_rem_pio2+0x5d2>
 800ba68:	46a2      	mov	sl, r4
 800ba6a:	46ab      	mov	fp, r5
 800ba6c:	f1bb 0f01 	cmp.w	fp, #1
 800ba70:	f300 8086 	bgt.w	800bb80 <__kernel_rem_pio2+0x610>
 800ba74:	2000      	movs	r0, #0
 800ba76:	2100      	movs	r1, #0
 800ba78:	2d01      	cmp	r5, #1
 800ba7a:	f300 80a0 	bgt.w	800bbbe <__kernel_rem_pio2+0x64e>
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ba84:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 809e 	bne.w	800bbca <__kernel_rem_pio2+0x65a>
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	e9c3 7800 	strd	r7, r8, [r3]
 800ba94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ba98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ba9c:	e033      	b.n	800bb06 <__kernel_rem_pio2+0x596>
 800ba9e:	3408      	adds	r4, #8
 800baa0:	ab4a      	add	r3, sp, #296	; 0x128
 800baa2:	441c      	add	r4, r3
 800baa4:	462e      	mov	r6, r5
 800baa6:	2000      	movs	r0, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	2e00      	cmp	r6, #0
 800baac:	da3a      	bge.n	800bb24 <__kernel_rem_pio2+0x5b4>
 800baae:	9b02      	ldr	r3, [sp, #8]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d03d      	beq.n	800bb30 <__kernel_rem_pio2+0x5c0>
 800bab4:	4602      	mov	r2, r0
 800bab6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baba:	9c01      	ldr	r4, [sp, #4]
 800babc:	e9c4 2300 	strd	r2, r3, [r4]
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bac8:	f7f4 fbde 	bl	8000288 <__aeabi_dsub>
 800bacc:	ae4c      	add	r6, sp, #304	; 0x130
 800bace:	2401      	movs	r4, #1
 800bad0:	42a5      	cmp	r5, r4
 800bad2:	da30      	bge.n	800bb36 <__kernel_rem_pio2+0x5c6>
 800bad4:	9b02      	ldr	r3, [sp, #8]
 800bad6:	b113      	cbz	r3, 800bade <__kernel_rem_pio2+0x56e>
 800bad8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800badc:	4619      	mov	r1, r3
 800bade:	9b01      	ldr	r3, [sp, #4]
 800bae0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bae4:	e00f      	b.n	800bb06 <__kernel_rem_pio2+0x596>
 800bae6:	ab9a      	add	r3, sp, #616	; 0x268
 800bae8:	441c      	add	r4, r3
 800baea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800baee:	2000      	movs	r0, #0
 800baf0:	2100      	movs	r1, #0
 800baf2:	2d00      	cmp	r5, #0
 800baf4:	da10      	bge.n	800bb18 <__kernel_rem_pio2+0x5a8>
 800baf6:	9b02      	ldr	r3, [sp, #8]
 800baf8:	b113      	cbz	r3, 800bb00 <__kernel_rem_pio2+0x590>
 800bafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bafe:	4619      	mov	r1, r3
 800bb00:	9b01      	ldr	r3, [sp, #4]
 800bb02:	e9c3 0100 	strd	r0, r1, [r3]
 800bb06:	9b06      	ldr	r3, [sp, #24]
 800bb08:	f003 0007 	and.w	r0, r3, #7
 800bb0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bb10:	ecbd 8b02 	vpop	{d8}
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb18:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bb1c:	f7f4 fbb6 	bl	800028c <__adddf3>
 800bb20:	3d01      	subs	r5, #1
 800bb22:	e7e6      	b.n	800baf2 <__kernel_rem_pio2+0x582>
 800bb24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bb28:	f7f4 fbb0 	bl	800028c <__adddf3>
 800bb2c:	3e01      	subs	r6, #1
 800bb2e:	e7bc      	b.n	800baaa <__kernel_rem_pio2+0x53a>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	e7c1      	b.n	800baba <__kernel_rem_pio2+0x54a>
 800bb36:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bb3a:	f7f4 fba7 	bl	800028c <__adddf3>
 800bb3e:	3401      	adds	r4, #1
 800bb40:	e7c6      	b.n	800bad0 <__kernel_rem_pio2+0x560>
 800bb42:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bb46:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	ec53 2b17 	vmov	r2, r3, d7
 800bb50:	4649      	mov	r1, r9
 800bb52:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb56:	f7f4 fb99 	bl	800028c <__adddf3>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460f      	mov	r7, r1
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fb8f 	bl	8000288 <__aeabi_dsub>
 800bb6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb6e:	f7f4 fb8d 	bl	800028c <__adddf3>
 800bb72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb76:	e9ca 0100 	strd	r0, r1, [sl]
 800bb7a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bb7e:	e770      	b.n	800ba62 <__kernel_rem_pio2+0x4f2>
 800bb80:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bb84:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bb88:	4630      	mov	r0, r6
 800bb8a:	ec53 2b17 	vmov	r2, r3, d7
 800bb8e:	4639      	mov	r1, r7
 800bb90:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb94:	f7f4 fb7a 	bl	800028c <__adddf3>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4689      	mov	r9, r1
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fb70 	bl	8000288 <__aeabi_dsub>
 800bba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbac:	f7f4 fb6e 	bl	800028c <__adddf3>
 800bbb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbb4:	e9ca 0100 	strd	r0, r1, [sl]
 800bbb8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bbbc:	e756      	b.n	800ba6c <__kernel_rem_pio2+0x4fc>
 800bbbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bbc2:	f7f4 fb63 	bl	800028c <__adddf3>
 800bbc6:	3d01      	subs	r5, #1
 800bbc8:	e756      	b.n	800ba78 <__kernel_rem_pio2+0x508>
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	9a01      	ldr	r2, [sp, #4]
 800bbce:	601f      	str	r7, [r3, #0]
 800bbd0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bbd4:	605c      	str	r4, [r3, #4]
 800bbd6:	609d      	str	r5, [r3, #8]
 800bbd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bbdc:	60d3      	str	r3, [r2, #12]
 800bbde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe2:	6110      	str	r0, [r2, #16]
 800bbe4:	6153      	str	r3, [r2, #20]
 800bbe6:	e78e      	b.n	800bb06 <__kernel_rem_pio2+0x596>
 800bbe8:	41700000 	.word	0x41700000
 800bbec:	3e700000 	.word	0x3e700000

0800bbf0 <__kernel_sin>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	ec55 4b10 	vmov	r4, r5, d0
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bbfe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bc02:	ed8d 1b00 	vstr	d1, [sp]
 800bc06:	9002      	str	r0, [sp, #8]
 800bc08:	da06      	bge.n	800bc18 <__kernel_sin+0x28>
 800bc0a:	ee10 0a10 	vmov	r0, s0
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 ffa2 	bl	8000b58 <__aeabi_d2iz>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d051      	beq.n	800bcbc <__kernel_sin+0xcc>
 800bc18:	4622      	mov	r2, r4
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4629      	mov	r1, r5
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	4682      	mov	sl, r0
 800bc26:	468b      	mov	fp, r1
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 fce2 	bl	80005f8 <__aeabi_dmul>
 800bc34:	a341      	add	r3, pc, #260	; (adr r3, 800bd3c <__kernel_sin+0x14c>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	4680      	mov	r8, r0
 800bc3c:	4689      	mov	r9, r1
 800bc3e:	4650      	mov	r0, sl
 800bc40:	4659      	mov	r1, fp
 800bc42:	f7f4 fcd9 	bl	80005f8 <__aeabi_dmul>
 800bc46:	a33f      	add	r3, pc, #252	; (adr r3, 800bd44 <__kernel_sin+0x154>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 fb1c 	bl	8000288 <__aeabi_dsub>
 800bc50:	4652      	mov	r2, sl
 800bc52:	465b      	mov	r3, fp
 800bc54:	f7f4 fcd0 	bl	80005f8 <__aeabi_dmul>
 800bc58:	a33c      	add	r3, pc, #240	; (adr r3, 800bd4c <__kernel_sin+0x15c>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fb15 	bl	800028c <__adddf3>
 800bc62:	4652      	mov	r2, sl
 800bc64:	465b      	mov	r3, fp
 800bc66:	f7f4 fcc7 	bl	80005f8 <__aeabi_dmul>
 800bc6a:	a33a      	add	r3, pc, #232	; (adr r3, 800bd54 <__kernel_sin+0x164>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f7f4 fb0a 	bl	8000288 <__aeabi_dsub>
 800bc74:	4652      	mov	r2, sl
 800bc76:	465b      	mov	r3, fp
 800bc78:	f7f4 fcbe 	bl	80005f8 <__aeabi_dmul>
 800bc7c:	a337      	add	r3, pc, #220	; (adr r3, 800bd5c <__kernel_sin+0x16c>)
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	f7f4 fb03 	bl	800028c <__adddf3>
 800bc86:	9b02      	ldr	r3, [sp, #8]
 800bc88:	4606      	mov	r6, r0
 800bc8a:	460f      	mov	r7, r1
 800bc8c:	b9db      	cbnz	r3, 800bcc6 <__kernel_sin+0xd6>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4650      	mov	r0, sl
 800bc94:	4659      	mov	r1, fp
 800bc96:	f7f4 fcaf 	bl	80005f8 <__aeabi_dmul>
 800bc9a:	a325      	add	r3, pc, #148	; (adr r3, 800bd30 <__kernel_sin+0x140>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f7f4 faf2 	bl	8000288 <__aeabi_dsub>
 800bca4:	4642      	mov	r2, r8
 800bca6:	464b      	mov	r3, r9
 800bca8:	f7f4 fca6 	bl	80005f8 <__aeabi_dmul>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f7f4 faea 	bl	800028c <__adddf3>
 800bcb8:	4604      	mov	r4, r0
 800bcba:	460d      	mov	r5, r1
 800bcbc:	ec45 4b10 	vmov	d0, r4, r5
 800bcc0:	b005      	add	sp, #20
 800bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	; (800bd38 <__kernel_sin+0x148>)
 800bcca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcce:	f7f4 fc93 	bl	80005f8 <__aeabi_dmul>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd8:	463b      	mov	r3, r7
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcea:	f7f4 facd 	bl	8000288 <__aeabi_dsub>
 800bcee:	4652      	mov	r2, sl
 800bcf0:	465b      	mov	r3, fp
 800bcf2:	f7f4 fc81 	bl	80005f8 <__aeabi_dmul>
 800bcf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcfa:	f7f4 fac5 	bl	8000288 <__aeabi_dsub>
 800bcfe:	a30c      	add	r3, pc, #48	; (adr r3, 800bd30 <__kernel_sin+0x140>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 fc74 	bl	80005f8 <__aeabi_dmul>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4620      	mov	r0, r4
 800bd22:	4629      	mov	r1, r5
 800bd24:	f7f4 fab0 	bl	8000288 <__aeabi_dsub>
 800bd28:	e7c6      	b.n	800bcb8 <__kernel_sin+0xc8>
 800bd2a:	bf00      	nop
 800bd2c:	f3af 8000 	nop.w
 800bd30:	55555549 	.word	0x55555549
 800bd34:	3fc55555 	.word	0x3fc55555
 800bd38:	3fe00000 	.word	0x3fe00000
 800bd3c:	5acfd57c 	.word	0x5acfd57c
 800bd40:	3de5d93a 	.word	0x3de5d93a
 800bd44:	8a2b9ceb 	.word	0x8a2b9ceb
 800bd48:	3e5ae5e6 	.word	0x3e5ae5e6
 800bd4c:	57b1fe7d 	.word	0x57b1fe7d
 800bd50:	3ec71de3 	.word	0x3ec71de3
 800bd54:	19c161d5 	.word	0x19c161d5
 800bd58:	3f2a01a0 	.word	0x3f2a01a0
 800bd5c:	1110f8a6 	.word	0x1110f8a6
 800bd60:	3f811111 	.word	0x3f811111

0800bd64 <fabs>:
 800bd64:	ec51 0b10 	vmov	r0, r1, d0
 800bd68:	ee10 2a10 	vmov	r2, s0
 800bd6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd70:	ec43 2b10 	vmov	d0, r2, r3
 800bd74:	4770      	bx	lr
	...

0800bd78 <floor>:
 800bd78:	ec51 0b10 	vmov	r0, r1, d0
 800bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bd84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bd88:	2e13      	cmp	r6, #19
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	ee10 5a10 	vmov	r5, s0
 800bd90:	4680      	mov	r8, r0
 800bd92:	dc34      	bgt.n	800bdfe <floor+0x86>
 800bd94:	2e00      	cmp	r6, #0
 800bd96:	da16      	bge.n	800bdc6 <floor+0x4e>
 800bd98:	a335      	add	r3, pc, #212	; (adr r3, 800be70 <floor+0xf8>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fa75 	bl	800028c <__adddf3>
 800bda2:	2200      	movs	r2, #0
 800bda4:	2300      	movs	r3, #0
 800bda6:	f7f4 feb7 	bl	8000b18 <__aeabi_dcmpgt>
 800bdaa:	b148      	cbz	r0, 800bdc0 <floor+0x48>
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	da59      	bge.n	800be64 <floor+0xec>
 800bdb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bdb4:	4a30      	ldr	r2, [pc, #192]	; (800be78 <floor+0x100>)
 800bdb6:	432b      	orrs	r3, r5
 800bdb8:	2500      	movs	r5, #0
 800bdba:	42ab      	cmp	r3, r5
 800bdbc:	bf18      	it	ne
 800bdbe:	4614      	movne	r4, r2
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	e025      	b.n	800be12 <floor+0x9a>
 800bdc6:	4f2d      	ldr	r7, [pc, #180]	; (800be7c <floor+0x104>)
 800bdc8:	4137      	asrs	r7, r6
 800bdca:	ea01 0307 	and.w	r3, r1, r7
 800bdce:	4303      	orrs	r3, r0
 800bdd0:	d01f      	beq.n	800be12 <floor+0x9a>
 800bdd2:	a327      	add	r3, pc, #156	; (adr r3, 800be70 <floor+0xf8>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa58 	bl	800028c <__adddf3>
 800bddc:	2200      	movs	r2, #0
 800bdde:	2300      	movs	r3, #0
 800bde0:	f7f4 fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d0eb      	beq.n	800bdc0 <floor+0x48>
 800bde8:	2c00      	cmp	r4, #0
 800bdea:	bfbe      	ittt	lt
 800bdec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bdf0:	fa43 f606 	asrlt.w	r6, r3, r6
 800bdf4:	19a4      	addlt	r4, r4, r6
 800bdf6:	ea24 0407 	bic.w	r4, r4, r7
 800bdfa:	2500      	movs	r5, #0
 800bdfc:	e7e0      	b.n	800bdc0 <floor+0x48>
 800bdfe:	2e33      	cmp	r6, #51	; 0x33
 800be00:	dd0b      	ble.n	800be1a <floor+0xa2>
 800be02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be06:	d104      	bne.n	800be12 <floor+0x9a>
 800be08:	ee10 2a10 	vmov	r2, s0
 800be0c:	460b      	mov	r3, r1
 800be0e:	f7f4 fa3d 	bl	800028c <__adddf3>
 800be12:	ec41 0b10 	vmov	d0, r0, r1
 800be16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800be1e:	f04f 33ff 	mov.w	r3, #4294967295
 800be22:	fa23 f707 	lsr.w	r7, r3, r7
 800be26:	4207      	tst	r7, r0
 800be28:	d0f3      	beq.n	800be12 <floor+0x9a>
 800be2a:	a311      	add	r3, pc, #68	; (adr r3, 800be70 <floor+0xf8>)
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	f7f4 fa2c 	bl	800028c <__adddf3>
 800be34:	2200      	movs	r2, #0
 800be36:	2300      	movs	r3, #0
 800be38:	f7f4 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d0bf      	beq.n	800bdc0 <floor+0x48>
 800be40:	2c00      	cmp	r4, #0
 800be42:	da02      	bge.n	800be4a <floor+0xd2>
 800be44:	2e14      	cmp	r6, #20
 800be46:	d103      	bne.n	800be50 <floor+0xd8>
 800be48:	3401      	adds	r4, #1
 800be4a:	ea25 0507 	bic.w	r5, r5, r7
 800be4e:	e7b7      	b.n	800bdc0 <floor+0x48>
 800be50:	2301      	movs	r3, #1
 800be52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be56:	fa03 f606 	lsl.w	r6, r3, r6
 800be5a:	4435      	add	r5, r6
 800be5c:	4545      	cmp	r5, r8
 800be5e:	bf38      	it	cc
 800be60:	18e4      	addcc	r4, r4, r3
 800be62:	e7f2      	b.n	800be4a <floor+0xd2>
 800be64:	2500      	movs	r5, #0
 800be66:	462c      	mov	r4, r5
 800be68:	e7aa      	b.n	800bdc0 <floor+0x48>
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	8800759c 	.word	0x8800759c
 800be74:	7e37e43c 	.word	0x7e37e43c
 800be78:	bff00000 	.word	0xbff00000
 800be7c:	000fffff 	.word	0x000fffff

0800be80 <scalbn>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	ec55 4b10 	vmov	r4, r5, d0
 800be86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800be8a:	4606      	mov	r6, r0
 800be8c:	462b      	mov	r3, r5
 800be8e:	b9aa      	cbnz	r2, 800bebc <scalbn+0x3c>
 800be90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be94:	4323      	orrs	r3, r4
 800be96:	d03b      	beq.n	800bf10 <scalbn+0x90>
 800be98:	4b31      	ldr	r3, [pc, #196]	; (800bf60 <scalbn+0xe0>)
 800be9a:	4629      	mov	r1, r5
 800be9c:	2200      	movs	r2, #0
 800be9e:	ee10 0a10 	vmov	r0, s0
 800bea2:	f7f4 fba9 	bl	80005f8 <__aeabi_dmul>
 800bea6:	4b2f      	ldr	r3, [pc, #188]	; (800bf64 <scalbn+0xe4>)
 800bea8:	429e      	cmp	r6, r3
 800beaa:	4604      	mov	r4, r0
 800beac:	460d      	mov	r5, r1
 800beae:	da12      	bge.n	800bed6 <scalbn+0x56>
 800beb0:	a327      	add	r3, pc, #156	; (adr r3, 800bf50 <scalbn+0xd0>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 fb9f 	bl	80005f8 <__aeabi_dmul>
 800beba:	e009      	b.n	800bed0 <scalbn+0x50>
 800bebc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d10c      	bne.n	800bede <scalbn+0x5e>
 800bec4:	ee10 2a10 	vmov	r2, s0
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 f9de 	bl	800028c <__adddf3>
 800bed0:	4604      	mov	r4, r0
 800bed2:	460d      	mov	r5, r1
 800bed4:	e01c      	b.n	800bf10 <scalbn+0x90>
 800bed6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800beda:	460b      	mov	r3, r1
 800bedc:	3a36      	subs	r2, #54	; 0x36
 800bede:	4432      	add	r2, r6
 800bee0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bee4:	428a      	cmp	r2, r1
 800bee6:	dd0b      	ble.n	800bf00 <scalbn+0x80>
 800bee8:	ec45 4b11 	vmov	d1, r4, r5
 800beec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bf58 <scalbn+0xd8>
 800bef0:	f000 f83c 	bl	800bf6c <copysign>
 800bef4:	a318      	add	r3, pc, #96	; (adr r3, 800bf58 <scalbn+0xd8>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	ec51 0b10 	vmov	r0, r1, d0
 800befe:	e7da      	b.n	800beb6 <scalbn+0x36>
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	dd08      	ble.n	800bf16 <scalbn+0x96>
 800bf04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf10:	ec45 4b10 	vmov	d0, r4, r5
 800bf14:	bd70      	pop	{r4, r5, r6, pc}
 800bf16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf1a:	da0d      	bge.n	800bf38 <scalbn+0xb8>
 800bf1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bf20:	429e      	cmp	r6, r3
 800bf22:	ec45 4b11 	vmov	d1, r4, r5
 800bf26:	dce1      	bgt.n	800beec <scalbn+0x6c>
 800bf28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bf50 <scalbn+0xd0>
 800bf2c:	f000 f81e 	bl	800bf6c <copysign>
 800bf30:	a307      	add	r3, pc, #28	; (adr r3, 800bf50 <scalbn+0xd0>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	e7e0      	b.n	800befa <scalbn+0x7a>
 800bf38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf3c:	3236      	adds	r2, #54	; 0x36
 800bf3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <scalbn+0xe8>)
 800bf4e:	e7b2      	b.n	800beb6 <scalbn+0x36>
 800bf50:	c2f8f359 	.word	0xc2f8f359
 800bf54:	01a56e1f 	.word	0x01a56e1f
 800bf58:	8800759c 	.word	0x8800759c
 800bf5c:	7e37e43c 	.word	0x7e37e43c
 800bf60:	43500000 	.word	0x43500000
 800bf64:	ffff3cb0 	.word	0xffff3cb0
 800bf68:	3c900000 	.word	0x3c900000

0800bf6c <copysign>:
 800bf6c:	ec51 0b10 	vmov	r0, r1, d0
 800bf70:	ee11 0a90 	vmov	r0, s3
 800bf74:	ee10 2a10 	vmov	r2, s0
 800bf78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bf7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bf80:	ea41 0300 	orr.w	r3, r1, r0
 800bf84:	ec43 2b10 	vmov	d0, r2, r3
 800bf88:	4770      	bx	lr
	...

0800bf8c <__errno>:
 800bf8c:	4b01      	ldr	r3, [pc, #4]	; (800bf94 <__errno+0x8>)
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20000040 	.word	0x20000040

0800bf98 <__libc_init_array>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	4e0d      	ldr	r6, [pc, #52]	; (800bfd0 <__libc_init_array+0x38>)
 800bf9c:	4c0d      	ldr	r4, [pc, #52]	; (800bfd4 <__libc_init_array+0x3c>)
 800bf9e:	1ba4      	subs	r4, r4, r6
 800bfa0:	10a4      	asrs	r4, r4, #2
 800bfa2:	2500      	movs	r5, #0
 800bfa4:	42a5      	cmp	r5, r4
 800bfa6:	d109      	bne.n	800bfbc <__libc_init_array+0x24>
 800bfa8:	4e0b      	ldr	r6, [pc, #44]	; (800bfd8 <__libc_init_array+0x40>)
 800bfaa:	4c0c      	ldr	r4, [pc, #48]	; (800bfdc <__libc_init_array+0x44>)
 800bfac:	f004 fa5e 	bl	801046c <_init>
 800bfb0:	1ba4      	subs	r4, r4, r6
 800bfb2:	10a4      	asrs	r4, r4, #2
 800bfb4:	2500      	movs	r5, #0
 800bfb6:	42a5      	cmp	r5, r4
 800bfb8:	d105      	bne.n	800bfc6 <__libc_init_array+0x2e>
 800bfba:	bd70      	pop	{r4, r5, r6, pc}
 800bfbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfc0:	4798      	blx	r3
 800bfc2:	3501      	adds	r5, #1
 800bfc4:	e7ee      	b.n	800bfa4 <__libc_init_array+0xc>
 800bfc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfca:	4798      	blx	r3
 800bfcc:	3501      	adds	r5, #1
 800bfce:	e7f2      	b.n	800bfb6 <__libc_init_array+0x1e>
 800bfd0:	08010a28 	.word	0x08010a28
 800bfd4:	08010a28 	.word	0x08010a28
 800bfd8:	08010a28 	.word	0x08010a28
 800bfdc:	08010a2c 	.word	0x08010a2c

0800bfe0 <memcpy>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	1e43      	subs	r3, r0, #1
 800bfe4:	440a      	add	r2, r1
 800bfe6:	4291      	cmp	r1, r2
 800bfe8:	d100      	bne.n	800bfec <memcpy+0xc>
 800bfea:	bd10      	pop	{r4, pc}
 800bfec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bff4:	e7f7      	b.n	800bfe6 <memcpy+0x6>

0800bff6 <memset>:
 800bff6:	4402      	add	r2, r0
 800bff8:	4603      	mov	r3, r0
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d100      	bne.n	800c000 <memset+0xa>
 800bffe:	4770      	bx	lr
 800c000:	f803 1b01 	strb.w	r1, [r3], #1
 800c004:	e7f9      	b.n	800bffa <memset+0x4>

0800c006 <__cvt>:
 800c006:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c00a:	ec55 4b10 	vmov	r4, r5, d0
 800c00e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c010:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c014:	2d00      	cmp	r5, #0
 800c016:	460e      	mov	r6, r1
 800c018:	4691      	mov	r9, r2
 800c01a:	4619      	mov	r1, r3
 800c01c:	bfb8      	it	lt
 800c01e:	4622      	movlt	r2, r4
 800c020:	462b      	mov	r3, r5
 800c022:	f027 0720 	bic.w	r7, r7, #32
 800c026:	bfbb      	ittet	lt
 800c028:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c02c:	461d      	movlt	r5, r3
 800c02e:	2300      	movge	r3, #0
 800c030:	232d      	movlt	r3, #45	; 0x2d
 800c032:	bfb8      	it	lt
 800c034:	4614      	movlt	r4, r2
 800c036:	2f46      	cmp	r7, #70	; 0x46
 800c038:	700b      	strb	r3, [r1, #0]
 800c03a:	d004      	beq.n	800c046 <__cvt+0x40>
 800c03c:	2f45      	cmp	r7, #69	; 0x45
 800c03e:	d100      	bne.n	800c042 <__cvt+0x3c>
 800c040:	3601      	adds	r6, #1
 800c042:	2102      	movs	r1, #2
 800c044:	e000      	b.n	800c048 <__cvt+0x42>
 800c046:	2103      	movs	r1, #3
 800c048:	ab03      	add	r3, sp, #12
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	ab02      	add	r3, sp, #8
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4632      	mov	r2, r6
 800c052:	4653      	mov	r3, sl
 800c054:	ec45 4b10 	vmov	d0, r4, r5
 800c058:	f001 feb2 	bl	800ddc0 <_dtoa_r>
 800c05c:	2f47      	cmp	r7, #71	; 0x47
 800c05e:	4680      	mov	r8, r0
 800c060:	d102      	bne.n	800c068 <__cvt+0x62>
 800c062:	f019 0f01 	tst.w	r9, #1
 800c066:	d026      	beq.n	800c0b6 <__cvt+0xb0>
 800c068:	2f46      	cmp	r7, #70	; 0x46
 800c06a:	eb08 0906 	add.w	r9, r8, r6
 800c06e:	d111      	bne.n	800c094 <__cvt+0x8e>
 800c070:	f898 3000 	ldrb.w	r3, [r8]
 800c074:	2b30      	cmp	r3, #48	; 0x30
 800c076:	d10a      	bne.n	800c08e <__cvt+0x88>
 800c078:	2200      	movs	r2, #0
 800c07a:	2300      	movs	r3, #0
 800c07c:	4620      	mov	r0, r4
 800c07e:	4629      	mov	r1, r5
 800c080:	f7f4 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 800c084:	b918      	cbnz	r0, 800c08e <__cvt+0x88>
 800c086:	f1c6 0601 	rsb	r6, r6, #1
 800c08a:	f8ca 6000 	str.w	r6, [sl]
 800c08e:	f8da 3000 	ldr.w	r3, [sl]
 800c092:	4499      	add	r9, r3
 800c094:	2200      	movs	r2, #0
 800c096:	2300      	movs	r3, #0
 800c098:	4620      	mov	r0, r4
 800c09a:	4629      	mov	r1, r5
 800c09c:	f7f4 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0a0:	b938      	cbnz	r0, 800c0b2 <__cvt+0xac>
 800c0a2:	2230      	movs	r2, #48	; 0x30
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	454b      	cmp	r3, r9
 800c0a8:	d205      	bcs.n	800c0b6 <__cvt+0xb0>
 800c0aa:	1c59      	adds	r1, r3, #1
 800c0ac:	9103      	str	r1, [sp, #12]
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e7f8      	b.n	800c0a4 <__cvt+0x9e>
 800c0b2:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0ba:	eba3 0308 	sub.w	r3, r3, r8
 800c0be:	4640      	mov	r0, r8
 800c0c0:	6013      	str	r3, [r2, #0]
 800c0c2:	b004      	add	sp, #16
 800c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c0c8 <__exponent>:
 800c0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ca:	2900      	cmp	r1, #0
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	bfba      	itte	lt
 800c0d0:	4249      	neglt	r1, r1
 800c0d2:	232d      	movlt	r3, #45	; 0x2d
 800c0d4:	232b      	movge	r3, #43	; 0x2b
 800c0d6:	2909      	cmp	r1, #9
 800c0d8:	f804 2b02 	strb.w	r2, [r4], #2
 800c0dc:	7043      	strb	r3, [r0, #1]
 800c0de:	dd20      	ble.n	800c122 <__exponent+0x5a>
 800c0e0:	f10d 0307 	add.w	r3, sp, #7
 800c0e4:	461f      	mov	r7, r3
 800c0e6:	260a      	movs	r6, #10
 800c0e8:	fb91 f5f6 	sdiv	r5, r1, r6
 800c0ec:	fb06 1115 	mls	r1, r6, r5, r1
 800c0f0:	3130      	adds	r1, #48	; 0x30
 800c0f2:	2d09      	cmp	r5, #9
 800c0f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c0f8:	f103 32ff 	add.w	r2, r3, #4294967295
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	dc09      	bgt.n	800c114 <__exponent+0x4c>
 800c100:	3130      	adds	r1, #48	; 0x30
 800c102:	3b02      	subs	r3, #2
 800c104:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c108:	42bb      	cmp	r3, r7
 800c10a:	4622      	mov	r2, r4
 800c10c:	d304      	bcc.n	800c118 <__exponent+0x50>
 800c10e:	1a10      	subs	r0, r2, r0
 800c110:	b003      	add	sp, #12
 800c112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c114:	4613      	mov	r3, r2
 800c116:	e7e7      	b.n	800c0e8 <__exponent+0x20>
 800c118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c11c:	f804 2b01 	strb.w	r2, [r4], #1
 800c120:	e7f2      	b.n	800c108 <__exponent+0x40>
 800c122:	2330      	movs	r3, #48	; 0x30
 800c124:	4419      	add	r1, r3
 800c126:	7083      	strb	r3, [r0, #2]
 800c128:	1d02      	adds	r2, r0, #4
 800c12a:	70c1      	strb	r1, [r0, #3]
 800c12c:	e7ef      	b.n	800c10e <__exponent+0x46>
	...

0800c130 <_printf_float>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	b08d      	sub	sp, #52	; 0x34
 800c136:	460c      	mov	r4, r1
 800c138:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c13c:	4616      	mov	r6, r2
 800c13e:	461f      	mov	r7, r3
 800c140:	4605      	mov	r5, r0
 800c142:	f003 f89b 	bl	800f27c <_localeconv_r>
 800c146:	6803      	ldr	r3, [r0, #0]
 800c148:	9304      	str	r3, [sp, #16]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f4 f840 	bl	80001d0 <strlen>
 800c150:	2300      	movs	r3, #0
 800c152:	930a      	str	r3, [sp, #40]	; 0x28
 800c154:	f8d8 3000 	ldr.w	r3, [r8]
 800c158:	9005      	str	r0, [sp, #20]
 800c15a:	3307      	adds	r3, #7
 800c15c:	f023 0307 	bic.w	r3, r3, #7
 800c160:	f103 0208 	add.w	r2, r3, #8
 800c164:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c168:	f8d4 b000 	ldr.w	fp, [r4]
 800c16c:	f8c8 2000 	str.w	r2, [r8]
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c178:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c17c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c180:	9307      	str	r3, [sp, #28]
 800c182:	f8cd 8018 	str.w	r8, [sp, #24]
 800c186:	f04f 32ff 	mov.w	r2, #4294967295
 800c18a:	4ba7      	ldr	r3, [pc, #668]	; (800c428 <_printf_float+0x2f8>)
 800c18c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c190:	f7f4 fccc 	bl	8000b2c <__aeabi_dcmpun>
 800c194:	bb70      	cbnz	r0, 800c1f4 <_printf_float+0xc4>
 800c196:	f04f 32ff 	mov.w	r2, #4294967295
 800c19a:	4ba3      	ldr	r3, [pc, #652]	; (800c428 <_printf_float+0x2f8>)
 800c19c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1a0:	f7f4 fca6 	bl	8000af0 <__aeabi_dcmple>
 800c1a4:	bb30      	cbnz	r0, 800c1f4 <_printf_float+0xc4>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	f7f4 fc95 	bl	8000adc <__aeabi_dcmplt>
 800c1b2:	b110      	cbz	r0, 800c1ba <_printf_float+0x8a>
 800c1b4:	232d      	movs	r3, #45	; 0x2d
 800c1b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1ba:	4a9c      	ldr	r2, [pc, #624]	; (800c42c <_printf_float+0x2fc>)
 800c1bc:	4b9c      	ldr	r3, [pc, #624]	; (800c430 <_printf_float+0x300>)
 800c1be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c1c2:	bf8c      	ite	hi
 800c1c4:	4690      	movhi	r8, r2
 800c1c6:	4698      	movls	r8, r3
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	f02b 0204 	bic.w	r2, fp, #4
 800c1ce:	6123      	str	r3, [r4, #16]
 800c1d0:	6022      	str	r2, [r4, #0]
 800c1d2:	f04f 0900 	mov.w	r9, #0
 800c1d6:	9700      	str	r7, [sp, #0]
 800c1d8:	4633      	mov	r3, r6
 800c1da:	aa0b      	add	r2, sp, #44	; 0x2c
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 f9e6 	bl	800c5b0 <_printf_common>
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	f040 808d 	bne.w	800c304 <_printf_float+0x1d4>
 800c1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ee:	b00d      	add	sp, #52	; 0x34
 800c1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f4:	4642      	mov	r2, r8
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	f7f4 fc96 	bl	8000b2c <__aeabi_dcmpun>
 800c200:	b110      	cbz	r0, 800c208 <_printf_float+0xd8>
 800c202:	4a8c      	ldr	r2, [pc, #560]	; (800c434 <_printf_float+0x304>)
 800c204:	4b8c      	ldr	r3, [pc, #560]	; (800c438 <_printf_float+0x308>)
 800c206:	e7da      	b.n	800c1be <_printf_float+0x8e>
 800c208:	6861      	ldr	r1, [r4, #4]
 800c20a:	1c4b      	adds	r3, r1, #1
 800c20c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c210:	a80a      	add	r0, sp, #40	; 0x28
 800c212:	d13e      	bne.n	800c292 <_printf_float+0x162>
 800c214:	2306      	movs	r3, #6
 800c216:	6063      	str	r3, [r4, #4]
 800c218:	2300      	movs	r3, #0
 800c21a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c21e:	ab09      	add	r3, sp, #36	; 0x24
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	ec49 8b10 	vmov	d0, r8, r9
 800c226:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c22a:	6022      	str	r2, [r4, #0]
 800c22c:	f8cd a004 	str.w	sl, [sp, #4]
 800c230:	6861      	ldr	r1, [r4, #4]
 800c232:	4628      	mov	r0, r5
 800c234:	f7ff fee7 	bl	800c006 <__cvt>
 800c238:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c23c:	2b47      	cmp	r3, #71	; 0x47
 800c23e:	4680      	mov	r8, r0
 800c240:	d109      	bne.n	800c256 <_printf_float+0x126>
 800c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c244:	1cd8      	adds	r0, r3, #3
 800c246:	db02      	blt.n	800c24e <_printf_float+0x11e>
 800c248:	6862      	ldr	r2, [r4, #4]
 800c24a:	4293      	cmp	r3, r2
 800c24c:	dd47      	ble.n	800c2de <_printf_float+0x1ae>
 800c24e:	f1aa 0a02 	sub.w	sl, sl, #2
 800c252:	fa5f fa8a 	uxtb.w	sl, sl
 800c256:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c25a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c25c:	d824      	bhi.n	800c2a8 <_printf_float+0x178>
 800c25e:	3901      	subs	r1, #1
 800c260:	4652      	mov	r2, sl
 800c262:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c266:	9109      	str	r1, [sp, #36]	; 0x24
 800c268:	f7ff ff2e 	bl	800c0c8 <__exponent>
 800c26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c26e:	1813      	adds	r3, r2, r0
 800c270:	2a01      	cmp	r2, #1
 800c272:	4681      	mov	r9, r0
 800c274:	6123      	str	r3, [r4, #16]
 800c276:	dc02      	bgt.n	800c27e <_printf_float+0x14e>
 800c278:	6822      	ldr	r2, [r4, #0]
 800c27a:	07d1      	lsls	r1, r2, #31
 800c27c:	d501      	bpl.n	800c282 <_printf_float+0x152>
 800c27e:	3301      	adds	r3, #1
 800c280:	6123      	str	r3, [r4, #16]
 800c282:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c286:	2b00      	cmp	r3, #0
 800c288:	d0a5      	beq.n	800c1d6 <_printf_float+0xa6>
 800c28a:	232d      	movs	r3, #45	; 0x2d
 800c28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c290:	e7a1      	b.n	800c1d6 <_printf_float+0xa6>
 800c292:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c296:	f000 8177 	beq.w	800c588 <_printf_float+0x458>
 800c29a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c29e:	d1bb      	bne.n	800c218 <_printf_float+0xe8>
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	d1b9      	bne.n	800c218 <_printf_float+0xe8>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e7b6      	b.n	800c216 <_printf_float+0xe6>
 800c2a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c2ac:	d119      	bne.n	800c2e2 <_printf_float+0x1b2>
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	6863      	ldr	r3, [r4, #4]
 800c2b2:	dd0c      	ble.n	800c2ce <_printf_float+0x19e>
 800c2b4:	6121      	str	r1, [r4, #16]
 800c2b6:	b913      	cbnz	r3, 800c2be <_printf_float+0x18e>
 800c2b8:	6822      	ldr	r2, [r4, #0]
 800c2ba:	07d2      	lsls	r2, r2, #31
 800c2bc:	d502      	bpl.n	800c2c4 <_printf_float+0x194>
 800c2be:	3301      	adds	r3, #1
 800c2c0:	440b      	add	r3, r1
 800c2c2:	6123      	str	r3, [r4, #16]
 800c2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c6:	65a3      	str	r3, [r4, #88]	; 0x58
 800c2c8:	f04f 0900 	mov.w	r9, #0
 800c2cc:	e7d9      	b.n	800c282 <_printf_float+0x152>
 800c2ce:	b913      	cbnz	r3, 800c2d6 <_printf_float+0x1a6>
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	07d0      	lsls	r0, r2, #31
 800c2d4:	d501      	bpl.n	800c2da <_printf_float+0x1aa>
 800c2d6:	3302      	adds	r3, #2
 800c2d8:	e7f3      	b.n	800c2c2 <_printf_float+0x192>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e7f1      	b.n	800c2c2 <_printf_float+0x192>
 800c2de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c2e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	db05      	blt.n	800c2f6 <_printf_float+0x1c6>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	6123      	str	r3, [r4, #16]
 800c2ee:	07d1      	lsls	r1, r2, #31
 800c2f0:	d5e8      	bpl.n	800c2c4 <_printf_float+0x194>
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	e7e5      	b.n	800c2c2 <_printf_float+0x192>
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bfd4      	ite	le
 800c2fa:	f1c3 0302 	rsble	r3, r3, #2
 800c2fe:	2301      	movgt	r3, #1
 800c300:	4413      	add	r3, r2
 800c302:	e7de      	b.n	800c2c2 <_printf_float+0x192>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	055a      	lsls	r2, r3, #21
 800c308:	d407      	bmi.n	800c31a <_printf_float+0x1ea>
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	4642      	mov	r2, r8
 800c30e:	4631      	mov	r1, r6
 800c310:	4628      	mov	r0, r5
 800c312:	47b8      	blx	r7
 800c314:	3001      	adds	r0, #1
 800c316:	d12b      	bne.n	800c370 <_printf_float+0x240>
 800c318:	e767      	b.n	800c1ea <_printf_float+0xba>
 800c31a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c31e:	f240 80dc 	bls.w	800c4da <_printf_float+0x3aa>
 800c322:	2200      	movs	r2, #0
 800c324:	2300      	movs	r3, #0
 800c326:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c32a:	f7f4 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d033      	beq.n	800c39a <_printf_float+0x26a>
 800c332:	2301      	movs	r3, #1
 800c334:	4a41      	ldr	r2, [pc, #260]	; (800c43c <_printf_float+0x30c>)
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	f43f af54 	beq.w	800c1ea <_printf_float+0xba>
 800c342:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c346:	429a      	cmp	r2, r3
 800c348:	db02      	blt.n	800c350 <_printf_float+0x220>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	07d8      	lsls	r0, r3, #31
 800c34e:	d50f      	bpl.n	800c370 <_printf_float+0x240>
 800c350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c354:	4631      	mov	r1, r6
 800c356:	4628      	mov	r0, r5
 800c358:	47b8      	blx	r7
 800c35a:	3001      	adds	r0, #1
 800c35c:	f43f af45 	beq.w	800c1ea <_printf_float+0xba>
 800c360:	f04f 0800 	mov.w	r8, #0
 800c364:	f104 091a 	add.w	r9, r4, #26
 800c368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36a:	3b01      	subs	r3, #1
 800c36c:	4543      	cmp	r3, r8
 800c36e:	dc09      	bgt.n	800c384 <_printf_float+0x254>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	079b      	lsls	r3, r3, #30
 800c374:	f100 8103 	bmi.w	800c57e <_printf_float+0x44e>
 800c378:	68e0      	ldr	r0, [r4, #12]
 800c37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c37c:	4298      	cmp	r0, r3
 800c37e:	bfb8      	it	lt
 800c380:	4618      	movlt	r0, r3
 800c382:	e734      	b.n	800c1ee <_printf_float+0xbe>
 800c384:	2301      	movs	r3, #1
 800c386:	464a      	mov	r2, r9
 800c388:	4631      	mov	r1, r6
 800c38a:	4628      	mov	r0, r5
 800c38c:	47b8      	blx	r7
 800c38e:	3001      	adds	r0, #1
 800c390:	f43f af2b 	beq.w	800c1ea <_printf_float+0xba>
 800c394:	f108 0801 	add.w	r8, r8, #1
 800c398:	e7e6      	b.n	800c368 <_printf_float+0x238>
 800c39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	dc2b      	bgt.n	800c3f8 <_printf_float+0x2c8>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4a26      	ldr	r2, [pc, #152]	; (800c43c <_printf_float+0x30c>)
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47b8      	blx	r7
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	f43f af1d 	beq.w	800c1ea <_printf_float+0xba>
 800c3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b2:	b923      	cbnz	r3, 800c3be <_printf_float+0x28e>
 800c3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b6:	b913      	cbnz	r3, 800c3be <_printf_float+0x28e>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	07d9      	lsls	r1, r3, #31
 800c3bc:	d5d8      	bpl.n	800c370 <_printf_float+0x240>
 800c3be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b8      	blx	r7
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	f43f af0e 	beq.w	800c1ea <_printf_float+0xba>
 800c3ce:	f04f 0900 	mov.w	r9, #0
 800c3d2:	f104 0a1a 	add.w	sl, r4, #26
 800c3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d8:	425b      	negs	r3, r3
 800c3da:	454b      	cmp	r3, r9
 800c3dc:	dc01      	bgt.n	800c3e2 <_printf_float+0x2b2>
 800c3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e0:	e794      	b.n	800c30c <_printf_float+0x1dc>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	4652      	mov	r2, sl
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	47b8      	blx	r7
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	f43f aefc 	beq.w	800c1ea <_printf_float+0xba>
 800c3f2:	f109 0901 	add.w	r9, r9, #1
 800c3f6:	e7ee      	b.n	800c3d6 <_printf_float+0x2a6>
 800c3f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	bfa8      	it	ge
 800c400:	461a      	movge	r2, r3
 800c402:	2a00      	cmp	r2, #0
 800c404:	4691      	mov	r9, r2
 800c406:	dd07      	ble.n	800c418 <_printf_float+0x2e8>
 800c408:	4613      	mov	r3, r2
 800c40a:	4631      	mov	r1, r6
 800c40c:	4642      	mov	r2, r8
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f aee9 	beq.w	800c1ea <_printf_float+0xba>
 800c418:	f104 031a 	add.w	r3, r4, #26
 800c41c:	f04f 0b00 	mov.w	fp, #0
 800c420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c424:	9306      	str	r3, [sp, #24]
 800c426:	e015      	b.n	800c454 <_printf_float+0x324>
 800c428:	7fefffff 	.word	0x7fefffff
 800c42c:	08010708 	.word	0x08010708
 800c430:	08010704 	.word	0x08010704
 800c434:	08010710 	.word	0x08010710
 800c438:	0801070c 	.word	0x0801070c
 800c43c:	08010714 	.word	0x08010714
 800c440:	2301      	movs	r3, #1
 800c442:	9a06      	ldr	r2, [sp, #24]
 800c444:	4631      	mov	r1, r6
 800c446:	4628      	mov	r0, r5
 800c448:	47b8      	blx	r7
 800c44a:	3001      	adds	r0, #1
 800c44c:	f43f aecd 	beq.w	800c1ea <_printf_float+0xba>
 800c450:	f10b 0b01 	add.w	fp, fp, #1
 800c454:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c458:	ebaa 0309 	sub.w	r3, sl, r9
 800c45c:	455b      	cmp	r3, fp
 800c45e:	dcef      	bgt.n	800c440 <_printf_float+0x310>
 800c460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c464:	429a      	cmp	r2, r3
 800c466:	44d0      	add	r8, sl
 800c468:	db15      	blt.n	800c496 <_printf_float+0x366>
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	07da      	lsls	r2, r3, #31
 800c46e:	d412      	bmi.n	800c496 <_printf_float+0x366>
 800c470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c472:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c474:	eba3 020a 	sub.w	r2, r3, sl
 800c478:	eba3 0a01 	sub.w	sl, r3, r1
 800c47c:	4592      	cmp	sl, r2
 800c47e:	bfa8      	it	ge
 800c480:	4692      	movge	sl, r2
 800c482:	f1ba 0f00 	cmp.w	sl, #0
 800c486:	dc0e      	bgt.n	800c4a6 <_printf_float+0x376>
 800c488:	f04f 0800 	mov.w	r8, #0
 800c48c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c490:	f104 091a 	add.w	r9, r4, #26
 800c494:	e019      	b.n	800c4ca <_printf_float+0x39a>
 800c496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c49a:	4631      	mov	r1, r6
 800c49c:	4628      	mov	r0, r5
 800c49e:	47b8      	blx	r7
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d1e5      	bne.n	800c470 <_printf_float+0x340>
 800c4a4:	e6a1      	b.n	800c1ea <_printf_float+0xba>
 800c4a6:	4653      	mov	r3, sl
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d1e9      	bne.n	800c488 <_printf_float+0x358>
 800c4b4:	e699      	b.n	800c1ea <_printf_float+0xba>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	464a      	mov	r2, r9
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	4628      	mov	r0, r5
 800c4be:	47b8      	blx	r7
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	f43f ae92 	beq.w	800c1ea <_printf_float+0xba>
 800c4c6:	f108 0801 	add.w	r8, r8, #1
 800c4ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4ce:	1a9b      	subs	r3, r3, r2
 800c4d0:	eba3 030a 	sub.w	r3, r3, sl
 800c4d4:	4543      	cmp	r3, r8
 800c4d6:	dcee      	bgt.n	800c4b6 <_printf_float+0x386>
 800c4d8:	e74a      	b.n	800c370 <_printf_float+0x240>
 800c4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4dc:	2a01      	cmp	r2, #1
 800c4de:	dc01      	bgt.n	800c4e4 <_printf_float+0x3b4>
 800c4e0:	07db      	lsls	r3, r3, #31
 800c4e2:	d53a      	bpl.n	800c55a <_printf_float+0x42a>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	4642      	mov	r2, r8
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b8      	blx	r7
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	f43f ae7b 	beq.w	800c1ea <_printf_float+0xba>
 800c4f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	47b8      	blx	r7
 800c4fe:	3001      	adds	r0, #1
 800c500:	f108 0801 	add.w	r8, r8, #1
 800c504:	f43f ae71 	beq.w	800c1ea <_printf_float+0xba>
 800c508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c50a:	2200      	movs	r2, #0
 800c50c:	f103 3aff 	add.w	sl, r3, #4294967295
 800c510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c514:	2300      	movs	r3, #0
 800c516:	f7f4 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c51a:	b9c8      	cbnz	r0, 800c550 <_printf_float+0x420>
 800c51c:	4653      	mov	r3, sl
 800c51e:	4642      	mov	r2, r8
 800c520:	4631      	mov	r1, r6
 800c522:	4628      	mov	r0, r5
 800c524:	47b8      	blx	r7
 800c526:	3001      	adds	r0, #1
 800c528:	d10e      	bne.n	800c548 <_printf_float+0x418>
 800c52a:	e65e      	b.n	800c1ea <_printf_float+0xba>
 800c52c:	2301      	movs	r3, #1
 800c52e:	4652      	mov	r2, sl
 800c530:	4631      	mov	r1, r6
 800c532:	4628      	mov	r0, r5
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f ae57 	beq.w	800c1ea <_printf_float+0xba>
 800c53c:	f108 0801 	add.w	r8, r8, #1
 800c540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c542:	3b01      	subs	r3, #1
 800c544:	4543      	cmp	r3, r8
 800c546:	dcf1      	bgt.n	800c52c <_printf_float+0x3fc>
 800c548:	464b      	mov	r3, r9
 800c54a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c54e:	e6de      	b.n	800c30e <_printf_float+0x1de>
 800c550:	f04f 0800 	mov.w	r8, #0
 800c554:	f104 0a1a 	add.w	sl, r4, #26
 800c558:	e7f2      	b.n	800c540 <_printf_float+0x410>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e7df      	b.n	800c51e <_printf_float+0x3ee>
 800c55e:	2301      	movs	r3, #1
 800c560:	464a      	mov	r2, r9
 800c562:	4631      	mov	r1, r6
 800c564:	4628      	mov	r0, r5
 800c566:	47b8      	blx	r7
 800c568:	3001      	adds	r0, #1
 800c56a:	f43f ae3e 	beq.w	800c1ea <_printf_float+0xba>
 800c56e:	f108 0801 	add.w	r8, r8, #1
 800c572:	68e3      	ldr	r3, [r4, #12]
 800c574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c576:	1a9b      	subs	r3, r3, r2
 800c578:	4543      	cmp	r3, r8
 800c57a:	dcf0      	bgt.n	800c55e <_printf_float+0x42e>
 800c57c:	e6fc      	b.n	800c378 <_printf_float+0x248>
 800c57e:	f04f 0800 	mov.w	r8, #0
 800c582:	f104 0919 	add.w	r9, r4, #25
 800c586:	e7f4      	b.n	800c572 <_printf_float+0x442>
 800c588:	2900      	cmp	r1, #0
 800c58a:	f43f ae8b 	beq.w	800c2a4 <_printf_float+0x174>
 800c58e:	2300      	movs	r3, #0
 800c590:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c594:	ab09      	add	r3, sp, #36	; 0x24
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	ec49 8b10 	vmov	d0, r8, r9
 800c59c:	6022      	str	r2, [r4, #0]
 800c59e:	f8cd a004 	str.w	sl, [sp, #4]
 800c5a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f7ff fd2d 	bl	800c006 <__cvt>
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	e648      	b.n	800c242 <_printf_float+0x112>

0800c5b0 <_printf_common>:
 800c5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	4691      	mov	r9, r2
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	688a      	ldr	r2, [r1, #8]
 800c5ba:	690b      	ldr	r3, [r1, #16]
 800c5bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	bfb8      	it	lt
 800c5c4:	4613      	movlt	r3, r2
 800c5c6:	f8c9 3000 	str.w	r3, [r9]
 800c5ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	b112      	cbz	r2, 800c5da <_printf_common+0x2a>
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	f8c9 3000 	str.w	r3, [r9]
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	0699      	lsls	r1, r3, #26
 800c5de:	bf42      	ittt	mi
 800c5e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c5e4:	3302      	addmi	r3, #2
 800c5e6:	f8c9 3000 	strmi.w	r3, [r9]
 800c5ea:	6825      	ldr	r5, [r4, #0]
 800c5ec:	f015 0506 	ands.w	r5, r5, #6
 800c5f0:	d107      	bne.n	800c602 <_printf_common+0x52>
 800c5f2:	f104 0a19 	add.w	sl, r4, #25
 800c5f6:	68e3      	ldr	r3, [r4, #12]
 800c5f8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5fc:	1a9b      	subs	r3, r3, r2
 800c5fe:	42ab      	cmp	r3, r5
 800c600:	dc28      	bgt.n	800c654 <_printf_common+0xa4>
 800c602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c606:	6822      	ldr	r2, [r4, #0]
 800c608:	3300      	adds	r3, #0
 800c60a:	bf18      	it	ne
 800c60c:	2301      	movne	r3, #1
 800c60e:	0692      	lsls	r2, r2, #26
 800c610:	d42d      	bmi.n	800c66e <_printf_common+0xbe>
 800c612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c616:	4639      	mov	r1, r7
 800c618:	4630      	mov	r0, r6
 800c61a:	47c0      	blx	r8
 800c61c:	3001      	adds	r0, #1
 800c61e:	d020      	beq.n	800c662 <_printf_common+0xb2>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	68e5      	ldr	r5, [r4, #12]
 800c624:	f8d9 2000 	ldr.w	r2, [r9]
 800c628:	f003 0306 	and.w	r3, r3, #6
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	bf08      	it	eq
 800c630:	1aad      	subeq	r5, r5, r2
 800c632:	68a3      	ldr	r3, [r4, #8]
 800c634:	6922      	ldr	r2, [r4, #16]
 800c636:	bf0c      	ite	eq
 800c638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c63c:	2500      	movne	r5, #0
 800c63e:	4293      	cmp	r3, r2
 800c640:	bfc4      	itt	gt
 800c642:	1a9b      	subgt	r3, r3, r2
 800c644:	18ed      	addgt	r5, r5, r3
 800c646:	f04f 0900 	mov.w	r9, #0
 800c64a:	341a      	adds	r4, #26
 800c64c:	454d      	cmp	r5, r9
 800c64e:	d11a      	bne.n	800c686 <_printf_common+0xd6>
 800c650:	2000      	movs	r0, #0
 800c652:	e008      	b.n	800c666 <_printf_common+0xb6>
 800c654:	2301      	movs	r3, #1
 800c656:	4652      	mov	r2, sl
 800c658:	4639      	mov	r1, r7
 800c65a:	4630      	mov	r0, r6
 800c65c:	47c0      	blx	r8
 800c65e:	3001      	adds	r0, #1
 800c660:	d103      	bne.n	800c66a <_printf_common+0xba>
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66a:	3501      	adds	r5, #1
 800c66c:	e7c3      	b.n	800c5f6 <_printf_common+0x46>
 800c66e:	18e1      	adds	r1, r4, r3
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	2030      	movs	r0, #48	; 0x30
 800c674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c678:	4422      	add	r2, r4
 800c67a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c67e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c682:	3302      	adds	r3, #2
 800c684:	e7c5      	b.n	800c612 <_printf_common+0x62>
 800c686:	2301      	movs	r3, #1
 800c688:	4622      	mov	r2, r4
 800c68a:	4639      	mov	r1, r7
 800c68c:	4630      	mov	r0, r6
 800c68e:	47c0      	blx	r8
 800c690:	3001      	adds	r0, #1
 800c692:	d0e6      	beq.n	800c662 <_printf_common+0xb2>
 800c694:	f109 0901 	add.w	r9, r9, #1
 800c698:	e7d8      	b.n	800c64c <_printf_common+0x9c>
	...

0800c69c <_printf_i>:
 800c69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	7e09      	ldrb	r1, [r1, #24]
 800c6a8:	b085      	sub	sp, #20
 800c6aa:	296e      	cmp	r1, #110	; 0x6e
 800c6ac:	4617      	mov	r7, r2
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	4698      	mov	r8, r3
 800c6b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6b4:	f000 80b3 	beq.w	800c81e <_printf_i+0x182>
 800c6b8:	d822      	bhi.n	800c700 <_printf_i+0x64>
 800c6ba:	2963      	cmp	r1, #99	; 0x63
 800c6bc:	d036      	beq.n	800c72c <_printf_i+0x90>
 800c6be:	d80a      	bhi.n	800c6d6 <_printf_i+0x3a>
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	f000 80b9 	beq.w	800c838 <_printf_i+0x19c>
 800c6c6:	2958      	cmp	r1, #88	; 0x58
 800c6c8:	f000 8083 	beq.w	800c7d2 <_printf_i+0x136>
 800c6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c6d4:	e032      	b.n	800c73c <_printf_i+0xa0>
 800c6d6:	2964      	cmp	r1, #100	; 0x64
 800c6d8:	d001      	beq.n	800c6de <_printf_i+0x42>
 800c6da:	2969      	cmp	r1, #105	; 0x69
 800c6dc:	d1f6      	bne.n	800c6cc <_printf_i+0x30>
 800c6de:	6820      	ldr	r0, [r4, #0]
 800c6e0:	6813      	ldr	r3, [r2, #0]
 800c6e2:	0605      	lsls	r5, r0, #24
 800c6e4:	f103 0104 	add.w	r1, r3, #4
 800c6e8:	d52a      	bpl.n	800c740 <_printf_i+0xa4>
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6011      	str	r1, [r2, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	da03      	bge.n	800c6fa <_printf_i+0x5e>
 800c6f2:	222d      	movs	r2, #45	; 0x2d
 800c6f4:	425b      	negs	r3, r3
 800c6f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c6fa:	486f      	ldr	r0, [pc, #444]	; (800c8b8 <_printf_i+0x21c>)
 800c6fc:	220a      	movs	r2, #10
 800c6fe:	e039      	b.n	800c774 <_printf_i+0xd8>
 800c700:	2973      	cmp	r1, #115	; 0x73
 800c702:	f000 809d 	beq.w	800c840 <_printf_i+0x1a4>
 800c706:	d808      	bhi.n	800c71a <_printf_i+0x7e>
 800c708:	296f      	cmp	r1, #111	; 0x6f
 800c70a:	d020      	beq.n	800c74e <_printf_i+0xb2>
 800c70c:	2970      	cmp	r1, #112	; 0x70
 800c70e:	d1dd      	bne.n	800c6cc <_printf_i+0x30>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	f043 0320 	orr.w	r3, r3, #32
 800c716:	6023      	str	r3, [r4, #0]
 800c718:	e003      	b.n	800c722 <_printf_i+0x86>
 800c71a:	2975      	cmp	r1, #117	; 0x75
 800c71c:	d017      	beq.n	800c74e <_printf_i+0xb2>
 800c71e:	2978      	cmp	r1, #120	; 0x78
 800c720:	d1d4      	bne.n	800c6cc <_printf_i+0x30>
 800c722:	2378      	movs	r3, #120	; 0x78
 800c724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c728:	4864      	ldr	r0, [pc, #400]	; (800c8bc <_printf_i+0x220>)
 800c72a:	e055      	b.n	800c7d8 <_printf_i+0x13c>
 800c72c:	6813      	ldr	r3, [r2, #0]
 800c72e:	1d19      	adds	r1, r3, #4
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6011      	str	r1, [r2, #0]
 800c734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c73c:	2301      	movs	r3, #1
 800c73e:	e08c      	b.n	800c85a <_printf_i+0x1be>
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6011      	str	r1, [r2, #0]
 800c744:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c748:	bf18      	it	ne
 800c74a:	b21b      	sxthne	r3, r3
 800c74c:	e7cf      	b.n	800c6ee <_printf_i+0x52>
 800c74e:	6813      	ldr	r3, [r2, #0]
 800c750:	6825      	ldr	r5, [r4, #0]
 800c752:	1d18      	adds	r0, r3, #4
 800c754:	6010      	str	r0, [r2, #0]
 800c756:	0628      	lsls	r0, r5, #24
 800c758:	d501      	bpl.n	800c75e <_printf_i+0xc2>
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	e002      	b.n	800c764 <_printf_i+0xc8>
 800c75e:	0668      	lsls	r0, r5, #25
 800c760:	d5fb      	bpl.n	800c75a <_printf_i+0xbe>
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	4854      	ldr	r0, [pc, #336]	; (800c8b8 <_printf_i+0x21c>)
 800c766:	296f      	cmp	r1, #111	; 0x6f
 800c768:	bf14      	ite	ne
 800c76a:	220a      	movne	r2, #10
 800c76c:	2208      	moveq	r2, #8
 800c76e:	2100      	movs	r1, #0
 800c770:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c774:	6865      	ldr	r5, [r4, #4]
 800c776:	60a5      	str	r5, [r4, #8]
 800c778:	2d00      	cmp	r5, #0
 800c77a:	f2c0 8095 	blt.w	800c8a8 <_printf_i+0x20c>
 800c77e:	6821      	ldr	r1, [r4, #0]
 800c780:	f021 0104 	bic.w	r1, r1, #4
 800c784:	6021      	str	r1, [r4, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d13d      	bne.n	800c806 <_printf_i+0x16a>
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	f040 808e 	bne.w	800c8ac <_printf_i+0x210>
 800c790:	4665      	mov	r5, ip
 800c792:	2a08      	cmp	r2, #8
 800c794:	d10b      	bne.n	800c7ae <_printf_i+0x112>
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	07db      	lsls	r3, r3, #31
 800c79a:	d508      	bpl.n	800c7ae <_printf_i+0x112>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	bfde      	ittt	le
 800c7a4:	2330      	movle	r3, #48	; 0x30
 800c7a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7ae:	ebac 0305 	sub.w	r3, ip, r5
 800c7b2:	6123      	str	r3, [r4, #16]
 800c7b4:	f8cd 8000 	str.w	r8, [sp]
 800c7b8:	463b      	mov	r3, r7
 800c7ba:	aa03      	add	r2, sp, #12
 800c7bc:	4621      	mov	r1, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff fef6 	bl	800c5b0 <_printf_common>
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d14d      	bne.n	800c864 <_printf_i+0x1c8>
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7cc:	b005      	add	sp, #20
 800c7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7d2:	4839      	ldr	r0, [pc, #228]	; (800c8b8 <_printf_i+0x21c>)
 800c7d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c7d8:	6813      	ldr	r3, [r2, #0]
 800c7da:	6821      	ldr	r1, [r4, #0]
 800c7dc:	1d1d      	adds	r5, r3, #4
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6015      	str	r5, [r2, #0]
 800c7e2:	060a      	lsls	r2, r1, #24
 800c7e4:	d50b      	bpl.n	800c7fe <_printf_i+0x162>
 800c7e6:	07ca      	lsls	r2, r1, #31
 800c7e8:	bf44      	itt	mi
 800c7ea:	f041 0120 	orrmi.w	r1, r1, #32
 800c7ee:	6021      	strmi	r1, [r4, #0]
 800c7f0:	b91b      	cbnz	r3, 800c7fa <_printf_i+0x15e>
 800c7f2:	6822      	ldr	r2, [r4, #0]
 800c7f4:	f022 0220 	bic.w	r2, r2, #32
 800c7f8:	6022      	str	r2, [r4, #0]
 800c7fa:	2210      	movs	r2, #16
 800c7fc:	e7b7      	b.n	800c76e <_printf_i+0xd2>
 800c7fe:	064d      	lsls	r5, r1, #25
 800c800:	bf48      	it	mi
 800c802:	b29b      	uxthmi	r3, r3
 800c804:	e7ef      	b.n	800c7e6 <_printf_i+0x14a>
 800c806:	4665      	mov	r5, ip
 800c808:	fbb3 f1f2 	udiv	r1, r3, r2
 800c80c:	fb02 3311 	mls	r3, r2, r1, r3
 800c810:	5cc3      	ldrb	r3, [r0, r3]
 800c812:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c816:	460b      	mov	r3, r1
 800c818:	2900      	cmp	r1, #0
 800c81a:	d1f5      	bne.n	800c808 <_printf_i+0x16c>
 800c81c:	e7b9      	b.n	800c792 <_printf_i+0xf6>
 800c81e:	6813      	ldr	r3, [r2, #0]
 800c820:	6825      	ldr	r5, [r4, #0]
 800c822:	6961      	ldr	r1, [r4, #20]
 800c824:	1d18      	adds	r0, r3, #4
 800c826:	6010      	str	r0, [r2, #0]
 800c828:	0628      	lsls	r0, r5, #24
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	d501      	bpl.n	800c832 <_printf_i+0x196>
 800c82e:	6019      	str	r1, [r3, #0]
 800c830:	e002      	b.n	800c838 <_printf_i+0x19c>
 800c832:	066a      	lsls	r2, r5, #25
 800c834:	d5fb      	bpl.n	800c82e <_printf_i+0x192>
 800c836:	8019      	strh	r1, [r3, #0]
 800c838:	2300      	movs	r3, #0
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	4665      	mov	r5, ip
 800c83e:	e7b9      	b.n	800c7b4 <_printf_i+0x118>
 800c840:	6813      	ldr	r3, [r2, #0]
 800c842:	1d19      	adds	r1, r3, #4
 800c844:	6011      	str	r1, [r2, #0]
 800c846:	681d      	ldr	r5, [r3, #0]
 800c848:	6862      	ldr	r2, [r4, #4]
 800c84a:	2100      	movs	r1, #0
 800c84c:	4628      	mov	r0, r5
 800c84e:	f7f3 fcc7 	bl	80001e0 <memchr>
 800c852:	b108      	cbz	r0, 800c858 <_printf_i+0x1bc>
 800c854:	1b40      	subs	r0, r0, r5
 800c856:	6060      	str	r0, [r4, #4]
 800c858:	6863      	ldr	r3, [r4, #4]
 800c85a:	6123      	str	r3, [r4, #16]
 800c85c:	2300      	movs	r3, #0
 800c85e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c862:	e7a7      	b.n	800c7b4 <_printf_i+0x118>
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	462a      	mov	r2, r5
 800c868:	4639      	mov	r1, r7
 800c86a:	4630      	mov	r0, r6
 800c86c:	47c0      	blx	r8
 800c86e:	3001      	adds	r0, #1
 800c870:	d0aa      	beq.n	800c7c8 <_printf_i+0x12c>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	079b      	lsls	r3, r3, #30
 800c876:	d413      	bmi.n	800c8a0 <_printf_i+0x204>
 800c878:	68e0      	ldr	r0, [r4, #12]
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	4298      	cmp	r0, r3
 800c87e:	bfb8      	it	lt
 800c880:	4618      	movlt	r0, r3
 800c882:	e7a3      	b.n	800c7cc <_printf_i+0x130>
 800c884:	2301      	movs	r3, #1
 800c886:	464a      	mov	r2, r9
 800c888:	4639      	mov	r1, r7
 800c88a:	4630      	mov	r0, r6
 800c88c:	47c0      	blx	r8
 800c88e:	3001      	adds	r0, #1
 800c890:	d09a      	beq.n	800c7c8 <_printf_i+0x12c>
 800c892:	3501      	adds	r5, #1
 800c894:	68e3      	ldr	r3, [r4, #12]
 800c896:	9a03      	ldr	r2, [sp, #12]
 800c898:	1a9b      	subs	r3, r3, r2
 800c89a:	42ab      	cmp	r3, r5
 800c89c:	dcf2      	bgt.n	800c884 <_printf_i+0x1e8>
 800c89e:	e7eb      	b.n	800c878 <_printf_i+0x1dc>
 800c8a0:	2500      	movs	r5, #0
 800c8a2:	f104 0919 	add.w	r9, r4, #25
 800c8a6:	e7f5      	b.n	800c894 <_printf_i+0x1f8>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ac      	bne.n	800c806 <_printf_i+0x16a>
 800c8ac:	7803      	ldrb	r3, [r0, #0]
 800c8ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8b6:	e76c      	b.n	800c792 <_printf_i+0xf6>
 800c8b8:	08010716 	.word	0x08010716
 800c8bc:	08010727 	.word	0x08010727

0800c8c0 <_scanf_float>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	469a      	mov	sl, r3
 800c8c6:	688b      	ldr	r3, [r1, #8]
 800c8c8:	4616      	mov	r6, r2
 800c8ca:	1e5a      	subs	r2, r3, #1
 800c8cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c8d0:	b087      	sub	sp, #28
 800c8d2:	bf83      	ittte	hi
 800c8d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c8d8:	189b      	addhi	r3, r3, r2
 800c8da:	9301      	strhi	r3, [sp, #4]
 800c8dc:	2300      	movls	r3, #0
 800c8de:	bf86      	itte	hi
 800c8e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c8e4:	608b      	strhi	r3, [r1, #8]
 800c8e6:	9301      	strls	r3, [sp, #4]
 800c8e8:	680b      	ldr	r3, [r1, #0]
 800c8ea:	4688      	mov	r8, r1
 800c8ec:	f04f 0b00 	mov.w	fp, #0
 800c8f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c8f4:	f848 3b1c 	str.w	r3, [r8], #28
 800c8f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c8fc:	4607      	mov	r7, r0
 800c8fe:	460c      	mov	r4, r1
 800c900:	4645      	mov	r5, r8
 800c902:	465a      	mov	r2, fp
 800c904:	46d9      	mov	r9, fp
 800c906:	f8cd b008 	str.w	fp, [sp, #8]
 800c90a:	68a1      	ldr	r1, [r4, #8]
 800c90c:	b181      	cbz	r1, 800c930 <_scanf_float+0x70>
 800c90e:	6833      	ldr	r3, [r6, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b49      	cmp	r3, #73	; 0x49
 800c914:	d071      	beq.n	800c9fa <_scanf_float+0x13a>
 800c916:	d84d      	bhi.n	800c9b4 <_scanf_float+0xf4>
 800c918:	2b39      	cmp	r3, #57	; 0x39
 800c91a:	d840      	bhi.n	800c99e <_scanf_float+0xde>
 800c91c:	2b31      	cmp	r3, #49	; 0x31
 800c91e:	f080 8088 	bcs.w	800ca32 <_scanf_float+0x172>
 800c922:	2b2d      	cmp	r3, #45	; 0x2d
 800c924:	f000 8090 	beq.w	800ca48 <_scanf_float+0x188>
 800c928:	d815      	bhi.n	800c956 <_scanf_float+0x96>
 800c92a:	2b2b      	cmp	r3, #43	; 0x2b
 800c92c:	f000 808c 	beq.w	800ca48 <_scanf_float+0x188>
 800c930:	f1b9 0f00 	cmp.w	r9, #0
 800c934:	d003      	beq.n	800c93e <_scanf_float+0x7e>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	3a01      	subs	r2, #1
 800c940:	2a01      	cmp	r2, #1
 800c942:	f200 80ea 	bhi.w	800cb1a <_scanf_float+0x25a>
 800c946:	4545      	cmp	r5, r8
 800c948:	f200 80dc 	bhi.w	800cb04 <_scanf_float+0x244>
 800c94c:	2601      	movs	r6, #1
 800c94e:	4630      	mov	r0, r6
 800c950:	b007      	add	sp, #28
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c956:	2b2e      	cmp	r3, #46	; 0x2e
 800c958:	f000 809f 	beq.w	800ca9a <_scanf_float+0x1da>
 800c95c:	2b30      	cmp	r3, #48	; 0x30
 800c95e:	d1e7      	bne.n	800c930 <_scanf_float+0x70>
 800c960:	6820      	ldr	r0, [r4, #0]
 800c962:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c966:	d064      	beq.n	800ca32 <_scanf_float+0x172>
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c96e:	6020      	str	r0, [r4, #0]
 800c970:	f109 0901 	add.w	r9, r9, #1
 800c974:	b11b      	cbz	r3, 800c97e <_scanf_float+0xbe>
 800c976:	3b01      	subs	r3, #1
 800c978:	3101      	adds	r1, #1
 800c97a:	9301      	str	r3, [sp, #4]
 800c97c:	60a1      	str	r1, [r4, #8]
 800c97e:	68a3      	ldr	r3, [r4, #8]
 800c980:	3b01      	subs	r3, #1
 800c982:	60a3      	str	r3, [r4, #8]
 800c984:	6923      	ldr	r3, [r4, #16]
 800c986:	3301      	adds	r3, #1
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	6873      	ldr	r3, [r6, #4]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	2b00      	cmp	r3, #0
 800c990:	6073      	str	r3, [r6, #4]
 800c992:	f340 80ac 	ble.w	800caee <_scanf_float+0x22e>
 800c996:	6833      	ldr	r3, [r6, #0]
 800c998:	3301      	adds	r3, #1
 800c99a:	6033      	str	r3, [r6, #0]
 800c99c:	e7b5      	b.n	800c90a <_scanf_float+0x4a>
 800c99e:	2b45      	cmp	r3, #69	; 0x45
 800c9a0:	f000 8085 	beq.w	800caae <_scanf_float+0x1ee>
 800c9a4:	2b46      	cmp	r3, #70	; 0x46
 800c9a6:	d06a      	beq.n	800ca7e <_scanf_float+0x1be>
 800c9a8:	2b41      	cmp	r3, #65	; 0x41
 800c9aa:	d1c1      	bne.n	800c930 <_scanf_float+0x70>
 800c9ac:	2a01      	cmp	r2, #1
 800c9ae:	d1bf      	bne.n	800c930 <_scanf_float+0x70>
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	e046      	b.n	800ca42 <_scanf_float+0x182>
 800c9b4:	2b65      	cmp	r3, #101	; 0x65
 800c9b6:	d07a      	beq.n	800caae <_scanf_float+0x1ee>
 800c9b8:	d818      	bhi.n	800c9ec <_scanf_float+0x12c>
 800c9ba:	2b54      	cmp	r3, #84	; 0x54
 800c9bc:	d066      	beq.n	800ca8c <_scanf_float+0x1cc>
 800c9be:	d811      	bhi.n	800c9e4 <_scanf_float+0x124>
 800c9c0:	2b4e      	cmp	r3, #78	; 0x4e
 800c9c2:	d1b5      	bne.n	800c930 <_scanf_float+0x70>
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	d146      	bne.n	800ca56 <_scanf_float+0x196>
 800c9c8:	f1b9 0f00 	cmp.w	r9, #0
 800c9cc:	d145      	bne.n	800ca5a <_scanf_float+0x19a>
 800c9ce:	6821      	ldr	r1, [r4, #0]
 800c9d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c9d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c9d8:	d13f      	bne.n	800ca5a <_scanf_float+0x19a>
 800c9da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c9de:	6021      	str	r1, [r4, #0]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	e02e      	b.n	800ca42 <_scanf_float+0x182>
 800c9e4:	2b59      	cmp	r3, #89	; 0x59
 800c9e6:	d01e      	beq.n	800ca26 <_scanf_float+0x166>
 800c9e8:	2b61      	cmp	r3, #97	; 0x61
 800c9ea:	e7de      	b.n	800c9aa <_scanf_float+0xea>
 800c9ec:	2b6e      	cmp	r3, #110	; 0x6e
 800c9ee:	d0e9      	beq.n	800c9c4 <_scanf_float+0x104>
 800c9f0:	d815      	bhi.n	800ca1e <_scanf_float+0x15e>
 800c9f2:	2b66      	cmp	r3, #102	; 0x66
 800c9f4:	d043      	beq.n	800ca7e <_scanf_float+0x1be>
 800c9f6:	2b69      	cmp	r3, #105	; 0x69
 800c9f8:	d19a      	bne.n	800c930 <_scanf_float+0x70>
 800c9fa:	f1bb 0f00 	cmp.w	fp, #0
 800c9fe:	d138      	bne.n	800ca72 <_scanf_float+0x1b2>
 800ca00:	f1b9 0f00 	cmp.w	r9, #0
 800ca04:	d197      	bne.n	800c936 <_scanf_float+0x76>
 800ca06:	6821      	ldr	r1, [r4, #0]
 800ca08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ca0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ca10:	d195      	bne.n	800c93e <_scanf_float+0x7e>
 800ca12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ca16:	6021      	str	r1, [r4, #0]
 800ca18:	f04f 0b01 	mov.w	fp, #1
 800ca1c:	e011      	b.n	800ca42 <_scanf_float+0x182>
 800ca1e:	2b74      	cmp	r3, #116	; 0x74
 800ca20:	d034      	beq.n	800ca8c <_scanf_float+0x1cc>
 800ca22:	2b79      	cmp	r3, #121	; 0x79
 800ca24:	d184      	bne.n	800c930 <_scanf_float+0x70>
 800ca26:	f1bb 0f07 	cmp.w	fp, #7
 800ca2a:	d181      	bne.n	800c930 <_scanf_float+0x70>
 800ca2c:	f04f 0b08 	mov.w	fp, #8
 800ca30:	e007      	b.n	800ca42 <_scanf_float+0x182>
 800ca32:	eb12 0f0b 	cmn.w	r2, fp
 800ca36:	f47f af7b 	bne.w	800c930 <_scanf_float+0x70>
 800ca3a:	6821      	ldr	r1, [r4, #0]
 800ca3c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ca40:	6021      	str	r1, [r4, #0]
 800ca42:	702b      	strb	r3, [r5, #0]
 800ca44:	3501      	adds	r5, #1
 800ca46:	e79a      	b.n	800c97e <_scanf_float+0xbe>
 800ca48:	6821      	ldr	r1, [r4, #0]
 800ca4a:	0608      	lsls	r0, r1, #24
 800ca4c:	f57f af70 	bpl.w	800c930 <_scanf_float+0x70>
 800ca50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ca54:	e7f4      	b.n	800ca40 <_scanf_float+0x180>
 800ca56:	2a02      	cmp	r2, #2
 800ca58:	d047      	beq.n	800caea <_scanf_float+0x22a>
 800ca5a:	f1bb 0f01 	cmp.w	fp, #1
 800ca5e:	d003      	beq.n	800ca68 <_scanf_float+0x1a8>
 800ca60:	f1bb 0f04 	cmp.w	fp, #4
 800ca64:	f47f af64 	bne.w	800c930 <_scanf_float+0x70>
 800ca68:	f10b 0b01 	add.w	fp, fp, #1
 800ca6c:	fa5f fb8b 	uxtb.w	fp, fp
 800ca70:	e7e7      	b.n	800ca42 <_scanf_float+0x182>
 800ca72:	f1bb 0f03 	cmp.w	fp, #3
 800ca76:	d0f7      	beq.n	800ca68 <_scanf_float+0x1a8>
 800ca78:	f1bb 0f05 	cmp.w	fp, #5
 800ca7c:	e7f2      	b.n	800ca64 <_scanf_float+0x1a4>
 800ca7e:	f1bb 0f02 	cmp.w	fp, #2
 800ca82:	f47f af55 	bne.w	800c930 <_scanf_float+0x70>
 800ca86:	f04f 0b03 	mov.w	fp, #3
 800ca8a:	e7da      	b.n	800ca42 <_scanf_float+0x182>
 800ca8c:	f1bb 0f06 	cmp.w	fp, #6
 800ca90:	f47f af4e 	bne.w	800c930 <_scanf_float+0x70>
 800ca94:	f04f 0b07 	mov.w	fp, #7
 800ca98:	e7d3      	b.n	800ca42 <_scanf_float+0x182>
 800ca9a:	6821      	ldr	r1, [r4, #0]
 800ca9c:	0588      	lsls	r0, r1, #22
 800ca9e:	f57f af47 	bpl.w	800c930 <_scanf_float+0x70>
 800caa2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800caa6:	6021      	str	r1, [r4, #0]
 800caa8:	f8cd 9008 	str.w	r9, [sp, #8]
 800caac:	e7c9      	b.n	800ca42 <_scanf_float+0x182>
 800caae:	6821      	ldr	r1, [r4, #0]
 800cab0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cab4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cab8:	d006      	beq.n	800cac8 <_scanf_float+0x208>
 800caba:	0548      	lsls	r0, r1, #21
 800cabc:	f57f af38 	bpl.w	800c930 <_scanf_float+0x70>
 800cac0:	f1b9 0f00 	cmp.w	r9, #0
 800cac4:	f43f af3b 	beq.w	800c93e <_scanf_float+0x7e>
 800cac8:	0588      	lsls	r0, r1, #22
 800caca:	bf58      	it	pl
 800cacc:	9802      	ldrpl	r0, [sp, #8]
 800cace:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cad2:	bf58      	it	pl
 800cad4:	eba9 0000 	subpl.w	r0, r9, r0
 800cad8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800cadc:	bf58      	it	pl
 800cade:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800cae2:	6021      	str	r1, [r4, #0]
 800cae4:	f04f 0900 	mov.w	r9, #0
 800cae8:	e7ab      	b.n	800ca42 <_scanf_float+0x182>
 800caea:	2203      	movs	r2, #3
 800caec:	e7a9      	b.n	800ca42 <_scanf_float+0x182>
 800caee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800caf2:	9205      	str	r2, [sp, #20]
 800caf4:	4631      	mov	r1, r6
 800caf6:	4638      	mov	r0, r7
 800caf8:	4798      	blx	r3
 800cafa:	9a05      	ldr	r2, [sp, #20]
 800cafc:	2800      	cmp	r0, #0
 800cafe:	f43f af04 	beq.w	800c90a <_scanf_float+0x4a>
 800cb02:	e715      	b.n	800c930 <_scanf_float+0x70>
 800cb04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cb0c:	4632      	mov	r2, r6
 800cb0e:	4638      	mov	r0, r7
 800cb10:	4798      	blx	r3
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	6123      	str	r3, [r4, #16]
 800cb18:	e715      	b.n	800c946 <_scanf_float+0x86>
 800cb1a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cb1e:	2b06      	cmp	r3, #6
 800cb20:	d80a      	bhi.n	800cb38 <_scanf_float+0x278>
 800cb22:	f1bb 0f02 	cmp.w	fp, #2
 800cb26:	d968      	bls.n	800cbfa <_scanf_float+0x33a>
 800cb28:	f1ab 0b03 	sub.w	fp, fp, #3
 800cb2c:	fa5f fb8b 	uxtb.w	fp, fp
 800cb30:	eba5 0b0b 	sub.w	fp, r5, fp
 800cb34:	455d      	cmp	r5, fp
 800cb36:	d14b      	bne.n	800cbd0 <_scanf_float+0x310>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	05da      	lsls	r2, r3, #23
 800cb3c:	d51f      	bpl.n	800cb7e <_scanf_float+0x2be>
 800cb3e:	055b      	lsls	r3, r3, #21
 800cb40:	d468      	bmi.n	800cc14 <_scanf_float+0x354>
 800cb42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cb46:	6923      	ldr	r3, [r4, #16]
 800cb48:	2965      	cmp	r1, #101	; 0x65
 800cb4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb4e:	f105 3bff 	add.w	fp, r5, #4294967295
 800cb52:	6123      	str	r3, [r4, #16]
 800cb54:	d00d      	beq.n	800cb72 <_scanf_float+0x2b2>
 800cb56:	2945      	cmp	r1, #69	; 0x45
 800cb58:	d00b      	beq.n	800cb72 <_scanf_float+0x2b2>
 800cb5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb5e:	4632      	mov	r2, r6
 800cb60:	4638      	mov	r0, r7
 800cb62:	4798      	blx	r3
 800cb64:	6923      	ldr	r3, [r4, #16]
 800cb66:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	f1a5 0b02 	sub.w	fp, r5, #2
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb76:	4632      	mov	r2, r6
 800cb78:	4638      	mov	r0, r7
 800cb7a:	4798      	blx	r3
 800cb7c:	465d      	mov	r5, fp
 800cb7e:	6826      	ldr	r6, [r4, #0]
 800cb80:	f016 0610 	ands.w	r6, r6, #16
 800cb84:	d17a      	bne.n	800cc7c <_scanf_float+0x3bc>
 800cb86:	702e      	strb	r6, [r5, #0]
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb92:	d142      	bne.n	800cc1a <_scanf_float+0x35a>
 800cb94:	9b02      	ldr	r3, [sp, #8]
 800cb96:	eba9 0303 	sub.w	r3, r9, r3
 800cb9a:	425a      	negs	r2, r3
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d149      	bne.n	800cc34 <_scanf_float+0x374>
 800cba0:	2200      	movs	r2, #0
 800cba2:	4641      	mov	r1, r8
 800cba4:	4638      	mov	r0, r7
 800cba6:	f000 ff1f 	bl	800d9e8 <_strtod_r>
 800cbaa:	6825      	ldr	r5, [r4, #0]
 800cbac:	f8da 3000 	ldr.w	r3, [sl]
 800cbb0:	f015 0f02 	tst.w	r5, #2
 800cbb4:	f103 0204 	add.w	r2, r3, #4
 800cbb8:	ec59 8b10 	vmov	r8, r9, d0
 800cbbc:	f8ca 2000 	str.w	r2, [sl]
 800cbc0:	d043      	beq.n	800cc4a <_scanf_float+0x38a>
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	e9c3 8900 	strd	r8, r9, [r3]
 800cbc8:	68e3      	ldr	r3, [r4, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60e3      	str	r3, [r4, #12]
 800cbce:	e6be      	b.n	800c94e <_scanf_float+0x8e>
 800cbd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cbd8:	4632      	mov	r2, r6
 800cbda:	4638      	mov	r0, r7
 800cbdc:	4798      	blx	r3
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	6123      	str	r3, [r4, #16]
 800cbe4:	e7a6      	b.n	800cb34 <_scanf_float+0x274>
 800cbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cbee:	4632      	mov	r2, r6
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	4798      	blx	r3
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	6123      	str	r3, [r4, #16]
 800cbfa:	4545      	cmp	r5, r8
 800cbfc:	d8f3      	bhi.n	800cbe6 <_scanf_float+0x326>
 800cbfe:	e6a5      	b.n	800c94c <_scanf_float+0x8c>
 800cc00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cc08:	4632      	mov	r2, r6
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	4798      	blx	r3
 800cc0e:	6923      	ldr	r3, [r4, #16]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	6123      	str	r3, [r4, #16]
 800cc14:	4545      	cmp	r5, r8
 800cc16:	d8f3      	bhi.n	800cc00 <_scanf_float+0x340>
 800cc18:	e698      	b.n	800c94c <_scanf_float+0x8c>
 800cc1a:	9b03      	ldr	r3, [sp, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d0bf      	beq.n	800cba0 <_scanf_float+0x2e0>
 800cc20:	9904      	ldr	r1, [sp, #16]
 800cc22:	230a      	movs	r3, #10
 800cc24:	4632      	mov	r2, r6
 800cc26:	3101      	adds	r1, #1
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f000 ff69 	bl	800db00 <_strtol_r>
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	9d04      	ldr	r5, [sp, #16]
 800cc32:	1ac2      	subs	r2, r0, r3
 800cc34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cc38:	429d      	cmp	r5, r3
 800cc3a:	bf28      	it	cs
 800cc3c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800cc40:	490f      	ldr	r1, [pc, #60]	; (800cc80 <_scanf_float+0x3c0>)
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f8a0 	bl	800cd88 <siprintf>
 800cc48:	e7aa      	b.n	800cba0 <_scanf_float+0x2e0>
 800cc4a:	f015 0504 	ands.w	r5, r5, #4
 800cc4e:	d1b8      	bne.n	800cbc2 <_scanf_float+0x302>
 800cc50:	681f      	ldr	r7, [r3, #0]
 800cc52:	ee10 2a10 	vmov	r2, s0
 800cc56:	464b      	mov	r3, r9
 800cc58:	ee10 0a10 	vmov	r0, s0
 800cc5c:	4649      	mov	r1, r9
 800cc5e:	f7f3 ff65 	bl	8000b2c <__aeabi_dcmpun>
 800cc62:	b128      	cbz	r0, 800cc70 <_scanf_float+0x3b0>
 800cc64:	4628      	mov	r0, r5
 800cc66:	f000 f889 	bl	800cd7c <nanf>
 800cc6a:	ed87 0a00 	vstr	s0, [r7]
 800cc6e:	e7ab      	b.n	800cbc8 <_scanf_float+0x308>
 800cc70:	4640      	mov	r0, r8
 800cc72:	4649      	mov	r1, r9
 800cc74:	f7f3 ffb8 	bl	8000be8 <__aeabi_d2f>
 800cc78:	6038      	str	r0, [r7, #0]
 800cc7a:	e7a5      	b.n	800cbc8 <_scanf_float+0x308>
 800cc7c:	2600      	movs	r6, #0
 800cc7e:	e666      	b.n	800c94e <_scanf_float+0x8e>
 800cc80:	08010738 	.word	0x08010738

0800cc84 <iprintf>:
 800cc84:	b40f      	push	{r0, r1, r2, r3}
 800cc86:	4b0a      	ldr	r3, [pc, #40]	; (800ccb0 <iprintf+0x2c>)
 800cc88:	b513      	push	{r0, r1, r4, lr}
 800cc8a:	681c      	ldr	r4, [r3, #0]
 800cc8c:	b124      	cbz	r4, 800cc98 <iprintf+0x14>
 800cc8e:	69a3      	ldr	r3, [r4, #24]
 800cc90:	b913      	cbnz	r3, 800cc98 <iprintf+0x14>
 800cc92:	4620      	mov	r0, r4
 800cc94:	f001 ff3c 	bl	800eb10 <__sinit>
 800cc98:	ab05      	add	r3, sp, #20
 800cc9a:	9a04      	ldr	r2, [sp, #16]
 800cc9c:	68a1      	ldr	r1, [r4, #8]
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	4620      	mov	r0, r4
 800cca2:	f003 f9a9 	bl	800fff8 <_vfiprintf_r>
 800cca6:	b002      	add	sp, #8
 800cca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccac:	b004      	add	sp, #16
 800ccae:	4770      	bx	lr
 800ccb0:	20000040 	.word	0x20000040

0800ccb4 <_puts_r>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	460e      	mov	r6, r1
 800ccb8:	4605      	mov	r5, r0
 800ccba:	b118      	cbz	r0, 800ccc4 <_puts_r+0x10>
 800ccbc:	6983      	ldr	r3, [r0, #24]
 800ccbe:	b90b      	cbnz	r3, 800ccc4 <_puts_r+0x10>
 800ccc0:	f001 ff26 	bl	800eb10 <__sinit>
 800ccc4:	69ab      	ldr	r3, [r5, #24]
 800ccc6:	68ac      	ldr	r4, [r5, #8]
 800ccc8:	b913      	cbnz	r3, 800ccd0 <_puts_r+0x1c>
 800ccca:	4628      	mov	r0, r5
 800cccc:	f001 ff20 	bl	800eb10 <__sinit>
 800ccd0:	4b23      	ldr	r3, [pc, #140]	; (800cd60 <_puts_r+0xac>)
 800ccd2:	429c      	cmp	r4, r3
 800ccd4:	d117      	bne.n	800cd06 <_puts_r+0x52>
 800ccd6:	686c      	ldr	r4, [r5, #4]
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	071b      	lsls	r3, r3, #28
 800ccdc:	d51d      	bpl.n	800cd1a <_puts_r+0x66>
 800ccde:	6923      	ldr	r3, [r4, #16]
 800cce0:	b1db      	cbz	r3, 800cd1a <_puts_r+0x66>
 800cce2:	3e01      	subs	r6, #1
 800cce4:	68a3      	ldr	r3, [r4, #8]
 800cce6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccea:	3b01      	subs	r3, #1
 800ccec:	60a3      	str	r3, [r4, #8]
 800ccee:	b9e9      	cbnz	r1, 800cd2c <_puts_r+0x78>
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	da2e      	bge.n	800cd52 <_puts_r+0x9e>
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	210a      	movs	r1, #10
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f000 ff13 	bl	800db24 <__swbuf_r>
 800ccfe:	3001      	adds	r0, #1
 800cd00:	d011      	beq.n	800cd26 <_puts_r+0x72>
 800cd02:	200a      	movs	r0, #10
 800cd04:	e011      	b.n	800cd2a <_puts_r+0x76>
 800cd06:	4b17      	ldr	r3, [pc, #92]	; (800cd64 <_puts_r+0xb0>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d101      	bne.n	800cd10 <_puts_r+0x5c>
 800cd0c:	68ac      	ldr	r4, [r5, #8]
 800cd0e:	e7e3      	b.n	800ccd8 <_puts_r+0x24>
 800cd10:	4b15      	ldr	r3, [pc, #84]	; (800cd68 <_puts_r+0xb4>)
 800cd12:	429c      	cmp	r4, r3
 800cd14:	bf08      	it	eq
 800cd16:	68ec      	ldreq	r4, [r5, #12]
 800cd18:	e7de      	b.n	800ccd8 <_puts_r+0x24>
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 ff53 	bl	800dbc8 <__swsetup_r>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d0dd      	beq.n	800cce2 <_puts_r+0x2e>
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	da04      	bge.n	800cd3a <_puts_r+0x86>
 800cd30:	69a2      	ldr	r2, [r4, #24]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	dc06      	bgt.n	800cd44 <_puts_r+0x90>
 800cd36:	290a      	cmp	r1, #10
 800cd38:	d004      	beq.n	800cd44 <_puts_r+0x90>
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	6022      	str	r2, [r4, #0]
 800cd40:	7019      	strb	r1, [r3, #0]
 800cd42:	e7cf      	b.n	800cce4 <_puts_r+0x30>
 800cd44:	4622      	mov	r2, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f000 feec 	bl	800db24 <__swbuf_r>
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d1c9      	bne.n	800cce4 <_puts_r+0x30>
 800cd50:	e7e9      	b.n	800cd26 <_puts_r+0x72>
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	200a      	movs	r0, #10
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	6022      	str	r2, [r4, #0]
 800cd5a:	7018      	strb	r0, [r3, #0]
 800cd5c:	e7e5      	b.n	800cd2a <_puts_r+0x76>
 800cd5e:	bf00      	nop
 800cd60:	080107c0 	.word	0x080107c0
 800cd64:	080107e0 	.word	0x080107e0
 800cd68:	080107a0 	.word	0x080107a0

0800cd6c <puts>:
 800cd6c:	4b02      	ldr	r3, [pc, #8]	; (800cd78 <puts+0xc>)
 800cd6e:	4601      	mov	r1, r0
 800cd70:	6818      	ldr	r0, [r3, #0]
 800cd72:	f7ff bf9f 	b.w	800ccb4 <_puts_r>
 800cd76:	bf00      	nop
 800cd78:	20000040 	.word	0x20000040

0800cd7c <nanf>:
 800cd7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd84 <nanf+0x8>
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	7fc00000 	.word	0x7fc00000

0800cd88 <siprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	b500      	push	{lr}
 800cd8c:	b09c      	sub	sp, #112	; 0x70
 800cd8e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd90:	9002      	str	r0, [sp, #8]
 800cd92:	9006      	str	r0, [sp, #24]
 800cd94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd98:	4809      	ldr	r0, [pc, #36]	; (800cdc0 <siprintf+0x38>)
 800cd9a:	9107      	str	r1, [sp, #28]
 800cd9c:	9104      	str	r1, [sp, #16]
 800cd9e:	4909      	ldr	r1, [pc, #36]	; (800cdc4 <siprintf+0x3c>)
 800cda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	6800      	ldr	r0, [r0, #0]
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	a902      	add	r1, sp, #8
 800cdac:	f003 f802 	bl	800fdb4 <_svfiprintf_r>
 800cdb0:	9b02      	ldr	r3, [sp, #8]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	b01c      	add	sp, #112	; 0x70
 800cdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdbc:	b003      	add	sp, #12
 800cdbe:	4770      	bx	lr
 800cdc0:	20000040 	.word	0x20000040
 800cdc4:	ffff0208 	.word	0xffff0208

0800cdc8 <sulp>:
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	4604      	mov	r4, r0
 800cdcc:	460d      	mov	r5, r1
 800cdce:	ec45 4b10 	vmov	d0, r4, r5
 800cdd2:	4616      	mov	r6, r2
 800cdd4:	f002 fdaa 	bl	800f92c <__ulp>
 800cdd8:	ec51 0b10 	vmov	r0, r1, d0
 800cddc:	b17e      	cbz	r6, 800cdfe <sulp+0x36>
 800cdde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cde2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	dd09      	ble.n	800cdfe <sulp+0x36>
 800cdea:	051b      	lsls	r3, r3, #20
 800cdec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cdf0:	2400      	movs	r4, #0
 800cdf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	462b      	mov	r3, r5
 800cdfa:	f7f3 fbfd 	bl	80005f8 <__aeabi_dmul>
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}

0800ce00 <_strtod_l>:
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	461f      	mov	r7, r3
 800ce06:	b0a1      	sub	sp, #132	; 0x84
 800ce08:	2300      	movs	r3, #0
 800ce0a:	4681      	mov	r9, r0
 800ce0c:	4638      	mov	r0, r7
 800ce0e:	460e      	mov	r6, r1
 800ce10:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce12:	931c      	str	r3, [sp, #112]	; 0x70
 800ce14:	f002 fa2f 	bl	800f276 <__localeconv_l>
 800ce18:	4680      	mov	r8, r0
 800ce1a:	6800      	ldr	r0, [r0, #0]
 800ce1c:	f7f3 f9d8 	bl	80001d0 <strlen>
 800ce20:	f04f 0a00 	mov.w	sl, #0
 800ce24:	4604      	mov	r4, r0
 800ce26:	f04f 0b00 	mov.w	fp, #0
 800ce2a:	961b      	str	r6, [sp, #108]	; 0x6c
 800ce2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	2a0d      	cmp	r2, #13
 800ce32:	d832      	bhi.n	800ce9a <_strtod_l+0x9a>
 800ce34:	2a09      	cmp	r2, #9
 800ce36:	d236      	bcs.n	800cea6 <_strtod_l+0xa6>
 800ce38:	2a00      	cmp	r2, #0
 800ce3a:	d03e      	beq.n	800ceba <_strtod_l+0xba>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ce40:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ce42:	782b      	ldrb	r3, [r5, #0]
 800ce44:	2b30      	cmp	r3, #48	; 0x30
 800ce46:	f040 80ac 	bne.w	800cfa2 <_strtod_l+0x1a2>
 800ce4a:	786b      	ldrb	r3, [r5, #1]
 800ce4c:	2b58      	cmp	r3, #88	; 0x58
 800ce4e:	d001      	beq.n	800ce54 <_strtod_l+0x54>
 800ce50:	2b78      	cmp	r3, #120	; 0x78
 800ce52:	d167      	bne.n	800cf24 <_strtod_l+0x124>
 800ce54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	ab1c      	add	r3, sp, #112	; 0x70
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	9702      	str	r7, [sp, #8]
 800ce5e:	ab1d      	add	r3, sp, #116	; 0x74
 800ce60:	4a88      	ldr	r2, [pc, #544]	; (800d084 <_strtod_l+0x284>)
 800ce62:	a91b      	add	r1, sp, #108	; 0x6c
 800ce64:	4648      	mov	r0, r9
 800ce66:	f001 ff2c 	bl	800ecc2 <__gethex>
 800ce6a:	f010 0407 	ands.w	r4, r0, #7
 800ce6e:	4606      	mov	r6, r0
 800ce70:	d005      	beq.n	800ce7e <_strtod_l+0x7e>
 800ce72:	2c06      	cmp	r4, #6
 800ce74:	d12b      	bne.n	800cece <_strtod_l+0xce>
 800ce76:	3501      	adds	r5, #1
 800ce78:	2300      	movs	r3, #0
 800ce7a:	951b      	str	r5, [sp, #108]	; 0x6c
 800ce7c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f040 859a 	bne.w	800d9ba <_strtod_l+0xbba>
 800ce86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce88:	b1e3      	cbz	r3, 800cec4 <_strtod_l+0xc4>
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce90:	ec43 2b10 	vmov	d0, r2, r3
 800ce94:	b021      	add	sp, #132	; 0x84
 800ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9a:	2a2b      	cmp	r2, #43	; 0x2b
 800ce9c:	d015      	beq.n	800ceca <_strtod_l+0xca>
 800ce9e:	2a2d      	cmp	r2, #45	; 0x2d
 800cea0:	d004      	beq.n	800ceac <_strtod_l+0xac>
 800cea2:	2a20      	cmp	r2, #32
 800cea4:	d1ca      	bne.n	800ce3c <_strtod_l+0x3c>
 800cea6:	3301      	adds	r3, #1
 800cea8:	931b      	str	r3, [sp, #108]	; 0x6c
 800ceaa:	e7bf      	b.n	800ce2c <_strtod_l+0x2c>
 800ceac:	2201      	movs	r2, #1
 800ceae:	920d      	str	r2, [sp, #52]	; 0x34
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	921b      	str	r2, [sp, #108]	; 0x6c
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1c2      	bne.n	800ce40 <_strtod_l+0x40>
 800ceba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cebc:	961b      	str	r6, [sp, #108]	; 0x6c
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f040 8579 	bne.w	800d9b6 <_strtod_l+0xbb6>
 800cec4:	4652      	mov	r2, sl
 800cec6:	465b      	mov	r3, fp
 800cec8:	e7e2      	b.n	800ce90 <_strtod_l+0x90>
 800ceca:	2200      	movs	r2, #0
 800cecc:	e7ef      	b.n	800ceae <_strtod_l+0xae>
 800cece:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ced0:	b13a      	cbz	r2, 800cee2 <_strtod_l+0xe2>
 800ced2:	2135      	movs	r1, #53	; 0x35
 800ced4:	a81e      	add	r0, sp, #120	; 0x78
 800ced6:	f002 fe21 	bl	800fb1c <__copybits>
 800ceda:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cedc:	4648      	mov	r0, r9
 800cede:	f002 fa8d 	bl	800f3fc <_Bfree>
 800cee2:	3c01      	subs	r4, #1
 800cee4:	2c04      	cmp	r4, #4
 800cee6:	d806      	bhi.n	800cef6 <_strtod_l+0xf6>
 800cee8:	e8df f004 	tbb	[pc, r4]
 800ceec:	1714030a 	.word	0x1714030a
 800cef0:	0a          	.byte	0x0a
 800cef1:	00          	.byte	0x00
 800cef2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800cef6:	0730      	lsls	r0, r6, #28
 800cef8:	d5c1      	bpl.n	800ce7e <_strtod_l+0x7e>
 800cefa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cefe:	e7be      	b.n	800ce7e <_strtod_l+0x7e>
 800cf00:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800cf04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cf06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cf0a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf0e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf12:	e7f0      	b.n	800cef6 <_strtod_l+0xf6>
 800cf14:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d088 <_strtod_l+0x288>
 800cf18:	e7ed      	b.n	800cef6 <_strtod_l+0xf6>
 800cf1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cf1e:	f04f 3aff 	mov.w	sl, #4294967295
 800cf22:	e7e8      	b.n	800cef6 <_strtod_l+0xf6>
 800cf24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf26:	1c5a      	adds	r2, r3, #1
 800cf28:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf2a:	785b      	ldrb	r3, [r3, #1]
 800cf2c:	2b30      	cmp	r3, #48	; 0x30
 800cf2e:	d0f9      	beq.n	800cf24 <_strtod_l+0x124>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d0a4      	beq.n	800ce7e <_strtod_l+0x7e>
 800cf34:	2301      	movs	r3, #1
 800cf36:	2500      	movs	r5, #0
 800cf38:	9306      	str	r3, [sp, #24]
 800cf3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf3c:	9308      	str	r3, [sp, #32]
 800cf3e:	9507      	str	r5, [sp, #28]
 800cf40:	9505      	str	r5, [sp, #20]
 800cf42:	220a      	movs	r2, #10
 800cf44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cf46:	7807      	ldrb	r7, [r0, #0]
 800cf48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cf4c:	b2d9      	uxtb	r1, r3
 800cf4e:	2909      	cmp	r1, #9
 800cf50:	d929      	bls.n	800cfa6 <_strtod_l+0x1a6>
 800cf52:	4622      	mov	r2, r4
 800cf54:	f8d8 1000 	ldr.w	r1, [r8]
 800cf58:	f003 f9b7 	bl	80102ca <strncmp>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d031      	beq.n	800cfc4 <_strtod_l+0x1c4>
 800cf60:	2000      	movs	r0, #0
 800cf62:	9c05      	ldr	r4, [sp, #20]
 800cf64:	9004      	str	r0, [sp, #16]
 800cf66:	463b      	mov	r3, r7
 800cf68:	4602      	mov	r2, r0
 800cf6a:	2b65      	cmp	r3, #101	; 0x65
 800cf6c:	d001      	beq.n	800cf72 <_strtod_l+0x172>
 800cf6e:	2b45      	cmp	r3, #69	; 0x45
 800cf70:	d114      	bne.n	800cf9c <_strtod_l+0x19c>
 800cf72:	b924      	cbnz	r4, 800cf7e <_strtod_l+0x17e>
 800cf74:	b910      	cbnz	r0, 800cf7c <_strtod_l+0x17c>
 800cf76:	9b06      	ldr	r3, [sp, #24]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d09e      	beq.n	800ceba <_strtod_l+0xba>
 800cf7c:	2400      	movs	r4, #0
 800cf7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800cf80:	1c73      	adds	r3, r6, #1
 800cf82:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf84:	7873      	ldrb	r3, [r6, #1]
 800cf86:	2b2b      	cmp	r3, #43	; 0x2b
 800cf88:	d078      	beq.n	800d07c <_strtod_l+0x27c>
 800cf8a:	2b2d      	cmp	r3, #45	; 0x2d
 800cf8c:	d070      	beq.n	800d070 <_strtod_l+0x270>
 800cf8e:	f04f 0c00 	mov.w	ip, #0
 800cf92:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800cf96:	2f09      	cmp	r7, #9
 800cf98:	d97c      	bls.n	800d094 <_strtod_l+0x294>
 800cf9a:	961b      	str	r6, [sp, #108]	; 0x6c
 800cf9c:	f04f 0e00 	mov.w	lr, #0
 800cfa0:	e09a      	b.n	800d0d8 <_strtod_l+0x2d8>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e7c7      	b.n	800cf36 <_strtod_l+0x136>
 800cfa6:	9905      	ldr	r1, [sp, #20]
 800cfa8:	2908      	cmp	r1, #8
 800cfaa:	bfdd      	ittte	le
 800cfac:	9907      	ldrle	r1, [sp, #28]
 800cfae:	fb02 3301 	mlale	r3, r2, r1, r3
 800cfb2:	9307      	strle	r3, [sp, #28]
 800cfb4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800cfb8:	9b05      	ldr	r3, [sp, #20]
 800cfba:	3001      	adds	r0, #1
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	9305      	str	r3, [sp, #20]
 800cfc0:	901b      	str	r0, [sp, #108]	; 0x6c
 800cfc2:	e7bf      	b.n	800cf44 <_strtod_l+0x144>
 800cfc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfc6:	191a      	adds	r2, r3, r4
 800cfc8:	921b      	str	r2, [sp, #108]	; 0x6c
 800cfca:	9a05      	ldr	r2, [sp, #20]
 800cfcc:	5d1b      	ldrb	r3, [r3, r4]
 800cfce:	2a00      	cmp	r2, #0
 800cfd0:	d037      	beq.n	800d042 <_strtod_l+0x242>
 800cfd2:	9c05      	ldr	r4, [sp, #20]
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cfda:	2909      	cmp	r1, #9
 800cfdc:	d913      	bls.n	800d006 <_strtod_l+0x206>
 800cfde:	2101      	movs	r1, #1
 800cfe0:	9104      	str	r1, [sp, #16]
 800cfe2:	e7c2      	b.n	800cf6a <_strtod_l+0x16a>
 800cfe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	921b      	str	r2, [sp, #108]	; 0x6c
 800cfea:	785b      	ldrb	r3, [r3, #1]
 800cfec:	3001      	adds	r0, #1
 800cfee:	2b30      	cmp	r3, #48	; 0x30
 800cff0:	d0f8      	beq.n	800cfe4 <_strtod_l+0x1e4>
 800cff2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cff6:	2a08      	cmp	r2, #8
 800cff8:	f200 84e4 	bhi.w	800d9c4 <_strtod_l+0xbc4>
 800cffc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cffe:	9208      	str	r2, [sp, #32]
 800d000:	4602      	mov	r2, r0
 800d002:	2000      	movs	r0, #0
 800d004:	4604      	mov	r4, r0
 800d006:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d00a:	f100 0101 	add.w	r1, r0, #1
 800d00e:	d012      	beq.n	800d036 <_strtod_l+0x236>
 800d010:	440a      	add	r2, r1
 800d012:	eb00 0c04 	add.w	ip, r0, r4
 800d016:	4621      	mov	r1, r4
 800d018:	270a      	movs	r7, #10
 800d01a:	458c      	cmp	ip, r1
 800d01c:	d113      	bne.n	800d046 <_strtod_l+0x246>
 800d01e:	1821      	adds	r1, r4, r0
 800d020:	2908      	cmp	r1, #8
 800d022:	f104 0401 	add.w	r4, r4, #1
 800d026:	4404      	add	r4, r0
 800d028:	dc19      	bgt.n	800d05e <_strtod_l+0x25e>
 800d02a:	9b07      	ldr	r3, [sp, #28]
 800d02c:	210a      	movs	r1, #10
 800d02e:	fb01 e303 	mla	r3, r1, r3, lr
 800d032:	9307      	str	r3, [sp, #28]
 800d034:	2100      	movs	r1, #0
 800d036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d038:	1c58      	adds	r0, r3, #1
 800d03a:	901b      	str	r0, [sp, #108]	; 0x6c
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	4608      	mov	r0, r1
 800d040:	e7c9      	b.n	800cfd6 <_strtod_l+0x1d6>
 800d042:	9805      	ldr	r0, [sp, #20]
 800d044:	e7d3      	b.n	800cfee <_strtod_l+0x1ee>
 800d046:	2908      	cmp	r1, #8
 800d048:	f101 0101 	add.w	r1, r1, #1
 800d04c:	dc03      	bgt.n	800d056 <_strtod_l+0x256>
 800d04e:	9b07      	ldr	r3, [sp, #28]
 800d050:	437b      	muls	r3, r7
 800d052:	9307      	str	r3, [sp, #28]
 800d054:	e7e1      	b.n	800d01a <_strtod_l+0x21a>
 800d056:	2910      	cmp	r1, #16
 800d058:	bfd8      	it	le
 800d05a:	437d      	mulle	r5, r7
 800d05c:	e7dd      	b.n	800d01a <_strtod_l+0x21a>
 800d05e:	2c10      	cmp	r4, #16
 800d060:	bfdc      	itt	le
 800d062:	210a      	movle	r1, #10
 800d064:	fb01 e505 	mlale	r5, r1, r5, lr
 800d068:	e7e4      	b.n	800d034 <_strtod_l+0x234>
 800d06a:	2301      	movs	r3, #1
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	e781      	b.n	800cf74 <_strtod_l+0x174>
 800d070:	f04f 0c01 	mov.w	ip, #1
 800d074:	1cb3      	adds	r3, r6, #2
 800d076:	931b      	str	r3, [sp, #108]	; 0x6c
 800d078:	78b3      	ldrb	r3, [r6, #2]
 800d07a:	e78a      	b.n	800cf92 <_strtod_l+0x192>
 800d07c:	f04f 0c00 	mov.w	ip, #0
 800d080:	e7f8      	b.n	800d074 <_strtod_l+0x274>
 800d082:	bf00      	nop
 800d084:	08010740 	.word	0x08010740
 800d088:	7ff00000 	.word	0x7ff00000
 800d08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d08e:	1c5f      	adds	r7, r3, #1
 800d090:	971b      	str	r7, [sp, #108]	; 0x6c
 800d092:	785b      	ldrb	r3, [r3, #1]
 800d094:	2b30      	cmp	r3, #48	; 0x30
 800d096:	d0f9      	beq.n	800d08c <_strtod_l+0x28c>
 800d098:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d09c:	2f08      	cmp	r7, #8
 800d09e:	f63f af7d 	bhi.w	800cf9c <_strtod_l+0x19c>
 800d0a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d0a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d0aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0ac:	1c5f      	adds	r7, r3, #1
 800d0ae:	971b      	str	r7, [sp, #108]	; 0x6c
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d0b6:	f1b8 0f09 	cmp.w	r8, #9
 800d0ba:	d937      	bls.n	800d12c <_strtod_l+0x32c>
 800d0bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d0be:	1a7f      	subs	r7, r7, r1
 800d0c0:	2f08      	cmp	r7, #8
 800d0c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d0c6:	dc37      	bgt.n	800d138 <_strtod_l+0x338>
 800d0c8:	45be      	cmp	lr, r7
 800d0ca:	bfa8      	it	ge
 800d0cc:	46be      	movge	lr, r7
 800d0ce:	f1bc 0f00 	cmp.w	ip, #0
 800d0d2:	d001      	beq.n	800d0d8 <_strtod_l+0x2d8>
 800d0d4:	f1ce 0e00 	rsb	lr, lr, #0
 800d0d8:	2c00      	cmp	r4, #0
 800d0da:	d151      	bne.n	800d180 <_strtod_l+0x380>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f47f aece 	bne.w	800ce7e <_strtod_l+0x7e>
 800d0e2:	9a06      	ldr	r2, [sp, #24]
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	f47f aeca 	bne.w	800ce7e <_strtod_l+0x7e>
 800d0ea:	9a04      	ldr	r2, [sp, #16]
 800d0ec:	2a00      	cmp	r2, #0
 800d0ee:	f47f aee4 	bne.w	800ceba <_strtod_l+0xba>
 800d0f2:	2b4e      	cmp	r3, #78	; 0x4e
 800d0f4:	d027      	beq.n	800d146 <_strtod_l+0x346>
 800d0f6:	dc21      	bgt.n	800d13c <_strtod_l+0x33c>
 800d0f8:	2b49      	cmp	r3, #73	; 0x49
 800d0fa:	f47f aede 	bne.w	800ceba <_strtod_l+0xba>
 800d0fe:	49a0      	ldr	r1, [pc, #640]	; (800d380 <_strtod_l+0x580>)
 800d100:	a81b      	add	r0, sp, #108	; 0x6c
 800d102:	f002 f811 	bl	800f128 <__match>
 800d106:	2800      	cmp	r0, #0
 800d108:	f43f aed7 	beq.w	800ceba <_strtod_l+0xba>
 800d10c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d10e:	499d      	ldr	r1, [pc, #628]	; (800d384 <_strtod_l+0x584>)
 800d110:	3b01      	subs	r3, #1
 800d112:	a81b      	add	r0, sp, #108	; 0x6c
 800d114:	931b      	str	r3, [sp, #108]	; 0x6c
 800d116:	f002 f807 	bl	800f128 <__match>
 800d11a:	b910      	cbnz	r0, 800d122 <_strtod_l+0x322>
 800d11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d11e:	3301      	adds	r3, #1
 800d120:	931b      	str	r3, [sp, #108]	; 0x6c
 800d122:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d398 <_strtod_l+0x598>
 800d126:	f04f 0a00 	mov.w	sl, #0
 800d12a:	e6a8      	b.n	800ce7e <_strtod_l+0x7e>
 800d12c:	210a      	movs	r1, #10
 800d12e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d132:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d136:	e7b8      	b.n	800d0aa <_strtod_l+0x2aa>
 800d138:	46be      	mov	lr, r7
 800d13a:	e7c8      	b.n	800d0ce <_strtod_l+0x2ce>
 800d13c:	2b69      	cmp	r3, #105	; 0x69
 800d13e:	d0de      	beq.n	800d0fe <_strtod_l+0x2fe>
 800d140:	2b6e      	cmp	r3, #110	; 0x6e
 800d142:	f47f aeba 	bne.w	800ceba <_strtod_l+0xba>
 800d146:	4990      	ldr	r1, [pc, #576]	; (800d388 <_strtod_l+0x588>)
 800d148:	a81b      	add	r0, sp, #108	; 0x6c
 800d14a:	f001 ffed 	bl	800f128 <__match>
 800d14e:	2800      	cmp	r0, #0
 800d150:	f43f aeb3 	beq.w	800ceba <_strtod_l+0xba>
 800d154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b28      	cmp	r3, #40	; 0x28
 800d15a:	d10e      	bne.n	800d17a <_strtod_l+0x37a>
 800d15c:	aa1e      	add	r2, sp, #120	; 0x78
 800d15e:	498b      	ldr	r1, [pc, #556]	; (800d38c <_strtod_l+0x58c>)
 800d160:	a81b      	add	r0, sp, #108	; 0x6c
 800d162:	f001 fff5 	bl	800f150 <__hexnan>
 800d166:	2805      	cmp	r0, #5
 800d168:	d107      	bne.n	800d17a <_strtod_l+0x37a>
 800d16a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d16c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d170:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d174:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d178:	e681      	b.n	800ce7e <_strtod_l+0x7e>
 800d17a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d3a0 <_strtod_l+0x5a0>
 800d17e:	e7d2      	b.n	800d126 <_strtod_l+0x326>
 800d180:	ebae 0302 	sub.w	r3, lr, r2
 800d184:	9306      	str	r3, [sp, #24]
 800d186:	9b05      	ldr	r3, [sp, #20]
 800d188:	9807      	ldr	r0, [sp, #28]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	bf08      	it	eq
 800d18e:	4623      	moveq	r3, r4
 800d190:	2c10      	cmp	r4, #16
 800d192:	9305      	str	r3, [sp, #20]
 800d194:	46a0      	mov	r8, r4
 800d196:	bfa8      	it	ge
 800d198:	f04f 0810 	movge.w	r8, #16
 800d19c:	f7f3 f9b2 	bl	8000504 <__aeabi_ui2d>
 800d1a0:	2c09      	cmp	r4, #9
 800d1a2:	4682      	mov	sl, r0
 800d1a4:	468b      	mov	fp, r1
 800d1a6:	dc13      	bgt.n	800d1d0 <_strtod_l+0x3d0>
 800d1a8:	9b06      	ldr	r3, [sp, #24]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f43f ae67 	beq.w	800ce7e <_strtod_l+0x7e>
 800d1b0:	9b06      	ldr	r3, [sp, #24]
 800d1b2:	dd7a      	ble.n	800d2aa <_strtod_l+0x4aa>
 800d1b4:	2b16      	cmp	r3, #22
 800d1b6:	dc61      	bgt.n	800d27c <_strtod_l+0x47c>
 800d1b8:	4a75      	ldr	r2, [pc, #468]	; (800d390 <_strtod_l+0x590>)
 800d1ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d1be:	e9de 0100 	ldrd	r0, r1, [lr]
 800d1c2:	4652      	mov	r2, sl
 800d1c4:	465b      	mov	r3, fp
 800d1c6:	f7f3 fa17 	bl	80005f8 <__aeabi_dmul>
 800d1ca:	4682      	mov	sl, r0
 800d1cc:	468b      	mov	fp, r1
 800d1ce:	e656      	b.n	800ce7e <_strtod_l+0x7e>
 800d1d0:	4b6f      	ldr	r3, [pc, #444]	; (800d390 <_strtod_l+0x590>)
 800d1d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d1d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d1da:	f7f3 fa0d 	bl	80005f8 <__aeabi_dmul>
 800d1de:	4606      	mov	r6, r0
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	460f      	mov	r7, r1
 800d1e4:	f7f3 f98e 	bl	8000504 <__aeabi_ui2d>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	f7f3 f84c 	bl	800028c <__adddf3>
 800d1f4:	2c0f      	cmp	r4, #15
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	468b      	mov	fp, r1
 800d1fa:	ddd5      	ble.n	800d1a8 <_strtod_l+0x3a8>
 800d1fc:	9b06      	ldr	r3, [sp, #24]
 800d1fe:	eba4 0808 	sub.w	r8, r4, r8
 800d202:	4498      	add	r8, r3
 800d204:	f1b8 0f00 	cmp.w	r8, #0
 800d208:	f340 8096 	ble.w	800d338 <_strtod_l+0x538>
 800d20c:	f018 030f 	ands.w	r3, r8, #15
 800d210:	d00a      	beq.n	800d228 <_strtod_l+0x428>
 800d212:	495f      	ldr	r1, [pc, #380]	; (800d390 <_strtod_l+0x590>)
 800d214:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d218:	4652      	mov	r2, sl
 800d21a:	465b      	mov	r3, fp
 800d21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d220:	f7f3 f9ea 	bl	80005f8 <__aeabi_dmul>
 800d224:	4682      	mov	sl, r0
 800d226:	468b      	mov	fp, r1
 800d228:	f038 080f 	bics.w	r8, r8, #15
 800d22c:	d073      	beq.n	800d316 <_strtod_l+0x516>
 800d22e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d232:	dd47      	ble.n	800d2c4 <_strtod_l+0x4c4>
 800d234:	2400      	movs	r4, #0
 800d236:	46a0      	mov	r8, r4
 800d238:	9407      	str	r4, [sp, #28]
 800d23a:	9405      	str	r4, [sp, #20]
 800d23c:	2322      	movs	r3, #34	; 0x22
 800d23e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d398 <_strtod_l+0x598>
 800d242:	f8c9 3000 	str.w	r3, [r9]
 800d246:	f04f 0a00 	mov.w	sl, #0
 800d24a:	9b07      	ldr	r3, [sp, #28]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f43f ae16 	beq.w	800ce7e <_strtod_l+0x7e>
 800d252:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d254:	4648      	mov	r0, r9
 800d256:	f002 f8d1 	bl	800f3fc <_Bfree>
 800d25a:	9905      	ldr	r1, [sp, #20]
 800d25c:	4648      	mov	r0, r9
 800d25e:	f002 f8cd 	bl	800f3fc <_Bfree>
 800d262:	4641      	mov	r1, r8
 800d264:	4648      	mov	r0, r9
 800d266:	f002 f8c9 	bl	800f3fc <_Bfree>
 800d26a:	9907      	ldr	r1, [sp, #28]
 800d26c:	4648      	mov	r0, r9
 800d26e:	f002 f8c5 	bl	800f3fc <_Bfree>
 800d272:	4621      	mov	r1, r4
 800d274:	4648      	mov	r0, r9
 800d276:	f002 f8c1 	bl	800f3fc <_Bfree>
 800d27a:	e600      	b.n	800ce7e <_strtod_l+0x7e>
 800d27c:	9a06      	ldr	r2, [sp, #24]
 800d27e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d282:	4293      	cmp	r3, r2
 800d284:	dbba      	blt.n	800d1fc <_strtod_l+0x3fc>
 800d286:	4d42      	ldr	r5, [pc, #264]	; (800d390 <_strtod_l+0x590>)
 800d288:	f1c4 040f 	rsb	r4, r4, #15
 800d28c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d290:	4652      	mov	r2, sl
 800d292:	465b      	mov	r3, fp
 800d294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d298:	f7f3 f9ae 	bl	80005f8 <__aeabi_dmul>
 800d29c:	9b06      	ldr	r3, [sp, #24]
 800d29e:	1b1c      	subs	r4, r3, r4
 800d2a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d2a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2a8:	e78d      	b.n	800d1c6 <_strtod_l+0x3c6>
 800d2aa:	f113 0f16 	cmn.w	r3, #22
 800d2ae:	dba5      	blt.n	800d1fc <_strtod_l+0x3fc>
 800d2b0:	4a37      	ldr	r2, [pc, #220]	; (800d390 <_strtod_l+0x590>)
 800d2b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d2b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d2ba:	4650      	mov	r0, sl
 800d2bc:	4659      	mov	r1, fp
 800d2be:	f7f3 fac5 	bl	800084c <__aeabi_ddiv>
 800d2c2:	e782      	b.n	800d1ca <_strtod_l+0x3ca>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4e33      	ldr	r6, [pc, #204]	; (800d394 <_strtod_l+0x594>)
 800d2c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d2cc:	4650      	mov	r0, sl
 800d2ce:	4659      	mov	r1, fp
 800d2d0:	461d      	mov	r5, r3
 800d2d2:	f1b8 0f01 	cmp.w	r8, #1
 800d2d6:	dc21      	bgt.n	800d31c <_strtod_l+0x51c>
 800d2d8:	b10b      	cbz	r3, 800d2de <_strtod_l+0x4de>
 800d2da:	4682      	mov	sl, r0
 800d2dc:	468b      	mov	fp, r1
 800d2de:	4b2d      	ldr	r3, [pc, #180]	; (800d394 <_strtod_l+0x594>)
 800d2e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d2e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d2e8:	4652      	mov	r2, sl
 800d2ea:	465b      	mov	r3, fp
 800d2ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2f0:	f7f3 f982 	bl	80005f8 <__aeabi_dmul>
 800d2f4:	4b28      	ldr	r3, [pc, #160]	; (800d398 <_strtod_l+0x598>)
 800d2f6:	460a      	mov	r2, r1
 800d2f8:	400b      	ands	r3, r1
 800d2fa:	4928      	ldr	r1, [pc, #160]	; (800d39c <_strtod_l+0x59c>)
 800d2fc:	428b      	cmp	r3, r1
 800d2fe:	4682      	mov	sl, r0
 800d300:	d898      	bhi.n	800d234 <_strtod_l+0x434>
 800d302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d306:	428b      	cmp	r3, r1
 800d308:	bf86      	itte	hi
 800d30a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d3a4 <_strtod_l+0x5a4>
 800d30e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d312:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d316:	2300      	movs	r3, #0
 800d318:	9304      	str	r3, [sp, #16]
 800d31a:	e077      	b.n	800d40c <_strtod_l+0x60c>
 800d31c:	f018 0f01 	tst.w	r8, #1
 800d320:	d006      	beq.n	800d330 <_strtod_l+0x530>
 800d322:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32a:	f7f3 f965 	bl	80005f8 <__aeabi_dmul>
 800d32e:	2301      	movs	r3, #1
 800d330:	3501      	adds	r5, #1
 800d332:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d336:	e7cc      	b.n	800d2d2 <_strtod_l+0x4d2>
 800d338:	d0ed      	beq.n	800d316 <_strtod_l+0x516>
 800d33a:	f1c8 0800 	rsb	r8, r8, #0
 800d33e:	f018 020f 	ands.w	r2, r8, #15
 800d342:	d00a      	beq.n	800d35a <_strtod_l+0x55a>
 800d344:	4b12      	ldr	r3, [pc, #72]	; (800d390 <_strtod_l+0x590>)
 800d346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d34a:	4650      	mov	r0, sl
 800d34c:	4659      	mov	r1, fp
 800d34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d352:	f7f3 fa7b 	bl	800084c <__aeabi_ddiv>
 800d356:	4682      	mov	sl, r0
 800d358:	468b      	mov	fp, r1
 800d35a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d35e:	d0da      	beq.n	800d316 <_strtod_l+0x516>
 800d360:	f1b8 0f1f 	cmp.w	r8, #31
 800d364:	dd20      	ble.n	800d3a8 <_strtod_l+0x5a8>
 800d366:	2400      	movs	r4, #0
 800d368:	46a0      	mov	r8, r4
 800d36a:	9407      	str	r4, [sp, #28]
 800d36c:	9405      	str	r4, [sp, #20]
 800d36e:	2322      	movs	r3, #34	; 0x22
 800d370:	f04f 0a00 	mov.w	sl, #0
 800d374:	f04f 0b00 	mov.w	fp, #0
 800d378:	f8c9 3000 	str.w	r3, [r9]
 800d37c:	e765      	b.n	800d24a <_strtod_l+0x44a>
 800d37e:	bf00      	nop
 800d380:	08010709 	.word	0x08010709
 800d384:	08010793 	.word	0x08010793
 800d388:	08010711 	.word	0x08010711
 800d38c:	08010754 	.word	0x08010754
 800d390:	08010838 	.word	0x08010838
 800d394:	08010810 	.word	0x08010810
 800d398:	7ff00000 	.word	0x7ff00000
 800d39c:	7ca00000 	.word	0x7ca00000
 800d3a0:	fff80000 	.word	0xfff80000
 800d3a4:	7fefffff 	.word	0x7fefffff
 800d3a8:	f018 0310 	ands.w	r3, r8, #16
 800d3ac:	bf18      	it	ne
 800d3ae:	236a      	movne	r3, #106	; 0x6a
 800d3b0:	4da0      	ldr	r5, [pc, #640]	; (800d634 <_strtod_l+0x834>)
 800d3b2:	9304      	str	r3, [sp, #16]
 800d3b4:	4650      	mov	r0, sl
 800d3b6:	4659      	mov	r1, fp
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f1b8 0f00 	cmp.w	r8, #0
 800d3be:	f300 810a 	bgt.w	800d5d6 <_strtod_l+0x7d6>
 800d3c2:	b10b      	cbz	r3, 800d3c8 <_strtod_l+0x5c8>
 800d3c4:	4682      	mov	sl, r0
 800d3c6:	468b      	mov	fp, r1
 800d3c8:	9b04      	ldr	r3, [sp, #16]
 800d3ca:	b1bb      	cbz	r3, 800d3fc <_strtod_l+0x5fc>
 800d3cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d3d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	4659      	mov	r1, fp
 800d3d8:	dd10      	ble.n	800d3fc <_strtod_l+0x5fc>
 800d3da:	2b1f      	cmp	r3, #31
 800d3dc:	f340 8107 	ble.w	800d5ee <_strtod_l+0x7ee>
 800d3e0:	2b34      	cmp	r3, #52	; 0x34
 800d3e2:	bfde      	ittt	le
 800d3e4:	3b20      	suble	r3, #32
 800d3e6:	f04f 32ff 	movle.w	r2, #4294967295
 800d3ea:	fa02 f303 	lslle.w	r3, r2, r3
 800d3ee:	f04f 0a00 	mov.w	sl, #0
 800d3f2:	bfcc      	ite	gt
 800d3f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d3f8:	ea03 0b01 	andle.w	fp, r3, r1
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	2300      	movs	r3, #0
 800d400:	4650      	mov	r0, sl
 800d402:	4659      	mov	r1, fp
 800d404:	f7f3 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d1ac      	bne.n	800d366 <_strtod_l+0x566>
 800d40c:	9b07      	ldr	r3, [sp, #28]
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	9a05      	ldr	r2, [sp, #20]
 800d412:	9908      	ldr	r1, [sp, #32]
 800d414:	4623      	mov	r3, r4
 800d416:	4648      	mov	r0, r9
 800d418:	f002 f842 	bl	800f4a0 <__s2b>
 800d41c:	9007      	str	r0, [sp, #28]
 800d41e:	2800      	cmp	r0, #0
 800d420:	f43f af08 	beq.w	800d234 <_strtod_l+0x434>
 800d424:	9a06      	ldr	r2, [sp, #24]
 800d426:	9b06      	ldr	r3, [sp, #24]
 800d428:	2a00      	cmp	r2, #0
 800d42a:	f1c3 0300 	rsb	r3, r3, #0
 800d42e:	bfa8      	it	ge
 800d430:	2300      	movge	r3, #0
 800d432:	930e      	str	r3, [sp, #56]	; 0x38
 800d434:	2400      	movs	r4, #0
 800d436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d43a:	9316      	str	r3, [sp, #88]	; 0x58
 800d43c:	46a0      	mov	r8, r4
 800d43e:	9b07      	ldr	r3, [sp, #28]
 800d440:	4648      	mov	r0, r9
 800d442:	6859      	ldr	r1, [r3, #4]
 800d444:	f001 ffa6 	bl	800f394 <_Balloc>
 800d448:	9005      	str	r0, [sp, #20]
 800d44a:	2800      	cmp	r0, #0
 800d44c:	f43f aef6 	beq.w	800d23c <_strtod_l+0x43c>
 800d450:	9b07      	ldr	r3, [sp, #28]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	3202      	adds	r2, #2
 800d456:	f103 010c 	add.w	r1, r3, #12
 800d45a:	0092      	lsls	r2, r2, #2
 800d45c:	300c      	adds	r0, #12
 800d45e:	f7fe fdbf 	bl	800bfe0 <memcpy>
 800d462:	aa1e      	add	r2, sp, #120	; 0x78
 800d464:	a91d      	add	r1, sp, #116	; 0x74
 800d466:	ec4b ab10 	vmov	d0, sl, fp
 800d46a:	4648      	mov	r0, r9
 800d46c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d470:	f002 fad2 	bl	800fa18 <__d2b>
 800d474:	901c      	str	r0, [sp, #112]	; 0x70
 800d476:	2800      	cmp	r0, #0
 800d478:	f43f aee0 	beq.w	800d23c <_strtod_l+0x43c>
 800d47c:	2101      	movs	r1, #1
 800d47e:	4648      	mov	r0, r9
 800d480:	f002 f89a 	bl	800f5b8 <__i2b>
 800d484:	4680      	mov	r8, r0
 800d486:	2800      	cmp	r0, #0
 800d488:	f43f aed8 	beq.w	800d23c <_strtod_l+0x43c>
 800d48c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d48e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d490:	2e00      	cmp	r6, #0
 800d492:	bfab      	itete	ge
 800d494:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d496:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d498:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d49a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d49c:	bfac      	ite	ge
 800d49e:	18f7      	addge	r7, r6, r3
 800d4a0:	1b9d      	sublt	r5, r3, r6
 800d4a2:	9b04      	ldr	r3, [sp, #16]
 800d4a4:	1af6      	subs	r6, r6, r3
 800d4a6:	4416      	add	r6, r2
 800d4a8:	4b63      	ldr	r3, [pc, #396]	; (800d638 <_strtod_l+0x838>)
 800d4aa:	3e01      	subs	r6, #1
 800d4ac:	429e      	cmp	r6, r3
 800d4ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d4b2:	f280 80af 	bge.w	800d614 <_strtod_l+0x814>
 800d4b6:	1b9b      	subs	r3, r3, r6
 800d4b8:	2b1f      	cmp	r3, #31
 800d4ba:	eba2 0203 	sub.w	r2, r2, r3
 800d4be:	f04f 0101 	mov.w	r1, #1
 800d4c2:	f300 809b 	bgt.w	800d5fc <_strtod_l+0x7fc>
 800d4c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d4d0:	18be      	adds	r6, r7, r2
 800d4d2:	9b04      	ldr	r3, [sp, #16]
 800d4d4:	42b7      	cmp	r7, r6
 800d4d6:	4415      	add	r5, r2
 800d4d8:	441d      	add	r5, r3
 800d4da:	463b      	mov	r3, r7
 800d4dc:	bfa8      	it	ge
 800d4de:	4633      	movge	r3, r6
 800d4e0:	42ab      	cmp	r3, r5
 800d4e2:	bfa8      	it	ge
 800d4e4:	462b      	movge	r3, r5
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	bfc2      	ittt	gt
 800d4ea:	1af6      	subgt	r6, r6, r3
 800d4ec:	1aed      	subgt	r5, r5, r3
 800d4ee:	1aff      	subgt	r7, r7, r3
 800d4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4f2:	b1bb      	cbz	r3, 800d524 <_strtod_l+0x724>
 800d4f4:	4641      	mov	r1, r8
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	4648      	mov	r0, r9
 800d4fa:	f002 f8fd 	bl	800f6f8 <__pow5mult>
 800d4fe:	4680      	mov	r8, r0
 800d500:	2800      	cmp	r0, #0
 800d502:	f43f ae9b 	beq.w	800d23c <_strtod_l+0x43c>
 800d506:	4601      	mov	r1, r0
 800d508:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d50a:	4648      	mov	r0, r9
 800d50c:	f002 f85d 	bl	800f5ca <__multiply>
 800d510:	900c      	str	r0, [sp, #48]	; 0x30
 800d512:	2800      	cmp	r0, #0
 800d514:	f43f ae92 	beq.w	800d23c <_strtod_l+0x43c>
 800d518:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d51a:	4648      	mov	r0, r9
 800d51c:	f001 ff6e 	bl	800f3fc <_Bfree>
 800d520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d522:	931c      	str	r3, [sp, #112]	; 0x70
 800d524:	2e00      	cmp	r6, #0
 800d526:	dc7a      	bgt.n	800d61e <_strtod_l+0x81e>
 800d528:	9b06      	ldr	r3, [sp, #24]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd08      	ble.n	800d540 <_strtod_l+0x740>
 800d52e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d530:	9905      	ldr	r1, [sp, #20]
 800d532:	4648      	mov	r0, r9
 800d534:	f002 f8e0 	bl	800f6f8 <__pow5mult>
 800d538:	9005      	str	r0, [sp, #20]
 800d53a:	2800      	cmp	r0, #0
 800d53c:	f43f ae7e 	beq.w	800d23c <_strtod_l+0x43c>
 800d540:	2d00      	cmp	r5, #0
 800d542:	dd08      	ble.n	800d556 <_strtod_l+0x756>
 800d544:	462a      	mov	r2, r5
 800d546:	9905      	ldr	r1, [sp, #20]
 800d548:	4648      	mov	r0, r9
 800d54a:	f002 f923 	bl	800f794 <__lshift>
 800d54e:	9005      	str	r0, [sp, #20]
 800d550:	2800      	cmp	r0, #0
 800d552:	f43f ae73 	beq.w	800d23c <_strtod_l+0x43c>
 800d556:	2f00      	cmp	r7, #0
 800d558:	dd08      	ble.n	800d56c <_strtod_l+0x76c>
 800d55a:	4641      	mov	r1, r8
 800d55c:	463a      	mov	r2, r7
 800d55e:	4648      	mov	r0, r9
 800d560:	f002 f918 	bl	800f794 <__lshift>
 800d564:	4680      	mov	r8, r0
 800d566:	2800      	cmp	r0, #0
 800d568:	f43f ae68 	beq.w	800d23c <_strtod_l+0x43c>
 800d56c:	9a05      	ldr	r2, [sp, #20]
 800d56e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d570:	4648      	mov	r0, r9
 800d572:	f002 f97d 	bl	800f870 <__mdiff>
 800d576:	4604      	mov	r4, r0
 800d578:	2800      	cmp	r0, #0
 800d57a:	f43f ae5f 	beq.w	800d23c <_strtod_l+0x43c>
 800d57e:	68c3      	ldr	r3, [r0, #12]
 800d580:	930c      	str	r3, [sp, #48]	; 0x30
 800d582:	2300      	movs	r3, #0
 800d584:	60c3      	str	r3, [r0, #12]
 800d586:	4641      	mov	r1, r8
 800d588:	f002 f958 	bl	800f83c <__mcmp>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	da55      	bge.n	800d63c <_strtod_l+0x83c>
 800d590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d592:	b9e3      	cbnz	r3, 800d5ce <_strtod_l+0x7ce>
 800d594:	f1ba 0f00 	cmp.w	sl, #0
 800d598:	d119      	bne.n	800d5ce <_strtod_l+0x7ce>
 800d59a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d59e:	b9b3      	cbnz	r3, 800d5ce <_strtod_l+0x7ce>
 800d5a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5a4:	0d1b      	lsrs	r3, r3, #20
 800d5a6:	051b      	lsls	r3, r3, #20
 800d5a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d5ac:	d90f      	bls.n	800d5ce <_strtod_l+0x7ce>
 800d5ae:	6963      	ldr	r3, [r4, #20]
 800d5b0:	b913      	cbnz	r3, 800d5b8 <_strtod_l+0x7b8>
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	dd0a      	ble.n	800d5ce <_strtod_l+0x7ce>
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	4648      	mov	r0, r9
 800d5be:	f002 f8e9 	bl	800f794 <__lshift>
 800d5c2:	4641      	mov	r1, r8
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	f002 f939 	bl	800f83c <__mcmp>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	dc67      	bgt.n	800d69e <_strtod_l+0x89e>
 800d5ce:	9b04      	ldr	r3, [sp, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d171      	bne.n	800d6b8 <_strtod_l+0x8b8>
 800d5d4:	e63d      	b.n	800d252 <_strtod_l+0x452>
 800d5d6:	f018 0f01 	tst.w	r8, #1
 800d5da:	d004      	beq.n	800d5e6 <_strtod_l+0x7e6>
 800d5dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5e0:	f7f3 f80a 	bl	80005f8 <__aeabi_dmul>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d5ea:	3508      	adds	r5, #8
 800d5ec:	e6e5      	b.n	800d3ba <_strtod_l+0x5ba>
 800d5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f6:	ea03 0a0a 	and.w	sl, r3, sl
 800d5fa:	e6ff      	b.n	800d3fc <_strtod_l+0x5fc>
 800d5fc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d600:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d604:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d608:	36e2      	adds	r6, #226	; 0xe2
 800d60a:	fa01 f306 	lsl.w	r3, r1, r6
 800d60e:	930a      	str	r3, [sp, #40]	; 0x28
 800d610:	910f      	str	r1, [sp, #60]	; 0x3c
 800d612:	e75d      	b.n	800d4d0 <_strtod_l+0x6d0>
 800d614:	2300      	movs	r3, #0
 800d616:	930a      	str	r3, [sp, #40]	; 0x28
 800d618:	2301      	movs	r3, #1
 800d61a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d61c:	e758      	b.n	800d4d0 <_strtod_l+0x6d0>
 800d61e:	4632      	mov	r2, r6
 800d620:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d622:	4648      	mov	r0, r9
 800d624:	f002 f8b6 	bl	800f794 <__lshift>
 800d628:	901c      	str	r0, [sp, #112]	; 0x70
 800d62a:	2800      	cmp	r0, #0
 800d62c:	f47f af7c 	bne.w	800d528 <_strtod_l+0x728>
 800d630:	e604      	b.n	800d23c <_strtod_l+0x43c>
 800d632:	bf00      	nop
 800d634:	08010768 	.word	0x08010768
 800d638:	fffffc02 	.word	0xfffffc02
 800d63c:	465d      	mov	r5, fp
 800d63e:	f040 8086 	bne.w	800d74e <_strtod_l+0x94e>
 800d642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d644:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d648:	b32a      	cbz	r2, 800d696 <_strtod_l+0x896>
 800d64a:	4aaf      	ldr	r2, [pc, #700]	; (800d908 <_strtod_l+0xb08>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d153      	bne.n	800d6f8 <_strtod_l+0x8f8>
 800d650:	9b04      	ldr	r3, [sp, #16]
 800d652:	4650      	mov	r0, sl
 800d654:	b1d3      	cbz	r3, 800d68c <_strtod_l+0x88c>
 800d656:	4aad      	ldr	r2, [pc, #692]	; (800d90c <_strtod_l+0xb0c>)
 800d658:	402a      	ands	r2, r5
 800d65a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d65e:	f04f 31ff 	mov.w	r1, #4294967295
 800d662:	d816      	bhi.n	800d692 <_strtod_l+0x892>
 800d664:	0d12      	lsrs	r2, r2, #20
 800d666:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d66a:	fa01 f303 	lsl.w	r3, r1, r3
 800d66e:	4298      	cmp	r0, r3
 800d670:	d142      	bne.n	800d6f8 <_strtod_l+0x8f8>
 800d672:	4ba7      	ldr	r3, [pc, #668]	; (800d910 <_strtod_l+0xb10>)
 800d674:	429d      	cmp	r5, r3
 800d676:	d102      	bne.n	800d67e <_strtod_l+0x87e>
 800d678:	3001      	adds	r0, #1
 800d67a:	f43f addf 	beq.w	800d23c <_strtod_l+0x43c>
 800d67e:	4ba3      	ldr	r3, [pc, #652]	; (800d90c <_strtod_l+0xb0c>)
 800d680:	402b      	ands	r3, r5
 800d682:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d686:	f04f 0a00 	mov.w	sl, #0
 800d68a:	e7a0      	b.n	800d5ce <_strtod_l+0x7ce>
 800d68c:	f04f 33ff 	mov.w	r3, #4294967295
 800d690:	e7ed      	b.n	800d66e <_strtod_l+0x86e>
 800d692:	460b      	mov	r3, r1
 800d694:	e7eb      	b.n	800d66e <_strtod_l+0x86e>
 800d696:	bb7b      	cbnz	r3, 800d6f8 <_strtod_l+0x8f8>
 800d698:	f1ba 0f00 	cmp.w	sl, #0
 800d69c:	d12c      	bne.n	800d6f8 <_strtod_l+0x8f8>
 800d69e:	9904      	ldr	r1, [sp, #16]
 800d6a0:	4a9a      	ldr	r2, [pc, #616]	; (800d90c <_strtod_l+0xb0c>)
 800d6a2:	465b      	mov	r3, fp
 800d6a4:	b1f1      	cbz	r1, 800d6e4 <_strtod_l+0x8e4>
 800d6a6:	ea02 010b 	and.w	r1, r2, fp
 800d6aa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d6ae:	dc19      	bgt.n	800d6e4 <_strtod_l+0x8e4>
 800d6b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d6b4:	f77f ae5b 	ble.w	800d36e <_strtod_l+0x56e>
 800d6b8:	4a96      	ldr	r2, [pc, #600]	; (800d914 <_strtod_l+0xb14>)
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d6c8:	f7f2 ff96 	bl	80005f8 <__aeabi_dmul>
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	468b      	mov	fp, r1
 800d6d0:	2900      	cmp	r1, #0
 800d6d2:	f47f adbe 	bne.w	800d252 <_strtod_l+0x452>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f47f adbb 	bne.w	800d252 <_strtod_l+0x452>
 800d6dc:	2322      	movs	r3, #34	; 0x22
 800d6de:	f8c9 3000 	str.w	r3, [r9]
 800d6e2:	e5b6      	b.n	800d252 <_strtod_l+0x452>
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d6ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d6ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d6f2:	f04f 3aff 	mov.w	sl, #4294967295
 800d6f6:	e76a      	b.n	800d5ce <_strtod_l+0x7ce>
 800d6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6fa:	b193      	cbz	r3, 800d722 <_strtod_l+0x922>
 800d6fc:	422b      	tst	r3, r5
 800d6fe:	f43f af66 	beq.w	800d5ce <_strtod_l+0x7ce>
 800d702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d704:	9a04      	ldr	r2, [sp, #16]
 800d706:	4650      	mov	r0, sl
 800d708:	4659      	mov	r1, fp
 800d70a:	b173      	cbz	r3, 800d72a <_strtod_l+0x92a>
 800d70c:	f7ff fb5c 	bl	800cdc8 <sulp>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d718:	f7f2 fdb8 	bl	800028c <__adddf3>
 800d71c:	4682      	mov	sl, r0
 800d71e:	468b      	mov	fp, r1
 800d720:	e755      	b.n	800d5ce <_strtod_l+0x7ce>
 800d722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d724:	ea13 0f0a 	tst.w	r3, sl
 800d728:	e7e9      	b.n	800d6fe <_strtod_l+0x8fe>
 800d72a:	f7ff fb4d 	bl	800cdc8 <sulp>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d736:	f7f2 fda7 	bl	8000288 <__aeabi_dsub>
 800d73a:	2200      	movs	r2, #0
 800d73c:	2300      	movs	r3, #0
 800d73e:	4682      	mov	sl, r0
 800d740:	468b      	mov	fp, r1
 800d742:	f7f3 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d746:	2800      	cmp	r0, #0
 800d748:	f47f ae11 	bne.w	800d36e <_strtod_l+0x56e>
 800d74c:	e73f      	b.n	800d5ce <_strtod_l+0x7ce>
 800d74e:	4641      	mov	r1, r8
 800d750:	4620      	mov	r0, r4
 800d752:	f002 f9b0 	bl	800fab6 <__ratio>
 800d756:	ec57 6b10 	vmov	r6, r7, d0
 800d75a:	2200      	movs	r2, #0
 800d75c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d760:	ee10 0a10 	vmov	r0, s0
 800d764:	4639      	mov	r1, r7
 800d766:	f7f3 f9c3 	bl	8000af0 <__aeabi_dcmple>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d077      	beq.n	800d85e <_strtod_l+0xa5e>
 800d76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d770:	2b00      	cmp	r3, #0
 800d772:	d04a      	beq.n	800d80a <_strtod_l+0xa0a>
 800d774:	4b68      	ldr	r3, [pc, #416]	; (800d918 <_strtod_l+0xb18>)
 800d776:	2200      	movs	r2, #0
 800d778:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d77c:	4f66      	ldr	r7, [pc, #408]	; (800d918 <_strtod_l+0xb18>)
 800d77e:	2600      	movs	r6, #0
 800d780:	4b62      	ldr	r3, [pc, #392]	; (800d90c <_strtod_l+0xb0c>)
 800d782:	402b      	ands	r3, r5
 800d784:	930f      	str	r3, [sp, #60]	; 0x3c
 800d786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d788:	4b64      	ldr	r3, [pc, #400]	; (800d91c <_strtod_l+0xb1c>)
 800d78a:	429a      	cmp	r2, r3
 800d78c:	f040 80ce 	bne.w	800d92c <_strtod_l+0xb2c>
 800d790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d798:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d79c:	ec4b ab10 	vmov	d0, sl, fp
 800d7a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d7a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d7a8:	f002 f8c0 	bl	800f92c <__ulp>
 800d7ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7b0:	ec53 2b10 	vmov	r2, r3, d0
 800d7b4:	f7f2 ff20 	bl	80005f8 <__aeabi_dmul>
 800d7b8:	4652      	mov	r2, sl
 800d7ba:	465b      	mov	r3, fp
 800d7bc:	f7f2 fd66 	bl	800028c <__adddf3>
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4952      	ldr	r1, [pc, #328]	; (800d90c <_strtod_l+0xb0c>)
 800d7c4:	4a56      	ldr	r2, [pc, #344]	; (800d920 <_strtod_l+0xb20>)
 800d7c6:	4019      	ands	r1, r3
 800d7c8:	4291      	cmp	r1, r2
 800d7ca:	4682      	mov	sl, r0
 800d7cc:	d95b      	bls.n	800d886 <_strtod_l+0xa86>
 800d7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d103      	bne.n	800d7e0 <_strtod_l+0x9e0>
 800d7d8:	9b08      	ldr	r3, [sp, #32]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	f43f ad2e 	beq.w	800d23c <_strtod_l+0x43c>
 800d7e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d910 <_strtod_l+0xb10>
 800d7e4:	f04f 3aff 	mov.w	sl, #4294967295
 800d7e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7ea:	4648      	mov	r0, r9
 800d7ec:	f001 fe06 	bl	800f3fc <_Bfree>
 800d7f0:	9905      	ldr	r1, [sp, #20]
 800d7f2:	4648      	mov	r0, r9
 800d7f4:	f001 fe02 	bl	800f3fc <_Bfree>
 800d7f8:	4641      	mov	r1, r8
 800d7fa:	4648      	mov	r0, r9
 800d7fc:	f001 fdfe 	bl	800f3fc <_Bfree>
 800d800:	4621      	mov	r1, r4
 800d802:	4648      	mov	r0, r9
 800d804:	f001 fdfa 	bl	800f3fc <_Bfree>
 800d808:	e619      	b.n	800d43e <_strtod_l+0x63e>
 800d80a:	f1ba 0f00 	cmp.w	sl, #0
 800d80e:	d11a      	bne.n	800d846 <_strtod_l+0xa46>
 800d810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d814:	b9eb      	cbnz	r3, 800d852 <_strtod_l+0xa52>
 800d816:	2200      	movs	r2, #0
 800d818:	4b3f      	ldr	r3, [pc, #252]	; (800d918 <_strtod_l+0xb18>)
 800d81a:	4630      	mov	r0, r6
 800d81c:	4639      	mov	r1, r7
 800d81e:	f7f3 f95d 	bl	8000adc <__aeabi_dcmplt>
 800d822:	b9c8      	cbnz	r0, 800d858 <_strtod_l+0xa58>
 800d824:	4630      	mov	r0, r6
 800d826:	4639      	mov	r1, r7
 800d828:	2200      	movs	r2, #0
 800d82a:	4b3e      	ldr	r3, [pc, #248]	; (800d924 <_strtod_l+0xb24>)
 800d82c:	f7f2 fee4 	bl	80005f8 <__aeabi_dmul>
 800d830:	4606      	mov	r6, r0
 800d832:	460f      	mov	r7, r1
 800d834:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d838:	9618      	str	r6, [sp, #96]	; 0x60
 800d83a:	9319      	str	r3, [sp, #100]	; 0x64
 800d83c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d840:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d844:	e79c      	b.n	800d780 <_strtod_l+0x980>
 800d846:	f1ba 0f01 	cmp.w	sl, #1
 800d84a:	d102      	bne.n	800d852 <_strtod_l+0xa52>
 800d84c:	2d00      	cmp	r5, #0
 800d84e:	f43f ad8e 	beq.w	800d36e <_strtod_l+0x56e>
 800d852:	2200      	movs	r2, #0
 800d854:	4b34      	ldr	r3, [pc, #208]	; (800d928 <_strtod_l+0xb28>)
 800d856:	e78f      	b.n	800d778 <_strtod_l+0x978>
 800d858:	2600      	movs	r6, #0
 800d85a:	4f32      	ldr	r7, [pc, #200]	; (800d924 <_strtod_l+0xb24>)
 800d85c:	e7ea      	b.n	800d834 <_strtod_l+0xa34>
 800d85e:	4b31      	ldr	r3, [pc, #196]	; (800d924 <_strtod_l+0xb24>)
 800d860:	4630      	mov	r0, r6
 800d862:	4639      	mov	r1, r7
 800d864:	2200      	movs	r2, #0
 800d866:	f7f2 fec7 	bl	80005f8 <__aeabi_dmul>
 800d86a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d86c:	4606      	mov	r6, r0
 800d86e:	460f      	mov	r7, r1
 800d870:	b933      	cbnz	r3, 800d880 <_strtod_l+0xa80>
 800d872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d876:	9010      	str	r0, [sp, #64]	; 0x40
 800d878:	9311      	str	r3, [sp, #68]	; 0x44
 800d87a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d87e:	e7df      	b.n	800d840 <_strtod_l+0xa40>
 800d880:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d884:	e7f9      	b.n	800d87a <_strtod_l+0xa7a>
 800d886:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d88a:	9b04      	ldr	r3, [sp, #16]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1ab      	bne.n	800d7e8 <_strtod_l+0x9e8>
 800d890:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d894:	0d1b      	lsrs	r3, r3, #20
 800d896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d898:	051b      	lsls	r3, r3, #20
 800d89a:	429a      	cmp	r2, r3
 800d89c:	465d      	mov	r5, fp
 800d89e:	d1a3      	bne.n	800d7e8 <_strtod_l+0x9e8>
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7f3 f958 	bl	8000b58 <__aeabi_d2iz>
 800d8a8:	f7f2 fe3c 	bl	8000524 <__aeabi_i2d>
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	4639      	mov	r1, r7
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	f7f2 fce8 	bl	8000288 <__aeabi_dsub>
 800d8b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	460f      	mov	r7, r1
 800d8be:	b933      	cbnz	r3, 800d8ce <_strtod_l+0xace>
 800d8c0:	f1ba 0f00 	cmp.w	sl, #0
 800d8c4:	d103      	bne.n	800d8ce <_strtod_l+0xace>
 800d8c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d8ca:	2d00      	cmp	r5, #0
 800d8cc:	d06d      	beq.n	800d9aa <_strtod_l+0xbaa>
 800d8ce:	a30a      	add	r3, pc, #40	; (adr r3, 800d8f8 <_strtod_l+0xaf8>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	4639      	mov	r1, r7
 800d8d8:	f7f3 f900 	bl	8000adc <__aeabi_dcmplt>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f47f acb8 	bne.w	800d252 <_strtod_l+0x452>
 800d8e2:	a307      	add	r3, pc, #28	; (adr r3, 800d900 <_strtod_l+0xb00>)
 800d8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	f7f3 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	f43f af79 	beq.w	800d7e8 <_strtod_l+0x9e8>
 800d8f6:	e4ac      	b.n	800d252 <_strtod_l+0x452>
 800d8f8:	94a03595 	.word	0x94a03595
 800d8fc:	3fdfffff 	.word	0x3fdfffff
 800d900:	35afe535 	.word	0x35afe535
 800d904:	3fe00000 	.word	0x3fe00000
 800d908:	000fffff 	.word	0x000fffff
 800d90c:	7ff00000 	.word	0x7ff00000
 800d910:	7fefffff 	.word	0x7fefffff
 800d914:	39500000 	.word	0x39500000
 800d918:	3ff00000 	.word	0x3ff00000
 800d91c:	7fe00000 	.word	0x7fe00000
 800d920:	7c9fffff 	.word	0x7c9fffff
 800d924:	3fe00000 	.word	0x3fe00000
 800d928:	bff00000 	.word	0xbff00000
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	b333      	cbz	r3, 800d97e <_strtod_l+0xb7e>
 800d930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d932:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d936:	d822      	bhi.n	800d97e <_strtod_l+0xb7e>
 800d938:	a327      	add	r3, pc, #156	; (adr r3, 800d9d8 <_strtod_l+0xbd8>)
 800d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93e:	4630      	mov	r0, r6
 800d940:	4639      	mov	r1, r7
 800d942:	f7f3 f8d5 	bl	8000af0 <__aeabi_dcmple>
 800d946:	b1a0      	cbz	r0, 800d972 <_strtod_l+0xb72>
 800d948:	4639      	mov	r1, r7
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7f3 f92c 	bl	8000ba8 <__aeabi_d2uiz>
 800d950:	2800      	cmp	r0, #0
 800d952:	bf08      	it	eq
 800d954:	2001      	moveq	r0, #1
 800d956:	f7f2 fdd5 	bl	8000504 <__aeabi_ui2d>
 800d95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d95c:	4606      	mov	r6, r0
 800d95e:	460f      	mov	r7, r1
 800d960:	bb03      	cbnz	r3, 800d9a4 <_strtod_l+0xba4>
 800d962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d966:	9012      	str	r0, [sp, #72]	; 0x48
 800d968:	9313      	str	r3, [sp, #76]	; 0x4c
 800d96a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d96e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d976:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d97a:	1a9b      	subs	r3, r3, r2
 800d97c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d97e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d982:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d986:	f001 ffd1 	bl	800f92c <__ulp>
 800d98a:	4650      	mov	r0, sl
 800d98c:	ec53 2b10 	vmov	r2, r3, d0
 800d990:	4659      	mov	r1, fp
 800d992:	f7f2 fe31 	bl	80005f8 <__aeabi_dmul>
 800d996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d99a:	f7f2 fc77 	bl	800028c <__adddf3>
 800d99e:	4682      	mov	sl, r0
 800d9a0:	468b      	mov	fp, r1
 800d9a2:	e772      	b.n	800d88a <_strtod_l+0xa8a>
 800d9a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d9a8:	e7df      	b.n	800d96a <_strtod_l+0xb6a>
 800d9aa:	a30d      	add	r3, pc, #52	; (adr r3, 800d9e0 <_strtod_l+0xbe0>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f3 f894 	bl	8000adc <__aeabi_dcmplt>
 800d9b4:	e79c      	b.n	800d8f0 <_strtod_l+0xaf0>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	930d      	str	r3, [sp, #52]	; 0x34
 800d9ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	f7ff ba61 	b.w	800ce86 <_strtod_l+0x86>
 800d9c4:	2b65      	cmp	r3, #101	; 0x65
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	f43f ab4e 	beq.w	800d06a <_strtod_l+0x26a>
 800d9ce:	2101      	movs	r1, #1
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	9104      	str	r1, [sp, #16]
 800d9d4:	f7ff bacb 	b.w	800cf6e <_strtod_l+0x16e>
 800d9d8:	ffc00000 	.word	0xffc00000
 800d9dc:	41dfffff 	.word	0x41dfffff
 800d9e0:	94a03595 	.word	0x94a03595
 800d9e4:	3fcfffff 	.word	0x3fcfffff

0800d9e8 <_strtod_r>:
 800d9e8:	4b05      	ldr	r3, [pc, #20]	; (800da00 <_strtod_r+0x18>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	b410      	push	{r4}
 800d9ee:	6a1b      	ldr	r3, [r3, #32]
 800d9f0:	4c04      	ldr	r4, [pc, #16]	; (800da04 <_strtod_r+0x1c>)
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	bf08      	it	eq
 800d9f6:	4623      	moveq	r3, r4
 800d9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9fc:	f7ff ba00 	b.w	800ce00 <_strtod_l>
 800da00:	20000040 	.word	0x20000040
 800da04:	200000a4 	.word	0x200000a4

0800da08 <_strtol_l.isra.0>:
 800da08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da0c:	4680      	mov	r8, r0
 800da0e:	4689      	mov	r9, r1
 800da10:	4692      	mov	sl, r2
 800da12:	461e      	mov	r6, r3
 800da14:	460f      	mov	r7, r1
 800da16:	463d      	mov	r5, r7
 800da18:	9808      	ldr	r0, [sp, #32]
 800da1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da1e:	f001 fc27 	bl	800f270 <__locale_ctype_ptr_l>
 800da22:	4420      	add	r0, r4
 800da24:	7843      	ldrb	r3, [r0, #1]
 800da26:	f013 0308 	ands.w	r3, r3, #8
 800da2a:	d132      	bne.n	800da92 <_strtol_l.isra.0+0x8a>
 800da2c:	2c2d      	cmp	r4, #45	; 0x2d
 800da2e:	d132      	bne.n	800da96 <_strtol_l.isra.0+0x8e>
 800da30:	787c      	ldrb	r4, [r7, #1]
 800da32:	1cbd      	adds	r5, r7, #2
 800da34:	2201      	movs	r2, #1
 800da36:	2e00      	cmp	r6, #0
 800da38:	d05d      	beq.n	800daf6 <_strtol_l.isra.0+0xee>
 800da3a:	2e10      	cmp	r6, #16
 800da3c:	d109      	bne.n	800da52 <_strtol_l.isra.0+0x4a>
 800da3e:	2c30      	cmp	r4, #48	; 0x30
 800da40:	d107      	bne.n	800da52 <_strtol_l.isra.0+0x4a>
 800da42:	782b      	ldrb	r3, [r5, #0]
 800da44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da48:	2b58      	cmp	r3, #88	; 0x58
 800da4a:	d14f      	bne.n	800daec <_strtol_l.isra.0+0xe4>
 800da4c:	786c      	ldrb	r4, [r5, #1]
 800da4e:	2610      	movs	r6, #16
 800da50:	3502      	adds	r5, #2
 800da52:	2a00      	cmp	r2, #0
 800da54:	bf14      	ite	ne
 800da56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800da5a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800da5e:	2700      	movs	r7, #0
 800da60:	fbb1 fcf6 	udiv	ip, r1, r6
 800da64:	4638      	mov	r0, r7
 800da66:	fb06 1e1c 	mls	lr, r6, ip, r1
 800da6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800da6e:	2b09      	cmp	r3, #9
 800da70:	d817      	bhi.n	800daa2 <_strtol_l.isra.0+0x9a>
 800da72:	461c      	mov	r4, r3
 800da74:	42a6      	cmp	r6, r4
 800da76:	dd23      	ble.n	800dac0 <_strtol_l.isra.0+0xb8>
 800da78:	1c7b      	adds	r3, r7, #1
 800da7a:	d007      	beq.n	800da8c <_strtol_l.isra.0+0x84>
 800da7c:	4584      	cmp	ip, r0
 800da7e:	d31c      	bcc.n	800daba <_strtol_l.isra.0+0xb2>
 800da80:	d101      	bne.n	800da86 <_strtol_l.isra.0+0x7e>
 800da82:	45a6      	cmp	lr, r4
 800da84:	db19      	blt.n	800daba <_strtol_l.isra.0+0xb2>
 800da86:	fb00 4006 	mla	r0, r0, r6, r4
 800da8a:	2701      	movs	r7, #1
 800da8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da90:	e7eb      	b.n	800da6a <_strtol_l.isra.0+0x62>
 800da92:	462f      	mov	r7, r5
 800da94:	e7bf      	b.n	800da16 <_strtol_l.isra.0+0xe>
 800da96:	2c2b      	cmp	r4, #43	; 0x2b
 800da98:	bf04      	itt	eq
 800da9a:	1cbd      	addeq	r5, r7, #2
 800da9c:	787c      	ldrbeq	r4, [r7, #1]
 800da9e:	461a      	mov	r2, r3
 800daa0:	e7c9      	b.n	800da36 <_strtol_l.isra.0+0x2e>
 800daa2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800daa6:	2b19      	cmp	r3, #25
 800daa8:	d801      	bhi.n	800daae <_strtol_l.isra.0+0xa6>
 800daaa:	3c37      	subs	r4, #55	; 0x37
 800daac:	e7e2      	b.n	800da74 <_strtol_l.isra.0+0x6c>
 800daae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dab2:	2b19      	cmp	r3, #25
 800dab4:	d804      	bhi.n	800dac0 <_strtol_l.isra.0+0xb8>
 800dab6:	3c57      	subs	r4, #87	; 0x57
 800dab8:	e7dc      	b.n	800da74 <_strtol_l.isra.0+0x6c>
 800daba:	f04f 37ff 	mov.w	r7, #4294967295
 800dabe:	e7e5      	b.n	800da8c <_strtol_l.isra.0+0x84>
 800dac0:	1c7b      	adds	r3, r7, #1
 800dac2:	d108      	bne.n	800dad6 <_strtol_l.isra.0+0xce>
 800dac4:	2322      	movs	r3, #34	; 0x22
 800dac6:	f8c8 3000 	str.w	r3, [r8]
 800daca:	4608      	mov	r0, r1
 800dacc:	f1ba 0f00 	cmp.w	sl, #0
 800dad0:	d107      	bne.n	800dae2 <_strtol_l.isra.0+0xda>
 800dad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad6:	b102      	cbz	r2, 800dada <_strtol_l.isra.0+0xd2>
 800dad8:	4240      	negs	r0, r0
 800dada:	f1ba 0f00 	cmp.w	sl, #0
 800dade:	d0f8      	beq.n	800dad2 <_strtol_l.isra.0+0xca>
 800dae0:	b10f      	cbz	r7, 800dae6 <_strtol_l.isra.0+0xde>
 800dae2:	f105 39ff 	add.w	r9, r5, #4294967295
 800dae6:	f8ca 9000 	str.w	r9, [sl]
 800daea:	e7f2      	b.n	800dad2 <_strtol_l.isra.0+0xca>
 800daec:	2430      	movs	r4, #48	; 0x30
 800daee:	2e00      	cmp	r6, #0
 800daf0:	d1af      	bne.n	800da52 <_strtol_l.isra.0+0x4a>
 800daf2:	2608      	movs	r6, #8
 800daf4:	e7ad      	b.n	800da52 <_strtol_l.isra.0+0x4a>
 800daf6:	2c30      	cmp	r4, #48	; 0x30
 800daf8:	d0a3      	beq.n	800da42 <_strtol_l.isra.0+0x3a>
 800dafa:	260a      	movs	r6, #10
 800dafc:	e7a9      	b.n	800da52 <_strtol_l.isra.0+0x4a>
	...

0800db00 <_strtol_r>:
 800db00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db02:	4c06      	ldr	r4, [pc, #24]	; (800db1c <_strtol_r+0x1c>)
 800db04:	4d06      	ldr	r5, [pc, #24]	; (800db20 <_strtol_r+0x20>)
 800db06:	6824      	ldr	r4, [r4, #0]
 800db08:	6a24      	ldr	r4, [r4, #32]
 800db0a:	2c00      	cmp	r4, #0
 800db0c:	bf08      	it	eq
 800db0e:	462c      	moveq	r4, r5
 800db10:	9400      	str	r4, [sp, #0]
 800db12:	f7ff ff79 	bl	800da08 <_strtol_l.isra.0>
 800db16:	b003      	add	sp, #12
 800db18:	bd30      	pop	{r4, r5, pc}
 800db1a:	bf00      	nop
 800db1c:	20000040 	.word	0x20000040
 800db20:	200000a4 	.word	0x200000a4

0800db24 <__swbuf_r>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	460e      	mov	r6, r1
 800db28:	4614      	mov	r4, r2
 800db2a:	4605      	mov	r5, r0
 800db2c:	b118      	cbz	r0, 800db36 <__swbuf_r+0x12>
 800db2e:	6983      	ldr	r3, [r0, #24]
 800db30:	b90b      	cbnz	r3, 800db36 <__swbuf_r+0x12>
 800db32:	f000 ffed 	bl	800eb10 <__sinit>
 800db36:	4b21      	ldr	r3, [pc, #132]	; (800dbbc <__swbuf_r+0x98>)
 800db38:	429c      	cmp	r4, r3
 800db3a:	d12a      	bne.n	800db92 <__swbuf_r+0x6e>
 800db3c:	686c      	ldr	r4, [r5, #4]
 800db3e:	69a3      	ldr	r3, [r4, #24]
 800db40:	60a3      	str	r3, [r4, #8]
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	071a      	lsls	r2, r3, #28
 800db46:	d52e      	bpl.n	800dba6 <__swbuf_r+0x82>
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	b363      	cbz	r3, 800dba6 <__swbuf_r+0x82>
 800db4c:	6923      	ldr	r3, [r4, #16]
 800db4e:	6820      	ldr	r0, [r4, #0]
 800db50:	1ac0      	subs	r0, r0, r3
 800db52:	6963      	ldr	r3, [r4, #20]
 800db54:	b2f6      	uxtb	r6, r6
 800db56:	4283      	cmp	r3, r0
 800db58:	4637      	mov	r7, r6
 800db5a:	dc04      	bgt.n	800db66 <__swbuf_r+0x42>
 800db5c:	4621      	mov	r1, r4
 800db5e:	4628      	mov	r0, r5
 800db60:	f000 ff6c 	bl	800ea3c <_fflush_r>
 800db64:	bb28      	cbnz	r0, 800dbb2 <__swbuf_r+0x8e>
 800db66:	68a3      	ldr	r3, [r4, #8]
 800db68:	3b01      	subs	r3, #1
 800db6a:	60a3      	str	r3, [r4, #8]
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	6022      	str	r2, [r4, #0]
 800db72:	701e      	strb	r6, [r3, #0]
 800db74:	6963      	ldr	r3, [r4, #20]
 800db76:	3001      	adds	r0, #1
 800db78:	4283      	cmp	r3, r0
 800db7a:	d004      	beq.n	800db86 <__swbuf_r+0x62>
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	07db      	lsls	r3, r3, #31
 800db80:	d519      	bpl.n	800dbb6 <__swbuf_r+0x92>
 800db82:	2e0a      	cmp	r6, #10
 800db84:	d117      	bne.n	800dbb6 <__swbuf_r+0x92>
 800db86:	4621      	mov	r1, r4
 800db88:	4628      	mov	r0, r5
 800db8a:	f000 ff57 	bl	800ea3c <_fflush_r>
 800db8e:	b190      	cbz	r0, 800dbb6 <__swbuf_r+0x92>
 800db90:	e00f      	b.n	800dbb2 <__swbuf_r+0x8e>
 800db92:	4b0b      	ldr	r3, [pc, #44]	; (800dbc0 <__swbuf_r+0x9c>)
 800db94:	429c      	cmp	r4, r3
 800db96:	d101      	bne.n	800db9c <__swbuf_r+0x78>
 800db98:	68ac      	ldr	r4, [r5, #8]
 800db9a:	e7d0      	b.n	800db3e <__swbuf_r+0x1a>
 800db9c:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <__swbuf_r+0xa0>)
 800db9e:	429c      	cmp	r4, r3
 800dba0:	bf08      	it	eq
 800dba2:	68ec      	ldreq	r4, [r5, #12]
 800dba4:	e7cb      	b.n	800db3e <__swbuf_r+0x1a>
 800dba6:	4621      	mov	r1, r4
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f000 f80d 	bl	800dbc8 <__swsetup_r>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d0cc      	beq.n	800db4c <__swbuf_r+0x28>
 800dbb2:	f04f 37ff 	mov.w	r7, #4294967295
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	080107c0 	.word	0x080107c0
 800dbc0:	080107e0 	.word	0x080107e0
 800dbc4:	080107a0 	.word	0x080107a0

0800dbc8 <__swsetup_r>:
 800dbc8:	4b32      	ldr	r3, [pc, #200]	; (800dc94 <__swsetup_r+0xcc>)
 800dbca:	b570      	push	{r4, r5, r6, lr}
 800dbcc:	681d      	ldr	r5, [r3, #0]
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460c      	mov	r4, r1
 800dbd2:	b125      	cbz	r5, 800dbde <__swsetup_r+0x16>
 800dbd4:	69ab      	ldr	r3, [r5, #24]
 800dbd6:	b913      	cbnz	r3, 800dbde <__swsetup_r+0x16>
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f000 ff99 	bl	800eb10 <__sinit>
 800dbde:	4b2e      	ldr	r3, [pc, #184]	; (800dc98 <__swsetup_r+0xd0>)
 800dbe0:	429c      	cmp	r4, r3
 800dbe2:	d10f      	bne.n	800dc04 <__swsetup_r+0x3c>
 800dbe4:	686c      	ldr	r4, [r5, #4]
 800dbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	0715      	lsls	r5, r2, #28
 800dbee:	d42c      	bmi.n	800dc4a <__swsetup_r+0x82>
 800dbf0:	06d0      	lsls	r0, r2, #27
 800dbf2:	d411      	bmi.n	800dc18 <__swsetup_r+0x50>
 800dbf4:	2209      	movs	r2, #9
 800dbf6:	6032      	str	r2, [r6, #0]
 800dbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfc:	81a3      	strh	r3, [r4, #12]
 800dbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800dc02:	e03e      	b.n	800dc82 <__swsetup_r+0xba>
 800dc04:	4b25      	ldr	r3, [pc, #148]	; (800dc9c <__swsetup_r+0xd4>)
 800dc06:	429c      	cmp	r4, r3
 800dc08:	d101      	bne.n	800dc0e <__swsetup_r+0x46>
 800dc0a:	68ac      	ldr	r4, [r5, #8]
 800dc0c:	e7eb      	b.n	800dbe6 <__swsetup_r+0x1e>
 800dc0e:	4b24      	ldr	r3, [pc, #144]	; (800dca0 <__swsetup_r+0xd8>)
 800dc10:	429c      	cmp	r4, r3
 800dc12:	bf08      	it	eq
 800dc14:	68ec      	ldreq	r4, [r5, #12]
 800dc16:	e7e6      	b.n	800dbe6 <__swsetup_r+0x1e>
 800dc18:	0751      	lsls	r1, r2, #29
 800dc1a:	d512      	bpl.n	800dc42 <__swsetup_r+0x7a>
 800dc1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc1e:	b141      	cbz	r1, 800dc32 <__swsetup_r+0x6a>
 800dc20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc24:	4299      	cmp	r1, r3
 800dc26:	d002      	beq.n	800dc2e <__swsetup_r+0x66>
 800dc28:	4630      	mov	r0, r6
 800dc2a:	f001 ffc1 	bl	800fbb0 <_free_r>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6363      	str	r3, [r4, #52]	; 0x34
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc38:	81a3      	strh	r3, [r4, #12]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6063      	str	r3, [r4, #4]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f043 0308 	orr.w	r3, r3, #8
 800dc48:	81a3      	strh	r3, [r4, #12]
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	b94b      	cbnz	r3, 800dc62 <__swsetup_r+0x9a>
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc58:	d003      	beq.n	800dc62 <__swsetup_r+0x9a>
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	f001 fb3f 	bl	800f2e0 <__smakebuf_r>
 800dc62:	89a2      	ldrh	r2, [r4, #12]
 800dc64:	f012 0301 	ands.w	r3, r2, #1
 800dc68:	d00c      	beq.n	800dc84 <__swsetup_r+0xbc>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60a3      	str	r3, [r4, #8]
 800dc6e:	6963      	ldr	r3, [r4, #20]
 800dc70:	425b      	negs	r3, r3
 800dc72:	61a3      	str	r3, [r4, #24]
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	b953      	cbnz	r3, 800dc8e <__swsetup_r+0xc6>
 800dc78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dc80:	d1ba      	bne.n	800dbf8 <__swsetup_r+0x30>
 800dc82:	bd70      	pop	{r4, r5, r6, pc}
 800dc84:	0792      	lsls	r2, r2, #30
 800dc86:	bf58      	it	pl
 800dc88:	6963      	ldrpl	r3, [r4, #20]
 800dc8a:	60a3      	str	r3, [r4, #8]
 800dc8c:	e7f2      	b.n	800dc74 <__swsetup_r+0xac>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e7f7      	b.n	800dc82 <__swsetup_r+0xba>
 800dc92:	bf00      	nop
 800dc94:	20000040 	.word	0x20000040
 800dc98:	080107c0 	.word	0x080107c0
 800dc9c:	080107e0 	.word	0x080107e0
 800dca0:	080107a0 	.word	0x080107a0

0800dca4 <quorem>:
 800dca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca8:	6903      	ldr	r3, [r0, #16]
 800dcaa:	690c      	ldr	r4, [r1, #16]
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	4680      	mov	r8, r0
 800dcb0:	f2c0 8082 	blt.w	800ddb8 <quorem+0x114>
 800dcb4:	3c01      	subs	r4, #1
 800dcb6:	f101 0714 	add.w	r7, r1, #20
 800dcba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dcbe:	f100 0614 	add.w	r6, r0, #20
 800dcc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dcc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dcca:	eb06 030c 	add.w	r3, r6, ip
 800dcce:	3501      	adds	r5, #1
 800dcd0:	eb07 090c 	add.w	r9, r7, ip
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	fbb0 f5f5 	udiv	r5, r0, r5
 800dcda:	b395      	cbz	r5, 800dd42 <quorem+0x9e>
 800dcdc:	f04f 0a00 	mov.w	sl, #0
 800dce0:	4638      	mov	r0, r7
 800dce2:	46b6      	mov	lr, r6
 800dce4:	46d3      	mov	fp, sl
 800dce6:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcea:	b293      	uxth	r3, r2
 800dcec:	fb05 a303 	mla	r3, r5, r3, sl
 800dcf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	ebab 0303 	sub.w	r3, fp, r3
 800dcfa:	0c12      	lsrs	r2, r2, #16
 800dcfc:	f8de b000 	ldr.w	fp, [lr]
 800dd00:	fb05 a202 	mla	r2, r5, r2, sl
 800dd04:	fa13 f38b 	uxtah	r3, r3, fp
 800dd08:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dd0c:	fa1f fb82 	uxth.w	fp, r2
 800dd10:	f8de 2000 	ldr.w	r2, [lr]
 800dd14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dd18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd22:	4581      	cmp	r9, r0
 800dd24:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dd28:	f84e 3b04 	str.w	r3, [lr], #4
 800dd2c:	d2db      	bcs.n	800dce6 <quorem+0x42>
 800dd2e:	f856 300c 	ldr.w	r3, [r6, ip]
 800dd32:	b933      	cbnz	r3, 800dd42 <quorem+0x9e>
 800dd34:	9b01      	ldr	r3, [sp, #4]
 800dd36:	3b04      	subs	r3, #4
 800dd38:	429e      	cmp	r6, r3
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	d330      	bcc.n	800dda0 <quorem+0xfc>
 800dd3e:	f8c8 4010 	str.w	r4, [r8, #16]
 800dd42:	4640      	mov	r0, r8
 800dd44:	f001 fd7a 	bl	800f83c <__mcmp>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	db25      	blt.n	800dd98 <quorem+0xf4>
 800dd4c:	3501      	adds	r5, #1
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f04f 0c00 	mov.w	ip, #0
 800dd54:	f857 2b04 	ldr.w	r2, [r7], #4
 800dd58:	f8d0 e000 	ldr.w	lr, [r0]
 800dd5c:	b293      	uxth	r3, r2
 800dd5e:	ebac 0303 	sub.w	r3, ip, r3
 800dd62:	0c12      	lsrs	r2, r2, #16
 800dd64:	fa13 f38e 	uxtah	r3, r3, lr
 800dd68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd76:	45b9      	cmp	r9, r7
 800dd78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd7c:	f840 3b04 	str.w	r3, [r0], #4
 800dd80:	d2e8      	bcs.n	800dd54 <quorem+0xb0>
 800dd82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dd86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dd8a:	b92a      	cbnz	r2, 800dd98 <quorem+0xf4>
 800dd8c:	3b04      	subs	r3, #4
 800dd8e:	429e      	cmp	r6, r3
 800dd90:	461a      	mov	r2, r3
 800dd92:	d30b      	bcc.n	800ddac <quorem+0x108>
 800dd94:	f8c8 4010 	str.w	r4, [r8, #16]
 800dd98:	4628      	mov	r0, r5
 800dd9a:	b003      	add	sp, #12
 800dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda0:	6812      	ldr	r2, [r2, #0]
 800dda2:	3b04      	subs	r3, #4
 800dda4:	2a00      	cmp	r2, #0
 800dda6:	d1ca      	bne.n	800dd3e <quorem+0x9a>
 800dda8:	3c01      	subs	r4, #1
 800ddaa:	e7c5      	b.n	800dd38 <quorem+0x94>
 800ddac:	6812      	ldr	r2, [r2, #0]
 800ddae:	3b04      	subs	r3, #4
 800ddb0:	2a00      	cmp	r2, #0
 800ddb2:	d1ef      	bne.n	800dd94 <quorem+0xf0>
 800ddb4:	3c01      	subs	r4, #1
 800ddb6:	e7ea      	b.n	800dd8e <quorem+0xea>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e7ee      	b.n	800dd9a <quorem+0xf6>
 800ddbc:	0000      	movs	r0, r0
	...

0800ddc0 <_dtoa_r>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	ec57 6b10 	vmov	r6, r7, d0
 800ddc8:	b097      	sub	sp, #92	; 0x5c
 800ddca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddcc:	9106      	str	r1, [sp, #24]
 800ddce:	4604      	mov	r4, r0
 800ddd0:	920b      	str	r2, [sp, #44]	; 0x2c
 800ddd2:	9312      	str	r3, [sp, #72]	; 0x48
 800ddd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddd8:	e9cd 6700 	strd	r6, r7, [sp]
 800dddc:	b93d      	cbnz	r5, 800ddee <_dtoa_r+0x2e>
 800ddde:	2010      	movs	r0, #16
 800dde0:	f001 fabe 	bl	800f360 <malloc>
 800dde4:	6260      	str	r0, [r4, #36]	; 0x24
 800dde6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddea:	6005      	str	r5, [r0, #0]
 800ddec:	60c5      	str	r5, [r0, #12]
 800ddee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf0:	6819      	ldr	r1, [r3, #0]
 800ddf2:	b151      	cbz	r1, 800de0a <_dtoa_r+0x4a>
 800ddf4:	685a      	ldr	r2, [r3, #4]
 800ddf6:	604a      	str	r2, [r1, #4]
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	4093      	lsls	r3, r2
 800ddfc:	608b      	str	r3, [r1, #8]
 800ddfe:	4620      	mov	r0, r4
 800de00:	f001 fafc 	bl	800f3fc <_Bfree>
 800de04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de06:	2200      	movs	r2, #0
 800de08:	601a      	str	r2, [r3, #0]
 800de0a:	1e3b      	subs	r3, r7, #0
 800de0c:	bfbb      	ittet	lt
 800de0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de12:	9301      	strlt	r3, [sp, #4]
 800de14:	2300      	movge	r3, #0
 800de16:	2201      	movlt	r2, #1
 800de18:	bfac      	ite	ge
 800de1a:	f8c8 3000 	strge.w	r3, [r8]
 800de1e:	f8c8 2000 	strlt.w	r2, [r8]
 800de22:	4baf      	ldr	r3, [pc, #700]	; (800e0e0 <_dtoa_r+0x320>)
 800de24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de28:	ea33 0308 	bics.w	r3, r3, r8
 800de2c:	d114      	bne.n	800de58 <_dtoa_r+0x98>
 800de2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de30:	f242 730f 	movw	r3, #9999	; 0x270f
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	9b00      	ldr	r3, [sp, #0]
 800de38:	b923      	cbnz	r3, 800de44 <_dtoa_r+0x84>
 800de3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800de3e:	2800      	cmp	r0, #0
 800de40:	f000 8542 	beq.w	800e8c8 <_dtoa_r+0xb08>
 800de44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e0f4 <_dtoa_r+0x334>
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 8544 	beq.w	800e8d8 <_dtoa_r+0xb18>
 800de50:	f10b 0303 	add.w	r3, fp, #3
 800de54:	f000 bd3e 	b.w	800e8d4 <_dtoa_r+0xb14>
 800de58:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de5c:	2200      	movs	r2, #0
 800de5e:	2300      	movs	r3, #0
 800de60:	4630      	mov	r0, r6
 800de62:	4639      	mov	r1, r7
 800de64:	f7f2 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 800de68:	4681      	mov	r9, r0
 800de6a:	b168      	cbz	r0, 800de88 <_dtoa_r+0xc8>
 800de6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de6e:	2301      	movs	r3, #1
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 8524 	beq.w	800e8c2 <_dtoa_r+0xb02>
 800de7a:	4b9a      	ldr	r3, [pc, #616]	; (800e0e4 <_dtoa_r+0x324>)
 800de7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de7e:	f103 3bff 	add.w	fp, r3, #4294967295
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	f000 bd28 	b.w	800e8d8 <_dtoa_r+0xb18>
 800de88:	aa14      	add	r2, sp, #80	; 0x50
 800de8a:	a915      	add	r1, sp, #84	; 0x54
 800de8c:	ec47 6b10 	vmov	d0, r6, r7
 800de90:	4620      	mov	r0, r4
 800de92:	f001 fdc1 	bl	800fa18 <__d2b>
 800de96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800de9a:	9004      	str	r0, [sp, #16]
 800de9c:	2d00      	cmp	r5, #0
 800de9e:	d07c      	beq.n	800df9a <_dtoa_r+0x1da>
 800dea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dea4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dea8:	46b2      	mov	sl, r6
 800deaa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800deae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800deb2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800deb6:	2200      	movs	r2, #0
 800deb8:	4b8b      	ldr	r3, [pc, #556]	; (800e0e8 <_dtoa_r+0x328>)
 800deba:	4650      	mov	r0, sl
 800debc:	4659      	mov	r1, fp
 800debe:	f7f2 f9e3 	bl	8000288 <__aeabi_dsub>
 800dec2:	a381      	add	r3, pc, #516	; (adr r3, 800e0c8 <_dtoa_r+0x308>)
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f7f2 fb96 	bl	80005f8 <__aeabi_dmul>
 800decc:	a380      	add	r3, pc, #512	; (adr r3, 800e0d0 <_dtoa_r+0x310>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	f7f2 f9db 	bl	800028c <__adddf3>
 800ded6:	4606      	mov	r6, r0
 800ded8:	4628      	mov	r0, r5
 800deda:	460f      	mov	r7, r1
 800dedc:	f7f2 fb22 	bl	8000524 <__aeabi_i2d>
 800dee0:	a37d      	add	r3, pc, #500	; (adr r3, 800e0d8 <_dtoa_r+0x318>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 fb87 	bl	80005f8 <__aeabi_dmul>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4630      	mov	r0, r6
 800def0:	4639      	mov	r1, r7
 800def2:	f7f2 f9cb 	bl	800028c <__adddf3>
 800def6:	4606      	mov	r6, r0
 800def8:	460f      	mov	r7, r1
 800defa:	f7f2 fe2d 	bl	8000b58 <__aeabi_d2iz>
 800defe:	2200      	movs	r2, #0
 800df00:	4682      	mov	sl, r0
 800df02:	2300      	movs	r3, #0
 800df04:	4630      	mov	r0, r6
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 fde8 	bl	8000adc <__aeabi_dcmplt>
 800df0c:	b148      	cbz	r0, 800df22 <_dtoa_r+0x162>
 800df0e:	4650      	mov	r0, sl
 800df10:	f7f2 fb08 	bl	8000524 <__aeabi_i2d>
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	f7f2 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800df1c:	b908      	cbnz	r0, 800df22 <_dtoa_r+0x162>
 800df1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df22:	f1ba 0f16 	cmp.w	sl, #22
 800df26:	d859      	bhi.n	800dfdc <_dtoa_r+0x21c>
 800df28:	4970      	ldr	r1, [pc, #448]	; (800e0ec <_dtoa_r+0x32c>)
 800df2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800df2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df36:	f7f2 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d050      	beq.n	800dfe0 <_dtoa_r+0x220>
 800df3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df42:	2300      	movs	r3, #0
 800df44:	930f      	str	r3, [sp, #60]	; 0x3c
 800df46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df48:	1b5d      	subs	r5, r3, r5
 800df4a:	f1b5 0801 	subs.w	r8, r5, #1
 800df4e:	bf49      	itett	mi
 800df50:	f1c5 0301 	rsbmi	r3, r5, #1
 800df54:	2300      	movpl	r3, #0
 800df56:	9305      	strmi	r3, [sp, #20]
 800df58:	f04f 0800 	movmi.w	r8, #0
 800df5c:	bf58      	it	pl
 800df5e:	9305      	strpl	r3, [sp, #20]
 800df60:	f1ba 0f00 	cmp.w	sl, #0
 800df64:	db3e      	blt.n	800dfe4 <_dtoa_r+0x224>
 800df66:	2300      	movs	r3, #0
 800df68:	44d0      	add	r8, sl
 800df6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800df6e:	9307      	str	r3, [sp, #28]
 800df70:	9b06      	ldr	r3, [sp, #24]
 800df72:	2b09      	cmp	r3, #9
 800df74:	f200 8090 	bhi.w	800e098 <_dtoa_r+0x2d8>
 800df78:	2b05      	cmp	r3, #5
 800df7a:	bfc4      	itt	gt
 800df7c:	3b04      	subgt	r3, #4
 800df7e:	9306      	strgt	r3, [sp, #24]
 800df80:	9b06      	ldr	r3, [sp, #24]
 800df82:	f1a3 0302 	sub.w	r3, r3, #2
 800df86:	bfcc      	ite	gt
 800df88:	2500      	movgt	r5, #0
 800df8a:	2501      	movle	r5, #1
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	f200 808f 	bhi.w	800e0b0 <_dtoa_r+0x2f0>
 800df92:	e8df f003 	tbb	[pc, r3]
 800df96:	7f7d      	.short	0x7f7d
 800df98:	7131      	.short	0x7131
 800df9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800df9e:	441d      	add	r5, r3
 800dfa0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dfa4:	2820      	cmp	r0, #32
 800dfa6:	dd13      	ble.n	800dfd0 <_dtoa_r+0x210>
 800dfa8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dfac:	9b00      	ldr	r3, [sp, #0]
 800dfae:	fa08 f800 	lsl.w	r8, r8, r0
 800dfb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800dfb6:	fa23 f000 	lsr.w	r0, r3, r0
 800dfba:	ea48 0000 	orr.w	r0, r8, r0
 800dfbe:	f7f2 faa1 	bl	8000504 <__aeabi_ui2d>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800dfca:	3d01      	subs	r5, #1
 800dfcc:	9313      	str	r3, [sp, #76]	; 0x4c
 800dfce:	e772      	b.n	800deb6 <_dtoa_r+0xf6>
 800dfd0:	9b00      	ldr	r3, [sp, #0]
 800dfd2:	f1c0 0020 	rsb	r0, r0, #32
 800dfd6:	fa03 f000 	lsl.w	r0, r3, r0
 800dfda:	e7f0      	b.n	800dfbe <_dtoa_r+0x1fe>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e7b1      	b.n	800df44 <_dtoa_r+0x184>
 800dfe0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dfe2:	e7b0      	b.n	800df46 <_dtoa_r+0x186>
 800dfe4:	9b05      	ldr	r3, [sp, #20]
 800dfe6:	eba3 030a 	sub.w	r3, r3, sl
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	f1ca 0300 	rsb	r3, sl, #0
 800dff0:	9307      	str	r3, [sp, #28]
 800dff2:	2300      	movs	r3, #0
 800dff4:	930e      	str	r3, [sp, #56]	; 0x38
 800dff6:	e7bb      	b.n	800df70 <_dtoa_r+0x1b0>
 800dff8:	2301      	movs	r3, #1
 800dffa:	930a      	str	r3, [sp, #40]	; 0x28
 800dffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dd59      	ble.n	800e0b6 <_dtoa_r+0x2f6>
 800e002:	9302      	str	r3, [sp, #8]
 800e004:	4699      	mov	r9, r3
 800e006:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e008:	2200      	movs	r2, #0
 800e00a:	6072      	str	r2, [r6, #4]
 800e00c:	2204      	movs	r2, #4
 800e00e:	f102 0014 	add.w	r0, r2, #20
 800e012:	4298      	cmp	r0, r3
 800e014:	6871      	ldr	r1, [r6, #4]
 800e016:	d953      	bls.n	800e0c0 <_dtoa_r+0x300>
 800e018:	4620      	mov	r0, r4
 800e01a:	f001 f9bb 	bl	800f394 <_Balloc>
 800e01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e020:	6030      	str	r0, [r6, #0]
 800e022:	f1b9 0f0e 	cmp.w	r9, #14
 800e026:	f8d3 b000 	ldr.w	fp, [r3]
 800e02a:	f200 80e6 	bhi.w	800e1fa <_dtoa_r+0x43a>
 800e02e:	2d00      	cmp	r5, #0
 800e030:	f000 80e3 	beq.w	800e1fa <_dtoa_r+0x43a>
 800e034:	ed9d 7b00 	vldr	d7, [sp]
 800e038:	f1ba 0f00 	cmp.w	sl, #0
 800e03c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e040:	dd74      	ble.n	800e12c <_dtoa_r+0x36c>
 800e042:	4a2a      	ldr	r2, [pc, #168]	; (800e0ec <_dtoa_r+0x32c>)
 800e044:	f00a 030f 	and.w	r3, sl, #15
 800e048:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e04c:	ed93 7b00 	vldr	d7, [r3]
 800e050:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e054:	06f0      	lsls	r0, r6, #27
 800e056:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e05a:	d565      	bpl.n	800e128 <_dtoa_r+0x368>
 800e05c:	4b24      	ldr	r3, [pc, #144]	; (800e0f0 <_dtoa_r+0x330>)
 800e05e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e062:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e066:	f7f2 fbf1 	bl	800084c <__aeabi_ddiv>
 800e06a:	e9cd 0100 	strd	r0, r1, [sp]
 800e06e:	f006 060f 	and.w	r6, r6, #15
 800e072:	2503      	movs	r5, #3
 800e074:	4f1e      	ldr	r7, [pc, #120]	; (800e0f0 <_dtoa_r+0x330>)
 800e076:	e04c      	b.n	800e112 <_dtoa_r+0x352>
 800e078:	2301      	movs	r3, #1
 800e07a:	930a      	str	r3, [sp, #40]	; 0x28
 800e07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e07e:	4453      	add	r3, sl
 800e080:	f103 0901 	add.w	r9, r3, #1
 800e084:	9302      	str	r3, [sp, #8]
 800e086:	464b      	mov	r3, r9
 800e088:	2b01      	cmp	r3, #1
 800e08a:	bfb8      	it	lt
 800e08c:	2301      	movlt	r3, #1
 800e08e:	e7ba      	b.n	800e006 <_dtoa_r+0x246>
 800e090:	2300      	movs	r3, #0
 800e092:	e7b2      	b.n	800dffa <_dtoa_r+0x23a>
 800e094:	2300      	movs	r3, #0
 800e096:	e7f0      	b.n	800e07a <_dtoa_r+0x2ba>
 800e098:	2501      	movs	r5, #1
 800e09a:	2300      	movs	r3, #0
 800e09c:	9306      	str	r3, [sp, #24]
 800e09e:	950a      	str	r5, [sp, #40]	; 0x28
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a4:	9302      	str	r3, [sp, #8]
 800e0a6:	4699      	mov	r9, r3
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2312      	movs	r3, #18
 800e0ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800e0ae:	e7aa      	b.n	800e006 <_dtoa_r+0x246>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e0b4:	e7f4      	b.n	800e0a0 <_dtoa_r+0x2e0>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	9302      	str	r3, [sp, #8]
 800e0ba:	4699      	mov	r9, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	e7f5      	b.n	800e0ac <_dtoa_r+0x2ec>
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	6071      	str	r1, [r6, #4]
 800e0c4:	0052      	lsls	r2, r2, #1
 800e0c6:	e7a2      	b.n	800e00e <_dtoa_r+0x24e>
 800e0c8:	636f4361 	.word	0x636f4361
 800e0cc:	3fd287a7 	.word	0x3fd287a7
 800e0d0:	8b60c8b3 	.word	0x8b60c8b3
 800e0d4:	3fc68a28 	.word	0x3fc68a28
 800e0d8:	509f79fb 	.word	0x509f79fb
 800e0dc:	3fd34413 	.word	0x3fd34413
 800e0e0:	7ff00000 	.word	0x7ff00000
 800e0e4:	08010715 	.word	0x08010715
 800e0e8:	3ff80000 	.word	0x3ff80000
 800e0ec:	08010838 	.word	0x08010838
 800e0f0:	08010810 	.word	0x08010810
 800e0f4:	08010799 	.word	0x08010799
 800e0f8:	07f1      	lsls	r1, r6, #31
 800e0fa:	d508      	bpl.n	800e10e <_dtoa_r+0x34e>
 800e0fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e104:	f7f2 fa78 	bl	80005f8 <__aeabi_dmul>
 800e108:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e10c:	3501      	adds	r5, #1
 800e10e:	1076      	asrs	r6, r6, #1
 800e110:	3708      	adds	r7, #8
 800e112:	2e00      	cmp	r6, #0
 800e114:	d1f0      	bne.n	800e0f8 <_dtoa_r+0x338>
 800e116:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e11e:	f7f2 fb95 	bl	800084c <__aeabi_ddiv>
 800e122:	e9cd 0100 	strd	r0, r1, [sp]
 800e126:	e01a      	b.n	800e15e <_dtoa_r+0x39e>
 800e128:	2502      	movs	r5, #2
 800e12a:	e7a3      	b.n	800e074 <_dtoa_r+0x2b4>
 800e12c:	f000 80a0 	beq.w	800e270 <_dtoa_r+0x4b0>
 800e130:	f1ca 0600 	rsb	r6, sl, #0
 800e134:	4b9f      	ldr	r3, [pc, #636]	; (800e3b4 <_dtoa_r+0x5f4>)
 800e136:	4fa0      	ldr	r7, [pc, #640]	; (800e3b8 <_dtoa_r+0x5f8>)
 800e138:	f006 020f 	and.w	r2, r6, #15
 800e13c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e148:	f7f2 fa56 	bl	80005f8 <__aeabi_dmul>
 800e14c:	e9cd 0100 	strd	r0, r1, [sp]
 800e150:	1136      	asrs	r6, r6, #4
 800e152:	2300      	movs	r3, #0
 800e154:	2502      	movs	r5, #2
 800e156:	2e00      	cmp	r6, #0
 800e158:	d17f      	bne.n	800e25a <_dtoa_r+0x49a>
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1e1      	bne.n	800e122 <_dtoa_r+0x362>
 800e15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 8087 	beq.w	800e274 <_dtoa_r+0x4b4>
 800e166:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e16a:	2200      	movs	r2, #0
 800e16c:	4b93      	ldr	r3, [pc, #588]	; (800e3bc <_dtoa_r+0x5fc>)
 800e16e:	4630      	mov	r0, r6
 800e170:	4639      	mov	r1, r7
 800e172:	f7f2 fcb3 	bl	8000adc <__aeabi_dcmplt>
 800e176:	2800      	cmp	r0, #0
 800e178:	d07c      	beq.n	800e274 <_dtoa_r+0x4b4>
 800e17a:	f1b9 0f00 	cmp.w	r9, #0
 800e17e:	d079      	beq.n	800e274 <_dtoa_r+0x4b4>
 800e180:	9b02      	ldr	r3, [sp, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	dd35      	ble.n	800e1f2 <_dtoa_r+0x432>
 800e186:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e18a:	9308      	str	r3, [sp, #32]
 800e18c:	4639      	mov	r1, r7
 800e18e:	2200      	movs	r2, #0
 800e190:	4b8b      	ldr	r3, [pc, #556]	; (800e3c0 <_dtoa_r+0x600>)
 800e192:	4630      	mov	r0, r6
 800e194:	f7f2 fa30 	bl	80005f8 <__aeabi_dmul>
 800e198:	e9cd 0100 	strd	r0, r1, [sp]
 800e19c:	9f02      	ldr	r7, [sp, #8]
 800e19e:	3501      	adds	r5, #1
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f7f2 f9bf 	bl	8000524 <__aeabi_i2d>
 800e1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1aa:	f7f2 fa25 	bl	80005f8 <__aeabi_dmul>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	4b84      	ldr	r3, [pc, #528]	; (800e3c4 <_dtoa_r+0x604>)
 800e1b2:	f7f2 f86b 	bl	800028c <__adddf3>
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e1bc:	2f00      	cmp	r7, #0
 800e1be:	d15d      	bne.n	800e27c <_dtoa_r+0x4bc>
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4b81      	ldr	r3, [pc, #516]	; (800e3c8 <_dtoa_r+0x608>)
 800e1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1c8:	f7f2 f85e 	bl	8000288 <__aeabi_dsub>
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	4633      	mov	r3, r6
 800e1d0:	e9cd 0100 	strd	r0, r1, [sp]
 800e1d4:	f7f2 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	f040 8288 	bne.w	800e6ee <_dtoa_r+0x92e>
 800e1de:	462a      	mov	r2, r5
 800e1e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e1e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1e8:	f7f2 fc78 	bl	8000adc <__aeabi_dcmplt>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	f040 827c 	bne.w	800e6ea <_dtoa_r+0x92a>
 800e1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e1f6:	e9cd 2300 	strd	r2, r3, [sp]
 800e1fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f2c0 8150 	blt.w	800e4a2 <_dtoa_r+0x6e2>
 800e202:	f1ba 0f0e 	cmp.w	sl, #14
 800e206:	f300 814c 	bgt.w	800e4a2 <_dtoa_r+0x6e2>
 800e20a:	4b6a      	ldr	r3, [pc, #424]	; (800e3b4 <_dtoa_r+0x5f4>)
 800e20c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e210:	ed93 7b00 	vldr	d7, [r3]
 800e214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e21c:	f280 80d8 	bge.w	800e3d0 <_dtoa_r+0x610>
 800e220:	f1b9 0f00 	cmp.w	r9, #0
 800e224:	f300 80d4 	bgt.w	800e3d0 <_dtoa_r+0x610>
 800e228:	f040 825e 	bne.w	800e6e8 <_dtoa_r+0x928>
 800e22c:	2200      	movs	r2, #0
 800e22e:	4b66      	ldr	r3, [pc, #408]	; (800e3c8 <_dtoa_r+0x608>)
 800e230:	ec51 0b17 	vmov	r0, r1, d7
 800e234:	f7f2 f9e0 	bl	80005f8 <__aeabi_dmul>
 800e238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e23c:	f7f2 fc62 	bl	8000b04 <__aeabi_dcmpge>
 800e240:	464f      	mov	r7, r9
 800e242:	464e      	mov	r6, r9
 800e244:	2800      	cmp	r0, #0
 800e246:	f040 8234 	bne.w	800e6b2 <_dtoa_r+0x8f2>
 800e24a:	2331      	movs	r3, #49	; 0x31
 800e24c:	f10b 0501 	add.w	r5, fp, #1
 800e250:	f88b 3000 	strb.w	r3, [fp]
 800e254:	f10a 0a01 	add.w	sl, sl, #1
 800e258:	e22f      	b.n	800e6ba <_dtoa_r+0x8fa>
 800e25a:	07f2      	lsls	r2, r6, #31
 800e25c:	d505      	bpl.n	800e26a <_dtoa_r+0x4aa>
 800e25e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e262:	f7f2 f9c9 	bl	80005f8 <__aeabi_dmul>
 800e266:	3501      	adds	r5, #1
 800e268:	2301      	movs	r3, #1
 800e26a:	1076      	asrs	r6, r6, #1
 800e26c:	3708      	adds	r7, #8
 800e26e:	e772      	b.n	800e156 <_dtoa_r+0x396>
 800e270:	2502      	movs	r5, #2
 800e272:	e774      	b.n	800e15e <_dtoa_r+0x39e>
 800e274:	f8cd a020 	str.w	sl, [sp, #32]
 800e278:	464f      	mov	r7, r9
 800e27a:	e791      	b.n	800e1a0 <_dtoa_r+0x3e0>
 800e27c:	4b4d      	ldr	r3, [pc, #308]	; (800e3b4 <_dtoa_r+0x5f4>)
 800e27e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e282:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d047      	beq.n	800e31c <_dtoa_r+0x55c>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	2000      	movs	r0, #0
 800e292:	494e      	ldr	r1, [pc, #312]	; (800e3cc <_dtoa_r+0x60c>)
 800e294:	f7f2 fada 	bl	800084c <__aeabi_ddiv>
 800e298:	462a      	mov	r2, r5
 800e29a:	4633      	mov	r3, r6
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e2a4:	465d      	mov	r5, fp
 800e2a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2aa:	f7f2 fc55 	bl	8000b58 <__aeabi_d2iz>
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	f7f2 f938 	bl	8000524 <__aeabi_i2d>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	3630      	adds	r6, #48	; 0x30
 800e2c2:	f805 6b01 	strb.w	r6, [r5], #1
 800e2c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e2ca:	e9cd 0100 	strd	r0, r1, [sp]
 800e2ce:	f7f2 fc05 	bl	8000adc <__aeabi_dcmplt>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d163      	bne.n	800e39e <_dtoa_r+0x5de>
 800e2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2da:	2000      	movs	r0, #0
 800e2dc:	4937      	ldr	r1, [pc, #220]	; (800e3bc <_dtoa_r+0x5fc>)
 800e2de:	f7f1 ffd3 	bl	8000288 <__aeabi_dsub>
 800e2e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e2e6:	f7f2 fbf9 	bl	8000adc <__aeabi_dcmplt>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f040 80b7 	bne.w	800e45e <_dtoa_r+0x69e>
 800e2f0:	eba5 030b 	sub.w	r3, r5, fp
 800e2f4:	429f      	cmp	r7, r3
 800e2f6:	f77f af7c 	ble.w	800e1f2 <_dtoa_r+0x432>
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4b30      	ldr	r3, [pc, #192]	; (800e3c0 <_dtoa_r+0x600>)
 800e2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e302:	f7f2 f979 	bl	80005f8 <__aeabi_dmul>
 800e306:	2200      	movs	r2, #0
 800e308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e30c:	4b2c      	ldr	r3, [pc, #176]	; (800e3c0 <_dtoa_r+0x600>)
 800e30e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e312:	f7f2 f971 	bl	80005f8 <__aeabi_dmul>
 800e316:	e9cd 0100 	strd	r0, r1, [sp]
 800e31a:	e7c4      	b.n	800e2a6 <_dtoa_r+0x4e6>
 800e31c:	462a      	mov	r2, r5
 800e31e:	4633      	mov	r3, r6
 800e320:	f7f2 f96a 	bl	80005f8 <__aeabi_dmul>
 800e324:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e328:	eb0b 0507 	add.w	r5, fp, r7
 800e32c:	465e      	mov	r6, fp
 800e32e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e332:	f7f2 fc11 	bl	8000b58 <__aeabi_d2iz>
 800e336:	4607      	mov	r7, r0
 800e338:	f7f2 f8f4 	bl	8000524 <__aeabi_i2d>
 800e33c:	3730      	adds	r7, #48	; 0x30
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e346:	f7f1 ff9f 	bl	8000288 <__aeabi_dsub>
 800e34a:	f806 7b01 	strb.w	r7, [r6], #1
 800e34e:	42ae      	cmp	r6, r5
 800e350:	e9cd 0100 	strd	r0, r1, [sp]
 800e354:	f04f 0200 	mov.w	r2, #0
 800e358:	d126      	bne.n	800e3a8 <_dtoa_r+0x5e8>
 800e35a:	4b1c      	ldr	r3, [pc, #112]	; (800e3cc <_dtoa_r+0x60c>)
 800e35c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e360:	f7f1 ff94 	bl	800028c <__adddf3>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e36c:	f7f2 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 800e370:	2800      	cmp	r0, #0
 800e372:	d174      	bne.n	800e45e <_dtoa_r+0x69e>
 800e374:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e378:	2000      	movs	r0, #0
 800e37a:	4914      	ldr	r1, [pc, #80]	; (800e3cc <_dtoa_r+0x60c>)
 800e37c:	f7f1 ff84 	bl	8000288 <__aeabi_dsub>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e388:	f7f2 fba8 	bl	8000adc <__aeabi_dcmplt>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	f43f af30 	beq.w	800e1f2 <_dtoa_r+0x432>
 800e392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e396:	2b30      	cmp	r3, #48	; 0x30
 800e398:	f105 32ff 	add.w	r2, r5, #4294967295
 800e39c:	d002      	beq.n	800e3a4 <_dtoa_r+0x5e4>
 800e39e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e3a2:	e04a      	b.n	800e43a <_dtoa_r+0x67a>
 800e3a4:	4615      	mov	r5, r2
 800e3a6:	e7f4      	b.n	800e392 <_dtoa_r+0x5d2>
 800e3a8:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <_dtoa_r+0x600>)
 800e3aa:	f7f2 f925 	bl	80005f8 <__aeabi_dmul>
 800e3ae:	e9cd 0100 	strd	r0, r1, [sp]
 800e3b2:	e7bc      	b.n	800e32e <_dtoa_r+0x56e>
 800e3b4:	08010838 	.word	0x08010838
 800e3b8:	08010810 	.word	0x08010810
 800e3bc:	3ff00000 	.word	0x3ff00000
 800e3c0:	40240000 	.word	0x40240000
 800e3c4:	401c0000 	.word	0x401c0000
 800e3c8:	40140000 	.word	0x40140000
 800e3cc:	3fe00000 	.word	0x3fe00000
 800e3d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3d4:	465d      	mov	r5, fp
 800e3d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	f7f2 fa35 	bl	800084c <__aeabi_ddiv>
 800e3e2:	f7f2 fbb9 	bl	8000b58 <__aeabi_d2iz>
 800e3e6:	4680      	mov	r8, r0
 800e3e8:	f7f2 f89c 	bl	8000524 <__aeabi_i2d>
 800e3ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3f0:	f7f2 f902 	bl	80005f8 <__aeabi_dmul>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e400:	f7f1 ff42 	bl	8000288 <__aeabi_dsub>
 800e404:	f805 6b01 	strb.w	r6, [r5], #1
 800e408:	eba5 060b 	sub.w	r6, r5, fp
 800e40c:	45b1      	cmp	r9, r6
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	d139      	bne.n	800e488 <_dtoa_r+0x6c8>
 800e414:	f7f1 ff3a 	bl	800028c <__adddf3>
 800e418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	f7f2 fb7a 	bl	8000b18 <__aeabi_dcmpgt>
 800e424:	b9c8      	cbnz	r0, 800e45a <_dtoa_r+0x69a>
 800e426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e42a:	4630      	mov	r0, r6
 800e42c:	4639      	mov	r1, r7
 800e42e:	f7f2 fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e432:	b110      	cbz	r0, 800e43a <_dtoa_r+0x67a>
 800e434:	f018 0f01 	tst.w	r8, #1
 800e438:	d10f      	bne.n	800e45a <_dtoa_r+0x69a>
 800e43a:	9904      	ldr	r1, [sp, #16]
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 ffdd 	bl	800f3fc <_Bfree>
 800e442:	2300      	movs	r3, #0
 800e444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e446:	702b      	strb	r3, [r5, #0]
 800e448:	f10a 0301 	add.w	r3, sl, #1
 800e44c:	6013      	str	r3, [r2, #0]
 800e44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e450:	2b00      	cmp	r3, #0
 800e452:	f000 8241 	beq.w	800e8d8 <_dtoa_r+0xb18>
 800e456:	601d      	str	r5, [r3, #0]
 800e458:	e23e      	b.n	800e8d8 <_dtoa_r+0xb18>
 800e45a:	f8cd a020 	str.w	sl, [sp, #32]
 800e45e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e462:	2a39      	cmp	r2, #57	; 0x39
 800e464:	f105 33ff 	add.w	r3, r5, #4294967295
 800e468:	d108      	bne.n	800e47c <_dtoa_r+0x6bc>
 800e46a:	459b      	cmp	fp, r3
 800e46c:	d10a      	bne.n	800e484 <_dtoa_r+0x6c4>
 800e46e:	9b08      	ldr	r3, [sp, #32]
 800e470:	3301      	adds	r3, #1
 800e472:	9308      	str	r3, [sp, #32]
 800e474:	2330      	movs	r3, #48	; 0x30
 800e476:	f88b 3000 	strb.w	r3, [fp]
 800e47a:	465b      	mov	r3, fp
 800e47c:	781a      	ldrb	r2, [r3, #0]
 800e47e:	3201      	adds	r2, #1
 800e480:	701a      	strb	r2, [r3, #0]
 800e482:	e78c      	b.n	800e39e <_dtoa_r+0x5de>
 800e484:	461d      	mov	r5, r3
 800e486:	e7ea      	b.n	800e45e <_dtoa_r+0x69e>
 800e488:	2200      	movs	r2, #0
 800e48a:	4b9b      	ldr	r3, [pc, #620]	; (800e6f8 <_dtoa_r+0x938>)
 800e48c:	f7f2 f8b4 	bl	80005f8 <__aeabi_dmul>
 800e490:	2200      	movs	r2, #0
 800e492:	2300      	movs	r3, #0
 800e494:	4606      	mov	r6, r0
 800e496:	460f      	mov	r7, r1
 800e498:	f7f2 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d09a      	beq.n	800e3d6 <_dtoa_r+0x616>
 800e4a0:	e7cb      	b.n	800e43a <_dtoa_r+0x67a>
 800e4a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	f000 808b 	beq.w	800e5c0 <_dtoa_r+0x800>
 800e4aa:	9a06      	ldr	r2, [sp, #24]
 800e4ac:	2a01      	cmp	r2, #1
 800e4ae:	dc6e      	bgt.n	800e58e <_dtoa_r+0x7ce>
 800e4b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	d067      	beq.n	800e586 <_dtoa_r+0x7c6>
 800e4b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4ba:	9f07      	ldr	r7, [sp, #28]
 800e4bc:	9d05      	ldr	r5, [sp, #20]
 800e4be:	9a05      	ldr	r2, [sp, #20]
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	441a      	add	r2, r3
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	9205      	str	r2, [sp, #20]
 800e4c8:	4498      	add	r8, r3
 800e4ca:	f001 f875 	bl	800f5b8 <__i2b>
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	dd0c      	ble.n	800e4ee <_dtoa_r+0x72e>
 800e4d4:	f1b8 0f00 	cmp.w	r8, #0
 800e4d8:	dd09      	ble.n	800e4ee <_dtoa_r+0x72e>
 800e4da:	4545      	cmp	r5, r8
 800e4dc:	9a05      	ldr	r2, [sp, #20]
 800e4de:	462b      	mov	r3, r5
 800e4e0:	bfa8      	it	ge
 800e4e2:	4643      	movge	r3, r8
 800e4e4:	1ad2      	subs	r2, r2, r3
 800e4e6:	9205      	str	r2, [sp, #20]
 800e4e8:	1aed      	subs	r5, r5, r3
 800e4ea:	eba8 0803 	sub.w	r8, r8, r3
 800e4ee:	9b07      	ldr	r3, [sp, #28]
 800e4f0:	b1eb      	cbz	r3, 800e52e <_dtoa_r+0x76e>
 800e4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d067      	beq.n	800e5c8 <_dtoa_r+0x808>
 800e4f8:	b18f      	cbz	r7, 800e51e <_dtoa_r+0x75e>
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	463a      	mov	r2, r7
 800e4fe:	4620      	mov	r0, r4
 800e500:	f001 f8fa 	bl	800f6f8 <__pow5mult>
 800e504:	9a04      	ldr	r2, [sp, #16]
 800e506:	4601      	mov	r1, r0
 800e508:	4606      	mov	r6, r0
 800e50a:	4620      	mov	r0, r4
 800e50c:	f001 f85d 	bl	800f5ca <__multiply>
 800e510:	9904      	ldr	r1, [sp, #16]
 800e512:	9008      	str	r0, [sp, #32]
 800e514:	4620      	mov	r0, r4
 800e516:	f000 ff71 	bl	800f3fc <_Bfree>
 800e51a:	9b08      	ldr	r3, [sp, #32]
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	9b07      	ldr	r3, [sp, #28]
 800e520:	1bda      	subs	r2, r3, r7
 800e522:	d004      	beq.n	800e52e <_dtoa_r+0x76e>
 800e524:	9904      	ldr	r1, [sp, #16]
 800e526:	4620      	mov	r0, r4
 800e528:	f001 f8e6 	bl	800f6f8 <__pow5mult>
 800e52c:	9004      	str	r0, [sp, #16]
 800e52e:	2101      	movs	r1, #1
 800e530:	4620      	mov	r0, r4
 800e532:	f001 f841 	bl	800f5b8 <__i2b>
 800e536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e538:	4607      	mov	r7, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 81d0 	beq.w	800e8e0 <_dtoa_r+0xb20>
 800e540:	461a      	mov	r2, r3
 800e542:	4601      	mov	r1, r0
 800e544:	4620      	mov	r0, r4
 800e546:	f001 f8d7 	bl	800f6f8 <__pow5mult>
 800e54a:	9b06      	ldr	r3, [sp, #24]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	4607      	mov	r7, r0
 800e550:	dc40      	bgt.n	800e5d4 <_dtoa_r+0x814>
 800e552:	9b00      	ldr	r3, [sp, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d139      	bne.n	800e5cc <_dtoa_r+0x80c>
 800e558:	9b01      	ldr	r3, [sp, #4]
 800e55a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d136      	bne.n	800e5d0 <_dtoa_r+0x810>
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e568:	0d1b      	lsrs	r3, r3, #20
 800e56a:	051b      	lsls	r3, r3, #20
 800e56c:	b12b      	cbz	r3, 800e57a <_dtoa_r+0x7ba>
 800e56e:	9b05      	ldr	r3, [sp, #20]
 800e570:	3301      	adds	r3, #1
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	f108 0801 	add.w	r8, r8, #1
 800e578:	2301      	movs	r3, #1
 800e57a:	9307      	str	r3, [sp, #28]
 800e57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d12a      	bne.n	800e5d8 <_dtoa_r+0x818>
 800e582:	2001      	movs	r0, #1
 800e584:	e030      	b.n	800e5e8 <_dtoa_r+0x828>
 800e586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e588:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e58c:	e795      	b.n	800e4ba <_dtoa_r+0x6fa>
 800e58e:	9b07      	ldr	r3, [sp, #28]
 800e590:	f109 37ff 	add.w	r7, r9, #4294967295
 800e594:	42bb      	cmp	r3, r7
 800e596:	bfbf      	itttt	lt
 800e598:	9b07      	ldrlt	r3, [sp, #28]
 800e59a:	9707      	strlt	r7, [sp, #28]
 800e59c:	1afa      	sublt	r2, r7, r3
 800e59e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e5a0:	bfbb      	ittet	lt
 800e5a2:	189b      	addlt	r3, r3, r2
 800e5a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e5a6:	1bdf      	subge	r7, r3, r7
 800e5a8:	2700      	movlt	r7, #0
 800e5aa:	f1b9 0f00 	cmp.w	r9, #0
 800e5ae:	bfb5      	itete	lt
 800e5b0:	9b05      	ldrlt	r3, [sp, #20]
 800e5b2:	9d05      	ldrge	r5, [sp, #20]
 800e5b4:	eba3 0509 	sublt.w	r5, r3, r9
 800e5b8:	464b      	movge	r3, r9
 800e5ba:	bfb8      	it	lt
 800e5bc:	2300      	movlt	r3, #0
 800e5be:	e77e      	b.n	800e4be <_dtoa_r+0x6fe>
 800e5c0:	9f07      	ldr	r7, [sp, #28]
 800e5c2:	9d05      	ldr	r5, [sp, #20]
 800e5c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e5c6:	e783      	b.n	800e4d0 <_dtoa_r+0x710>
 800e5c8:	9a07      	ldr	r2, [sp, #28]
 800e5ca:	e7ab      	b.n	800e524 <_dtoa_r+0x764>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e7d4      	b.n	800e57a <_dtoa_r+0x7ba>
 800e5d0:	9b00      	ldr	r3, [sp, #0]
 800e5d2:	e7d2      	b.n	800e57a <_dtoa_r+0x7ba>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	9307      	str	r3, [sp, #28]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e5de:	6918      	ldr	r0, [r3, #16]
 800e5e0:	f000 ff9c 	bl	800f51c <__hi0bits>
 800e5e4:	f1c0 0020 	rsb	r0, r0, #32
 800e5e8:	4440      	add	r0, r8
 800e5ea:	f010 001f 	ands.w	r0, r0, #31
 800e5ee:	d047      	beq.n	800e680 <_dtoa_r+0x8c0>
 800e5f0:	f1c0 0320 	rsb	r3, r0, #32
 800e5f4:	2b04      	cmp	r3, #4
 800e5f6:	dd3b      	ble.n	800e670 <_dtoa_r+0x8b0>
 800e5f8:	9b05      	ldr	r3, [sp, #20]
 800e5fa:	f1c0 001c 	rsb	r0, r0, #28
 800e5fe:	4403      	add	r3, r0
 800e600:	9305      	str	r3, [sp, #20]
 800e602:	4405      	add	r5, r0
 800e604:	4480      	add	r8, r0
 800e606:	9b05      	ldr	r3, [sp, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dd05      	ble.n	800e618 <_dtoa_r+0x858>
 800e60c:	461a      	mov	r2, r3
 800e60e:	9904      	ldr	r1, [sp, #16]
 800e610:	4620      	mov	r0, r4
 800e612:	f001 f8bf 	bl	800f794 <__lshift>
 800e616:	9004      	str	r0, [sp, #16]
 800e618:	f1b8 0f00 	cmp.w	r8, #0
 800e61c:	dd05      	ble.n	800e62a <_dtoa_r+0x86a>
 800e61e:	4639      	mov	r1, r7
 800e620:	4642      	mov	r2, r8
 800e622:	4620      	mov	r0, r4
 800e624:	f001 f8b6 	bl	800f794 <__lshift>
 800e628:	4607      	mov	r7, r0
 800e62a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e62c:	b353      	cbz	r3, 800e684 <_dtoa_r+0x8c4>
 800e62e:	4639      	mov	r1, r7
 800e630:	9804      	ldr	r0, [sp, #16]
 800e632:	f001 f903 	bl	800f83c <__mcmp>
 800e636:	2800      	cmp	r0, #0
 800e638:	da24      	bge.n	800e684 <_dtoa_r+0x8c4>
 800e63a:	2300      	movs	r3, #0
 800e63c:	220a      	movs	r2, #10
 800e63e:	9904      	ldr	r1, [sp, #16]
 800e640:	4620      	mov	r0, r4
 800e642:	f000 fef2 	bl	800f42a <__multadd>
 800e646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e648:	9004      	str	r0, [sp, #16]
 800e64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 814d 	beq.w	800e8ee <_dtoa_r+0xb2e>
 800e654:	2300      	movs	r3, #0
 800e656:	4631      	mov	r1, r6
 800e658:	220a      	movs	r2, #10
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fee5 	bl	800f42a <__multadd>
 800e660:	9b02      	ldr	r3, [sp, #8]
 800e662:	2b00      	cmp	r3, #0
 800e664:	4606      	mov	r6, r0
 800e666:	dc4f      	bgt.n	800e708 <_dtoa_r+0x948>
 800e668:	9b06      	ldr	r3, [sp, #24]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	dd4c      	ble.n	800e708 <_dtoa_r+0x948>
 800e66e:	e011      	b.n	800e694 <_dtoa_r+0x8d4>
 800e670:	d0c9      	beq.n	800e606 <_dtoa_r+0x846>
 800e672:	9a05      	ldr	r2, [sp, #20]
 800e674:	331c      	adds	r3, #28
 800e676:	441a      	add	r2, r3
 800e678:	9205      	str	r2, [sp, #20]
 800e67a:	441d      	add	r5, r3
 800e67c:	4498      	add	r8, r3
 800e67e:	e7c2      	b.n	800e606 <_dtoa_r+0x846>
 800e680:	4603      	mov	r3, r0
 800e682:	e7f6      	b.n	800e672 <_dtoa_r+0x8b2>
 800e684:	f1b9 0f00 	cmp.w	r9, #0
 800e688:	dc38      	bgt.n	800e6fc <_dtoa_r+0x93c>
 800e68a:	9b06      	ldr	r3, [sp, #24]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	dd35      	ble.n	800e6fc <_dtoa_r+0x93c>
 800e690:	f8cd 9008 	str.w	r9, [sp, #8]
 800e694:	9b02      	ldr	r3, [sp, #8]
 800e696:	b963      	cbnz	r3, 800e6b2 <_dtoa_r+0x8f2>
 800e698:	4639      	mov	r1, r7
 800e69a:	2205      	movs	r2, #5
 800e69c:	4620      	mov	r0, r4
 800e69e:	f000 fec4 	bl	800f42a <__multadd>
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	4607      	mov	r7, r0
 800e6a6:	9804      	ldr	r0, [sp, #16]
 800e6a8:	f001 f8c8 	bl	800f83c <__mcmp>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f73f adcc 	bgt.w	800e24a <_dtoa_r+0x48a>
 800e6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6b4:	465d      	mov	r5, fp
 800e6b6:	ea6f 0a03 	mvn.w	sl, r3
 800e6ba:	f04f 0900 	mov.w	r9, #0
 800e6be:	4639      	mov	r1, r7
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 fe9b 	bl	800f3fc <_Bfree>
 800e6c6:	2e00      	cmp	r6, #0
 800e6c8:	f43f aeb7 	beq.w	800e43a <_dtoa_r+0x67a>
 800e6cc:	f1b9 0f00 	cmp.w	r9, #0
 800e6d0:	d005      	beq.n	800e6de <_dtoa_r+0x91e>
 800e6d2:	45b1      	cmp	r9, r6
 800e6d4:	d003      	beq.n	800e6de <_dtoa_r+0x91e>
 800e6d6:	4649      	mov	r1, r9
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f000 fe8f 	bl	800f3fc <_Bfree>
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f000 fe8b 	bl	800f3fc <_Bfree>
 800e6e6:	e6a8      	b.n	800e43a <_dtoa_r+0x67a>
 800e6e8:	2700      	movs	r7, #0
 800e6ea:	463e      	mov	r6, r7
 800e6ec:	e7e1      	b.n	800e6b2 <_dtoa_r+0x8f2>
 800e6ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e6f2:	463e      	mov	r6, r7
 800e6f4:	e5a9      	b.n	800e24a <_dtoa_r+0x48a>
 800e6f6:	bf00      	nop
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	f000 80fa 	beq.w	800e8fc <_dtoa_r+0xb3c>
 800e708:	2d00      	cmp	r5, #0
 800e70a:	dd05      	ble.n	800e718 <_dtoa_r+0x958>
 800e70c:	4631      	mov	r1, r6
 800e70e:	462a      	mov	r2, r5
 800e710:	4620      	mov	r0, r4
 800e712:	f001 f83f 	bl	800f794 <__lshift>
 800e716:	4606      	mov	r6, r0
 800e718:	9b07      	ldr	r3, [sp, #28]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d04c      	beq.n	800e7b8 <_dtoa_r+0x9f8>
 800e71e:	6871      	ldr	r1, [r6, #4]
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fe37 	bl	800f394 <_Balloc>
 800e726:	6932      	ldr	r2, [r6, #16]
 800e728:	3202      	adds	r2, #2
 800e72a:	4605      	mov	r5, r0
 800e72c:	0092      	lsls	r2, r2, #2
 800e72e:	f106 010c 	add.w	r1, r6, #12
 800e732:	300c      	adds	r0, #12
 800e734:	f7fd fc54 	bl	800bfe0 <memcpy>
 800e738:	2201      	movs	r2, #1
 800e73a:	4629      	mov	r1, r5
 800e73c:	4620      	mov	r0, r4
 800e73e:	f001 f829 	bl	800f794 <__lshift>
 800e742:	9b00      	ldr	r3, [sp, #0]
 800e744:	f8cd b014 	str.w	fp, [sp, #20]
 800e748:	f003 0301 	and.w	r3, r3, #1
 800e74c:	46b1      	mov	r9, r6
 800e74e:	9307      	str	r3, [sp, #28]
 800e750:	4606      	mov	r6, r0
 800e752:	4639      	mov	r1, r7
 800e754:	9804      	ldr	r0, [sp, #16]
 800e756:	f7ff faa5 	bl	800dca4 <quorem>
 800e75a:	4649      	mov	r1, r9
 800e75c:	4605      	mov	r5, r0
 800e75e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e762:	9804      	ldr	r0, [sp, #16]
 800e764:	f001 f86a 	bl	800f83c <__mcmp>
 800e768:	4632      	mov	r2, r6
 800e76a:	9000      	str	r0, [sp, #0]
 800e76c:	4639      	mov	r1, r7
 800e76e:	4620      	mov	r0, r4
 800e770:	f001 f87e 	bl	800f870 <__mdiff>
 800e774:	68c3      	ldr	r3, [r0, #12]
 800e776:	4602      	mov	r2, r0
 800e778:	bb03      	cbnz	r3, 800e7bc <_dtoa_r+0x9fc>
 800e77a:	4601      	mov	r1, r0
 800e77c:	9008      	str	r0, [sp, #32]
 800e77e:	9804      	ldr	r0, [sp, #16]
 800e780:	f001 f85c 	bl	800f83c <__mcmp>
 800e784:	9a08      	ldr	r2, [sp, #32]
 800e786:	4603      	mov	r3, r0
 800e788:	4611      	mov	r1, r2
 800e78a:	4620      	mov	r0, r4
 800e78c:	9308      	str	r3, [sp, #32]
 800e78e:	f000 fe35 	bl	800f3fc <_Bfree>
 800e792:	9b08      	ldr	r3, [sp, #32]
 800e794:	b9a3      	cbnz	r3, 800e7c0 <_dtoa_r+0xa00>
 800e796:	9a06      	ldr	r2, [sp, #24]
 800e798:	b992      	cbnz	r2, 800e7c0 <_dtoa_r+0xa00>
 800e79a:	9a07      	ldr	r2, [sp, #28]
 800e79c:	b982      	cbnz	r2, 800e7c0 <_dtoa_r+0xa00>
 800e79e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e7a2:	d029      	beq.n	800e7f8 <_dtoa_r+0xa38>
 800e7a4:	9b00      	ldr	r3, [sp, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	dd01      	ble.n	800e7ae <_dtoa_r+0x9ee>
 800e7aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e7ae:	9b05      	ldr	r3, [sp, #20]
 800e7b0:	1c5d      	adds	r5, r3, #1
 800e7b2:	f883 8000 	strb.w	r8, [r3]
 800e7b6:	e782      	b.n	800e6be <_dtoa_r+0x8fe>
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	e7c2      	b.n	800e742 <_dtoa_r+0x982>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e7e3      	b.n	800e788 <_dtoa_r+0x9c8>
 800e7c0:	9a00      	ldr	r2, [sp, #0]
 800e7c2:	2a00      	cmp	r2, #0
 800e7c4:	db04      	blt.n	800e7d0 <_dtoa_r+0xa10>
 800e7c6:	d125      	bne.n	800e814 <_dtoa_r+0xa54>
 800e7c8:	9a06      	ldr	r2, [sp, #24]
 800e7ca:	bb1a      	cbnz	r2, 800e814 <_dtoa_r+0xa54>
 800e7cc:	9a07      	ldr	r2, [sp, #28]
 800e7ce:	bb0a      	cbnz	r2, 800e814 <_dtoa_r+0xa54>
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	ddec      	ble.n	800e7ae <_dtoa_r+0x9ee>
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	9904      	ldr	r1, [sp, #16]
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 ffdb 	bl	800f794 <__lshift>
 800e7de:	4639      	mov	r1, r7
 800e7e0:	9004      	str	r0, [sp, #16]
 800e7e2:	f001 f82b 	bl	800f83c <__mcmp>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	dc03      	bgt.n	800e7f2 <_dtoa_r+0xa32>
 800e7ea:	d1e0      	bne.n	800e7ae <_dtoa_r+0x9ee>
 800e7ec:	f018 0f01 	tst.w	r8, #1
 800e7f0:	d0dd      	beq.n	800e7ae <_dtoa_r+0x9ee>
 800e7f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e7f6:	d1d8      	bne.n	800e7aa <_dtoa_r+0x9ea>
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	9a05      	ldr	r2, [sp, #20]
 800e7fc:	1c5d      	adds	r5, r3, #1
 800e7fe:	2339      	movs	r3, #57	; 0x39
 800e800:	7013      	strb	r3, [r2, #0]
 800e802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e806:	2b39      	cmp	r3, #57	; 0x39
 800e808:	f105 32ff 	add.w	r2, r5, #4294967295
 800e80c:	d04f      	beq.n	800e8ae <_dtoa_r+0xaee>
 800e80e:	3301      	adds	r3, #1
 800e810:	7013      	strb	r3, [r2, #0]
 800e812:	e754      	b.n	800e6be <_dtoa_r+0x8fe>
 800e814:	9a05      	ldr	r2, [sp, #20]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f102 0501 	add.w	r5, r2, #1
 800e81c:	dd06      	ble.n	800e82c <_dtoa_r+0xa6c>
 800e81e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e822:	d0e9      	beq.n	800e7f8 <_dtoa_r+0xa38>
 800e824:	f108 0801 	add.w	r8, r8, #1
 800e828:	9b05      	ldr	r3, [sp, #20]
 800e82a:	e7c2      	b.n	800e7b2 <_dtoa_r+0x9f2>
 800e82c:	9a02      	ldr	r2, [sp, #8]
 800e82e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e832:	eba5 030b 	sub.w	r3, r5, fp
 800e836:	4293      	cmp	r3, r2
 800e838:	d021      	beq.n	800e87e <_dtoa_r+0xabe>
 800e83a:	2300      	movs	r3, #0
 800e83c:	220a      	movs	r2, #10
 800e83e:	9904      	ldr	r1, [sp, #16]
 800e840:	4620      	mov	r0, r4
 800e842:	f000 fdf2 	bl	800f42a <__multadd>
 800e846:	45b1      	cmp	r9, r6
 800e848:	9004      	str	r0, [sp, #16]
 800e84a:	f04f 0300 	mov.w	r3, #0
 800e84e:	f04f 020a 	mov.w	r2, #10
 800e852:	4649      	mov	r1, r9
 800e854:	4620      	mov	r0, r4
 800e856:	d105      	bne.n	800e864 <_dtoa_r+0xaa4>
 800e858:	f000 fde7 	bl	800f42a <__multadd>
 800e85c:	4681      	mov	r9, r0
 800e85e:	4606      	mov	r6, r0
 800e860:	9505      	str	r5, [sp, #20]
 800e862:	e776      	b.n	800e752 <_dtoa_r+0x992>
 800e864:	f000 fde1 	bl	800f42a <__multadd>
 800e868:	4631      	mov	r1, r6
 800e86a:	4681      	mov	r9, r0
 800e86c:	2300      	movs	r3, #0
 800e86e:	220a      	movs	r2, #10
 800e870:	4620      	mov	r0, r4
 800e872:	f000 fdda 	bl	800f42a <__multadd>
 800e876:	4606      	mov	r6, r0
 800e878:	e7f2      	b.n	800e860 <_dtoa_r+0xaa0>
 800e87a:	f04f 0900 	mov.w	r9, #0
 800e87e:	2201      	movs	r2, #1
 800e880:	9904      	ldr	r1, [sp, #16]
 800e882:	4620      	mov	r0, r4
 800e884:	f000 ff86 	bl	800f794 <__lshift>
 800e888:	4639      	mov	r1, r7
 800e88a:	9004      	str	r0, [sp, #16]
 800e88c:	f000 ffd6 	bl	800f83c <__mcmp>
 800e890:	2800      	cmp	r0, #0
 800e892:	dcb6      	bgt.n	800e802 <_dtoa_r+0xa42>
 800e894:	d102      	bne.n	800e89c <_dtoa_r+0xadc>
 800e896:	f018 0f01 	tst.w	r8, #1
 800e89a:	d1b2      	bne.n	800e802 <_dtoa_r+0xa42>
 800e89c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8a0:	2b30      	cmp	r3, #48	; 0x30
 800e8a2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e8a6:	f47f af0a 	bne.w	800e6be <_dtoa_r+0x8fe>
 800e8aa:	4615      	mov	r5, r2
 800e8ac:	e7f6      	b.n	800e89c <_dtoa_r+0xadc>
 800e8ae:	4593      	cmp	fp, r2
 800e8b0:	d105      	bne.n	800e8be <_dtoa_r+0xafe>
 800e8b2:	2331      	movs	r3, #49	; 0x31
 800e8b4:	f10a 0a01 	add.w	sl, sl, #1
 800e8b8:	f88b 3000 	strb.w	r3, [fp]
 800e8bc:	e6ff      	b.n	800e6be <_dtoa_r+0x8fe>
 800e8be:	4615      	mov	r5, r2
 800e8c0:	e79f      	b.n	800e802 <_dtoa_r+0xa42>
 800e8c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e928 <_dtoa_r+0xb68>
 800e8c6:	e007      	b.n	800e8d8 <_dtoa_r+0xb18>
 800e8c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e92c <_dtoa_r+0xb6c>
 800e8ce:	b11b      	cbz	r3, 800e8d8 <_dtoa_r+0xb18>
 800e8d0:	f10b 0308 	add.w	r3, fp, #8
 800e8d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8d6:	6013      	str	r3, [r2, #0]
 800e8d8:	4658      	mov	r0, fp
 800e8da:	b017      	add	sp, #92	; 0x5c
 800e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e0:	9b06      	ldr	r3, [sp, #24]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	f77f ae35 	ble.w	800e552 <_dtoa_r+0x792>
 800e8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8ea:	9307      	str	r3, [sp, #28]
 800e8ec:	e649      	b.n	800e582 <_dtoa_r+0x7c2>
 800e8ee:	9b02      	ldr	r3, [sp, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dc03      	bgt.n	800e8fc <_dtoa_r+0xb3c>
 800e8f4:	9b06      	ldr	r3, [sp, #24]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	f73f aecc 	bgt.w	800e694 <_dtoa_r+0x8d4>
 800e8fc:	465d      	mov	r5, fp
 800e8fe:	4639      	mov	r1, r7
 800e900:	9804      	ldr	r0, [sp, #16]
 800e902:	f7ff f9cf 	bl	800dca4 <quorem>
 800e906:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e90a:	f805 8b01 	strb.w	r8, [r5], #1
 800e90e:	9a02      	ldr	r2, [sp, #8]
 800e910:	eba5 030b 	sub.w	r3, r5, fp
 800e914:	429a      	cmp	r2, r3
 800e916:	ddb0      	ble.n	800e87a <_dtoa_r+0xaba>
 800e918:	2300      	movs	r3, #0
 800e91a:	220a      	movs	r2, #10
 800e91c:	9904      	ldr	r1, [sp, #16]
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 fd83 	bl	800f42a <__multadd>
 800e924:	9004      	str	r0, [sp, #16]
 800e926:	e7ea      	b.n	800e8fe <_dtoa_r+0xb3e>
 800e928:	08010714 	.word	0x08010714
 800e92c:	08010790 	.word	0x08010790

0800e930 <__sflush_r>:
 800e930:	898a      	ldrh	r2, [r1, #12]
 800e932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e936:	4605      	mov	r5, r0
 800e938:	0710      	lsls	r0, r2, #28
 800e93a:	460c      	mov	r4, r1
 800e93c:	d458      	bmi.n	800e9f0 <__sflush_r+0xc0>
 800e93e:	684b      	ldr	r3, [r1, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	dc05      	bgt.n	800e950 <__sflush_r+0x20>
 800e944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e946:	2b00      	cmp	r3, #0
 800e948:	dc02      	bgt.n	800e950 <__sflush_r+0x20>
 800e94a:	2000      	movs	r0, #0
 800e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e952:	2e00      	cmp	r6, #0
 800e954:	d0f9      	beq.n	800e94a <__sflush_r+0x1a>
 800e956:	2300      	movs	r3, #0
 800e958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e95c:	682f      	ldr	r7, [r5, #0]
 800e95e:	6a21      	ldr	r1, [r4, #32]
 800e960:	602b      	str	r3, [r5, #0]
 800e962:	d032      	beq.n	800e9ca <__sflush_r+0x9a>
 800e964:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	075a      	lsls	r2, r3, #29
 800e96a:	d505      	bpl.n	800e978 <__sflush_r+0x48>
 800e96c:	6863      	ldr	r3, [r4, #4]
 800e96e:	1ac0      	subs	r0, r0, r3
 800e970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e972:	b10b      	cbz	r3, 800e978 <__sflush_r+0x48>
 800e974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e976:	1ac0      	subs	r0, r0, r3
 800e978:	2300      	movs	r3, #0
 800e97a:	4602      	mov	r2, r0
 800e97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e97e:	6a21      	ldr	r1, [r4, #32]
 800e980:	4628      	mov	r0, r5
 800e982:	47b0      	blx	r6
 800e984:	1c43      	adds	r3, r0, #1
 800e986:	89a3      	ldrh	r3, [r4, #12]
 800e988:	d106      	bne.n	800e998 <__sflush_r+0x68>
 800e98a:	6829      	ldr	r1, [r5, #0]
 800e98c:	291d      	cmp	r1, #29
 800e98e:	d848      	bhi.n	800ea22 <__sflush_r+0xf2>
 800e990:	4a29      	ldr	r2, [pc, #164]	; (800ea38 <__sflush_r+0x108>)
 800e992:	40ca      	lsrs	r2, r1
 800e994:	07d6      	lsls	r6, r2, #31
 800e996:	d544      	bpl.n	800ea22 <__sflush_r+0xf2>
 800e998:	2200      	movs	r2, #0
 800e99a:	6062      	str	r2, [r4, #4]
 800e99c:	04d9      	lsls	r1, r3, #19
 800e99e:	6922      	ldr	r2, [r4, #16]
 800e9a0:	6022      	str	r2, [r4, #0]
 800e9a2:	d504      	bpl.n	800e9ae <__sflush_r+0x7e>
 800e9a4:	1c42      	adds	r2, r0, #1
 800e9a6:	d101      	bne.n	800e9ac <__sflush_r+0x7c>
 800e9a8:	682b      	ldr	r3, [r5, #0]
 800e9aa:	b903      	cbnz	r3, 800e9ae <__sflush_r+0x7e>
 800e9ac:	6560      	str	r0, [r4, #84]	; 0x54
 800e9ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9b0:	602f      	str	r7, [r5, #0]
 800e9b2:	2900      	cmp	r1, #0
 800e9b4:	d0c9      	beq.n	800e94a <__sflush_r+0x1a>
 800e9b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9ba:	4299      	cmp	r1, r3
 800e9bc:	d002      	beq.n	800e9c4 <__sflush_r+0x94>
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f001 f8f6 	bl	800fbb0 <_free_r>
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	6360      	str	r0, [r4, #52]	; 0x34
 800e9c8:	e7c0      	b.n	800e94c <__sflush_r+0x1c>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	47b0      	blx	r6
 800e9d0:	1c41      	adds	r1, r0, #1
 800e9d2:	d1c8      	bne.n	800e966 <__sflush_r+0x36>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d0c5      	beq.n	800e966 <__sflush_r+0x36>
 800e9da:	2b1d      	cmp	r3, #29
 800e9dc:	d001      	beq.n	800e9e2 <__sflush_r+0xb2>
 800e9de:	2b16      	cmp	r3, #22
 800e9e0:	d101      	bne.n	800e9e6 <__sflush_r+0xb6>
 800e9e2:	602f      	str	r7, [r5, #0]
 800e9e4:	e7b1      	b.n	800e94a <__sflush_r+0x1a>
 800e9e6:	89a3      	ldrh	r3, [r4, #12]
 800e9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ec:	81a3      	strh	r3, [r4, #12]
 800e9ee:	e7ad      	b.n	800e94c <__sflush_r+0x1c>
 800e9f0:	690f      	ldr	r7, [r1, #16]
 800e9f2:	2f00      	cmp	r7, #0
 800e9f4:	d0a9      	beq.n	800e94a <__sflush_r+0x1a>
 800e9f6:	0793      	lsls	r3, r2, #30
 800e9f8:	680e      	ldr	r6, [r1, #0]
 800e9fa:	bf08      	it	eq
 800e9fc:	694b      	ldreq	r3, [r1, #20]
 800e9fe:	600f      	str	r7, [r1, #0]
 800ea00:	bf18      	it	ne
 800ea02:	2300      	movne	r3, #0
 800ea04:	eba6 0807 	sub.w	r8, r6, r7
 800ea08:	608b      	str	r3, [r1, #8]
 800ea0a:	f1b8 0f00 	cmp.w	r8, #0
 800ea0e:	dd9c      	ble.n	800e94a <__sflush_r+0x1a>
 800ea10:	4643      	mov	r3, r8
 800ea12:	463a      	mov	r2, r7
 800ea14:	6a21      	ldr	r1, [r4, #32]
 800ea16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea18:	4628      	mov	r0, r5
 800ea1a:	47b0      	blx	r6
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	dc06      	bgt.n	800ea2e <__sflush_r+0xfe>
 800ea20:	89a3      	ldrh	r3, [r4, #12]
 800ea22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea26:	81a3      	strh	r3, [r4, #12]
 800ea28:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2c:	e78e      	b.n	800e94c <__sflush_r+0x1c>
 800ea2e:	4407      	add	r7, r0
 800ea30:	eba8 0800 	sub.w	r8, r8, r0
 800ea34:	e7e9      	b.n	800ea0a <__sflush_r+0xda>
 800ea36:	bf00      	nop
 800ea38:	20400001 	.word	0x20400001

0800ea3c <_fflush_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	690b      	ldr	r3, [r1, #16]
 800ea40:	4605      	mov	r5, r0
 800ea42:	460c      	mov	r4, r1
 800ea44:	b1db      	cbz	r3, 800ea7e <_fflush_r+0x42>
 800ea46:	b118      	cbz	r0, 800ea50 <_fflush_r+0x14>
 800ea48:	6983      	ldr	r3, [r0, #24]
 800ea4a:	b90b      	cbnz	r3, 800ea50 <_fflush_r+0x14>
 800ea4c:	f000 f860 	bl	800eb10 <__sinit>
 800ea50:	4b0c      	ldr	r3, [pc, #48]	; (800ea84 <_fflush_r+0x48>)
 800ea52:	429c      	cmp	r4, r3
 800ea54:	d109      	bne.n	800ea6a <_fflush_r+0x2e>
 800ea56:	686c      	ldr	r4, [r5, #4]
 800ea58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea5c:	b17b      	cbz	r3, 800ea7e <_fflush_r+0x42>
 800ea5e:	4621      	mov	r1, r4
 800ea60:	4628      	mov	r0, r5
 800ea62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea66:	f7ff bf63 	b.w	800e930 <__sflush_r>
 800ea6a:	4b07      	ldr	r3, [pc, #28]	; (800ea88 <_fflush_r+0x4c>)
 800ea6c:	429c      	cmp	r4, r3
 800ea6e:	d101      	bne.n	800ea74 <_fflush_r+0x38>
 800ea70:	68ac      	ldr	r4, [r5, #8]
 800ea72:	e7f1      	b.n	800ea58 <_fflush_r+0x1c>
 800ea74:	4b05      	ldr	r3, [pc, #20]	; (800ea8c <_fflush_r+0x50>)
 800ea76:	429c      	cmp	r4, r3
 800ea78:	bf08      	it	eq
 800ea7a:	68ec      	ldreq	r4, [r5, #12]
 800ea7c:	e7ec      	b.n	800ea58 <_fflush_r+0x1c>
 800ea7e:	2000      	movs	r0, #0
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	bf00      	nop
 800ea84:	080107c0 	.word	0x080107c0
 800ea88:	080107e0 	.word	0x080107e0
 800ea8c:	080107a0 	.word	0x080107a0

0800ea90 <std>:
 800ea90:	2300      	movs	r3, #0
 800ea92:	b510      	push	{r4, lr}
 800ea94:	4604      	mov	r4, r0
 800ea96:	e9c0 3300 	strd	r3, r3, [r0]
 800ea9a:	6083      	str	r3, [r0, #8]
 800ea9c:	8181      	strh	r1, [r0, #12]
 800ea9e:	6643      	str	r3, [r0, #100]	; 0x64
 800eaa0:	81c2      	strh	r2, [r0, #14]
 800eaa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaa6:	6183      	str	r3, [r0, #24]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	2208      	movs	r2, #8
 800eaac:	305c      	adds	r0, #92	; 0x5c
 800eaae:	f7fd faa2 	bl	800bff6 <memset>
 800eab2:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <std+0x38>)
 800eab4:	6263      	str	r3, [r4, #36]	; 0x24
 800eab6:	4b05      	ldr	r3, [pc, #20]	; (800eacc <std+0x3c>)
 800eab8:	62a3      	str	r3, [r4, #40]	; 0x28
 800eaba:	4b05      	ldr	r3, [pc, #20]	; (800ead0 <std+0x40>)
 800eabc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eabe:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <std+0x44>)
 800eac0:	6224      	str	r4, [r4, #32]
 800eac2:	6323      	str	r3, [r4, #48]	; 0x30
 800eac4:	bd10      	pop	{r4, pc}
 800eac6:	bf00      	nop
 800eac8:	08010245 	.word	0x08010245
 800eacc:	08010267 	.word	0x08010267
 800ead0:	0801029f 	.word	0x0801029f
 800ead4:	080102c3 	.word	0x080102c3

0800ead8 <_cleanup_r>:
 800ead8:	4901      	ldr	r1, [pc, #4]	; (800eae0 <_cleanup_r+0x8>)
 800eada:	f000 b885 	b.w	800ebe8 <_fwalk_reent>
 800eade:	bf00      	nop
 800eae0:	0800ea3d 	.word	0x0800ea3d

0800eae4 <__sfmoreglue>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	1e4a      	subs	r2, r1, #1
 800eae8:	2568      	movs	r5, #104	; 0x68
 800eaea:	4355      	muls	r5, r2
 800eaec:	460e      	mov	r6, r1
 800eaee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eaf2:	f001 f8ab 	bl	800fc4c <_malloc_r>
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	b140      	cbz	r0, 800eb0c <__sfmoreglue+0x28>
 800eafa:	2100      	movs	r1, #0
 800eafc:	e9c0 1600 	strd	r1, r6, [r0]
 800eb00:	300c      	adds	r0, #12
 800eb02:	60a0      	str	r0, [r4, #8]
 800eb04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb08:	f7fd fa75 	bl	800bff6 <memset>
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}

0800eb10 <__sinit>:
 800eb10:	6983      	ldr	r3, [r0, #24]
 800eb12:	b510      	push	{r4, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	bb33      	cbnz	r3, 800eb66 <__sinit+0x56>
 800eb18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800eb1c:	6503      	str	r3, [r0, #80]	; 0x50
 800eb1e:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <__sinit+0x58>)
 800eb20:	4a12      	ldr	r2, [pc, #72]	; (800eb6c <__sinit+0x5c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	6282      	str	r2, [r0, #40]	; 0x28
 800eb26:	4298      	cmp	r0, r3
 800eb28:	bf04      	itt	eq
 800eb2a:	2301      	moveq	r3, #1
 800eb2c:	6183      	streq	r3, [r0, #24]
 800eb2e:	f000 f81f 	bl	800eb70 <__sfp>
 800eb32:	6060      	str	r0, [r4, #4]
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 f81b 	bl	800eb70 <__sfp>
 800eb3a:	60a0      	str	r0, [r4, #8]
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 f817 	bl	800eb70 <__sfp>
 800eb42:	2200      	movs	r2, #0
 800eb44:	60e0      	str	r0, [r4, #12]
 800eb46:	2104      	movs	r1, #4
 800eb48:	6860      	ldr	r0, [r4, #4]
 800eb4a:	f7ff ffa1 	bl	800ea90 <std>
 800eb4e:	2201      	movs	r2, #1
 800eb50:	2109      	movs	r1, #9
 800eb52:	68a0      	ldr	r0, [r4, #8]
 800eb54:	f7ff ff9c 	bl	800ea90 <std>
 800eb58:	2202      	movs	r2, #2
 800eb5a:	2112      	movs	r1, #18
 800eb5c:	68e0      	ldr	r0, [r4, #12]
 800eb5e:	f7ff ff97 	bl	800ea90 <std>
 800eb62:	2301      	movs	r3, #1
 800eb64:	61a3      	str	r3, [r4, #24]
 800eb66:	bd10      	pop	{r4, pc}
 800eb68:	08010700 	.word	0x08010700
 800eb6c:	0800ead9 	.word	0x0800ead9

0800eb70 <__sfp>:
 800eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb72:	4b1b      	ldr	r3, [pc, #108]	; (800ebe0 <__sfp+0x70>)
 800eb74:	681e      	ldr	r6, [r3, #0]
 800eb76:	69b3      	ldr	r3, [r6, #24]
 800eb78:	4607      	mov	r7, r0
 800eb7a:	b913      	cbnz	r3, 800eb82 <__sfp+0x12>
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7ff ffc7 	bl	800eb10 <__sinit>
 800eb82:	3648      	adds	r6, #72	; 0x48
 800eb84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	d503      	bpl.n	800eb94 <__sfp+0x24>
 800eb8c:	6833      	ldr	r3, [r6, #0]
 800eb8e:	b133      	cbz	r3, 800eb9e <__sfp+0x2e>
 800eb90:	6836      	ldr	r6, [r6, #0]
 800eb92:	e7f7      	b.n	800eb84 <__sfp+0x14>
 800eb94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb98:	b16d      	cbz	r5, 800ebb6 <__sfp+0x46>
 800eb9a:	3468      	adds	r4, #104	; 0x68
 800eb9c:	e7f4      	b.n	800eb88 <__sfp+0x18>
 800eb9e:	2104      	movs	r1, #4
 800eba0:	4638      	mov	r0, r7
 800eba2:	f7ff ff9f 	bl	800eae4 <__sfmoreglue>
 800eba6:	6030      	str	r0, [r6, #0]
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	d1f1      	bne.n	800eb90 <__sfp+0x20>
 800ebac:	230c      	movs	r3, #12
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb6:	4b0b      	ldr	r3, [pc, #44]	; (800ebe4 <__sfp+0x74>)
 800ebb8:	6665      	str	r5, [r4, #100]	; 0x64
 800ebba:	e9c4 5500 	strd	r5, r5, [r4]
 800ebbe:	60a5      	str	r5, [r4, #8]
 800ebc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ebc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ebc8:	2208      	movs	r2, #8
 800ebca:	4629      	mov	r1, r5
 800ebcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebd0:	f7fd fa11 	bl	800bff6 <memset>
 800ebd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ebd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ebdc:	e7e9      	b.n	800ebb2 <__sfp+0x42>
 800ebde:	bf00      	nop
 800ebe0:	08010700 	.word	0x08010700
 800ebe4:	ffff0001 	.word	0xffff0001

0800ebe8 <_fwalk_reent>:
 800ebe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebec:	4680      	mov	r8, r0
 800ebee:	4689      	mov	r9, r1
 800ebf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ebf4:	2600      	movs	r6, #0
 800ebf6:	b914      	cbnz	r4, 800ebfe <_fwalk_reent+0x16>
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebfe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ec02:	3f01      	subs	r7, #1
 800ec04:	d501      	bpl.n	800ec0a <_fwalk_reent+0x22>
 800ec06:	6824      	ldr	r4, [r4, #0]
 800ec08:	e7f5      	b.n	800ebf6 <_fwalk_reent+0xe>
 800ec0a:	89ab      	ldrh	r3, [r5, #12]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d907      	bls.n	800ec20 <_fwalk_reent+0x38>
 800ec10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec14:	3301      	adds	r3, #1
 800ec16:	d003      	beq.n	800ec20 <_fwalk_reent+0x38>
 800ec18:	4629      	mov	r1, r5
 800ec1a:	4640      	mov	r0, r8
 800ec1c:	47c8      	blx	r9
 800ec1e:	4306      	orrs	r6, r0
 800ec20:	3568      	adds	r5, #104	; 0x68
 800ec22:	e7ee      	b.n	800ec02 <_fwalk_reent+0x1a>

0800ec24 <rshift>:
 800ec24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec26:	6906      	ldr	r6, [r0, #16]
 800ec28:	114b      	asrs	r3, r1, #5
 800ec2a:	429e      	cmp	r6, r3
 800ec2c:	f100 0414 	add.w	r4, r0, #20
 800ec30:	dd30      	ble.n	800ec94 <rshift+0x70>
 800ec32:	f011 011f 	ands.w	r1, r1, #31
 800ec36:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ec3a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ec3e:	d108      	bne.n	800ec52 <rshift+0x2e>
 800ec40:	4621      	mov	r1, r4
 800ec42:	42b2      	cmp	r2, r6
 800ec44:	460b      	mov	r3, r1
 800ec46:	d211      	bcs.n	800ec6c <rshift+0x48>
 800ec48:	f852 3b04 	ldr.w	r3, [r2], #4
 800ec4c:	f841 3b04 	str.w	r3, [r1], #4
 800ec50:	e7f7      	b.n	800ec42 <rshift+0x1e>
 800ec52:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ec56:	f1c1 0c20 	rsb	ip, r1, #32
 800ec5a:	40cd      	lsrs	r5, r1
 800ec5c:	3204      	adds	r2, #4
 800ec5e:	4623      	mov	r3, r4
 800ec60:	42b2      	cmp	r2, r6
 800ec62:	4617      	mov	r7, r2
 800ec64:	d30c      	bcc.n	800ec80 <rshift+0x5c>
 800ec66:	601d      	str	r5, [r3, #0]
 800ec68:	b105      	cbz	r5, 800ec6c <rshift+0x48>
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	1b1a      	subs	r2, r3, r4
 800ec6e:	42a3      	cmp	r3, r4
 800ec70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec74:	bf08      	it	eq
 800ec76:	2300      	moveq	r3, #0
 800ec78:	6102      	str	r2, [r0, #16]
 800ec7a:	bf08      	it	eq
 800ec7c:	6143      	streq	r3, [r0, #20]
 800ec7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec80:	683f      	ldr	r7, [r7, #0]
 800ec82:	fa07 f70c 	lsl.w	r7, r7, ip
 800ec86:	433d      	orrs	r5, r7
 800ec88:	f843 5b04 	str.w	r5, [r3], #4
 800ec8c:	f852 5b04 	ldr.w	r5, [r2], #4
 800ec90:	40cd      	lsrs	r5, r1
 800ec92:	e7e5      	b.n	800ec60 <rshift+0x3c>
 800ec94:	4623      	mov	r3, r4
 800ec96:	e7e9      	b.n	800ec6c <rshift+0x48>

0800ec98 <__hexdig_fun>:
 800ec98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ec9c:	2b09      	cmp	r3, #9
 800ec9e:	d802      	bhi.n	800eca6 <__hexdig_fun+0xe>
 800eca0:	3820      	subs	r0, #32
 800eca2:	b2c0      	uxtb	r0, r0
 800eca4:	4770      	bx	lr
 800eca6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ecaa:	2b05      	cmp	r3, #5
 800ecac:	d801      	bhi.n	800ecb2 <__hexdig_fun+0x1a>
 800ecae:	3847      	subs	r0, #71	; 0x47
 800ecb0:	e7f7      	b.n	800eca2 <__hexdig_fun+0xa>
 800ecb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ecb6:	2b05      	cmp	r3, #5
 800ecb8:	d801      	bhi.n	800ecbe <__hexdig_fun+0x26>
 800ecba:	3827      	subs	r0, #39	; 0x27
 800ecbc:	e7f1      	b.n	800eca2 <__hexdig_fun+0xa>
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	4770      	bx	lr

0800ecc2 <__gethex>:
 800ecc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc6:	b08b      	sub	sp, #44	; 0x2c
 800ecc8:	468a      	mov	sl, r1
 800ecca:	9002      	str	r0, [sp, #8]
 800eccc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ecce:	9306      	str	r3, [sp, #24]
 800ecd0:	4690      	mov	r8, r2
 800ecd2:	f000 fad0 	bl	800f276 <__localeconv_l>
 800ecd6:	6803      	ldr	r3, [r0, #0]
 800ecd8:	9303      	str	r3, [sp, #12]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7f1 fa78 	bl	80001d0 <strlen>
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	9001      	str	r0, [sp, #4]
 800ece4:	4403      	add	r3, r0
 800ece6:	f04f 0b00 	mov.w	fp, #0
 800ecea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ecee:	9307      	str	r3, [sp, #28]
 800ecf0:	f8da 3000 	ldr.w	r3, [sl]
 800ecf4:	3302      	adds	r3, #2
 800ecf6:	461f      	mov	r7, r3
 800ecf8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ecfc:	2830      	cmp	r0, #48	; 0x30
 800ecfe:	d06c      	beq.n	800edda <__gethex+0x118>
 800ed00:	f7ff ffca 	bl	800ec98 <__hexdig_fun>
 800ed04:	4604      	mov	r4, r0
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d16a      	bne.n	800ede0 <__gethex+0x11e>
 800ed0a:	9a01      	ldr	r2, [sp, #4]
 800ed0c:	9903      	ldr	r1, [sp, #12]
 800ed0e:	4638      	mov	r0, r7
 800ed10:	f001 fadb 	bl	80102ca <strncmp>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d166      	bne.n	800ede6 <__gethex+0x124>
 800ed18:	9b01      	ldr	r3, [sp, #4]
 800ed1a:	5cf8      	ldrb	r0, [r7, r3]
 800ed1c:	18fe      	adds	r6, r7, r3
 800ed1e:	f7ff ffbb 	bl	800ec98 <__hexdig_fun>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d062      	beq.n	800edec <__gethex+0x12a>
 800ed26:	4633      	mov	r3, r6
 800ed28:	7818      	ldrb	r0, [r3, #0]
 800ed2a:	2830      	cmp	r0, #48	; 0x30
 800ed2c:	461f      	mov	r7, r3
 800ed2e:	f103 0301 	add.w	r3, r3, #1
 800ed32:	d0f9      	beq.n	800ed28 <__gethex+0x66>
 800ed34:	f7ff ffb0 	bl	800ec98 <__hexdig_fun>
 800ed38:	fab0 f580 	clz	r5, r0
 800ed3c:	096d      	lsrs	r5, r5, #5
 800ed3e:	4634      	mov	r4, r6
 800ed40:	f04f 0b01 	mov.w	fp, #1
 800ed44:	463a      	mov	r2, r7
 800ed46:	4616      	mov	r6, r2
 800ed48:	3201      	adds	r2, #1
 800ed4a:	7830      	ldrb	r0, [r6, #0]
 800ed4c:	f7ff ffa4 	bl	800ec98 <__hexdig_fun>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d1f8      	bne.n	800ed46 <__gethex+0x84>
 800ed54:	9a01      	ldr	r2, [sp, #4]
 800ed56:	9903      	ldr	r1, [sp, #12]
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f001 fab6 	bl	80102ca <strncmp>
 800ed5e:	b950      	cbnz	r0, 800ed76 <__gethex+0xb4>
 800ed60:	b954      	cbnz	r4, 800ed78 <__gethex+0xb6>
 800ed62:	9b01      	ldr	r3, [sp, #4]
 800ed64:	18f4      	adds	r4, r6, r3
 800ed66:	4622      	mov	r2, r4
 800ed68:	4616      	mov	r6, r2
 800ed6a:	3201      	adds	r2, #1
 800ed6c:	7830      	ldrb	r0, [r6, #0]
 800ed6e:	f7ff ff93 	bl	800ec98 <__hexdig_fun>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d1f8      	bne.n	800ed68 <__gethex+0xa6>
 800ed76:	b10c      	cbz	r4, 800ed7c <__gethex+0xba>
 800ed78:	1ba4      	subs	r4, r4, r6
 800ed7a:	00a4      	lsls	r4, r4, #2
 800ed7c:	7833      	ldrb	r3, [r6, #0]
 800ed7e:	2b50      	cmp	r3, #80	; 0x50
 800ed80:	d001      	beq.n	800ed86 <__gethex+0xc4>
 800ed82:	2b70      	cmp	r3, #112	; 0x70
 800ed84:	d140      	bne.n	800ee08 <__gethex+0x146>
 800ed86:	7873      	ldrb	r3, [r6, #1]
 800ed88:	2b2b      	cmp	r3, #43	; 0x2b
 800ed8a:	d031      	beq.n	800edf0 <__gethex+0x12e>
 800ed8c:	2b2d      	cmp	r3, #45	; 0x2d
 800ed8e:	d033      	beq.n	800edf8 <__gethex+0x136>
 800ed90:	1c71      	adds	r1, r6, #1
 800ed92:	f04f 0900 	mov.w	r9, #0
 800ed96:	7808      	ldrb	r0, [r1, #0]
 800ed98:	f7ff ff7e 	bl	800ec98 <__hexdig_fun>
 800ed9c:	1e43      	subs	r3, r0, #1
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b18      	cmp	r3, #24
 800eda2:	d831      	bhi.n	800ee08 <__gethex+0x146>
 800eda4:	f1a0 0210 	sub.w	r2, r0, #16
 800eda8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800edac:	f7ff ff74 	bl	800ec98 <__hexdig_fun>
 800edb0:	1e43      	subs	r3, r0, #1
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b18      	cmp	r3, #24
 800edb6:	d922      	bls.n	800edfe <__gethex+0x13c>
 800edb8:	f1b9 0f00 	cmp.w	r9, #0
 800edbc:	d000      	beq.n	800edc0 <__gethex+0xfe>
 800edbe:	4252      	negs	r2, r2
 800edc0:	4414      	add	r4, r2
 800edc2:	f8ca 1000 	str.w	r1, [sl]
 800edc6:	b30d      	cbz	r5, 800ee0c <__gethex+0x14a>
 800edc8:	f1bb 0f00 	cmp.w	fp, #0
 800edcc:	bf0c      	ite	eq
 800edce:	2706      	moveq	r7, #6
 800edd0:	2700      	movne	r7, #0
 800edd2:	4638      	mov	r0, r7
 800edd4:	b00b      	add	sp, #44	; 0x2c
 800edd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edda:	f10b 0b01 	add.w	fp, fp, #1
 800edde:	e78a      	b.n	800ecf6 <__gethex+0x34>
 800ede0:	2500      	movs	r5, #0
 800ede2:	462c      	mov	r4, r5
 800ede4:	e7ae      	b.n	800ed44 <__gethex+0x82>
 800ede6:	463e      	mov	r6, r7
 800ede8:	2501      	movs	r5, #1
 800edea:	e7c7      	b.n	800ed7c <__gethex+0xba>
 800edec:	4604      	mov	r4, r0
 800edee:	e7fb      	b.n	800ede8 <__gethex+0x126>
 800edf0:	f04f 0900 	mov.w	r9, #0
 800edf4:	1cb1      	adds	r1, r6, #2
 800edf6:	e7ce      	b.n	800ed96 <__gethex+0xd4>
 800edf8:	f04f 0901 	mov.w	r9, #1
 800edfc:	e7fa      	b.n	800edf4 <__gethex+0x132>
 800edfe:	230a      	movs	r3, #10
 800ee00:	fb03 0202 	mla	r2, r3, r2, r0
 800ee04:	3a10      	subs	r2, #16
 800ee06:	e7cf      	b.n	800eda8 <__gethex+0xe6>
 800ee08:	4631      	mov	r1, r6
 800ee0a:	e7da      	b.n	800edc2 <__gethex+0x100>
 800ee0c:	1bf3      	subs	r3, r6, r7
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	4629      	mov	r1, r5
 800ee12:	2b07      	cmp	r3, #7
 800ee14:	dc49      	bgt.n	800eeaa <__gethex+0x1e8>
 800ee16:	9802      	ldr	r0, [sp, #8]
 800ee18:	f000 fabc 	bl	800f394 <_Balloc>
 800ee1c:	9b01      	ldr	r3, [sp, #4]
 800ee1e:	f100 0914 	add.w	r9, r0, #20
 800ee22:	f04f 0b00 	mov.w	fp, #0
 800ee26:	f1c3 0301 	rsb	r3, r3, #1
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	f8cd 9010 	str.w	r9, [sp, #16]
 800ee30:	46da      	mov	sl, fp
 800ee32:	9308      	str	r3, [sp, #32]
 800ee34:	42b7      	cmp	r7, r6
 800ee36:	d33b      	bcc.n	800eeb0 <__gethex+0x1ee>
 800ee38:	9804      	ldr	r0, [sp, #16]
 800ee3a:	f840 ab04 	str.w	sl, [r0], #4
 800ee3e:	eba0 0009 	sub.w	r0, r0, r9
 800ee42:	1080      	asrs	r0, r0, #2
 800ee44:	6128      	str	r0, [r5, #16]
 800ee46:	0147      	lsls	r7, r0, #5
 800ee48:	4650      	mov	r0, sl
 800ee4a:	f000 fb67 	bl	800f51c <__hi0bits>
 800ee4e:	f8d8 6000 	ldr.w	r6, [r8]
 800ee52:	1a3f      	subs	r7, r7, r0
 800ee54:	42b7      	cmp	r7, r6
 800ee56:	dd64      	ble.n	800ef22 <__gethex+0x260>
 800ee58:	1bbf      	subs	r7, r7, r6
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f000 fe77 	bl	800fb50 <__any_on>
 800ee62:	4682      	mov	sl, r0
 800ee64:	b178      	cbz	r0, 800ee86 <__gethex+0x1c4>
 800ee66:	1e7b      	subs	r3, r7, #1
 800ee68:	1159      	asrs	r1, r3, #5
 800ee6a:	f003 021f 	and.w	r2, r3, #31
 800ee6e:	f04f 0a01 	mov.w	sl, #1
 800ee72:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ee76:	fa0a f202 	lsl.w	r2, sl, r2
 800ee7a:	420a      	tst	r2, r1
 800ee7c:	d003      	beq.n	800ee86 <__gethex+0x1c4>
 800ee7e:	4553      	cmp	r3, sl
 800ee80:	dc46      	bgt.n	800ef10 <__gethex+0x24e>
 800ee82:	f04f 0a02 	mov.w	sl, #2
 800ee86:	4639      	mov	r1, r7
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f7ff fecb 	bl	800ec24 <rshift>
 800ee8e:	443c      	add	r4, r7
 800ee90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	da52      	bge.n	800ef3e <__gethex+0x27c>
 800ee98:	4629      	mov	r1, r5
 800ee9a:	9802      	ldr	r0, [sp, #8]
 800ee9c:	f000 faae 	bl	800f3fc <_Bfree>
 800eea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eea2:	2300      	movs	r3, #0
 800eea4:	6013      	str	r3, [r2, #0]
 800eea6:	27a3      	movs	r7, #163	; 0xa3
 800eea8:	e793      	b.n	800edd2 <__gethex+0x110>
 800eeaa:	3101      	adds	r1, #1
 800eeac:	105b      	asrs	r3, r3, #1
 800eeae:	e7b0      	b.n	800ee12 <__gethex+0x150>
 800eeb0:	1e73      	subs	r3, r6, #1
 800eeb2:	9305      	str	r3, [sp, #20]
 800eeb4:	9a07      	ldr	r2, [sp, #28]
 800eeb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d018      	beq.n	800eef0 <__gethex+0x22e>
 800eebe:	f1bb 0f20 	cmp.w	fp, #32
 800eec2:	d107      	bne.n	800eed4 <__gethex+0x212>
 800eec4:	9b04      	ldr	r3, [sp, #16]
 800eec6:	f8c3 a000 	str.w	sl, [r3]
 800eeca:	3304      	adds	r3, #4
 800eecc:	f04f 0a00 	mov.w	sl, #0
 800eed0:	9304      	str	r3, [sp, #16]
 800eed2:	46d3      	mov	fp, sl
 800eed4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eed8:	f7ff fede 	bl	800ec98 <__hexdig_fun>
 800eedc:	f000 000f 	and.w	r0, r0, #15
 800eee0:	fa00 f00b 	lsl.w	r0, r0, fp
 800eee4:	ea4a 0a00 	orr.w	sl, sl, r0
 800eee8:	f10b 0b04 	add.w	fp, fp, #4
 800eeec:	9b05      	ldr	r3, [sp, #20]
 800eeee:	e00d      	b.n	800ef0c <__gethex+0x24a>
 800eef0:	9b05      	ldr	r3, [sp, #20]
 800eef2:	9a08      	ldr	r2, [sp, #32]
 800eef4:	4413      	add	r3, r2
 800eef6:	42bb      	cmp	r3, r7
 800eef8:	d3e1      	bcc.n	800eebe <__gethex+0x1fc>
 800eefa:	4618      	mov	r0, r3
 800eefc:	9a01      	ldr	r2, [sp, #4]
 800eefe:	9903      	ldr	r1, [sp, #12]
 800ef00:	9309      	str	r3, [sp, #36]	; 0x24
 800ef02:	f001 f9e2 	bl	80102ca <strncmp>
 800ef06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d1d8      	bne.n	800eebe <__gethex+0x1fc>
 800ef0c:	461e      	mov	r6, r3
 800ef0e:	e791      	b.n	800ee34 <__gethex+0x172>
 800ef10:	1eb9      	subs	r1, r7, #2
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 fe1c 	bl	800fb50 <__any_on>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d0b2      	beq.n	800ee82 <__gethex+0x1c0>
 800ef1c:	f04f 0a03 	mov.w	sl, #3
 800ef20:	e7b1      	b.n	800ee86 <__gethex+0x1c4>
 800ef22:	da09      	bge.n	800ef38 <__gethex+0x276>
 800ef24:	1bf7      	subs	r7, r6, r7
 800ef26:	4629      	mov	r1, r5
 800ef28:	463a      	mov	r2, r7
 800ef2a:	9802      	ldr	r0, [sp, #8]
 800ef2c:	f000 fc32 	bl	800f794 <__lshift>
 800ef30:	1be4      	subs	r4, r4, r7
 800ef32:	4605      	mov	r5, r0
 800ef34:	f100 0914 	add.w	r9, r0, #20
 800ef38:	f04f 0a00 	mov.w	sl, #0
 800ef3c:	e7a8      	b.n	800ee90 <__gethex+0x1ce>
 800ef3e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ef42:	42a0      	cmp	r0, r4
 800ef44:	dd6a      	ble.n	800f01c <__gethex+0x35a>
 800ef46:	1b04      	subs	r4, r0, r4
 800ef48:	42a6      	cmp	r6, r4
 800ef4a:	dc2e      	bgt.n	800efaa <__gethex+0x2e8>
 800ef4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d022      	beq.n	800ef9a <__gethex+0x2d8>
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d024      	beq.n	800efa2 <__gethex+0x2e0>
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d115      	bne.n	800ef88 <__gethex+0x2c6>
 800ef5c:	42a6      	cmp	r6, r4
 800ef5e:	d113      	bne.n	800ef88 <__gethex+0x2c6>
 800ef60:	2e01      	cmp	r6, #1
 800ef62:	dc0b      	bgt.n	800ef7c <__gethex+0x2ba>
 800ef64:	9a06      	ldr	r2, [sp, #24]
 800ef66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef6a:	6013      	str	r3, [r2, #0]
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	612b      	str	r3, [r5, #16]
 800ef70:	f8c9 3000 	str.w	r3, [r9]
 800ef74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef76:	2762      	movs	r7, #98	; 0x62
 800ef78:	601d      	str	r5, [r3, #0]
 800ef7a:	e72a      	b.n	800edd2 <__gethex+0x110>
 800ef7c:	1e71      	subs	r1, r6, #1
 800ef7e:	4628      	mov	r0, r5
 800ef80:	f000 fde6 	bl	800fb50 <__any_on>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d1ed      	bne.n	800ef64 <__gethex+0x2a2>
 800ef88:	4629      	mov	r1, r5
 800ef8a:	9802      	ldr	r0, [sp, #8]
 800ef8c:	f000 fa36 	bl	800f3fc <_Bfree>
 800ef90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef92:	2300      	movs	r3, #0
 800ef94:	6013      	str	r3, [r2, #0]
 800ef96:	2750      	movs	r7, #80	; 0x50
 800ef98:	e71b      	b.n	800edd2 <__gethex+0x110>
 800ef9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d0e1      	beq.n	800ef64 <__gethex+0x2a2>
 800efa0:	e7f2      	b.n	800ef88 <__gethex+0x2c6>
 800efa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1dd      	bne.n	800ef64 <__gethex+0x2a2>
 800efa8:	e7ee      	b.n	800ef88 <__gethex+0x2c6>
 800efaa:	1e67      	subs	r7, r4, #1
 800efac:	f1ba 0f00 	cmp.w	sl, #0
 800efb0:	d131      	bne.n	800f016 <__gethex+0x354>
 800efb2:	b127      	cbz	r7, 800efbe <__gethex+0x2fc>
 800efb4:	4639      	mov	r1, r7
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 fdca 	bl	800fb50 <__any_on>
 800efbc:	4682      	mov	sl, r0
 800efbe:	117a      	asrs	r2, r7, #5
 800efc0:	2301      	movs	r3, #1
 800efc2:	f007 071f 	and.w	r7, r7, #31
 800efc6:	fa03 f707 	lsl.w	r7, r3, r7
 800efca:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800efce:	4621      	mov	r1, r4
 800efd0:	421f      	tst	r7, r3
 800efd2:	4628      	mov	r0, r5
 800efd4:	bf18      	it	ne
 800efd6:	f04a 0a02 	orrne.w	sl, sl, #2
 800efda:	1b36      	subs	r6, r6, r4
 800efdc:	f7ff fe22 	bl	800ec24 <rshift>
 800efe0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800efe4:	2702      	movs	r7, #2
 800efe6:	f1ba 0f00 	cmp.w	sl, #0
 800efea:	d048      	beq.n	800f07e <__gethex+0x3bc>
 800efec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d015      	beq.n	800f020 <__gethex+0x35e>
 800eff4:	2b03      	cmp	r3, #3
 800eff6:	d017      	beq.n	800f028 <__gethex+0x366>
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d109      	bne.n	800f010 <__gethex+0x34e>
 800effc:	f01a 0f02 	tst.w	sl, #2
 800f000:	d006      	beq.n	800f010 <__gethex+0x34e>
 800f002:	f8d9 3000 	ldr.w	r3, [r9]
 800f006:	ea4a 0a03 	orr.w	sl, sl, r3
 800f00a:	f01a 0f01 	tst.w	sl, #1
 800f00e:	d10e      	bne.n	800f02e <__gethex+0x36c>
 800f010:	f047 0710 	orr.w	r7, r7, #16
 800f014:	e033      	b.n	800f07e <__gethex+0x3bc>
 800f016:	f04f 0a01 	mov.w	sl, #1
 800f01a:	e7d0      	b.n	800efbe <__gethex+0x2fc>
 800f01c:	2701      	movs	r7, #1
 800f01e:	e7e2      	b.n	800efe6 <__gethex+0x324>
 800f020:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f022:	f1c3 0301 	rsb	r3, r3, #1
 800f026:	9315      	str	r3, [sp, #84]	; 0x54
 800f028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d0f0      	beq.n	800f010 <__gethex+0x34e>
 800f02e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f032:	f105 0314 	add.w	r3, r5, #20
 800f036:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f03a:	eb03 010a 	add.w	r1, r3, sl
 800f03e:	f04f 0c00 	mov.w	ip, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f853 2b04 	ldr.w	r2, [r3], #4
 800f048:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f04c:	d01c      	beq.n	800f088 <__gethex+0x3c6>
 800f04e:	3201      	adds	r2, #1
 800f050:	6002      	str	r2, [r0, #0]
 800f052:	2f02      	cmp	r7, #2
 800f054:	f105 0314 	add.w	r3, r5, #20
 800f058:	d138      	bne.n	800f0cc <__gethex+0x40a>
 800f05a:	f8d8 2000 	ldr.w	r2, [r8]
 800f05e:	3a01      	subs	r2, #1
 800f060:	42b2      	cmp	r2, r6
 800f062:	d10a      	bne.n	800f07a <__gethex+0x3b8>
 800f064:	1171      	asrs	r1, r6, #5
 800f066:	2201      	movs	r2, #1
 800f068:	f006 061f 	and.w	r6, r6, #31
 800f06c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f070:	fa02 f606 	lsl.w	r6, r2, r6
 800f074:	421e      	tst	r6, r3
 800f076:	bf18      	it	ne
 800f078:	4617      	movne	r7, r2
 800f07a:	f047 0720 	orr.w	r7, r7, #32
 800f07e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f080:	601d      	str	r5, [r3, #0]
 800f082:	9b06      	ldr	r3, [sp, #24]
 800f084:	601c      	str	r4, [r3, #0]
 800f086:	e6a4      	b.n	800edd2 <__gethex+0x110>
 800f088:	4299      	cmp	r1, r3
 800f08a:	f843 cc04 	str.w	ip, [r3, #-4]
 800f08e:	d8d8      	bhi.n	800f042 <__gethex+0x380>
 800f090:	68ab      	ldr	r3, [r5, #8]
 800f092:	4599      	cmp	r9, r3
 800f094:	db12      	blt.n	800f0bc <__gethex+0x3fa>
 800f096:	6869      	ldr	r1, [r5, #4]
 800f098:	9802      	ldr	r0, [sp, #8]
 800f09a:	3101      	adds	r1, #1
 800f09c:	f000 f97a 	bl	800f394 <_Balloc>
 800f0a0:	692a      	ldr	r2, [r5, #16]
 800f0a2:	3202      	adds	r2, #2
 800f0a4:	f105 010c 	add.w	r1, r5, #12
 800f0a8:	4683      	mov	fp, r0
 800f0aa:	0092      	lsls	r2, r2, #2
 800f0ac:	300c      	adds	r0, #12
 800f0ae:	f7fc ff97 	bl	800bfe0 <memcpy>
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	9802      	ldr	r0, [sp, #8]
 800f0b6:	f000 f9a1 	bl	800f3fc <_Bfree>
 800f0ba:	465d      	mov	r5, fp
 800f0bc:	692b      	ldr	r3, [r5, #16]
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f0c4:	612a      	str	r2, [r5, #16]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	615a      	str	r2, [r3, #20]
 800f0ca:	e7c2      	b.n	800f052 <__gethex+0x390>
 800f0cc:	692a      	ldr	r2, [r5, #16]
 800f0ce:	454a      	cmp	r2, r9
 800f0d0:	dd0b      	ble.n	800f0ea <__gethex+0x428>
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	f7ff fda5 	bl	800ec24 <rshift>
 800f0da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0de:	3401      	adds	r4, #1
 800f0e0:	42a3      	cmp	r3, r4
 800f0e2:	f6ff aed9 	blt.w	800ee98 <__gethex+0x1d6>
 800f0e6:	2701      	movs	r7, #1
 800f0e8:	e7c7      	b.n	800f07a <__gethex+0x3b8>
 800f0ea:	f016 061f 	ands.w	r6, r6, #31
 800f0ee:	d0fa      	beq.n	800f0e6 <__gethex+0x424>
 800f0f0:	449a      	add	sl, r3
 800f0f2:	f1c6 0620 	rsb	r6, r6, #32
 800f0f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f0fa:	f000 fa0f 	bl	800f51c <__hi0bits>
 800f0fe:	42b0      	cmp	r0, r6
 800f100:	dbe7      	blt.n	800f0d2 <__gethex+0x410>
 800f102:	e7f0      	b.n	800f0e6 <__gethex+0x424>

0800f104 <L_shift>:
 800f104:	f1c2 0208 	rsb	r2, r2, #8
 800f108:	0092      	lsls	r2, r2, #2
 800f10a:	b570      	push	{r4, r5, r6, lr}
 800f10c:	f1c2 0620 	rsb	r6, r2, #32
 800f110:	6843      	ldr	r3, [r0, #4]
 800f112:	6804      	ldr	r4, [r0, #0]
 800f114:	fa03 f506 	lsl.w	r5, r3, r6
 800f118:	432c      	orrs	r4, r5
 800f11a:	40d3      	lsrs	r3, r2
 800f11c:	6004      	str	r4, [r0, #0]
 800f11e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f122:	4288      	cmp	r0, r1
 800f124:	d3f4      	bcc.n	800f110 <L_shift+0xc>
 800f126:	bd70      	pop	{r4, r5, r6, pc}

0800f128 <__match>:
 800f128:	b530      	push	{r4, r5, lr}
 800f12a:	6803      	ldr	r3, [r0, #0]
 800f12c:	3301      	adds	r3, #1
 800f12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f132:	b914      	cbnz	r4, 800f13a <__match+0x12>
 800f134:	6003      	str	r3, [r0, #0]
 800f136:	2001      	movs	r0, #1
 800f138:	bd30      	pop	{r4, r5, pc}
 800f13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f13e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f142:	2d19      	cmp	r5, #25
 800f144:	bf98      	it	ls
 800f146:	3220      	addls	r2, #32
 800f148:	42a2      	cmp	r2, r4
 800f14a:	d0f0      	beq.n	800f12e <__match+0x6>
 800f14c:	2000      	movs	r0, #0
 800f14e:	e7f3      	b.n	800f138 <__match+0x10>

0800f150 <__hexnan>:
 800f150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f154:	680b      	ldr	r3, [r1, #0]
 800f156:	6801      	ldr	r1, [r0, #0]
 800f158:	115f      	asrs	r7, r3, #5
 800f15a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f15e:	f013 031f 	ands.w	r3, r3, #31
 800f162:	b087      	sub	sp, #28
 800f164:	bf18      	it	ne
 800f166:	3704      	addne	r7, #4
 800f168:	2500      	movs	r5, #0
 800f16a:	1f3e      	subs	r6, r7, #4
 800f16c:	4682      	mov	sl, r0
 800f16e:	4690      	mov	r8, r2
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	f847 5c04 	str.w	r5, [r7, #-4]
 800f176:	46b1      	mov	r9, r6
 800f178:	4634      	mov	r4, r6
 800f17a:	9502      	str	r5, [sp, #8]
 800f17c:	46ab      	mov	fp, r5
 800f17e:	784a      	ldrb	r2, [r1, #1]
 800f180:	1c4b      	adds	r3, r1, #1
 800f182:	9303      	str	r3, [sp, #12]
 800f184:	b342      	cbz	r2, 800f1d8 <__hexnan+0x88>
 800f186:	4610      	mov	r0, r2
 800f188:	9105      	str	r1, [sp, #20]
 800f18a:	9204      	str	r2, [sp, #16]
 800f18c:	f7ff fd84 	bl	800ec98 <__hexdig_fun>
 800f190:	2800      	cmp	r0, #0
 800f192:	d143      	bne.n	800f21c <__hexnan+0xcc>
 800f194:	9a04      	ldr	r2, [sp, #16]
 800f196:	9905      	ldr	r1, [sp, #20]
 800f198:	2a20      	cmp	r2, #32
 800f19a:	d818      	bhi.n	800f1ce <__hexnan+0x7e>
 800f19c:	9b02      	ldr	r3, [sp, #8]
 800f19e:	459b      	cmp	fp, r3
 800f1a0:	dd13      	ble.n	800f1ca <__hexnan+0x7a>
 800f1a2:	454c      	cmp	r4, r9
 800f1a4:	d206      	bcs.n	800f1b4 <__hexnan+0x64>
 800f1a6:	2d07      	cmp	r5, #7
 800f1a8:	dc04      	bgt.n	800f1b4 <__hexnan+0x64>
 800f1aa:	462a      	mov	r2, r5
 800f1ac:	4649      	mov	r1, r9
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f7ff ffa8 	bl	800f104 <L_shift>
 800f1b4:	4544      	cmp	r4, r8
 800f1b6:	d944      	bls.n	800f242 <__hexnan+0xf2>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	f1a4 0904 	sub.w	r9, r4, #4
 800f1be:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1c2:	f8cd b008 	str.w	fp, [sp, #8]
 800f1c6:	464c      	mov	r4, r9
 800f1c8:	461d      	mov	r5, r3
 800f1ca:	9903      	ldr	r1, [sp, #12]
 800f1cc:	e7d7      	b.n	800f17e <__hexnan+0x2e>
 800f1ce:	2a29      	cmp	r2, #41	; 0x29
 800f1d0:	d14a      	bne.n	800f268 <__hexnan+0x118>
 800f1d2:	3102      	adds	r1, #2
 800f1d4:	f8ca 1000 	str.w	r1, [sl]
 800f1d8:	f1bb 0f00 	cmp.w	fp, #0
 800f1dc:	d044      	beq.n	800f268 <__hexnan+0x118>
 800f1de:	454c      	cmp	r4, r9
 800f1e0:	d206      	bcs.n	800f1f0 <__hexnan+0xa0>
 800f1e2:	2d07      	cmp	r5, #7
 800f1e4:	dc04      	bgt.n	800f1f0 <__hexnan+0xa0>
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	4649      	mov	r1, r9
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f7ff ff8a 	bl	800f104 <L_shift>
 800f1f0:	4544      	cmp	r4, r8
 800f1f2:	d928      	bls.n	800f246 <__hexnan+0xf6>
 800f1f4:	4643      	mov	r3, r8
 800f1f6:	f854 2b04 	ldr.w	r2, [r4], #4
 800f1fa:	f843 2b04 	str.w	r2, [r3], #4
 800f1fe:	42a6      	cmp	r6, r4
 800f200:	d2f9      	bcs.n	800f1f6 <__hexnan+0xa6>
 800f202:	2200      	movs	r2, #0
 800f204:	f843 2b04 	str.w	r2, [r3], #4
 800f208:	429e      	cmp	r6, r3
 800f20a:	d2fb      	bcs.n	800f204 <__hexnan+0xb4>
 800f20c:	6833      	ldr	r3, [r6, #0]
 800f20e:	b91b      	cbnz	r3, 800f218 <__hexnan+0xc8>
 800f210:	4546      	cmp	r6, r8
 800f212:	d127      	bne.n	800f264 <__hexnan+0x114>
 800f214:	2301      	movs	r3, #1
 800f216:	6033      	str	r3, [r6, #0]
 800f218:	2005      	movs	r0, #5
 800f21a:	e026      	b.n	800f26a <__hexnan+0x11a>
 800f21c:	3501      	adds	r5, #1
 800f21e:	2d08      	cmp	r5, #8
 800f220:	f10b 0b01 	add.w	fp, fp, #1
 800f224:	dd06      	ble.n	800f234 <__hexnan+0xe4>
 800f226:	4544      	cmp	r4, r8
 800f228:	d9cf      	bls.n	800f1ca <__hexnan+0x7a>
 800f22a:	2300      	movs	r3, #0
 800f22c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f230:	2501      	movs	r5, #1
 800f232:	3c04      	subs	r4, #4
 800f234:	6822      	ldr	r2, [r4, #0]
 800f236:	f000 000f 	and.w	r0, r0, #15
 800f23a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f23e:	6020      	str	r0, [r4, #0]
 800f240:	e7c3      	b.n	800f1ca <__hexnan+0x7a>
 800f242:	2508      	movs	r5, #8
 800f244:	e7c1      	b.n	800f1ca <__hexnan+0x7a>
 800f246:	9b01      	ldr	r3, [sp, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d0df      	beq.n	800f20c <__hexnan+0xbc>
 800f24c:	f04f 32ff 	mov.w	r2, #4294967295
 800f250:	f1c3 0320 	rsb	r3, r3, #32
 800f254:	fa22 f303 	lsr.w	r3, r2, r3
 800f258:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f25c:	401a      	ands	r2, r3
 800f25e:	f847 2c04 	str.w	r2, [r7, #-4]
 800f262:	e7d3      	b.n	800f20c <__hexnan+0xbc>
 800f264:	3e04      	subs	r6, #4
 800f266:	e7d1      	b.n	800f20c <__hexnan+0xbc>
 800f268:	2004      	movs	r0, #4
 800f26a:	b007      	add	sp, #28
 800f26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f270 <__locale_ctype_ptr_l>:
 800f270:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f274:	4770      	bx	lr

0800f276 <__localeconv_l>:
 800f276:	30f0      	adds	r0, #240	; 0xf0
 800f278:	4770      	bx	lr
	...

0800f27c <_localeconv_r>:
 800f27c:	4b04      	ldr	r3, [pc, #16]	; (800f290 <_localeconv_r+0x14>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6a18      	ldr	r0, [r3, #32]
 800f282:	4b04      	ldr	r3, [pc, #16]	; (800f294 <_localeconv_r+0x18>)
 800f284:	2800      	cmp	r0, #0
 800f286:	bf08      	it	eq
 800f288:	4618      	moveq	r0, r3
 800f28a:	30f0      	adds	r0, #240	; 0xf0
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	20000040 	.word	0x20000040
 800f294:	200000a4 	.word	0x200000a4

0800f298 <__swhatbuf_r>:
 800f298:	b570      	push	{r4, r5, r6, lr}
 800f29a:	460e      	mov	r6, r1
 800f29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a0:	2900      	cmp	r1, #0
 800f2a2:	b096      	sub	sp, #88	; 0x58
 800f2a4:	4614      	mov	r4, r2
 800f2a6:	461d      	mov	r5, r3
 800f2a8:	da07      	bge.n	800f2ba <__swhatbuf_r+0x22>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	602b      	str	r3, [r5, #0]
 800f2ae:	89b3      	ldrh	r3, [r6, #12]
 800f2b0:	061a      	lsls	r2, r3, #24
 800f2b2:	d410      	bmi.n	800f2d6 <__swhatbuf_r+0x3e>
 800f2b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2b8:	e00e      	b.n	800f2d8 <__swhatbuf_r+0x40>
 800f2ba:	466a      	mov	r2, sp
 800f2bc:	f001 f846 	bl	801034c <_fstat_r>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	dbf2      	blt.n	800f2aa <__swhatbuf_r+0x12>
 800f2c4:	9a01      	ldr	r2, [sp, #4]
 800f2c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2ce:	425a      	negs	r2, r3
 800f2d0:	415a      	adcs	r2, r3
 800f2d2:	602a      	str	r2, [r5, #0]
 800f2d4:	e7ee      	b.n	800f2b4 <__swhatbuf_r+0x1c>
 800f2d6:	2340      	movs	r3, #64	; 0x40
 800f2d8:	2000      	movs	r0, #0
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	b016      	add	sp, #88	; 0x58
 800f2de:	bd70      	pop	{r4, r5, r6, pc}

0800f2e0 <__smakebuf_r>:
 800f2e0:	898b      	ldrh	r3, [r1, #12]
 800f2e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2e4:	079d      	lsls	r5, r3, #30
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	460c      	mov	r4, r1
 800f2ea:	d507      	bpl.n	800f2fc <__smakebuf_r+0x1c>
 800f2ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	6123      	str	r3, [r4, #16]
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	6163      	str	r3, [r4, #20]
 800f2f8:	b002      	add	sp, #8
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	ab01      	add	r3, sp, #4
 800f2fe:	466a      	mov	r2, sp
 800f300:	f7ff ffca 	bl	800f298 <__swhatbuf_r>
 800f304:	9900      	ldr	r1, [sp, #0]
 800f306:	4605      	mov	r5, r0
 800f308:	4630      	mov	r0, r6
 800f30a:	f000 fc9f 	bl	800fc4c <_malloc_r>
 800f30e:	b948      	cbnz	r0, 800f324 <__smakebuf_r+0x44>
 800f310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f314:	059a      	lsls	r2, r3, #22
 800f316:	d4ef      	bmi.n	800f2f8 <__smakebuf_r+0x18>
 800f318:	f023 0303 	bic.w	r3, r3, #3
 800f31c:	f043 0302 	orr.w	r3, r3, #2
 800f320:	81a3      	strh	r3, [r4, #12]
 800f322:	e7e3      	b.n	800f2ec <__smakebuf_r+0xc>
 800f324:	4b0d      	ldr	r3, [pc, #52]	; (800f35c <__smakebuf_r+0x7c>)
 800f326:	62b3      	str	r3, [r6, #40]	; 0x28
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	6020      	str	r0, [r4, #0]
 800f32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	9b00      	ldr	r3, [sp, #0]
 800f334:	6163      	str	r3, [r4, #20]
 800f336:	9b01      	ldr	r3, [sp, #4]
 800f338:	6120      	str	r0, [r4, #16]
 800f33a:	b15b      	cbz	r3, 800f354 <__smakebuf_r+0x74>
 800f33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f340:	4630      	mov	r0, r6
 800f342:	f001 f815 	bl	8010370 <_isatty_r>
 800f346:	b128      	cbz	r0, 800f354 <__smakebuf_r+0x74>
 800f348:	89a3      	ldrh	r3, [r4, #12]
 800f34a:	f023 0303 	bic.w	r3, r3, #3
 800f34e:	f043 0301 	orr.w	r3, r3, #1
 800f352:	81a3      	strh	r3, [r4, #12]
 800f354:	89a3      	ldrh	r3, [r4, #12]
 800f356:	431d      	orrs	r5, r3
 800f358:	81a5      	strh	r5, [r4, #12]
 800f35a:	e7cd      	b.n	800f2f8 <__smakebuf_r+0x18>
 800f35c:	0800ead9 	.word	0x0800ead9

0800f360 <malloc>:
 800f360:	4b02      	ldr	r3, [pc, #8]	; (800f36c <malloc+0xc>)
 800f362:	4601      	mov	r1, r0
 800f364:	6818      	ldr	r0, [r3, #0]
 800f366:	f000 bc71 	b.w	800fc4c <_malloc_r>
 800f36a:	bf00      	nop
 800f36c:	20000040 	.word	0x20000040

0800f370 <__ascii_mbtowc>:
 800f370:	b082      	sub	sp, #8
 800f372:	b901      	cbnz	r1, 800f376 <__ascii_mbtowc+0x6>
 800f374:	a901      	add	r1, sp, #4
 800f376:	b142      	cbz	r2, 800f38a <__ascii_mbtowc+0x1a>
 800f378:	b14b      	cbz	r3, 800f38e <__ascii_mbtowc+0x1e>
 800f37a:	7813      	ldrb	r3, [r2, #0]
 800f37c:	600b      	str	r3, [r1, #0]
 800f37e:	7812      	ldrb	r2, [r2, #0]
 800f380:	1c10      	adds	r0, r2, #0
 800f382:	bf18      	it	ne
 800f384:	2001      	movne	r0, #1
 800f386:	b002      	add	sp, #8
 800f388:	4770      	bx	lr
 800f38a:	4610      	mov	r0, r2
 800f38c:	e7fb      	b.n	800f386 <__ascii_mbtowc+0x16>
 800f38e:	f06f 0001 	mvn.w	r0, #1
 800f392:	e7f8      	b.n	800f386 <__ascii_mbtowc+0x16>

0800f394 <_Balloc>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f398:	4604      	mov	r4, r0
 800f39a:	460e      	mov	r6, r1
 800f39c:	b93d      	cbnz	r5, 800f3ae <_Balloc+0x1a>
 800f39e:	2010      	movs	r0, #16
 800f3a0:	f7ff ffde 	bl	800f360 <malloc>
 800f3a4:	6260      	str	r0, [r4, #36]	; 0x24
 800f3a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3aa:	6005      	str	r5, [r0, #0]
 800f3ac:	60c5      	str	r5, [r0, #12]
 800f3ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f3b0:	68eb      	ldr	r3, [r5, #12]
 800f3b2:	b183      	cbz	r3, 800f3d6 <_Balloc+0x42>
 800f3b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f3bc:	b9b8      	cbnz	r0, 800f3ee <_Balloc+0x5a>
 800f3be:	2101      	movs	r1, #1
 800f3c0:	fa01 f506 	lsl.w	r5, r1, r6
 800f3c4:	1d6a      	adds	r2, r5, #5
 800f3c6:	0092      	lsls	r2, r2, #2
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f000 fbe2 	bl	800fb92 <_calloc_r>
 800f3ce:	b160      	cbz	r0, 800f3ea <_Balloc+0x56>
 800f3d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f3d4:	e00e      	b.n	800f3f4 <_Balloc+0x60>
 800f3d6:	2221      	movs	r2, #33	; 0x21
 800f3d8:	2104      	movs	r1, #4
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 fbd9 	bl	800fb92 <_calloc_r>
 800f3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3e2:	60e8      	str	r0, [r5, #12]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1e4      	bne.n	800f3b4 <_Balloc+0x20>
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	bd70      	pop	{r4, r5, r6, pc}
 800f3ee:	6802      	ldr	r2, [r0, #0]
 800f3f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3fa:	e7f7      	b.n	800f3ec <_Balloc+0x58>

0800f3fc <_Bfree>:
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f400:	4606      	mov	r6, r0
 800f402:	460d      	mov	r5, r1
 800f404:	b93c      	cbnz	r4, 800f416 <_Bfree+0x1a>
 800f406:	2010      	movs	r0, #16
 800f408:	f7ff ffaa 	bl	800f360 <malloc>
 800f40c:	6270      	str	r0, [r6, #36]	; 0x24
 800f40e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f412:	6004      	str	r4, [r0, #0]
 800f414:	60c4      	str	r4, [r0, #12]
 800f416:	b13d      	cbz	r5, 800f428 <_Bfree+0x2c>
 800f418:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f41a:	686a      	ldr	r2, [r5, #4]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f422:	6029      	str	r1, [r5, #0]
 800f424:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f428:	bd70      	pop	{r4, r5, r6, pc}

0800f42a <__multadd>:
 800f42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f42e:	690d      	ldr	r5, [r1, #16]
 800f430:	461f      	mov	r7, r3
 800f432:	4606      	mov	r6, r0
 800f434:	460c      	mov	r4, r1
 800f436:	f101 0c14 	add.w	ip, r1, #20
 800f43a:	2300      	movs	r3, #0
 800f43c:	f8dc 0000 	ldr.w	r0, [ip]
 800f440:	b281      	uxth	r1, r0
 800f442:	fb02 7101 	mla	r1, r2, r1, r7
 800f446:	0c0f      	lsrs	r7, r1, #16
 800f448:	0c00      	lsrs	r0, r0, #16
 800f44a:	fb02 7000 	mla	r0, r2, r0, r7
 800f44e:	b289      	uxth	r1, r1
 800f450:	3301      	adds	r3, #1
 800f452:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f456:	429d      	cmp	r5, r3
 800f458:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f45c:	f84c 1b04 	str.w	r1, [ip], #4
 800f460:	dcec      	bgt.n	800f43c <__multadd+0x12>
 800f462:	b1d7      	cbz	r7, 800f49a <__multadd+0x70>
 800f464:	68a3      	ldr	r3, [r4, #8]
 800f466:	42ab      	cmp	r3, r5
 800f468:	dc12      	bgt.n	800f490 <__multadd+0x66>
 800f46a:	6861      	ldr	r1, [r4, #4]
 800f46c:	4630      	mov	r0, r6
 800f46e:	3101      	adds	r1, #1
 800f470:	f7ff ff90 	bl	800f394 <_Balloc>
 800f474:	6922      	ldr	r2, [r4, #16]
 800f476:	3202      	adds	r2, #2
 800f478:	f104 010c 	add.w	r1, r4, #12
 800f47c:	4680      	mov	r8, r0
 800f47e:	0092      	lsls	r2, r2, #2
 800f480:	300c      	adds	r0, #12
 800f482:	f7fc fdad 	bl	800bfe0 <memcpy>
 800f486:	4621      	mov	r1, r4
 800f488:	4630      	mov	r0, r6
 800f48a:	f7ff ffb7 	bl	800f3fc <_Bfree>
 800f48e:	4644      	mov	r4, r8
 800f490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f494:	3501      	adds	r5, #1
 800f496:	615f      	str	r7, [r3, #20]
 800f498:	6125      	str	r5, [r4, #16]
 800f49a:	4620      	mov	r0, r4
 800f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f4a0 <__s2b>:
 800f4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	4615      	mov	r5, r2
 800f4a8:	461f      	mov	r7, r3
 800f4aa:	2209      	movs	r2, #9
 800f4ac:	3308      	adds	r3, #8
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	db20      	blt.n	800f4fe <__s2b+0x5e>
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f7ff ff69 	bl	800f394 <_Balloc>
 800f4c2:	9b08      	ldr	r3, [sp, #32]
 800f4c4:	6143      	str	r3, [r0, #20]
 800f4c6:	2d09      	cmp	r5, #9
 800f4c8:	f04f 0301 	mov.w	r3, #1
 800f4cc:	6103      	str	r3, [r0, #16]
 800f4ce:	dd19      	ble.n	800f504 <__s2b+0x64>
 800f4d0:	f104 0809 	add.w	r8, r4, #9
 800f4d4:	46c1      	mov	r9, r8
 800f4d6:	442c      	add	r4, r5
 800f4d8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f4dc:	4601      	mov	r1, r0
 800f4de:	3b30      	subs	r3, #48	; 0x30
 800f4e0:	220a      	movs	r2, #10
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7ff ffa1 	bl	800f42a <__multadd>
 800f4e8:	45a1      	cmp	r9, r4
 800f4ea:	d1f5      	bne.n	800f4d8 <__s2b+0x38>
 800f4ec:	eb08 0405 	add.w	r4, r8, r5
 800f4f0:	3c08      	subs	r4, #8
 800f4f2:	1b2d      	subs	r5, r5, r4
 800f4f4:	1963      	adds	r3, r4, r5
 800f4f6:	42bb      	cmp	r3, r7
 800f4f8:	db07      	blt.n	800f50a <__s2b+0x6a>
 800f4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4fe:	0052      	lsls	r2, r2, #1
 800f500:	3101      	adds	r1, #1
 800f502:	e7d9      	b.n	800f4b8 <__s2b+0x18>
 800f504:	340a      	adds	r4, #10
 800f506:	2509      	movs	r5, #9
 800f508:	e7f3      	b.n	800f4f2 <__s2b+0x52>
 800f50a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f50e:	4601      	mov	r1, r0
 800f510:	3b30      	subs	r3, #48	; 0x30
 800f512:	220a      	movs	r2, #10
 800f514:	4630      	mov	r0, r6
 800f516:	f7ff ff88 	bl	800f42a <__multadd>
 800f51a:	e7eb      	b.n	800f4f4 <__s2b+0x54>

0800f51c <__hi0bits>:
 800f51c:	0c02      	lsrs	r2, r0, #16
 800f51e:	0412      	lsls	r2, r2, #16
 800f520:	4603      	mov	r3, r0
 800f522:	b9b2      	cbnz	r2, 800f552 <__hi0bits+0x36>
 800f524:	0403      	lsls	r3, r0, #16
 800f526:	2010      	movs	r0, #16
 800f528:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f52c:	bf04      	itt	eq
 800f52e:	021b      	lsleq	r3, r3, #8
 800f530:	3008      	addeq	r0, #8
 800f532:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f536:	bf04      	itt	eq
 800f538:	011b      	lsleq	r3, r3, #4
 800f53a:	3004      	addeq	r0, #4
 800f53c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f540:	bf04      	itt	eq
 800f542:	009b      	lsleq	r3, r3, #2
 800f544:	3002      	addeq	r0, #2
 800f546:	2b00      	cmp	r3, #0
 800f548:	db06      	blt.n	800f558 <__hi0bits+0x3c>
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	d503      	bpl.n	800f556 <__hi0bits+0x3a>
 800f54e:	3001      	adds	r0, #1
 800f550:	4770      	bx	lr
 800f552:	2000      	movs	r0, #0
 800f554:	e7e8      	b.n	800f528 <__hi0bits+0xc>
 800f556:	2020      	movs	r0, #32
 800f558:	4770      	bx	lr

0800f55a <__lo0bits>:
 800f55a:	6803      	ldr	r3, [r0, #0]
 800f55c:	f013 0207 	ands.w	r2, r3, #7
 800f560:	4601      	mov	r1, r0
 800f562:	d00b      	beq.n	800f57c <__lo0bits+0x22>
 800f564:	07da      	lsls	r2, r3, #31
 800f566:	d423      	bmi.n	800f5b0 <__lo0bits+0x56>
 800f568:	0798      	lsls	r0, r3, #30
 800f56a:	bf49      	itett	mi
 800f56c:	085b      	lsrmi	r3, r3, #1
 800f56e:	089b      	lsrpl	r3, r3, #2
 800f570:	2001      	movmi	r0, #1
 800f572:	600b      	strmi	r3, [r1, #0]
 800f574:	bf5c      	itt	pl
 800f576:	600b      	strpl	r3, [r1, #0]
 800f578:	2002      	movpl	r0, #2
 800f57a:	4770      	bx	lr
 800f57c:	b298      	uxth	r0, r3
 800f57e:	b9a8      	cbnz	r0, 800f5ac <__lo0bits+0x52>
 800f580:	0c1b      	lsrs	r3, r3, #16
 800f582:	2010      	movs	r0, #16
 800f584:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f588:	bf04      	itt	eq
 800f58a:	0a1b      	lsreq	r3, r3, #8
 800f58c:	3008      	addeq	r0, #8
 800f58e:	071a      	lsls	r2, r3, #28
 800f590:	bf04      	itt	eq
 800f592:	091b      	lsreq	r3, r3, #4
 800f594:	3004      	addeq	r0, #4
 800f596:	079a      	lsls	r2, r3, #30
 800f598:	bf04      	itt	eq
 800f59a:	089b      	lsreq	r3, r3, #2
 800f59c:	3002      	addeq	r0, #2
 800f59e:	07da      	lsls	r2, r3, #31
 800f5a0:	d402      	bmi.n	800f5a8 <__lo0bits+0x4e>
 800f5a2:	085b      	lsrs	r3, r3, #1
 800f5a4:	d006      	beq.n	800f5b4 <__lo0bits+0x5a>
 800f5a6:	3001      	adds	r0, #1
 800f5a8:	600b      	str	r3, [r1, #0]
 800f5aa:	4770      	bx	lr
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	e7e9      	b.n	800f584 <__lo0bits+0x2a>
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	4770      	bx	lr
 800f5b4:	2020      	movs	r0, #32
 800f5b6:	4770      	bx	lr

0800f5b8 <__i2b>:
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	2101      	movs	r1, #1
 800f5be:	f7ff fee9 	bl	800f394 <_Balloc>
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	6144      	str	r4, [r0, #20]
 800f5c6:	6102      	str	r2, [r0, #16]
 800f5c8:	bd10      	pop	{r4, pc}

0800f5ca <__multiply>:
 800f5ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ce:	4614      	mov	r4, r2
 800f5d0:	690a      	ldr	r2, [r1, #16]
 800f5d2:	6923      	ldr	r3, [r4, #16]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	bfb8      	it	lt
 800f5d8:	460b      	movlt	r3, r1
 800f5da:	4688      	mov	r8, r1
 800f5dc:	bfbc      	itt	lt
 800f5de:	46a0      	movlt	r8, r4
 800f5e0:	461c      	movlt	r4, r3
 800f5e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5f2:	eb07 0609 	add.w	r6, r7, r9
 800f5f6:	42b3      	cmp	r3, r6
 800f5f8:	bfb8      	it	lt
 800f5fa:	3101      	addlt	r1, #1
 800f5fc:	f7ff feca 	bl	800f394 <_Balloc>
 800f600:	f100 0514 	add.w	r5, r0, #20
 800f604:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f608:	462b      	mov	r3, r5
 800f60a:	2200      	movs	r2, #0
 800f60c:	4573      	cmp	r3, lr
 800f60e:	d316      	bcc.n	800f63e <__multiply+0x74>
 800f610:	f104 0214 	add.w	r2, r4, #20
 800f614:	f108 0114 	add.w	r1, r8, #20
 800f618:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f61c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	9b00      	ldr	r3, [sp, #0]
 800f624:	9201      	str	r2, [sp, #4]
 800f626:	4293      	cmp	r3, r2
 800f628:	d80c      	bhi.n	800f644 <__multiply+0x7a>
 800f62a:	2e00      	cmp	r6, #0
 800f62c:	dd03      	ble.n	800f636 <__multiply+0x6c>
 800f62e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f632:	2b00      	cmp	r3, #0
 800f634:	d05d      	beq.n	800f6f2 <__multiply+0x128>
 800f636:	6106      	str	r6, [r0, #16]
 800f638:	b003      	add	sp, #12
 800f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63e:	f843 2b04 	str.w	r2, [r3], #4
 800f642:	e7e3      	b.n	800f60c <__multiply+0x42>
 800f644:	f8b2 b000 	ldrh.w	fp, [r2]
 800f648:	f1bb 0f00 	cmp.w	fp, #0
 800f64c:	d023      	beq.n	800f696 <__multiply+0xcc>
 800f64e:	4689      	mov	r9, r1
 800f650:	46ac      	mov	ip, r5
 800f652:	f04f 0800 	mov.w	r8, #0
 800f656:	f859 4b04 	ldr.w	r4, [r9], #4
 800f65a:	f8dc a000 	ldr.w	sl, [ip]
 800f65e:	b2a3      	uxth	r3, r4
 800f660:	fa1f fa8a 	uxth.w	sl, sl
 800f664:	fb0b a303 	mla	r3, fp, r3, sl
 800f668:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f66c:	f8dc 4000 	ldr.w	r4, [ip]
 800f670:	4443      	add	r3, r8
 800f672:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f676:	fb0b 840a 	mla	r4, fp, sl, r8
 800f67a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f67e:	46e2      	mov	sl, ip
 800f680:	b29b      	uxth	r3, r3
 800f682:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f686:	454f      	cmp	r7, r9
 800f688:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f68c:	f84a 3b04 	str.w	r3, [sl], #4
 800f690:	d82b      	bhi.n	800f6ea <__multiply+0x120>
 800f692:	f8cc 8004 	str.w	r8, [ip, #4]
 800f696:	9b01      	ldr	r3, [sp, #4]
 800f698:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f69c:	3204      	adds	r2, #4
 800f69e:	f1ba 0f00 	cmp.w	sl, #0
 800f6a2:	d020      	beq.n	800f6e6 <__multiply+0x11c>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	4689      	mov	r9, r1
 800f6a8:	46a8      	mov	r8, r5
 800f6aa:	f04f 0b00 	mov.w	fp, #0
 800f6ae:	f8b9 c000 	ldrh.w	ip, [r9]
 800f6b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f6b6:	fb0a 440c 	mla	r4, sl, ip, r4
 800f6ba:	445c      	add	r4, fp
 800f6bc:	46c4      	mov	ip, r8
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f6c4:	f84c 3b04 	str.w	r3, [ip], #4
 800f6c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f6d0:	0c1b      	lsrs	r3, r3, #16
 800f6d2:	fb0a b303 	mla	r3, sl, r3, fp
 800f6d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f6da:	454f      	cmp	r7, r9
 800f6dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f6e0:	d805      	bhi.n	800f6ee <__multiply+0x124>
 800f6e2:	f8c8 3004 	str.w	r3, [r8, #4]
 800f6e6:	3504      	adds	r5, #4
 800f6e8:	e79b      	b.n	800f622 <__multiply+0x58>
 800f6ea:	46d4      	mov	ip, sl
 800f6ec:	e7b3      	b.n	800f656 <__multiply+0x8c>
 800f6ee:	46e0      	mov	r8, ip
 800f6f0:	e7dd      	b.n	800f6ae <__multiply+0xe4>
 800f6f2:	3e01      	subs	r6, #1
 800f6f4:	e799      	b.n	800f62a <__multiply+0x60>
	...

0800f6f8 <__pow5mult>:
 800f6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6fc:	4615      	mov	r5, r2
 800f6fe:	f012 0203 	ands.w	r2, r2, #3
 800f702:	4606      	mov	r6, r0
 800f704:	460f      	mov	r7, r1
 800f706:	d007      	beq.n	800f718 <__pow5mult+0x20>
 800f708:	3a01      	subs	r2, #1
 800f70a:	4c21      	ldr	r4, [pc, #132]	; (800f790 <__pow5mult+0x98>)
 800f70c:	2300      	movs	r3, #0
 800f70e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f712:	f7ff fe8a 	bl	800f42a <__multadd>
 800f716:	4607      	mov	r7, r0
 800f718:	10ad      	asrs	r5, r5, #2
 800f71a:	d035      	beq.n	800f788 <__pow5mult+0x90>
 800f71c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f71e:	b93c      	cbnz	r4, 800f730 <__pow5mult+0x38>
 800f720:	2010      	movs	r0, #16
 800f722:	f7ff fe1d 	bl	800f360 <malloc>
 800f726:	6270      	str	r0, [r6, #36]	; 0x24
 800f728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f72c:	6004      	str	r4, [r0, #0]
 800f72e:	60c4      	str	r4, [r0, #12]
 800f730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f738:	b94c      	cbnz	r4, 800f74e <__pow5mult+0x56>
 800f73a:	f240 2171 	movw	r1, #625	; 0x271
 800f73e:	4630      	mov	r0, r6
 800f740:	f7ff ff3a 	bl	800f5b8 <__i2b>
 800f744:	2300      	movs	r3, #0
 800f746:	f8c8 0008 	str.w	r0, [r8, #8]
 800f74a:	4604      	mov	r4, r0
 800f74c:	6003      	str	r3, [r0, #0]
 800f74e:	f04f 0800 	mov.w	r8, #0
 800f752:	07eb      	lsls	r3, r5, #31
 800f754:	d50a      	bpl.n	800f76c <__pow5mult+0x74>
 800f756:	4639      	mov	r1, r7
 800f758:	4622      	mov	r2, r4
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7ff ff35 	bl	800f5ca <__multiply>
 800f760:	4639      	mov	r1, r7
 800f762:	4681      	mov	r9, r0
 800f764:	4630      	mov	r0, r6
 800f766:	f7ff fe49 	bl	800f3fc <_Bfree>
 800f76a:	464f      	mov	r7, r9
 800f76c:	106d      	asrs	r5, r5, #1
 800f76e:	d00b      	beq.n	800f788 <__pow5mult+0x90>
 800f770:	6820      	ldr	r0, [r4, #0]
 800f772:	b938      	cbnz	r0, 800f784 <__pow5mult+0x8c>
 800f774:	4622      	mov	r2, r4
 800f776:	4621      	mov	r1, r4
 800f778:	4630      	mov	r0, r6
 800f77a:	f7ff ff26 	bl	800f5ca <__multiply>
 800f77e:	6020      	str	r0, [r4, #0]
 800f780:	f8c0 8000 	str.w	r8, [r0]
 800f784:	4604      	mov	r4, r0
 800f786:	e7e4      	b.n	800f752 <__pow5mult+0x5a>
 800f788:	4638      	mov	r0, r7
 800f78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f78e:	bf00      	nop
 800f790:	08010900 	.word	0x08010900

0800f794 <__lshift>:
 800f794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f798:	460c      	mov	r4, r1
 800f79a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f79e:	6923      	ldr	r3, [r4, #16]
 800f7a0:	6849      	ldr	r1, [r1, #4]
 800f7a2:	eb0a 0903 	add.w	r9, sl, r3
 800f7a6:	68a3      	ldr	r3, [r4, #8]
 800f7a8:	4607      	mov	r7, r0
 800f7aa:	4616      	mov	r6, r2
 800f7ac:	f109 0501 	add.w	r5, r9, #1
 800f7b0:	42ab      	cmp	r3, r5
 800f7b2:	db32      	blt.n	800f81a <__lshift+0x86>
 800f7b4:	4638      	mov	r0, r7
 800f7b6:	f7ff fded 	bl	800f394 <_Balloc>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	4680      	mov	r8, r0
 800f7be:	f100 0114 	add.w	r1, r0, #20
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	4553      	cmp	r3, sl
 800f7c6:	db2b      	blt.n	800f820 <__lshift+0x8c>
 800f7c8:	6920      	ldr	r0, [r4, #16]
 800f7ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7ce:	f104 0314 	add.w	r3, r4, #20
 800f7d2:	f016 021f 	ands.w	r2, r6, #31
 800f7d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7de:	d025      	beq.n	800f82c <__lshift+0x98>
 800f7e0:	f1c2 0e20 	rsb	lr, r2, #32
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	681e      	ldr	r6, [r3, #0]
 800f7e8:	468a      	mov	sl, r1
 800f7ea:	4096      	lsls	r6, r2
 800f7ec:	4330      	orrs	r0, r6
 800f7ee:	f84a 0b04 	str.w	r0, [sl], #4
 800f7f2:	f853 0b04 	ldr.w	r0, [r3], #4
 800f7f6:	459c      	cmp	ip, r3
 800f7f8:	fa20 f00e 	lsr.w	r0, r0, lr
 800f7fc:	d814      	bhi.n	800f828 <__lshift+0x94>
 800f7fe:	6048      	str	r0, [r1, #4]
 800f800:	b108      	cbz	r0, 800f806 <__lshift+0x72>
 800f802:	f109 0502 	add.w	r5, r9, #2
 800f806:	3d01      	subs	r5, #1
 800f808:	4638      	mov	r0, r7
 800f80a:	f8c8 5010 	str.w	r5, [r8, #16]
 800f80e:	4621      	mov	r1, r4
 800f810:	f7ff fdf4 	bl	800f3fc <_Bfree>
 800f814:	4640      	mov	r0, r8
 800f816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81a:	3101      	adds	r1, #1
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	e7c7      	b.n	800f7b0 <__lshift+0x1c>
 800f820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f824:	3301      	adds	r3, #1
 800f826:	e7cd      	b.n	800f7c4 <__lshift+0x30>
 800f828:	4651      	mov	r1, sl
 800f82a:	e7dc      	b.n	800f7e6 <__lshift+0x52>
 800f82c:	3904      	subs	r1, #4
 800f82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f832:	f841 2f04 	str.w	r2, [r1, #4]!
 800f836:	459c      	cmp	ip, r3
 800f838:	d8f9      	bhi.n	800f82e <__lshift+0x9a>
 800f83a:	e7e4      	b.n	800f806 <__lshift+0x72>

0800f83c <__mcmp>:
 800f83c:	6903      	ldr	r3, [r0, #16]
 800f83e:	690a      	ldr	r2, [r1, #16]
 800f840:	1a9b      	subs	r3, r3, r2
 800f842:	b530      	push	{r4, r5, lr}
 800f844:	d10c      	bne.n	800f860 <__mcmp+0x24>
 800f846:	0092      	lsls	r2, r2, #2
 800f848:	3014      	adds	r0, #20
 800f84a:	3114      	adds	r1, #20
 800f84c:	1884      	adds	r4, r0, r2
 800f84e:	4411      	add	r1, r2
 800f850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f858:	4295      	cmp	r5, r2
 800f85a:	d003      	beq.n	800f864 <__mcmp+0x28>
 800f85c:	d305      	bcc.n	800f86a <__mcmp+0x2e>
 800f85e:	2301      	movs	r3, #1
 800f860:	4618      	mov	r0, r3
 800f862:	bd30      	pop	{r4, r5, pc}
 800f864:	42a0      	cmp	r0, r4
 800f866:	d3f3      	bcc.n	800f850 <__mcmp+0x14>
 800f868:	e7fa      	b.n	800f860 <__mcmp+0x24>
 800f86a:	f04f 33ff 	mov.w	r3, #4294967295
 800f86e:	e7f7      	b.n	800f860 <__mcmp+0x24>

0800f870 <__mdiff>:
 800f870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f874:	460d      	mov	r5, r1
 800f876:	4607      	mov	r7, r0
 800f878:	4611      	mov	r1, r2
 800f87a:	4628      	mov	r0, r5
 800f87c:	4614      	mov	r4, r2
 800f87e:	f7ff ffdd 	bl	800f83c <__mcmp>
 800f882:	1e06      	subs	r6, r0, #0
 800f884:	d108      	bne.n	800f898 <__mdiff+0x28>
 800f886:	4631      	mov	r1, r6
 800f888:	4638      	mov	r0, r7
 800f88a:	f7ff fd83 	bl	800f394 <_Balloc>
 800f88e:	2301      	movs	r3, #1
 800f890:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f898:	bfa4      	itt	ge
 800f89a:	4623      	movge	r3, r4
 800f89c:	462c      	movge	r4, r5
 800f89e:	4638      	mov	r0, r7
 800f8a0:	6861      	ldr	r1, [r4, #4]
 800f8a2:	bfa6      	itte	ge
 800f8a4:	461d      	movge	r5, r3
 800f8a6:	2600      	movge	r6, #0
 800f8a8:	2601      	movlt	r6, #1
 800f8aa:	f7ff fd73 	bl	800f394 <_Balloc>
 800f8ae:	692b      	ldr	r3, [r5, #16]
 800f8b0:	60c6      	str	r6, [r0, #12]
 800f8b2:	6926      	ldr	r6, [r4, #16]
 800f8b4:	f105 0914 	add.w	r9, r5, #20
 800f8b8:	f104 0214 	add.w	r2, r4, #20
 800f8bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f8c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f8c4:	f100 0514 	add.w	r5, r0, #20
 800f8c8:	f04f 0e00 	mov.w	lr, #0
 800f8cc:	f852 ab04 	ldr.w	sl, [r2], #4
 800f8d0:	f859 4b04 	ldr.w	r4, [r9], #4
 800f8d4:	fa1e f18a 	uxtah	r1, lr, sl
 800f8d8:	b2a3      	uxth	r3, r4
 800f8da:	1ac9      	subs	r1, r1, r3
 800f8dc:	0c23      	lsrs	r3, r4, #16
 800f8de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f8e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f8e6:	b289      	uxth	r1, r1
 800f8e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f8ec:	45c8      	cmp	r8, r9
 800f8ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f8f2:	4694      	mov	ip, r2
 800f8f4:	f845 3b04 	str.w	r3, [r5], #4
 800f8f8:	d8e8      	bhi.n	800f8cc <__mdiff+0x5c>
 800f8fa:	45bc      	cmp	ip, r7
 800f8fc:	d304      	bcc.n	800f908 <__mdiff+0x98>
 800f8fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f902:	b183      	cbz	r3, 800f926 <__mdiff+0xb6>
 800f904:	6106      	str	r6, [r0, #16]
 800f906:	e7c5      	b.n	800f894 <__mdiff+0x24>
 800f908:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f90c:	fa1e f381 	uxtah	r3, lr, r1
 800f910:	141a      	asrs	r2, r3, #16
 800f912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f916:	b29b      	uxth	r3, r3
 800f918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f91c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f920:	f845 3b04 	str.w	r3, [r5], #4
 800f924:	e7e9      	b.n	800f8fa <__mdiff+0x8a>
 800f926:	3e01      	subs	r6, #1
 800f928:	e7e9      	b.n	800f8fe <__mdiff+0x8e>
	...

0800f92c <__ulp>:
 800f92c:	4b12      	ldr	r3, [pc, #72]	; (800f978 <__ulp+0x4c>)
 800f92e:	ee10 2a90 	vmov	r2, s1
 800f932:	401a      	ands	r2, r3
 800f934:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dd04      	ble.n	800f946 <__ulp+0x1a>
 800f93c:	2000      	movs	r0, #0
 800f93e:	4619      	mov	r1, r3
 800f940:	ec41 0b10 	vmov	d0, r0, r1
 800f944:	4770      	bx	lr
 800f946:	425b      	negs	r3, r3
 800f948:	151b      	asrs	r3, r3, #20
 800f94a:	2b13      	cmp	r3, #19
 800f94c:	f04f 0000 	mov.w	r0, #0
 800f950:	f04f 0100 	mov.w	r1, #0
 800f954:	dc04      	bgt.n	800f960 <__ulp+0x34>
 800f956:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f95a:	fa42 f103 	asr.w	r1, r2, r3
 800f95e:	e7ef      	b.n	800f940 <__ulp+0x14>
 800f960:	3b14      	subs	r3, #20
 800f962:	2b1e      	cmp	r3, #30
 800f964:	f04f 0201 	mov.w	r2, #1
 800f968:	bfda      	itte	le
 800f96a:	f1c3 031f 	rsble	r3, r3, #31
 800f96e:	fa02 f303 	lslle.w	r3, r2, r3
 800f972:	4613      	movgt	r3, r2
 800f974:	4618      	mov	r0, r3
 800f976:	e7e3      	b.n	800f940 <__ulp+0x14>
 800f978:	7ff00000 	.word	0x7ff00000

0800f97c <__b2d>:
 800f97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97e:	6905      	ldr	r5, [r0, #16]
 800f980:	f100 0714 	add.w	r7, r0, #20
 800f984:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f988:	1f2e      	subs	r6, r5, #4
 800f98a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f98e:	4620      	mov	r0, r4
 800f990:	f7ff fdc4 	bl	800f51c <__hi0bits>
 800f994:	f1c0 0320 	rsb	r3, r0, #32
 800f998:	280a      	cmp	r0, #10
 800f99a:	600b      	str	r3, [r1, #0]
 800f99c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fa14 <__b2d+0x98>
 800f9a0:	dc14      	bgt.n	800f9cc <__b2d+0x50>
 800f9a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f9a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f9aa:	42b7      	cmp	r7, r6
 800f9ac:	ea41 030c 	orr.w	r3, r1, ip
 800f9b0:	bf34      	ite	cc
 800f9b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f9b6:	2100      	movcs	r1, #0
 800f9b8:	3015      	adds	r0, #21
 800f9ba:	fa04 f000 	lsl.w	r0, r4, r0
 800f9be:	fa21 f10e 	lsr.w	r1, r1, lr
 800f9c2:	ea40 0201 	orr.w	r2, r0, r1
 800f9c6:	ec43 2b10 	vmov	d0, r2, r3
 800f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9cc:	42b7      	cmp	r7, r6
 800f9ce:	bf3a      	itte	cc
 800f9d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800f9d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f9d8:	2100      	movcs	r1, #0
 800f9da:	380b      	subs	r0, #11
 800f9dc:	d015      	beq.n	800fa0a <__b2d+0x8e>
 800f9de:	4084      	lsls	r4, r0
 800f9e0:	f1c0 0520 	rsb	r5, r0, #32
 800f9e4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f9e8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f9ec:	42be      	cmp	r6, r7
 800f9ee:	fa21 fc05 	lsr.w	ip, r1, r5
 800f9f2:	ea44 030c 	orr.w	r3, r4, ip
 800f9f6:	bf8c      	ite	hi
 800f9f8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f9fc:	2400      	movls	r4, #0
 800f9fe:	fa01 f000 	lsl.w	r0, r1, r0
 800fa02:	40ec      	lsrs	r4, r5
 800fa04:	ea40 0204 	orr.w	r2, r0, r4
 800fa08:	e7dd      	b.n	800f9c6 <__b2d+0x4a>
 800fa0a:	ea44 030c 	orr.w	r3, r4, ip
 800fa0e:	460a      	mov	r2, r1
 800fa10:	e7d9      	b.n	800f9c6 <__b2d+0x4a>
 800fa12:	bf00      	nop
 800fa14:	3ff00000 	.word	0x3ff00000

0800fa18 <__d2b>:
 800fa18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa1c:	460e      	mov	r6, r1
 800fa1e:	2101      	movs	r1, #1
 800fa20:	ec59 8b10 	vmov	r8, r9, d0
 800fa24:	4615      	mov	r5, r2
 800fa26:	f7ff fcb5 	bl	800f394 <_Balloc>
 800fa2a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fa2e:	4607      	mov	r7, r0
 800fa30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa34:	bb34      	cbnz	r4, 800fa84 <__d2b+0x6c>
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	f1b8 0300 	subs.w	r3, r8, #0
 800fa3c:	d027      	beq.n	800fa8e <__d2b+0x76>
 800fa3e:	a802      	add	r0, sp, #8
 800fa40:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fa44:	f7ff fd89 	bl	800f55a <__lo0bits>
 800fa48:	9900      	ldr	r1, [sp, #0]
 800fa4a:	b1f0      	cbz	r0, 800fa8a <__d2b+0x72>
 800fa4c:	9a01      	ldr	r2, [sp, #4]
 800fa4e:	f1c0 0320 	rsb	r3, r0, #32
 800fa52:	fa02 f303 	lsl.w	r3, r2, r3
 800fa56:	430b      	orrs	r3, r1
 800fa58:	40c2      	lsrs	r2, r0
 800fa5a:	617b      	str	r3, [r7, #20]
 800fa5c:	9201      	str	r2, [sp, #4]
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	61bb      	str	r3, [r7, #24]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	bf14      	ite	ne
 800fa66:	2102      	movne	r1, #2
 800fa68:	2101      	moveq	r1, #1
 800fa6a:	6139      	str	r1, [r7, #16]
 800fa6c:	b1c4      	cbz	r4, 800faa0 <__d2b+0x88>
 800fa6e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fa72:	4404      	add	r4, r0
 800fa74:	6034      	str	r4, [r6, #0]
 800fa76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa7a:	6028      	str	r0, [r5, #0]
 800fa7c:	4638      	mov	r0, r7
 800fa7e:	b003      	add	sp, #12
 800fa80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa88:	e7d5      	b.n	800fa36 <__d2b+0x1e>
 800fa8a:	6179      	str	r1, [r7, #20]
 800fa8c:	e7e7      	b.n	800fa5e <__d2b+0x46>
 800fa8e:	a801      	add	r0, sp, #4
 800fa90:	f7ff fd63 	bl	800f55a <__lo0bits>
 800fa94:	9b01      	ldr	r3, [sp, #4]
 800fa96:	617b      	str	r3, [r7, #20]
 800fa98:	2101      	movs	r1, #1
 800fa9a:	6139      	str	r1, [r7, #16]
 800fa9c:	3020      	adds	r0, #32
 800fa9e:	e7e5      	b.n	800fa6c <__d2b+0x54>
 800faa0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800faa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800faa8:	6030      	str	r0, [r6, #0]
 800faaa:	6918      	ldr	r0, [r3, #16]
 800faac:	f7ff fd36 	bl	800f51c <__hi0bits>
 800fab0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fab4:	e7e1      	b.n	800fa7a <__d2b+0x62>

0800fab6 <__ratio>:
 800fab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faba:	4688      	mov	r8, r1
 800fabc:	4669      	mov	r1, sp
 800fabe:	4681      	mov	r9, r0
 800fac0:	f7ff ff5c 	bl	800f97c <__b2d>
 800fac4:	a901      	add	r1, sp, #4
 800fac6:	4640      	mov	r0, r8
 800fac8:	ec57 6b10 	vmov	r6, r7, d0
 800facc:	f7ff ff56 	bl	800f97c <__b2d>
 800fad0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fad4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fad8:	eba3 0c02 	sub.w	ip, r3, r2
 800fadc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fae0:	1a9b      	subs	r3, r3, r2
 800fae2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fae6:	ec5b ab10 	vmov	sl, fp, d0
 800faea:	2b00      	cmp	r3, #0
 800faec:	bfce      	itee	gt
 800faee:	463a      	movgt	r2, r7
 800faf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800faf4:	465a      	movle	r2, fp
 800faf6:	4659      	mov	r1, fp
 800faf8:	463d      	mov	r5, r7
 800fafa:	bfd4      	ite	le
 800fafc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fb00:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fb04:	4630      	mov	r0, r6
 800fb06:	ee10 2a10 	vmov	r2, s0
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	f7f0 fe9d 	bl	800084c <__aeabi_ddiv>
 800fb12:	ec41 0b10 	vmov	d0, r0, r1
 800fb16:	b003      	add	sp, #12
 800fb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb1c <__copybits>:
 800fb1c:	3901      	subs	r1, #1
 800fb1e:	b510      	push	{r4, lr}
 800fb20:	1149      	asrs	r1, r1, #5
 800fb22:	6914      	ldr	r4, [r2, #16]
 800fb24:	3101      	adds	r1, #1
 800fb26:	f102 0314 	add.w	r3, r2, #20
 800fb2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb32:	42a3      	cmp	r3, r4
 800fb34:	4602      	mov	r2, r0
 800fb36:	d303      	bcc.n	800fb40 <__copybits+0x24>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	428a      	cmp	r2, r1
 800fb3c:	d305      	bcc.n	800fb4a <__copybits+0x2e>
 800fb3e:	bd10      	pop	{r4, pc}
 800fb40:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb44:	f840 2b04 	str.w	r2, [r0], #4
 800fb48:	e7f3      	b.n	800fb32 <__copybits+0x16>
 800fb4a:	f842 3b04 	str.w	r3, [r2], #4
 800fb4e:	e7f4      	b.n	800fb3a <__copybits+0x1e>

0800fb50 <__any_on>:
 800fb50:	f100 0214 	add.w	r2, r0, #20
 800fb54:	6900      	ldr	r0, [r0, #16]
 800fb56:	114b      	asrs	r3, r1, #5
 800fb58:	4298      	cmp	r0, r3
 800fb5a:	b510      	push	{r4, lr}
 800fb5c:	db11      	blt.n	800fb82 <__any_on+0x32>
 800fb5e:	dd0a      	ble.n	800fb76 <__any_on+0x26>
 800fb60:	f011 011f 	ands.w	r1, r1, #31
 800fb64:	d007      	beq.n	800fb76 <__any_on+0x26>
 800fb66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb6a:	fa24 f001 	lsr.w	r0, r4, r1
 800fb6e:	fa00 f101 	lsl.w	r1, r0, r1
 800fb72:	428c      	cmp	r4, r1
 800fb74:	d10b      	bne.n	800fb8e <__any_on+0x3e>
 800fb76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d803      	bhi.n	800fb86 <__any_on+0x36>
 800fb7e:	2000      	movs	r0, #0
 800fb80:	bd10      	pop	{r4, pc}
 800fb82:	4603      	mov	r3, r0
 800fb84:	e7f7      	b.n	800fb76 <__any_on+0x26>
 800fb86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb8a:	2900      	cmp	r1, #0
 800fb8c:	d0f5      	beq.n	800fb7a <__any_on+0x2a>
 800fb8e:	2001      	movs	r0, #1
 800fb90:	e7f6      	b.n	800fb80 <__any_on+0x30>

0800fb92 <_calloc_r>:
 800fb92:	b538      	push	{r3, r4, r5, lr}
 800fb94:	fb02 f401 	mul.w	r4, r2, r1
 800fb98:	4621      	mov	r1, r4
 800fb9a:	f000 f857 	bl	800fc4c <_malloc_r>
 800fb9e:	4605      	mov	r5, r0
 800fba0:	b118      	cbz	r0, 800fbaa <_calloc_r+0x18>
 800fba2:	4622      	mov	r2, r4
 800fba4:	2100      	movs	r1, #0
 800fba6:	f7fc fa26 	bl	800bff6 <memset>
 800fbaa:	4628      	mov	r0, r5
 800fbac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fbb0 <_free_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	2900      	cmp	r1, #0
 800fbb6:	d045      	beq.n	800fc44 <_free_r+0x94>
 800fbb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbbc:	1f0c      	subs	r4, r1, #4
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	bfb8      	it	lt
 800fbc2:	18e4      	addlt	r4, r4, r3
 800fbc4:	f000 fc0f 	bl	80103e6 <__malloc_lock>
 800fbc8:	4a1f      	ldr	r2, [pc, #124]	; (800fc48 <_free_r+0x98>)
 800fbca:	6813      	ldr	r3, [r2, #0]
 800fbcc:	4610      	mov	r0, r2
 800fbce:	b933      	cbnz	r3, 800fbde <_free_r+0x2e>
 800fbd0:	6063      	str	r3, [r4, #4]
 800fbd2:	6014      	str	r4, [r2, #0]
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbda:	f000 bc05 	b.w	80103e8 <__malloc_unlock>
 800fbde:	42a3      	cmp	r3, r4
 800fbe0:	d90c      	bls.n	800fbfc <_free_r+0x4c>
 800fbe2:	6821      	ldr	r1, [r4, #0]
 800fbe4:	1862      	adds	r2, r4, r1
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bf04      	itt	eq
 800fbea:	681a      	ldreq	r2, [r3, #0]
 800fbec:	685b      	ldreq	r3, [r3, #4]
 800fbee:	6063      	str	r3, [r4, #4]
 800fbf0:	bf04      	itt	eq
 800fbf2:	1852      	addeq	r2, r2, r1
 800fbf4:	6022      	streq	r2, [r4, #0]
 800fbf6:	6004      	str	r4, [r0, #0]
 800fbf8:	e7ec      	b.n	800fbd4 <_free_r+0x24>
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	685a      	ldr	r2, [r3, #4]
 800fbfe:	b10a      	cbz	r2, 800fc04 <_free_r+0x54>
 800fc00:	42a2      	cmp	r2, r4
 800fc02:	d9fa      	bls.n	800fbfa <_free_r+0x4a>
 800fc04:	6819      	ldr	r1, [r3, #0]
 800fc06:	1858      	adds	r0, r3, r1
 800fc08:	42a0      	cmp	r0, r4
 800fc0a:	d10b      	bne.n	800fc24 <_free_r+0x74>
 800fc0c:	6820      	ldr	r0, [r4, #0]
 800fc0e:	4401      	add	r1, r0
 800fc10:	1858      	adds	r0, r3, r1
 800fc12:	4282      	cmp	r2, r0
 800fc14:	6019      	str	r1, [r3, #0]
 800fc16:	d1dd      	bne.n	800fbd4 <_free_r+0x24>
 800fc18:	6810      	ldr	r0, [r2, #0]
 800fc1a:	6852      	ldr	r2, [r2, #4]
 800fc1c:	605a      	str	r2, [r3, #4]
 800fc1e:	4401      	add	r1, r0
 800fc20:	6019      	str	r1, [r3, #0]
 800fc22:	e7d7      	b.n	800fbd4 <_free_r+0x24>
 800fc24:	d902      	bls.n	800fc2c <_free_r+0x7c>
 800fc26:	230c      	movs	r3, #12
 800fc28:	602b      	str	r3, [r5, #0]
 800fc2a:	e7d3      	b.n	800fbd4 <_free_r+0x24>
 800fc2c:	6820      	ldr	r0, [r4, #0]
 800fc2e:	1821      	adds	r1, r4, r0
 800fc30:	428a      	cmp	r2, r1
 800fc32:	bf04      	itt	eq
 800fc34:	6811      	ldreq	r1, [r2, #0]
 800fc36:	6852      	ldreq	r2, [r2, #4]
 800fc38:	6062      	str	r2, [r4, #4]
 800fc3a:	bf04      	itt	eq
 800fc3c:	1809      	addeq	r1, r1, r0
 800fc3e:	6021      	streq	r1, [r4, #0]
 800fc40:	605c      	str	r4, [r3, #4]
 800fc42:	e7c7      	b.n	800fbd4 <_free_r+0x24>
 800fc44:	bd38      	pop	{r3, r4, r5, pc}
 800fc46:	bf00      	nop
 800fc48:	2001ebcc 	.word	0x2001ebcc

0800fc4c <_malloc_r>:
 800fc4c:	b570      	push	{r4, r5, r6, lr}
 800fc4e:	1ccd      	adds	r5, r1, #3
 800fc50:	f025 0503 	bic.w	r5, r5, #3
 800fc54:	3508      	adds	r5, #8
 800fc56:	2d0c      	cmp	r5, #12
 800fc58:	bf38      	it	cc
 800fc5a:	250c      	movcc	r5, #12
 800fc5c:	2d00      	cmp	r5, #0
 800fc5e:	4606      	mov	r6, r0
 800fc60:	db01      	blt.n	800fc66 <_malloc_r+0x1a>
 800fc62:	42a9      	cmp	r1, r5
 800fc64:	d903      	bls.n	800fc6e <_malloc_r+0x22>
 800fc66:	230c      	movs	r3, #12
 800fc68:	6033      	str	r3, [r6, #0]
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	bd70      	pop	{r4, r5, r6, pc}
 800fc6e:	f000 fbba 	bl	80103e6 <__malloc_lock>
 800fc72:	4a21      	ldr	r2, [pc, #132]	; (800fcf8 <_malloc_r+0xac>)
 800fc74:	6814      	ldr	r4, [r2, #0]
 800fc76:	4621      	mov	r1, r4
 800fc78:	b991      	cbnz	r1, 800fca0 <_malloc_r+0x54>
 800fc7a:	4c20      	ldr	r4, [pc, #128]	; (800fcfc <_malloc_r+0xb0>)
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	b91b      	cbnz	r3, 800fc88 <_malloc_r+0x3c>
 800fc80:	4630      	mov	r0, r6
 800fc82:	f000 facf 	bl	8010224 <_sbrk_r>
 800fc86:	6020      	str	r0, [r4, #0]
 800fc88:	4629      	mov	r1, r5
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f000 faca 	bl	8010224 <_sbrk_r>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	d124      	bne.n	800fcde <_malloc_r+0x92>
 800fc94:	230c      	movs	r3, #12
 800fc96:	6033      	str	r3, [r6, #0]
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f000 fba5 	bl	80103e8 <__malloc_unlock>
 800fc9e:	e7e4      	b.n	800fc6a <_malloc_r+0x1e>
 800fca0:	680b      	ldr	r3, [r1, #0]
 800fca2:	1b5b      	subs	r3, r3, r5
 800fca4:	d418      	bmi.n	800fcd8 <_malloc_r+0x8c>
 800fca6:	2b0b      	cmp	r3, #11
 800fca8:	d90f      	bls.n	800fcca <_malloc_r+0x7e>
 800fcaa:	600b      	str	r3, [r1, #0]
 800fcac:	50cd      	str	r5, [r1, r3]
 800fcae:	18cc      	adds	r4, r1, r3
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f000 fb99 	bl	80103e8 <__malloc_unlock>
 800fcb6:	f104 000b 	add.w	r0, r4, #11
 800fcba:	1d23      	adds	r3, r4, #4
 800fcbc:	f020 0007 	bic.w	r0, r0, #7
 800fcc0:	1ac3      	subs	r3, r0, r3
 800fcc2:	d0d3      	beq.n	800fc6c <_malloc_r+0x20>
 800fcc4:	425a      	negs	r2, r3
 800fcc6:	50e2      	str	r2, [r4, r3]
 800fcc8:	e7d0      	b.n	800fc6c <_malloc_r+0x20>
 800fcca:	428c      	cmp	r4, r1
 800fccc:	684b      	ldr	r3, [r1, #4]
 800fcce:	bf16      	itet	ne
 800fcd0:	6063      	strne	r3, [r4, #4]
 800fcd2:	6013      	streq	r3, [r2, #0]
 800fcd4:	460c      	movne	r4, r1
 800fcd6:	e7eb      	b.n	800fcb0 <_malloc_r+0x64>
 800fcd8:	460c      	mov	r4, r1
 800fcda:	6849      	ldr	r1, [r1, #4]
 800fcdc:	e7cc      	b.n	800fc78 <_malloc_r+0x2c>
 800fcde:	1cc4      	adds	r4, r0, #3
 800fce0:	f024 0403 	bic.w	r4, r4, #3
 800fce4:	42a0      	cmp	r0, r4
 800fce6:	d005      	beq.n	800fcf4 <_malloc_r+0xa8>
 800fce8:	1a21      	subs	r1, r4, r0
 800fcea:	4630      	mov	r0, r6
 800fcec:	f000 fa9a 	bl	8010224 <_sbrk_r>
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d0cf      	beq.n	800fc94 <_malloc_r+0x48>
 800fcf4:	6025      	str	r5, [r4, #0]
 800fcf6:	e7db      	b.n	800fcb0 <_malloc_r+0x64>
 800fcf8:	2001ebcc 	.word	0x2001ebcc
 800fcfc:	2001ebd0 	.word	0x2001ebd0

0800fd00 <__ssputs_r>:
 800fd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd04:	688e      	ldr	r6, [r1, #8]
 800fd06:	429e      	cmp	r6, r3
 800fd08:	4682      	mov	sl, r0
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	4690      	mov	r8, r2
 800fd0e:	4699      	mov	r9, r3
 800fd10:	d837      	bhi.n	800fd82 <__ssputs_r+0x82>
 800fd12:	898a      	ldrh	r2, [r1, #12]
 800fd14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd18:	d031      	beq.n	800fd7e <__ssputs_r+0x7e>
 800fd1a:	6825      	ldr	r5, [r4, #0]
 800fd1c:	6909      	ldr	r1, [r1, #16]
 800fd1e:	1a6f      	subs	r7, r5, r1
 800fd20:	6965      	ldr	r5, [r4, #20]
 800fd22:	2302      	movs	r3, #2
 800fd24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd28:	fb95 f5f3 	sdiv	r5, r5, r3
 800fd2c:	f109 0301 	add.w	r3, r9, #1
 800fd30:	443b      	add	r3, r7
 800fd32:	429d      	cmp	r5, r3
 800fd34:	bf38      	it	cc
 800fd36:	461d      	movcc	r5, r3
 800fd38:	0553      	lsls	r3, r2, #21
 800fd3a:	d530      	bpl.n	800fd9e <__ssputs_r+0x9e>
 800fd3c:	4629      	mov	r1, r5
 800fd3e:	f7ff ff85 	bl	800fc4c <_malloc_r>
 800fd42:	4606      	mov	r6, r0
 800fd44:	b950      	cbnz	r0, 800fd5c <__ssputs_r+0x5c>
 800fd46:	230c      	movs	r3, #12
 800fd48:	f8ca 3000 	str.w	r3, [sl]
 800fd4c:	89a3      	ldrh	r3, [r4, #12]
 800fd4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd52:	81a3      	strh	r3, [r4, #12]
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295
 800fd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5c:	463a      	mov	r2, r7
 800fd5e:	6921      	ldr	r1, [r4, #16]
 800fd60:	f7fc f93e 	bl	800bfe0 <memcpy>
 800fd64:	89a3      	ldrh	r3, [r4, #12]
 800fd66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd6e:	81a3      	strh	r3, [r4, #12]
 800fd70:	6126      	str	r6, [r4, #16]
 800fd72:	6165      	str	r5, [r4, #20]
 800fd74:	443e      	add	r6, r7
 800fd76:	1bed      	subs	r5, r5, r7
 800fd78:	6026      	str	r6, [r4, #0]
 800fd7a:	60a5      	str	r5, [r4, #8]
 800fd7c:	464e      	mov	r6, r9
 800fd7e:	454e      	cmp	r6, r9
 800fd80:	d900      	bls.n	800fd84 <__ssputs_r+0x84>
 800fd82:	464e      	mov	r6, r9
 800fd84:	4632      	mov	r2, r6
 800fd86:	4641      	mov	r1, r8
 800fd88:	6820      	ldr	r0, [r4, #0]
 800fd8a:	f000 fb13 	bl	80103b4 <memmove>
 800fd8e:	68a3      	ldr	r3, [r4, #8]
 800fd90:	1b9b      	subs	r3, r3, r6
 800fd92:	60a3      	str	r3, [r4, #8]
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	441e      	add	r6, r3
 800fd98:	6026      	str	r6, [r4, #0]
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	e7dc      	b.n	800fd58 <__ssputs_r+0x58>
 800fd9e:	462a      	mov	r2, r5
 800fda0:	f000 fb23 	bl	80103ea <_realloc_r>
 800fda4:	4606      	mov	r6, r0
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d1e2      	bne.n	800fd70 <__ssputs_r+0x70>
 800fdaa:	6921      	ldr	r1, [r4, #16]
 800fdac:	4650      	mov	r0, sl
 800fdae:	f7ff feff 	bl	800fbb0 <_free_r>
 800fdb2:	e7c8      	b.n	800fd46 <__ssputs_r+0x46>

0800fdb4 <_svfiprintf_r>:
 800fdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb8:	461d      	mov	r5, r3
 800fdba:	898b      	ldrh	r3, [r1, #12]
 800fdbc:	061f      	lsls	r7, r3, #24
 800fdbe:	b09d      	sub	sp, #116	; 0x74
 800fdc0:	4680      	mov	r8, r0
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	4616      	mov	r6, r2
 800fdc6:	d50f      	bpl.n	800fde8 <_svfiprintf_r+0x34>
 800fdc8:	690b      	ldr	r3, [r1, #16]
 800fdca:	b96b      	cbnz	r3, 800fde8 <_svfiprintf_r+0x34>
 800fdcc:	2140      	movs	r1, #64	; 0x40
 800fdce:	f7ff ff3d 	bl	800fc4c <_malloc_r>
 800fdd2:	6020      	str	r0, [r4, #0]
 800fdd4:	6120      	str	r0, [r4, #16]
 800fdd6:	b928      	cbnz	r0, 800fde4 <_svfiprintf_r+0x30>
 800fdd8:	230c      	movs	r3, #12
 800fdda:	f8c8 3000 	str.w	r3, [r8]
 800fdde:	f04f 30ff 	mov.w	r0, #4294967295
 800fde2:	e0c8      	b.n	800ff76 <_svfiprintf_r+0x1c2>
 800fde4:	2340      	movs	r3, #64	; 0x40
 800fde6:	6163      	str	r3, [r4, #20]
 800fde8:	2300      	movs	r3, #0
 800fdea:	9309      	str	r3, [sp, #36]	; 0x24
 800fdec:	2320      	movs	r3, #32
 800fdee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdf2:	2330      	movs	r3, #48	; 0x30
 800fdf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdf8:	9503      	str	r5, [sp, #12]
 800fdfa:	f04f 0b01 	mov.w	fp, #1
 800fdfe:	4637      	mov	r7, r6
 800fe00:	463d      	mov	r5, r7
 800fe02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe06:	b10b      	cbz	r3, 800fe0c <_svfiprintf_r+0x58>
 800fe08:	2b25      	cmp	r3, #37	; 0x25
 800fe0a:	d13e      	bne.n	800fe8a <_svfiprintf_r+0xd6>
 800fe0c:	ebb7 0a06 	subs.w	sl, r7, r6
 800fe10:	d00b      	beq.n	800fe2a <_svfiprintf_r+0x76>
 800fe12:	4653      	mov	r3, sl
 800fe14:	4632      	mov	r2, r6
 800fe16:	4621      	mov	r1, r4
 800fe18:	4640      	mov	r0, r8
 800fe1a:	f7ff ff71 	bl	800fd00 <__ssputs_r>
 800fe1e:	3001      	adds	r0, #1
 800fe20:	f000 80a4 	beq.w	800ff6c <_svfiprintf_r+0x1b8>
 800fe24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe26:	4453      	add	r3, sl
 800fe28:	9309      	str	r3, [sp, #36]	; 0x24
 800fe2a:	783b      	ldrb	r3, [r7, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f000 809d 	beq.w	800ff6c <_svfiprintf_r+0x1b8>
 800fe32:	2300      	movs	r3, #0
 800fe34:	f04f 32ff 	mov.w	r2, #4294967295
 800fe38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe3c:	9304      	str	r3, [sp, #16]
 800fe3e:	9307      	str	r3, [sp, #28]
 800fe40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe44:	931a      	str	r3, [sp, #104]	; 0x68
 800fe46:	462f      	mov	r7, r5
 800fe48:	2205      	movs	r2, #5
 800fe4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fe4e:	4850      	ldr	r0, [pc, #320]	; (800ff90 <_svfiprintf_r+0x1dc>)
 800fe50:	f7f0 f9c6 	bl	80001e0 <memchr>
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	b9d0      	cbnz	r0, 800fe8e <_svfiprintf_r+0xda>
 800fe58:	06d9      	lsls	r1, r3, #27
 800fe5a:	bf44      	itt	mi
 800fe5c:	2220      	movmi	r2, #32
 800fe5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe62:	071a      	lsls	r2, r3, #28
 800fe64:	bf44      	itt	mi
 800fe66:	222b      	movmi	r2, #43	; 0x2b
 800fe68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe6c:	782a      	ldrb	r2, [r5, #0]
 800fe6e:	2a2a      	cmp	r2, #42	; 0x2a
 800fe70:	d015      	beq.n	800fe9e <_svfiprintf_r+0xea>
 800fe72:	9a07      	ldr	r2, [sp, #28]
 800fe74:	462f      	mov	r7, r5
 800fe76:	2000      	movs	r0, #0
 800fe78:	250a      	movs	r5, #10
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe80:	3b30      	subs	r3, #48	; 0x30
 800fe82:	2b09      	cmp	r3, #9
 800fe84:	d94d      	bls.n	800ff22 <_svfiprintf_r+0x16e>
 800fe86:	b1b8      	cbz	r0, 800feb8 <_svfiprintf_r+0x104>
 800fe88:	e00f      	b.n	800feaa <_svfiprintf_r+0xf6>
 800fe8a:	462f      	mov	r7, r5
 800fe8c:	e7b8      	b.n	800fe00 <_svfiprintf_r+0x4c>
 800fe8e:	4a40      	ldr	r2, [pc, #256]	; (800ff90 <_svfiprintf_r+0x1dc>)
 800fe90:	1a80      	subs	r0, r0, r2
 800fe92:	fa0b f000 	lsl.w	r0, fp, r0
 800fe96:	4318      	orrs	r0, r3
 800fe98:	9004      	str	r0, [sp, #16]
 800fe9a:	463d      	mov	r5, r7
 800fe9c:	e7d3      	b.n	800fe46 <_svfiprintf_r+0x92>
 800fe9e:	9a03      	ldr	r2, [sp, #12]
 800fea0:	1d11      	adds	r1, r2, #4
 800fea2:	6812      	ldr	r2, [r2, #0]
 800fea4:	9103      	str	r1, [sp, #12]
 800fea6:	2a00      	cmp	r2, #0
 800fea8:	db01      	blt.n	800feae <_svfiprintf_r+0xfa>
 800feaa:	9207      	str	r2, [sp, #28]
 800feac:	e004      	b.n	800feb8 <_svfiprintf_r+0x104>
 800feae:	4252      	negs	r2, r2
 800feb0:	f043 0302 	orr.w	r3, r3, #2
 800feb4:	9207      	str	r2, [sp, #28]
 800feb6:	9304      	str	r3, [sp, #16]
 800feb8:	783b      	ldrb	r3, [r7, #0]
 800feba:	2b2e      	cmp	r3, #46	; 0x2e
 800febc:	d10c      	bne.n	800fed8 <_svfiprintf_r+0x124>
 800febe:	787b      	ldrb	r3, [r7, #1]
 800fec0:	2b2a      	cmp	r3, #42	; 0x2a
 800fec2:	d133      	bne.n	800ff2c <_svfiprintf_r+0x178>
 800fec4:	9b03      	ldr	r3, [sp, #12]
 800fec6:	1d1a      	adds	r2, r3, #4
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	9203      	str	r2, [sp, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	bfb8      	it	lt
 800fed0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fed4:	3702      	adds	r7, #2
 800fed6:	9305      	str	r3, [sp, #20]
 800fed8:	4d2e      	ldr	r5, [pc, #184]	; (800ff94 <_svfiprintf_r+0x1e0>)
 800feda:	7839      	ldrb	r1, [r7, #0]
 800fedc:	2203      	movs	r2, #3
 800fede:	4628      	mov	r0, r5
 800fee0:	f7f0 f97e 	bl	80001e0 <memchr>
 800fee4:	b138      	cbz	r0, 800fef6 <_svfiprintf_r+0x142>
 800fee6:	2340      	movs	r3, #64	; 0x40
 800fee8:	1b40      	subs	r0, r0, r5
 800feea:	fa03 f000 	lsl.w	r0, r3, r0
 800feee:	9b04      	ldr	r3, [sp, #16]
 800fef0:	4303      	orrs	r3, r0
 800fef2:	3701      	adds	r7, #1
 800fef4:	9304      	str	r3, [sp, #16]
 800fef6:	7839      	ldrb	r1, [r7, #0]
 800fef8:	4827      	ldr	r0, [pc, #156]	; (800ff98 <_svfiprintf_r+0x1e4>)
 800fefa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fefe:	2206      	movs	r2, #6
 800ff00:	1c7e      	adds	r6, r7, #1
 800ff02:	f7f0 f96d 	bl	80001e0 <memchr>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d038      	beq.n	800ff7c <_svfiprintf_r+0x1c8>
 800ff0a:	4b24      	ldr	r3, [pc, #144]	; (800ff9c <_svfiprintf_r+0x1e8>)
 800ff0c:	bb13      	cbnz	r3, 800ff54 <_svfiprintf_r+0x1a0>
 800ff0e:	9b03      	ldr	r3, [sp, #12]
 800ff10:	3307      	adds	r3, #7
 800ff12:	f023 0307 	bic.w	r3, r3, #7
 800ff16:	3308      	adds	r3, #8
 800ff18:	9303      	str	r3, [sp, #12]
 800ff1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff1c:	444b      	add	r3, r9
 800ff1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff20:	e76d      	b.n	800fdfe <_svfiprintf_r+0x4a>
 800ff22:	fb05 3202 	mla	r2, r5, r2, r3
 800ff26:	2001      	movs	r0, #1
 800ff28:	460f      	mov	r7, r1
 800ff2a:	e7a6      	b.n	800fe7a <_svfiprintf_r+0xc6>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	3701      	adds	r7, #1
 800ff30:	9305      	str	r3, [sp, #20]
 800ff32:	4619      	mov	r1, r3
 800ff34:	250a      	movs	r5, #10
 800ff36:	4638      	mov	r0, r7
 800ff38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff3c:	3a30      	subs	r2, #48	; 0x30
 800ff3e:	2a09      	cmp	r2, #9
 800ff40:	d903      	bls.n	800ff4a <_svfiprintf_r+0x196>
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d0c8      	beq.n	800fed8 <_svfiprintf_r+0x124>
 800ff46:	9105      	str	r1, [sp, #20]
 800ff48:	e7c6      	b.n	800fed8 <_svfiprintf_r+0x124>
 800ff4a:	fb05 2101 	mla	r1, r5, r1, r2
 800ff4e:	2301      	movs	r3, #1
 800ff50:	4607      	mov	r7, r0
 800ff52:	e7f0      	b.n	800ff36 <_svfiprintf_r+0x182>
 800ff54:	ab03      	add	r3, sp, #12
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	4622      	mov	r2, r4
 800ff5a:	4b11      	ldr	r3, [pc, #68]	; (800ffa0 <_svfiprintf_r+0x1ec>)
 800ff5c:	a904      	add	r1, sp, #16
 800ff5e:	4640      	mov	r0, r8
 800ff60:	f7fc f8e6 	bl	800c130 <_printf_float>
 800ff64:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ff68:	4681      	mov	r9, r0
 800ff6a:	d1d6      	bne.n	800ff1a <_svfiprintf_r+0x166>
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	065b      	lsls	r3, r3, #25
 800ff70:	f53f af35 	bmi.w	800fdde <_svfiprintf_r+0x2a>
 800ff74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff76:	b01d      	add	sp, #116	; 0x74
 800ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7c:	ab03      	add	r3, sp, #12
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	4622      	mov	r2, r4
 800ff82:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <_svfiprintf_r+0x1ec>)
 800ff84:	a904      	add	r1, sp, #16
 800ff86:	4640      	mov	r0, r8
 800ff88:	f7fc fb88 	bl	800c69c <_printf_i>
 800ff8c:	e7ea      	b.n	800ff64 <_svfiprintf_r+0x1b0>
 800ff8e:	bf00      	nop
 800ff90:	0801090c 	.word	0x0801090c
 800ff94:	08010912 	.word	0x08010912
 800ff98:	08010916 	.word	0x08010916
 800ff9c:	0800c131 	.word	0x0800c131
 800ffa0:	0800fd01 	.word	0x0800fd01

0800ffa4 <__sfputc_r>:
 800ffa4:	6893      	ldr	r3, [r2, #8]
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	b410      	push	{r4}
 800ffac:	6093      	str	r3, [r2, #8]
 800ffae:	da08      	bge.n	800ffc2 <__sfputc_r+0x1e>
 800ffb0:	6994      	ldr	r4, [r2, #24]
 800ffb2:	42a3      	cmp	r3, r4
 800ffb4:	db01      	blt.n	800ffba <__sfputc_r+0x16>
 800ffb6:	290a      	cmp	r1, #10
 800ffb8:	d103      	bne.n	800ffc2 <__sfputc_r+0x1e>
 800ffba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffbe:	f7fd bdb1 	b.w	800db24 <__swbuf_r>
 800ffc2:	6813      	ldr	r3, [r2, #0]
 800ffc4:	1c58      	adds	r0, r3, #1
 800ffc6:	6010      	str	r0, [r2, #0]
 800ffc8:	7019      	strb	r1, [r3, #0]
 800ffca:	4608      	mov	r0, r1
 800ffcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffd0:	4770      	bx	lr

0800ffd2 <__sfputs_r>:
 800ffd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	460f      	mov	r7, r1
 800ffd8:	4614      	mov	r4, r2
 800ffda:	18d5      	adds	r5, r2, r3
 800ffdc:	42ac      	cmp	r4, r5
 800ffde:	d101      	bne.n	800ffe4 <__sfputs_r+0x12>
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	e007      	b.n	800fff4 <__sfputs_r+0x22>
 800ffe4:	463a      	mov	r2, r7
 800ffe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffea:	4630      	mov	r0, r6
 800ffec:	f7ff ffda 	bl	800ffa4 <__sfputc_r>
 800fff0:	1c43      	adds	r3, r0, #1
 800fff2:	d1f3      	bne.n	800ffdc <__sfputs_r+0xa>
 800fff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fff8 <_vfiprintf_r>:
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	460c      	mov	r4, r1
 800fffe:	b09d      	sub	sp, #116	; 0x74
 8010000:	4617      	mov	r7, r2
 8010002:	461d      	mov	r5, r3
 8010004:	4606      	mov	r6, r0
 8010006:	b118      	cbz	r0, 8010010 <_vfiprintf_r+0x18>
 8010008:	6983      	ldr	r3, [r0, #24]
 801000a:	b90b      	cbnz	r3, 8010010 <_vfiprintf_r+0x18>
 801000c:	f7fe fd80 	bl	800eb10 <__sinit>
 8010010:	4b7c      	ldr	r3, [pc, #496]	; (8010204 <_vfiprintf_r+0x20c>)
 8010012:	429c      	cmp	r4, r3
 8010014:	d158      	bne.n	80100c8 <_vfiprintf_r+0xd0>
 8010016:	6874      	ldr	r4, [r6, #4]
 8010018:	89a3      	ldrh	r3, [r4, #12]
 801001a:	0718      	lsls	r0, r3, #28
 801001c:	d55e      	bpl.n	80100dc <_vfiprintf_r+0xe4>
 801001e:	6923      	ldr	r3, [r4, #16]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d05b      	beq.n	80100dc <_vfiprintf_r+0xe4>
 8010024:	2300      	movs	r3, #0
 8010026:	9309      	str	r3, [sp, #36]	; 0x24
 8010028:	2320      	movs	r3, #32
 801002a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801002e:	2330      	movs	r3, #48	; 0x30
 8010030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010034:	9503      	str	r5, [sp, #12]
 8010036:	f04f 0b01 	mov.w	fp, #1
 801003a:	46b8      	mov	r8, r7
 801003c:	4645      	mov	r5, r8
 801003e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010042:	b10b      	cbz	r3, 8010048 <_vfiprintf_r+0x50>
 8010044:	2b25      	cmp	r3, #37	; 0x25
 8010046:	d154      	bne.n	80100f2 <_vfiprintf_r+0xfa>
 8010048:	ebb8 0a07 	subs.w	sl, r8, r7
 801004c:	d00b      	beq.n	8010066 <_vfiprintf_r+0x6e>
 801004e:	4653      	mov	r3, sl
 8010050:	463a      	mov	r2, r7
 8010052:	4621      	mov	r1, r4
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff ffbc 	bl	800ffd2 <__sfputs_r>
 801005a:	3001      	adds	r0, #1
 801005c:	f000 80c2 	beq.w	80101e4 <_vfiprintf_r+0x1ec>
 8010060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010062:	4453      	add	r3, sl
 8010064:	9309      	str	r3, [sp, #36]	; 0x24
 8010066:	f898 3000 	ldrb.w	r3, [r8]
 801006a:	2b00      	cmp	r3, #0
 801006c:	f000 80ba 	beq.w	80101e4 <_vfiprintf_r+0x1ec>
 8010070:	2300      	movs	r3, #0
 8010072:	f04f 32ff 	mov.w	r2, #4294967295
 8010076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801007a:	9304      	str	r3, [sp, #16]
 801007c:	9307      	str	r3, [sp, #28]
 801007e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010082:	931a      	str	r3, [sp, #104]	; 0x68
 8010084:	46a8      	mov	r8, r5
 8010086:	2205      	movs	r2, #5
 8010088:	f818 1b01 	ldrb.w	r1, [r8], #1
 801008c:	485e      	ldr	r0, [pc, #376]	; (8010208 <_vfiprintf_r+0x210>)
 801008e:	f7f0 f8a7 	bl	80001e0 <memchr>
 8010092:	9b04      	ldr	r3, [sp, #16]
 8010094:	bb78      	cbnz	r0, 80100f6 <_vfiprintf_r+0xfe>
 8010096:	06d9      	lsls	r1, r3, #27
 8010098:	bf44      	itt	mi
 801009a:	2220      	movmi	r2, #32
 801009c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80100a0:	071a      	lsls	r2, r3, #28
 80100a2:	bf44      	itt	mi
 80100a4:	222b      	movmi	r2, #43	; 0x2b
 80100a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80100aa:	782a      	ldrb	r2, [r5, #0]
 80100ac:	2a2a      	cmp	r2, #42	; 0x2a
 80100ae:	d02a      	beq.n	8010106 <_vfiprintf_r+0x10e>
 80100b0:	9a07      	ldr	r2, [sp, #28]
 80100b2:	46a8      	mov	r8, r5
 80100b4:	2000      	movs	r0, #0
 80100b6:	250a      	movs	r5, #10
 80100b8:	4641      	mov	r1, r8
 80100ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100be:	3b30      	subs	r3, #48	; 0x30
 80100c0:	2b09      	cmp	r3, #9
 80100c2:	d969      	bls.n	8010198 <_vfiprintf_r+0x1a0>
 80100c4:	b360      	cbz	r0, 8010120 <_vfiprintf_r+0x128>
 80100c6:	e024      	b.n	8010112 <_vfiprintf_r+0x11a>
 80100c8:	4b50      	ldr	r3, [pc, #320]	; (801020c <_vfiprintf_r+0x214>)
 80100ca:	429c      	cmp	r4, r3
 80100cc:	d101      	bne.n	80100d2 <_vfiprintf_r+0xda>
 80100ce:	68b4      	ldr	r4, [r6, #8]
 80100d0:	e7a2      	b.n	8010018 <_vfiprintf_r+0x20>
 80100d2:	4b4f      	ldr	r3, [pc, #316]	; (8010210 <_vfiprintf_r+0x218>)
 80100d4:	429c      	cmp	r4, r3
 80100d6:	bf08      	it	eq
 80100d8:	68f4      	ldreq	r4, [r6, #12]
 80100da:	e79d      	b.n	8010018 <_vfiprintf_r+0x20>
 80100dc:	4621      	mov	r1, r4
 80100de:	4630      	mov	r0, r6
 80100e0:	f7fd fd72 	bl	800dbc8 <__swsetup_r>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d09d      	beq.n	8010024 <_vfiprintf_r+0x2c>
 80100e8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ec:	b01d      	add	sp, #116	; 0x74
 80100ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f2:	46a8      	mov	r8, r5
 80100f4:	e7a2      	b.n	801003c <_vfiprintf_r+0x44>
 80100f6:	4a44      	ldr	r2, [pc, #272]	; (8010208 <_vfiprintf_r+0x210>)
 80100f8:	1a80      	subs	r0, r0, r2
 80100fa:	fa0b f000 	lsl.w	r0, fp, r0
 80100fe:	4318      	orrs	r0, r3
 8010100:	9004      	str	r0, [sp, #16]
 8010102:	4645      	mov	r5, r8
 8010104:	e7be      	b.n	8010084 <_vfiprintf_r+0x8c>
 8010106:	9a03      	ldr	r2, [sp, #12]
 8010108:	1d11      	adds	r1, r2, #4
 801010a:	6812      	ldr	r2, [r2, #0]
 801010c:	9103      	str	r1, [sp, #12]
 801010e:	2a00      	cmp	r2, #0
 8010110:	db01      	blt.n	8010116 <_vfiprintf_r+0x11e>
 8010112:	9207      	str	r2, [sp, #28]
 8010114:	e004      	b.n	8010120 <_vfiprintf_r+0x128>
 8010116:	4252      	negs	r2, r2
 8010118:	f043 0302 	orr.w	r3, r3, #2
 801011c:	9207      	str	r2, [sp, #28]
 801011e:	9304      	str	r3, [sp, #16]
 8010120:	f898 3000 	ldrb.w	r3, [r8]
 8010124:	2b2e      	cmp	r3, #46	; 0x2e
 8010126:	d10e      	bne.n	8010146 <_vfiprintf_r+0x14e>
 8010128:	f898 3001 	ldrb.w	r3, [r8, #1]
 801012c:	2b2a      	cmp	r3, #42	; 0x2a
 801012e:	d138      	bne.n	80101a2 <_vfiprintf_r+0x1aa>
 8010130:	9b03      	ldr	r3, [sp, #12]
 8010132:	1d1a      	adds	r2, r3, #4
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	9203      	str	r2, [sp, #12]
 8010138:	2b00      	cmp	r3, #0
 801013a:	bfb8      	it	lt
 801013c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010140:	f108 0802 	add.w	r8, r8, #2
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	4d33      	ldr	r5, [pc, #204]	; (8010214 <_vfiprintf_r+0x21c>)
 8010148:	f898 1000 	ldrb.w	r1, [r8]
 801014c:	2203      	movs	r2, #3
 801014e:	4628      	mov	r0, r5
 8010150:	f7f0 f846 	bl	80001e0 <memchr>
 8010154:	b140      	cbz	r0, 8010168 <_vfiprintf_r+0x170>
 8010156:	2340      	movs	r3, #64	; 0x40
 8010158:	1b40      	subs	r0, r0, r5
 801015a:	fa03 f000 	lsl.w	r0, r3, r0
 801015e:	9b04      	ldr	r3, [sp, #16]
 8010160:	4303      	orrs	r3, r0
 8010162:	f108 0801 	add.w	r8, r8, #1
 8010166:	9304      	str	r3, [sp, #16]
 8010168:	f898 1000 	ldrb.w	r1, [r8]
 801016c:	482a      	ldr	r0, [pc, #168]	; (8010218 <_vfiprintf_r+0x220>)
 801016e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010172:	2206      	movs	r2, #6
 8010174:	f108 0701 	add.w	r7, r8, #1
 8010178:	f7f0 f832 	bl	80001e0 <memchr>
 801017c:	2800      	cmp	r0, #0
 801017e:	d037      	beq.n	80101f0 <_vfiprintf_r+0x1f8>
 8010180:	4b26      	ldr	r3, [pc, #152]	; (801021c <_vfiprintf_r+0x224>)
 8010182:	bb1b      	cbnz	r3, 80101cc <_vfiprintf_r+0x1d4>
 8010184:	9b03      	ldr	r3, [sp, #12]
 8010186:	3307      	adds	r3, #7
 8010188:	f023 0307 	bic.w	r3, r3, #7
 801018c:	3308      	adds	r3, #8
 801018e:	9303      	str	r3, [sp, #12]
 8010190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010192:	444b      	add	r3, r9
 8010194:	9309      	str	r3, [sp, #36]	; 0x24
 8010196:	e750      	b.n	801003a <_vfiprintf_r+0x42>
 8010198:	fb05 3202 	mla	r2, r5, r2, r3
 801019c:	2001      	movs	r0, #1
 801019e:	4688      	mov	r8, r1
 80101a0:	e78a      	b.n	80100b8 <_vfiprintf_r+0xc0>
 80101a2:	2300      	movs	r3, #0
 80101a4:	f108 0801 	add.w	r8, r8, #1
 80101a8:	9305      	str	r3, [sp, #20]
 80101aa:	4619      	mov	r1, r3
 80101ac:	250a      	movs	r5, #10
 80101ae:	4640      	mov	r0, r8
 80101b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101b4:	3a30      	subs	r2, #48	; 0x30
 80101b6:	2a09      	cmp	r2, #9
 80101b8:	d903      	bls.n	80101c2 <_vfiprintf_r+0x1ca>
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d0c3      	beq.n	8010146 <_vfiprintf_r+0x14e>
 80101be:	9105      	str	r1, [sp, #20]
 80101c0:	e7c1      	b.n	8010146 <_vfiprintf_r+0x14e>
 80101c2:	fb05 2101 	mla	r1, r5, r1, r2
 80101c6:	2301      	movs	r3, #1
 80101c8:	4680      	mov	r8, r0
 80101ca:	e7f0      	b.n	80101ae <_vfiprintf_r+0x1b6>
 80101cc:	ab03      	add	r3, sp, #12
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4622      	mov	r2, r4
 80101d2:	4b13      	ldr	r3, [pc, #76]	; (8010220 <_vfiprintf_r+0x228>)
 80101d4:	a904      	add	r1, sp, #16
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7fb ffaa 	bl	800c130 <_printf_float>
 80101dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80101e0:	4681      	mov	r9, r0
 80101e2:	d1d5      	bne.n	8010190 <_vfiprintf_r+0x198>
 80101e4:	89a3      	ldrh	r3, [r4, #12]
 80101e6:	065b      	lsls	r3, r3, #25
 80101e8:	f53f af7e 	bmi.w	80100e8 <_vfiprintf_r+0xf0>
 80101ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ee:	e77d      	b.n	80100ec <_vfiprintf_r+0xf4>
 80101f0:	ab03      	add	r3, sp, #12
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	4622      	mov	r2, r4
 80101f6:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <_vfiprintf_r+0x228>)
 80101f8:	a904      	add	r1, sp, #16
 80101fa:	4630      	mov	r0, r6
 80101fc:	f7fc fa4e 	bl	800c69c <_printf_i>
 8010200:	e7ec      	b.n	80101dc <_vfiprintf_r+0x1e4>
 8010202:	bf00      	nop
 8010204:	080107c0 	.word	0x080107c0
 8010208:	0801090c 	.word	0x0801090c
 801020c:	080107e0 	.word	0x080107e0
 8010210:	080107a0 	.word	0x080107a0
 8010214:	08010912 	.word	0x08010912
 8010218:	08010916 	.word	0x08010916
 801021c:	0800c131 	.word	0x0800c131
 8010220:	0800ffd3 	.word	0x0800ffd3

08010224 <_sbrk_r>:
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	4c06      	ldr	r4, [pc, #24]	; (8010240 <_sbrk_r+0x1c>)
 8010228:	2300      	movs	r3, #0
 801022a:	4605      	mov	r5, r0
 801022c:	4608      	mov	r0, r1
 801022e:	6023      	str	r3, [r4, #0]
 8010230:	f7f6 fadc 	bl	80067ec <_sbrk>
 8010234:	1c43      	adds	r3, r0, #1
 8010236:	d102      	bne.n	801023e <_sbrk_r+0x1a>
 8010238:	6823      	ldr	r3, [r4, #0]
 801023a:	b103      	cbz	r3, 801023e <_sbrk_r+0x1a>
 801023c:	602b      	str	r3, [r5, #0]
 801023e:	bd38      	pop	{r3, r4, r5, pc}
 8010240:	2001f114 	.word	0x2001f114

08010244 <__sread>:
 8010244:	b510      	push	{r4, lr}
 8010246:	460c      	mov	r4, r1
 8010248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801024c:	f000 f8f4 	bl	8010438 <_read_r>
 8010250:	2800      	cmp	r0, #0
 8010252:	bfab      	itete	ge
 8010254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010256:	89a3      	ldrhlt	r3, [r4, #12]
 8010258:	181b      	addge	r3, r3, r0
 801025a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801025e:	bfac      	ite	ge
 8010260:	6563      	strge	r3, [r4, #84]	; 0x54
 8010262:	81a3      	strhlt	r3, [r4, #12]
 8010264:	bd10      	pop	{r4, pc}

08010266 <__swrite>:
 8010266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026a:	461f      	mov	r7, r3
 801026c:	898b      	ldrh	r3, [r1, #12]
 801026e:	05db      	lsls	r3, r3, #23
 8010270:	4605      	mov	r5, r0
 8010272:	460c      	mov	r4, r1
 8010274:	4616      	mov	r6, r2
 8010276:	d505      	bpl.n	8010284 <__swrite+0x1e>
 8010278:	2302      	movs	r3, #2
 801027a:	2200      	movs	r2, #0
 801027c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010280:	f000 f886 	bl	8010390 <_lseek_r>
 8010284:	89a3      	ldrh	r3, [r4, #12]
 8010286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801028a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801028e:	81a3      	strh	r3, [r4, #12]
 8010290:	4632      	mov	r2, r6
 8010292:	463b      	mov	r3, r7
 8010294:	4628      	mov	r0, r5
 8010296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	f000 b835 	b.w	8010308 <_write_r>

0801029e <__sseek>:
 801029e:	b510      	push	{r4, lr}
 80102a0:	460c      	mov	r4, r1
 80102a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a6:	f000 f873 	bl	8010390 <_lseek_r>
 80102aa:	1c43      	adds	r3, r0, #1
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	bf15      	itete	ne
 80102b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80102b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102ba:	81a3      	strheq	r3, [r4, #12]
 80102bc:	bf18      	it	ne
 80102be:	81a3      	strhne	r3, [r4, #12]
 80102c0:	bd10      	pop	{r4, pc}

080102c2 <__sclose>:
 80102c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102c6:	f000 b831 	b.w	801032c <_close_r>

080102ca <strncmp>:
 80102ca:	b510      	push	{r4, lr}
 80102cc:	b16a      	cbz	r2, 80102ea <strncmp+0x20>
 80102ce:	3901      	subs	r1, #1
 80102d0:	1884      	adds	r4, r0, r2
 80102d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80102d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80102da:	4293      	cmp	r3, r2
 80102dc:	d103      	bne.n	80102e6 <strncmp+0x1c>
 80102de:	42a0      	cmp	r0, r4
 80102e0:	d001      	beq.n	80102e6 <strncmp+0x1c>
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1f5      	bne.n	80102d2 <strncmp+0x8>
 80102e6:	1a98      	subs	r0, r3, r2
 80102e8:	bd10      	pop	{r4, pc}
 80102ea:	4610      	mov	r0, r2
 80102ec:	e7fc      	b.n	80102e8 <strncmp+0x1e>

080102ee <__ascii_wctomb>:
 80102ee:	b149      	cbz	r1, 8010304 <__ascii_wctomb+0x16>
 80102f0:	2aff      	cmp	r2, #255	; 0xff
 80102f2:	bf85      	ittet	hi
 80102f4:	238a      	movhi	r3, #138	; 0x8a
 80102f6:	6003      	strhi	r3, [r0, #0]
 80102f8:	700a      	strbls	r2, [r1, #0]
 80102fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80102fe:	bf98      	it	ls
 8010300:	2001      	movls	r0, #1
 8010302:	4770      	bx	lr
 8010304:	4608      	mov	r0, r1
 8010306:	4770      	bx	lr

08010308 <_write_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4c07      	ldr	r4, [pc, #28]	; (8010328 <_write_r+0x20>)
 801030c:	4605      	mov	r5, r0
 801030e:	4608      	mov	r0, r1
 8010310:	4611      	mov	r1, r2
 8010312:	2200      	movs	r2, #0
 8010314:	6022      	str	r2, [r4, #0]
 8010316:	461a      	mov	r2, r3
 8010318:	f7f6 fa17 	bl	800674a <_write>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_write_r+0x1e>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	b103      	cbz	r3, 8010326 <_write_r+0x1e>
 8010324:	602b      	str	r3, [r5, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	2001f114 	.word	0x2001f114

0801032c <_close_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4c06      	ldr	r4, [pc, #24]	; (8010348 <_close_r+0x1c>)
 8010330:	2300      	movs	r3, #0
 8010332:	4605      	mov	r5, r0
 8010334:	4608      	mov	r0, r1
 8010336:	6023      	str	r3, [r4, #0]
 8010338:	f7f6 fa23 	bl	8006782 <_close>
 801033c:	1c43      	adds	r3, r0, #1
 801033e:	d102      	bne.n	8010346 <_close_r+0x1a>
 8010340:	6823      	ldr	r3, [r4, #0]
 8010342:	b103      	cbz	r3, 8010346 <_close_r+0x1a>
 8010344:	602b      	str	r3, [r5, #0]
 8010346:	bd38      	pop	{r3, r4, r5, pc}
 8010348:	2001f114 	.word	0x2001f114

0801034c <_fstat_r>:
 801034c:	b538      	push	{r3, r4, r5, lr}
 801034e:	4c07      	ldr	r4, [pc, #28]	; (801036c <_fstat_r+0x20>)
 8010350:	2300      	movs	r3, #0
 8010352:	4605      	mov	r5, r0
 8010354:	4608      	mov	r0, r1
 8010356:	4611      	mov	r1, r2
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	f7f6 fa1e 	bl	800679a <_fstat>
 801035e:	1c43      	adds	r3, r0, #1
 8010360:	d102      	bne.n	8010368 <_fstat_r+0x1c>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	b103      	cbz	r3, 8010368 <_fstat_r+0x1c>
 8010366:	602b      	str	r3, [r5, #0]
 8010368:	bd38      	pop	{r3, r4, r5, pc}
 801036a:	bf00      	nop
 801036c:	2001f114 	.word	0x2001f114

08010370 <_isatty_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4c06      	ldr	r4, [pc, #24]	; (801038c <_isatty_r+0x1c>)
 8010374:	2300      	movs	r3, #0
 8010376:	4605      	mov	r5, r0
 8010378:	4608      	mov	r0, r1
 801037a:	6023      	str	r3, [r4, #0]
 801037c:	f7f6 fa1d 	bl	80067ba <_isatty>
 8010380:	1c43      	adds	r3, r0, #1
 8010382:	d102      	bne.n	801038a <_isatty_r+0x1a>
 8010384:	6823      	ldr	r3, [r4, #0]
 8010386:	b103      	cbz	r3, 801038a <_isatty_r+0x1a>
 8010388:	602b      	str	r3, [r5, #0]
 801038a:	bd38      	pop	{r3, r4, r5, pc}
 801038c:	2001f114 	.word	0x2001f114

08010390 <_lseek_r>:
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	4c07      	ldr	r4, [pc, #28]	; (80103b0 <_lseek_r+0x20>)
 8010394:	4605      	mov	r5, r0
 8010396:	4608      	mov	r0, r1
 8010398:	4611      	mov	r1, r2
 801039a:	2200      	movs	r2, #0
 801039c:	6022      	str	r2, [r4, #0]
 801039e:	461a      	mov	r2, r3
 80103a0:	f7f6 fa16 	bl	80067d0 <_lseek>
 80103a4:	1c43      	adds	r3, r0, #1
 80103a6:	d102      	bne.n	80103ae <_lseek_r+0x1e>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	b103      	cbz	r3, 80103ae <_lseek_r+0x1e>
 80103ac:	602b      	str	r3, [r5, #0]
 80103ae:	bd38      	pop	{r3, r4, r5, pc}
 80103b0:	2001f114 	.word	0x2001f114

080103b4 <memmove>:
 80103b4:	4288      	cmp	r0, r1
 80103b6:	b510      	push	{r4, lr}
 80103b8:	eb01 0302 	add.w	r3, r1, r2
 80103bc:	d807      	bhi.n	80103ce <memmove+0x1a>
 80103be:	1e42      	subs	r2, r0, #1
 80103c0:	4299      	cmp	r1, r3
 80103c2:	d00a      	beq.n	80103da <memmove+0x26>
 80103c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80103cc:	e7f8      	b.n	80103c0 <memmove+0xc>
 80103ce:	4283      	cmp	r3, r0
 80103d0:	d9f5      	bls.n	80103be <memmove+0xa>
 80103d2:	1881      	adds	r1, r0, r2
 80103d4:	1ad2      	subs	r2, r2, r3
 80103d6:	42d3      	cmn	r3, r2
 80103d8:	d100      	bne.n	80103dc <memmove+0x28>
 80103da:	bd10      	pop	{r4, pc}
 80103dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80103e4:	e7f7      	b.n	80103d6 <memmove+0x22>

080103e6 <__malloc_lock>:
 80103e6:	4770      	bx	lr

080103e8 <__malloc_unlock>:
 80103e8:	4770      	bx	lr

080103ea <_realloc_r>:
 80103ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ec:	4607      	mov	r7, r0
 80103ee:	4614      	mov	r4, r2
 80103f0:	460e      	mov	r6, r1
 80103f2:	b921      	cbnz	r1, 80103fe <_realloc_r+0x14>
 80103f4:	4611      	mov	r1, r2
 80103f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80103fa:	f7ff bc27 	b.w	800fc4c <_malloc_r>
 80103fe:	b922      	cbnz	r2, 801040a <_realloc_r+0x20>
 8010400:	f7ff fbd6 	bl	800fbb0 <_free_r>
 8010404:	4625      	mov	r5, r4
 8010406:	4628      	mov	r0, r5
 8010408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801040a:	f000 f827 	bl	801045c <_malloc_usable_size_r>
 801040e:	42a0      	cmp	r0, r4
 8010410:	d20f      	bcs.n	8010432 <_realloc_r+0x48>
 8010412:	4621      	mov	r1, r4
 8010414:	4638      	mov	r0, r7
 8010416:	f7ff fc19 	bl	800fc4c <_malloc_r>
 801041a:	4605      	mov	r5, r0
 801041c:	2800      	cmp	r0, #0
 801041e:	d0f2      	beq.n	8010406 <_realloc_r+0x1c>
 8010420:	4631      	mov	r1, r6
 8010422:	4622      	mov	r2, r4
 8010424:	f7fb fddc 	bl	800bfe0 <memcpy>
 8010428:	4631      	mov	r1, r6
 801042a:	4638      	mov	r0, r7
 801042c:	f7ff fbc0 	bl	800fbb0 <_free_r>
 8010430:	e7e9      	b.n	8010406 <_realloc_r+0x1c>
 8010432:	4635      	mov	r5, r6
 8010434:	e7e7      	b.n	8010406 <_realloc_r+0x1c>
	...

08010438 <_read_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4c07      	ldr	r4, [pc, #28]	; (8010458 <_read_r+0x20>)
 801043c:	4605      	mov	r5, r0
 801043e:	4608      	mov	r0, r1
 8010440:	4611      	mov	r1, r2
 8010442:	2200      	movs	r2, #0
 8010444:	6022      	str	r2, [r4, #0]
 8010446:	461a      	mov	r2, r3
 8010448:	f7f6 f962 	bl	8006710 <_read>
 801044c:	1c43      	adds	r3, r0, #1
 801044e:	d102      	bne.n	8010456 <_read_r+0x1e>
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	b103      	cbz	r3, 8010456 <_read_r+0x1e>
 8010454:	602b      	str	r3, [r5, #0]
 8010456:	bd38      	pop	{r3, r4, r5, pc}
 8010458:	2001f114 	.word	0x2001f114

0801045c <_malloc_usable_size_r>:
 801045c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010460:	1f18      	subs	r0, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	bfbc      	itt	lt
 8010466:	580b      	ldrlt	r3, [r1, r0]
 8010468:	18c0      	addlt	r0, r0, r3
 801046a:	4770      	bx	lr

0801046c <_init>:
 801046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046e:	bf00      	nop
 8010470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010472:	bc08      	pop	{r3}
 8010474:	469e      	mov	lr, r3
 8010476:	4770      	bx	lr

08010478 <_fini>:
 8010478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047a:	bf00      	nop
 801047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801047e:	bc08      	pop	{r3}
 8010480:	469e      	mov	lr, r3
 8010482:	4770      	bx	lr

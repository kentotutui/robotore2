
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000effc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800f190  0800f190  0001f190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f528  0800f528  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f528  0800f528  0001f528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f530  0800f530  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f534  0800f534  0001f534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f2d0  20000210  0800f748  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f4e0  0800f748  0002f4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021892  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046d0  00000000  00000000  00041ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001928  00000000  00000000  000461a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  00047ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024674  00000000  00000000  00049218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167ec  00000000  00000000  0006d88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb289  00000000  00000000  00084078  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a54  00000000  00000000  0014f37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f174 	.word	0x0800f174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f174 	.word	0x0800f174

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc05 	bl	80017b0 <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fb9e 	bl	800982c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fb9a 	bl	800982c <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001f09c 	.word	0x2001f09c
 8001110:	2001f05c 	.word	0x2001f05c
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <updateEncoderCnt+0x160>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <updateEncoderCnt+0x164>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <updateEncoderCnt+0x168>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <updateEncoderCnt+0x16c>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <updateEncoderCnt+0x170>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <updateEncoderCnt+0x164>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <updateEncoderCnt+0x170>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <updateEncoderCnt+0x174>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <updateEncoderCnt+0x16c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <updateEncoderCnt+0x174>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <updateEncoderCnt+0x164>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <updateEncoderCnt+0x16c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a338      	add	r3, pc, #224	; (adr r3, 8001278 <updateEncoderCnt+0x158>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <updateEncoderCnt+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <updateEncoderCnt+0x17c>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <updateEncoderCnt+0x178>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <updateEncoderCnt+0x17c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <updateEncoderCnt+0x180>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <updateEncoderCnt+0x178>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <updateEncoderCnt+0x180>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <updateEncoderCnt+0x184>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <updateEncoderCnt+0x178>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <updateEncoderCnt+0x184>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <updateEncoderCnt+0x188>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <updateEncoderCnt+0x178>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <updateEncoderCnt+0x188>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <updateEncoderCnt+0x18c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateEncoderCnt+0x178>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <updateEncoderCnt+0x18c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <updateEncoderCnt+0x190>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <updateEncoderCnt+0x178>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <updateEncoderCnt+0x190>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <updateEncoderCnt+0x194>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateEncoderCnt+0x178>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <updateEncoderCnt+0x194>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <updateEncoderCnt+0x160>)
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <updateEncoderCnt+0x168>)
 800126a:	f242 7210 	movw	r2, #10000	; 0x2710
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001270:	bf00      	nop
 8001272:	bd98      	pop	{r3, r4, r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	31e7b585 	.word	0x31e7b585
 800127c:	3f8e28c7 	.word	0x3f8e28c7
 8001280:	40000400 	.word	0x40000400
 8001284:	20000244 	.word	0x20000244
 8001288:	40000800 	.word	0x40000800
 800128c:	20000246 	.word	0x20000246
 8001290:	20000248 	.word	0x20000248
 8001294:	2000024a 	.word	0x2000024a
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000250 	.word	0x20000250
 80012a0:	20000254 	.word	0x20000254
 80012a4:	20000258 	.word	0x20000258
 80012a8:	2000025c 	.word	0x2000025c
 80012ac:	20000260 	.word	0x20000260
 80012b0:	20000264 	.word	0x20000264
 80012b4:	20000268 	.word	0x20000268

080012b8 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <getEncoderCnt+0x2c>)
 80012c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <getEncoderCnt+0x30>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000244 	.word	0x20000244
 80012e8:	20000246 	.word	0x20000246

080012ec <getTotalDistance>:

float getTotalDistance(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return total_distance;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <getTotalDistance+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000258 	.word	0x20000258

08001308 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getGoalJudgeDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getSideLineJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <setTotalDistance>:

void setTotalDistance(float distance)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <setTotalDistance+0x1c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000258 	.word	0x20000258

08001360 <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <getCrossLineIgnoreDistance+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000264 	.word	0x20000264

0800137c <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	total_distance = 0;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <clearTotalDistance+0x18>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000258 	.word	0x20000258

08001398 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearGoalJudgeDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearSideLineJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearCrossLineIgnoreDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearSideLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	return distance_10mm;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <getDistance10mm+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000250 	.word	0x20000250

08001424 <clearDistance10mm>:

void clearDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <clearDistance10mm+0x18>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000250 	.word	0x20000250

08001440 <getspeedcount>:

float getspeedcount(void){
 8001440:	b598      	push	{r3, r4, r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <getspeedcount+0x60>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	db16      	blt.n	8001486 <getspeedcount+0x46>
		speed_cnt += 0.1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <getspeedcount+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	a30d      	add	r3, pc, #52	; (adr r3, 8001498 <getspeedcount+0x58>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7fe ff10 	bl	800028c <__adddf3>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4618      	mov	r0, r3
 8001472:	4621      	mov	r1, r4
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <getspeedcount+0x64>)
 800147c:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <getspeedcount+0x60>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <getspeedcount+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
}
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	bd98      	pop	{r3, r4, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fb99999 	.word	0x3fb99999
 80014a0:	20000254 	.word	0x20000254
 80014a4:	2000026c 	.word	0x2000026c

080014a8 <clearspeedcount>:

void clearspeedcount(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <clearspeedcount+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <clearspeedcount+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000026c 	.word	0x2000026c
 80014c0:	3dcccccd 	.word	0x3dcccccd

080014c4 <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_Unlock+0x20>)
 80014cc:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <FLASH_Unlock+0x24>)
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	45670123 	.word	0x45670123
 80014e8:	cdef89ab 	.word	0xcdef89ab

080014ec <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <FLASH_Lock+0x1c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <FLASH_Lock+0x1c>)
 80014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	6113      	str	r3, [r2, #16]

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001510:	bf00      	nop
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <FLASH_WaitBusy+0x1c>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <FLASH_WaitBusy+0x6>
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8001536:	f006 f9b1 	bl	800789c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fa67 	bl	8007a2c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800155e:	f006 f9bf 	bl	80078e0 <HAL_FLASH_Lock>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001578:	f7ff ffa4 	bl	80014c4 <FLASH_Unlock>

	FLASH_WaitBusy();
 800157c:	f7ff ffc6 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_Write_Word_F+0x50>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800159e:	f7ff ffb5 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80015ae:	f7ff ff9d 	bl	80014ec <FLASH_Lock>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <initGyro>:
int16_t xg_, yg_, zg_;
float omega;
float theta_10mm;
float ang_average = 0;

uint8_t initGyro(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 80015c6:	f001 fe4b 	bl	8003260 <IMU_init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f005 f8cd 	bl	8006770 <HAL_Delay>

	return who_i_am;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <updateIMUValue>:

void updateIMUValue(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	read_gyro_data();
 80015e6:	f001 fe5f 	bl	80032a8 <read_gyro_data>
	zg_ = zg;
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <updateIMUValue+0x148>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <updateIMUValue+0x14c>)
 80015f2:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <updateIMUValue+0x148>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <updateIMUValue+0x150>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fa92 	bl	8000b58 <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <updateIMUValue+0x14c>)
 800163a:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <updateIMUValue+0x14c>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <updateIMUValue+0x154>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <updateIMUValue+0x14c>)
 8001660:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <updateIMUValue+0x14c>)
 8001664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <updateIMUValue+0x150>)
 800166a:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <updateIMUValue+0x14c>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	a322      	add	r3, pc, #136	; (adr r3, 8001710 <updateIMUValue+0x130>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	a320      	add	r3, pc, #128	; (adr r3, 8001718 <updateIMUValue+0x138>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <updateIMUValue+0x158>)
 80016ae:	f7ff f8cd 	bl	800084c <__aeabi_ddiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	f7ff fa95 	bl	8000be8 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <updateIMUValue+0x15c>)
 80016c2:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <updateIMUValue+0x160>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3d 	bl	8000548 <__aeabi_f2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <updateIMUValue+0x15c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a310      	add	r3, pc, #64	; (adr r3, 8001720 <updateIMUValue+0x140>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdcd 	bl	800028c <__adddf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	4618      	mov	r0, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <updateIMUValue+0x160>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	66666666 	.word	0x66666666
 8001714:	40306666 	.word	0x40306666
 8001718:	54411744 	.word	0x54411744
 800171c:	400921fb 	.word	0x400921fb
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	2001f1c0 	.word	0x2001f1c0
 800172c:	2001f0dc 	.word	0x2001f0dc
 8001730:	20000274 	.word	0x20000274
 8001734:	20000270 	.word	0x20000270
 8001738:	40668000 	.word	0x40668000
 800173c:	2001f0e8 	.word	0x2001f0e8
 8001740:	2001f0e4 	.word	0x2001f0e4

08001744 <IMU_average>:

void IMU_average(){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	float average = 0;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e015      	b.n	8001782 <IMU_average+0x3e>
		average = average+zg;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <IMU_average+0x60>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ed97 7a01 	vldr	s14, [r7, #4]
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f004 fffd 	bl	8006770 <HAL_Delay>
		setLED2('A');
 8001776:	2041      	movs	r0, #65	; 0x41
 8001778:	f000 f904 	bl	8001984 <setLED2>
	for(int i=0;i<=1000;i++){
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001788:	dde5      	ble.n	8001756 <IMU_average+0x12>
	}
	ang_average = average/1000;
 800178a:	ed97 7a01 	vldr	s14, [r7, #4]
 800178e:	eddf 6a06 	vldr	s13, [pc, #24]	; 80017a8 <IMU_average+0x64>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <IMU_average+0x68>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2001f1c0 	.word	0x2001f1c0
 80017a8:	447a0000 	.word	0x447a0000
 80017ac:	20000270 	.word	0x20000270

080017b0 <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	return theta_10mm;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <getTheta10mm+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
}
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	2001f0e4 	.word	0x2001f0e4

080017cc <clearTheta10mm>:

void clearTheta10mm()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <clearTheta10mm+0x18>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2001f0e4 	.word	0x2001f0e4

080017e8 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b52      	cmp	r3, #82	; 0x52
 80017f6:	d112      	bne.n	800181e <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4860      	ldr	r0, [pc, #384]	; (8001980 <setLED+0x198>)
 8001800:	f006 fbe8 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <setLED+0x198>)
 800180c:	f006 fbe2 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	485a      	ldr	r0, [pc, #360]	; (8001980 <setLED+0x198>)
 8001818:	f006 fbdc 	bl	8007fd4 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 800181c:	e0ab      	b.n	8001976 <setLED+0x18e>
	else if(color == 'G'){
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b47      	cmp	r3, #71	; 0x47
 8001822:	d112      	bne.n	800184a <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	4855      	ldr	r0, [pc, #340]	; (8001980 <setLED+0x198>)
 800182c:	f006 fbd2 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001836:	4852      	ldr	r0, [pc, #328]	; (8001980 <setLED+0x198>)
 8001838:	f006 fbcc 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	484f      	ldr	r0, [pc, #316]	; (8001980 <setLED+0x198>)
 8001844:	f006 fbc6 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001848:	e095      	b.n	8001976 <setLED+0x18e>
	else if(color == 'B'){
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b42      	cmp	r3, #66	; 0x42
 800184e:	d112      	bne.n	8001876 <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	484a      	ldr	r0, [pc, #296]	; (8001980 <setLED+0x198>)
 8001858:	f006 fbbc 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <setLED+0x198>)
 8001864:	f006 fbb6 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186e:	4844      	ldr	r0, [pc, #272]	; (8001980 <setLED+0x198>)
 8001870:	f006 fbb0 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001874:	e07f      	b.n	8001976 <setLED+0x18e>
	else if(color == 'M'){
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b4d      	cmp	r3, #77	; 0x4d
 800187a:	d112      	bne.n	80018a2 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	483f      	ldr	r0, [pc, #252]	; (8001980 <setLED+0x198>)
 8001884:	f006 fba6 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <setLED+0x198>)
 8001890:	f006 fba0 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	4839      	ldr	r0, [pc, #228]	; (8001980 <setLED+0x198>)
 800189c:	f006 fb9a 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 80018a0:	e069      	b.n	8001976 <setLED+0x18e>
	else if(color == 'Y'){
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b59      	cmp	r3, #89	; 0x59
 80018a6:	d112      	bne.n	80018ce <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4834      	ldr	r0, [pc, #208]	; (8001980 <setLED+0x198>)
 80018b0:	f006 fb90 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ba:	4831      	ldr	r0, [pc, #196]	; (8001980 <setLED+0x198>)
 80018bc:	f006 fb8a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482e      	ldr	r0, [pc, #184]	; (8001980 <setLED+0x198>)
 80018c8:	f006 fb84 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 80018cc:	e053      	b.n	8001976 <setLED+0x18e>
	else if(color == 'C'){
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b43      	cmp	r3, #67	; 0x43
 80018d2:	d112      	bne.n	80018fa <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <setLED+0x198>)
 80018dc:	f006 fb7a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <setLED+0x198>)
 80018e8:	f006 fb74 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <setLED+0x198>)
 80018f4:	f006 fb6e 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 80018f8:	e03d      	b.n	8001976 <setLED+0x18e>
	else if(color == 'W'){
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b57      	cmp	r3, #87	; 0x57
 80018fe:	d112      	bne.n	8001926 <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	481e      	ldr	r0, [pc, #120]	; (8001980 <setLED+0x198>)
 8001908:	f006 fb64 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <setLED+0x198>)
 8001914:	f006 fb5e 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191e:	4818      	ldr	r0, [pc, #96]	; (8001980 <setLED+0x198>)
 8001920:	f006 fb58 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001924:	e027      	b.n	8001976 <setLED+0x18e>
	else if(color == 'N'){
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b4e      	cmp	r3, #78	; 0x4e
 800192a:	d112      	bne.n	8001952 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <setLED+0x198>)
 8001934:	f006 fb4e 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <setLED+0x198>)
 8001940:	f006 fb48 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <setLED+0x198>)
 800194c:	f006 fb42 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001950:	e011      	b.n	8001976 <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <setLED+0x198>)
 800195a:	f006 fb3b 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <setLED+0x198>)
 8001966:	f006 fb35 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <setLED+0x198>)
 8001972:	f006 fb2f 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020800 	.word	0x40020800

08001984 <setLED2>:

void setLED2(uint8_t color2)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b52      	cmp	r3, #82	; 0x52
 8001992:	d124      	bne.n	80019de <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	489d      	ldr	r0, [pc, #628]	; (8001c10 <setLED2+0x28c>)
 800199c:	f006 fb1a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a6:	489b      	ldr	r0, [pc, #620]	; (8001c14 <setLED2+0x290>)
 80019a8:	f006 fb14 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	4898      	ldr	r0, [pc, #608]	; (8001c14 <setLED2+0x290>)
 80019b4:	f006 fb0e 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4895      	ldr	r0, [pc, #596]	; (8001c14 <setLED2+0x290>)
 80019c0:	f006 fb08 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	4892      	ldr	r0, [pc, #584]	; (8001c14 <setLED2+0x290>)
 80019cc:	f006 fb02 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d6:	488f      	ldr	r0, [pc, #572]	; (8001c14 <setLED2+0x290>)
 80019d8:	f006 fafc 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 80019dc:	e113      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'G'){
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b47      	cmp	r3, #71	; 0x47
 80019e2:	d124      	bne.n	8001a2e <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ea:	4889      	ldr	r0, [pc, #548]	; (8001c10 <setLED2+0x28c>)
 80019ec:	f006 faf2 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	4887      	ldr	r0, [pc, #540]	; (8001c14 <setLED2+0x290>)
 80019f8:	f006 faec 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a02:	4884      	ldr	r0, [pc, #528]	; (8001c14 <setLED2+0x290>)
 8001a04:	f006 fae6 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <setLED2+0x290>)
 8001a10:	f006 fae0 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	487e      	ldr	r0, [pc, #504]	; (8001c14 <setLED2+0x290>)
 8001a1c:	f006 fada 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a26:	487b      	ldr	r0, [pc, #492]	; (8001c14 <setLED2+0x290>)
 8001a28:	f006 fad4 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001a2c:	e0eb      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'B'){
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b42      	cmp	r3, #66	; 0x42
 8001a32:	d124      	bne.n	8001a7e <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3a:	4875      	ldr	r0, [pc, #468]	; (8001c10 <setLED2+0x28c>)
 8001a3c:	f006 faca 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a46:	4873      	ldr	r0, [pc, #460]	; (8001c14 <setLED2+0x290>)
 8001a48:	f006 fac4 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4870      	ldr	r0, [pc, #448]	; (8001c14 <setLED2+0x290>)
 8001a54:	f006 fabe 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5e:	486d      	ldr	r0, [pc, #436]	; (8001c14 <setLED2+0x290>)
 8001a60:	f006 fab8 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	486a      	ldr	r0, [pc, #424]	; (8001c14 <setLED2+0x290>)
 8001a6c:	f006 fab2 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a76:	4867      	ldr	r0, [pc, #412]	; (8001c14 <setLED2+0x290>)
 8001a78:	f006 faac 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001a7c:	e0c3      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'W'){
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b57      	cmp	r3, #87	; 0x57
 8001a82:	d124      	bne.n	8001ace <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8a:	4861      	ldr	r0, [pc, #388]	; (8001c10 <setLED2+0x28c>)
 8001a8c:	f006 faa2 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a96:	485f      	ldr	r0, [pc, #380]	; (8001c14 <setLED2+0x290>)
 8001a98:	f006 fa9c 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa2:	485c      	ldr	r0, [pc, #368]	; (8001c14 <setLED2+0x290>)
 8001aa4:	f006 fa96 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	4859      	ldr	r0, [pc, #356]	; (8001c14 <setLED2+0x290>)
 8001ab0:	f006 fa90 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4856      	ldr	r0, [pc, #344]	; (8001c14 <setLED2+0x290>)
 8001abc:	f006 fa8a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	4853      	ldr	r0, [pc, #332]	; (8001c14 <setLED2+0x290>)
 8001ac8:	f006 fa84 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001acc:	e09b      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'Y'){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b59      	cmp	r3, #89	; 0x59
 8001ad2:	d124      	bne.n	8001b1e <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ada:	484d      	ldr	r0, [pc, #308]	; (8001c10 <setLED2+0x28c>)
 8001adc:	f006 fa7a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	484b      	ldr	r0, [pc, #300]	; (8001c14 <setLED2+0x290>)
 8001ae8:	f006 fa74 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4848      	ldr	r0, [pc, #288]	; (8001c14 <setLED2+0x290>)
 8001af4:	f006 fa6e 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	4845      	ldr	r0, [pc, #276]	; (8001c14 <setLED2+0x290>)
 8001b00:	f006 fa68 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0a:	4842      	ldr	r0, [pc, #264]	; (8001c14 <setLED2+0x290>)
 8001b0c:	f006 fa62 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b16:	483f      	ldr	r0, [pc, #252]	; (8001c14 <setLED2+0x290>)
 8001b18:	f006 fa5c 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001b1c:	e073      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'X'){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b58      	cmp	r3, #88	; 0x58
 8001b22:	d124      	bne.n	8001b6e <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2a:	4839      	ldr	r0, [pc, #228]	; (8001c10 <setLED2+0x28c>)
 8001b2c:	f006 fa52 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	4837      	ldr	r0, [pc, #220]	; (8001c14 <setLED2+0x290>)
 8001b38:	f006 fa4c 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	4834      	ldr	r0, [pc, #208]	; (8001c14 <setLED2+0x290>)
 8001b44:	f006 fa46 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	4831      	ldr	r0, [pc, #196]	; (8001c14 <setLED2+0x290>)
 8001b50:	f006 fa40 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	482e      	ldr	r0, [pc, #184]	; (8001c14 <setLED2+0x290>)
 8001b5c:	f006 fa3a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b66:	482b      	ldr	r0, [pc, #172]	; (8001c14 <setLED2+0x290>)
 8001b68:	f006 fa34 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001b6c:	e04b      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'A'){
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b41      	cmp	r3, #65	; 0x41
 8001b72:	d124      	bne.n	8001bbe <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7a:	4825      	ldr	r0, [pc, #148]	; (8001c10 <setLED2+0x28c>)
 8001b7c:	f006 fa2a 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <setLED2+0x290>)
 8001b88:	f006 fa24 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4820      	ldr	r0, [pc, #128]	; (8001c14 <setLED2+0x290>)
 8001b94:	f006 fa1e 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <setLED2+0x290>)
 8001ba0:	f006 fa18 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <setLED2+0x290>)
 8001bac:	f006 fa12 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <setLED2+0x290>)
 8001bb8:	f006 fa0c 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001bbc:	e023      	b.n	8001c06 <setLED2+0x282>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <setLED2+0x28c>)
 8001bc6:	f006 fa05 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <setLED2+0x290>)
 8001bd2:	f006 f9ff 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <setLED2+0x290>)
 8001bde:	f006 f9f9 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <setLED2+0x290>)
 8001bea:	f006 f9f3 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <setLED2+0x290>)
 8001bf6:	f006 f9ed 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <setLED2+0x290>)
 8001c02:	f006 f9e7 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400

08001c18 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 4.5, kd = 0.035;//kp = 1.5, kd = 0.0015  //kp = 3.0, kd = 0.005
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <calculateLineFollowingTermFlip+0x138>)
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <calculateLineFollowingTermFlip+0x13c>)
 8001c24:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <calculateLineFollowingTermFlip+0x140>)
 8001c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 8081 	bne.w	8001d3a <calculateLineFollowingTermFlip+0x122>
		if(i_clear_flag == 1){
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <calculateLineFollowingTermFlip+0x144>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <calculateLineFollowingTermFlip+0x36>
			i = 0;
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <calculateLineFollowingTermFlip+0x148>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <calculateLineFollowingTermFlip+0x144>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );
 8001c4e:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c60:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c68:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c70:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c78:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <calculateLineFollowingTermFlip+0x150>)
 8001c80:	fb82 1203 	smull	r1, r2, r2, r3
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c96:	440b      	add	r3, r1
 8001c98:	4932      	ldr	r1, [pc, #200]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c9a:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	4930      	ldr	r1, [pc, #192]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001ca2:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	492e      	ldr	r1, [pc, #184]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001caa:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8001cae:	440b      	add	r3, r1
 8001cb0:	492c      	ldr	r1, [pc, #176]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001cb2:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	492b      	ldr	r1, [pc, #172]	; (8001d68 <calculateLineFollowingTermFlip+0x150>)
 8001cba:	fb81 0103 	smull	r0, r1, r1, r3
 8001cbe:	17db      	asrs	r3, r3, #31
 8001cc0:	1a5b      	subs	r3, r3, r1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	edc7 7a03 	vstr	s15, [r7, #12]

		p = kp * diff; //P制御
 8001cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <calculateLineFollowingTermFlip+0x154>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fc25 	bl	8000548 <__aeabi_f2d>
 8001cfe:	a312      	add	r3, pc, #72	; (adr r3, 8001d48 <calculateLineFollowingTermFlip+0x130>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fda2 	bl	800084c <__aeabi_ddiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe ff6a 	bl	8000be8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <calculateLineFollowingTermFlip+0x148>)
 8001d1a:	ed93 7a00 	vldr	s14, [r3]
 8001d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <calculateLineFollowingTermFlip+0x158>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <calculateLineFollowingTermFlip+0x154>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6013      	str	r3, [r2, #0]
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d4c:	3f50624d 	.word	0x3f50624d
 8001d50:	40900000 	.word	0x40900000
 8001d54:	3d0f5c29 	.word	0x3d0f5c29
 8001d58:	20000276 	.word	0x20000276
 8001d5c:	20000277 	.word	0x20000277
 8001d60:	20000284 	.word	0x20000284
 8001d64:	2001f008 	.word	0x2001f008
 8001d68:	2aaaaaab 	.word	0x2aaaaaab
 8001d6c:	20000280 	.word	0x20000280
 8001d70:	20000278 	.word	0x20000278

08001d74 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8001d7a:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <lineTraceFlip+0x150>)
 8001d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	f040 8097 	bne.w	8001eb4 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 8001d86:	f001 fb55 	bl	8003434 <getVelocityControlTerm>
 8001d8a:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.8;
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <lineTraceFlip+0x154>)
 8001d90:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 8001d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	db02      	blt.n	8001daa <lineTraceFlip+0x36>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e010      	b.n	8001dcc <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 8001daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dae:	eef1 7a67 	vneg.f32	s15, s15
 8001db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d805      	bhi.n	8001dcc <lineTraceFlip+0x58>
 8001dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc4:	eef1 7a67 	vneg.f32	s15, s15
 8001dc8:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <lineTraceFlip+0x158>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ed0 <lineTraceFlip+0x15c>
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	db0d      	blt.n	8001e0a <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <lineTraceFlip+0x158>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ed0 <lineTraceFlip+0x15c>
 8001e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e04:	edc7 7a04 	vstr	s15, [r7, #16]
 8001e08:	e01a      	b.n	8001e40 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <lineTraceFlip+0x158>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ed4 <lineTraceFlip+0x160>
 8001e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d80c      	bhi.n	8001e40 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <lineTraceFlip+0x158>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ed4 <lineTraceFlip+0x160>
 8001e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3c:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 8001e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <lineTraceFlip+0x158>)
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <lineTraceFlip+0x158>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <lineTraceFlip+0x158>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <lineTraceFlip+0x158>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	edc7 7a01 	vstr	s15, [r7, #4]
		/*
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/

		mon_velo_term = velocity_control_term;
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <lineTraceFlip+0x164>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 8001e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	ee17 2a90 	vmov	r2, s15
 8001ea8:	b212      	sxth	r2, r2
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fd21 	bl	80048f4 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001eb2:	e003      	b.n	8001ebc <lineTraceFlip+0x148>
		setMotor(0, 0);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f002 fd1c 	bl	80048f4 <setMotor>
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000276 	.word	0x20000276
 8001ec8:	44a7e666 	.word	0x44a7e666
 8001ecc:	20000278 	.word	0x20000278
 8001ed0:	44d1e000 	.word	0x44d1e000
 8001ed4:	c4d1e000 	.word	0xc4d1e000
 8001ed8:	2001f0ec 	.word	0x2001f0ec

08001edc <startLineTrace>:

void startLineTrace()
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <startLineTrace+0x1c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <startLineTrace+0x20>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000276 	.word	0x20000276
 8001efc:	20000277 	.word	0x20000277

08001f00 <stopLineTrace>:

void stopLineTrace()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <stopLineTrace+0x1c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <stopLineTrace+0x20>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000276 	.word	0x20000276
 8001f20:	20000278 	.word	0x20000278

08001f24 <checkCourseOut>:

void checkCourseOut(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f3c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f44:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f4c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f54:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f5c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f64:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f6c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f74:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f7c:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f84:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <checkCourseOut+0xb8>)
 8001f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f90:	1052      	asrs	r2, r2, #1
 8001f92:	17db      	asrs	r3, r3, #31
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f9e:	d906      	bls.n	8001fae <checkCourseOut+0x8a>
		dark_cnt++;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <checkCourseOut+0xbc>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e002      	b.n	8001fb4 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	2b13      	cmp	r3, #19
 8001fba:	d903      	bls.n	8001fc4 <checkCourseOut+0xa0>
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <checkCourseOut+0xc0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001fc2:	e002      	b.n	8001fca <checkCourseOut+0xa6>
	else dark_flag = false;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <checkCourseOut+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2001f008 	.word	0x2001f008
 8001fdc:	2aaaaaab 	.word	0x2aaaaaab
 8001fe0:	20000288 	.word	0x20000288
 8001fe4:	2000027c 	.word	0x2000027c

08001fe8 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return dark_flag;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <getCouseOutFlag+0x14>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000027c 	.word	0x2000027c

08002000 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002004:	2202      	movs	r2, #2
 8002006:	4905      	ldr	r1, [pc, #20]	; (800201c <initADC+0x1c>)
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <initADC+0x20>)
 800200a:	f004 fc17 	bl	800683c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800200e:	220c      	movs	r2, #12
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <initADC+0x24>)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <initADC+0x28>)
 8002014:	f004 fc12 	bl	800683c <HAL_ADC_Start_DMA>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200002a4 	.word	0x200002a4
 8002020:	2001f140 	.word	0x2001f140
 8002024:	2000028c 	.word	0x2000028c
 8002028:	2001f0f0 	.word	0x2001f0f0

0800202c <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002030:	4bc9      	ldr	r3, [pc, #804]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002032:	885b      	ldrh	r3, [r3, #2]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	4bc7      	ldr	r3, [pc, #796]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800203e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002042:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002046:	4bc6      	ldr	r3, [pc, #792]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002048:	ed93 7a01 	vldr	s14, [r3, #4]
 800204c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002050:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002058:	4bc3      	ldr	r3, [pc, #780]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	b219      	sxth	r1, r3
 8002068:	4bc0      	ldr	r3, [pc, #768]	; (800236c <storeAnalogSensorBuffer+0x340>)
 800206a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800206e:	4bba      	ldr	r3, [pc, #744]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207a:	4bb8      	ldr	r3, [pc, #736]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002084:	4bb6      	ldr	r3, [pc, #728]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002096:	4bb4      	ldr	r3, [pc, #720]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b219      	sxth	r1, r3
 80020a6:	4bb2      	ldr	r3, [pc, #712]	; (8002370 <storeAnalogSensorBuffer+0x344>)
 80020a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80020ac:	4baa      	ldr	r3, [pc, #680]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80020ae:	889b      	ldrh	r3, [r3, #4]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b8:	4ba8      	ldr	r3, [pc, #672]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80020ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80020be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c2:	4ba7      	ldr	r3, [pc, #668]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80020c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80020d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d4:	4ba4      	ldr	r3, [pc, #656]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020de:	ee17 3a90 	vmov	r3, s15
 80020e2:	b219      	sxth	r1, r3
 80020e4:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <storeAnalogSensorBuffer+0x348>)
 80020e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80020ea:	4b9b      	ldr	r3, [pc, #620]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80020ec:	88db      	ldrh	r3, [r3, #6]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	4b99      	ldr	r3, [pc, #612]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80020f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80020fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002100:	4b97      	ldr	r3, [pc, #604]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002102:	ed93 7a03 	vldr	s14, [r3, #12]
 8002106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	4b95      	ldr	r3, [pc, #596]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	b219      	sxth	r1, r3
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <storeAnalogSensorBuffer+0x34c>)
 8002124:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002128:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 800212a:	891b      	ldrh	r3, [r3, #8]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <storeAnalogSensorBuffer+0x330>)
 8002136:	edd3 7a04 	vldr	s15, [r3, #16]
 800213a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002140:	ed93 7a04 	vldr	s14, [r3, #16]
 8002144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002148:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215a:	ee17 3a90 	vmov	r3, s15
 800215e:	b219      	sxth	r1, r3
 8002160:	4b86      	ldr	r3, [pc, #536]	; (800237c <storeAnalogSensorBuffer+0x350>)
 8002162:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002166:	4b7c      	ldr	r3, [pc, #496]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002168:	895b      	ldrh	r3, [r3, #10]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	4b7a      	ldr	r3, [pc, #488]	; (800235c <storeAnalogSensorBuffer+0x330>)
 8002174:	edd3 7a05 	vldr	s15, [r3, #20]
 8002178:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217c:	4b78      	ldr	r3, [pc, #480]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 800217e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002186:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800218a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002198:	ee17 3a90 	vmov	r3, s15
 800219c:	b219      	sxth	r1, r3
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <storeAnalogSensorBuffer+0x354>)
 80021a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80021b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80021b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021ba:	4b69      	ldr	r3, [pc, #420]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80021bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80021c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80021c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d6:	ee17 3a90 	vmov	r3, s15
 80021da:	b219      	sxth	r1, r3
 80021dc:	4b69      	ldr	r3, [pc, #420]	; (8002384 <storeAnalogSensorBuffer+0x358>)
 80021de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80021e4:	89db      	ldrh	r3, [r3, #14]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80021f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80021fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80021fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002202:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b219      	sxth	r1, r3
 800221a:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <storeAnalogSensorBuffer+0x35c>)
 800221c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002220:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002222:	8a1b      	ldrh	r3, [r3, #16]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800222e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002232:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002238:	ed93 7a08 	vldr	s14, [r3, #32]
 800223c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002240:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002252:	ee17 3a90 	vmov	r3, s15
 8002256:	b219      	sxth	r1, r3
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <storeAnalogSensorBuffer+0x360>)
 800225a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800225e:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002260:	8a5b      	ldrh	r3, [r3, #18]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800226c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002270:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002276:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800227a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002286:	4b38      	ldr	r3, [pc, #224]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	b219      	sxth	r1, r3
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <storeAnalogSensorBuffer+0x364>)
 8002298:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 800229e:	8a9b      	ldrh	r3, [r3, #20]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80022aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80022b4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80022c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ce:	ee17 3a90 	vmov	r3, s15
 80022d2:	b219      	sxth	r1, r3
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <storeAnalogSensorBuffer+0x368>)
 80022d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80022dc:	8adb      	ldrh	r3, [r3, #22]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80022e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80022f2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80022f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230c:	ee17 3a90 	vmov	r3, s15
 8002310:	b219      	sxth	r1, r3
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <storeAnalogSensorBuffer+0x36c>)
 8002314:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <storeAnalogSensorBuffer+0x370>)
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <storeAnalogSensorBuffer+0x374>)
 8002326:	edd3 7a01 	vldr	s15, [r3, #4]
 800232a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <storeAnalogSensorBuffer+0x378>)
 8002330:	ed93 7a01 	vldr	s14, [r3, #4]
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	b219      	sxth	r1, r3
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <storeAnalogSensorBuffer+0x37c>)
 8002352:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002356:	e029      	b.n	80023ac <storeAnalogSensorBuffer+0x380>
 8002358:	2000028c 	.word	0x2000028c
 800235c:	2001efc8 	.word	0x2001efc8
 8002360:	2001f02c 	.word	0x2001f02c
 8002364:	447a0000 	.word	0x447a0000
 8002368:	20000030 	.word	0x20000030
 800236c:	200002bc 	.word	0x200002bc
 8002370:	200002a8 	.word	0x200002a8
 8002374:	200002d0 	.word	0x200002d0
 8002378:	200002e4 	.word	0x200002e4
 800237c:	200002f8 	.word	0x200002f8
 8002380:	2000030c 	.word	0x2000030c
 8002384:	20000320 	.word	0x20000320
 8002388:	20000334 	.word	0x20000334
 800238c:	20000348 	.word	0x20000348
 8002390:	2000035c 	.word	0x2000035c
 8002394:	20000370 	.word	0x20000370
 8002398:	20000384 	.word	0x20000384
 800239c:	200002a4 	.word	0x200002a4
 80023a0:	2001efc0 	.word	0x2001efc0
 80023a4:	2001f000 	.word	0x2001f000
 80023a8:	20000398 	.word	0x20000398
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <storeAnalogSensorBuffer+0x3d4>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <storeAnalogSensorBuffer+0x3d8>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <storeAnalogSensorBuffer+0x3dc>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800240c <storeAnalogSensorBuffer+0x3e0>
 80023d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	b219      	sxth	r1, r3
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <storeAnalogSensorBuffer+0x3e8>)
 80023e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023f4:	701a      	strb	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	200002a4 	.word	0x200002a4
 8002404:	2001efc0 	.word	0x2001efc0
 8002408:	2001f000 	.word	0x2001f000
 800240c:	447a0000 	.word	0x447a0000
 8002410:	20000030 	.word	0x20000030
 8002414:	200003ac 	.word	0x200003ac

08002418 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800241e:	4bc9      	ldr	r3, [pc, #804]	; (8002744 <updateAnalogSensor+0x32c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242a:	4bc7      	ldr	r3, [pc, #796]	; (8002748 <updateAnalogSensor+0x330>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002434:	4bc5      	ldr	r3, [pc, #788]	; (800274c <updateAnalogSensor+0x334>)
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002750 <updateAnalogSensor+0x338>
 8002442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244a:	ee17 3a90 	vmov	r3, s15
 800244e:	b21a      	sxth	r2, r3
 8002450:	4bc0      	ldr	r3, [pc, #768]	; (8002754 <updateAnalogSensor+0x33c>)
 8002452:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002454:	4bbb      	ldr	r3, [pc, #748]	; (8002744 <updateAnalogSensor+0x32c>)
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002460:	4bb9      	ldr	r3, [pc, #740]	; (8002748 <updateAnalogSensor+0x330>)
 8002462:	edd3 7a01 	vldr	s15, [r3, #4]
 8002466:	ee77 6a67 	vsub.f32	s13, s14, s15
 800246a:	4bb8      	ldr	r3, [pc, #736]	; (800274c <updateAnalogSensor+0x334>)
 800246c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002474:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002750 <updateAnalogSensor+0x338>
 8002478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002480:	ee17 3a90 	vmov	r3, s15
 8002484:	b21a      	sxth	r2, r3
 8002486:	4bb3      	ldr	r3, [pc, #716]	; (8002754 <updateAnalogSensor+0x33c>)
 8002488:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800248a:	4bae      	ldr	r3, [pc, #696]	; (8002744 <updateAnalogSensor+0x32c>)
 800248c:	889b      	ldrh	r3, [r3, #4]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	4bac      	ldr	r3, [pc, #688]	; (8002748 <updateAnalogSensor+0x330>)
 8002498:	edd3 7a02 	vldr	s15, [r3, #8]
 800249c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024a0:	4baa      	ldr	r3, [pc, #680]	; (800274c <updateAnalogSensor+0x334>)
 80024a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024aa:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002750 <updateAnalogSensor+0x338>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b6:	ee17 3a90 	vmov	r3, s15
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	4ba5      	ldr	r3, [pc, #660]	; (8002754 <updateAnalogSensor+0x33c>)
 80024be:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <updateAnalogSensor+0x32c>)
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b9e      	ldr	r3, [pc, #632]	; (8002748 <updateAnalogSensor+0x330>)
 80024ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b9d      	ldr	r3, [pc, #628]	; (800274c <updateAnalogSensor+0x334>)
 80024d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002750 <updateAnalogSensor+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ec:	ee17 3a90 	vmov	r3, s15
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	4b98      	ldr	r3, [pc, #608]	; (8002754 <updateAnalogSensor+0x33c>)
 80024f4:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80024f6:	4b93      	ldr	r3, [pc, #588]	; (8002744 <updateAnalogSensor+0x32c>)
 80024f8:	891b      	ldrh	r3, [r3, #8]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	4b91      	ldr	r3, [pc, #580]	; (8002748 <updateAnalogSensor+0x330>)
 8002504:	edd3 7a04 	vldr	s15, [r3, #16]
 8002508:	ee77 6a67 	vsub.f32	s13, s14, s15
 800250c:	4b8f      	ldr	r3, [pc, #572]	; (800274c <updateAnalogSensor+0x334>)
 800250e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002516:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002750 <updateAnalogSensor+0x338>
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002522:	ee17 3a90 	vmov	r3, s15
 8002526:	b21a      	sxth	r2, r3
 8002528:	4b8a      	ldr	r3, [pc, #552]	; (8002754 <updateAnalogSensor+0x33c>)
 800252a:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800252c:	4b85      	ldr	r3, [pc, #532]	; (8002744 <updateAnalogSensor+0x32c>)
 800252e:	895b      	ldrh	r3, [r3, #10]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002538:	4b83      	ldr	r3, [pc, #524]	; (8002748 <updateAnalogSensor+0x330>)
 800253a:	edd3 7a05 	vldr	s15, [r3, #20]
 800253e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002542:	4b82      	ldr	r3, [pc, #520]	; (800274c <updateAnalogSensor+0x334>)
 8002544:	ed93 7a05 	vldr	s14, [r3, #20]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002750 <updateAnalogSensor+0x338>
 8002550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002558:	ee17 3a90 	vmov	r3, s15
 800255c:	b21a      	sxth	r2, r3
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <updateAnalogSensor+0x33c>)
 8002560:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <updateAnalogSensor+0x32c>)
 8002564:	899b      	ldrh	r3, [r3, #12]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <updateAnalogSensor+0x330>)
 8002570:	edd3 7a06 	vldr	s15, [r3, #24]
 8002574:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002578:	4b74      	ldr	r3, [pc, #464]	; (800274c <updateAnalogSensor+0x334>)
 800257a:	ed93 7a06 	vldr	s14, [r3, #24]
 800257e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002582:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002750 <updateAnalogSensor+0x338>
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258e:	ee17 3a90 	vmov	r3, s15
 8002592:	b21a      	sxth	r2, r3
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <updateAnalogSensor+0x33c>)
 8002596:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <updateAnalogSensor+0x32c>)
 800259a:	89db      	ldrh	r3, [r3, #14]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <updateAnalogSensor+0x330>)
 80025a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80025aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <updateAnalogSensor+0x334>)
 80025b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80025b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002750 <updateAnalogSensor+0x338>
 80025bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c4:	ee17 3a90 	vmov	r3, s15
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <updateAnalogSensor+0x33c>)
 80025cc:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <updateAnalogSensor+0x32c>)
 80025d0:	8a1b      	ldrh	r3, [r3, #16]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <updateAnalogSensor+0x330>)
 80025dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80025e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <updateAnalogSensor+0x334>)
 80025e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80025ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ee:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002750 <updateAnalogSensor+0x338>
 80025f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fa:	ee17 3a90 	vmov	r3, s15
 80025fe:	b21a      	sxth	r2, r3
 8002600:	4b54      	ldr	r3, [pc, #336]	; (8002754 <updateAnalogSensor+0x33c>)
 8002602:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <updateAnalogSensor+0x32c>)
 8002606:	8a5b      	ldrh	r3, [r3, #18]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <updateAnalogSensor+0x330>)
 8002612:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <updateAnalogSensor+0x334>)
 800261c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002624:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002750 <updateAnalogSensor+0x338>
 8002628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	b21a      	sxth	r2, r3
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <updateAnalogSensor+0x33c>)
 8002638:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <updateAnalogSensor+0x32c>)
 800263c:	8a9b      	ldrh	r3, [r3, #20]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <updateAnalogSensor+0x330>)
 8002648:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800264c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002650:	4b3e      	ldr	r3, [pc, #248]	; (800274c <updateAnalogSensor+0x334>)
 8002652:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002750 <updateAnalogSensor+0x338>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b21a      	sxth	r2, r3
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <updateAnalogSensor+0x33c>)
 800266e:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <updateAnalogSensor+0x32c>)
 8002672:	8adb      	ldrh	r3, [r3, #22]
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <updateAnalogSensor+0x330>)
 800267e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002682:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <updateAnalogSensor+0x334>)
 8002688:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800268c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002690:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002750 <updateAnalogSensor+0x338>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <updateAnalogSensor+0x33c>)
 80026a4:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <updateAnalogSensor+0x340>)
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <updateAnalogSensor+0x340>)
 80026b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a28      	ldr	r2, [pc, #160]	; (8002758 <updateAnalogSensor+0x340>)
 80026b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a26      	ldr	r2, [pc, #152]	; (8002758 <updateAnalogSensor+0x340>)
 80026c0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a24      	ldr	r2, [pc, #144]	; (8002758 <updateAnalogSensor+0x340>)
 80026c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <updateAnalogSensor+0x340>)
 80026d0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <updateAnalogSensor+0x340>)
 80026d8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <updateAnalogSensor+0x340>)
 80026e0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <updateAnalogSensor+0x340>)
 80026e8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <updateAnalogSensor+0x340>)
 80026f0:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <updateAnalogSensor+0x344>)
 80026f8:	fb82 1203 	smull	r1, r2, r2, r3
 80026fc:	1092      	asrs	r2, r2, #2
 80026fe:	17db      	asrs	r3, r3, #31
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b21a      	sxth	r2, r3
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <updateAnalogSensor+0x348>)
 8002706:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <updateAnalogSensor+0x34c>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	461a      	mov	r2, r3
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <updateAnalogSensor+0x34c>)
 8002712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002716:	4413      	add	r3, r2
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <updateAnalogSensor+0x34c>)
 800271a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800271e:	4413      	add	r3, r2
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <updateAnalogSensor+0x34c>)
 8002722:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002726:	4413      	add	r3, r2
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <updateAnalogSensor+0x34c>)
 800272a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800272e:	4413      	add	r3, r2
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <updateAnalogSensor+0x34c>)
 8002732:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002736:	4413      	add	r3, r2
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <updateAnalogSensor+0x34c>)
 800273a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800273e:	4413      	add	r3, r2
 8002740:	e012      	b.n	8002768 <updateAnalogSensor+0x350>
 8002742:	bf00      	nop
 8002744:	2000028c 	.word	0x2000028c
 8002748:	2001efc8 	.word	0x2001efc8
 800274c:	2001f02c 	.word	0x2001f02c
 8002750:	447a0000 	.word	0x447a0000
 8002754:	2001f008 	.word	0x2001f008
 8002758:	20000398 	.word	0x20000398
 800275c:	66666667 	.word	0x66666667
 8002760:	2001efac 	.word	0x2001efac
 8002764:	200003ac 	.word	0x200003ac
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <updateAnalogSensor+0x3d0>)
 800276a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800276e:	4413      	add	r3, r2
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <updateAnalogSensor+0x3d0>)
 8002772:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002776:	4413      	add	r3, r2
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <updateAnalogSensor+0x3d0>)
 800277a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800277e:	4413      	add	r3, r2
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <updateAnalogSensor+0x3d4>)
 8002782:	fb82 1203 	smull	r1, r2, r2, r3
 8002786:	1092      	asrs	r2, r2, #2
 8002788:	17db      	asrs	r3, r3, #31
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <updateAnalogSensor+0x3d8>)
 8002790:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	e01a      	b.n	80027ce <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <updateAnalogSensor+0x3dc>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a4:	db05      	blt.n	80027b2 <updateAnalogSensor+0x39a>
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	dc04      	bgt.n	80027c8 <updateAnalogSensor+0x3b0>
 80027be:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2100      	movs	r1, #0
 80027c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3301      	adds	r3, #1
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0b      	cmp	r3, #11
 80027d2:	dde1      	ble.n	8002798 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <updateAnalogSensor+0x3e0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]

}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200003ac 	.word	0x200003ac
 80027ec:	66666667 	.word	0x66666667
 80027f0:	2001f024 	.word	0x2001f024
 80027f4:	2001f008 	.word	0x2001f008
 80027f8:	20000030 	.word	0x20000030

080027fc <sensorCalibration>:

void sensorCalibration()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a0      	sub	sp, #128	; 0x80
 8002800:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002806:	2230      	movs	r2, #48	; 0x30
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f008 fa75 	bl	800acfa <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	2230      	movs	r2, #48	; 0x30
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f008 fa6e 	bl	800acfa <memset>
 800281e:	4bd8      	ldr	r3, [pc, #864]	; (8002b80 <sensorCalibration+0x384>)
 8002820:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002822:	2300      	movs	r3, #0
 8002824:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002828:	e026      	b.n	8002878 <sensorCalibration+0x7c>
		max_values[i] = 00;
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	4ad5      	ldr	r2, [pc, #852]	; (8002b84 <sensorCalibration+0x388>)
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 800283a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800283e:	4ad2      	ldr	r2, [pc, #840]	; (8002b88 <sensorCalibration+0x38c>)
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	4ad1      	ldr	r2, [pc, #836]	; (8002b8c <sensorCalibration+0x390>)
 8002846:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002848:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002852:	4413      	add	r3, r2
 8002854:	3b40      	subs	r3, #64	; 0x40
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 800285c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002866:	4413      	add	r3, r2
 8002868:	3b70      	subs	r3, #112	; 0x70
 800286a:	4ac8      	ldr	r2, [pc, #800]	; (8002b8c <sensorCalibration+0x390>)
 800286c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800286e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002872:	3301      	adds	r3, #1
 8002874:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002878:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800287c:	2b0b      	cmp	r3, #11
 800287e:	d9d4      	bls.n	800282a <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002886:	e013      	b.n	80028b0 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002888:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800288c:	4ac0      	ldr	r2, [pc, #768]	; (8002b90 <sensorCalibration+0x394>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002898:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289c:	4abd      	ldr	r2, [pc, #756]	; (8002b94 <sensorCalibration+0x398>)
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	4aba      	ldr	r2, [pc, #744]	; (8002b8c <sensorCalibration+0x390>)
 80028a4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80028a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d9e7      	bls.n	8002888 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 80028b8:	e0f5      	b.n	8002aa6 <sensorCalibration+0x2aa>

		setLED2('X');
 80028ba:	2058      	movs	r0, #88	; 0x58
 80028bc:	f7ff f862 	bl	8001984 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028c6:	e06e      	b.n	80029a6 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 80028c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028cc:	4ab2      	ldr	r2, [pc, #712]	; (8002b98 <sensorCalibration+0x39c>)
 80028ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028d6:	ee07 2a90 	vmov	s15, r2
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028e4:	4413      	add	r3, r2
 80028e6:	3b40      	subs	r3, #64	; 0x40
 80028e8:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 80028ec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028f0:	4aa9      	ldr	r2, [pc, #676]	; (8002b98 <sensorCalibration+0x39c>)
 80028f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028fa:	ee07 2a90 	vmov	s15, r2
 80028fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002908:	4413      	add	r3, r2
 800290a:	3b70      	subs	r3, #112	; 0x70
 800290c:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002910:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800291a:	4413      	add	r3, r2
 800291c:	3b40      	subs	r3, #64	; 0x40
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002926:	4a97      	ldr	r2, [pc, #604]	; (8002b84 <sensorCalibration+0x388>)
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd0d      	ble.n	8002956 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 800293a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800293e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002948:	440a      	add	r2, r1
 800294a:	3a40      	subs	r2, #64	; 0x40
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	498d      	ldr	r1, [pc, #564]	; (8002b84 <sensorCalibration+0x388>)
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002960:	4413      	add	r3, r2
 8002962:	3b70      	subs	r3, #112	; 0x70
 8002964:	ed93 7a00 	vldr	s14, [r3]
 8002968:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296c:	4a86      	ldr	r2, [pc, #536]	; (8002b88 <sensorCalibration+0x38c>)
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d50d      	bpl.n	800299c <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002980:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002984:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800298e:	440a      	add	r2, r1
 8002990:	3a70      	subs	r2, #112	; 0x70
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	497c      	ldr	r1, [pc, #496]	; (8002b88 <sensorCalibration+0x38c>)
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800299c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029aa:	2b0b      	cmp	r3, #11
 80029ac:	d98c      	bls.n	80028c8 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b4:	e073      	b.n	8002a9e <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 80029b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ba:	4a78      	ldr	r2, [pc, #480]	; (8002b9c <sensorCalibration+0x3a0>)
 80029bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c4:	ee07 2a90 	vmov	s15, r2
 80029c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029d2:	4413      	add	r3, r2
 80029d4:	3b78      	subs	r3, #120	; 0x78
 80029d6:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 80029da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <sensorCalibration+0x3a0>)
 80029e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029e8:	ee07 2a90 	vmov	s15, r2
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029f6:	4413      	add	r3, r2
 80029f8:	3b80      	subs	r3, #128	; 0x80
 80029fa:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 80029fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b78      	subs	r3, #120	; 0x78
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a14:	4a5e      	ldr	r2, [pc, #376]	; (8002b90 <sensorCalibration+0x394>)
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	dd10      	ble.n	8002a4a <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002a28:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a2c:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <sensorCalibration+0x3a0>)
 8002a2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a36:	ee07 2a90 	vmov	s15, r2
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <sensorCalibration+0x394>)
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	edc3 7a00 	vstr	s15, [r3]
 8002a48:	e024      	b.n	8002a94 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002a4a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a54:	4413      	add	r3, r2
 8002a56:	3b80      	subs	r3, #128	; 0x80
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <sensorCalibration+0x398>)
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d50f      	bpl.n	8002a94 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002a74:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <sensorCalibration+0x3a0>)
 8002a7a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a7e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a82:	ee07 2a90 	vmov	s15, r2
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <sensorCalibration+0x398>)
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a94:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002a9e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d987      	bls.n	80029b6 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002aa6:	204c      	movs	r0, #76	; 0x4c
 8002aa8:	f003 fce2 	bl	8006470 <getSwitchStatus>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f43f af03 	beq.w	80028ba <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002aba:	e01b      	b.n	8002af4 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002abc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <sensorCalibration+0x388>)
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ed93 7a00 	vldr	s14, [r3]
 8002aca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <sensorCalibration+0x38c>)
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <sensorCalibration+0x3a4>)
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002aea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002af4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002af8:	2b0b      	cmp	r3, #11
 8002afa:	d9df      	bls.n	8002abc <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002b02:	e010      	b.n	8002b26 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002b04:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002b08:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b0c:	491e      	ldr	r1, [pc, #120]	; (8002b88 <sensorCalibration+0x38c>)
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	440a      	add	r2, r1
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4923      	ldr	r1, [pc, #140]	; (8002ba4 <sensorCalibration+0x3a8>)
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b1c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002b26:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b2a:	2b0b      	cmp	r3, #11
 8002b2c:	d9ea      	bls.n	8002b04 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002b34:	e01b      	b.n	8002b6e <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002b36:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <sensorCalibration+0x394>)
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <sensorCalibration+0x398>)
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <sensorCalibration+0x3ac>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b64:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002b6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d9df      	bls.n	8002b36 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002b7c:	e027      	b.n	8002bce <sensorCalibration+0x3d2>
 8002b7e:	bf00      	nop
 8002b80:	447a0000 	.word	0x447a0000
 8002b84:	2001f188 	.word	0x2001f188
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	44bb8000 	.word	0x44bb8000
 8002b90:	2001f138 	.word	0x2001f138
 8002b94:	2001f1b8 	.word	0x2001f1b8
 8002b98:	2000028c 	.word	0x2000028c
 8002b9c:	200002a4 	.word	0x200002a4
 8002ba0:	2001f02c 	.word	0x2001f02c
 8002ba4:	2001efc8 	.word	0x2001efc8
 8002ba8:	2001f000 	.word	0x2001f000
		side_offset_values[i] = side_min_values[i];
 8002bac:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002bb0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bb4:	490a      	ldr	r1, [pc, #40]	; (8002be0 <sensorCalibration+0x3e4>)
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	440a      	add	r2, r1
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	4909      	ldr	r1, [pc, #36]	; (8002be4 <sensorCalibration+0x3e8>)
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002bce:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d9ea      	bls.n	8002bac <sensorCalibration+0x3b0>
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	3780      	adds	r7, #128	; 0x80
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2001f1b8 	.word	0x2001f1b8
 8002be4:	2001efc0 	.word	0x2001efc0

08002be8 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <initLog+0x60>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <initLog+0x64>)
 8002bf2:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <initLog+0x68>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <initLog+0x6c>)
 8002bfa:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <initLog+0x70>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <initLog+0x74>)
 8002c02:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <initLog+0x78>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <initLog+0x7c>)
 8002c0a:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <initLog+0x80>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <initLog+0x84>)
 8002c12:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <initLog+0x60>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <initLog+0x88>)
 8002c1a:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <initLog+0x68>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <initLog+0x8c>)
 8002c22:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <initLog+0x70>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <initLog+0x90>)
 8002c2a:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <initLog+0x78>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <initLog+0x94>)
 8002c32:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <initLog+0x80>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <initLog+0x98>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	0800f1d4 	.word	0x0800f1d4
 8002c4c:	2001efa8 	.word	0x2001efa8
 8002c50:	0800f1d8 	.word	0x0800f1d8
 8002c54:	2001effc 	.word	0x2001effc
 8002c58:	0800f1dc 	.word	0x0800f1dc
 8002c5c:	2001efb8 	.word	0x2001efb8
 8002c60:	0800f1e0 	.word	0x0800f1e0
 8002c64:	2001efa4 	.word	0x2001efa4
 8002c68:	0800f1e4 	.word	0x0800f1e4
 8002c6c:	2001efb4 	.word	0x2001efb4
 8002c70:	2001efb0 	.word	0x2001efb0
 8002c74:	2001efbc 	.word	0x2001efbc
 8002c78:	2001f028 	.word	0x2001f028
 8002c7c:	2001f020 	.word	0x2001f020
 8002c80:	2001eff8 	.word	0x2001eff8

08002c84 <saveDistance>:

void saveDistance(float distance){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <saveDistance+0x2c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fc68 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <saveDistance+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <saveDistance+0x2c>)
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2001efa8 	.word	0x2001efa8

08002cb4 <saveTheta>:

void saveTheta(float theta){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <saveTheta+0x2c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fc50 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <saveTheta+0x2c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <saveTheta+0x2c>)
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2001effc 	.word	0x2001effc

08002ce4 <saveCross>:

void saveCross(float cross){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <saveCross+0x2c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc38 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <saveCross+0x2c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <saveCross+0x2c>)
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2001efb8 	.word	0x2001efb8

08002d14 <saveSide>:

void saveSide(float side){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <saveSide+0x2c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fc20 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <saveSide+0x2c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3304      	adds	r3, #4
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <saveSide+0x2c>)
 8002d34:	6013      	str	r3, [r2, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2001efa4 	.word	0x2001efa4

08002d44 <saveDebug>:

void saveDebug(float value){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <saveDebug+0x2c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fc08 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <saveDebug+0x2c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <saveDebug+0x2c>)
 8002d64:	6013      	str	r3, [r2, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2001efb4 	.word	0x2001efb4

08002d74 <ereaseLog>:


void ereaseLog(){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8002d78:	2007      	movs	r0, #7
 8002d7a:	f7fe fbd7 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8002d7e:	2008      	movs	r0, #8
 8002d80:	f7fe fbd4 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8002d84:	2009      	movs	r0, #9
 8002d86:	f7fe fbd1 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f7fe fbce 	bl	800152c <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002d90:	200b      	movs	r0, #11
 8002d92:	f7fe fbcb 	bl	800152c <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <ereaseLog+0x50>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <ereaseLog+0x54>)
 8002d9c:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <ereaseLog+0x58>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <ereaseLog+0x5c>)
 8002da4:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <ereaseLog+0x60>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <ereaseLog+0x64>)
 8002dac:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <ereaseLog+0x68>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <ereaseLog+0x6c>)
 8002db4:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <ereaseLog+0x70>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <ereaseLog+0x74>)
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800f1d4 	.word	0x0800f1d4
 8002dc8:	2001efa8 	.word	0x2001efa8
 8002dcc:	0800f1d8 	.word	0x0800f1d8
 8002dd0:	2001effc 	.word	0x2001effc
 8002dd4:	0800f1dc 	.word	0x0800f1dc
 8002dd8:	2001efb8 	.word	0x2001efb8
 8002ddc:	0800f1e0 	.word	0x0800f1e0
 8002de0:	2001efa4 	.word	0x2001efa4
 8002de4:	0800f1e4 	.word	0x0800f1e4
 8002de8:	2001efb4 	.word	0x2001efb4

08002dec <ereaseDebugLog>:

void ereaseDebugLog(){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002df0:	200b      	movs	r0, #11
 8002df2:	f7fe fb9b 	bl	800152c <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <ereaseDebugLog+0x18>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <ereaseDebugLog+0x1c>)
 8002dfc:	6013      	str	r3, [r2, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	0800f1e4 	.word	0x0800f1e4
 8002e08:	2001efb4 	.word	0x2001efb4

08002e0c <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <getDistanceLogSize+0x14>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20016e40 	.word	0x20016e40

08002e24 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <getCrossLogSize+0x14>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20016e44 	.word	0x20016e44

08002e3c <getSideLogSize>:

uint16_t getSideLogSize(){
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	return log_side_cnt;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <getSideLogSize+0x14>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20016e46 	.word	0x20016e46

08002e54 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <getDebugLogSize+0x14>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20016e48 	.word	0x20016e48

08002e6c <loadDistance>:


void loadDistance(){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <loadDistance+0x6c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <loadDistance+0x70>)
 8002e7c:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <loadDistance+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <loadDistance+0x70>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4915      	ldr	r1, [pc, #84]	; (8002ee4 <loadDistance+0x78>)
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <loadDistance+0x78>)
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eef4 7a67 	vcmp.f32	s15, s15
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d60e      	bvs.n	8002eca <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <loadDistance+0x74>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <loadDistance+0x74>)
 8002eb6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <loadDistance+0x70>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <loadDistance+0x70>)
 8002ec0:	6013      	str	r3, [r2, #0]
		i++;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 8002ec8:	e7dc      	b.n	8002e84 <loadDistance+0x18>
			break;
 8002eca:	bf00      	nop
	}
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	0800f1d4 	.word	0x0800f1d4
 8002edc:	2001efb0 	.word	0x2001efb0
 8002ee0:	20016e40 	.word	0x20016e40
 8002ee4:	2000c260 	.word	0x2000c260

08002ee8 <loadTheta>:

void loadTheta(){
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <loadTheta+0x6c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <loadTheta+0x70>)
 8002ef8:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <loadTheta+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <loadTheta+0x70>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4915      	ldr	r1, [pc, #84]	; (8002f60 <loadTheta+0x78>)
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <loadTheta+0x78>)
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	eef4 7a67 	vcmp.f32	s15, s15
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d60e      	bvs.n	8002f46 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <loadTheta+0x74>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <loadTheta+0x74>)
 8002f32:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <loadTheta+0x70>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <loadTheta+0x70>)
 8002f3c:	6013      	str	r3, [r2, #0]
		i++;
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	3301      	adds	r3, #1
 8002f42:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8002f44:	e7dc      	b.n	8002f00 <loadTheta+0x18>
			break;
 8002f46:	bf00      	nop
	}
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	0800f1d8 	.word	0x0800f1d8
 8002f58:	2001efbc 	.word	0x2001efbc
 8002f5c:	20016e42 	.word	0x20016e42
 8002f60:	20011850 	.word	0x20011850

08002f64 <loadCross>:

void loadCross(){
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <loadCross+0x6c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <loadCross+0x70>)
 8002f74:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <loadCross+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <loadCross+0x70>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	4915      	ldr	r1, [pc, #84]	; (8002fdc <loadCross+0x78>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <loadCross+0x78>)
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eef4 7a67 	vcmp.f32	s15, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d60e      	bvs.n	8002fc2 <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <loadCross+0x74>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <loadCross+0x74>)
 8002fae:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <loadCross+0x70>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <loadCross+0x70>)
 8002fb8:	6013      	str	r3, [r2, #0]
		i++;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 8002fc0:	e7dc      	b.n	8002f7c <loadCross+0x18>
			break;
 8002fc2:	bf00      	nop
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	0800f1dc 	.word	0x0800f1dc
 8002fd4:	2001f028 	.word	0x2001f028
 8002fd8:	20016e44 	.word	0x20016e44
 8002fdc:	200003c0 	.word	0x200003c0

08002fe0 <loadSide>:

void loadSide(){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <loadSide+0x6c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <loadSide+0x70>)
 8002ff0:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <loadSide+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <loadSide+0x70>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	4915      	ldr	r1, [pc, #84]	; (8003058 <loadSide+0x78>)
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <loadSide+0x78>)
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	eef4 7a67 	vcmp.f32	s15, s15
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d60e      	bvs.n	800303e <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <loadSide+0x74>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <loadSide+0x74>)
 800302a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <loadSide+0x70>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3304      	adds	r3, #4
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <loadSide+0x70>)
 8003034:	6013      	str	r3, [r2, #0]
		i++;
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	3301      	adds	r3, #1
 800303a:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 800303c:	e7dc      	b.n	8002ff8 <loadSide+0x18>
			break;
 800303e:	bf00      	nop
	}
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	0800f1e0 	.word	0x0800f1e0
 8003050:	2001f020 	.word	0x2001f020
 8003054:	20016e46 	.word	0x20016e46
 8003058:	20000550 	.word	0x20000550

0800305c <loadDebug>:

void loadDebug(){
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <loadDebug+0x6c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <loadDebug+0x70>)
 800306c:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <loadDebug+0x74>)
 8003070:	2200      	movs	r2, #0
 8003072:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <loadDebug+0x70>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	4915      	ldr	r1, [pc, #84]	; (80030d4 <loadDebug+0x78>)
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <loadDebug+0x78>)
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eef4 7a67 	vcmp.f32	s15, s15
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d60e      	bvs.n	80030ba <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <loadDebug+0x74>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <loadDebug+0x74>)
 80030a6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <loadDebug+0x70>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <loadDebug+0x70>)
 80030b0:	6013      	str	r3, [r2, #0]
		i++;
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	3301      	adds	r3, #1
 80030b6:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80030b8:	e7dc      	b.n	8003074 <loadDebug+0x18>
			break;
 80030ba:	bf00      	nop
	}
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	0800f1e4 	.word	0x0800f1e4
 80030cc:	2001eff8 	.word	0x2001eff8
 80030d0:	20016e48 	.word	0x20016e48
 80030d4:	200006e0 	.word	0x200006e0

080030d8 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
	return log_distance;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <getDistanceArrayPointer+0x10>)
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	2000c260 	.word	0x2000c260

080030ec <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	return log_theta;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <getThetaArrayPointer+0x10>)
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20011850 	.word	0x20011850

08003100 <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <getDistanceLog+0x28>)
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	ee07 3a90 	vmov	s15, r3
}
 8003118:	eeb0 0a67 	vmov.f32	s0, s15
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000c260 	.word	0x2000c260

0800312c <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <getCrossLog+0x28>)
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
}
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200003c0 	.word	0x200003c0

08003158 <getSideLog>:

float getSideLog(uint16_t idx){
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <getSideLog+0x28>)
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	ee07 3a90 	vmov	s15, r3
}
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000550 	.word	0x20000550

08003184 <getDebugLog>:

float getDebugLog(uint16_t idx){
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	4a06      	ldr	r2, [pc, #24]	; (80031ac <getDebugLog+0x28>)
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	ee07 3a90 	vmov	s15, r3
}
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200006e0 	.word	0x200006e0

080031b0 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80031c4:	2200      	movs	r2, #0
 80031c6:	2104      	movs	r1, #4
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <read_byte+0x50>)
 80031ca:	f004 ff03 	bl	8007fd4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80031ce:	f107 010f 	add.w	r1, r7, #15
 80031d2:	2364      	movs	r3, #100	; 0x64
 80031d4:	2201      	movs	r2, #1
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <read_byte+0x54>)
 80031d8:	f005 fcee 	bl	8008bb8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80031dc:	f107 010e 	add.w	r1, r7, #14
 80031e0:	2364      	movs	r3, #100	; 0x64
 80031e2:	2201      	movs	r2, #1
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <read_byte+0x54>)
 80031e6:	f005 fe1b 	bl	8008e20 <HAL_SPI_Receive>
		CS_SET;
 80031ea:	2201      	movs	r2, #1
 80031ec:	2104      	movs	r1, #4
 80031ee:	4804      	ldr	r0, [pc, #16]	; (8003200 <read_byte+0x50>)
 80031f0:	f004 fef0 	bl	8007fd4 <HAL_GPIO_WritePin>

	return val;
 80031f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40020c00 	.word	0x40020c00
 8003204:	2001f288 	.word	0x2001f288

08003208 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	460a      	mov	r2, r1
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	4613      	mov	r3, r2
 8003216:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321e:	b2db      	uxtb	r3, r3
 8003220:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8003222:	2200      	movs	r2, #0
 8003224:	2104      	movs	r1, #4
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <write_byte+0x50>)
 8003228:	f004 fed4 	bl	8007fd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800322c:	f107 010f 	add.w	r1, r7, #15
 8003230:	2364      	movs	r3, #100	; 0x64
 8003232:	2201      	movs	r2, #1
 8003234:	4809      	ldr	r0, [pc, #36]	; (800325c <write_byte+0x54>)
 8003236:	f005 fcbf 	bl	8008bb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800323a:	1db9      	adds	r1, r7, #6
 800323c:	2364      	movs	r3, #100	; 0x64
 800323e:	2201      	movs	r2, #1
 8003240:	4806      	ldr	r0, [pc, #24]	; (800325c <write_byte+0x54>)
 8003242:	f005 fded 	bl	8008e20 <HAL_SPI_Receive>
	CS_SET;
 8003246:	2201      	movs	r2, #1
 8003248:	2104      	movs	r1, #4
 800324a:	4803      	ldr	r0, [pc, #12]	; (8003258 <write_byte+0x50>)
 800324c:	f004 fec2 	bl	8007fd4 <HAL_GPIO_WritePin>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40020c00 	.word	0x40020c00
 800325c:	2001f288 	.word	0x2001f288

08003260 <IMU_init>:

uint8_t IMU_init() {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 800326a:	2075      	movs	r0, #117	; 0x75
 800326c:	f7ff ffa0 	bl	80031b0 <read_byte>
 8003270:	4603      	mov	r3, r0
 8003272:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	2b70      	cmp	r3, #112	; 0x70
 8003278:	d110      	bne.n	800329c <IMU_init+0x3c>
		ret = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800327e:	2100      	movs	r1, #0
 8003280:	206b      	movs	r0, #107	; 0x6b
 8003282:	f7ff ffc1 	bl	8003208 <write_byte>
		HAL_Delay(100);
 8003286:	2064      	movs	r0, #100	; 0x64
 8003288:	f003 fa72 	bl	8006770 <HAL_Delay>
		write_byte(0x1A, 0x00);
 800328c:	2100      	movs	r1, #0
 800328e:	201a      	movs	r0, #26
 8003290:	f7ff ffba 	bl	8003208 <write_byte>
		write_byte(0x1B, 0x18);
 8003294:	2118      	movs	r1, #24
 8003296:	201b      	movs	r0, #27
 8003298:	f7ff ffb6 	bl	8003208 <write_byte>
	}
	return ret;
 800329c:	79fb      	ldrb	r3, [r7, #7]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <read_gyro_data>:

void read_gyro_data() {
 80032a8:	b598      	push	{r3, r4, r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80032ac:	2047      	movs	r0, #71	; 0x47
 80032ae:	f7ff ff7f 	bl	80031b0 <read_byte>
 80032b2:	4603      	mov	r3, r0
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	b21c      	sxth	r4, r3
 80032b8:	2048      	movs	r0, #72	; 0x48
 80032ba:	f7ff ff79 	bl	80031b0 <read_byte>
 80032be:	4603      	mov	r3, r0
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	4323      	orrs	r3, r4
 80032c4:	b21a      	sxth	r2, r3
 80032c6:	4b02      	ldr	r3, [pc, #8]	; (80032d0 <read_gyro_data+0x28>)
 80032c8:	801a      	strh	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	bd98      	pop	{r3, r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2001f1c0 	.word	0x2001f1c0
 80032d4:	00000000 	.word	0x00000000

080032d8 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1550, ki = 20000, kd = 0.0;
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <calculateVelocityControlFlip+0x130>)
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <calculateVelocityControlFlip+0x134>)
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 80032f2:	f000 f909 	bl	8003508 <getCurrentVelocity>
 80032f6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 80032fa:	4b45      	ldr	r3, [pc, #276]	; (8003410 <calculateVelocityControlFlip+0x138>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d17a      	bne.n	80033f8 <calculateVelocityControlFlip+0x120>
		if(i_clear_flag == 1){
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <calculateVelocityControlFlip+0x13c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <calculateVelocityControlFlip+0x40>
			i = 0;
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <calculateVelocityControlFlip+0x140>)
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003312:	4b40      	ldr	r3, [pc, #256]	; (8003414 <calculateVelocityControlFlip+0x13c>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003318:	f000 f8c2 	bl	80034a0 <setvariablespeed>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	edd7 7a03 	vldr	s15, [r7, #12]
 8003324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003328:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 800332c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003330:	edd7 7a04 	vldr	s15, [r7, #16]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <calculateVelocityControlFlip+0x140>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f901 	bl	8000548 <__aeabi_f2d>
 8003346:	4604      	mov	r4, r0
 8003348:	460d      	mov	r5, r1
 800334a:	ed97 7a06 	vldr	s14, [r7, #24]
 800334e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	ee17 0a90 	vmov	r0, s15
 800335a:	f7fd f8f5 	bl	8000548 <__aeabi_f2d>
 800335e:	a328      	add	r3, pc, #160	; (adr r3, 8003400 <calculateVelocityControlFlip+0x128>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f948 	bl	80005f8 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fc ff8c 	bl	800028c <__adddf3>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4618      	mov	r0, r3
 800337a:	4621      	mov	r1, r4
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2f>
 8003380:	4602      	mov	r2, r0
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <calculateVelocityControlFlip+0x140>)
 8003384:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <calculateVelocityControlFlip+0x140>)
 8003388:	ed93 7a00 	vldr	s14, [r3]
 800338c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <calculateVelocityControlFlip+0x144>)
 8003396:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 800339a:	4a21      	ldr	r2, [pc, #132]	; (8003420 <calculateVelocityControlFlip+0x148>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <calculateVelocityControlFlip+0x140>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <calculateVelocityControlFlip+0x14c>)
 80033a6:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		if(mode == 1){
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <calculateVelocityControlFlip+0x150>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10e      	bne.n	80033ce <calculateVelocityControlFlip+0xf6>
		    velocity_control_term = p + i + d;
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <calculateVelocityControlFlip+0x140>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033be:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <calculateVelocityControlFlip+0x154>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]
 80033cc:	e011      	b.n	80033f2 <calculateVelocityControlFlip+0x11a>
		}
		else if(mode == 2){
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <calculateVelocityControlFlip+0x150>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d10d      	bne.n	80033f2 <calculateVelocityControlFlip+0x11a>
			//velocity_control_term = (p + i + d) + target_acceleration;
			velocity_control_term = p + i + d;
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <calculateVelocityControlFlip+0x140>)
 80033d8:	ed93 7a00 	vldr	s14, [r3]
 80033dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <calculateVelocityControlFlip+0x154>)
 80033ee:	edc3 7a00 	vstr	s15, [r3]
		}

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80033f2:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <calculateVelocityControlFlip+0x158>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6013      	str	r3, [r2, #0]

	}

}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003400:	d2f1a9fc 	.word	0xd2f1a9fc
 8003404:	3f50624d 	.word	0x3f50624d
 8003408:	44c1c000 	.word	0x44c1c000
 800340c:	469c4000 	.word	0x469c4000
 8003410:	20016e4a 	.word	0x20016e4a
 8003414:	20016e4b 	.word	0x20016e4b
 8003418:	20016e5c 	.word	0x20016e5c
 800341c:	2001f1cc 	.word	0x2001f1cc
 8003420:	2001f1e0 	.word	0x2001f1e0
 8003424:	2001f1d8 	.word	0x2001f1d8
 8003428:	2001f1d0 	.word	0x2001f1d0
 800342c:	20016e4c 	.word	0x20016e4c
 8003430:	20016e60 	.word	0x20016e60

08003434 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <getVelocityControlTerm+0x18>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	ee07 3a90 	vmov	s15, r3
}
 8003440:	eeb0 0a67 	vmov.f32	s0, s15
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	20016e4c 	.word	0x20016e4c

08003450 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <setTargetVelocity+0x1c>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	20016e50 	.word	0x20016e50

08003470 <setTargetAcceleration>:

void setTargetAcceleration(float acceleration)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	ed87 0a01 	vstr	s0, [r7, #4]
	target_acceleration = acceleration / 10000;
 800347a:	ed97 7a01 	vldr	s14, [r7, #4]
 800347e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003498 <setTargetAcceleration+0x28>
 8003482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <setTargetAcceleration+0x2c>)
 8003488:	edc3 7a00 	vstr	s15, [r3]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	461c4000 	.word	0x461c4000
 800349c:	20016e54 	.word	0x20016e54

080034a0 <setvariablespeed>:

float setvariablespeed(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 80034a4:	f7fd ffcc 	bl	8001440 <getspeedcount>
 80034a8:	eeb0 7a40 	vmov.f32	s14, s0
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <setvariablespeed+0x5c>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ba:	db04      	blt.n	80034c6 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <setvariablespeed+0x5c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <setvariablespeed+0x60>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e012      	b.n	80034ec <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 80034c6:	f7fd ffbb 	bl	8001440 <getspeedcount>
 80034ca:	eeb0 7a40 	vmov.f32	s14, s0
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <setvariablespeed+0x5c>)
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034dc:	d506      	bpl.n	80034ec <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 80034de:	f7fd ffaf 	bl	8001440 <getspeedcount>
 80034e2:	eef0 7a40 	vmov.f32	s15, s0
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <setvariablespeed+0x60>)
 80034e8:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <setvariablespeed+0x60>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	ee07 3a90 	vmov	s15, r3
}
 80034f4:	eeb0 0a67 	vmov.f32	s0, s15
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20016e50 	.word	0x20016e50
 8003500:	20016e58 	.word	0x20016e58
 8003504:	00000000 	.word	0x00000000

08003508 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	80fb      	strh	r3, [r7, #6]
 8003512:	2300      	movs	r3, #0
 8003514:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003516:	1d3a      	adds	r2, r7, #4
 8003518:	1dbb      	adds	r3, r7, #6
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fecb 	bl	80012b8 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	461a      	mov	r2, r3
 8003528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	0fda      	lsrs	r2, r3, #31
 8003530:	4413      	add	r3, r2
 8003532:	105b      	asrs	r3, r3, #1
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353c:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7fd f801 	bl	8000548 <__aeabi_f2d>
 8003546:	a30d      	add	r3, pc, #52	; (adr r3, 800357c <getCurrentVelocity+0x74>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fd f854 	bl	80005f8 <__aeabi_dmul>
 8003550:	4603      	mov	r3, r0
 8003552:	460c      	mov	r4, r1
 8003554:	4618      	mov	r0, r3
 8003556:	4621      	mov	r1, r4
 8003558:	f7fd fb46 	bl	8000be8 <__aeabi_d2f>
 800355c:	4603      	mov	r3, r0
 800355e:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <getCurrentVelocity+0x70>)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	ee07 3a90 	vmov	s15, r3
}
 800356c:	eeb0 0a67 	vmov.f32	s0, s15
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}
 8003576:	bf00      	nop
 8003578:	2001f1d4 	.word	0x2001f1d4
 800357c:	31e7b585 	.word	0x31e7b585
 8003580:	3f8e28c7 	.word	0x3f8e28c7

08003584 <getPID>:
{
	return target_acceleration;
}

float getPID()
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
	return pid_plus;
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <getPID+0x18>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	ee07 3a90 	vmov	s15, r3
}
 8003590:	eeb0 0a67 	vmov.f32	s0, s15
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	2001f1cc 	.word	0x2001f1cc

080035a0 <startVelocityControl>:

void startVelocityControl(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <startVelocityControl+0x1c>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <startVelocityControl+0x20>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20016e4a 	.word	0x20016e4a
 80035c0:	20016e4b 	.word	0x20016e4b

080035c4 <stopVelocityControl>:

void stopVelocityControl(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <stopVelocityControl+0x14>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	20016e4a 	.word	0x20016e4a

080035dc <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <setClearFlagOfVelocityControlI+0x14>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20016e4b 	.word	0x20016e4b

080035f4 <setrunmode>:

void setrunmode(uint16_t num){
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
	mode = num;
 80035fe:	4a04      	ldr	r2, [pc, #16]	; (8003610 <setrunmode+0x1c>)
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	8013      	strh	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	2001f1d0 	.word	0x2001f1d0

08003614 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800361c:	1d39      	adds	r1, r7, #4
 800361e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003622:	2201      	movs	r2, #1
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <__io_putchar+0x20>)
 8003626:	f006 fed4 	bl	800a3d2 <HAL_UART_Transmit>
	return ch;
 800362a:	687b      	ldr	r3, [r7, #4]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	2001f2e0 	.word	0x2001f2e0

08003638 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d121      	bne.n	800368e <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003652:	6013      	str	r3, [r2, #0]
      timer2++;
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800365c:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 800365e:	f7fd fd5f 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003662:	f7fd ffbd 	bl	80015e0 <updateIMUValue>
      updateAnalogSensor();
 8003666:	f7fe fed7 	bl	8002418 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 800366a:	f7fe fad5 	bl	8001c18 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 800366e:	f7ff fe33 	bl	80032d8 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003672:	f7fd fc89 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003676:	f7fe fb7d 	bl	8001d74 <lineTraceFlip>
      runningFlip();
 800367a:	f001 fb97 	bl	8004dac <runningFlip>
      motorCtrlFlip();
 800367e:	f001 f8c3 	bl	8004808 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003682:	f001 f925 	bl	80048d0 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003686:	f001 f991 	bl	80049ac <updateSideSensorStatus>

      checkCourseOut();
 800368a:	f7fe fc4b 	bl	8001f24 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d106      	bne.n	80036a6 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80036a0:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 80036a2:	f7fe fcc3 	bl	800202c <storeAnalogSensorBuffer>

   }
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40001000 	.word	0x40001000
 80036b4:	2001f1e4 	.word	0x2001f1e4
 80036b8:	2001f22c 	.word	0x2001f22c
 80036bc:	40001400 	.word	0x40001400
 80036c0:	2001f404 	.word	0x2001f404

080036c4 <init>:

void init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	  initADC();
 80036c8:	f7fe fc9a 	bl	8002000 <initADC>
	  initEncoder();
 80036cc:	f7fd fd0a 	bl	80010e4 <initEncoder>
	  initLog();
 80036d0:	f7ff fa8a 	bl	8002be8 <initLog>
	  initGyro();
 80036d4:	f7fd ff74 	bl	80015c0 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 80036d8:	4809      	ldr	r0, [pc, #36]	; (8003700 <init+0x3c>)
 80036da:	f005 ff88 	bl	80095ee <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 80036de:	4809      	ldr	r0, [pc, #36]	; (8003704 <init+0x40>)
 80036e0:	f005 ff85 	bl	80095ee <HAL_TIM_Base_Start_IT>

	  initMotor();
 80036e4:	f001 f878 	bl	80047d8 <initMotor>

	  setLED('R');
 80036e8:	2052      	movs	r0, #82	; 0x52
 80036ea:	f7fe f87d 	bl	80017e8 <setLED>

	  sensorCalibration();
 80036ee:	f7ff f885 	bl	80027fc <sensorCalibration>

	  HAL_Delay(1000);
 80036f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036f6:	f003 f83b 	bl	8006770 <HAL_Delay>

}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	2001f380 	.word	0x2001f380
 8003704:	2001f468 	.word	0x2001f468

08003708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b085      	sub	sp, #20
 800370c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800370e:	f002 ffbd 	bl	800668c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003712:	f000 fb0f 	bl	8003d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003716:	f000 ff9d 	bl	8004654 <MX_GPIO_Init>
  MX_DMA_Init();
 800371a:	f000 ff73 	bl	8004604 <MX_DMA_Init>
  MX_TIM1_Init();
 800371e:	f000 fd23 	bl	8004168 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003722:	f000 fda3 	bl	800426c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003726:	f000 fdf5 	bl	8004314 <MX_TIM4_Init>
  MX_TIM8_Init();
 800372a:	f000 feb1 	bl	8004490 <MX_TIM8_Init>
  MX_ADC1_Init();
 800372e:	f000 fb6b 	bl	8003e08 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003732:	f000 fcb5 	bl	80040a0 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003736:	f000 fce1 	bl	80040fc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800373a:	f000 ff39 	bl	80045b0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800373e:	f000 fe3d 	bl	80043bc <MX_TIM6_Init>
  MX_TIM7_Init();
 8003742:	f000 fe71 	bl	8004428 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003746:	f000 fbbf 	bl	8003ec8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 800374a:	f7ff ffbb 	bl	80036c4 <init>

  bool running_flag = false;
 800374e:	2300      	movs	r3, #0
 8003750:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003752:	204c      	movs	r0, #76	; 0x4c
 8003754:	f002 fe8c 	bl	8006470 <getSwitchStatus>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d109      	bne.n	8003772 <main+0x6a>
 800375e:	4bc5      	ldr	r3, [pc, #788]	; (8003a74 <main+0x36c>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <main+0x6a>
		  timer = 0;
 8003766:	4bc4      	ldr	r3, [pc, #784]	; (8003a78 <main+0x370>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
		  sw = 1;
 800376c:	4bc1      	ldr	r3, [pc, #772]	; (8003a74 <main+0x36c>)
 800376e:	2201      	movs	r2, #1
 8003770:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003772:	204c      	movs	r0, #76	; 0x4c
 8003774:	f002 fe7c 	bl	8006470 <getSwitchStatus>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10a      	bne.n	8003794 <main+0x8c>
 800377e:	4bbe      	ldr	r3, [pc, #760]	; (8003a78 <main+0x370>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b14      	cmp	r3, #20
 8003784:	d906      	bls.n	8003794 <main+0x8c>
 8003786:	4bbb      	ldr	r3, [pc, #748]	; (8003a74 <main+0x36c>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <main+0x8c>
		  sw = 2;
 800378e:	4bb9      	ldr	r3, [pc, #740]	; (8003a74 <main+0x36c>)
 8003790:	2202      	movs	r2, #2
 8003792:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8003794:	4bb8      	ldr	r3, [pc, #736]	; (8003a78 <main+0x370>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b28      	cmp	r3, #40	; 0x28
 800379a:	d906      	bls.n	80037aa <main+0xa2>
 800379c:	4bb5      	ldr	r3, [pc, #724]	; (8003a74 <main+0x36c>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <main+0xa2>
		  sw = 0;
 80037a4:	4bb3      	ldr	r3, [pc, #716]	; (8003a74 <main+0x36c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 80037aa:	204c      	movs	r0, #76	; 0x4c
 80037ac:	f002 fe60 	bl	8006470 <getSwitchStatus>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10c      	bne.n	80037d0 <main+0xc8>
 80037b6:	4baf      	ldr	r3, [pc, #700]	; (8003a74 <main+0x36c>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d108      	bne.n	80037d0 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 80037be:	4baf      	ldr	r3, [pc, #700]	; (8003a7c <main+0x374>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	4bad      	ldr	r3, [pc, #692]	; (8003a7c <main+0x374>)
 80037c8:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 80037ca:	4baa      	ldr	r3, [pc, #680]	; (8003a74 <main+0x36c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 80037d0:	2052      	movs	r0, #82	; 0x52
 80037d2:	f002 fe4d 	bl	8006470 <getSwitchStatus>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d109      	bne.n	80037f0 <main+0xe8>
 80037dc:	4ba8      	ldr	r3, [pc, #672]	; (8003a80 <main+0x378>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <main+0xe8>
	  	  timer = 0;
 80037e4:	4ba4      	ldr	r3, [pc, #656]	; (8003a78 <main+0x370>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 80037ea:	4ba5      	ldr	r3, [pc, #660]	; (8003a80 <main+0x378>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 80037f0:	2052      	movs	r0, #82	; 0x52
 80037f2:	f002 fe3d 	bl	8006470 <getSwitchStatus>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10a      	bne.n	8003812 <main+0x10a>
 80037fc:	4b9e      	ldr	r3, [pc, #632]	; (8003a78 <main+0x370>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b14      	cmp	r3, #20
 8003802:	d906      	bls.n	8003812 <main+0x10a>
 8003804:	4b9e      	ldr	r3, [pc, #632]	; (8003a80 <main+0x378>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <main+0x10a>
	  	  sw2 = 2;
 800380c:	4b9c      	ldr	r3, [pc, #624]	; (8003a80 <main+0x378>)
 800380e:	2202      	movs	r2, #2
 8003810:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003812:	4b99      	ldr	r3, [pc, #612]	; (8003a78 <main+0x370>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b28      	cmp	r3, #40	; 0x28
 8003818:	d906      	bls.n	8003828 <main+0x120>
 800381a:	4b99      	ldr	r3, [pc, #612]	; (8003a80 <main+0x378>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d102      	bne.n	8003828 <main+0x120>
	  	  sw2 = 0;
 8003822:	4b97      	ldr	r3, [pc, #604]	; (8003a80 <main+0x378>)
 8003824:	2200      	movs	r2, #0
 8003826:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003828:	2052      	movs	r0, #82	; 0x52
 800382a:	f002 fe21 	bl	8006470 <getSwitchStatus>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10c      	bne.n	800384e <main+0x146>
 8003834:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <main+0x378>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d108      	bne.n	800384e <main+0x146>
	  	  cnt++;
 800383c:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <main+0x37c>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <main+0x37c>)
 8003846:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003848:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <main+0x378>)
 800384a:	2200      	movs	r2, #0
 800384c:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 800384e:	4b8d      	ldr	r3, [pc, #564]	; (8003a84 <main+0x37c>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d902      	bls.n	800385c <main+0x154>
		  cnt = 0;
 8003856:	4b8b      	ldr	r3, [pc, #556]	; (8003a84 <main+0x37c>)
 8003858:	2200      	movs	r2, #0
 800385a:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 800385c:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <main+0x37c>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <main+0x174>
		  HAL_Delay(1000);
 8003864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003868:	f002 ff82 	bl	8006770 <HAL_Delay>
		  running_flag = true;
 800386c:	2301      	movs	r3, #1
 800386e:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8003870:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <main+0x380>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003876:	4b83      	ldr	r3, [pc, #524]	; (8003a84 <main+0x37c>)
 8003878:	2200      	movs	r2, #0
 800387a:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <main+0x188>
		  stopLineTrace();
 8003888:	f7fe fb3a 	bl	8001f00 <stopLineTrace>
		  stopVelocityControl();
 800388c:	f7ff fe9a 	bl	80035c4 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){  //goal判?��?
 8003890:	f002 f9c4 	bl	8005c1c <getgoalStatus>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <main+0x1a2>
		  running_flag = false;
 800389a:	2300      	movs	r3, #0
 800389c:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 800389e:	4b79      	ldr	r3, [pc, #484]	; (8003a84 <main+0x37c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 80038a4:	2000      	movs	r0, #0
 80038a6:	f001 f863 	bl	8004970 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 12){
 80038aa:	4b74      	ldr	r3, [pc, #464]	; (8003a7c <main+0x374>)
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	2b0b      	cmp	r3, #11
 80038b0:	d902      	bls.n	80038b8 <main+0x1b0>
		  soiya = 0;
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <main+0x374>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 80038b8:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <main+0x374>)
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	2b0b      	cmp	r3, #11
 80038be:	f200 8217 	bhi.w	8003cf0 <main+0x5e8>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <main+0x1c0>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038f9 	.word	0x080038f9
 80038cc:	08003923 	.word	0x08003923
 80038d0:	08003957 	.word	0x08003957
 80038d4:	0800398d 	.word	0x0800398d
 80038d8:	080039d1 	.word	0x080039d1
 80038dc:	08003a1b 	.word	0x08003a1b
 80038e0:	08003aa9 	.word	0x08003aa9
 80038e4:	08003b03 	.word	0x08003b03
 80038e8:	08003b5d 	.word	0x08003b5d
 80038ec:	08003bb7 	.word	0x08003bb7
 80038f0:	08003c0b 	.word	0x08003c0b
 80038f4:	08003c5d 	.word	0x08003c5d

			  case 0:
				  setLED('W');
 80038f8:	2057      	movs	r0, #87	; 0x57
 80038fa:	f7fd ff75 	bl	80017e8 <setLED>
				  setLED2('R');
 80038fe:	2052      	movs	r0, #82	; 0x52
 8003900:	f7fe f840 	bl	8001984 <setLED2>
				  printf("0\r\n");
 8003904:	4861      	ldr	r0, [pc, #388]	; (8003a8c <main+0x384>)
 8003906:	f008 f8b3 	bl	800ba70 <puts>

				  if(running_flag == true){
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 81f1 	beq.w	8003cf4 <main+0x5ec>
					  setLED('G');
 8003912:	2047      	movs	r0, #71	; 0x47
 8003914:	f7fd ff68 	bl	80017e8 <setLED>

				  		  setsuctionMotor(400);
 8003918:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800391c:	f001 f828 	bl	8004970 <setsuctionMotor>

				  }

				  break;
 8003920:	e1e8      	b.n	8003cf4 <main+0x5ec>

			  case 1:
				  setLED('G');
 8003922:	2047      	movs	r0, #71	; 0x47
 8003924:	f7fd ff60 	bl	80017e8 <setLED>
				  setLED2('G');
 8003928:	2047      	movs	r0, #71	; 0x47
 800392a:	f7fe f82b 	bl	8001984 <setLED2>

				  if(running_flag == true){
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 81e1 	beq.w	8003cf8 <main+0x5f0>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003936:	f7fd fdb7 	bl	80014a8 <clearspeedcount>

						  setTargetVelocity(0.0);
 800393a:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003a90 <main+0x388>
 800393e:	f7ff fd87 	bl	8003450 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(0);
 8003942:	2000      	movs	r0, #0
 8003944:	f001 f814 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800394c:	f002 ff10 	bl	8006770 <HAL_Delay>

						  running();
 8003950:	f001 f93c 	bl	8004bcc <running>
				  }

				  break;
 8003954:	e1d0      	b.n	8003cf8 <main+0x5f0>

			  case 2:
				  setLED('B');
 8003956:	2042      	movs	r0, #66	; 0x42
 8003958:	f7fd ff46 	bl	80017e8 <setLED>
				  setLED2('B');
 800395c:	2042      	movs	r0, #66	; 0x42
 800395e:	f7fe f811 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 81c9 	beq.w	8003cfc <main+0x5f4>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800396a:	f7fd fd9d 	bl	80014a8 <clearspeedcount>

						  setTargetVelocity(1.5);
 800396e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003972:	f7ff fd6d 	bl	8003450 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(300);
 8003976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800397a:	f000 fff9 	bl	8004970 <setsuctionMotor>
						  HAL_Delay(1000);
 800397e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003982:	f002 fef5 	bl	8006770 <HAL_Delay>

						  running();
 8003986:	f001 f921 	bl	8004bcc <running>
				  }

				  break;
 800398a:	e1b7      	b.n	8003cfc <main+0x5f4>

			  case 3:
				  setLED('Y');
 800398c:	2059      	movs	r0, #89	; 0x59
 800398e:	f7fd ff2b 	bl	80017e8 <setLED>
				  setLED2('R');
 8003992:	2052      	movs	r0, #82	; 0x52
 8003994:	f7fd fff6 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 81b0 	beq.w	8003d00 <main+0x5f8>
						  //startLineTrace();

					      clearspeedcount();
 80039a0:	f7fd fd82 	bl	80014a8 <clearspeedcount>

					      IMU_average();
 80039a4:	f7fd fece 	bl	8001744 <IMU_average>

					      setRunMode(1);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f001 f829 	bl	8004a00 <setRunMode>

					      setVelocityRange(1.4, 1.4);
 80039ae:	eddf 0a39 	vldr	s1, [pc, #228]	; 8003a94 <main+0x38c>
 80039b2:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003a94 <main+0x38c>
 80039b6:	f002 f93d 	bl	8005c34 <setVelocityRange>

						  setsuctionMotor(350);
 80039ba:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80039be:	f000 ffd7 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 80039c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c6:	f002 fed3 	bl	8006770 <HAL_Delay>

						  running();
 80039ca:	f001 f8ff 	bl	8004bcc <running>
				  }

				  break;
 80039ce:	e197      	b.n	8003d00 <main+0x5f8>

			  case 4:
				  setLED('Y');
 80039d0:	2059      	movs	r0, #89	; 0x59
 80039d2:	f7fd ff09 	bl	80017e8 <setLED>
				  setLED2('G');
 80039d6:	2047      	movs	r0, #71	; 0x47
 80039d8:	f7fd ffd4 	bl	8001984 <setLED2>

				  if(running_flag == true){
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8190 	beq.w	8003d04 <main+0x5fc>
						  //startLineTrace();

						  clearspeedcount();
 80039e4:	f7fd fd60 	bl	80014a8 <clearspeedcount>

						  IMU_average();
 80039e8:	f7fd feac 	bl	8001744 <IMU_average>

						  setRunMode(1);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f001 f807 	bl	8004a00 <setRunMode>
						  setrunmode(1);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f7ff fdfe 	bl	80035f4 <setrunmode>

						  setVelocityRange(1.8, 1.8);
 80039f8:	eddf 0a27 	vldr	s1, [pc, #156]	; 8003a98 <main+0x390>
 80039fc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003a98 <main+0x390>
 8003a00:	f002 f918 	bl	8005c34 <setVelocityRange>

						  setsuctionMotor(350);
 8003a04:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003a08:	f000 ffb2 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a10:	f002 feae 	bl	8006770 <HAL_Delay>

						  running();
 8003a14:	f001 f8da 	bl	8004bcc <running>
				  }

				  break;
 8003a18:	e174      	b.n	8003d04 <main+0x5fc>

			  case 5:
				  setLED('C');
 8003a1a:	2043      	movs	r0, #67	; 0x43
 8003a1c:	f7fd fee4 	bl	80017e8 <setLED>
				  setLED2('R');
 8003a20:	2052      	movs	r0, #82	; 0x52
 8003a22:	f7fd ffaf 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 816d 	beq.w	8003d08 <main+0x600>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003a2e:	f7fd fd3b 	bl	80014a8 <clearspeedcount>

					      setRunMode(2);
 8003a32:	2002      	movs	r0, #2
 8003a34:	f000 ffe4 	bl	8004a00 <setRunMode>
					      setrunmode(2);
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f7ff fddb 	bl	80035f4 <setrunmode>

					      setVelocityRange(1.8, 1.8);
 8003a3e:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003a98 <main+0x390>
 8003a42:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003a98 <main+0x390>
 8003a46:	f002 f8f5 	bl	8005c34 <setVelocityRange>
					      setAccDec(4, 2);
 8003a4a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003a4e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8003a52:	f002 f907 	bl	8005c64 <setAccDec>
					      setStraightRadius(1000); //Do Not Change
 8003a56:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003aa4 <main+0x39c>
 8003a5a:	f002 f91b 	bl	8005c94 <setStraightRadius>

						  setsuctionMotor(350);
 8003a5e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003a62:	f000 ff85 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a6a:	f002 fe81 	bl	8006770 <HAL_Delay>

						  running();
 8003a6e:	f001 f8ad 	bl	8004bcc <running>
				  }

				  break;
 8003a72:	e149      	b.n	8003d08 <main+0x600>
 8003a74:	2001f400 	.word	0x2001f400
 8003a78:	2001f1e4 	.word	0x2001f1e4
 8003a7c:	20016e66 	.word	0x20016e66
 8003a80:	20016e64 	.word	0x20016e64
 8003a84:	2001f284 	.word	0x2001f284
 8003a88:	2001f22c 	.word	0x2001f22c
 8003a8c:	0800f190 	.word	0x0800f190
 8003a90:	00000000 	.word	0x00000000
 8003a94:	3fb33333 	.word	0x3fb33333
 8003a98:	3fe66666 	.word	0x3fe66666
 8003a9c:	400ccccd 	.word	0x400ccccd
 8003aa0:	40066666 	.word	0x40066666
 8003aa4:	447a0000 	.word	0x447a0000

			  case 6:
				  setLED('C');
 8003aa8:	2043      	movs	r0, #67	; 0x43
 8003aaa:	f7fd fe9d 	bl	80017e8 <setLED>
				  setLED2('G');
 8003aae:	2047      	movs	r0, #71	; 0x47
 8003ab0:	f7fd ff68 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8128 	beq.w	8003d0c <main+0x604>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003abc:	f7fd fcf4 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f000 ff9d 	bl	8004a00 <setRunMode>
						  setrunmode(2);
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f7ff fd94 	bl	80035f4 <setrunmode>

						  setVelocityRange(1.8, 5.0);
 8003acc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003ad0:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 8003a98 <main+0x390>
 8003ad4:	f002 f8ae 	bl	8005c34 <setVelocityRange>
						  setAccDec(3, 2);
 8003ad8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003adc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003ae0:	f002 f8c0 	bl	8005c64 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003ae4:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8003aa4 <main+0x39c>
 8003ae8:	f002 f8d4 	bl	8005c94 <setStraightRadius>

						  setsuctionMotor(350);
 8003aec:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003af0:	f000 ff3e 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003af8:	f002 fe3a 	bl	8006770 <HAL_Delay>

						  running();
 8003afc:	f001 f866 	bl	8004bcc <running>
				  }

				  break;
 8003b00:	e104      	b.n	8003d0c <main+0x604>

			  case 7:
				  setLED('C');
 8003b02:	2043      	movs	r0, #67	; 0x43
 8003b04:	f7fd fe70 	bl	80017e8 <setLED>
				  setLED2('B');
 8003b08:	2042      	movs	r0, #66	; 0x42
 8003b0a:	f7fd ff3b 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80fd 	beq.w	8003d10 <main+0x608>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003b16:	f7fd fcc7 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	f000 ff70 	bl	8004a00 <setRunMode>
						  setrunmode(2);
 8003b20:	2002      	movs	r0, #2
 8003b22:	f7ff fd67 	bl	80035f4 <setrunmode>

						  setVelocityRange(2.2, 4.5);
 8003b26:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 8003b2a:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 8003a9c <main+0x394>
 8003b2e:	f002 f881 	bl	8005c34 <setVelocityRange>
						  setAccDec(5, 1);
 8003b32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b36:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003b3a:	f002 f893 	bl	8005c64 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003b3e:	ed1f 0a27 	vldr	s0, [pc, #-156]	; 8003aa4 <main+0x39c>
 8003b42:	f002 f8a7 	bl	8005c94 <setStraightRadius>

						  setsuctionMotor(350);
 8003b46:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003b4a:	f000 ff11 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b52:	f002 fe0d 	bl	8006770 <HAL_Delay>

						  running();
 8003b56:	f001 f839 	bl	8004bcc <running>
				  }

				  break;
 8003b5a:	e0d9      	b.n	8003d10 <main+0x608>

			  case 8:
				  setLED('C');
 8003b5c:	2043      	movs	r0, #67	; 0x43
 8003b5e:	f7fd fe43 	bl	80017e8 <setLED>
				  setLED2('W');
 8003b62:	2057      	movs	r0, #87	; 0x57
 8003b64:	f7fd ff0e 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80d2 	beq.w	8003d14 <main+0x60c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003b70:	f7fd fc9a 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003b74:	2002      	movs	r0, #2
 8003b76:	f000 ff43 	bl	8004a00 <setRunMode>
						  setrunmode(2);
 8003b7a:	2002      	movs	r0, #2
 8003b7c:	f7ff fd3a 	bl	80035f4 <setrunmode>

						  setVelocityRange(2.0, 6.5);
 8003b80:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8003b84:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003b88:	f002 f854 	bl	8005c34 <setVelocityRange>
						  setAccDec(5, 2);
 8003b8c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003b90:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003b94:	f002 f866 	bl	8005c64 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003b98:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 8003aa4 <main+0x39c>
 8003b9c:	f002 f87a 	bl	8005c94 <setStraightRadius>

						  setsuctionMotor(350);
 8003ba0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003ba4:	f000 fee4 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bac:	f002 fde0 	bl	8006770 <HAL_Delay>

						  running();
 8003bb0:	f001 f80c 	bl	8004bcc <running>
				  }

				  break;
 8003bb4:	e0ae      	b.n	8003d14 <main+0x60c>

			  case 9:
				  setLED('C');
 8003bb6:	2043      	movs	r0, #67	; 0x43
 8003bb8:	f7fd fe16 	bl	80017e8 <setLED>
				  setLED2('Y');
 8003bbc:	2059      	movs	r0, #89	; 0x59
 8003bbe:	f7fd fee1 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a7 	beq.w	8003d18 <main+0x610>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003bca:	f7fd fc6d 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003bce:	2002      	movs	r0, #2
 8003bd0:	f000 ff16 	bl	8004a00 <setRunMode>

						  setVelocityRange(8.0, 8.0);
 8003bd4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8003bd8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8003bdc:	f002 f82a 	bl	8005c34 <setVelocityRange>
						  setAccDec(10, 3);
 8003be0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003be4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003be8:	f002 f83c 	bl	8005c64 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003bec:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 8003aa4 <main+0x39c>
 8003bf0:	f002 f850 	bl	8005c94 <setStraightRadius>

						  setsuctionMotor(350);
 8003bf4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003bf8:	f000 feba 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c00:	f002 fdb6 	bl	8006770 <HAL_Delay>

						  running();
 8003c04:	f000 ffe2 	bl	8004bcc <running>
				  }

			  	  break;
 8003c08:	e086      	b.n	8003d18 <main+0x610>

			  case 10:
				  setLED('C');
 8003c0a:	2043      	movs	r0, #67	; 0x43
 8003c0c:	f7fd fdec 	bl	80017e8 <setLED>
				  setLED2('X');
 8003c10:	2058      	movs	r0, #88	; 0x58
 8003c12:	f7fd feb7 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d07f      	beq.n	8003d1c <main+0x614>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003c1c:	f7fd fc44 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003c20:	2002      	movs	r0, #2
 8003c22:	f000 feed 	bl	8004a00 <setRunMode>

						  setVelocityRange(2.1, 7.0);
 8003c26:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8003c2a:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8003aa0 <main+0x398>
 8003c2e:	f002 f801 	bl	8005c34 <setVelocityRange>
						  setAccDec(7, 2);
 8003c32:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003c36:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003c3a:	f002 f813 	bl	8005c64 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003c3e:	ed1f 0a67 	vldr	s0, [pc, #-412]	; 8003aa4 <main+0x39c>
 8003c42:	f002 f827 	bl	8005c94 <setStraightRadius>

						  setsuctionMotor(350);
 8003c46:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003c4a:	f000 fe91 	bl	8004970 <setsuctionMotor>

						  HAL_Delay(1000);
 8003c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c52:	f002 fd8d 	bl	8006770 <HAL_Delay>

						  running();
 8003c56:	f000 ffb9 	bl	8004bcc <running>
				  }

				  break;
 8003c5a:	e05f      	b.n	8003d1c <main+0x614>

			  case 11:
				  setLED('W');
 8003c5c:	2057      	movs	r0, #87	; 0x57
 8003c5e:	f7fd fdc3 	bl	80017e8 <setLED>
				  setLED2('A');
 8003c62:	2041      	movs	r0, #65	; 0x41
 8003c64:	f7fd fe8e 	bl	8001984 <setLED2>
				  printf("6\r\n");
 8003c68:	482e      	ldr	r0, [pc, #184]	; (8003d24 <main+0x61c>)
 8003c6a:	f007 ff01 	bl	800ba70 <puts>

				  if(running_flag == true){
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d055      	beq.n	8003d20 <main+0x618>
					  loadDistance();
 8003c74:	f7ff f8fa 	bl	8002e6c <loadDistance>
					  loadTheta();
 8003c78:	f7ff f936 	bl	8002ee8 <loadTheta>
					  loadCross();
 8003c7c:	f7ff f972 	bl	8002f64 <loadCross>
					  loadSide();
 8003c80:	f7ff f9ae 	bl	8002fe0 <loadSide>
					  loadDebug();
 8003c84:	f7ff f9ea 	bl	800305c <loadDebug>
					  printf("Side\r\n");
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/

					  printf("TargetVelocity, CurrentVelocity\r\n");
 8003c88:	4827      	ldr	r0, [pc, #156]	; (8003d28 <main+0x620>)
 8003c8a:	f007 fef1 	bl	800ba70 <puts>
					  uint16_t size = getDebugLogSize();
 8003c8e:	f7ff f8e1 	bl	8002e54 <getDebugLogSize>
 8003c92:	4603      	mov	r3, r0
 8003c94:	807b      	strh	r3, [r7, #2]
					  for(uint16_t i = 0; i < size; i = i+2){
 8003c96:	2300      	movs	r3, #0
 8003c98:	80bb      	strh	r3, [r7, #4]
 8003c9a:	e021      	b.n	8003ce0 <main+0x5d8>
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
 8003c9c:	88bb      	ldrh	r3, [r7, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fa70 	bl	8003184 <getDebugLog>
 8003ca4:	ee10 3a10 	vmov	r3, s0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc4d 	bl	8000548 <__aeabi_f2d>
 8003cae:	4605      	mov	r5, r0
 8003cb0:	460e      	mov	r6, r1
 8003cb2:	88bb      	ldrh	r3, [r7, #4]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fa63 	bl	8003184 <getDebugLog>
 8003cbe:	ee10 3a10 	vmov	r3, s0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fc40 	bl	8000548 <__aeabi_f2d>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	e9cd 3400 	strd	r3, r4, [sp]
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	4633      	mov	r3, r6
 8003cd4:	4815      	ldr	r0, [pc, #84]	; (8003d2c <main+0x624>)
 8003cd6:	f007 fe57 	bl	800b988 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+2){
 8003cda:	88bb      	ldrh	r3, [r7, #4]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	80bb      	strh	r3, [r7, #4]
 8003ce0:	88ba      	ldrh	r2, [r7, #4]
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3d9      	bcc.n	8003c9c <main+0x594>
					  }

					  printf("9999, 9999\r\n");
 8003ce8:	4811      	ldr	r0, [pc, #68]	; (8003d30 <main+0x628>)
 8003cea:	f007 fec1 	bl	800ba70 <puts>
				  }

				  break;
 8003cee:	e017      	b.n	8003d20 <main+0x618>

			  default:
				  break;
 8003cf0:	bf00      	nop
 8003cf2:	e52e      	b.n	8003752 <main+0x4a>
				  break;
 8003cf4:	bf00      	nop
 8003cf6:	e52c      	b.n	8003752 <main+0x4a>
				  break;
 8003cf8:	bf00      	nop
 8003cfa:	e52a      	b.n	8003752 <main+0x4a>
				  break;
 8003cfc:	bf00      	nop
 8003cfe:	e528      	b.n	8003752 <main+0x4a>
				  break;
 8003d00:	bf00      	nop
 8003d02:	e526      	b.n	8003752 <main+0x4a>
				  break;
 8003d04:	bf00      	nop
 8003d06:	e524      	b.n	8003752 <main+0x4a>
				  break;
 8003d08:	bf00      	nop
 8003d0a:	e522      	b.n	8003752 <main+0x4a>
				  break;
 8003d0c:	bf00      	nop
 8003d0e:	e520      	b.n	8003752 <main+0x4a>
				  break;
 8003d10:	bf00      	nop
 8003d12:	e51e      	b.n	8003752 <main+0x4a>
				  break;
 8003d14:	bf00      	nop
 8003d16:	e51c      	b.n	8003752 <main+0x4a>
			  	  break;
 8003d18:	bf00      	nop
 8003d1a:	e51a      	b.n	8003752 <main+0x4a>
				  break;
 8003d1c:	bf00      	nop
 8003d1e:	e518      	b.n	8003752 <main+0x4a>
				  break;
 8003d20:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003d22:	e516      	b.n	8003752 <main+0x4a>
 8003d24:	0800f194 	.word	0x0800f194
 8003d28:	0800f198 	.word	0x0800f198
 8003d2c:	0800f1bc 	.word	0x0800f1bc
 8003d30:	0800f1c8 	.word	0x0800f1c8

08003d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b094      	sub	sp, #80	; 0x50
 8003d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d3a:	f107 0320 	add.w	r3, r7, #32
 8003d3e:	2230      	movs	r2, #48	; 0x30
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f006 ffd9 	bl	800acfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d48:	f107 030c 	add.w	r3, r7, #12
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <SystemClock_Config+0xcc>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <SystemClock_Config+0xcc>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <SystemClock_Config+0xcc>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d74:	2300      	movs	r3, #0
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <SystemClock_Config+0xd0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a21      	ldr	r2, [pc, #132]	; (8003e04 <SystemClock_Config+0xd0>)
 8003d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <SystemClock_Config+0xd0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d90:	2302      	movs	r3, #2
 8003d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d94:	2301      	movs	r3, #1
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d98:	2310      	movs	r3, #16
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003da0:	2300      	movs	r3, #0
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003da4:	2308      	movs	r3, #8
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003da8:	23a8      	movs	r3, #168	; 0xa8
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dac:	2302      	movs	r3, #2
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003db0:	2304      	movs	r3, #4
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db4:	f107 0320 	add.w	r3, r7, #32
 8003db8:	4618      	mov	r0, r3
 8003dba:	f004 fa5d 	bl	8008278 <HAL_RCC_OscConfig>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003dc4:	f000 fd04 	bl	80047d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dc8:	230f      	movs	r3, #15
 8003dca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003de0:	f107 030c 	add.w	r3, r7, #12
 8003de4:	2105      	movs	r1, #5
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 fcb6 	bl	8008758 <HAL_RCC_ClockConfig>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003df2:	f000 fced 	bl	80047d0 <Error_Handler>
  }
}
 8003df6:	bf00      	nop
 8003df8:	3750      	adds	r7, #80	; 0x50
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000

08003e08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e0e:	463b      	mov	r3, r7
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e1c:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <MX_ADC1_Init+0xb8>)
 8003e1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e20:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003e2e:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e3a:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <MX_ADC1_Init+0xbc>)
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e56:	2202      	movs	r2, #2
 8003e58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e68:	4814      	ldr	r0, [pc, #80]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e6a:	f002 fca3 	bl	80067b4 <HAL_ADC_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003e74:	f000 fcac 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003e78:	230c      	movs	r3, #12
 8003e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003e80:	2307      	movs	r3, #7
 8003e82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	4619      	mov	r1, r3
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003e8a:	f002 fde7 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e94:	f000 fc9c 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003e98:	230d      	movs	r3, #13
 8003e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4805      	ldr	r0, [pc, #20]	; (8003ebc <MX_ADC1_Init+0xb4>)
 8003ea6:	f002 fdd9 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003eb0:	f000 fc8e 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	2001f140 	.word	0x2001f140
 8003ec0:	40012000 	.word	0x40012000
 8003ec4:	0f000001 	.word	0x0f000001

08003ec8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ece:	463b      	mov	r3, r7
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003eda:	4b6e      	ldr	r3, [pc, #440]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <MX_ADC2_Init+0x1d0>)
 8003ede:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ee0:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ee6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003ee8:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003eee:	4b69      	ldr	r3, [pc, #420]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003ef4:	4b67      	ldr	r3, [pc, #412]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003efa:	4b66      	ldr	r3, [pc, #408]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f02:	4b64      	ldr	r3, [pc, #400]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f08:	4b62      	ldr	r3, [pc, #392]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f0a:	4a64      	ldr	r2, [pc, #400]	; (800409c <MX_ADC2_Init+0x1d4>)
 8003f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f0e:	4b61      	ldr	r3, [pc, #388]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8003f14:	4b5f      	ldr	r3, [pc, #380]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f16:	220c      	movs	r2, #12
 8003f18:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003f1a:	4b5e      	ldr	r3, [pc, #376]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f22:	4b5c      	ldr	r3, [pc, #368]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f28:	485a      	ldr	r0, [pc, #360]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f2a:	f002 fc43 	bl	80067b4 <HAL_ADC_Init>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003f34:	f000 fc4c 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f40:	2307      	movs	r3, #7
 8003f42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f44:	463b      	mov	r3, r7
 8003f46:	4619      	mov	r1, r3
 8003f48:	4852      	ldr	r0, [pc, #328]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f4a:	f002 fd87 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003f54:	f000 fc3c 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f60:	463b      	mov	r3, r7
 8003f62:	4619      	mov	r1, r3
 8003f64:	484b      	ldr	r0, [pc, #300]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f66:	f002 fd79 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003f70:	f000 fc2e 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003f74:	2302      	movs	r3, #2
 8003f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4844      	ldr	r0, [pc, #272]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f82:	f002 fd6b 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003f8c:	f000 fc20 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f90:	2303      	movs	r3, #3
 8003f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003f94:	2304      	movs	r3, #4
 8003f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f98:	463b      	mov	r3, r7
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	483d      	ldr	r0, [pc, #244]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003f9e:	f002 fd5d 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003fa8:	f000 fc12 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003fac:	2304      	movs	r3, #4
 8003fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003fb0:	2305      	movs	r3, #5
 8003fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4836      	ldr	r0, [pc, #216]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003fba:	f002 fd4f 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003fc4:	f000 fc04 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003fc8:	2305      	movs	r3, #5
 8003fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003fcc:	2306      	movs	r3, #6
 8003fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	482f      	ldr	r0, [pc, #188]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003fd6:	f002 fd41 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003fe0:	f000 fbf6 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003fe4:	2306      	movs	r3, #6
 8003fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003fe8:	2307      	movs	r3, #7
 8003fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fec:	463b      	mov	r3, r7
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4828      	ldr	r0, [pc, #160]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8003ff2:	f002 fd33 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003ffc:	f000 fbe8 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004000:	2307      	movs	r3, #7
 8004002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004004:	2308      	movs	r3, #8
 8004006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004008:	463b      	mov	r3, r7
 800400a:	4619      	mov	r1, r3
 800400c:	4821      	ldr	r0, [pc, #132]	; (8004094 <MX_ADC2_Init+0x1cc>)
 800400e:	f002 fd25 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004018:	f000 fbda 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800401c:	2308      	movs	r3, #8
 800401e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004020:	2309      	movs	r3, #9
 8004022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004024:	463b      	mov	r3, r7
 8004026:	4619      	mov	r1, r3
 8004028:	481a      	ldr	r0, [pc, #104]	; (8004094 <MX_ADC2_Init+0x1cc>)
 800402a:	f002 fd17 	bl	8006a5c <HAL_ADC_ConfigChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004034:	f000 fbcc 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004038:	2309      	movs	r3, #9
 800403a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800403c:	230a      	movs	r3, #10
 800403e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004040:	463b      	mov	r3, r7
 8004042:	4619      	mov	r1, r3
 8004044:	4813      	ldr	r0, [pc, #76]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8004046:	f002 fd09 	bl	8006a5c <HAL_ADC_ConfigChannel>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004050:	f000 fbbe 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004054:	230e      	movs	r3, #14
 8004056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004058:	230b      	movs	r3, #11
 800405a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800405c:	463b      	mov	r3, r7
 800405e:	4619      	mov	r1, r3
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <MX_ADC2_Init+0x1cc>)
 8004062:	f002 fcfb 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800406c:	f000 fbb0 	bl	80047d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004070:	230f      	movs	r3, #15
 8004072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004074:	230c      	movs	r3, #12
 8004076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004078:	463b      	mov	r3, r7
 800407a:	4619      	mov	r1, r3
 800407c:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_ADC2_Init+0x1cc>)
 800407e:	f002 fced 	bl	8006a5c <HAL_ADC_ConfigChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004088:	f000 fba2 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	2001f0f0 	.word	0x2001f0f0
 8004098:	40012100 	.word	0x40012100
 800409c:	0f000001 	.word	0x0f000001

080040a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <MX_I2C1_Init+0x54>)
 80040a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040ac:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <MX_I2C1_Init+0x58>)
 80040ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040d8:	2200      	movs	r2, #0
 80040da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040dc:	4804      	ldr	r0, [pc, #16]	; (80040f0 <MX_I2C1_Init+0x50>)
 80040de:	f003 ff93 	bl	8008008 <HAL_I2C_Init>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040e8:	f000 fb72 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2001f230 	.word	0x2001f230
 80040f4:	40005400 	.word	0x40005400
 80040f8:	000186a0 	.word	0x000186a0

080040fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004100:	4b17      	ldr	r3, [pc, #92]	; (8004160 <MX_SPI3_Init+0x64>)
 8004102:	4a18      	ldr	r2, [pc, #96]	; (8004164 <MX_SPI3_Init+0x68>)
 8004104:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004106:	4b16      	ldr	r3, [pc, #88]	; (8004160 <MX_SPI3_Init+0x64>)
 8004108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800410c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <MX_SPI3_Init+0x64>)
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <MX_SPI3_Init+0x64>)
 8004116:	2200      	movs	r2, #0
 8004118:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <MX_SPI3_Init+0x64>)
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <MX_SPI3_Init+0x64>)
 8004122:	2200      	movs	r2, #0
 8004124:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <MX_SPI3_Init+0x64>)
 8004128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800412c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <MX_SPI3_Init+0x64>)
 8004130:	2228      	movs	r2, #40	; 0x28
 8004132:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <MX_SPI3_Init+0x64>)
 8004136:	2200      	movs	r2, #0
 8004138:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <MX_SPI3_Init+0x64>)
 800413c:	2200      	movs	r2, #0
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <MX_SPI3_Init+0x64>)
 8004142:	2200      	movs	r2, #0
 8004144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <MX_SPI3_Init+0x64>)
 8004148:	220a      	movs	r2, #10
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800414c:	4804      	ldr	r0, [pc, #16]	; (8004160 <MX_SPI3_Init+0x64>)
 800414e:	f004 fccf 	bl	8008af0 <HAL_SPI_Init>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004158:	f000 fb3a 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2001f288 	.word	0x2001f288
 8004164:	40003c00 	.word	0x40003c00

08004168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b092      	sub	sp, #72	; 0x48
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	2220      	movs	r2, #32
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f006 fdb1 	bl	800acfa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004198:	4b32      	ldr	r3, [pc, #200]	; (8004264 <MX_TIM1_Init+0xfc>)
 800419a:	4a33      	ldr	r2, [pc, #204]	; (8004268 <MX_TIM1_Init+0x100>)
 800419c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80041aa:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041ac:	f240 3247 	movw	r2, #839	; 0x347
 80041b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b2:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041c4:	4827      	ldr	r0, [pc, #156]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041c6:	f005 fa36 	bl	8009636 <HAL_TIM_PWM_Init>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80041d0:	f000 fafe 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d4:	2300      	movs	r3, #0
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041e0:	4619      	mov	r1, r3
 80041e2:	4820      	ldr	r0, [pc, #128]	; (8004264 <MX_TIM1_Init+0xfc>)
 80041e4:	f005 ffc6 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80041ee:	f000 faef 	bl	80047d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041f2:	2360      	movs	r3, #96	; 0x60
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800420a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420e:	220c      	movs	r2, #12
 8004210:	4619      	mov	r1, r3
 8004212:	4814      	ldr	r0, [pc, #80]	; (8004264 <MX_TIM1_Init+0xfc>)
 8004214:	f005 fc4a 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800421e:	f000 fad7 	bl	80047d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800423a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4807      	ldr	r0, [pc, #28]	; (8004264 <MX_TIM1_Init+0xfc>)
 8004246:	f006 f811 	bl	800a26c <HAL_TIMEx_ConfigBreakDeadTime>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004250:	f000 fabe 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004254:	4803      	ldr	r0, [pc, #12]	; (8004264 <MX_TIM1_Init+0xfc>)
 8004256:	f002 f80d 	bl	8006274 <HAL_TIM_MspPostInit>

}
 800425a:	bf00      	nop
 800425c:	3748      	adds	r7, #72	; 0x48
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2001f3c0 	.word	0x2001f3c0
 8004268:	40010000 	.word	0x40010000

0800426c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	; 0x30
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f006 fd3d 	bl	800acfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <MX_TIM3_Init+0xa0>)
 800428a:	4a21      	ldr	r2, [pc, #132]	; (8004310 <MX_TIM3_Init+0xa4>)
 800428c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <MX_TIM3_Init+0xa0>)
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004294:	4b1d      	ldr	r3, [pc, #116]	; (800430c <MX_TIM3_Init+0xa0>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800429a:	4b1c      	ldr	r3, [pc, #112]	; (800430c <MX_TIM3_Init+0xa0>)
 800429c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <MX_TIM3_Init+0xa0>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a8:	4b18      	ldr	r3, [pc, #96]	; (800430c <MX_TIM3_Init+0xa0>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042b6:	2301      	movs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042c2:	2300      	movs	r3, #0
 80042c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042c6:	2301      	movs	r3, #1
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042ca:	2300      	movs	r3, #0
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	4619      	mov	r1, r3
 80042d8:	480c      	ldr	r0, [pc, #48]	; (800430c <MX_TIM3_Init+0xa0>)
 80042da:	f005 fa15 	bl	8009708 <HAL_TIM_Encoder_Init>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80042e4:	f000 fa74 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4805      	ldr	r0, [pc, #20]	; (800430c <MX_TIM3_Init+0xa0>)
 80042f6:	f005 ff3d 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004300:	f000 fa66 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004304:	bf00      	nop
 8004306:	3730      	adds	r7, #48	; 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	2001f09c 	.word	0x2001f09c
 8004310:	40000400 	.word	0x40000400

08004314 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800431a:	f107 030c 	add.w	r3, r7, #12
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f006 fce9 	bl	800acfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <MX_TIM4_Init+0xa0>)
 8004332:	4a21      	ldr	r2, [pc, #132]	; (80043b8 <MX_TIM4_Init+0xa4>)
 8004334:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004336:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <MX_TIM4_Init+0xa0>)
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <MX_TIM4_Init+0xa0>)
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <MX_TIM4_Init+0xa0>)
 8004344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004348:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <MX_TIM4_Init+0xa0>)
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <MX_TIM4_Init+0xa0>)
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004356:	2301      	movs	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800436e:	2301      	movs	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004372:	2300      	movs	r3, #0
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800437a:	f107 030c 	add.w	r3, r7, #12
 800437e:	4619      	mov	r1, r3
 8004380:	480c      	ldr	r0, [pc, #48]	; (80043b4 <MX_TIM4_Init+0xa0>)
 8004382:	f005 f9c1 	bl	8009708 <HAL_TIM_Encoder_Init>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800438c:	f000 fa20 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	4619      	mov	r1, r3
 800439c:	4805      	ldr	r0, [pc, #20]	; (80043b4 <MX_TIM4_Init+0xa0>)
 800439e:	f005 fee9 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80043a8:	f000 fa12 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043ac:	bf00      	nop
 80043ae:	3730      	adds	r7, #48	; 0x30
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	2001f05c 	.word	0x2001f05c
 80043b8:	40000800 	.word	0x40000800

080043bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c2:	463b      	mov	r3, r7
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <MX_TIM6_Init+0x64>)
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <MX_TIM6_Init+0x68>)
 80043ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <MX_TIM6_Init+0x64>)
 80043d2:	2253      	movs	r2, #83	; 0x53
 80043d4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <MX_TIM6_Init+0x64>)
 80043d8:	2200      	movs	r2, #0
 80043da:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <MX_TIM6_Init+0x64>)
 80043de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <MX_TIM6_Init+0x64>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043ea:	480d      	ldr	r0, [pc, #52]	; (8004420 <MX_TIM6_Init+0x64>)
 80043ec:	f005 f8d4 	bl	8009598 <HAL_TIM_Base_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80043f6:	f000 f9eb 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004402:	463b      	mov	r3, r7
 8004404:	4619      	mov	r1, r3
 8004406:	4806      	ldr	r0, [pc, #24]	; (8004420 <MX_TIM6_Init+0x64>)
 8004408:	f005 feb4 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004412:	f000 f9dd 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2001f380 	.word	0x2001f380
 8004424:	40001000 	.word	0x40001000

08004428 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800442e:	463b      	mov	r3, r7
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_TIM7_Init+0x60>)
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <MX_TIM7_Init+0x64>)
 800443a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_TIM7_Init+0x60>)
 800443e:	2253      	movs	r2, #83	; 0x53
 8004440:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_TIM7_Init+0x60>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_TIM7_Init+0x60>)
 800444a:	2263      	movs	r2, #99	; 0x63
 800444c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_TIM7_Init+0x60>)
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <MX_TIM7_Init+0x60>)
 8004456:	f005 f89f 	bl	8009598 <HAL_TIM_Base_Init>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004460:	f000 f9b6 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004468:	2300      	movs	r3, #0
 800446a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800446c:	463b      	mov	r3, r7
 800446e:	4619      	mov	r1, r3
 8004470:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_TIM7_Init+0x60>)
 8004472:	f005 fe7f 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800447c:	f000 f9a8 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2001f468 	.word	0x2001f468
 800448c:	40001400 	.word	0x40001400

08004490 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b092      	sub	sp, #72	; 0x48
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004496:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
 80044b0:	615a      	str	r2, [r3, #20]
 80044b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	2220      	movs	r2, #32
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f006 fc1d 	bl	800acfa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044c0:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044c2:	4a3a      	ldr	r2, [pc, #232]	; (80045ac <MX_TIM8_Init+0x11c>)
 80044c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044c8:	2203      	movs	r2, #3
 80044ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80044d2:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044d4:	f240 628f 	movw	r2, #1679	; 0x68f
 80044d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044da:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044dc:	2200      	movs	r2, #0
 80044de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80044ec:	482e      	ldr	r0, [pc, #184]	; (80045a8 <MX_TIM8_Init+0x118>)
 80044ee:	f005 f8a2 	bl	8009636 <HAL_TIM_PWM_Init>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80044f8:	f000 f96a 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004500:	2300      	movs	r3, #0
 8004502:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004508:	4619      	mov	r1, r3
 800450a:	4827      	ldr	r0, [pc, #156]	; (80045a8 <MX_TIM8_Init+0x118>)
 800450c:	f005 fe32 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004516:	f000 f95b 	bl	80047d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800451a:	2360      	movs	r3, #96	; 0x60
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004522:	2300      	movs	r3, #0
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004526:	2300      	movs	r3, #0
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453a:	2200      	movs	r2, #0
 800453c:	4619      	mov	r1, r3
 800453e:	481a      	ldr	r0, [pc, #104]	; (80045a8 <MX_TIM8_Init+0x118>)
 8004540:	f005 fab4 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800454a:	f000 f941 	bl	80047d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800454e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004552:	2208      	movs	r2, #8
 8004554:	4619      	mov	r1, r3
 8004556:	4814      	ldr	r0, [pc, #80]	; (80045a8 <MX_TIM8_Init+0x118>)
 8004558:	f005 faa8 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004562:	f000 f935 	bl	80047d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800457a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800457e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004580:	2300      	movs	r3, #0
 8004582:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4807      	ldr	r0, [pc, #28]	; (80045a8 <MX_TIM8_Init+0x118>)
 800458a:	f005 fe6f 	bl	800a26c <HAL_TIMEx_ConfigBreakDeadTime>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004594:	f000 f91c 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004598:	4803      	ldr	r0, [pc, #12]	; (80045a8 <MX_TIM8_Init+0x118>)
 800459a:	f001 fe6b 	bl	8006274 <HAL_TIM_MspPostInit>

}
 800459e:	bf00      	nop
 80045a0:	3748      	adds	r7, #72	; 0x48
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	2001f1e8 	.word	0x2001f1e8
 80045ac:	40010400 	.word	0x40010400

080045b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <MX_USART1_UART_Init+0x50>)
 80045b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d6:	220c      	movs	r2, #12
 80045d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045e6:	4805      	ldr	r0, [pc, #20]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e8:	f005 fea6 	bl	800a338 <HAL_UART_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045f2:	f000 f8ed 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	2001f2e0 	.word	0x2001f2e0
 8004600:	40011000 	.word	0x40011000

08004604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <MX_DMA_Init+0x4c>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <MX_DMA_Init+0x4c>)
 8004614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004618:	6313      	str	r3, [r2, #48]	; 0x30
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <MX_DMA_Init+0x4c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	2038      	movs	r0, #56	; 0x38
 800462c:	f002 fd91 	bl	8007152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004630:	2038      	movs	r0, #56	; 0x38
 8004632:	f002 fdaa 	bl	800718a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004636:	2200      	movs	r2, #0
 8004638:	2100      	movs	r1, #0
 800463a:	203a      	movs	r0, #58	; 0x3a
 800463c:	f002 fd89 	bl	8007152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004640:	203a      	movs	r0, #58	; 0x3a
 8004642:	f002 fda2 	bl	800718a <HAL_NVIC_EnableIRQ>

}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800

08004654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465a:	f107 0314 	add.w	r3, r7, #20
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	609a      	str	r2, [r3, #8]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <MX_GPIO_Init+0x168>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a52      	ldr	r2, [pc, #328]	; (80047bc <MX_GPIO_Init+0x168>)
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b50      	ldr	r3, [pc, #320]	; (80047bc <MX_GPIO_Init+0x168>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <MX_GPIO_Init+0x168>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	4a4b      	ldr	r2, [pc, #300]	; (80047bc <MX_GPIO_Init+0x168>)
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004694:	6313      	str	r3, [r2, #48]	; 0x30
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <MX_GPIO_Init+0x168>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b45      	ldr	r3, [pc, #276]	; (80047bc <MX_GPIO_Init+0x168>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a44      	ldr	r2, [pc, #272]	; (80047bc <MX_GPIO_Init+0x168>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b42      	ldr	r3, [pc, #264]	; (80047bc <MX_GPIO_Init+0x168>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <MX_GPIO_Init+0x168>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4a3d      	ldr	r2, [pc, #244]	; (80047bc <MX_GPIO_Init+0x168>)
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30
 80046ce:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <MX_GPIO_Init+0x168>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <MX_GPIO_Init+0x168>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a36      	ldr	r2, [pc, #216]	; (80047bc <MX_GPIO_Init+0x168>)
 80046e4:	f043 0308 	orr.w	r3, r3, #8
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <MX_GPIO_Init+0x168>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80046f6:	2200      	movs	r2, #0
 80046f8:	f24e 2180 	movw	r1, #57984	; 0xe280
 80046fc:	4830      	ldr	r0, [pc, #192]	; (80047c0 <MX_GPIO_Init+0x16c>)
 80046fe:	f003 fc69 	bl	8007fd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004702:	2200      	movs	r2, #0
 8004704:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004708:	482e      	ldr	r0, [pc, #184]	; (80047c4 <MX_GPIO_Init+0x170>)
 800470a:	f003 fc63 	bl	8007fd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800470e:	2200      	movs	r2, #0
 8004710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004714:	482c      	ldr	r0, [pc, #176]	; (80047c8 <MX_GPIO_Init+0x174>)
 8004716:	f003 fc5d 	bl	8007fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	2104      	movs	r1, #4
 800471e:	482b      	ldr	r0, [pc, #172]	; (80047cc <MX_GPIO_Init+0x178>)
 8004720:	f003 fc58 	bl	8007fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004724:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004728:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004736:	f107 0314 	add.w	r3, r7, #20
 800473a:	4619      	mov	r1, r3
 800473c:	4820      	ldr	r0, [pc, #128]	; (80047c0 <MX_GPIO_Init+0x16c>)
 800473e:	f003 fa97 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004742:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8004746:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004748:	2301      	movs	r3, #1
 800474a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004750:	2300      	movs	r3, #0
 8004752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4619      	mov	r1, r3
 800475a:	481a      	ldr	r0, [pc, #104]	; (80047c4 <MX_GPIO_Init+0x170>)
 800475c:	f003 fa88 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004760:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	4619      	mov	r1, r3
 8004774:	4814      	ldr	r0, [pc, #80]	; (80047c8 <MX_GPIO_Init+0x174>)
 8004776:	f003 fa7b 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800477a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004780:	2301      	movs	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	4619      	mov	r1, r3
 8004792:	480d      	ldr	r0, [pc, #52]	; (80047c8 <MX_GPIO_Init+0x174>)
 8004794:	f003 fa6c 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004798:	2304      	movs	r3, #4
 800479a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479c:	2301      	movs	r3, #1
 800479e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	4619      	mov	r1, r3
 80047ae:	4807      	ldr	r0, [pc, #28]	; (80047cc <MX_GPIO_Init+0x178>)
 80047b0:	f003 fa5e 	bl	8007c70 <HAL_GPIO_Init>

}
 80047b4:	bf00      	nop
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40020800 	.word	0x40020800
 80047c4:	40020400 	.word	0x40020400
 80047c8:	40020000 	.word	0x40020000
 80047cc:	40020c00 	.word	0x40020c00

080047d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047d6:	e7fe      	b.n	80047d6 <Error_Handler+0x6>

080047d8 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 80047dc:	2100      	movs	r1, #0
 80047de:	4808      	ldr	r0, [pc, #32]	; (8004800 <initMotor+0x28>)
 80047e0:	f004 ff54 	bl	800968c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 80047e4:	2108      	movs	r1, #8
 80047e6:	4806      	ldr	r0, [pc, #24]	; (8004800 <initMotor+0x28>)
 80047e8:	f004 ff50 	bl	800968c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80047ec:	210c      	movs	r1, #12
 80047ee:	4805      	ldr	r0, [pc, #20]	; (8004804 <initMotor+0x2c>)
 80047f0:	f004 ff4c 	bl	800968c <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 80047f4:	2064      	movs	r0, #100	; 0x64
 80047f6:	f001 ffbb 	bl	8006770 <HAL_Delay>
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2001f1e8 	.word	0x2001f1e8
 8004804:	2001f3c0 	.word	0x2001f3c0

08004808 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <motorCtrlFlip+0xb0>)
 8004810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0d      	blt.n	8004834 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <motorCtrlFlip+0xb0>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <motorCtrlFlip+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004826:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004828:	2201      	movs	r2, #1
 800482a:	2180      	movs	r1, #128	; 0x80
 800482c:	4824      	ldr	r0, [pc, #144]	; (80048c0 <motorCtrlFlip+0xb8>)
 800482e:	f003 fbd1 	bl	8007fd4 <HAL_GPIO_WritePin>
 8004832:	e010      	b.n	8004856 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <motorCtrlFlip+0xb0>)
 8004836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800483a:	b29b      	uxth	r3, r3
 800483c:	425b      	negs	r3, r3
 800483e:	b29b      	uxth	r3, r3
 8004840:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <motorCtrlFlip+0xb4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800484a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800484c:	2200      	movs	r2, #0
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	481b      	ldr	r0, [pc, #108]	; (80048c0 <motorCtrlFlip+0xb8>)
 8004852:	f003 fbbf 	bl	8007fd4 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8004856:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <motorCtrlFlip+0xbc>)
 8004858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db0e      	blt.n	800487e <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <motorCtrlFlip+0xbc>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004866:	4b15      	ldr	r3, [pc, #84]	; (80048bc <motorCtrlFlip+0xb4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004870:	2201      	movs	r2, #1
 8004872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004876:	4812      	ldr	r0, [pc, #72]	; (80048c0 <motorCtrlFlip+0xb8>)
 8004878:	f003 fbac 	bl	8007fd4 <HAL_GPIO_WritePin>
 800487c:	e011      	b.n	80048a2 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <motorCtrlFlip+0xbc>)
 8004880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004884:	b29b      	uxth	r3, r3
 8004886:	425b      	negs	r3, r3
 8004888:	b29b      	uxth	r3, r3
 800488a:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <motorCtrlFlip+0xb4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004894:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004896:	2200      	movs	r2, #0
 8004898:	f44f 7100 	mov.w	r1, #512	; 0x200
 800489c:	4808      	ldr	r0, [pc, #32]	; (80048c0 <motorCtrlFlip+0xb8>)
 800489e:	f003 fb99 	bl	8007fd4 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <motorCtrlFlip+0xc0>)
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80048a8:	4a08      	ldr	r2, [pc, #32]	; (80048cc <motorCtrlFlip+0xc4>)
 80048aa:	88bb      	ldrh	r3, [r7, #4]
 80048ac:	8013      	strh	r3, [r2, #0]
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20016e68 	.word	0x20016e68
 80048bc:	2001f1e8 	.word	0x2001f1e8
 80048c0:	40020800 	.word	0x40020800
 80048c4:	20016e6a 	.word	0x20016e6a
 80048c8:	2001f4ac 	.word	0x2001f4ac
 80048cc:	2001f4aa 	.word	0x2001f4aa

080048d0 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <suctionmotorCtrlFlip+0x1c>)
 80048d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <suctionmotorCtrlFlip+0x20>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20016e6c 	.word	0x20016e6c
 80048f0:	2001f3c0 	.word	0x2001f3c0

080048f4 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	460a      	mov	r2, r1
 80048fe:	80fb      	strh	r3, [r7, #6]
 8004900:	4613      	mov	r3, r2
 8004902:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8004904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004908:	f240 628e 	movw	r2, #1678	; 0x68e
 800490c:	4293      	cmp	r3, r2
 800490e:	dd03      	ble.n	8004918 <setMotor+0x24>
 8004910:	f240 638f 	movw	r3, #1679	; 0x68f
 8004914:	80fb      	strh	r3, [r7, #6]
 8004916:	e007      	b.n	8004928 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8004918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800491c:	4a11      	ldr	r2, [pc, #68]	; (8004964 <setMotor+0x70>)
 800491e:	4293      	cmp	r3, r2
 8004920:	da02      	bge.n	8004928 <setMotor+0x34>
 8004922:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004926:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8004928:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800492c:	f240 628e 	movw	r2, #1678	; 0x68e
 8004930:	4293      	cmp	r3, r2
 8004932:	dd03      	ble.n	800493c <setMotor+0x48>
 8004934:	f240 638f 	movw	r3, #1679	; 0x68f
 8004938:	80bb      	strh	r3, [r7, #4]
 800493a:	e007      	b.n	800494c <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 800493c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004940:	4a08      	ldr	r2, [pc, #32]	; (8004964 <setMotor+0x70>)
 8004942:	4293      	cmp	r3, r2
 8004944:	da02      	bge.n	800494c <setMotor+0x58>
 8004946:	f64f 1371 	movw	r3, #63857	; 0xf971
 800494a:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 800494c:	4a06      	ldr	r2, [pc, #24]	; (8004968 <setMotor+0x74>)
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8004952:	4a06      	ldr	r2, [pc, #24]	; (800496c <setMotor+0x78>)
 8004954:	88bb      	ldrh	r3, [r7, #4]
 8004956:	8013      	strh	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	fffff972 	.word	0xfffff972
 8004968:	20016e68 	.word	0x20016e68
 800496c:	20016e6a 	.word	0x20016e6a

08004970 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 800497a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	425b      	neglt	r3, r3
 8004984:	b21a      	sxth	r2, r3
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <setsuctionMotor+0x38>)
 8004988:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 800498a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800498e:	f240 3246 	movw	r2, #838	; 0x346
 8004992:	4293      	cmp	r3, r2
 8004994:	dd02      	ble.n	800499c <setsuctionMotor+0x2c>
 8004996:	f240 3347 	movw	r3, #839	; 0x347
 800499a:	80fb      	strh	r3, [r7, #6]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	20016e6c 	.word	0x20016e6c

080049ac <updateSideSensorStatus>:
static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;
static int16_t V_motor;

void updateSideSensorStatus(){
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <updateSideSensorStatus+0x44>)
 80049b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049ba:	dc03      	bgt.n	80049c4 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <updateSideSensorStatus+0x48>)
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e002      	b.n	80049ca <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <updateSideSensorStatus+0x48>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <updateSideSensorStatus+0x4c>)
 80049cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049d4:	dc03      	bgt.n	80049de <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <updateSideSensorStatus+0x50>)
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 80049dc:	e002      	b.n	80049e4 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <updateSideSensorStatus+0x50>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	2001f024 	.word	0x2001f024
 80049f4:	2001ef64 	.word	0x2001ef64
 80049f8:	2001efac 	.word	0x2001efac
 80049fc:	2001ef65 	.word	0x2001ef65

08004a00 <setRunMode>:

void setRunMode(uint16_t num){
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
	mode = num;
 8004a0a:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <setRunMode+0x1c>)
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	8013      	strh	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	2001f1d0 	.word	0x2001f1d0

08004a20 <isCrossLine>:

bool isCrossLine()
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8004a26:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <isCrossLine+0x88>)
 8004a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a34:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <isCrossLine+0x88>)
 8004a3a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a46:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8004a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a4e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004aac <isCrossLine+0x8c>
 8004a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5a:	d50f      	bpl.n	8004a7c <isCrossLine+0x5c>
 8004a5c:	edd7 7a00 	vldr	s15, [r7]
 8004a60:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004aac <isCrossLine+0x8c>
 8004a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	d506      	bpl.n	8004a7c <isCrossLine+0x5c>
		cnt++;
 8004a6e:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <isCrossLine+0x90>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <isCrossLine+0x90>)
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	e002      	b.n	8004a82 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <isCrossLine+0x90>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <isCrossLine+0x90>)
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d903      	bls.n	8004a92 <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <isCrossLine+0x94>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e002      	b.n	8004a98 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <isCrossLine+0x94>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <isCrossLine+0x94>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	2001f008 	.word	0x2001f008
 8004aac:	442f0000 	.word	0x442f0000
 8004ab0:	2001ef86 	.word	0x2001ef86
 8004ab4:	2001ef88 	.word	0x2001ef88

08004ab8 <isContinuousCurvature>:

bool isContinuousCurvature()
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	ed2d 8b02 	vpush	{d8}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	; (8004b80 <isContinuousCurvature+0xc8>)
 8004ac8:	ed93 8a00 	vldr	s16, [r3]
 8004acc:	f7fc fe70 	bl	80017b0 <getTheta10mm>
 8004ad0:	eef0 7a40 	vmov.f32	s15, s0
 8004ad4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004ad8:	eef0 7ae7 	vabs.f32	s15, s15
 8004adc:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8004ae0:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <isContinuousCurvature+0xcc>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <isContinuousCurvature+0xcc>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f7fb fd26 	bl	8000548 <__aeabi_f2d>
 8004afc:	a31e      	add	r3, pc, #120	; (adr r3, 8004b78 <isContinuousCurvature+0xc0>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb fff5 	bl	8000af0 <__aeabi_dcmple>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <isContinuousCurvature+0x6a>
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004b0e:	edd3 7a00 	vldr	s15, [r3]
 8004b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004b1c:	edc3 7a00 	vstr	s15, [r3]
 8004b20:	e003      	b.n	8004b2a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8004b22:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004b2c:	edd3 7a00 	vldr	s15, [r3]
 8004b30:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004b8c <isContinuousCurvature+0xd4>
 8004b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	db01      	blt.n	8004b42 <isContinuousCurvature+0x8a>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004b44:	edd3 7a00 	vldr	s15, [r3]
 8004b48:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004b90 <isContinuousCurvature+0xd8>
 8004b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	db02      	blt.n	8004b5c <isContinuousCurvature+0xa4>
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <isContinuousCurvature+0xd0>)
 8004b58:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <isContinuousCurvature+0xdc>)
 8004b5a:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8004b5c:	f7fc fe28 	bl	80017b0 <getTheta10mm>
 8004b60:	eef0 7a40 	vmov.f32	s15, s0
 8004b64:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <isContinuousCurvature+0xc8>)
 8004b66:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	ecbd 8b02 	vpop	{d8}
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	47ae147b 	.word	0x47ae147b
 8004b7c:	3f947ae1 	.word	0x3f947ae1
 8004b80:	2001ef8c 	.word	0x2001ef8c
 8004b84:	2001ef68 	.word	0x2001ef68
 8004b88:	2001ef90 	.word	0x2001ef90
 8004b8c:	42200000 	.word	0x42200000
 8004b90:	447a0000 	.word	0x447a0000
 8004b94:	447a0000 	.word	0x447a0000

08004b98 <isTargetDistance>:

bool isTargetDistance(float target){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8004ba6:	f7fc fc2f 	bl	8001408 <getDistance10mm>
 8004baa:	eeb0 7a40 	vmov.f32	s14, s0
 8004bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	d801      	bhi.n	8004bc0 <isTargetDistance+0x28>
		ret = true;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <running>:

void running(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8004bd6:	f000 f9eb 	bl	8004fb0 <runningInit>
	startLineTrace();
 8004bda:	f7fd f97f 	bl	8001edc <startLineTrace>
	startVelocityControl();
 8004bde:	f7fe fcdf 	bl	80035a0 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8004be2:	4b6b      	ldr	r3, [pc, #428]	; (8004d90 <running+0x1c4>)
 8004be4:	edd3 7a00 	vldr	s15, [r3]
 8004be8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bec:	f7fe fc30 	bl	8003450 <setTargetVelocity>

	while(goal_flag == false){
 8004bf0:	e0c2      	b.n	8004d78 <running+0x1ac>
		switch(pattern){
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b14      	cmp	r3, #20
 8004bf6:	f200 80b4 	bhi.w	8004d62 <running+0x196>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <running+0x34>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004d63 	.word	0x08004d63
 8004c08:	08004d63 	.word	0x08004d63
 8004c0c:	08004d63 	.word	0x08004d63
 8004c10:	08004d63 	.word	0x08004d63
 8004c14:	08004c8b 	.word	0x08004c8b
 8004c18:	08004d63 	.word	0x08004d63
 8004c1c:	08004d63 	.word	0x08004d63
 8004c20:	08004d63 	.word	0x08004d63
 8004c24:	08004d63 	.word	0x08004d63
 8004c28:	08004c9f 	.word	0x08004c9f
 8004c2c:	08004d63 	.word	0x08004d63
 8004c30:	08004d63 	.word	0x08004d63
 8004c34:	08004d63 	.word	0x08004d63
 8004c38:	08004d63 	.word	0x08004d63
 8004c3c:	08004d63 	.word	0x08004d63
 8004c40:	08004d63 	.word	0x08004d63
 8004c44:	08004d63 	.word	0x08004d63
 8004c48:	08004d63 	.word	0x08004d63
 8004c4c:	08004d63 	.word	0x08004d63
 8004c50:	08004d37 	.word	0x08004d37

				  case 0:
					  if(getSideSensorStatusR() == true){
 8004c54:	f001 f83a 	bl	8005ccc <getSideSensorStatusR>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d07e      	beq.n	8004d5c <running+0x190>
						  start_goal_line_cnt++;
 8004c5e:	4b4d      	ldr	r3, [pc, #308]	; (8004d94 <running+0x1c8>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <running+0x1c8>)
 8004c68:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 8004c6a:	4b4b      	ldr	r3, [pc, #300]	; (8004d98 <running+0x1cc>)
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <running+0xac>
 8004c72:	f000 fa13 	bl	800509c <startLogging>
 8004c76:	e001      	b.n	8004c7c <running+0xb0>
						  else startVelocityUpdate();
 8004c78:	f000 fa2c 	bl	80050d4 <startVelocityUpdate>

						  clearGoalJudgeDistance();
 8004c7c:	f7fc fb8c 	bl	8001398 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8004c80:	f7fc fb98 	bl	80013b4 <clearSideLineJudgeDistance>
						  pattern = 5;
 8004c84:	2305      	movs	r3, #5
 8004c86:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8004c88:	e068      	b.n	8004d5c <running+0x190>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8004c8a:	f001 f81f 	bl	8005ccc <getSideSensorStatusR>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f083 0301 	eor.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <running+0xd2>
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8004c9e:	f001 f809 	bl	8005cb4 <getSideSensorStatusL>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <running+0xe6>
						  goal_judge_flag = false;
 8004ca8:	4b3c      	ldr	r3, [pc, #240]	; (8004d9c <running+0x1d0>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004cae:	f7fc fb73 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <running+0x1d0>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f083 0301 	eor.w	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <running+0x120>
 8004cc0:	f001 f804 	bl	8005ccc <getSideSensorStatusR>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <running+0x120>
 8004cca:	f7fc fb1d 	bl	8001308 <getGoalJudgeDistance>
 8004cce:	eeb0 7a40 	vmov.f32	s14, s0
 8004cd2:	eddf 7a33 	vldr	s15, [pc, #204]	; 8004da0 <running+0x1d4>
 8004cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cde:	db05      	blt.n	8004cec <running+0x120>
						  goal_judge_flag = true;
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <running+0x1d0>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004ce6:	f7fc fb57 	bl	8001398 <clearGoalJudgeDistance>
 8004cea:	e019      	b.n	8004d20 <running+0x154>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <running+0x1d0>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <running+0x154>
 8004cf4:	f7fc fb08 	bl	8001308 <getGoalJudgeDistance>
 8004cf8:	eeb0 7a40 	vmov.f32	s14, s0
 8004cfc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8004da0 <running+0x1d4>
 8004d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d08:	db0a      	blt.n	8004d20 <running+0x154>
						  start_goal_line_cnt++;
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <running+0x1c8>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <running+0x1c8>)
 8004d14:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8004d16:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <running+0x1d0>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004d1c:	f7fc fb3c 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8004d20:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <running+0x1c8>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d91b      	bls.n	8004d60 <running+0x194>
						  stopLogging();
 8004d28:	f000 f9c8 	bl	80050bc <stopLogging>
						  stopVelocityUpdate();
 8004d2c:	f000 f9f4 	bl	8005118 <stopVelocityUpdate>
						  pattern = 20;
 8004d30:	2314      	movs	r3, #20
 8004d32:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8004d34:	e014      	b.n	8004d60 <running+0x194>

				  case 20:

					  setTargetVelocity(1.0);
 8004d36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004d3a:	f7fe fb89 	bl	8003450 <setTargetVelocity>
					  HAL_Delay(100);
 8004d3e:	2064      	movs	r0, #100	; 0x64
 8004d40:	f001 fd16 	bl	8006770 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 8004d44:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004da4 <running+0x1d8>
 8004d48:	f7fe fb82 	bl	8003450 <setTargetVelocity>
					  HAL_Delay(500);
 8004d4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d50:	f001 fd0e 	bl	8006770 <HAL_Delay>

					  goal_flag = true;
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <running+0x1dc>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]

					  break;
 8004d5a:	e002      	b.n	8004d62 <running+0x196>
					  break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <running+0x196>
					  break;
 8004d60:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8004d62:	f7fd f941 	bl	8001fe8 <getCouseOutFlag>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <running+0x1ac>
		{
			stopLogging();
 8004d6c:	f000 f9a6 	bl	80050bc <stopLogging>
			stopVelocityUpdate();
 8004d70:	f000 f9d2 	bl	8005118 <stopVelocityUpdate>
		    pattern = 20;
 8004d74:	2314      	movs	r3, #20
 8004d76:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <running+0x1dc>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f083 0301 	eor.w	r3, r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f47f af35 	bne.w	8004bf2 <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	2001ef70 	.word	0x2001ef70
 8004d94:	2001ef58 	.word	0x2001ef58
 8004d98:	2001f1d0 	.word	0x2001f1d0
 8004d9c:	2001ef67 	.word	0x2001ef67
 8004da0:	428c0000 	.word	0x428c0000
 8004da4:	00000000 	.word	0x00000000
 8004da8:	2001ef66 	.word	0x2001ef66

08004dac <runningFlip>:

void runningFlip()
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8004db0:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <runningFlip+0x1dc>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80e5 	beq.w	8004f84 <runningFlip+0x1d8>
		setLED('G');
 8004dba:	2047      	movs	r0, #71	; 0x47
 8004dbc:	f7fc fd14 	bl	80017e8 <setLED>
		updateTargetVelocity();
 8004dc0:	f000 fcf4 	bl	80057ac <updateTargetVelocity>

		if(isTargetDistance(10) == true){
 8004dc4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004dc8:	f7ff fee6 	bl	8004b98 <isTargetDistance>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <runningFlip+0x42>
			saveLog();
 8004dd2:	f000 f931 	bl	8005038 <saveLog>

			if(isContinuousCurvature() == true){
 8004dd6:	f7ff fe6f 	bl	8004ab8 <isContinuousCurvature>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <runningFlip+0x3a>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8004de0:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <runningFlip+0x1e0>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8004de6:	f7fc fb1d 	bl	8001424 <clearDistance10mm>
			clearTheta10mm();
 8004dea:	f7fc fcef 	bl	80017cc <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8004dee:	f7ff fe17 	bl	8004a20 <isCrossLine>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d026      	beq.n	8004e46 <runningFlip+0x9a>
 8004df8:	4b65      	ldr	r3, [pc, #404]	; (8004f90 <runningFlip+0x1e4>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01f      	beq.n	8004e46 <runningFlip+0x9a>
			cross_line_ignore_flag = true;
 8004e06:	4b62      	ldr	r3, [pc, #392]	; (8004f90 <runningFlip+0x1e4>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8004e0c:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <runningFlip+0x1e0>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8004e12:	f7fc fadd 	bl	80013d0 <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8004e16:	f7fc fae9 	bl	80013ec <clearSideLineIgnoreDistance>

			if(mode == 1){
 8004e1a:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <runningFlip+0x1e8>)
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10b      	bne.n	8004e3a <runningFlip+0x8e>
				correction_check_cnt_cross = 0;
 8004e22:	4b5d      	ldr	r3, [pc, #372]	; (8004f98 <runningFlip+0x1ec>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8004e28:	f7fc fa60 	bl	80012ec <getTotalDistance>
 8004e2c:	eef0 7a40 	vmov.f32	s15, s0
 8004e30:	eeb0 0a67 	vmov.f32	s0, s15
 8004e34:	f7fd ff56 	bl	8002ce4 <saveCross>
			if(mode == 1){
 8004e38:	e017      	b.n	8004e6a <runningFlip+0xbe>
			}
			else{
				correction_check_cnt_cross = 0;
 8004e3a:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <runningFlip+0x1ec>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8004e40:	f000 fd2a 	bl	8005898 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 8004e44:	e011      	b.n	8004e6a <runningFlip+0xbe>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 8004e46:	4b52      	ldr	r3, [pc, #328]	; (8004f90 <runningFlip+0x1e4>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <runningFlip+0xbe>
 8004e4e:	f7fc fa87 	bl	8001360 <getCrossLineIgnoreDistance>
 8004e52:	eeb0 7a40 	vmov.f32	s14, s0
 8004e56:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004f9c <runningFlip+0x1f0>
 8004e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	db02      	blt.n	8004e6a <runningFlip+0xbe>
			cross_line_ignore_flag = false;
 8004e64:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <runningFlip+0x1e4>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 8004e6a:	f000 ff2f 	bl	8005ccc <getSideSensorStatusR>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <runningFlip+0xd2>
			side_line_judge_flag = false;
 8004e74:	4b4a      	ldr	r3, [pc, #296]	; (8004fa0 <runningFlip+0x1f4>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8004e7a:	f7fc fa9b 	bl	80013b4 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag== false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8004e7e:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <runningFlip+0x1f4>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	f083 0301 	eor.w	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <runningFlip+0x10c>
 8004e8c:	f000 ff12 	bl	8005cb4 <getSideSensorStatusL>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d010      	beq.n	8004eb8 <runningFlip+0x10c>
 8004e96:	f7fc fa45 	bl	8001324 <getSideLineJudgeDistance>
 8004e9a:	eeb0 7a40 	vmov.f32	s14, s0
 8004e9e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004fa4 <runningFlip+0x1f8>
 8004ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eaa:	db05      	blt.n	8004eb8 <runningFlip+0x10c>
			side_line_judge_flag= true;
 8004eac:	4b3c      	ldr	r3, [pc, #240]	; (8004fa0 <runningFlip+0x1f4>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8004eb2:	f7fc fa7f 	bl	80013b4 <clearSideLineJudgeDistance>
 8004eb6:	e02f      	b.n	8004f18 <runningFlip+0x16c>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <runningFlip+0x1f4>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02b      	beq.n	8004f18 <runningFlip+0x16c>
 8004ec0:	f7fc fa30 	bl	8001324 <getSideLineJudgeDistance>
 8004ec4:	eeb0 7a40 	vmov.f32	s14, s0
 8004ec8:	eddf 7a36 	vldr	s15, [pc, #216]	; 8004fa4 <runningFlip+0x1f8>
 8004ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed4:	db20      	blt.n	8004f18 <runningFlip+0x16c>
			clearSideLineJudgeDistance();
 8004ed6:	f7fc fa6d 	bl	80013b4 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 8004eda:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <runningFlip+0x1f4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <runningFlip+0x1e0>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <runningFlip+0x16c>
				continuous_curve_flag = false;
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <runningFlip+0x1e0>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8004eee:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <runningFlip+0x1fc>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <runningFlip+0x1e8>)
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d10b      	bne.n	8004f14 <runningFlip+0x168>
					correction_check_cnt_side = 0;
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <runningFlip+0x200>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8004f02:	f7fc f9f3 	bl	80012ec <getTotalDistance>
 8004f06:	eef0 7a40 	vmov.f32	s15, s0
 8004f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0e:	f7fd ff01 	bl	8002d14 <saveSide>
 8004f12:	e001      	b.n	8004f18 <runningFlip+0x16c>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8004f14:	f000 fd16 	bl	8005944 <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 8004f18:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <runningFlip+0x1ec>)
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <runningFlip+0x1ec>)
 8004f22:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <runningFlip+0x200>)
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <runningFlip+0x200>)
 8004f2e:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <runningFlip+0x1ec>)
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d903      	bls.n	8004f44 <runningFlip+0x198>
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <runningFlip+0x1ec>)
 8004f3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f42:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <runningFlip+0x200>)
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d903      	bls.n	8004f58 <runningFlip+0x1ac>
 8004f50:	4b16      	ldr	r3, [pc, #88]	; (8004fac <runningFlip+0x200>)
 8004f52:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f56:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 8004f58:	4b14      	ldr	r3, [pc, #80]	; (8004fac <runningFlip+0x200>)
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	2b96      	cmp	r3, #150	; 0x96
 8004f5e:	d803      	bhi.n	8004f68 <runningFlip+0x1bc>
 8004f60:	2047      	movs	r0, #71	; 0x47
 8004f62:	f7fc fd0f 	bl	8001984 <setLED2>
 8004f66:	e002      	b.n	8004f6e <runningFlip+0x1c2>
	    else setLED2('N');
 8004f68:	204e      	movs	r0, #78	; 0x4e
 8004f6a:	f7fc fd0b 	bl	8001984 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <runningFlip+0x200>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	2b96      	cmp	r3, #150	; 0x96
 8004f74:	d803      	bhi.n	8004f7e <runningFlip+0x1d2>
 8004f76:	2042      	movs	r0, #66	; 0x42
 8004f78:	f7fc fc36 	bl	80017e8 <setLED>
	    else setLED('G');
	}
}
 8004f7c:	e002      	b.n	8004f84 <runningFlip+0x1d8>
	    else setLED('G');
 8004f7e:	2047      	movs	r0, #71	; 0x47
 8004f80:	f7fc fc32 	bl	80017e8 <setLED>
}
 8004f84:	bf00      	nop
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	2001ef6a 	.word	0x2001ef6a
 8004f8c:	2001ef69 	.word	0x2001ef69
 8004f90:	2001ef62 	.word	0x2001ef62
 8004f94:	2001f1d0 	.word	0x2001f1d0
 8004f98:	2001ef5e 	.word	0x2001ef5e
 8004f9c:	42480000 	.word	0x42480000
 8004fa0:	2001ef63 	.word	0x2001ef63
 8004fa4:	42700000 	.word	0x42700000
 8004fa8:	2001ef68 	.word	0x2001ef68
 8004fac:	2001ef60 	.word	0x2001ef60

08004fb0 <runningInit>:

void runningInit()
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
	if(mode == 1){
 8004fb4:	4b18      	ldr	r3, [pc, #96]	; (8005018 <runningInit+0x68>)
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d105      	bne.n	8004fc8 <runningInit+0x18>
		setLED('W');
 8004fbc:	2057      	movs	r0, #87	; 0x57
 8004fbe:	f7fc fc13 	bl	80017e8 <setLED>
		ereaseLog();
 8004fc2:	f7fd fed7 	bl	8002d74 <ereaseLog>
 8004fc6:	e00b      	b.n	8004fe0 <runningInit+0x30>
	}
	else
	{
		loadDistance();
 8004fc8:	f7fd ff50 	bl	8002e6c <loadDistance>
		loadTheta();
 8004fcc:	f7fd ff8c 	bl	8002ee8 <loadTheta>
		loadCross();
 8004fd0:	f7fd ffc8 	bl	8002f64 <loadCross>
		loadSide();
 8004fd4:	f7fe f804 	bl	8002fe0 <loadSide>
		createVelocityTable();
 8004fd8:	f000 f8aa 	bl	8005130 <createVelocityTable>

		ereaseDebugLog();
 8004fdc:	f7fd ff06 	bl	8002dec <ereaseDebugLog>
	}

	clearCrossLineIgnoreDistance();
 8004fe0:	f7fc f9f6 	bl	80013d0 <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8004fe4:	f7fc fa02 	bl	80013ec <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <runningInit+0x6c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <runningInit+0x70>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <runningInit+0x74>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <runningInit+0x78>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <runningInit+0x7c>)
 8005002:	2201      	movs	r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <runningInit+0x80>)
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <runningInit+0x84>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	2001f1d0 	.word	0x2001f1d0
 800501c:	2001ef58 	.word	0x2001ef58
 8005020:	2001ef62 	.word	0x2001ef62
 8005024:	2001ef63 	.word	0x2001ef63
 8005028:	2001ef67 	.word	0x2001ef67
 800502c:	2001ef68 	.word	0x2001ef68
 8005030:	2001ef69 	.word	0x2001ef69
 8005034:	2001ef6a 	.word	0x2001ef6a

08005038 <saveLog>:

void saveLog(){
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 800503c:	4b15      	ldr	r3, [pc, #84]	; (8005094 <saveLog+0x5c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d010      	beq.n	8005066 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8005044:	f7fc f9e0 	bl	8001408 <getDistance10mm>
 8005048:	eef0 7a40 	vmov.f32	s15, s0
 800504c:	eeb0 0a67 	vmov.f32	s0, s15
 8005050:	f7fd fe18 	bl	8002c84 <saveDistance>
		saveTheta(getTheta10mm());
 8005054:	f7fc fbac 	bl	80017b0 <getTheta10mm>
 8005058:	eef0 7a40 	vmov.f32	s15, s0
 800505c:	eeb0 0a67 	vmov.f32	s0, s15
 8005060:	f7fd fe28 	bl	8002cb4 <saveTheta>
		//saveDebug(getTargetVelocity());
		//saveDebug(getCurrentVelocity());
		saveDebug(getPID());
		saveDebug(getCurrentVelocity());
	}
}
 8005064:	e013      	b.n	800508e <saveLog+0x56>
	else if(velocity_update_flag == true){
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <saveLog+0x60>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00f      	beq.n	800508e <saveLog+0x56>
		saveDebug(getPID());
 800506e:	f7fe fa89 	bl	8003584 <getPID>
 8005072:	eef0 7a40 	vmov.f32	s15, s0
 8005076:	eeb0 0a67 	vmov.f32	s0, s15
 800507a:	f7fd fe63 	bl	8002d44 <saveDebug>
		saveDebug(getCurrentVelocity());
 800507e:	f7fe fa43 	bl	8003508 <getCurrentVelocity>
 8005082:	eef0 7a40 	vmov.f32	s15, s0
 8005086:	eeb0 0a67 	vmov.f32	s0, s15
 800508a:	f7fd fe5b 	bl	8002d44 <saveDebug>
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2001ef6b 	.word	0x2001ef6b
 8005098:	2001ef6c 	.word	0x2001ef6c

0800509c <startLogging>:

void startLogging(){
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80050a0:	f7fc f9c0 	bl	8001424 <clearDistance10mm>
	clearTheta10mm();
 80050a4:	f7fc fb92 	bl	80017cc <clearTheta10mm>
	clearTotalDistance();
 80050a8:	f7fc f968 	bl	800137c <clearTotalDistance>
	logging_flag = true;
 80050ac:	4b02      	ldr	r3, [pc, #8]	; (80050b8 <startLogging+0x1c>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	2001ef6b 	.word	0x2001ef6b

080050bc <stopLogging>:

void stopLogging()
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
	logging_flag = false;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <stopLogging+0x14>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	2001ef6b 	.word	0x2001ef6b

080050d4 <startVelocityUpdate>:

void startVelocityUpdate(){
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80050d8:	f7fc f9a4 	bl	8001424 <clearDistance10mm>
	clearTotalDistance();
 80050dc:	f7fc f94e 	bl	800137c <clearTotalDistance>
	velocity_table_idx = 0;
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <startVelocityUpdate+0x30>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <startVelocityUpdate+0x34>)
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <startVelocityUpdate+0x38>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <startVelocityUpdate+0x3c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <startVelocityUpdate+0x40>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	801a      	strh	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	2001f4b4 	.word	0x2001f4b4
 8005108:	2001f4b0 	.word	0x2001f4b0
 800510c:	2001ef6c 	.word	0x2001ef6c
 8005110:	2001ef5a 	.word	0x2001ef5a
 8005114:	2001ef5c 	.word	0x2001ef5c

08005118 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <stopVelocityUpdate+0x14>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2001ef6c 	.word	0x2001ef6c

08005130 <createVelocityTable>:

void createVelocityTable(){
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b08d      	sub	sp, #52	; 0x34
 8005134:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 8005136:	f7fd ffcf 	bl	80030d8 <getDistanceArrayPointer>
 800513a:	6178      	str	r0, [r7, #20]
	p_theta = getThetaArrayPointer();
 800513c:	f7fd ffd6 	bl	80030ec <getThetaArrayPointer>
 8005140:	6138      	str	r0, [r7, #16]
	float temp_distance, temp_theta;

	uint16_t log_size = getDistanceLogSize();
 8005142:	f7fd fe63 	bl	8002e0c <getDistanceLogSize>
 8005146:	4603      	mov	r3, r0
 8005148:	81fb      	strh	r3, [r7, #14]

	uint16_t crossline_idx = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	857b      	strh	r3, [r7, #42]	; 0x2a
	float total_distance = 0;
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i = 0; i < log_size; i++){
 8005154:	2300      	movs	r3, #0
 8005156:	847b      	strh	r3, [r7, #34]	; 0x22
 8005158:	e079      	b.n	800524e <createVelocityTable+0x11e>
		temp_distance = p_distance[i];
 800515a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8005166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_theta == 0) temp_theta = 0.00001;
 8005172:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005176:	eef5 7a40 	vcmp.f32	s15, #0.0
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	d101      	bne.n	8005184 <createVelocityTable+0x54>
 8005180:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <createVelocityTable+0x190>)
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
		float radius = fabs(temp_distance / temp_theta);
 8005184:	edd7 6a02 	vldr	s13, [r7, #8]
 8005188:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800518c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005190:	eef0 7ae7 	vabs.f32	s15, s15
 8005194:	edc7 7a07 	vstr	s15, [r7, #28]
		if(radius >= straight_radius) radius = straight_radius;
 8005198:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <createVelocityTable+0x194>)
 800519a:	edd3 7a00 	vldr	s15, [r3]
 800519e:	ed97 7a07 	vldr	s14, [r7, #28]
 80051a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	db02      	blt.n	80051b2 <createVelocityTable+0x82>
 80051ac:	4b45      	ldr	r3, [pc, #276]	; (80052c4 <createVelocityTable+0x194>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61fb      	str	r3, [r7, #28]
		velocity_table[i] = radius2Velocity(radius);
 80051b2:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80051b4:	ed97 0a07 	vldr	s0, [r7, #28]
 80051b8:	f000 f896 	bl	80052e8 <radius2Velocity>
 80051bc:	eef0 7a40 	vmov.f32	s15, s0
 80051c0:	4a41      	ldr	r2, [pc, #260]	; (80052c8 <createVelocityTable+0x198>)
 80051c2:	00a3      	lsls	r3, r4, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	edc3 7a00 	vstr	s15, [r3]

		//Forced maximum speed on the crossline
		total_distance += temp_distance;
 80051ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80051d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float crossline_distance = getCrossLog(crossline_idx);
 80051da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fd ffa5 	bl	800312c <getCrossLog>
 80051e2:	ed87 0a01 	vstr	s0, [r7, #4]
		if(crossline_distance + 60 >= total_distance && total_distance >= crossline_distance - 60){
 80051e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80051ea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80052cc <createVelocityTable+0x19c>
 80051ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	d813      	bhi.n	8005228 <createVelocityTable+0xf8>
 8005200:	edd7 7a01 	vldr	s15, [r7, #4]
 8005204:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80052cc <createVelocityTable+0x19c>
 8005208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800520c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	db06      	blt.n	8005228 <createVelocityTable+0xf8>
			 velocity_table[i] = max_velocity;
 800521a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800521c:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <createVelocityTable+0x1a0>)
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	4929      	ldr	r1, [pc, #164]	; (80052c8 <createVelocityTable+0x198>)
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	601a      	str	r2, [r3, #0]
		}

		if(total_distance >= crossline_distance + 60){
 8005228:	edd7 7a01 	vldr	s15, [r7, #4]
 800522c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80052cc <createVelocityTable+0x19c>
 8005230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005234:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005240:	db02      	blt.n	8005248 <createVelocityTable+0x118>
			crossline_idx++;
 8005242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005244:	3301      	adds	r3, #1
 8005246:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t i = 0; i < log_size; i++){
 8005248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800524a:	3301      	adds	r3, #1
 800524c:	847b      	strh	r3, [r7, #34]	; 0x22
 800524e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	429a      	cmp	r2, r3
 8005254:	d381      	bcc.n	800515a <createVelocityTable+0x2a>
		}

	}
	for(uint16_t i = log_size; i < 6000; i++){
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	837b      	strh	r3, [r7, #26]
 800525a:	e008      	b.n	800526e <createVelocityTable+0x13e>
		velocity_table[i] = 1.8;
 800525c:	8b7b      	ldrh	r3, [r7, #26]
 800525e:	4a1a      	ldr	r2, [pc, #104]	; (80052c8 <createVelocityTable+0x198>)
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <createVelocityTable+0x1a4>)
 8005266:	601a      	str	r2, [r3, #0]
	for(uint16_t i = log_size; i < 6000; i++){
 8005268:	8b7b      	ldrh	r3, [r7, #26]
 800526a:	3301      	adds	r3, #1
 800526c:	837b      	strh	r3, [r7, #26]
 800526e:	8b7b      	ldrh	r3, [r7, #26]
 8005270:	f241 726f 	movw	r2, #5999	; 0x176f
 8005274:	4293      	cmp	r3, r2
 8005276:	d9f1      	bls.n	800525c <createVelocityTable+0x12c>
	}


	addDecelerationDistanceMergin(velocity_table, 15); //8
 8005278:	210f      	movs	r1, #15
 800527a:	4813      	ldr	r0, [pc, #76]	; (80052c8 <createVelocityTable+0x198>)
 800527c:	f000 f8b8 	bl	80053f0 <addDecelerationDistanceMergin>
	addAccelerationDistanceMergin(velocity_table, 5); //15
 8005280:	2105      	movs	r1, #5
 8005282:	4811      	ldr	r0, [pc, #68]	; (80052c8 <createVelocityTable+0x198>)
 8005284:	f000 f902 	bl	800548c <addAccelerationDistanceMergin>
	//shiftVelocityTable(velocity_table, 1);

	velocity_table[0] = min_velocity;
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <createVelocityTable+0x1a8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0e      	ldr	r2, [pc, #56]	; (80052c8 <createVelocityTable+0x198>)
 800528e:	6013      	str	r3, [r2, #0]

	decelerateProcessing(deceleration, p_distance);
 8005290:	4b12      	ldr	r3, [pc, #72]	; (80052dc <createVelocityTable+0x1ac>)
 8005292:	edd3 7a00 	vldr	s15, [r3]
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	eeb0 0a67 	vmov.f32	s0, s15
 800529c:	f000 f948 	bl	8005530 <decelerateProcessing>
	accelerateProcessing(acceleration, p_distance);
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <createVelocityTable+0x1b0>)
 80052a2:	edd3 7a00 	vldr	s15, [r3]
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	eeb0 0a67 	vmov.f32	s0, s15
 80052ac:	f000 f9e0 	bl	8005670 <accelerateProcessing>

	CreateAcceleration(p_distance);
 80052b0:	6978      	ldr	r0, [r7, #20]
 80052b2:	f000 fb9d 	bl	80059f0 <CreateAcceleration>

}
 80052b6:	bf00      	nop
 80052b8:	3734      	adds	r7, #52	; 0x34
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	bf00      	nop
 80052c0:	3727c5ac 	.word	0x3727c5ac
 80052c4:	2001ef80 	.word	0x2001ef80
 80052c8:	20016e70 	.word	0x20016e70
 80052cc:	42700000 	.word	0x42700000
 80052d0:	2001ef74 	.word	0x2001ef74
 80052d4:	3fe66666 	.word	0x3fe66666
 80052d8:	2001ef70 	.word	0x2001ef70
 80052dc:	2001ef7c 	.word	0x2001ef7c
 80052e0:	2001ef78 	.word	0x2001ef78
 80052e4:	00000000 	.word	0x00000000

080052e8 <radius2Velocity>:

float radius2Velocity(float radius){
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	ed87 0a01 	vstr	s0, [r7, #4]
	float velocity;

	if(mode == 2){
 80052f2:	4b3b      	ldr	r3, [pc, #236]	; (80053e0 <radius2Velocity+0xf8>)
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d118      	bne.n	800532c <radius2Velocity+0x44>
		velocity = radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 80052fa:	4b3a      	ldr	r3, [pc, #232]	; (80053e4 <radius2Velocity+0xfc>)
 80052fc:	ed93 7a00 	vldr	s14, [r3]
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <radius2Velocity+0x100>)
 8005302:	edd3 7a00 	vldr	s15, [r3]
 8005306:	ee77 6a67 	vsub.f32	s13, s14, s15
 800530a:	4b38      	ldr	r3, [pc, #224]	; (80053ec <radius2Velocity+0x104>)
 800530c:	edd3 7a00 	vldr	s15, [r3]
 8005310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005314:	edd7 7a01 	vldr	s15, [r7, #4]
 8005318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800531c:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <radius2Velocity+0x100>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005326:	edc7 7a03 	vstr	s15, [r7, #12]
 800532a:	e04a      	b.n	80053c2 <radius2Velocity+0xda>
	}
	else if(mode == 3){
 800532c:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <radius2Velocity+0xf8>)
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d146      	bne.n	80053c2 <radius2Velocity+0xda>
		velocity = 1e-3 * radius * radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fb f907 	bl	8000548 <__aeabi_f2d>
 800533a:	a327      	add	r3, pc, #156	; (adr r3, 80053d8 <radius2Velocity+0xf0>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f95a 	bl	80005f8 <__aeabi_dmul>
 8005344:	4603      	mov	r3, r0
 8005346:	460c      	mov	r4, r1
 8005348:	4625      	mov	r5, r4
 800534a:	461c      	mov	r4, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fb f8fb 	bl	8000548 <__aeabi_f2d>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb f94d 	bl	80005f8 <__aeabi_dmul>
 800535e:	4603      	mov	r3, r0
 8005360:	460c      	mov	r4, r1
 8005362:	4625      	mov	r5, r4
 8005364:	461c      	mov	r4, r3
 8005366:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <radius2Velocity+0xfc>)
 8005368:	ed93 7a00 	vldr	s14, [r3]
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <radius2Velocity+0x100>)
 800536e:	edd3 7a00 	vldr	s15, [r3]
 8005372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <radius2Velocity+0x104>)
 8005378:	edd3 7a00 	vldr	s15, [r3]
 800537c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005380:	ee16 0a90 	vmov	r0, s13
 8005384:	f7fb f8e0 	bl	8000548 <__aeabi_f2d>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4620      	mov	r0, r4
 800538e:	4629      	mov	r1, r5
 8005390:	f7fb f932 	bl	80005f8 <__aeabi_dmul>
 8005394:	4603      	mov	r3, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4625      	mov	r5, r4
 800539a:	461c      	mov	r4, r3
 800539c:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <radius2Velocity+0x100>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fb f8d1 	bl	8000548 <__aeabi_f2d>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa ff6d 	bl	800028c <__adddf3>
 80053b2:	4603      	mov	r3, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	4618      	mov	r0, r3
 80053b8:	4621      	mov	r1, r4
 80053ba:	f7fb fc15 	bl	8000be8 <__aeabi_d2f>
 80053be:	4603      	mov	r3, r0
 80053c0:	60fb      	str	r3, [r7, #12]
	}

	return velocity;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	ee07 3a90 	vmov	s15, r3
}
 80053c8:	eeb0 0a67 	vmov.f32	s0, s15
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bdb0      	pop	{r4, r5, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	f3af 8000 	nop.w
 80053d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80053dc:	3f50624d 	.word	0x3f50624d
 80053e0:	2001f1d0 	.word	0x2001f1d0
 80053e4:	2001ef74 	.word	0x2001ef74
 80053e8:	2001ef70 	.word	0x2001ef70
 80053ec:	2001ef80 	.word	0x2001ef80

080053f0 <addDecelerationDistanceMergin>:

void addDecelerationDistanceMergin(float *table, int16_t mergin_size)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	807b      	strh	r3, [r7, #2]
	uint16_t idx = mergin_size;
 80053fc:	887b      	ldrh	r3, [r7, #2]
 80053fe:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8005400:	8afb      	ldrh	r3, [r7, #22]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1){
 800540c:	e033      	b.n	8005476 <addDecelerationDistanceMergin+0x86>
		if(pre_target_velocity > table[idx]){
 800540e:	8afb      	ldrh	r3, [r7, #22]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	edd3 7a00 	vldr	s15, [r3]
 800541a:	ed97 7a04 	vldr	s14, [r7, #16]
 800541e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005426:	dd1d      	ble.n	8005464 <addDecelerationDistanceMergin+0x74>
			float low_velocity = table[idx];
 8005428:	8afb      	ldrh	r3, [r7, #22]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	8afa      	ldrh	r2, [r7, #22]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	81fb      	strh	r3, [r7, #14]
 800543c:	e008      	b.n	8005450 <addDecelerationDistanceMergin+0x60>
				table[i] = low_velocity;
 800543e:	89fb      	ldrh	r3, [r7, #14]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 800544a:	89fb      	ldrh	r3, [r7, #14]
 800544c:	3301      	adds	r3, #1
 800544e:	81fb      	strh	r3, [r7, #14]
 8005450:	89fa      	ldrh	r2, [r7, #14]
 8005452:	8afb      	ldrh	r3, [r7, #22]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3f2      	bcc.n	800543e <addDecelerationDistanceMergin+0x4e>
			}
			pre_target_velocity = table[idx];
 8005458:	8afb      	ldrh	r3, [r7, #22]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4413      	add	r3, r2
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 8005464:	8afb      	ldrh	r3, [r7, #22]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	613b      	str	r3, [r7, #16]

		idx++;
 8005470:	8afb      	ldrh	r3, [r7, #22]
 8005472:	3301      	adds	r3, #1
 8005474:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1){
 8005476:	8afb      	ldrh	r3, [r7, #22]
 8005478:	f241 726f 	movw	r2, #5999	; 0x176f
 800547c:	4293      	cmp	r3, r2
 800547e:	d9c6      	bls.n	800540e <addDecelerationDistanceMergin+0x1e>
	}
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <addAccelerationDistanceMergin>:

void addAccelerationDistanceMergin(float *table, int16_t mergin_size)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 800549c:	8afb      	ldrh	r3, [r7, #22]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1 - mergin_size){
 80054a8:	e034      	b.n	8005514 <addAccelerationDistanceMergin+0x88>
		if(pre_target_velocity < table[idx]){
 80054aa:	8afb      	ldrh	r3, [r7, #22]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	edd3 7a00 	vldr	s15, [r3]
 80054b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80054ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	d51e      	bpl.n	8005502 <addAccelerationDistanceMergin+0x76>
			float low_velocity = pre_target_velocity;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	81fb      	strh	r3, [r7, #14]
 80054cc:	e008      	b.n	80054e0 <addAccelerationDistanceMergin+0x54>
				table[i] = low_velocity;
 80054ce:	89fb      	ldrh	r3, [r7, #14]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 80054da:	89fb      	ldrh	r3, [r7, #14]
 80054dc:	3301      	adds	r3, #1
 80054de:	81fb      	strh	r3, [r7, #14]
 80054e0:	89fa      	ldrh	r2, [r7, #14]
 80054e2:	8af9      	ldrh	r1, [r7, #22]
 80054e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054e8:	440b      	add	r3, r1
 80054ea:	429a      	cmp	r2, r3
 80054ec:	dbef      	blt.n	80054ce <addAccelerationDistanceMergin+0x42>
			}
			idx += mergin_size;
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	8afb      	ldrh	r3, [r7, #22]
 80054f2:	4413      	add	r3, r2
 80054f4:	82fb      	strh	r3, [r7, #22]
			pre_target_velocity = table[idx];
 80054f6:	8afb      	ldrh	r3, [r7, #22]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	613b      	str	r3, [r7, #16]

		idx++;
 800550e:	8afb      	ldrh	r3, [r7, #22]
 8005510:	3301      	adds	r3, #1
 8005512:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1 - mergin_size){
 8005514:	8afa      	ldrh	r2, [r7, #22]
 8005516:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800551a:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800551e:	330f      	adds	r3, #15
 8005520:	429a      	cmp	r2, r3
 8005522:	ddc2      	ble.n	80054aa <addAccelerationDistanceMergin+0x1e>
	}
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <decelerateProcessing>:

void decelerateProcessing(const float am, const float *p_distance){
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	ed87 0a01 	vstr	s0, [r7, #4]
 800553a:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 800553c:	f7fd fc66 	bl	8002e0c <getDistanceLogSize>
 8005540:	4603      	mov	r3, r0
 8005542:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 8005544:	8abb      	ldrh	r3, [r7, #20]
 8005546:	3b01      	subs	r3, #1
 8005548:	82fb      	strh	r3, [r7, #22]
 800554a:	e07f      	b.n	800564c <decelerateProcessing+0x11c>
		float v_diff = velocity_table[i-1] - velocity_table[i];
 800554c:	8afb      	ldrh	r3, [r7, #22]
 800554e:	3b01      	subs	r3, #1
 8005550:	4a45      	ldr	r2, [pc, #276]	; (8005668 <decelerateProcessing+0x138>)
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	ed93 7a00 	vldr	s14, [r3]
 800555a:	8afb      	ldrh	r3, [r7, #22]
 800555c:	4a42      	ldr	r2, [pc, #264]	; (8005668 <decelerateProcessing+0x138>)
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	edd3 7a00 	vldr	s15, [r3]
 8005566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800556a:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 800556e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	dd64      	ble.n	8005646 <decelerateProcessing+0x116>
			float t = p_distance[i]*1e-3 / v_diff;
 800557c:	8afb      	ldrh	r3, [r7, #22]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4413      	add	r3, r2
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fa ffde 	bl	8000548 <__aeabi_f2d>
 800558c:	a334      	add	r3, pc, #208	; (adr r3, 8005660 <decelerateProcessing+0x130>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fb f831 	bl	80005f8 <__aeabi_dmul>
 8005596:	4603      	mov	r3, r0
 8005598:	460c      	mov	r4, r1
 800559a:	4625      	mov	r5, r4
 800559c:	461c      	mov	r4, r3
 800559e:	6938      	ldr	r0, [r7, #16]
 80055a0:	f7fa ffd2 	bl	8000548 <__aeabi_f2d>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4620      	mov	r0, r4
 80055aa:	4629      	mov	r1, r5
 80055ac:	f7fb f94e 	bl	800084c <__aeabi_ddiv>
 80055b0:	4603      	mov	r3, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	4618      	mov	r0, r3
 80055b6:	4621      	mov	r1, r4
 80055b8:	f7fb fb16 	bl	8000be8 <__aeabi_d2f>
 80055bc:	4603      	mov	r3, r0
 80055be:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 80055c0:	edd7 6a04 	vldr	s13, [r7, #16]
 80055c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80055c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055cc:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 80055d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80055d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80055d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e0:	dd31      	ble.n	8005646 <decelerateProcessing+0x116>
				velocity_table[i-1] = velocity_table[i] + am * p_distance[i]*1e-3;
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	4a20      	ldr	r2, [pc, #128]	; (8005668 <decelerateProcessing+0x138>)
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fa ffab 	bl	8000548 <__aeabi_f2d>
 80055f2:	4604      	mov	r4, r0
 80055f4:	460d      	mov	r5, r1
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	4413      	add	r3, r2
 80055fe:	ed93 7a00 	vldr	s14, [r3]
 8005602:	edd7 7a01 	vldr	s15, [r7, #4]
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	ee17 0a90 	vmov	r0, s15
 800560e:	f7fa ff9b 	bl	8000548 <__aeabi_f2d>
 8005612:	a313      	add	r3, pc, #76	; (adr r3, 8005660 <decelerateProcessing+0x130>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa ffee 	bl	80005f8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fa fe32 	bl	800028c <__adddf3>
 8005628:	4603      	mov	r3, r0
 800562a:	460c      	mov	r4, r1
 800562c:	4619      	mov	r1, r3
 800562e:	4622      	mov	r2, r4
 8005630:	8afb      	ldrh	r3, [r7, #22]
 8005632:	1e5c      	subs	r4, r3, #1
 8005634:	4608      	mov	r0, r1
 8005636:	4611      	mov	r1, r2
 8005638:	f7fb fad6 	bl	8000be8 <__aeabi_d2f>
 800563c:	4601      	mov	r1, r0
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <decelerateProcessing+0x138>)
 8005640:	00a3      	lsls	r3, r4, #2
 8005642:	4413      	add	r3, r2
 8005644:	6019      	str	r1, [r3, #0]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 8005646:	8afb      	ldrh	r3, [r7, #22]
 8005648:	3b01      	subs	r3, #1
 800564a:	82fb      	strh	r3, [r7, #22]
 800564c:	8afb      	ldrh	r3, [r7, #22]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f47f af7c 	bne.w	800554c <decelerateProcessing+0x1c>
			}
		}
	}
}
 8005654:	bf00      	nop
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bdb0      	pop	{r4, r5, r7, pc}
 800565c:	f3af 8000 	nop.w
 8005660:	d2f1a9fc 	.word	0xd2f1a9fc
 8005664:	3f50624d 	.word	0x3f50624d
 8005668:	20016e70 	.word	0x20016e70
 800566c:	00000000 	.word	0x00000000

08005670 <accelerateProcessing>:

void accelerateProcessing(const float am, const float *p_distance){
 8005670:	b5b0      	push	{r4, r5, r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	ed87 0a01 	vstr	s0, [r7, #4]
 800567a:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 800567c:	f7fd fbc6 	bl	8002e0c <getDistanceLogSize>
 8005680:	4603      	mov	r3, r0
 8005682:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8005684:	2300      	movs	r3, #0
 8005686:	82fb      	strh	r3, [r7, #22]
 8005688:	e07f      	b.n	800578a <accelerateProcessing+0x11a>
		float v_diff = velocity_table[i+1] - velocity_table[i];
 800568a:	8afb      	ldrh	r3, [r7, #22]
 800568c:	3301      	adds	r3, #1
 800568e:	4a46      	ldr	r2, [pc, #280]	; (80057a8 <accelerateProcessing+0x138>)
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	ed93 7a00 	vldr	s14, [r3]
 8005698:	8afb      	ldrh	r3, [r7, #22]
 800569a:	4a43      	ldr	r2, [pc, #268]	; (80057a8 <accelerateProcessing+0x138>)
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	edd3 7a00 	vldr	s15, [r3]
 80056a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056a8:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 80056ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80056b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b8:	dd64      	ble.n	8005784 <accelerateProcessing+0x114>
			float t = p_distance[i]*1e-3 / v_diff;
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4413      	add	r3, r2
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fa ff3f 	bl	8000548 <__aeabi_f2d>
 80056ca:	a335      	add	r3, pc, #212	; (adr r3, 80057a0 <accelerateProcessing+0x130>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f7fa ff92 	bl	80005f8 <__aeabi_dmul>
 80056d4:	4603      	mov	r3, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4625      	mov	r5, r4
 80056da:	461c      	mov	r4, r3
 80056dc:	6938      	ldr	r0, [r7, #16]
 80056de:	f7fa ff33 	bl	8000548 <__aeabi_f2d>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fb f8af 	bl	800084c <__aeabi_ddiv>
 80056ee:	4603      	mov	r3, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	4618      	mov	r0, r3
 80056f4:	4621      	mov	r1, r4
 80056f6:	f7fb fa77 	bl	8000be8 <__aeabi_d2f>
 80056fa:	4603      	mov	r3, r0
 80056fc:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 80056fe:	edd7 6a04 	vldr	s13, [r7, #16]
 8005702:	ed97 7a03 	vldr	s14, [r7, #12]
 8005706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800570a:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 800570e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005712:	edd7 7a01 	vldr	s15, [r7, #4]
 8005716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800571a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571e:	dd31      	ble.n	8005784 <accelerateProcessing+0x114>
				velocity_table[i+1] = velocity_table[i] + am * p_distance[i]*1e-3;
 8005720:	8afb      	ldrh	r3, [r7, #22]
 8005722:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <accelerateProcessing+0x138>)
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fa ff0c 	bl	8000548 <__aeabi_f2d>
 8005730:	4604      	mov	r4, r0
 8005732:	460d      	mov	r5, r1
 8005734:	8afb      	ldrh	r3, [r7, #22]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	4413      	add	r3, r2
 800573c:	ed93 7a00 	vldr	s14, [r3]
 8005740:	edd7 7a01 	vldr	s15, [r7, #4]
 8005744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005748:	ee17 0a90 	vmov	r0, s15
 800574c:	f7fa fefc 	bl	8000548 <__aeabi_f2d>
 8005750:	a313      	add	r3, pc, #76	; (adr r3, 80057a0 <accelerateProcessing+0x130>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fa ff4f 	bl	80005f8 <__aeabi_dmul>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4620      	mov	r0, r4
 8005760:	4629      	mov	r1, r5
 8005762:	f7fa fd93 	bl	800028c <__adddf3>
 8005766:	4603      	mov	r3, r0
 8005768:	460c      	mov	r4, r1
 800576a:	4619      	mov	r1, r3
 800576c:	4622      	mov	r2, r4
 800576e:	8afb      	ldrh	r3, [r7, #22]
 8005770:	1c5c      	adds	r4, r3, #1
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	f7fb fa37 	bl	8000be8 <__aeabi_d2f>
 800577a:	4601      	mov	r1, r0
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <accelerateProcessing+0x138>)
 800577e:	00a3      	lsls	r3, r4, #2
 8005780:	4413      	add	r3, r2
 8005782:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8005784:	8afb      	ldrh	r3, [r7, #22]
 8005786:	3301      	adds	r3, #1
 8005788:	82fb      	strh	r3, [r7, #22]
 800578a:	8afa      	ldrh	r2, [r7, #22]
 800578c:	8abb      	ldrh	r3, [r7, #20]
 800578e:	3b01      	subs	r3, #1
 8005790:	429a      	cmp	r2, r3
 8005792:	f77f af7a 	ble.w	800568a <accelerateProcessing+0x1a>
			}
		}
	}
}
 8005796:	bf00      	nop
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bdb0      	pop	{r4, r5, r7, pc}
 800579e:	bf00      	nop
 80057a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80057a4:	3f50624d 	.word	0x3f50624d
 80057a8:	20016e70 	.word	0x20016e70

080057ac <updateTargetVelocity>:

void updateTargetVelocity(){
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 80057b0:	4b33      	ldr	r3, [pc, #204]	; (8005880 <updateTargetVelocity+0xd4>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d061      	beq.n	800587c <updateTargetVelocity+0xd0>
		if(getTotalDistance() >= ref_distance){
 80057b8:	f7fb fd98 	bl	80012ec <getTotalDistance>
 80057bc:	eeb0 7a40 	vmov.f32	s14, s0
 80057c0:	4b30      	ldr	r3, [pc, #192]	; (8005884 <updateTargetVelocity+0xd8>)
 80057c2:	edd3 7a00 	vldr	s15, [r3]
 80057c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ce:	db14      	blt.n	80057fa <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 80057d0:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <updateTargetVelocity+0xdc>)
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd fc93 	bl	8003100 <getDistanceLog>
 80057da:	eeb0 7a40 	vmov.f32	s14, s0
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <updateTargetVelocity+0xd8>)
 80057e0:	edd3 7a00 	vldr	s15, [r3]
 80057e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e8:	4b26      	ldr	r3, [pc, #152]	; (8005884 <updateTargetVelocity+0xd8>)
 80057ea:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 80057ee:	4b26      	ldr	r3, [pc, #152]	; (8005888 <updateTargetVelocity+0xdc>)
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <updateTargetVelocity+0xdc>)
 80057f8:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 80057fa:	f7fd fb07 	bl	8002e0c <getDistanceLogSize>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <updateTargetVelocity+0xdc>)
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d806      	bhi.n	8005818 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 800580a:	f7fd faff 	bl	8002e0c <getDistanceLogSize>
 800580e:	4603      	mov	r3, r0
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <updateTargetVelocity+0xdc>)
 8005816:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <updateTargetVelocity+0xdc>)
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	4a1b      	ldr	r2, [pc, #108]	; (800588c <updateTargetVelocity+0xe0>)
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	eeb0 0a67 	vmov.f32	s0, s15
 800582a:	f7fd fe11 	bl	8003450 <setTargetVelocity>
		setTargetAcceleration(acceleration_table[velocity_table_idx]);
 800582e:	4b16      	ldr	r3, [pc, #88]	; (8005888 <updateTargetVelocity+0xdc>)
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <updateTargetVelocity+0xe4>)
 8005836:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005842:	eeb0 0a67 	vmov.f32	s0, s15
 8005846:	f7fd fe13 	bl	8003470 <setTargetAcceleration>

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <updateTargetVelocity+0xdc>)
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	4a0f      	ldr	r2, [pc, #60]	; (800588c <updateTargetVelocity+0xe0>)
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	ed93 7a00 	vldr	s14, [r3]
 8005858:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <updateTargetVelocity+0xe8>)
 800585a:	edd3 7a00 	vldr	s15, [r3]
 800585e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d501      	bpl.n	800586c <updateTargetVelocity+0xc0>
			setClearFlagOfVelocityControlI();
 8005868:	f7fd feb8 	bl	80035dc <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <updateTargetVelocity+0xdc>)
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	4a06      	ldr	r2, [pc, #24]	; (800588c <updateTargetVelocity+0xe0>)
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <updateTargetVelocity+0xe8>)
 800587a:	6013      	str	r3, [r2, #0]
	}
}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}
 8005880:	2001ef6c 	.word	0x2001ef6c
 8005884:	2001f4b0 	.word	0x2001f4b0
 8005888:	2001f4b4 	.word	0x2001f4b4
 800588c:	20016e70 	.word	0x20016e70
 8005890:	2001c460 	.word	0x2001c460
 8005894:	2001ef94 	.word	0x2001ef94

08005898 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 800589e:	e03f      	b.n	8005920 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd fc41 	bl	800312c <getCrossLog>
 80058aa:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 80058ae:	f7fb fd1d 	bl	80012ec <getTotalDistance>
 80058b2:	eeb0 7a40 	vmov.f32	s14, s0
 80058b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058be:	eef0 7ae7 	vabs.f32	s15, s15
 80058c2:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 80058c6:	edd7 7a00 	vldr	s15, [r7]
 80058ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800593c <correctionTotalDistanceFromCrossLine+0xa4>
 80058ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d6:	d80d      	bhi.n	80058f4 <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <correctionTotalDistanceFromCrossLine+0xa8>)
 80058da:	2200      	movs	r2, #0
 80058dc:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 80058de:	ed97 0a01 	vldr	s0, [r7, #4]
 80058e2:	f7fb fd2d 	bl	8001340 <setTotalDistance>
			cross_line_idx++;
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058f0:	801a      	strh	r2, [r3, #0]
			break;
 80058f2:	e01d      	b.n	8005930 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 80058f4:	4b10      	ldr	r3, [pc, #64]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058fe:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005900:	f7fd fa90 	bl	8002e24 <getCrossLogSize>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d807      	bhi.n	8005920 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005910:	f7fd fa88 	bl	8002e24 <getCrossLogSize>
 8005914:	4603      	mov	r3, r0
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 800591c:	801a      	strh	r2, [r3, #0]
			break;
 800591e:	e007      	b.n	8005930 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005920:	f7fd fa80 	bl	8002e24 <getCrossLogSize>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <correctionTotalDistanceFromCrossLine+0xa0>)
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d2b7      	bcs.n	80058a0 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	2001ef5a 	.word	0x2001ef5a
 800593c:	437a0000 	.word	0x437a0000
 8005940:	2001ef5e 	.word	0x2001ef5e

08005944 <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 800594a:	e03f      	b.n	80059cc <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f7fd fc01 	bl	8003158 <getSideLog>
 8005956:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 800595a:	f7fb fcc7 	bl	80012ec <getTotalDistance>
 800595e:	eeb0 7a40 	vmov.f32	s14, s0
 8005962:	edd7 7a01 	vldr	s15, [r7, #4]
 8005966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800596a:	eef0 7ae7 	vabs.f32	s15, s15
 800596e:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005972:	edd7 7a00 	vldr	s15, [r7]
 8005976:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80059e8 <correctionTotalDistanceFromSideLine+0xa4>
 800597a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800597e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005982:	d80d      	bhi.n	80059a0 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <correctionTotalDistanceFromSideLine+0xa8>)
 8005986:	2200      	movs	r2, #0
 8005988:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 800598a:	ed97 0a01 	vldr	s0, [r7, #4]
 800598e:	f7fb fcd7 	bl	8001340 <setTotalDistance>
			side_line_idx++;
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	3301      	adds	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 800599c:	801a      	strh	r2, [r3, #0]
			break;
 800599e:	e01d      	b.n	80059dc <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 80059a0:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059aa:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 80059ac:	f7fd fa46 	bl	8002e3c <getSideLogSize>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d807      	bhi.n	80059cc <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 80059bc:	f7fd fa3e 	bl	8002e3c <getSideLogSize>
 80059c0:	4603      	mov	r3, r0
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059c8:	801a      	strh	r2, [r3, #0]
			break;
 80059ca:	e007      	b.n	80059dc <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 80059cc:	f7fd fa36 	bl	8002e3c <getSideLogSize>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d2b7      	bcs.n	800594c <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	2001ef5c 	.word	0x2001ef5c
 80059e8:	437a0000 	.word	0x437a0000
 80059ec:	2001ef60 	.word	0x2001ef60

080059f0 <CreateAcceleration>:

void CreateAcceleration(const float *p_distance)
{
 80059f0:	b5b0      	push	{r4, r5, r7, lr}
 80059f2:	b08e      	sub	sp, #56	; 0x38
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	uint16_t log_size = getDistanceLogSize();
 80059f8:	f7fd fa08 	bl	8002e0c <getDistanceLogSize>
 80059fc:	4603      	mov	r3, r0
 80059fe:	86bb      	strh	r3, [r7, #52]	; 0x34
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005a00:	2300      	movs	r3, #0
 8005a02:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a04:	e0d4      	b.n	8005bb0 <CreateAcceleration+0x1c0>
		float v_diff = velocity_table[i+1] - velocity_table[i];//目標速度ー今の速度
 8005a06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4a7d      	ldr	r2, [pc, #500]	; (8005c00 <CreateAcceleration+0x210>)
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	ed93 7a00 	vldr	s14, [r3]
 8005a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a16:	4a7a      	ldr	r2, [pc, #488]	; (8005c00 <CreateAcceleration+0x210>)
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	edd3 7a00 	vldr	s15, [r3]
 8005a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		float t = p_distance[i]*1e-3 / v_diff;//時間を求める
 8005a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4413      	add	r3, r2
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fa fd88 	bl	8000548 <__aeabi_f2d>
 8005a38:	a363      	add	r3, pc, #396	; (adr r3, 8005bc8 <CreateAcceleration+0x1d8>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fddb 	bl	80005f8 <__aeabi_dmul>
 8005a42:	4603      	mov	r3, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	4625      	mov	r5, r4
 8005a48:	461c      	mov	r4, r3
 8005a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4c:	f7fa fd7c 	bl	8000548 <__aeabi_f2d>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa fef8 	bl	800084c <__aeabi_ddiv>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4618      	mov	r0, r3
 8005a62:	4621      	mov	r1, r4
 8005a64:	f7fb f8c0 	bl	8000be8 <__aeabi_d2f>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		float a = v_diff / t;//加速度計算
 8005a6c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005a70:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		float n = (60*velocity_table[i]) / (2*PI*REDUCTION_RATIO*WHEEL_RADIUS);//回転数
 8005a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a7e:	4a60      	ldr	r2, [pc, #384]	; (8005c00 <CreateAcceleration+0x210>)
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	edd3 7a00 	vldr	s15, [r3]
 8005a88:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005c04 <CreateAcceleration+0x214>
 8005a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a90:	ee17 0a90 	vmov	r0, s15
 8005a94:	f7fa fd58 	bl	8000548 <__aeabi_f2d>
 8005a98:	a34d      	add	r3, pc, #308	; (adr r3, 8005bd0 <CreateAcceleration+0x1e0>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fed5 	bl	800084c <__aeabi_ddiv>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7fb f89d 	bl	8000be8 <__aeabi_d2f>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
		float K_e = ((2*PI)/60) * TORQUE_CONSTANT;//逆起電力定数
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <CreateAcceleration+0x218>)
 8005ab4:	623b      	str	r3, [r7, #32]
		float E = K_e * n;//逆起電力
 8005ab6:	ed97 7a08 	vldr	s14, [r7, #32]
 8005aba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
		float T_t = (AIRCRAFT_MASS*WHEEL_RADIUS*a) / (2*REDUCTION_RATIO);//軸にかかるトルク
 8005ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac8:	f7fa fd3e 	bl	8000548 <__aeabi_f2d>
 8005acc:	a342      	add	r3, pc, #264	; (adr r3, 8005bd8 <CreateAcceleration+0x1e8>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fd91 	bl	80005f8 <__aeabi_dmul>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	460c      	mov	r4, r1
 8005ada:	4618      	mov	r0, r3
 8005adc:	4621      	mov	r1, r4
 8005ade:	a340      	add	r3, pc, #256	; (adr r3, 8005be0 <CreateAcceleration+0x1f0>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa feb2 	bl	800084c <__aeabi_ddiv>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	4618      	mov	r0, r3
 8005aee:	4621      	mov	r1, r4
 8005af0:	f7fb f87a 	bl	8000be8 <__aeabi_d2f>
 8005af4:	4603      	mov	r3, r0
 8005af6:	61bb      	str	r3, [r7, #24]
		float I = T_t / TORQUE_CONSTANT;//電流
 8005af8:	69b8      	ldr	r0, [r7, #24]
 8005afa:	f7fa fd25 	bl	8000548 <__aeabi_f2d>
 8005afe:	a33a      	add	r3, pc, #232	; (adr r3, 8005be8 <CreateAcceleration+0x1f8>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fea2 	bl	800084c <__aeabi_ddiv>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	4621      	mov	r1, r4
 8005b10:	f7fb f86a 	bl	8000be8 <__aeabi_d2f>
 8005b14:	4603      	mov	r3, r0
 8005b16:	617b      	str	r3, [r7, #20]
		float V_mot = I * RWSISTANCE_BETWEEN_TERMINALS + E;//モータの出力に追加したい電圧
 8005b18:	6978      	ldr	r0, [r7, #20]
 8005b1a:	f7fa fd15 	bl	8000548 <__aeabi_f2d>
 8005b1e:	a334      	add	r3, pc, #208	; (adr r3, 8005bf0 <CreateAcceleration+0x200>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fd68 	bl	80005f8 <__aeabi_dmul>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4625      	mov	r5, r4
 8005b2e:	461c      	mov	r4, r3
 8005b30:	69f8      	ldr	r0, [r7, #28]
 8005b32:	f7fa fd09 	bl	8000548 <__aeabi_f2d>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fa fba5 	bl	800028c <__adddf3>
 8005b42:	4603      	mov	r3, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	4618      	mov	r0, r3
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7fb f84d 	bl	8000be8 <__aeabi_d2f>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	613b      	str	r3, [r7, #16]
		float Duty = V_mot / Power_supply_voltage;//Duty比
 8005b52:	6938      	ldr	r0, [r7, #16]
 8005b54:	f7fa fcf8 	bl	8000548 <__aeabi_f2d>
 8005b58:	a327      	add	r3, pc, #156	; (adr r3, 8005bf8 <CreateAcceleration+0x208>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fe75 	bl	800084c <__aeabi_ddiv>
 8005b62:	4603      	mov	r3, r0
 8005b64:	460c      	mov	r4, r1
 8005b66:	4618      	mov	r0, r3
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7fb f83d 	bl	8000be8 <__aeabi_d2f>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	60fb      	str	r3, [r7, #12]
		float Duty_motor = Duty * MAX_CounterPeriod;
 8005b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b76:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005c0c <CreateAcceleration+0x21c>
 8005b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b7e:	edc7 7a02 	vstr	s15, [r7, #8]

		V_motor = Duty_motor * 10000;
 8005b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b86:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005c10 <CreateAcceleration+0x220>
 8005b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b92:	ee17 3a90 	vmov	r3, s15
 8005b96:	b21a      	sxth	r2, r3
 8005b98:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <CreateAcceleration+0x224>)
 8005b9a:	801a      	strh	r2, [r3, #0]

		acceleration_table[i] = V_motor;
 8005b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <CreateAcceleration+0x224>)
 8005ba0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <CreateAcceleration+0x228>)
 8005ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005baa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bac:	3301      	adds	r3, #1
 8005bae:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bb0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	f77f af25 	ble.w	8005a06 <CreateAcceleration+0x16>
    }
}
 8005bbc:	bf00      	nop
 8005bbe:	3738      	adds	r7, #56	; 0x38
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005bcc:	3f50624d 	.word	0x3f50624d
 8005bd0:	31e7b586 	.word	0x31e7b586
 8005bd4:	403e28c7 	.word	0x403e28c7
 8005bd8:	5c28f5c2 	.word	0x5c28f5c2
 8005bdc:	3ffdc28f 	.word	0x3ffdc28f
 8005be0:	9999999a 	.word	0x9999999a
 8005be4:	3fe99999 	.word	0x3fe99999
 8005be8:	9c38b04b 	.word	0x9c38b04b
 8005bec:	3f6cd5f9 	.word	0x3f6cd5f9
 8005bf0:	33333333 	.word	0x33333333
 8005bf4:	40073333 	.word	0x40073333
 8005bf8:	9999999a 	.word	0x9999999a
 8005bfc:	40289999 	.word	0x40289999
 8005c00:	20016e70 	.word	0x20016e70
 8005c04:	42700000 	.word	0x42700000
 8005c08:	39c14279 	.word	0x39c14279
 8005c0c:	44d1e000 	.word	0x44d1e000
 8005c10:	461c4000 	.word	0x461c4000
 8005c14:	2001ef84 	.word	0x2001ef84
 8005c18:	2001c460 	.word	0x2001c460

08005c1c <getgoalStatus>:

bool getgoalStatus()
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
	return goal_flag;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <getgoalStatus+0x14>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	2001ef66 	.word	0x2001ef66

08005c34 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c3e:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005c42:	4a06      	ldr	r2, [pc, #24]	; (8005c5c <setVelocityRange+0x28>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005c48:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <setVelocityRange+0x2c>)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6013      	str	r3, [r2, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2001ef70 	.word	0x2001ef70
 8005c60:	2001ef74 	.word	0x2001ef74

08005c64 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c6e:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005c72:	4a06      	ldr	r2, [pc, #24]	; (8005c8c <setAccDec+0x28>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005c78:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <setAccDec+0x2c>)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6013      	str	r3, [r2, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2001ef78 	.word	0x2001ef78
 8005c90:	2001ef7c 	.word	0x2001ef7c

08005c94 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <setStraightRadius+0x1c>)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	2001ef80 	.word	0x2001ef80

08005cb4 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <getSideSensorStatusL+0x14>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	2001ef64 	.word	0x2001ef64

08005ccc <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005cd0:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <getSideSensorStatusR+0x14>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	2001ef65 	.word	0x2001ef65

08005ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <HAL_MspInit+0x4c>)
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	4a0f      	ldr	r2, [pc, #60]	; (8005d30 <HAL_MspInit+0x4c>)
 8005cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <HAL_MspInit+0x4c>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <HAL_MspInit+0x4c>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <HAL_MspInit+0x4c>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6413      	str	r3, [r2, #64]	; 0x40
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_MspInit+0x4c>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800

08005d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08e      	sub	sp, #56	; 0x38
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a79      	ldr	r2, [pc, #484]	; (8005f38 <HAL_ADC_MspInit+0x204>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d158      	bne.n	8005e08 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d56:	2300      	movs	r3, #0
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	4b78      	ldr	r3, [pc, #480]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	4a77      	ldr	r2, [pc, #476]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	6453      	str	r3, [r2, #68]	; 0x44
 8005d66:	4b75      	ldr	r3, [pc, #468]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	4b71      	ldr	r3, [pc, #452]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	4a70      	ldr	r2, [pc, #448]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005d7c:	f043 0304 	orr.w	r3, r3, #4
 8005d80:	6313      	str	r3, [r2, #48]	; 0x30
 8005d82:	4b6e      	ldr	r3, [pc, #440]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005d8e:	230e      	movs	r3, #14
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d92:	2303      	movs	r3, #3
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4867      	ldr	r0, [pc, #412]	; (8005f40 <HAL_ADC_MspInit+0x20c>)
 8005da2:	f001 ff65 	bl	8007c70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005da6:	4b67      	ldr	r3, [pc, #412]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005da8:	4a67      	ldr	r2, [pc, #412]	; (8005f48 <HAL_ADC_MspInit+0x214>)
 8005daa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005dac:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005db2:	4b64      	ldr	r3, [pc, #400]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db8:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005dbe:	4b61      	ldr	r3, [pc, #388]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005dce:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005dd6:	4b5b      	ldr	r3, [pc, #364]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ddc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005de4:	4b57      	ldr	r3, [pc, #348]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005dea:	4856      	ldr	r0, [pc, #344]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dec:	f001 f9e8 	bl	80071c0 <HAL_DMA_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005df6:	f7fe fceb 	bl	80047d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a51      	ldr	r2, [pc, #324]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8005e00:	4a50      	ldr	r2, [pc, #320]	; (8005f44 <HAL_ADC_MspInit+0x210>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005e06:	e092      	b.n	8005f2e <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a4f      	ldr	r2, [pc, #316]	; (8005f4c <HAL_ADC_MspInit+0x218>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f040 808d 	bne.w	8005f2e <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	4b48      	ldr	r3, [pc, #288]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	4a47      	ldr	r2, [pc, #284]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e22:	6453      	str	r3, [r2, #68]	; 0x44
 8005e24:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	4a40      	ldr	r2, [pc, #256]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e40:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	4b3a      	ldr	r3, [pc, #232]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	4a39      	ldr	r2, [pc, #228]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e56:	f043 0304 	orr.w	r3, r3, #4
 8005e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5c:	4b37      	ldr	r3, [pc, #220]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	4b33      	ldr	r3, [pc, #204]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e72:	f043 0302 	orr.w	r3, r3, #2
 8005e76:	6313      	str	r3, [r2, #48]	; 0x30
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <HAL_ADC_MspInit+0x208>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005e84:	23ff      	movs	r3, #255	; 0xff
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e94:	4619      	mov	r1, r3
 8005e96:	482e      	ldr	r0, [pc, #184]	; (8005f50 <HAL_ADC_MspInit+0x21c>)
 8005e98:	f001 feea 	bl	8007c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e9c:	2330      	movs	r3, #48	; 0x30
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eac:	4619      	mov	r1, r3
 8005eae:	4824      	ldr	r0, [pc, #144]	; (8005f40 <HAL_ADC_MspInit+0x20c>)
 8005eb0:	f001 fede 	bl	8007c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4823      	ldr	r0, [pc, #140]	; (8005f54 <HAL_ADC_MspInit+0x220>)
 8005ec8:	f001 fed2 	bl	8007c70 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005ecc:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005ece:	4a23      	ldr	r2, [pc, #140]	; (8005f5c <HAL_ADC_MspInit+0x228>)
 8005ed0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005ed2:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ed8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005eee:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ef6:	4b18      	ldr	r3, [pc, #96]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005efc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005efe:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f04:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005f12:	4811      	ldr	r0, [pc, #68]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005f14:	f001 f954 	bl	80071c0 <HAL_DMA_Init>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005f1e:	f7fe fc57 	bl	80047d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_ADC_MspInit+0x224>)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005f2e:	bf00      	nop
 8005f30:	3738      	adds	r7, #56	; 0x38
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40012000 	.word	0x40012000
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40020800 	.word	0x40020800
 8005f44:	2001f320 	.word	0x2001f320
 8005f48:	40026410 	.word	0x40026410
 8005f4c:	40012100 	.word	0x40012100
 8005f50:	40020000 	.word	0x40020000
 8005f54:	40020400 	.word	0x40020400
 8005f58:	2001f408 	.word	0x2001f408
 8005f5c:	40026440 	.word	0x40026440

08005f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	; 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a19      	ldr	r2, [pc, #100]	; (8005fe4 <HAL_I2C_MspInit+0x84>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d12c      	bne.n	8005fdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <HAL_I2C_MspInit+0x88>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <HAL_I2C_MspInit+0x88>)
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	6313      	str	r3, [r2, #48]	; 0x30
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <HAL_I2C_MspInit+0x88>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fa4:	2312      	movs	r3, #18
 8005fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fac:	2303      	movs	r3, #3
 8005fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4619      	mov	r1, r3
 8005fba:	480c      	ldr	r0, [pc, #48]	; (8005fec <HAL_I2C_MspInit+0x8c>)
 8005fbc:	f001 fe58 	bl	8007c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <HAL_I2C_MspInit+0x88>)
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	4a07      	ldr	r2, [pc, #28]	; (8005fe8 <HAL_I2C_MspInit+0x88>)
 8005fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fce:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd0:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <HAL_I2C_MspInit+0x88>)
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005fdc:	bf00      	nop
 8005fde:	3728      	adds	r7, #40	; 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40005400 	.word	0x40005400
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40020400 	.word	0x40020400

08005ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	; 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_SPI_MspInit+0x84>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d12c      	bne.n	800606c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <HAL_SPI_MspInit+0x88>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <HAL_SPI_MspInit+0x88>)
 800601c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006020:	6413      	str	r3, [r2, #64]	; 0x40
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_SPI_MspInit+0x88>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <HAL_SPI_MspInit+0x88>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	4a10      	ldr	r2, [pc, #64]	; (8006078 <HAL_SPI_MspInit+0x88>)
 8006038:	f043 0304 	orr.w	r3, r3, #4
 800603c:	6313      	str	r3, [r2, #48]	; 0x30
 800603e:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <HAL_SPI_MspInit+0x88>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800604a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800604e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006050:	2302      	movs	r3, #2
 8006052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006058:	2303      	movs	r3, #3
 800605a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800605c:	2306      	movs	r3, #6
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006060:	f107 0314 	add.w	r3, r7, #20
 8006064:	4619      	mov	r1, r3
 8006066:	4805      	ldr	r0, [pc, #20]	; (800607c <HAL_SPI_MspInit+0x8c>)
 8006068:	f001 fe02 	bl	8007c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800606c:	bf00      	nop
 800606e:	3728      	adds	r7, #40	; 0x28
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40003c00 	.word	0x40003c00
 8006078:	40023800 	.word	0x40023800
 800607c:	40020800 	.word	0x40020800

08006080 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <HAL_TIM_PWM_MspInit+0x64>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10e      	bne.n	80060b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <HAL_TIM_PWM_MspInit+0x68>)
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <HAL_TIM_PWM_MspInit+0x68>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6453      	str	r3, [r2, #68]	; 0x44
 80060a2:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <HAL_TIM_PWM_MspInit+0x68>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80060ae:	e012      	b.n	80060d6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <HAL_TIM_PWM_MspInit+0x6c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d10d      	bne.n	80060d6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <HAL_TIM_PWM_MspInit+0x68>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <HAL_TIM_PWM_MspInit+0x68>)
 80060c4:	f043 0302 	orr.w	r3, r3, #2
 80060c8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <HAL_TIM_PWM_MspInit+0x68>)
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40010400 	.word	0x40010400

080060f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f8:	f107 031c 	add.w	r3, r7, #28
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	609a      	str	r2, [r3, #8]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a32      	ldr	r2, [pc, #200]	; (80061d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d12c      	bne.n	800616c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	4b31      	ldr	r3, [pc, #196]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	4a30      	ldr	r2, [pc, #192]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 800611c:	f043 0302 	orr.w	r3, r3, #2
 8006120:	6413      	str	r3, [r2, #64]	; 0x40
 8006122:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	4a29      	ldr	r2, [pc, #164]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	6313      	str	r3, [r2, #48]	; 0x30
 800613e:	4b27      	ldr	r3, [pc, #156]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800614a:	2330      	movs	r3, #48	; 0x30
 800614c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614e:	2302      	movs	r3, #2
 8006150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006156:	2300      	movs	r3, #0
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800615a:	2302      	movs	r3, #2
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800615e:	f107 031c 	add.w	r3, r7, #28
 8006162:	4619      	mov	r1, r3
 8006164:	481e      	ldr	r0, [pc, #120]	; (80061e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006166:	f001 fd83 	bl	8007c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800616a:	e030      	b.n	80061ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d12b      	bne.n	80061ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	4a17      	ldr	r2, [pc, #92]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006180:	f043 0304 	orr.w	r3, r3, #4
 8006184:	6413      	str	r3, [r2, #64]	; 0x40
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	4b11      	ldr	r3, [pc, #68]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	4a10      	ldr	r2, [pc, #64]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 800619c:	f043 0302 	orr.w	r3, r3, #2
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <HAL_TIM_Encoder_MspInit+0xec>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061ae:	23c0      	movs	r3, #192	; 0xc0
 80061b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b2:	2302      	movs	r3, #2
 80061b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ba:	2300      	movs	r3, #0
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80061be:	2302      	movs	r3, #2
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061c2:	f107 031c 	add.w	r3, r7, #28
 80061c6:	4619      	mov	r1, r3
 80061c8:	4805      	ldr	r0, [pc, #20]	; (80061e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80061ca:	f001 fd51 	bl	8007c70 <HAL_GPIO_Init>
}
 80061ce:	bf00      	nop
 80061d0:	3730      	adds	r7, #48	; 0x30
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40020400 	.word	0x40020400
 80061e4:	40000800 	.word	0x40000800

080061e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1c      	ldr	r2, [pc, #112]	; (8006268 <HAL_TIM_Base_MspInit+0x80>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d116      	bne.n	8006228 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	4b1b      	ldr	r3, [pc, #108]	; (800626c <HAL_TIM_Base_MspInit+0x84>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	4a1a      	ldr	r2, [pc, #104]	; (800626c <HAL_TIM_Base_MspInit+0x84>)
 8006204:	f043 0310 	orr.w	r3, r3, #16
 8006208:	6413      	str	r3, [r2, #64]	; 0x40
 800620a:	4b18      	ldr	r3, [pc, #96]	; (800626c <HAL_TIM_Base_MspInit+0x84>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006216:	2200      	movs	r2, #0
 8006218:	2101      	movs	r1, #1
 800621a:	2036      	movs	r0, #54	; 0x36
 800621c:	f000 ff99 	bl	8007152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006220:	2036      	movs	r0, #54	; 0x36
 8006222:	f000 ffb2 	bl	800718a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006226:	e01a      	b.n	800625e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a10      	ldr	r2, [pc, #64]	; (8006270 <HAL_TIM_Base_MspInit+0x88>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d115      	bne.n	800625e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <HAL_TIM_Base_MspInit+0x84>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	4a0c      	ldr	r2, [pc, #48]	; (800626c <HAL_TIM_Base_MspInit+0x84>)
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	6413      	str	r3, [r2, #64]	; 0x40
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <HAL_TIM_Base_MspInit+0x84>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	60bb      	str	r3, [r7, #8]
 800624c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800624e:	2200      	movs	r2, #0
 8006250:	2100      	movs	r1, #0
 8006252:	2037      	movs	r0, #55	; 0x37
 8006254:	f000 ff7d 	bl	8007152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006258:	2037      	movs	r0, #55	; 0x37
 800625a:	f000 ff96 	bl	800718a <HAL_NVIC_EnableIRQ>
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40001000 	.word	0x40001000
 800626c:	40023800 	.word	0x40023800
 8006270:	40001400 	.word	0x40001400

08006274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	609a      	str	r2, [r3, #8]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a25      	ldr	r2, [pc, #148]	; (8006328 <HAL_TIM_MspPostInit+0xb4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d11f      	bne.n	80062d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <HAL_TIM_MspPostInit+0xb8>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	4a23      	ldr	r2, [pc, #140]	; (800632c <HAL_TIM_MspPostInit+0xb8>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6313      	str	r3, [r2, #48]	; 0x30
 80062a6:	4b21      	ldr	r3, [pc, #132]	; (800632c <HAL_TIM_MspPostInit+0xb8>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80062b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b8:	2302      	movs	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062c0:	2300      	movs	r3, #0
 80062c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80062c4:	2301      	movs	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4619      	mov	r1, r3
 80062ce:	4818      	ldr	r0, [pc, #96]	; (8006330 <HAL_TIM_MspPostInit+0xbc>)
 80062d0:	f001 fcce 	bl	8007c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80062d4:	e023      	b.n	800631e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a16      	ldr	r2, [pc, #88]	; (8006334 <HAL_TIM_MspPostInit+0xc0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d11e      	bne.n	800631e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	4b11      	ldr	r3, [pc, #68]	; (800632c <HAL_TIM_MspPostInit+0xb8>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	4a10      	ldr	r2, [pc, #64]	; (800632c <HAL_TIM_MspPostInit+0xb8>)
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	6313      	str	r3, [r2, #48]	; 0x30
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <HAL_TIM_MspPostInit+0xb8>)
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80062fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006302:	2302      	movs	r3, #2
 8006304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800630a:	2300      	movs	r3, #0
 800630c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800630e:	2303      	movs	r3, #3
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006312:	f107 0314 	add.w	r3, r7, #20
 8006316:	4619      	mov	r1, r3
 8006318:	4807      	ldr	r0, [pc, #28]	; (8006338 <HAL_TIM_MspPostInit+0xc4>)
 800631a:	f001 fca9 	bl	8007c70 <HAL_GPIO_Init>
}
 800631e:	bf00      	nop
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40010000 	.word	0x40010000
 800632c:	40023800 	.word	0x40023800
 8006330:	40020000 	.word	0x40020000
 8006334:	40010400 	.word	0x40010400
 8006338:	40020800 	.word	0x40020800

0800633c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <HAL_UART_MspInit+0x84>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d12c      	bne.n	80063b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <HAL_UART_MspInit+0x88>)
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_UART_MspInit+0x88>)
 8006368:	f043 0310 	orr.w	r3, r3, #16
 800636c:	6453      	str	r3, [r2, #68]	; 0x44
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_UART_MspInit+0x88>)
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_UART_MspInit+0x88>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <HAL_UART_MspInit+0x88>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6313      	str	r3, [r2, #48]	; 0x30
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_UART_MspInit+0x88>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800639a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639c:	2302      	movs	r3, #2
 800639e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063a4:	2303      	movs	r3, #3
 80063a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80063a8:	2307      	movs	r3, #7
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	4619      	mov	r1, r3
 80063b2:	4805      	ldr	r0, [pc, #20]	; (80063c8 <HAL_UART_MspInit+0x8c>)
 80063b4:	f001 fc5c 	bl	8007c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80063b8:	bf00      	nop
 80063ba:	3728      	adds	r7, #40	; 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40011000 	.word	0x40011000
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40020000 	.word	0x40020000

080063cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063d0:	e7fe      	b.n	80063d0 <NMI_Handler+0x4>

080063d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063d6:	e7fe      	b.n	80063d6 <HardFault_Handler+0x4>

080063d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063dc:	e7fe      	b.n	80063dc <MemManage_Handler+0x4>

080063de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063e2:	e7fe      	b.n	80063e2 <BusFault_Handler+0x4>

080063e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063e8:	e7fe      	b.n	80063e8 <UsageFault_Handler+0x4>

080063ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063ea:	b480      	push	{r7}
 80063ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063ee:	bf00      	nop
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800640a:	bf00      	nop
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006418:	f000 f98a 	bl	8006730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}

08006420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006424:	4802      	ldr	r0, [pc, #8]	; (8006430 <TIM6_DAC_IRQHandler+0x10>)
 8006426:	f003 fa38 	bl	800989a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2001f380 	.word	0x2001f380

08006434 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006438:	4802      	ldr	r0, [pc, #8]	; (8006444 <TIM7_IRQHandler+0x10>)
 800643a:	f003 fa2e 	bl	800989a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	2001f468 	.word	0x2001f468

08006448 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800644c:	4802      	ldr	r0, [pc, #8]	; (8006458 <DMA2_Stream0_IRQHandler+0x10>)
 800644e:	f000 ffbd 	bl	80073cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	2001f320 	.word	0x2001f320

0800645c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006460:	4802      	ldr	r0, [pc, #8]	; (800646c <DMA2_Stream2_IRQHandler+0x10>)
 8006462:	f000 ffb3 	bl	80073cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	2001f408 	.word	0x2001f408

08006470 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	2b52      	cmp	r3, #82	; 0x52
 8006482:	d10a      	bne.n	800649a <getSwitchStatus+0x2a>
 8006484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006488:	480d      	ldr	r0, [pc, #52]	; (80064c0 <getSwitchStatus+0x50>)
 800648a:	f001 fd8b 	bl	8007fa4 <HAL_GPIO_ReadPin>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <getSwitchStatus+0x2a>
		ret = 1;
 8006494:	2301      	movs	r3, #1
 8006496:	81fb      	strh	r3, [r7, #14]
 8006498:	e00c      	b.n	80064b4 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	2b4c      	cmp	r3, #76	; 0x4c
 800649e:	d109      	bne.n	80064b4 <getSwitchStatus+0x44>
 80064a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064a4:	4806      	ldr	r0, [pc, #24]	; (80064c0 <getSwitchStatus+0x50>)
 80064a6:	f001 fd7d 	bl	8007fa4 <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <getSwitchStatus+0x44>
		ret = 1;
 80064b0:	2301      	movs	r3, #1
 80064b2:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 80064b4:	89fb      	ldrh	r3, [r7, #14]

}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40020000 	.word	0x40020000

080064c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e00a      	b.n	80064ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064d6:	f3af 8000 	nop.w
 80064da:	4601      	mov	r1, r0
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	60ba      	str	r2, [r7, #8]
 80064e2:	b2ca      	uxtb	r2, r1
 80064e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	3301      	adds	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	dbf0      	blt.n	80064d6 <_read+0x12>
	}

return len;
 80064f4:	687b      	ldr	r3, [r7, #4]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e009      	b.n	8006524 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	60ba      	str	r2, [r7, #8]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7fd f87b 	bl	8003614 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	3301      	adds	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	dbf1      	blt.n	8006510 <_write+0x12>
	}
	return len;
 800652c:	687b      	ldr	r3, [r7, #4]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <_close>:

int _close(int file)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
	return -1;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800655e:	605a      	str	r2, [r3, #4]
	return 0;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <_isatty>:

int _isatty(int file)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
	return 1;
 8006576:	2301      	movs	r3, #1
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
	return 0;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065a8:	4a14      	ldr	r2, [pc, #80]	; (80065fc <_sbrk+0x5c>)
 80065aa:	4b15      	ldr	r3, [pc, #84]	; (8006600 <_sbrk+0x60>)
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065b4:	4b13      	ldr	r3, [pc, #76]	; (8006604 <_sbrk+0x64>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <_sbrk+0x64>)
 80065be:	4a12      	ldr	r2, [pc, #72]	; (8006608 <_sbrk+0x68>)
 80065c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <_sbrk+0x64>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d207      	bcs.n	80065e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065d0:	f004 fb5e 	bl	800ac90 <__errno>
 80065d4:	4602      	mov	r2, r0
 80065d6:	230c      	movs	r3, #12
 80065d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
 80065de:	e009      	b.n	80065f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065e0:	4b08      	ldr	r3, [pc, #32]	; (8006604 <_sbrk+0x64>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065e6:	4b07      	ldr	r3, [pc, #28]	; (8006604 <_sbrk+0x64>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	4a05      	ldr	r2, [pc, #20]	; (8006604 <_sbrk+0x64>)
 80065f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20020000 	.word	0x20020000
 8006600:	00000400 	.word	0x00000400
 8006604:	2001ef98 	.word	0x2001ef98
 8006608:	2001f4e0 	.word	0x2001f4e0

0800660c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <SystemInit+0x28>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	4a07      	ldr	r2, [pc, #28]	; (8006634 <SystemInit+0x28>)
 8006618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800661c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <SystemInit+0x28>)
 8006622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006626:	609a      	str	r2, [r3, #8]
#endif
}
 8006628:	bf00      	nop
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	e000ed00 	.word	0xe000ed00

08006638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006670 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800663c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800663e:	e003      	b.n	8006648 <LoopCopyDataInit>

08006640 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006642:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006644:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006646:	3104      	adds	r1, #4

08006648 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006648:	480b      	ldr	r0, [pc, #44]	; (8006678 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800664c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800664e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006650:	d3f6      	bcc.n	8006640 <CopyDataInit>
  ldr  r2, =_sbss
 8006652:	4a0b      	ldr	r2, [pc, #44]	; (8006680 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006654:	e002      	b.n	800665c <LoopFillZerobss>

08006656 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006656:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006658:	f842 3b04 	str.w	r3, [r2], #4

0800665c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800665e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006660:	d3f9      	bcc.n	8006656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006662:	f7ff ffd3 	bl	800660c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006666:	f004 fb19 	bl	800ac9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800666a:	f7fd f84d 	bl	8003708 <main>
  bx  lr    
 800666e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006670:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006674:	0800f538 	.word	0x0800f538
  ldr  r0, =_sdata
 8006678:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800667c:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8006680:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8006684:	2001f4e0 	.word	0x2001f4e0

08006688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006688:	e7fe      	b.n	8006688 <ADC_IRQHandler>
	...

0800668c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006690:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <HAL_Init+0x40>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <HAL_Init+0x40>)
 8006696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800669a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <HAL_Init+0x40>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <HAL_Init+0x40>)
 80066a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <HAL_Init+0x40>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a07      	ldr	r2, [pc, #28]	; (80066cc <HAL_Init+0x40>)
 80066ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066b4:	2003      	movs	r0, #3
 80066b6:	f000 fd41 	bl	800713c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066ba:	2000      	movs	r0, #0
 80066bc:	f000 f808 	bl	80066d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066c0:	f7ff fb10 	bl	8005ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40023c00 	.word	0x40023c00

080066d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066d8:	4b12      	ldr	r3, [pc, #72]	; (8006724 <HAL_InitTick+0x54>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	4b12      	ldr	r3, [pc, #72]	; (8006728 <HAL_InitTick+0x58>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	4619      	mov	r1, r3
 80066e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fd59 	bl	80071a6 <HAL_SYSTICK_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e00e      	b.n	800671c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d80a      	bhi.n	800671a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006704:	2200      	movs	r2, #0
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	f000 fd21 	bl	8007152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006710:	4a06      	ldr	r2, [pc, #24]	; (800672c <HAL_InitTick+0x5c>)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000034 	.word	0x20000034
 8006728:	2000003c 	.word	0x2000003c
 800672c:	20000038 	.word	0x20000038

08006730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <HAL_IncTick+0x20>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_IncTick+0x24>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4413      	add	r3, r2
 8006740:	4a04      	ldr	r2, [pc, #16]	; (8006754 <HAL_IncTick+0x24>)
 8006742:	6013      	str	r3, [r2, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	2000003c 	.word	0x2000003c
 8006754:	2001f4b8 	.word	0x2001f4b8

08006758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  return uwTick;
 800675c:	4b03      	ldr	r3, [pc, #12]	; (800676c <HAL_GetTick+0x14>)
 800675e:	681b      	ldr	r3, [r3, #0]
}
 8006760:	4618      	mov	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	2001f4b8 	.word	0x2001f4b8

08006770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006778:	f7ff ffee 	bl	8006758 <HAL_GetTick>
 800677c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d005      	beq.n	8006796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800678a:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <HAL_Delay+0x40>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006796:	bf00      	nop
 8006798:	f7ff ffde 	bl	8006758 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d8f7      	bhi.n	8006798 <HAL_Delay+0x28>
  {
  }
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	2000003c 	.word	0x2000003c

080067b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e033      	b.n	8006832 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff faae 	bl	8005d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d118      	bne.n	8006824 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067fa:	f023 0302 	bic.w	r3, r3, #2
 80067fe:	f043 0202 	orr.w	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa4a 	bl	8006ca0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
 8006822:	e001      	b.n	8006828 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_ADC_Start_DMA+0x1e>
 8006856:	2302      	movs	r3, #2
 8006858:	e0cc      	b.n	80069f4 <HAL_ADC_Start_DMA+0x1b8>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d018      	beq.n	80068a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006880:	4b5e      	ldr	r3, [pc, #376]	; (80069fc <HAL_ADC_Start_DMA+0x1c0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a5e      	ldr	r2, [pc, #376]	; (8006a00 <HAL_ADC_Start_DMA+0x1c4>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	0c9a      	lsrs	r2, r3, #18
 800688c:	4613      	mov	r3, r2
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	4413      	add	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006894:	e002      	b.n	800689c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	3b01      	subs	r3, #1
 800689a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f9      	bne.n	8006896 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 80a0 	bne.w	80069f2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	d106      	bne.n	8006900 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	f023 0206 	bic.w	r2, r3, #6
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	645a      	str	r2, [r3, #68]	; 0x44
 80068fe:	e002      	b.n	8006906 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800690e:	4b3d      	ldr	r3, [pc, #244]	; (8006a04 <HAL_ADC_Start_DMA+0x1c8>)
 8006910:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	4a3c      	ldr	r2, [pc, #240]	; (8006a08 <HAL_ADC_Start_DMA+0x1cc>)
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	4a3b      	ldr	r2, [pc, #236]	; (8006a0c <HAL_ADC_Start_DMA+0x1d0>)
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	4a3a      	ldr	r2, [pc, #232]	; (8006a10 <HAL_ADC_Start_DMA+0x1d4>)
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006932:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006942:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006952:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	334c      	adds	r3, #76	; 0x4c
 800695e:	4619      	mov	r1, r3
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f000 fcda 	bl	800731c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2b00      	cmp	r3, #0
 8006972:	d12a      	bne.n	80069ca <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <HAL_ADC_Start_DMA+0x1d8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d015      	beq.n	80069aa <HAL_ADC_Start_DMA+0x16e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <HAL_ADC_Start_DMA+0x1dc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d105      	bne.n	8006994 <HAL_ADC_Start_DMA+0x158>
 8006988:	4b1e      	ldr	r3, [pc, #120]	; (8006a04 <HAL_ADC_Start_DMA+0x1c8>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <HAL_ADC_Start_DMA+0x1e0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d129      	bne.n	80069f2 <HAL_ADC_Start_DMA+0x1b6>
 800699e:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_ADC_Start_DMA+0x1c8>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d823      	bhi.n	80069f2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d11c      	bne.n	80069f2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	e013      	b.n	80069f2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <HAL_ADC_Start_DMA+0x1d8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10e      	bne.n	80069f2 <HAL_ADC_Start_DMA+0x1b6>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069f0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000034 	.word	0x20000034
 8006a00:	431bde83 	.word	0x431bde83
 8006a04:	40012300 	.word	0x40012300
 8006a08:	08006e99 	.word	0x08006e99
 8006a0c:	08006f53 	.word	0x08006f53
 8006a10:	08006f6f 	.word	0x08006f6f
 8006a14:	40012000 	.word	0x40012000
 8006a18:	40012100 	.word	0x40012100
 8006a1c:	40012200 	.word	0x40012200

08006a20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_ADC_ConfigChannel+0x1c>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e105      	b.n	8006c84 <HAL_ADC_ConfigChannel+0x228>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b09      	cmp	r3, #9
 8006a86:	d925      	bls.n	8006ad4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68d9      	ldr	r1, [r3, #12]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3b1e      	subs	r3, #30
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43da      	mvns	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	400a      	ands	r2, r1
 8006aac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68d9      	ldr	r1, [r3, #12]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	4618      	mov	r0, r3
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4403      	add	r3, r0
 8006ac6:	3b1e      	subs	r3, #30
 8006ac8:	409a      	lsls	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	e022      	b.n	8006b1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6919      	ldr	r1, [r3, #16]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	2207      	movs	r2, #7
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43da      	mvns	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	400a      	ands	r2, r1
 8006af6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6919      	ldr	r1, [r3, #16]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4618      	mov	r0, r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4403      	add	r3, r0
 8006b10:	409a      	lsls	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b06      	cmp	r3, #6
 8006b20:	d824      	bhi.n	8006b6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	3b05      	subs	r3, #5
 8006b34:	221f      	movs	r2, #31
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	43da      	mvns	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	400a      	ands	r2, r1
 8006b42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	4618      	mov	r0, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3b05      	subs	r3, #5
 8006b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34
 8006b6a:	e04c      	b.n	8006c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b0c      	cmp	r3, #12
 8006b72:	d824      	bhi.n	8006bbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	3b23      	subs	r3, #35	; 0x23
 8006b86:	221f      	movs	r2, #31
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	43da      	mvns	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	400a      	ands	r2, r1
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	3b23      	subs	r3, #35	; 0x23
 8006bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
 8006bbc:	e023      	b.n	8006c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	3b41      	subs	r3, #65	; 0x41
 8006bd0:	221f      	movs	r2, #31
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	400a      	ands	r2, r1
 8006bde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4618      	mov	r0, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3b41      	subs	r3, #65	; 0x41
 8006bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c06:	4b22      	ldr	r3, [pc, #136]	; (8006c90 <HAL_ADC_ConfigChannel+0x234>)
 8006c08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <HAL_ADC_ConfigChannel+0x238>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d109      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x1cc>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b12      	cmp	r3, #18
 8006c1a:	d105      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a19      	ldr	r2, [pc, #100]	; (8006c94 <HAL_ADC_ConfigChannel+0x238>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d123      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x21e>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d003      	beq.n	8006c42 <HAL_ADC_ConfigChannel+0x1e6>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b11      	cmp	r3, #17
 8006c40:	d11b      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b10      	cmp	r3, #16
 8006c54:	d111      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <HAL_ADC_ConfigChannel+0x23c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a10      	ldr	r2, [pc, #64]	; (8006c9c <HAL_ADC_ConfigChannel+0x240>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	0c9a      	lsrs	r2, r3, #18
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c6c:	e002      	b.n	8006c74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f9      	bne.n	8006c6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40012300 	.word	0x40012300
 8006c94:	40012000 	.word	0x40012000
 8006c98:	20000034 	.word	0x20000034
 8006c9c:	431bde83 	.word	0x431bde83

08006ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ca8:	4b79      	ldr	r3, [pc, #484]	; (8006e90 <ADC_Init+0x1f0>)
 8006caa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6859      	ldr	r1, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	021a      	lsls	r2, r3, #8
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6859      	ldr	r1, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6899      	ldr	r1, [r3, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	4a58      	ldr	r2, [pc, #352]	; (8006e94 <ADC_Init+0x1f4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d022      	beq.n	8006d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6899      	ldr	r1, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6899      	ldr	r1, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	e00f      	b.n	8006d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0202 	bic.w	r2, r2, #2
 8006dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6899      	ldr	r1, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7e1b      	ldrb	r3, [r3, #24]
 8006db8:	005a      	lsls	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	3b01      	subs	r3, #1
 8006df8:	035a      	lsls	r2, r3, #13
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	e007      	b.n	8006e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	051a      	lsls	r2, r3, #20
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6899      	ldr	r1, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e56:	025a      	lsls	r2, r3, #9
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6899      	ldr	r1, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	029a      	lsls	r2, r3, #10
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40012300 	.word	0x40012300
 8006e94:	0f000001 	.word	0x0f000001

08006e98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d13c      	bne.n	8006f2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d12b      	bne.n	8006f24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d127      	bne.n	8006f24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d006      	beq.n	8006ef0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d119      	bne.n	8006f24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0220 	bic.w	r2, r2, #32
 8006efe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	f043 0201 	orr.w	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff fd7b 	bl	8006a20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f2a:	e00e      	b.n	8006f4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff fd85 	bl	8006a48 <HAL_ADC_ErrorCallback>
}
 8006f3e:	e004      	b.n	8006f4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff fd67 	bl	8006a34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2240      	movs	r2, #64	; 0x40
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff fd5a 	bl	8006a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fac:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fb8:	4013      	ands	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fce:	4a04      	ldr	r2, [pc, #16]	; (8006fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	60d3      	str	r3, [r2, #12]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	e000ed00 	.word	0xe000ed00

08006fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <__NVIC_GetPriorityGrouping+0x18>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	f003 0307 	and.w	r3, r3, #7
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	e000ed00 	.word	0xe000ed00

08007000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800700a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	db0b      	blt.n	800702a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	f003 021f 	and.w	r2, r3, #31
 8007018:	4907      	ldr	r1, [pc, #28]	; (8007038 <__NVIC_EnableIRQ+0x38>)
 800701a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	2001      	movs	r0, #1
 8007022:	fa00 f202 	lsl.w	r2, r0, r2
 8007026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	e000e100 	.word	0xe000e100

0800703c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704c:	2b00      	cmp	r3, #0
 800704e:	db0a      	blt.n	8007066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	b2da      	uxtb	r2, r3
 8007054:	490c      	ldr	r1, [pc, #48]	; (8007088 <__NVIC_SetPriority+0x4c>)
 8007056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705a:	0112      	lsls	r2, r2, #4
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	440b      	add	r3, r1
 8007060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007064:	e00a      	b.n	800707c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	b2da      	uxtb	r2, r3
 800706a:	4908      	ldr	r1, [pc, #32]	; (800708c <__NVIC_SetPriority+0x50>)
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	3b04      	subs	r3, #4
 8007074:	0112      	lsls	r2, r2, #4
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	440b      	add	r3, r1
 800707a:	761a      	strb	r2, [r3, #24]
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	e000e100 	.word	0xe000e100
 800708c:	e000ed00 	.word	0xe000ed00

08007090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f1c3 0307 	rsb	r3, r3, #7
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	bf28      	it	cs
 80070ae:	2304      	movcs	r3, #4
 80070b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2b06      	cmp	r3, #6
 80070b8:	d902      	bls.n	80070c0 <NVIC_EncodePriority+0x30>
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	3b03      	subs	r3, #3
 80070be:	e000      	b.n	80070c2 <NVIC_EncodePriority+0x32>
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070c4:	f04f 32ff 	mov.w	r2, #4294967295
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43da      	mvns	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	401a      	ands	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070d8:	f04f 31ff 	mov.w	r1, #4294967295
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	43d9      	mvns	r1, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070e8:	4313      	orrs	r3, r2
         );
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3724      	adds	r7, #36	; 0x24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
	...

080070f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3b01      	subs	r3, #1
 8007104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007108:	d301      	bcc.n	800710e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800710a:	2301      	movs	r3, #1
 800710c:	e00f      	b.n	800712e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800710e:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <SysTick_Config+0x40>)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3b01      	subs	r3, #1
 8007114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007116:	210f      	movs	r1, #15
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	f7ff ff8e 	bl	800703c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <SysTick_Config+0x40>)
 8007122:	2200      	movs	r2, #0
 8007124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <SysTick_Config+0x40>)
 8007128:	2207      	movs	r2, #7
 800712a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	e000e010 	.word	0xe000e010

0800713c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff ff29 	bl	8006f9c <__NVIC_SetPriorityGrouping>
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	4603      	mov	r3, r0
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007164:	f7ff ff3e 	bl	8006fe4 <__NVIC_GetPriorityGrouping>
 8007168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	f7ff ff8e 	bl	8007090 <NVIC_EncodePriority>
 8007174:	4602      	mov	r2, r0
 8007176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff ff5d 	bl	800703c <__NVIC_SetPriority>
}
 8007182:	bf00      	nop
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	4603      	mov	r3, r0
 8007192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff ff31 	bl	8007000 <__NVIC_EnableIRQ>
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff ffa2 	bl	80070f8 <SysTick_Config>
 80071b4:	4603      	mov	r3, r0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80071cc:	f7ff fac4 	bl	8006758 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e099      	b.n	8007310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071fc:	e00f      	b.n	800721e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071fe:	f7ff faab 	bl	8006758 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b05      	cmp	r3, #5
 800720a:	d908      	bls.n	800721e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2203      	movs	r2, #3
 8007216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e078      	b.n	8007310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e8      	bne.n	80071fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4b38      	ldr	r3, [pc, #224]	; (8007318 <HAL_DMA_Init+0x158>)
 8007238:	4013      	ands	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800724a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b04      	cmp	r3, #4
 8007276:	d107      	bne.n	8007288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007280:	4313      	orrs	r3, r2
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d117      	bne.n	80072e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00e      	beq.n	80072e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa6f 	bl	80077a8 <DMA_CheckFifoParam>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2240      	movs	r2, #64	; 0x40
 80072d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80072de:	2301      	movs	r3, #1
 80072e0:	e016      	b.n	8007310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa26 	bl	800773c <DMA_CalcBaseAndBitshift>
 80072f0:	4603      	mov	r3, r0
 80072f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	223f      	movs	r2, #63	; 0x3f
 80072fa:	409a      	lsls	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	f010803f 	.word	0xf010803f

0800731c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007332:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_DMA_Start_IT+0x26>
 800733e:	2302      	movs	r3, #2
 8007340:	e040      	b.n	80073c4 <HAL_DMA_Start_IT+0xa8>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b01      	cmp	r3, #1
 8007354:	d12f      	bne.n	80073b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 f9b8 	bl	80076e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	223f      	movs	r2, #63	; 0x3f
 8007376:	409a      	lsls	r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0216 	orr.w	r2, r2, #22
 800738a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0208 	orr.w	r2, r2, #8
 80073a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e005      	b.n	80073c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80073be:	2302      	movs	r3, #2
 80073c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073d8:	4b92      	ldr	r3, [pc, #584]	; (8007624 <HAL_DMA_IRQHandler+0x258>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a92      	ldr	r2, [pc, #584]	; (8007628 <HAL_DMA_IRQHandler+0x25c>)
 80073de:	fba2 2303 	umull	r2, r3, r2, r3
 80073e2:	0a9b      	lsrs	r3, r3, #10
 80073e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	2208      	movs	r2, #8
 80073f8:	409a      	lsls	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01a      	beq.n	8007438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d013      	beq.n	8007438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0204 	bic.w	r2, r2, #4
 800741e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007424:	2208      	movs	r2, #8
 8007426:	409a      	lsls	r2, r3
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4013      	ands	r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d012      	beq.n	800746e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745a:	2201      	movs	r2, #1
 800745c:	409a      	lsls	r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f043 0202 	orr.w	r2, r3, #2
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007472:	2204      	movs	r2, #4
 8007474:	409a      	lsls	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4013      	ands	r3, r2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d012      	beq.n	80074a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007490:	2204      	movs	r2, #4
 8007492:	409a      	lsls	r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749c:	f043 0204 	orr.w	r2, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a8:	2210      	movs	r2, #16
 80074aa:	409a      	lsls	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d043      	beq.n	800753c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d03c      	beq.n	800753c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c6:	2210      	movs	r2, #16
 80074c8:	409a      	lsls	r2, r3
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d018      	beq.n	800750e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d108      	bne.n	80074fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d024      	beq.n	800753c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	e01f      	b.n	800753c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01b      	beq.n	800753c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
 800750c:	e016      	b.n	800753c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0208 	bic.w	r2, r2, #8
 800752a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007540:	2220      	movs	r2, #32
 8007542:	409a      	lsls	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 808e 	beq.w	800766a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0310 	and.w	r3, r3, #16
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8086 	beq.w	800766a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007562:	2220      	movs	r2, #32
 8007564:	409a      	lsls	r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b05      	cmp	r3, #5
 8007574:	d136      	bne.n	80075e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0216 	bic.w	r2, r2, #22
 8007584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <HAL_DMA_IRQHandler+0x1da>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d007      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0208 	bic.w	r2, r2, #8
 80075b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	223f      	movs	r2, #63	; 0x3f
 80075bc:	409a      	lsls	r2, r3
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d07d      	beq.n	80076d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
        }
        return;
 80075e2:	e078      	b.n	80076d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01c      	beq.n	800762c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d108      	bne.n	8007612 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	2b00      	cmp	r3, #0
 8007606:	d030      	beq.n	800766a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
 8007610:	e02b      	b.n	800766a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d027      	beq.n	800766a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
 8007622:	e022      	b.n	800766a <HAL_DMA_IRQHandler+0x29e>
 8007624:	20000034 	.word	0x20000034
 8007628:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10f      	bne.n	800765a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0210 	bic.w	r2, r2, #16
 8007648:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	2b00      	cmp	r3, #0
 8007670:	d032      	beq.n	80076d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d022      	beq.n	80076c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2205      	movs	r2, #5
 8007682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	3301      	adds	r3, #1
 800769a:	60bb      	str	r3, [r7, #8]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d307      	bcc.n	80076b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f2      	bne.n	8007696 <HAL_DMA_IRQHandler+0x2ca>
 80076b0:	e000      	b.n	80076b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80076b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
 80076d4:	e000      	b.n	80076d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80076d6:	bf00      	nop
    }
  }
}
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop

080076e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d108      	bne.n	8007720 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800771e:	e007      	b.n	8007730 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
}
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	3b10      	subs	r3, #16
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <DMA_CalcBaseAndBitshift+0x64>)
 800774e:	fba2 2303 	umull	r2, r3, r2, r3
 8007752:	091b      	lsrs	r3, r3, #4
 8007754:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007756:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <DMA_CalcBaseAndBitshift+0x68>)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b03      	cmp	r3, #3
 8007768:	d909      	bls.n	800777e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	1d1a      	adds	r2, r3, #4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	659a      	str	r2, [r3, #88]	; 0x58
 800777c:	e007      	b.n	800778e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	aaaaaaab 	.word	0xaaaaaaab
 80077a4:	0800f200 	.word	0x0800f200

080077a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d11f      	bne.n	8007802 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d855      	bhi.n	8007874 <DMA_CheckFifoParam+0xcc>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <DMA_CheckFifoParam+0x28>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077f3 	.word	0x080077f3
 80077d8:	080077e1 	.word	0x080077e1
 80077dc:	08007875 	.word	0x08007875
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d045      	beq.n	8007878 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077f0:	e042      	b.n	8007878 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077fa:	d13f      	bne.n	800787c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007800:	e03c      	b.n	800787c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780a:	d121      	bne.n	8007850 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d836      	bhi.n	8007880 <DMA_CheckFifoParam+0xd8>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <DMA_CheckFifoParam+0x70>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007829 	.word	0x08007829
 800781c:	0800782f 	.word	0x0800782f
 8007820:	08007829 	.word	0x08007829
 8007824:	08007841 	.word	0x08007841
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
      break;
 800782c:	e02f      	b.n	800788e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d024      	beq.n	8007884 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800783e:	e021      	b.n	8007884 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007848:	d11e      	bne.n	8007888 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800784e:	e01b      	b.n	8007888 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d902      	bls.n	800785c <DMA_CheckFifoParam+0xb4>
 8007856:	2b03      	cmp	r3, #3
 8007858:	d003      	beq.n	8007862 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800785a:	e018      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
      break;
 8007860:	e015      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00e      	beq.n	800788c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
      break;
 8007872:	e00b      	b.n	800788c <DMA_CheckFifoParam+0xe4>
      break;
 8007874:	bf00      	nop
 8007876:	e00a      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      break;
 8007878:	bf00      	nop
 800787a:	e008      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      break;
 800787c:	bf00      	nop
 800787e:	e006      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      break;
 8007880:	bf00      	nop
 8007882:	e004      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      break;
 8007884:	bf00      	nop
 8007886:	e002      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      break;   
 8007888:	bf00      	nop
 800788a:	e000      	b.n	800788e <DMA_CheckFifoParam+0xe6>
      break;
 800788c:	bf00      	nop
    }
  } 
  
  return status; 
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_FLASH_Unlock+0x38>)
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da0b      	bge.n	80078c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <HAL_FLASH_Unlock+0x38>)
 80078b0:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <HAL_FLASH_Unlock+0x3c>)
 80078b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <HAL_FLASH_Unlock+0x38>)
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <HAL_FLASH_Unlock+0x40>)
 80078b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_FLASH_Unlock+0x38>)
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	da01      	bge.n	80078c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80078c6:	79fb      	ldrb	r3, [r7, #7]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40023c00 	.word	0x40023c00
 80078d8:	45670123 	.word	0x45670123
 80078dc:	cdef89ab 	.word	0xcdef89ab

080078e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <HAL_FLASH_Lock+0x1c>)
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	4a04      	ldr	r2, [pc, #16]	; (80078fc <HAL_FLASH_Lock+0x1c>)
 80078ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40023c00 	.word	0x40023c00

08007900 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <FLASH_WaitForLastOperation+0x78>)
 800790e:	2200      	movs	r2, #0
 8007910:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007912:	f7fe ff21 	bl	8006758 <HAL_GetTick>
 8007916:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007918:	e010      	b.n	800793c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d00c      	beq.n	800793c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <FLASH_WaitForLastOperation+0x38>
 8007928:	f7fe ff16 	bl	8006758 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d201      	bcs.n	800793c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e019      	b.n	8007970 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800793c:	4b0f      	ldr	r3, [pc, #60]	; (800797c <FLASH_WaitForLastOperation+0x7c>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e8      	bne.n	800791a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <FLASH_WaitForLastOperation+0x7c>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <FLASH_WaitForLastOperation+0x7c>)
 8007956:	2201      	movs	r2, #1
 8007958:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <FLASH_WaitForLastOperation+0x7c>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007966:	f000 f80b 	bl	8007980 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
  
}  
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	2001f4bc 	.word	0x2001f4bc
 800797c:	40023c00 	.word	0x40023c00

08007980 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f043 0310 	orr.w	r3, r3, #16
 8007998:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 800799a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800799c:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 800799e:	2210      	movs	r2, #16
 80079a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d008      	beq.n	80079c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f043 0308 	orr.w	r3, r3, #8
 80079b6:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 80079b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80079ba:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079bc:	2220      	movs	r2, #32
 80079be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80079c0:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80079cc:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f043 0304 	orr.w	r3, r3, #4
 80079d4:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 80079d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079da:	2240      	movs	r2, #64	; 0x40
 80079dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80079de:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80079ea:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f043 0302 	orr.w	r3, r3, #2
 80079f2:	4a0d      	ldr	r2, [pc, #52]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 80079f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079f8:	2280      	movs	r2, #128	; 0x80
 80079fa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007a08:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f043 0320 	orr.w	r3, r3, #32
 8007a10:	4a05      	ldr	r2, [pc, #20]	; (8007a28 <FLASH_SetErrorCode+0xa8>)
 8007a12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <FLASH_SetErrorCode+0xa4>)
 8007a16:	2202      	movs	r2, #2
 8007a18:	60da      	str	r2, [r3, #12]
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40023c00 	.word	0x40023c00
 8007a28:	2001f4bc 	.word	0x2001f4bc

08007a2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a3e:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <HAL_FLASHEx_Erase+0xd8>)
 8007a40:	7e1b      	ldrb	r3, [r3, #24]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_FLASHEx_Erase+0x1e>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e058      	b.n	8007afc <HAL_FLASHEx_Erase+0xd0>
 8007a4a:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <HAL_FLASHEx_Erase+0xd8>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a54:	f7ff ff54 	bl	8007900 <FLASH_WaitForLastOperation>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d148      	bne.n	8007af4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	f04f 32ff 	mov.w	r2, #4294967295
 8007a68:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d115      	bne.n	8007a9e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f000 f844 	bl	8007b0c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a88:	f7ff ff3a 	bl	8007900 <FLASH_WaitForLastOperation>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007a90:	4b1d      	ldr	r3, [pc, #116]	; (8007b08 <HAL_FLASHEx_Erase+0xdc>)
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	4a1c      	ldr	r2, [pc, #112]	; (8007b08 <HAL_FLASHEx_Erase+0xdc>)
 8007a96:	f023 0304 	bic.w	r3, r3, #4
 8007a9a:	6113      	str	r3, [r2, #16]
 8007a9c:	e028      	b.n	8007af0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	60bb      	str	r3, [r7, #8]
 8007aa4:	e01c      	b.n	8007ae0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	4619      	mov	r1, r3
 8007aae:	68b8      	ldr	r0, [r7, #8]
 8007ab0:	f000 f850 	bl	8007b54 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ab4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ab8:	f7ff ff22 	bl	8007900 <FLASH_WaitForLastOperation>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <HAL_FLASHEx_Erase+0xdc>)
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	4a10      	ldr	r2, [pc, #64]	; (8007b08 <HAL_FLASHEx_Erase+0xdc>)
 8007ac6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007aca:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	601a      	str	r2, [r3, #0]
          break;
 8007ad8:	e00a      	b.n	8007af0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4413      	add	r3, r2
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d3da      	bcc.n	8007aa6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007af0:	f000 f878 	bl	8007be4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007af4:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <HAL_FLASHEx_Erase+0xd8>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	761a      	strb	r2, [r3, #24]

  return status;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	2001f4bc 	.word	0x2001f4bc
 8007b08:	40023c00 	.word	0x40023c00

08007b0c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <FLASH_MassErase+0x44>)
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	4a0c      	ldr	r2, [pc, #48]	; (8007b50 <FLASH_MassErase+0x44>)
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <FLASH_MassErase+0x44>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <FLASH_MassErase+0x44>)
 8007b2a:	f043 0304 	orr.w	r3, r3, #4
 8007b2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <FLASH_MassErase+0x44>)
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	4a05      	ldr	r2, [pc, #20]	; (8007b50 <FLASH_MassErase+0x44>)
 8007b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b40:	6113      	str	r3, [r2, #16]
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40023c00 	.word	0x40023c00

08007b54 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e010      	b.n	8007b92 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d103      	bne.n	8007b7e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e009      	b.n	8007b92 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d103      	bne.n	8007b8c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	e002      	b.n	8007b92 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007b8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b92:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	4a12      	ldr	r2, [pc, #72]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007b9e:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	490f      	ldr	r1, [pc, #60]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	4a0c      	ldr	r2, [pc, #48]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007bb0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007bb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	4a07      	ldr	r2, [pc, #28]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007bc2:	f043 0302 	orr.w	r3, r3, #2
 8007bc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <FLASH_Erase_Sector+0x8c>)
 8007bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd2:	6113      	str	r3, [r2, #16]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	40023c00 	.word	0x40023c00

08007be4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d017      	beq.n	8007c24 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007bf4:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a1c      	ldr	r2, [pc, #112]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007bfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bfe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007c00:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c16:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c18:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c22:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007c24:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d017      	beq.n	8007c60 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007c30:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a0d      	ldr	r2, [pc, #52]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c3a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007c3c:	4b0b      	ldr	r3, [pc, #44]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	4b08      	ldr	r3, [pc, #32]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a07      	ldr	r2, [pc, #28]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a04      	ldr	r2, [pc, #16]	; (8007c6c <FLASH_FlushCaches+0x88>)
 8007c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c5e:	6013      	str	r3, [r2, #0]
  }
}
 8007c60:	bf00      	nop
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40023c00 	.word	0x40023c00

08007c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	e16b      	b.n	8007f64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	f040 815a 	bne.w	8007f5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d00b      	beq.n	8007cca <HAL_GPIO_Init+0x5a>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d007      	beq.n	8007cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cbe:	2b11      	cmp	r3, #17
 8007cc0:	d003      	beq.n	8007cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b12      	cmp	r3, #18
 8007cc8:	d130      	bne.n	8007d2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	2203      	movs	r2, #3
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d00:	2201      	movs	r2, #1
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	091b      	lsrs	r3, r3, #4
 8007d16:	f003 0201 	and.w	r2, r3, #1
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	2203      	movs	r2, #3
 8007d38:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	4013      	ands	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d003      	beq.n	8007d6c <HAL_GPIO_Init+0xfc>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b12      	cmp	r3, #18
 8007d6a:	d123      	bne.n	8007db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	08da      	lsrs	r2, r3, #3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3208      	adds	r2, #8
 8007d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	220f      	movs	r2, #15
 8007d84:	fa02 f303 	lsl.w	r3, r2, r3
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	08da      	lsrs	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3208      	adds	r2, #8
 8007dae:	69b9      	ldr	r1, [r7, #24]
 8007db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f003 0203 	and.w	r2, r3, #3
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80b4 	beq.w	8007f5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	4b5f      	ldr	r3, [pc, #380]	; (8007f78 <HAL_GPIO_Init+0x308>)
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfe:	4a5e      	ldr	r2, [pc, #376]	; (8007f78 <HAL_GPIO_Init+0x308>)
 8007e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e04:	6453      	str	r3, [r2, #68]	; 0x44
 8007e06:	4b5c      	ldr	r3, [pc, #368]	; (8007f78 <HAL_GPIO_Init+0x308>)
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e12:	4a5a      	ldr	r2, [pc, #360]	; (8007f7c <HAL_GPIO_Init+0x30c>)
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	089b      	lsrs	r3, r3, #2
 8007e18:	3302      	adds	r3, #2
 8007e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	220f      	movs	r2, #15
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	43db      	mvns	r3, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4013      	ands	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a51      	ldr	r2, [pc, #324]	; (8007f80 <HAL_GPIO_Init+0x310>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d02b      	beq.n	8007e96 <HAL_GPIO_Init+0x226>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a50      	ldr	r2, [pc, #320]	; (8007f84 <HAL_GPIO_Init+0x314>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d025      	beq.n	8007e92 <HAL_GPIO_Init+0x222>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a4f      	ldr	r2, [pc, #316]	; (8007f88 <HAL_GPIO_Init+0x318>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d01f      	beq.n	8007e8e <HAL_GPIO_Init+0x21e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a4e      	ldr	r2, [pc, #312]	; (8007f8c <HAL_GPIO_Init+0x31c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d019      	beq.n	8007e8a <HAL_GPIO_Init+0x21a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a4d      	ldr	r2, [pc, #308]	; (8007f90 <HAL_GPIO_Init+0x320>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <HAL_GPIO_Init+0x216>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a4c      	ldr	r2, [pc, #304]	; (8007f94 <HAL_GPIO_Init+0x324>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00d      	beq.n	8007e82 <HAL_GPIO_Init+0x212>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a4b      	ldr	r2, [pc, #300]	; (8007f98 <HAL_GPIO_Init+0x328>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d007      	beq.n	8007e7e <HAL_GPIO_Init+0x20e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a4a      	ldr	r2, [pc, #296]	; (8007f9c <HAL_GPIO_Init+0x32c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d101      	bne.n	8007e7a <HAL_GPIO_Init+0x20a>
 8007e76:	2307      	movs	r3, #7
 8007e78:	e00e      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	e00c      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e7e:	2306      	movs	r3, #6
 8007e80:	e00a      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e82:	2305      	movs	r3, #5
 8007e84:	e008      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e86:	2304      	movs	r3, #4
 8007e88:	e006      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e004      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e002      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <HAL_GPIO_Init+0x228>
 8007e96:	2300      	movs	r3, #0
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	f002 0203 	and.w	r2, r2, #3
 8007e9e:	0092      	lsls	r2, r2, #2
 8007ea0:	4093      	lsls	r3, r2
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ea8:	4934      	ldr	r1, [pc, #208]	; (8007f7c <HAL_GPIO_Init+0x30c>)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	089b      	lsrs	r3, r3, #2
 8007eae:	3302      	adds	r3, #2
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007eb6:	4b3a      	ldr	r3, [pc, #232]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eda:	4a31      	ldr	r2, [pc, #196]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ee0:	4b2f      	ldr	r3, [pc, #188]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4013      	ands	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f04:	4a26      	ldr	r2, [pc, #152]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f0a:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	43db      	mvns	r3, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4013      	ands	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f34:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	4013      	ands	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f58:	4a11      	ldr	r2, [pc, #68]	; (8007fa0 <HAL_GPIO_Init+0x330>)
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3301      	adds	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	f67f ae90 	bls.w	8007c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	3724      	adds	r7, #36	; 0x24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	40013800 	.word	0x40013800
 8007f80:	40020000 	.word	0x40020000
 8007f84:	40020400 	.word	0x40020400
 8007f88:	40020800 	.word	0x40020800
 8007f8c:	40020c00 	.word	0x40020c00
 8007f90:	40021000 	.word	0x40021000
 8007f94:	40021400 	.word	0x40021400
 8007f98:	40021800 	.word	0x40021800
 8007f9c:	40021c00 	.word	0x40021c00
 8007fa0:	40013c00 	.word	0x40013c00

08007fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
 8007fc0:	e001      	b.n	8007fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fe4:	787b      	ldrb	r3, [r7, #1]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fea:	887a      	ldrh	r2, [r7, #2]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ff0:	e003      	b.n	8007ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	041a      	lsls	r2, r3, #16
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	619a      	str	r2, [r3, #24]
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e11f      	b.n	800825a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fd ff96 	bl	8005f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2224      	movs	r2, #36	; 0x24
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0201 	bic.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800805a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800806a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800806c:	f000 fd18 	bl	8008aa0 <HAL_RCC_GetPCLK1Freq>
 8008070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4a7b      	ldr	r2, [pc, #492]	; (8008264 <HAL_I2C_Init+0x25c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d807      	bhi.n	800808c <HAL_I2C_Init+0x84>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4a7a      	ldr	r2, [pc, #488]	; (8008268 <HAL_I2C_Init+0x260>)
 8008080:	4293      	cmp	r3, r2
 8008082:	bf94      	ite	ls
 8008084:	2301      	movls	r3, #1
 8008086:	2300      	movhi	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	e006      	b.n	800809a <HAL_I2C_Init+0x92>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a77      	ldr	r2, [pc, #476]	; (800826c <HAL_I2C_Init+0x264>)
 8008090:	4293      	cmp	r3, r2
 8008092:	bf94      	ite	ls
 8008094:	2301      	movls	r3, #1
 8008096:	2300      	movhi	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e0db      	b.n	800825a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4a72      	ldr	r2, [pc, #456]	; (8008270 <HAL_I2C_Init+0x268>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	0c9b      	lsrs	r3, r3, #18
 80080ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4a64      	ldr	r2, [pc, #400]	; (8008264 <HAL_I2C_Init+0x25c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d802      	bhi.n	80080dc <HAL_I2C_Init+0xd4>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	3301      	adds	r3, #1
 80080da:	e009      	b.n	80080f0 <HAL_I2C_Init+0xe8>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
 80080e6:	4a63      	ldr	r2, [pc, #396]	; (8008274 <HAL_I2C_Init+0x26c>)
 80080e8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ec:	099b      	lsrs	r3, r3, #6
 80080ee:	3301      	adds	r3, #1
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4956      	ldr	r1, [pc, #344]	; (8008264 <HAL_I2C_Init+0x25c>)
 800810c:	428b      	cmp	r3, r1
 800810e:	d80d      	bhi.n	800812c <HAL_I2C_Init+0x124>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1e59      	subs	r1, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	fbb1 f3f3 	udiv	r3, r1, r3
 800811e:	3301      	adds	r3, #1
 8008120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008124:	2b04      	cmp	r3, #4
 8008126:	bf38      	it	cc
 8008128:	2304      	movcc	r3, #4
 800812a:	e04f      	b.n	80081cc <HAL_I2C_Init+0x1c4>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d111      	bne.n	8008158 <HAL_I2C_Init+0x150>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	1e58      	subs	r0, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6859      	ldr	r1, [r3, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	440b      	add	r3, r1
 8008142:	fbb0 f3f3 	udiv	r3, r0, r3
 8008146:	3301      	adds	r3, #1
 8008148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf0c      	ite	eq
 8008150:	2301      	moveq	r3, #1
 8008152:	2300      	movne	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	e012      	b.n	800817e <HAL_I2C_Init+0x176>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	1e58      	subs	r0, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6859      	ldr	r1, [r3, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	0099      	lsls	r1, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	fbb0 f3f3 	udiv	r3, r0, r3
 800816e:	3301      	adds	r3, #1
 8008170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008174:	2b00      	cmp	r3, #0
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <HAL_I2C_Init+0x17e>
 8008182:	2301      	movs	r3, #1
 8008184:	e022      	b.n	80081cc <HAL_I2C_Init+0x1c4>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10e      	bne.n	80081ac <HAL_I2C_Init+0x1a4>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1e58      	subs	r0, r3, #1
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6859      	ldr	r1, [r3, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	440b      	add	r3, r1
 800819c:	fbb0 f3f3 	udiv	r3, r0, r3
 80081a0:	3301      	adds	r3, #1
 80081a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081aa:	e00f      	b.n	80081cc <HAL_I2C_Init+0x1c4>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	1e58      	subs	r0, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6859      	ldr	r1, [r3, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	0099      	lsls	r1, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	fbb0 f3f3 	udiv	r3, r0, r3
 80081c2:	3301      	adds	r3, #1
 80081c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	6809      	ldr	r1, [r1, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6911      	ldr	r1, [r2, #16]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	68d2      	ldr	r2, [r2, #12]
 8008206:	4311      	orrs	r1, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	430b      	orrs	r3, r1
 800820e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695a      	ldr	r2, [r3, #20]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2220      	movs	r2, #32
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	000186a0 	.word	0x000186a0
 8008268:	001e847f 	.word	0x001e847f
 800826c:	003d08ff 	.word	0x003d08ff
 8008270:	431bde83 	.word	0x431bde83
 8008274:	10624dd3 	.word	0x10624dd3

08008278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e25b      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d075      	beq.n	8008382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008296:	4ba3      	ldr	r3, [pc, #652]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 030c 	and.w	r3, r3, #12
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00c      	beq.n	80082bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082a2:	4ba0      	ldr	r3, [pc, #640]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	d112      	bne.n	80082d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082ae:	4b9d      	ldr	r3, [pc, #628]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082ba:	d10b      	bne.n	80082d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082bc:	4b99      	ldr	r3, [pc, #612]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d05b      	beq.n	8008380 <HAL_RCC_OscConfig+0x108>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d157      	bne.n	8008380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e236      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082dc:	d106      	bne.n	80082ec <HAL_RCC_OscConfig+0x74>
 80082de:	4b91      	ldr	r3, [pc, #580]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a90      	ldr	r2, [pc, #576]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e01d      	b.n	8008328 <HAL_RCC_OscConfig+0xb0>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082f4:	d10c      	bne.n	8008310 <HAL_RCC_OscConfig+0x98>
 80082f6:	4b8b      	ldr	r3, [pc, #556]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a8a      	ldr	r2, [pc, #552]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	4b88      	ldr	r3, [pc, #544]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a87      	ldr	r2, [pc, #540]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	e00b      	b.n	8008328 <HAL_RCC_OscConfig+0xb0>
 8008310:	4b84      	ldr	r3, [pc, #528]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a83      	ldr	r2, [pc, #524]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	4b81      	ldr	r3, [pc, #516]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a80      	ldr	r2, [pc, #512]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d013      	beq.n	8008358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008330:	f7fe fa12 	bl	8006758 <HAL_GetTick>
 8008334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008338:	f7fe fa0e 	bl	8006758 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b64      	cmp	r3, #100	; 0x64
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e1fb      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800834a:	4b76      	ldr	r3, [pc, #472]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f0      	beq.n	8008338 <HAL_RCC_OscConfig+0xc0>
 8008356:	e014      	b.n	8008382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008358:	f7fe f9fe 	bl	8006758 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008360:	f7fe f9fa 	bl	8006758 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b64      	cmp	r3, #100	; 0x64
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e1e7      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008372:	4b6c      	ldr	r3, [pc, #432]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f0      	bne.n	8008360 <HAL_RCC_OscConfig+0xe8>
 800837e:	e000      	b.n	8008382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d063      	beq.n	8008456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800838e:	4b65      	ldr	r3, [pc, #404]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 030c 	and.w	r3, r3, #12
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00b      	beq.n	80083b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800839a:	4b62      	ldr	r3, [pc, #392]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d11c      	bne.n	80083e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083a6:	4b5f      	ldr	r3, [pc, #380]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d116      	bne.n	80083e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083b2:	4b5c      	ldr	r3, [pc, #368]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <HAL_RCC_OscConfig+0x152>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d001      	beq.n	80083ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e1bb      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ca:	4b56      	ldr	r3, [pc, #344]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4952      	ldr	r1, [pc, #328]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083de:	e03a      	b.n	8008456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d020      	beq.n	800842a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083e8:	4b4f      	ldr	r3, [pc, #316]	; (8008528 <HAL_RCC_OscConfig+0x2b0>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ee:	f7fe f9b3 	bl	8006758 <HAL_GetTick>
 80083f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f4:	e008      	b.n	8008408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083f6:	f7fe f9af 	bl	8006758 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e19c      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008408:	4b46      	ldr	r3, [pc, #280]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008414:	4b43      	ldr	r3, [pc, #268]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4940      	ldr	r1, [pc, #256]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 8008424:	4313      	orrs	r3, r2
 8008426:	600b      	str	r3, [r1, #0]
 8008428:	e015      	b.n	8008456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800842a:	4b3f      	ldr	r3, [pc, #252]	; (8008528 <HAL_RCC_OscConfig+0x2b0>)
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fe f992 	bl	8006758 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008438:	f7fe f98e 	bl	8006758 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e17b      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800844a:	4b36      	ldr	r3, [pc, #216]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f0      	bne.n	8008438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d030      	beq.n	80084c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d016      	beq.n	8008498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800846a:	4b30      	ldr	r3, [pc, #192]	; (800852c <HAL_RCC_OscConfig+0x2b4>)
 800846c:	2201      	movs	r2, #1
 800846e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fe f972 	bl	8006758 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008478:	f7fe f96e 	bl	8006758 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e15b      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800848a:	4b26      	ldr	r3, [pc, #152]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 800848c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f0      	beq.n	8008478 <HAL_RCC_OscConfig+0x200>
 8008496:	e015      	b.n	80084c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008498:	4b24      	ldr	r3, [pc, #144]	; (800852c <HAL_RCC_OscConfig+0x2b4>)
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800849e:	f7fe f95b 	bl	8006758 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084a6:	f7fe f957 	bl	8006758 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e144      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80084ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1f0      	bne.n	80084a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80a0 	beq.w	8008612 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10f      	bne.n	8008502 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	4b0f      	ldr	r3, [pc, #60]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	4a0e      	ldr	r2, [pc, #56]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80084ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f0:	6413      	str	r3, [r2, #64]	; 0x40
 80084f2:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <HAL_RCC_OscConfig+0x2ac>)
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fa:	60bb      	str	r3, [r7, #8]
 80084fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084fe:	2301      	movs	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008502:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <HAL_RCC_OscConfig+0x2b8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850a:	2b00      	cmp	r3, #0
 800850c:	d121      	bne.n	8008552 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <HAL_RCC_OscConfig+0x2b8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a07      	ldr	r2, [pc, #28]	; (8008530 <HAL_RCC_OscConfig+0x2b8>)
 8008514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800851a:	f7fe f91d 	bl	8006758 <HAL_GetTick>
 800851e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008520:	e011      	b.n	8008546 <HAL_RCC_OscConfig+0x2ce>
 8008522:	bf00      	nop
 8008524:	40023800 	.word	0x40023800
 8008528:	42470000 	.word	0x42470000
 800852c:	42470e80 	.word	0x42470e80
 8008530:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008534:	f7fe f910 	bl	8006758 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e0fd      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008546:	4b81      	ldr	r3, [pc, #516]	; (800874c <HAL_RCC_OscConfig+0x4d4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d106      	bne.n	8008568 <HAL_RCC_OscConfig+0x2f0>
 800855a:	4b7d      	ldr	r3, [pc, #500]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	4a7c      	ldr	r2, [pc, #496]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	6713      	str	r3, [r2, #112]	; 0x70
 8008566:	e01c      	b.n	80085a2 <HAL_RCC_OscConfig+0x32a>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b05      	cmp	r3, #5
 800856e:	d10c      	bne.n	800858a <HAL_RCC_OscConfig+0x312>
 8008570:	4b77      	ldr	r3, [pc, #476]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008574:	4a76      	ldr	r2, [pc, #472]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008576:	f043 0304 	orr.w	r3, r3, #4
 800857a:	6713      	str	r3, [r2, #112]	; 0x70
 800857c:	4b74      	ldr	r3, [pc, #464]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 800857e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008580:	4a73      	ldr	r2, [pc, #460]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	6713      	str	r3, [r2, #112]	; 0x70
 8008588:	e00b      	b.n	80085a2 <HAL_RCC_OscConfig+0x32a>
 800858a:	4b71      	ldr	r3, [pc, #452]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	4a70      	ldr	r2, [pc, #448]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	6713      	str	r3, [r2, #112]	; 0x70
 8008596:	4b6e      	ldr	r3, [pc, #440]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859a:	4a6d      	ldr	r2, [pc, #436]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 800859c:	f023 0304 	bic.w	r3, r3, #4
 80085a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d015      	beq.n	80085d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085aa:	f7fe f8d5 	bl	8006758 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b0:	e00a      	b.n	80085c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085b2:	f7fe f8d1 	bl	8006758 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e0bc      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085c8:	4b61      	ldr	r3, [pc, #388]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0ee      	beq.n	80085b2 <HAL_RCC_OscConfig+0x33a>
 80085d4:	e014      	b.n	8008600 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085d6:	f7fe f8bf 	bl	8006758 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085dc:	e00a      	b.n	80085f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085de:	f7fe f8bb 	bl	8006758 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d901      	bls.n	80085f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e0a6      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085f4:	4b56      	ldr	r3, [pc, #344]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1ee      	bne.n	80085de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d105      	bne.n	8008612 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008606:	4b52      	ldr	r3, [pc, #328]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	4a51      	ldr	r2, [pc, #324]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 800860c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 8092 	beq.w	8008740 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800861c:	4b4c      	ldr	r3, [pc, #304]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 030c 	and.w	r3, r3, #12
 8008624:	2b08      	cmp	r3, #8
 8008626:	d05c      	beq.n	80086e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d141      	bne.n	80086b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008630:	4b48      	ldr	r3, [pc, #288]	; (8008754 <HAL_RCC_OscConfig+0x4dc>)
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008636:	f7fe f88f 	bl	8006758 <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800863c:	e008      	b.n	8008650 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800863e:	f7fe f88b 	bl	8006758 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e078      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008650:	4b3f      	ldr	r3, [pc, #252]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f0      	bne.n	800863e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	019b      	lsls	r3, r3, #6
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	085b      	lsrs	r3, r3, #1
 8008674:	3b01      	subs	r3, #1
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	061b      	lsls	r3, r3, #24
 8008680:	4933      	ldr	r1, [pc, #204]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 8008682:	4313      	orrs	r3, r2
 8008684:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008686:	4b33      	ldr	r3, [pc, #204]	; (8008754 <HAL_RCC_OscConfig+0x4dc>)
 8008688:	2201      	movs	r2, #1
 800868a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868c:	f7fe f864 	bl	8006758 <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008694:	f7fe f860 	bl	8006758 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e04d      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086a6:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0f0      	beq.n	8008694 <HAL_RCC_OscConfig+0x41c>
 80086b2:	e045      	b.n	8008740 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086b4:	4b27      	ldr	r3, [pc, #156]	; (8008754 <HAL_RCC_OscConfig+0x4dc>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ba:	f7fe f84d 	bl	8006758 <HAL_GetTick>
 80086be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c0:	e008      	b.n	80086d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086c2:	f7fe f849 	bl	8006758 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e036      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086d4:	4b1e      	ldr	r3, [pc, #120]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f0      	bne.n	80086c2 <HAL_RCC_OscConfig+0x44a>
 80086e0:	e02e      	b.n	8008740 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d101      	bne.n	80086ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e029      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086ee:	4b18      	ldr	r3, [pc, #96]	; (8008750 <HAL_RCC_OscConfig+0x4d8>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d11c      	bne.n	800873c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800870c:	429a      	cmp	r2, r3
 800870e:	d115      	bne.n	800873c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008716:	4013      	ands	r3, r2
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800871c:	4293      	cmp	r3, r2
 800871e:	d10d      	bne.n	800873c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800872a:	429a      	cmp	r2, r3
 800872c:	d106      	bne.n	800873c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008738:	429a      	cmp	r2, r3
 800873a:	d001      	beq.n	8008740 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	40007000 	.word	0x40007000
 8008750:	40023800 	.word	0x40023800
 8008754:	42470060 	.word	0x42470060

08008758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e0cc      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800876c:	4b68      	ldr	r3, [pc, #416]	; (8008910 <HAL_RCC_ClockConfig+0x1b8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 030f 	and.w	r3, r3, #15
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d90c      	bls.n	8008794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800877a:	4b65      	ldr	r3, [pc, #404]	; (8008910 <HAL_RCC_ClockConfig+0x1b8>)
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008782:	4b63      	ldr	r3, [pc, #396]	; (8008910 <HAL_RCC_ClockConfig+0x1b8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d001      	beq.n	8008794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e0b8      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d020      	beq.n	80087e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087ac:	4b59      	ldr	r3, [pc, #356]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4a58      	ldr	r2, [pc, #352]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087c4:	4b53      	ldr	r3, [pc, #332]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	4a52      	ldr	r2, [pc, #328]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d0:	4b50      	ldr	r3, [pc, #320]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	494d      	ldr	r1, [pc, #308]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d044      	beq.n	8008878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d107      	bne.n	8008806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087f6:	4b47      	ldr	r3, [pc, #284]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d119      	bne.n	8008836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e07f      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d003      	beq.n	8008816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008812:	2b03      	cmp	r3, #3
 8008814:	d107      	bne.n	8008826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008816:	4b3f      	ldr	r3, [pc, #252]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e06f      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008826:	4b3b      	ldr	r3, [pc, #236]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e067      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008836:	4b37      	ldr	r3, [pc, #220]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f023 0203 	bic.w	r2, r3, #3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	4934      	ldr	r1, [pc, #208]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 8008844:	4313      	orrs	r3, r2
 8008846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008848:	f7fd ff86 	bl	8006758 <HAL_GetTick>
 800884c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800884e:	e00a      	b.n	8008866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008850:	f7fd ff82 	bl	8006758 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	f241 3288 	movw	r2, #5000	; 0x1388
 800885e:	4293      	cmp	r3, r2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e04f      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008866:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 020c 	and.w	r2, r3, #12
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	429a      	cmp	r2, r3
 8008876:	d1eb      	bne.n	8008850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <HAL_RCC_ClockConfig+0x1b8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d20c      	bcs.n	80088a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008886:	4b22      	ldr	r3, [pc, #136]	; (8008910 <HAL_RCC_ClockConfig+0x1b8>)
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800888e:	4b20      	ldr	r3, [pc, #128]	; (8008910 <HAL_RCC_ClockConfig+0x1b8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e032      	b.n	8008906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088ac:	4b19      	ldr	r3, [pc, #100]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	4916      	ldr	r1, [pc, #88]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088ca:	4b12      	ldr	r3, [pc, #72]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	490e      	ldr	r1, [pc, #56]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088de:	f000 f821 	bl	8008924 <HAL_RCC_GetSysClockFreq>
 80088e2:	4601      	mov	r1, r0
 80088e4:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <HAL_RCC_ClockConfig+0x1bc>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	091b      	lsrs	r3, r3, #4
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	4a0a      	ldr	r2, [pc, #40]	; (8008918 <HAL_RCC_ClockConfig+0x1c0>)
 80088f0:	5cd3      	ldrb	r3, [r2, r3]
 80088f2:	fa21 f303 	lsr.w	r3, r1, r3
 80088f6:	4a09      	ldr	r2, [pc, #36]	; (800891c <HAL_RCC_ClockConfig+0x1c4>)
 80088f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <HAL_RCC_ClockConfig+0x1c8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fd fee6 	bl	80066d0 <HAL_InitTick>

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	40023c00 	.word	0x40023c00
 8008914:	40023800 	.word	0x40023800
 8008918:	0800f1e8 	.word	0x0800f1e8
 800891c:	20000034 	.word	0x20000034
 8008920:	20000038 	.word	0x20000038

08008924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	2300      	movs	r3, #0
 8008934:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800893a:	4b50      	ldr	r3, [pc, #320]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x158>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 030c 	and.w	r3, r3, #12
 8008942:	2b04      	cmp	r3, #4
 8008944:	d007      	beq.n	8008956 <HAL_RCC_GetSysClockFreq+0x32>
 8008946:	2b08      	cmp	r3, #8
 8008948:	d008      	beq.n	800895c <HAL_RCC_GetSysClockFreq+0x38>
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 808d 	bne.w	8008a6a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008950:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008952:	60bb      	str	r3, [r7, #8]
       break;
 8008954:	e08c      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008956:	4b4b      	ldr	r3, [pc, #300]	; (8008a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8008958:	60bb      	str	r3, [r7, #8]
      break;
 800895a:	e089      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800895c:	4b47      	ldr	r3, [pc, #284]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x158>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008964:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008966:	4b45      	ldr	r3, [pc, #276]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x158>)
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d023      	beq.n	80089ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008972:	4b42      	ldr	r3, [pc, #264]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x158>)
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	099b      	lsrs	r3, r3, #6
 8008978:	f04f 0400 	mov.w	r4, #0
 800897c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	ea03 0501 	and.w	r5, r3, r1
 8008988:	ea04 0602 	and.w	r6, r4, r2
 800898c:	4a3d      	ldr	r2, [pc, #244]	; (8008a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800898e:	fb02 f106 	mul.w	r1, r2, r6
 8008992:	2200      	movs	r2, #0
 8008994:	fb02 f205 	mul.w	r2, r2, r5
 8008998:	440a      	add	r2, r1
 800899a:	493a      	ldr	r1, [pc, #232]	; (8008a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800899c:	fba5 0101 	umull	r0, r1, r5, r1
 80089a0:	1853      	adds	r3, r2, r1
 80089a2:	4619      	mov	r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f04f 0400 	mov.w	r4, #0
 80089aa:	461a      	mov	r2, r3
 80089ac:	4623      	mov	r3, r4
 80089ae:	f7f8 f96b 	bl	8000c88 <__aeabi_uldivmod>
 80089b2:	4603      	mov	r3, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e049      	b.n	8008a4e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ba:	4b30      	ldr	r3, [pc, #192]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x158>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	099b      	lsrs	r3, r3, #6
 80089c0:	f04f 0400 	mov.w	r4, #0
 80089c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	ea03 0501 	and.w	r5, r3, r1
 80089d0:	ea04 0602 	and.w	r6, r4, r2
 80089d4:	4629      	mov	r1, r5
 80089d6:	4632      	mov	r2, r6
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	f04f 0400 	mov.w	r4, #0
 80089e0:	0154      	lsls	r4, r2, #5
 80089e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80089e6:	014b      	lsls	r3, r1, #5
 80089e8:	4619      	mov	r1, r3
 80089ea:	4622      	mov	r2, r4
 80089ec:	1b49      	subs	r1, r1, r5
 80089ee:	eb62 0206 	sbc.w	r2, r2, r6
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	f04f 0400 	mov.w	r4, #0
 80089fa:	0194      	lsls	r4, r2, #6
 80089fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008a00:	018b      	lsls	r3, r1, #6
 8008a02:	1a5b      	subs	r3, r3, r1
 8008a04:	eb64 0402 	sbc.w	r4, r4, r2
 8008a08:	f04f 0100 	mov.w	r1, #0
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	00e2      	lsls	r2, r4, #3
 8008a12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008a16:	00d9      	lsls	r1, r3, #3
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	195b      	adds	r3, r3, r5
 8008a1e:	eb44 0406 	adc.w	r4, r4, r6
 8008a22:	f04f 0100 	mov.w	r1, #0
 8008a26:	f04f 0200 	mov.w	r2, #0
 8008a2a:	02a2      	lsls	r2, r4, #10
 8008a2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a30:	0299      	lsls	r1, r3, #10
 8008a32:	460b      	mov	r3, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	4621      	mov	r1, r4
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f04f 0400 	mov.w	r4, #0
 8008a40:	461a      	mov	r2, r3
 8008a42:	4623      	mov	r3, r4
 8008a44:	f7f8 f920 	bl	8000c88 <__aeabi_uldivmod>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_RCC_GetSysClockFreq+0x158>)
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	0c1b      	lsrs	r3, r3, #16
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	3301      	adds	r3, #1
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a66:	60bb      	str	r3, [r7, #8]
      break;
 8008a68:	e002      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a6c:	60bb      	str	r3, [r7, #8]
      break;
 8008a6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a70:	68bb      	ldr	r3, [r7, #8]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	00f42400 	.word	0x00f42400
 8008a84:	00bebc20 	.word	0x00bebc20

08008a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a8c:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	20000034 	.word	0x20000034

08008aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008aa4:	f7ff fff0 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	0a9b      	lsrs	r3, r3, #10
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	4a03      	ldr	r2, [pc, #12]	; (8008ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ab6:	5cd3      	ldrb	r3, [r2, r3]
 8008ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40023800 	.word	0x40023800
 8008ac4:	0800f1f8 	.word	0x0800f1f8

08008ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008acc:	f7ff ffdc 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	0b5b      	lsrs	r3, r3, #13
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	4a03      	ldr	r2, [pc, #12]	; (8008aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ade:	5cd3      	ldrb	r3, [r2, r3]
 8008ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	0800f1f8 	.word	0x0800f1f8

08008af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e056      	b.n	8008bb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d106      	bne.n	8008b22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fd fa67 	bl	8005ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	431a      	orrs	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	ea42 0103 	orr.w	r1, r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	0c1b      	lsrs	r3, r3, #16
 8008b80:	f003 0104 	and.w	r1, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d101      	bne.n	8008bda <HAL_SPI_Transmit+0x22>
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	e11e      	b.n	8008e18 <HAL_SPI_Transmit+0x260>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be2:	f7fd fdb9 	bl	8006758 <HAL_GetTick>
 8008be6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008be8:	88fb      	ldrh	r3, [r7, #6]
 8008bea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d002      	beq.n	8008bfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bfc:	e103      	b.n	8008e06 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_SPI_Transmit+0x52>
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c0e:	e0fa      	b.n	8008e06 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2203      	movs	r2, #3
 8008c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	88fa      	ldrh	r2, [r7, #6]
 8008c28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	88fa      	ldrh	r2, [r7, #6]
 8008c2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c56:	d107      	bne.n	8008c68 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c72:	2b40      	cmp	r3, #64	; 0x40
 8008c74:	d007      	beq.n	8008c86 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c8e:	d14b      	bne.n	8008d28 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <HAL_SPI_Transmit+0xe6>
 8008c98:	8afb      	ldrh	r3, [r7, #22]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d13e      	bne.n	8008d1c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	881a      	ldrh	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	1c9a      	adds	r2, r3, #2
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008cc2:	e02b      	b.n	8008d1c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d112      	bne.n	8008cf8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	881a      	ldrh	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	1c9a      	adds	r2, r3, #2
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cf6:	e011      	b.n	8008d1c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cf8:	f7fd fd2e 	bl	8006758 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d803      	bhi.n	8008d10 <HAL_SPI_Transmit+0x158>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d102      	bne.n	8008d16 <HAL_SPI_Transmit+0x15e>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d1a:	e074      	b.n	8008e06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1ce      	bne.n	8008cc4 <HAL_SPI_Transmit+0x10c>
 8008d26:	e04c      	b.n	8008dc2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <HAL_SPI_Transmit+0x17e>
 8008d30:	8afb      	ldrh	r3, [r7, #22]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d140      	bne.n	8008db8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d5c:	e02c      	b.n	8008db8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d113      	bne.n	8008d94 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	330c      	adds	r3, #12
 8008d76:	7812      	ldrb	r2, [r2, #0]
 8008d78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d92:	e011      	b.n	8008db8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d94:	f7fd fce0 	bl	8006758 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d803      	bhi.n	8008dac <HAL_SPI_Transmit+0x1f4>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008daa:	d102      	bne.n	8008db2 <HAL_SPI_Transmit+0x1fa>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008db6:	e026      	b.n	8008e06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1cd      	bne.n	8008d5e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fba4 	bl	8009514 <SPI_EndRxTxTransaction>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008de0:	2300      	movs	r3, #0
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	613b      	str	r3, [r7, #16]
 8008df4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	77fb      	strb	r3, [r7, #31]
 8008e02:	e000      	b.n	8008e06 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008e04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e3c:	d112      	bne.n	8008e64 <HAL_SPI_Receive+0x44>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10e      	bne.n	8008e64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e4e:	88fa      	ldrh	r2, [r7, #6]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	4613      	mov	r3, r2
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 f8e9 	bl	8009032 <HAL_SPI_TransmitReceive>
 8008e60:	4603      	mov	r3, r0
 8008e62:	e0e2      	b.n	800902a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_SPI_Receive+0x52>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0db      	b.n	800902a <HAL_SPI_Receive+0x20a>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e7a:	f7fd fc6d 	bl	8006758 <HAL_GetTick>
 8008e7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d002      	beq.n	8008e92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e90:	e0c2      	b.n	8009018 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <HAL_SPI_Receive+0x7e>
 8008e98:	88fb      	ldrh	r3, [r7, #6]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d102      	bne.n	8008ea4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ea2:	e0b9      	b.n	8009018 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	88fa      	ldrh	r2, [r7, #6]
 8008ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	88fa      	ldrh	r2, [r7, #6]
 8008ec2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eea:	d107      	bne.n	8008efc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008efa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b40      	cmp	r3, #64	; 0x40
 8008f08:	d007      	beq.n	8008f1a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d162      	bne.n	8008fe8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008f22:	e02e      	b.n	8008f82 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d115      	bne.n	8008f5e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f103 020c 	add.w	r2, r3, #12
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f5c:	e011      	b.n	8008f82 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f5e:	f7fd fbfb 	bl	8006758 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d803      	bhi.n	8008f76 <HAL_SPI_Receive+0x156>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d102      	bne.n	8008f7c <HAL_SPI_Receive+0x15c>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f80:	e04a      	b.n	8009018 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1cb      	bne.n	8008f24 <HAL_SPI_Receive+0x104>
 8008f8c:	e031      	b.n	8008ff2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d113      	bne.n	8008fc4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	b292      	uxth	r2, r2
 8008fa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	1c9a      	adds	r2, r3, #2
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fc2:	e011      	b.n	8008fe8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fc4:	f7fd fbc8 	bl	8006758 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d803      	bhi.n	8008fdc <HAL_SPI_Receive+0x1bc>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fda:	d102      	bne.n	8008fe2 <HAL_SPI_Receive+0x1c2>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008fe6:	e017      	b.n	8009018 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1cd      	bne.n	8008f8e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fa27 	bl	800944a <SPI_EndRxTransaction>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2220      	movs	r2, #32
 8009006:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	75fb      	strb	r3, [r7, #23]
 8009014:	e000      	b.n	8009018 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009016:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b08c      	sub	sp, #48	; 0x30
 8009036:	af00      	add	r7, sp, #0
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	607a      	str	r2, [r7, #4]
 800903e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009040:	2301      	movs	r3, #1
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_SPI_TransmitReceive+0x26>
 8009054:	2302      	movs	r3, #2
 8009056:	e18a      	b.n	800936e <HAL_SPI_TransmitReceive+0x33c>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009060:	f7fd fb7a 	bl	8006758 <HAL_GetTick>
 8009064:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800906c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009076:	887b      	ldrh	r3, [r7, #2]
 8009078:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800907a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800907e:	2b01      	cmp	r3, #1
 8009080:	d00f      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x70>
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009088:	d107      	bne.n	800909a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <HAL_SPI_TransmitReceive+0x68>
 8009092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009096:	2b04      	cmp	r3, #4
 8009098:	d003      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800909a:	2302      	movs	r3, #2
 800909c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80090a0:	e15b      	b.n	800935a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_SPI_TransmitReceive+0x82>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <HAL_SPI_TransmitReceive+0x82>
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d103      	bne.n	80090bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80090ba:	e14e      	b.n	800935a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d003      	beq.n	80090d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2205      	movs	r2, #5
 80090cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	887a      	ldrh	r2, [r7, #2]
 80090e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	887a      	ldrh	r2, [r7, #2]
 80090e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	887a      	ldrh	r2, [r7, #2]
 80090f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	887a      	ldrh	r2, [r7, #2]
 80090f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d007      	beq.n	8009124 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800912c:	d178      	bne.n	8009220 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_SPI_TransmitReceive+0x10a>
 8009136:	8b7b      	ldrh	r3, [r7, #26]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d166      	bne.n	800920a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009140:	881a      	ldrh	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914c:	1c9a      	adds	r2, r3, #2
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009160:	e053      	b.n	800920a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b02      	cmp	r3, #2
 800916e:	d11b      	bne.n	80091a8 <HAL_SPI_TransmitReceive+0x176>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d016      	beq.n	80091a8 <HAL_SPI_TransmitReceive+0x176>
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d113      	bne.n	80091a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	881a      	ldrh	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	1c9a      	adds	r2, r3, #2
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919a:	b29b      	uxth	r3, r3
 800919c:	3b01      	subs	r3, #1
 800919e:	b29a      	uxth	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d119      	bne.n	80091ea <HAL_SPI_TransmitReceive+0x1b8>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d014      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ca:	b292      	uxth	r2, r2
 80091cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	1c9a      	adds	r2, r3, #2
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091e6:	2301      	movs	r3, #1
 80091e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091ea:	f7fd fab5 	bl	8006758 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d807      	bhi.n	800920a <HAL_SPI_TransmitReceive+0x1d8>
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d003      	beq.n	800920a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009208:	e0a7      	b.n	800935a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1a6      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x130>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1a1      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x130>
 800921e:	e07c      	b.n	800931a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <HAL_SPI_TransmitReceive+0x1fc>
 8009228:	8b7b      	ldrh	r3, [r7, #26]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d16b      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	330c      	adds	r3, #12
 8009238:	7812      	ldrb	r2, [r2, #0]
 800923a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009254:	e057      	b.n	8009306 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b02      	cmp	r3, #2
 8009262:	d11c      	bne.n	800929e <HAL_SPI_TransmitReceive+0x26c>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009268:	b29b      	uxth	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d017      	beq.n	800929e <HAL_SPI_TransmitReceive+0x26c>
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d114      	bne.n	800929e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	330c      	adds	r3, #12
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d119      	bne.n	80092e0 <HAL_SPI_TransmitReceive+0x2ae>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d014      	beq.n	80092e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092dc:	2301      	movs	r3, #1
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092e0:	f7fd fa3a 	bl	8006758 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d803      	bhi.n	80092f8 <HAL_SPI_TransmitReceive+0x2c6>
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	d102      	bne.n	80092fe <HAL_SPI_TransmitReceive+0x2cc>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009304:	e029      	b.n	800935a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800930a:	b29b      	uxth	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1a2      	bne.n	8009256 <HAL_SPI_TransmitReceive+0x224>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009314:	b29b      	uxth	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d19d      	bne.n	8009256 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f8f8 	bl	8009514 <SPI_EndRxTxTransaction>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d006      	beq.n	8009338 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2220      	movs	r2, #32
 8009334:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009336:	e010      	b.n	800935a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	e000      	b.n	800935a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800936a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800936e:	4618      	mov	r0, r3
 8009370:	3730      	adds	r7, #48	; 0x30
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009386:	e04c      	b.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d048      	beq.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009390:	f7fd f9e2 	bl	8006758 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d902      	bls.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d13d      	bne.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093be:	d111      	bne.n	80093e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c8:	d004      	beq.n	80093d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d2:	d107      	bne.n	80093e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ec:	d10f      	bne.n	800940e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800940c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e00f      	b.n	8009442 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4013      	ands	r3, r2
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	bf0c      	ite	eq
 8009432:	2301      	moveq	r3, #1
 8009434:	2300      	movne	r3, #0
 8009436:	b2db      	uxtb	r3, r3
 8009438:	461a      	mov	r2, r3
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	429a      	cmp	r2, r3
 800943e:	d1a3      	bne.n	8009388 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af02      	add	r7, sp, #8
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800945e:	d111      	bne.n	8009484 <SPI_EndRxTransaction+0x3a>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009468:	d004      	beq.n	8009474 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009472:	d107      	bne.n	8009484 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009482:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800948c:	d12a      	bne.n	80094e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009496:	d012      	beq.n	80094be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2200      	movs	r2, #0
 80094a0:	2180      	movs	r1, #128	; 0x80
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff ff67 	bl	8009376 <SPI_WaitFlagStateUntilTimeout>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d02d      	beq.n	800950a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b2:	f043 0220 	orr.w	r2, r3, #32
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e026      	b.n	800950c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2200      	movs	r2, #0
 80094c6:	2101      	movs	r1, #1
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f7ff ff54 	bl	8009376 <SPI_WaitFlagStateUntilTimeout>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01a      	beq.n	800950a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d8:	f043 0220 	orr.w	r2, r3, #32
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e013      	b.n	800950c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2200      	movs	r2, #0
 80094ec:	2101      	movs	r1, #1
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff ff41 	bl	8009376 <SPI_WaitFlagStateUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d007      	beq.n	800950a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fe:	f043 0220 	orr.w	r2, r3, #32
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e000      	b.n	800950c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af02      	add	r7, sp, #8
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009520:	4b1b      	ldr	r3, [pc, #108]	; (8009590 <SPI_EndRxTxTransaction+0x7c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a1b      	ldr	r2, [pc, #108]	; (8009594 <SPI_EndRxTxTransaction+0x80>)
 8009526:	fba2 2303 	umull	r2, r3, r2, r3
 800952a:	0d5b      	lsrs	r3, r3, #21
 800952c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009530:	fb02 f303 	mul.w	r3, r2, r3
 8009534:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800953e:	d112      	bne.n	8009566 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2200      	movs	r2, #0
 8009548:	2180      	movs	r1, #128	; 0x80
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff ff13 	bl	8009376 <SPI_WaitFlagStateUntilTimeout>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d016      	beq.n	8009584 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	f043 0220 	orr.w	r2, r3, #32
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e00f      	b.n	8009586 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00a      	beq.n	8009582 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	3b01      	subs	r3, #1
 8009570:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957c:	2b80      	cmp	r3, #128	; 0x80
 800957e:	d0f2      	beq.n	8009566 <SPI_EndRxTxTransaction+0x52>
 8009580:	e000      	b.n	8009584 <SPI_EndRxTxTransaction+0x70>
        break;
 8009582:	bf00      	nop
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000034 	.word	0x20000034
 8009594:	165e9f81 	.word	0x165e9f81

08009598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e01d      	b.n	80095e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d106      	bne.n	80095c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7fc fe12 	bl	80061e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4619      	mov	r1, r3
 80095d6:	4610      	mov	r0, r2
 80095d8:	f000 fb56 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0201 	orr.w	r2, r2, #1
 8009604:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b06      	cmp	r3, #6
 8009616:	d007      	beq.n	8009628 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e01d      	b.n	8009684 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fc fd0f 	bl	8006080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f000 fb07 	bl	8009c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2201      	movs	r2, #1
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fd42 	bl	800a128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a15      	ldr	r2, [pc, #84]	; (8009700 <HAL_TIM_PWM_Start+0x74>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <HAL_TIM_PWM_Start+0x2c>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a14      	ldr	r2, [pc, #80]	; (8009704 <HAL_TIM_PWM_Start+0x78>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d101      	bne.n	80096bc <HAL_TIM_PWM_Start+0x30>
 80096b8:	2301      	movs	r3, #1
 80096ba:	e000      	b.n	80096be <HAL_TIM_PWM_Start+0x32>
 80096bc:	2300      	movs	r3, #0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b06      	cmp	r3, #6
 80096e2:	d007      	beq.n	80096f4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0201 	orr.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40010000 	.word	0x40010000
 8009704:	40010400 	.word	0x40010400

08009708 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e083      	b.n	8009824 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7fc fcdd 	bl	80060f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2202      	movs	r2, #2
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800974c:	f023 0307 	bic.w	r3, r3, #7
 8009750:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f000 fa93 	bl	8009c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	4313      	orrs	r3, r2
 8009782:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800978a:	f023 0303 	bic.w	r3, r3, #3
 800978e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	4313      	orrs	r3, r2
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80097a8:	f023 030c 	bic.w	r3, r3, #12
 80097ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	021b      	lsls	r3, r3, #8
 80097c4:	4313      	orrs	r3, r2
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	011a      	lsls	r2, r3, #4
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	031b      	lsls	r3, r3, #12
 80097d8:	4313      	orrs	r3, r2
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	4313      	orrs	r3, r2
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_TIM_Encoder_Start+0x16>
 800983c:	2b04      	cmp	r3, #4
 800983e:	d008      	beq.n	8009852 <HAL_TIM_Encoder_Start+0x26>
 8009840:	e00f      	b.n	8009862 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2201      	movs	r2, #1
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f000 fc6c 	bl	800a128 <TIM_CCxChannelCmd>
      break;
 8009850:	e016      	b.n	8009880 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2201      	movs	r2, #1
 8009858:	2104      	movs	r1, #4
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fc64 	bl	800a128 <TIM_CCxChannelCmd>
      break;
 8009860:	e00e      	b.n	8009880 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2201      	movs	r2, #1
 8009868:	2100      	movs	r1, #0
 800986a:	4618      	mov	r0, r3
 800986c:	f000 fc5c 	bl	800a128 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2201      	movs	r2, #1
 8009876:	2104      	movs	r1, #4
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fc55 	bl	800a128 <TIM_CCxChannelCmd>
      break;
 800987e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d122      	bne.n	80098f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d11b      	bne.n	80098f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f06f 0202 	mvn.w	r2, #2
 80098c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f9b5 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 80098e2:	e005      	b.n	80098f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f9a7 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f9b8 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b04      	cmp	r3, #4
 8009902:	d122      	bne.n	800994a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b04      	cmp	r3, #4
 8009910:	d11b      	bne.n	800994a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f06f 0204 	mvn.w	r2, #4
 800991a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f98b 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 8009936:	e005      	b.n	8009944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f97d 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f98e 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f003 0308 	and.w	r3, r3, #8
 8009954:	2b08      	cmp	r3, #8
 8009956:	d122      	bne.n	800999e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b08      	cmp	r3, #8
 8009964:	d11b      	bne.n	800999e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f06f 0208 	mvn.w	r2, #8
 800996e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2204      	movs	r2, #4
 8009974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	f003 0303 	and.w	r3, r3, #3
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f961 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 800998a:	e005      	b.n	8009998 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f953 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f964 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	d122      	bne.n	80099f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0310 	and.w	r3, r3, #16
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d11b      	bne.n	80099f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f06f 0210 	mvn.w	r2, #16
 80099c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2208      	movs	r2, #8
 80099c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f937 	bl	8009c4c <HAL_TIM_IC_CaptureCallback>
 80099de:	e005      	b.n	80099ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f929 	bl	8009c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f93a 	bl	8009c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10e      	bne.n	8009a1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d107      	bne.n	8009a1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f06f 0201 	mvn.w	r2, #1
 8009a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7f9 fe0d 	bl	8003638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a28:	2b80      	cmp	r3, #128	; 0x80
 8009a2a:	d10e      	bne.n	8009a4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a36:	2b80      	cmp	r3, #128	; 0x80
 8009a38:	d107      	bne.n	8009a4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fc6d 	bl	800a324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a54:	2b40      	cmp	r3, #64	; 0x40
 8009a56:	d10e      	bne.n	8009a76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a62:	2b40      	cmp	r3, #64	; 0x40
 8009a64:	d107      	bne.n	8009a76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f8ff 	bl	8009c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d10e      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b20      	cmp	r3, #32
 8009a90:	d107      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f06f 0220 	mvn.w	r2, #32
 8009a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fc37 	bl	800a310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e0b4      	b.n	8009c30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b0c      	cmp	r3, #12
 8009ada:	f200 809f 	bhi.w	8009c1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009b19 	.word	0x08009b19
 8009ae8:	08009c1d 	.word	0x08009c1d
 8009aec:	08009c1d 	.word	0x08009c1d
 8009af0:	08009c1d 	.word	0x08009c1d
 8009af4:	08009b59 	.word	0x08009b59
 8009af8:	08009c1d 	.word	0x08009c1d
 8009afc:	08009c1d 	.word	0x08009c1d
 8009b00:	08009c1d 	.word	0x08009c1d
 8009b04:	08009b9b 	.word	0x08009b9b
 8009b08:	08009c1d 	.word	0x08009c1d
 8009b0c:	08009c1d 	.word	0x08009c1d
 8009b10:	08009c1d 	.word	0x08009c1d
 8009b14:	08009bdb 	.word	0x08009bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f952 	bl	8009dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0208 	orr.w	r2, r2, #8
 8009b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0204 	bic.w	r2, r2, #4
 8009b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6999      	ldr	r1, [r3, #24]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691a      	ldr	r2, [r3, #16]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	619a      	str	r2, [r3, #24]
      break;
 8009b56:	e062      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f9a2 	bl	8009ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699a      	ldr	r2, [r3, #24]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699a      	ldr	r2, [r3, #24]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6999      	ldr	r1, [r3, #24]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	021a      	lsls	r2, r3, #8
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	619a      	str	r2, [r3, #24]
      break;
 8009b98:	e041      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 f9f7 	bl	8009f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0208 	orr.w	r2, r2, #8
 8009bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69da      	ldr	r2, [r3, #28]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0204 	bic.w	r2, r2, #4
 8009bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69d9      	ldr	r1, [r3, #28]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	61da      	str	r2, [r3, #28]
      break;
 8009bd8:	e021      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fa4b 	bl	800a07c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69da      	ldr	r2, [r3, #28]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69d9      	ldr	r1, [r3, #28]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	021a      	lsls	r2, r3, #8
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	61da      	str	r2, [r3, #28]
      break;
 8009c1a:	e000      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009c1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a40      	ldr	r2, [pc, #256]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d013      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca6:	d00f      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a3d      	ldr	r2, [pc, #244]	; (8009da0 <TIM_Base_SetConfig+0x118>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00b      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a3c      	ldr	r2, [pc, #240]	; (8009da4 <TIM_Base_SetConfig+0x11c>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d007      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a3b      	ldr	r2, [pc, #236]	; (8009da8 <TIM_Base_SetConfig+0x120>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d003      	beq.n	8009cc8 <TIM_Base_SetConfig+0x40>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a3a      	ldr	r2, [pc, #232]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d108      	bne.n	8009cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2f      	ldr	r2, [pc, #188]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d02b      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce8:	d027      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a2c      	ldr	r2, [pc, #176]	; (8009da0 <TIM_Base_SetConfig+0x118>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d023      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a2b      	ldr	r2, [pc, #172]	; (8009da4 <TIM_Base_SetConfig+0x11c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d01f      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <TIM_Base_SetConfig+0x120>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d01b      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a29      	ldr	r2, [pc, #164]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d017      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <TIM_Base_SetConfig+0x128>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <TIM_Base_SetConfig+0x12c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00f      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a26      	ldr	r2, [pc, #152]	; (8009db8 <TIM_Base_SetConfig+0x130>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00b      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a25      	ldr	r2, [pc, #148]	; (8009dbc <TIM_Base_SetConfig+0x134>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d007      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a24      	ldr	r2, [pc, #144]	; (8009dc0 <TIM_Base_SetConfig+0x138>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d003      	beq.n	8009d3a <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a23      	ldr	r2, [pc, #140]	; (8009dc4 <TIM_Base_SetConfig+0x13c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d108      	bne.n	8009d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <TIM_Base_SetConfig+0x114>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_Base_SetConfig+0xf8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <TIM_Base_SetConfig+0x124>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d103      	bne.n	8009d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691a      	ldr	r2, [r3, #16]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	615a      	str	r2, [r3, #20]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40000400 	.word	0x40000400
 8009da4:	40000800 	.word	0x40000800
 8009da8:	40000c00 	.word	0x40000c00
 8009dac:	40010400 	.word	0x40010400
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800
 8009dbc:	40001800 	.word	0x40001800
 8009dc0:	40001c00 	.word	0x40001c00
 8009dc4:	40002000 	.word	0x40002000

08009dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f023 0201 	bic.w	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f023 0302 	bic.w	r3, r3, #2
 8009e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <TIM_OC1_SetConfig+0xd8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <TIM_OC1_SetConfig+0x64>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a1f      	ldr	r2, [pc, #124]	; (8009ea4 <TIM_OC1_SetConfig+0xdc>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d10c      	bne.n	8009e46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f023 0308 	bic.w	r3, r3, #8
 8009e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f023 0304 	bic.w	r3, r3, #4
 8009e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <TIM_OC1_SetConfig+0xd8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d003      	beq.n	8009e56 <TIM_OC1_SetConfig+0x8e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a14      	ldr	r2, [pc, #80]	; (8009ea4 <TIM_OC1_SetConfig+0xdc>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d111      	bne.n	8009e7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	621a      	str	r2, [r3, #32]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40010400 	.word	0x40010400

08009ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f023 0210 	bic.w	r2, r3, #16
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f023 0320 	bic.w	r3, r3, #32
 8009ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a22      	ldr	r2, [pc, #136]	; (8009f8c <TIM_OC2_SetConfig+0xe4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_OC2_SetConfig+0x68>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a21      	ldr	r2, [pc, #132]	; (8009f90 <TIM_OC2_SetConfig+0xe8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10d      	bne.n	8009f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a17      	ldr	r2, [pc, #92]	; (8009f8c <TIM_OC2_SetConfig+0xe4>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC2_SetConfig+0x94>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a16      	ldr	r2, [pc, #88]	; (8009f90 <TIM_OC2_SetConfig+0xe8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d113      	bne.n	8009f64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	40010000 	.word	0x40010000
 8009f90:	40010400 	.word	0x40010400

08009f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a21      	ldr	r2, [pc, #132]	; (800a074 <TIM_OC3_SetConfig+0xe0>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC3_SetConfig+0x66>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a20      	ldr	r2, [pc, #128]	; (800a078 <TIM_OC3_SetConfig+0xe4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d10d      	bne.n	800a016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a16      	ldr	r2, [pc, #88]	; (800a074 <TIM_OC3_SetConfig+0xe0>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d003      	beq.n	800a026 <TIM_OC3_SetConfig+0x92>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a15      	ldr	r2, [pc, #84]	; (800a078 <TIM_OC3_SetConfig+0xe4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d113      	bne.n	800a04e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a02c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	621a      	str	r2, [r3, #32]
}
 800a068:	bf00      	nop
 800a06a:	371c      	adds	r7, #28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	40010000 	.word	0x40010000
 800a078:	40010400 	.word	0x40010400

0800a07c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	031b      	lsls	r3, r3, #12
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <TIM_OC4_SetConfig+0xa4>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <TIM_OC4_SetConfig+0x68>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a11      	ldr	r2, [pc, #68]	; (800a124 <TIM_OC4_SetConfig+0xa8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d109      	bne.n	800a0f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	019b      	lsls	r3, r3, #6
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	621a      	str	r2, [r3, #32]
}
 800a112:	bf00      	nop
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	40010000 	.word	0x40010000
 800a124:	40010400 	.word	0x40010400

0800a128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	2201      	movs	r2, #1
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a1a      	ldr	r2, [r3, #32]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	43db      	mvns	r3, r3
 800a14a:	401a      	ands	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6a1a      	ldr	r2, [r3, #32]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f003 031f 	and.w	r3, r3, #31
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	fa01 f303 	lsl.w	r3, r1, r3
 800a160:	431a      	orrs	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a184:	2b01      	cmp	r3, #1
 800a186:	d101      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a188:	2302      	movs	r3, #2
 800a18a:	e05a      	b.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a21      	ldr	r2, [pc, #132]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d022      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d8:	d01d      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d018      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a1b      	ldr	r2, [pc, #108]	; (800a258 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a1a      	ldr	r2, [pc, #104]	; (800a25c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00e      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a18      	ldr	r2, [pc, #96]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d009      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a17      	ldr	r2, [pc, #92]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d004      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a15      	ldr	r2, [pc, #84]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d10c      	bne.n	800a230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a21c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	4313      	orrs	r3, r2
 800a226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40010000 	.word	0x40010000
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40010400 	.word	0x40010400
 800a264:	40014000 	.word	0x40014000
 800a268:	40001800 	.word	0x40001800

0800a26c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d101      	bne.n	800a288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a284:	2302      	movs	r3, #2
 800a286:	e03d      	b.n	800a304 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e03f      	b.n	800a3ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7fb ffec 	bl	800633c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2224      	movs	r2, #36	; 0x24
 800a368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a37a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f90b 	bl	800a598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	695a      	ldr	r2, [r3, #20]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2220      	movs	r2, #32
 800a3bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b088      	sub	sp, #32
 800a3d6:	af02      	add	r7, sp, #8
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b20      	cmp	r3, #32
 800a3f0:	f040 8083 	bne.w	800a4fa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <HAL_UART_Transmit+0x2e>
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e07b      	b.n	800a4fc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <HAL_UART_Transmit+0x40>
 800a40e:	2302      	movs	r3, #2
 800a410:	e074      	b.n	800a4fc <HAL_UART_Transmit+0x12a>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2221      	movs	r2, #33	; 0x21
 800a424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a428:	f7fc f996 	bl	8006758 <HAL_GetTick>
 800a42c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	88fa      	ldrh	r2, [r7, #6]
 800a432:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	88fa      	ldrh	r2, [r7, #6]
 800a438:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a442:	e042      	b.n	800a4ca <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45a:	d122      	bne.n	800a4a2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2200      	movs	r2, #0
 800a464:	2180      	movs	r1, #128	; 0x80
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 f84c 	bl	800a504 <UART_WaitOnFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e042      	b.n	800a4fc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a488:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d103      	bne.n	800a49a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	3302      	adds	r3, #2
 800a496:	60bb      	str	r3, [r7, #8]
 800a498:	e017      	b.n	800a4ca <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60bb      	str	r3, [r7, #8]
 800a4a0:	e013      	b.n	800a4ca <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2180      	movs	r1, #128	; 0x80
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f000 f829 	bl	800a504 <UART_WaitOnFlagUntilTimeout>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e01f      	b.n	800a4fc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	60ba      	str	r2, [r7, #8]
 800a4c2:	781a      	ldrb	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1b7      	bne.n	800a444 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2140      	movs	r1, #64	; 0x40
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 f810 	bl	800a504 <UART_WaitOnFlagUntilTimeout>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e006      	b.n	800a4fc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e000      	b.n	800a4fc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a4fa:	2302      	movs	r3, #2
  }
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	4613      	mov	r3, r2
 800a512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a514:	e02c      	b.n	800a570 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51c:	d028      	beq.n	800a570 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d007      	beq.n	800a534 <UART_WaitOnFlagUntilTimeout+0x30>
 800a524:	f7fc f918 	bl	8006758 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	429a      	cmp	r2, r3
 800a532:	d21d      	bcs.n	800a570 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68da      	ldr	r2, [r3, #12]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a542:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	695a      	ldr	r2, [r3, #20]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0201 	bic.w	r2, r2, #1
 800a552:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2220      	movs	r2, #32
 800a560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e00f      	b.n	800a590 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	4013      	ands	r3, r2
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	bf0c      	ite	eq
 800a580:	2301      	moveq	r3, #1
 800a582:	2300      	movne	r3, #0
 800a584:	b2db      	uxtb	r3, r3
 800a586:	461a      	mov	r2, r3
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d0c3      	beq.n	800a516 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a5da:	f023 030c 	bic.w	r3, r3, #12
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699a      	ldr	r2, [r3, #24]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a606:	f040 818b 	bne.w	800a920 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4ac1      	ldr	r2, [pc, #772]	; (800a914 <UART_SetConfig+0x37c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d005      	beq.n	800a620 <UART_SetConfig+0x88>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4abf      	ldr	r2, [pc, #764]	; (800a918 <UART_SetConfig+0x380>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	f040 80bd 	bne.w	800a79a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a620:	f7fe fa52 	bl	8008ac8 <HAL_RCC_GetPCLK2Freq>
 800a624:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	461d      	mov	r5, r3
 800a62a:	f04f 0600 	mov.w	r6, #0
 800a62e:	46a8      	mov	r8, r5
 800a630:	46b1      	mov	r9, r6
 800a632:	eb18 0308 	adds.w	r3, r8, r8
 800a636:	eb49 0409 	adc.w	r4, r9, r9
 800a63a:	4698      	mov	r8, r3
 800a63c:	46a1      	mov	r9, r4
 800a63e:	eb18 0805 	adds.w	r8, r8, r5
 800a642:	eb49 0906 	adc.w	r9, r9, r6
 800a646:	f04f 0100 	mov.w	r1, #0
 800a64a:	f04f 0200 	mov.w	r2, #0
 800a64e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a652:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a656:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a65a:	4688      	mov	r8, r1
 800a65c:	4691      	mov	r9, r2
 800a65e:	eb18 0005 	adds.w	r0, r8, r5
 800a662:	eb49 0106 	adc.w	r1, r9, r6
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	461d      	mov	r5, r3
 800a66c:	f04f 0600 	mov.w	r6, #0
 800a670:	196b      	adds	r3, r5, r5
 800a672:	eb46 0406 	adc.w	r4, r6, r6
 800a676:	461a      	mov	r2, r3
 800a678:	4623      	mov	r3, r4
 800a67a:	f7f6 fb05 	bl	8000c88 <__aeabi_uldivmod>
 800a67e:	4603      	mov	r3, r0
 800a680:	460c      	mov	r4, r1
 800a682:	461a      	mov	r2, r3
 800a684:	4ba5      	ldr	r3, [pc, #660]	; (800a91c <UART_SetConfig+0x384>)
 800a686:	fba3 2302 	umull	r2, r3, r3, r2
 800a68a:	095b      	lsrs	r3, r3, #5
 800a68c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	461d      	mov	r5, r3
 800a694:	f04f 0600 	mov.w	r6, #0
 800a698:	46a9      	mov	r9, r5
 800a69a:	46b2      	mov	sl, r6
 800a69c:	eb19 0309 	adds.w	r3, r9, r9
 800a6a0:	eb4a 040a 	adc.w	r4, sl, sl
 800a6a4:	4699      	mov	r9, r3
 800a6a6:	46a2      	mov	sl, r4
 800a6a8:	eb19 0905 	adds.w	r9, r9, r5
 800a6ac:	eb4a 0a06 	adc.w	sl, sl, r6
 800a6b0:	f04f 0100 	mov.w	r1, #0
 800a6b4:	f04f 0200 	mov.w	r2, #0
 800a6b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	4692      	mov	sl, r2
 800a6c8:	eb19 0005 	adds.w	r0, r9, r5
 800a6cc:	eb4a 0106 	adc.w	r1, sl, r6
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	461d      	mov	r5, r3
 800a6d6:	f04f 0600 	mov.w	r6, #0
 800a6da:	196b      	adds	r3, r5, r5
 800a6dc:	eb46 0406 	adc.w	r4, r6, r6
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	f7f6 fad0 	bl	8000c88 <__aeabi_uldivmod>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b8b      	ldr	r3, [pc, #556]	; (800a91c <UART_SetConfig+0x384>)
 800a6f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f4:	095b      	lsrs	r3, r3, #5
 800a6f6:	2164      	movs	r1, #100	; 0x64
 800a6f8:	fb01 f303 	mul.w	r3, r1, r3
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	3332      	adds	r3, #50	; 0x32
 800a702:	4a86      	ldr	r2, [pc, #536]	; (800a91c <UART_SetConfig+0x384>)
 800a704:	fba2 2303 	umull	r2, r3, r2, r3
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a710:	4498      	add	r8, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	461d      	mov	r5, r3
 800a716:	f04f 0600 	mov.w	r6, #0
 800a71a:	46a9      	mov	r9, r5
 800a71c:	46b2      	mov	sl, r6
 800a71e:	eb19 0309 	adds.w	r3, r9, r9
 800a722:	eb4a 040a 	adc.w	r4, sl, sl
 800a726:	4699      	mov	r9, r3
 800a728:	46a2      	mov	sl, r4
 800a72a:	eb19 0905 	adds.w	r9, r9, r5
 800a72e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a732:	f04f 0100 	mov.w	r1, #0
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a73e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a742:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a746:	4689      	mov	r9, r1
 800a748:	4692      	mov	sl, r2
 800a74a:	eb19 0005 	adds.w	r0, r9, r5
 800a74e:	eb4a 0106 	adc.w	r1, sl, r6
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	461d      	mov	r5, r3
 800a758:	f04f 0600 	mov.w	r6, #0
 800a75c:	196b      	adds	r3, r5, r5
 800a75e:	eb46 0406 	adc.w	r4, r6, r6
 800a762:	461a      	mov	r2, r3
 800a764:	4623      	mov	r3, r4
 800a766:	f7f6 fa8f 	bl	8000c88 <__aeabi_uldivmod>
 800a76a:	4603      	mov	r3, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	461a      	mov	r2, r3
 800a770:	4b6a      	ldr	r3, [pc, #424]	; (800a91c <UART_SetConfig+0x384>)
 800a772:	fba3 1302 	umull	r1, r3, r3, r2
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	2164      	movs	r1, #100	; 0x64
 800a77a:	fb01 f303 	mul.w	r3, r1, r3
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	3332      	adds	r3, #50	; 0x32
 800a784:	4a65      	ldr	r2, [pc, #404]	; (800a91c <UART_SetConfig+0x384>)
 800a786:	fba2 2303 	umull	r2, r3, r2, r3
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	f003 0207 	and.w	r2, r3, #7
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4442      	add	r2, r8
 800a796:	609a      	str	r2, [r3, #8]
 800a798:	e26f      	b.n	800ac7a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a79a:	f7fe f981 	bl	8008aa0 <HAL_RCC_GetPCLK1Freq>
 800a79e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	461d      	mov	r5, r3
 800a7a4:	f04f 0600 	mov.w	r6, #0
 800a7a8:	46a8      	mov	r8, r5
 800a7aa:	46b1      	mov	r9, r6
 800a7ac:	eb18 0308 	adds.w	r3, r8, r8
 800a7b0:	eb49 0409 	adc.w	r4, r9, r9
 800a7b4:	4698      	mov	r8, r3
 800a7b6:	46a1      	mov	r9, r4
 800a7b8:	eb18 0805 	adds.w	r8, r8, r5
 800a7bc:	eb49 0906 	adc.w	r9, r9, r6
 800a7c0:	f04f 0100 	mov.w	r1, #0
 800a7c4:	f04f 0200 	mov.w	r2, #0
 800a7c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7d4:	4688      	mov	r8, r1
 800a7d6:	4691      	mov	r9, r2
 800a7d8:	eb18 0005 	adds.w	r0, r8, r5
 800a7dc:	eb49 0106 	adc.w	r1, r9, r6
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	461d      	mov	r5, r3
 800a7e6:	f04f 0600 	mov.w	r6, #0
 800a7ea:	196b      	adds	r3, r5, r5
 800a7ec:	eb46 0406 	adc.w	r4, r6, r6
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4623      	mov	r3, r4
 800a7f4:	f7f6 fa48 	bl	8000c88 <__aeabi_uldivmod>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4b47      	ldr	r3, [pc, #284]	; (800a91c <UART_SetConfig+0x384>)
 800a800:	fba3 2302 	umull	r2, r3, r3, r2
 800a804:	095b      	lsrs	r3, r3, #5
 800a806:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	461d      	mov	r5, r3
 800a80e:	f04f 0600 	mov.w	r6, #0
 800a812:	46a9      	mov	r9, r5
 800a814:	46b2      	mov	sl, r6
 800a816:	eb19 0309 	adds.w	r3, r9, r9
 800a81a:	eb4a 040a 	adc.w	r4, sl, sl
 800a81e:	4699      	mov	r9, r3
 800a820:	46a2      	mov	sl, r4
 800a822:	eb19 0905 	adds.w	r9, r9, r5
 800a826:	eb4a 0a06 	adc.w	sl, sl, r6
 800a82a:	f04f 0100 	mov.w	r1, #0
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a83a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a83e:	4689      	mov	r9, r1
 800a840:	4692      	mov	sl, r2
 800a842:	eb19 0005 	adds.w	r0, r9, r5
 800a846:	eb4a 0106 	adc.w	r1, sl, r6
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	461d      	mov	r5, r3
 800a850:	f04f 0600 	mov.w	r6, #0
 800a854:	196b      	adds	r3, r5, r5
 800a856:	eb46 0406 	adc.w	r4, r6, r6
 800a85a:	461a      	mov	r2, r3
 800a85c:	4623      	mov	r3, r4
 800a85e:	f7f6 fa13 	bl	8000c88 <__aeabi_uldivmod>
 800a862:	4603      	mov	r3, r0
 800a864:	460c      	mov	r4, r1
 800a866:	461a      	mov	r2, r3
 800a868:	4b2c      	ldr	r3, [pc, #176]	; (800a91c <UART_SetConfig+0x384>)
 800a86a:	fba3 1302 	umull	r1, r3, r3, r2
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	2164      	movs	r1, #100	; 0x64
 800a872:	fb01 f303 	mul.w	r3, r1, r3
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	3332      	adds	r3, #50	; 0x32
 800a87c:	4a27      	ldr	r2, [pc, #156]	; (800a91c <UART_SetConfig+0x384>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a88a:	4498      	add	r8, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	461d      	mov	r5, r3
 800a890:	f04f 0600 	mov.w	r6, #0
 800a894:	46a9      	mov	r9, r5
 800a896:	46b2      	mov	sl, r6
 800a898:	eb19 0309 	adds.w	r3, r9, r9
 800a89c:	eb4a 040a 	adc.w	r4, sl, sl
 800a8a0:	4699      	mov	r9, r3
 800a8a2:	46a2      	mov	sl, r4
 800a8a4:	eb19 0905 	adds.w	r9, r9, r5
 800a8a8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8ac:	f04f 0100 	mov.w	r1, #0
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8c0:	4689      	mov	r9, r1
 800a8c2:	4692      	mov	sl, r2
 800a8c4:	eb19 0005 	adds.w	r0, r9, r5
 800a8c8:	eb4a 0106 	adc.w	r1, sl, r6
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	461d      	mov	r5, r3
 800a8d2:	f04f 0600 	mov.w	r6, #0
 800a8d6:	196b      	adds	r3, r5, r5
 800a8d8:	eb46 0406 	adc.w	r4, r6, r6
 800a8dc:	461a      	mov	r2, r3
 800a8de:	4623      	mov	r3, r4
 800a8e0:	f7f6 f9d2 	bl	8000c88 <__aeabi_uldivmod>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <UART_SetConfig+0x384>)
 800a8ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f0:	095b      	lsrs	r3, r3, #5
 800a8f2:	2164      	movs	r1, #100	; 0x64
 800a8f4:	fb01 f303 	mul.w	r3, r1, r3
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	3332      	adds	r3, #50	; 0x32
 800a8fe:	4a07      	ldr	r2, [pc, #28]	; (800a91c <UART_SetConfig+0x384>)
 800a900:	fba2 2303 	umull	r2, r3, r2, r3
 800a904:	095b      	lsrs	r3, r3, #5
 800a906:	f003 0207 	and.w	r2, r3, #7
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4442      	add	r2, r8
 800a910:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a912:	e1b2      	b.n	800ac7a <UART_SetConfig+0x6e2>
 800a914:	40011000 	.word	0x40011000
 800a918:	40011400 	.word	0x40011400
 800a91c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4ad7      	ldr	r2, [pc, #860]	; (800ac84 <UART_SetConfig+0x6ec>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d005      	beq.n	800a936 <UART_SetConfig+0x39e>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4ad6      	ldr	r2, [pc, #856]	; (800ac88 <UART_SetConfig+0x6f0>)
 800a930:	4293      	cmp	r3, r2
 800a932:	f040 80d1 	bne.w	800aad8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a936:	f7fe f8c7 	bl	8008ac8 <HAL_RCC_GetPCLK2Freq>
 800a93a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	469a      	mov	sl, r3
 800a940:	f04f 0b00 	mov.w	fp, #0
 800a944:	46d0      	mov	r8, sl
 800a946:	46d9      	mov	r9, fp
 800a948:	eb18 0308 	adds.w	r3, r8, r8
 800a94c:	eb49 0409 	adc.w	r4, r9, r9
 800a950:	4698      	mov	r8, r3
 800a952:	46a1      	mov	r9, r4
 800a954:	eb18 080a 	adds.w	r8, r8, sl
 800a958:	eb49 090b 	adc.w	r9, r9, fp
 800a95c:	f04f 0100 	mov.w	r1, #0
 800a960:	f04f 0200 	mov.w	r2, #0
 800a964:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a968:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a96c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a970:	4688      	mov	r8, r1
 800a972:	4691      	mov	r9, r2
 800a974:	eb1a 0508 	adds.w	r5, sl, r8
 800a978:	eb4b 0609 	adc.w	r6, fp, r9
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	4619      	mov	r1, r3
 800a982:	f04f 0200 	mov.w	r2, #0
 800a986:	f04f 0300 	mov.w	r3, #0
 800a98a:	f04f 0400 	mov.w	r4, #0
 800a98e:	0094      	lsls	r4, r2, #2
 800a990:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a994:	008b      	lsls	r3, r1, #2
 800a996:	461a      	mov	r2, r3
 800a998:	4623      	mov	r3, r4
 800a99a:	4628      	mov	r0, r5
 800a99c:	4631      	mov	r1, r6
 800a99e:	f7f6 f973 	bl	8000c88 <__aeabi_uldivmod>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4bb8      	ldr	r3, [pc, #736]	; (800ac8c <UART_SetConfig+0x6f4>)
 800a9aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a9ae:	095b      	lsrs	r3, r3, #5
 800a9b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	469b      	mov	fp, r3
 800a9b8:	f04f 0c00 	mov.w	ip, #0
 800a9bc:	46d9      	mov	r9, fp
 800a9be:	46e2      	mov	sl, ip
 800a9c0:	eb19 0309 	adds.w	r3, r9, r9
 800a9c4:	eb4a 040a 	adc.w	r4, sl, sl
 800a9c8:	4699      	mov	r9, r3
 800a9ca:	46a2      	mov	sl, r4
 800a9cc:	eb19 090b 	adds.w	r9, r9, fp
 800a9d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a9d4:	f04f 0100 	mov.w	r1, #0
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9e8:	4689      	mov	r9, r1
 800a9ea:	4692      	mov	sl, r2
 800a9ec:	eb1b 0509 	adds.w	r5, fp, r9
 800a9f0:	eb4c 060a 	adc.w	r6, ip, sl
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f04f 0200 	mov.w	r2, #0
 800a9fe:	f04f 0300 	mov.w	r3, #0
 800aa02:	f04f 0400 	mov.w	r4, #0
 800aa06:	0094      	lsls	r4, r2, #2
 800aa08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa0c:	008b      	lsls	r3, r1, #2
 800aa0e:	461a      	mov	r2, r3
 800aa10:	4623      	mov	r3, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	4631      	mov	r1, r6
 800aa16:	f7f6 f937 	bl	8000c88 <__aeabi_uldivmod>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	461a      	mov	r2, r3
 800aa20:	4b9a      	ldr	r3, [pc, #616]	; (800ac8c <UART_SetConfig+0x6f4>)
 800aa22:	fba3 1302 	umull	r1, r3, r3, r2
 800aa26:	095b      	lsrs	r3, r3, #5
 800aa28:	2164      	movs	r1, #100	; 0x64
 800aa2a:	fb01 f303 	mul.w	r3, r1, r3
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	011b      	lsls	r3, r3, #4
 800aa32:	3332      	adds	r3, #50	; 0x32
 800aa34:	4a95      	ldr	r2, [pc, #596]	; (800ac8c <UART_SetConfig+0x6f4>)
 800aa36:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3a:	095b      	lsrs	r3, r3, #5
 800aa3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa40:	4498      	add	r8, r3
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	469b      	mov	fp, r3
 800aa46:	f04f 0c00 	mov.w	ip, #0
 800aa4a:	46d9      	mov	r9, fp
 800aa4c:	46e2      	mov	sl, ip
 800aa4e:	eb19 0309 	adds.w	r3, r9, r9
 800aa52:	eb4a 040a 	adc.w	r4, sl, sl
 800aa56:	4699      	mov	r9, r3
 800aa58:	46a2      	mov	sl, r4
 800aa5a:	eb19 090b 	adds.w	r9, r9, fp
 800aa5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa62:	f04f 0100 	mov.w	r1, #0
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa76:	4689      	mov	r9, r1
 800aa78:	4692      	mov	sl, r2
 800aa7a:	eb1b 0509 	adds.w	r5, fp, r9
 800aa7e:	eb4c 060a 	adc.w	r6, ip, sl
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	4619      	mov	r1, r3
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	f04f 0300 	mov.w	r3, #0
 800aa90:	f04f 0400 	mov.w	r4, #0
 800aa94:	0094      	lsls	r4, r2, #2
 800aa96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa9a:	008b      	lsls	r3, r1, #2
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	f7f6 f8f0 	bl	8000c88 <__aeabi_uldivmod>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b77      	ldr	r3, [pc, #476]	; (800ac8c <UART_SetConfig+0x6f4>)
 800aab0:	fba3 1302 	umull	r1, r3, r3, r2
 800aab4:	095b      	lsrs	r3, r3, #5
 800aab6:	2164      	movs	r1, #100	; 0x64
 800aab8:	fb01 f303 	mul.w	r3, r1, r3
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	3332      	adds	r3, #50	; 0x32
 800aac2:	4a72      	ldr	r2, [pc, #456]	; (800ac8c <UART_SetConfig+0x6f4>)
 800aac4:	fba2 2303 	umull	r2, r3, r2, r3
 800aac8:	095b      	lsrs	r3, r3, #5
 800aaca:	f003 020f 	and.w	r2, r3, #15
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4442      	add	r2, r8
 800aad4:	609a      	str	r2, [r3, #8]
 800aad6:	e0d0      	b.n	800ac7a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aad8:	f7fd ffe2 	bl	8008aa0 <HAL_RCC_GetPCLK1Freq>
 800aadc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	469a      	mov	sl, r3
 800aae2:	f04f 0b00 	mov.w	fp, #0
 800aae6:	46d0      	mov	r8, sl
 800aae8:	46d9      	mov	r9, fp
 800aaea:	eb18 0308 	adds.w	r3, r8, r8
 800aaee:	eb49 0409 	adc.w	r4, r9, r9
 800aaf2:	4698      	mov	r8, r3
 800aaf4:	46a1      	mov	r9, r4
 800aaf6:	eb18 080a 	adds.w	r8, r8, sl
 800aafa:	eb49 090b 	adc.w	r9, r9, fp
 800aafe:	f04f 0100 	mov.w	r1, #0
 800ab02:	f04f 0200 	mov.w	r2, #0
 800ab06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ab0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ab0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ab12:	4688      	mov	r8, r1
 800ab14:	4691      	mov	r9, r2
 800ab16:	eb1a 0508 	adds.w	r5, sl, r8
 800ab1a:	eb4b 0609 	adc.w	r6, fp, r9
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	4619      	mov	r1, r3
 800ab24:	f04f 0200 	mov.w	r2, #0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	f04f 0400 	mov.w	r4, #0
 800ab30:	0094      	lsls	r4, r2, #2
 800ab32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab36:	008b      	lsls	r3, r1, #2
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4623      	mov	r3, r4
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	4631      	mov	r1, r6
 800ab40:	f7f6 f8a2 	bl	8000c88 <__aeabi_uldivmod>
 800ab44:	4603      	mov	r3, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4b50      	ldr	r3, [pc, #320]	; (800ac8c <UART_SetConfig+0x6f4>)
 800ab4c:	fba3 2302 	umull	r2, r3, r3, r2
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	469b      	mov	fp, r3
 800ab5a:	f04f 0c00 	mov.w	ip, #0
 800ab5e:	46d9      	mov	r9, fp
 800ab60:	46e2      	mov	sl, ip
 800ab62:	eb19 0309 	adds.w	r3, r9, r9
 800ab66:	eb4a 040a 	adc.w	r4, sl, sl
 800ab6a:	4699      	mov	r9, r3
 800ab6c:	46a2      	mov	sl, r4
 800ab6e:	eb19 090b 	adds.w	r9, r9, fp
 800ab72:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab76:	f04f 0100 	mov.w	r1, #0
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab8a:	4689      	mov	r9, r1
 800ab8c:	4692      	mov	sl, r2
 800ab8e:	eb1b 0509 	adds.w	r5, fp, r9
 800ab92:	eb4c 060a 	adc.w	r6, ip, sl
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	f04f 0200 	mov.w	r2, #0
 800aba0:	f04f 0300 	mov.w	r3, #0
 800aba4:	f04f 0400 	mov.w	r4, #0
 800aba8:	0094      	lsls	r4, r2, #2
 800abaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abae:	008b      	lsls	r3, r1, #2
 800abb0:	461a      	mov	r2, r3
 800abb2:	4623      	mov	r3, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	4631      	mov	r1, r6
 800abb8:	f7f6 f866 	bl	8000c88 <__aeabi_uldivmod>
 800abbc:	4603      	mov	r3, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	461a      	mov	r2, r3
 800abc2:	4b32      	ldr	r3, [pc, #200]	; (800ac8c <UART_SetConfig+0x6f4>)
 800abc4:	fba3 1302 	umull	r1, r3, r3, r2
 800abc8:	095b      	lsrs	r3, r3, #5
 800abca:	2164      	movs	r1, #100	; 0x64
 800abcc:	fb01 f303 	mul.w	r3, r1, r3
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	3332      	adds	r3, #50	; 0x32
 800abd6:	4a2d      	ldr	r2, [pc, #180]	; (800ac8c <UART_SetConfig+0x6f4>)
 800abd8:	fba2 2303 	umull	r2, r3, r2, r3
 800abdc:	095b      	lsrs	r3, r3, #5
 800abde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abe2:	4498      	add	r8, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	469b      	mov	fp, r3
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	46d9      	mov	r9, fp
 800abee:	46e2      	mov	sl, ip
 800abf0:	eb19 0309 	adds.w	r3, r9, r9
 800abf4:	eb4a 040a 	adc.w	r4, sl, sl
 800abf8:	4699      	mov	r9, r3
 800abfa:	46a2      	mov	sl, r4
 800abfc:	eb19 090b 	adds.w	r9, r9, fp
 800ac00:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac04:	f04f 0100 	mov.w	r1, #0
 800ac08:	f04f 0200 	mov.w	r2, #0
 800ac0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac18:	4689      	mov	r9, r1
 800ac1a:	4692      	mov	sl, r2
 800ac1c:	eb1b 0509 	adds.w	r5, fp, r9
 800ac20:	eb4c 060a 	adc.w	r6, ip, sl
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	f04f 0400 	mov.w	r4, #0
 800ac36:	0094      	lsls	r4, r2, #2
 800ac38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac3c:	008b      	lsls	r3, r1, #2
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4623      	mov	r3, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	4631      	mov	r1, r6
 800ac46:	f7f6 f81f 	bl	8000c88 <__aeabi_uldivmod>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <UART_SetConfig+0x6f4>)
 800ac52:	fba3 1302 	umull	r1, r3, r3, r2
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	2164      	movs	r1, #100	; 0x64
 800ac5a:	fb01 f303 	mul.w	r3, r1, r3
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	3332      	adds	r3, #50	; 0x32
 800ac64:	4a09      	ldr	r2, [pc, #36]	; (800ac8c <UART_SetConfig+0x6f4>)
 800ac66:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4442      	add	r2, r8
 800ac76:	609a      	str	r2, [r3, #8]
}
 800ac78:	e7ff      	b.n	800ac7a <UART_SetConfig+0x6e2>
 800ac7a:	bf00      	nop
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	40011000 	.word	0x40011000
 800ac88:	40011400 	.word	0x40011400
 800ac8c:	51eb851f 	.word	0x51eb851f

0800ac90 <__errno>:
 800ac90:	4b01      	ldr	r3, [pc, #4]	; (800ac98 <__errno+0x8>)
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000040 	.word	0x20000040

0800ac9c <__libc_init_array>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	4e0d      	ldr	r6, [pc, #52]	; (800acd4 <__libc_init_array+0x38>)
 800aca0:	4c0d      	ldr	r4, [pc, #52]	; (800acd8 <__libc_init_array+0x3c>)
 800aca2:	1ba4      	subs	r4, r4, r6
 800aca4:	10a4      	asrs	r4, r4, #2
 800aca6:	2500      	movs	r5, #0
 800aca8:	42a5      	cmp	r5, r4
 800acaa:	d109      	bne.n	800acc0 <__libc_init_array+0x24>
 800acac:	4e0b      	ldr	r6, [pc, #44]	; (800acdc <__libc_init_array+0x40>)
 800acae:	4c0c      	ldr	r4, [pc, #48]	; (800ace0 <__libc_init_array+0x44>)
 800acb0:	f004 fa60 	bl	800f174 <_init>
 800acb4:	1ba4      	subs	r4, r4, r6
 800acb6:	10a4      	asrs	r4, r4, #2
 800acb8:	2500      	movs	r5, #0
 800acba:	42a5      	cmp	r5, r4
 800acbc:	d105      	bne.n	800acca <__libc_init_array+0x2e>
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acc4:	4798      	blx	r3
 800acc6:	3501      	adds	r5, #1
 800acc8:	e7ee      	b.n	800aca8 <__libc_init_array+0xc>
 800acca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acce:	4798      	blx	r3
 800acd0:	3501      	adds	r5, #1
 800acd2:	e7f2      	b.n	800acba <__libc_init_array+0x1e>
 800acd4:	0800f530 	.word	0x0800f530
 800acd8:	0800f530 	.word	0x0800f530
 800acdc:	0800f530 	.word	0x0800f530
 800ace0:	0800f534 	.word	0x0800f534

0800ace4 <memcpy>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	1e43      	subs	r3, r0, #1
 800ace8:	440a      	add	r2, r1
 800acea:	4291      	cmp	r1, r2
 800acec:	d100      	bne.n	800acf0 <memcpy+0xc>
 800acee:	bd10      	pop	{r4, pc}
 800acf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acf8:	e7f7      	b.n	800acea <memcpy+0x6>

0800acfa <memset>:
 800acfa:	4402      	add	r2, r0
 800acfc:	4603      	mov	r3, r0
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d100      	bne.n	800ad04 <memset+0xa>
 800ad02:	4770      	bx	lr
 800ad04:	f803 1b01 	strb.w	r1, [r3], #1
 800ad08:	e7f9      	b.n	800acfe <memset+0x4>

0800ad0a <__cvt>:
 800ad0a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0e:	ec55 4b10 	vmov	r4, r5, d0
 800ad12:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ad14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	4691      	mov	r9, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	bfb8      	it	lt
 800ad22:	4622      	movlt	r2, r4
 800ad24:	462b      	mov	r3, r5
 800ad26:	f027 0720 	bic.w	r7, r7, #32
 800ad2a:	bfbb      	ittet	lt
 800ad2c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad30:	461d      	movlt	r5, r3
 800ad32:	2300      	movge	r3, #0
 800ad34:	232d      	movlt	r3, #45	; 0x2d
 800ad36:	bfb8      	it	lt
 800ad38:	4614      	movlt	r4, r2
 800ad3a:	2f46      	cmp	r7, #70	; 0x46
 800ad3c:	700b      	strb	r3, [r1, #0]
 800ad3e:	d004      	beq.n	800ad4a <__cvt+0x40>
 800ad40:	2f45      	cmp	r7, #69	; 0x45
 800ad42:	d100      	bne.n	800ad46 <__cvt+0x3c>
 800ad44:	3601      	adds	r6, #1
 800ad46:	2102      	movs	r1, #2
 800ad48:	e000      	b.n	800ad4c <__cvt+0x42>
 800ad4a:	2103      	movs	r1, #3
 800ad4c:	ab03      	add	r3, sp, #12
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	ab02      	add	r3, sp, #8
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	4632      	mov	r2, r6
 800ad56:	4653      	mov	r3, sl
 800ad58:	ec45 4b10 	vmov	d0, r4, r5
 800ad5c:	f001 feb4 	bl	800cac8 <_dtoa_r>
 800ad60:	2f47      	cmp	r7, #71	; 0x47
 800ad62:	4680      	mov	r8, r0
 800ad64:	d102      	bne.n	800ad6c <__cvt+0x62>
 800ad66:	f019 0f01 	tst.w	r9, #1
 800ad6a:	d026      	beq.n	800adba <__cvt+0xb0>
 800ad6c:	2f46      	cmp	r7, #70	; 0x46
 800ad6e:	eb08 0906 	add.w	r9, r8, r6
 800ad72:	d111      	bne.n	800ad98 <__cvt+0x8e>
 800ad74:	f898 3000 	ldrb.w	r3, [r8]
 800ad78:	2b30      	cmp	r3, #48	; 0x30
 800ad7a:	d10a      	bne.n	800ad92 <__cvt+0x88>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4620      	mov	r0, r4
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7f5 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad88:	b918      	cbnz	r0, 800ad92 <__cvt+0x88>
 800ad8a:	f1c6 0601 	rsb	r6, r6, #1
 800ad8e:	f8ca 6000 	str.w	r6, [sl]
 800ad92:	f8da 3000 	ldr.w	r3, [sl]
 800ad96:	4499      	add	r9, r3
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	4629      	mov	r1, r5
 800ada0:	f7f5 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 800ada4:	b938      	cbnz	r0, 800adb6 <__cvt+0xac>
 800ada6:	2230      	movs	r2, #48	; 0x30
 800ada8:	9b03      	ldr	r3, [sp, #12]
 800adaa:	454b      	cmp	r3, r9
 800adac:	d205      	bcs.n	800adba <__cvt+0xb0>
 800adae:	1c59      	adds	r1, r3, #1
 800adb0:	9103      	str	r1, [sp, #12]
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e7f8      	b.n	800ada8 <__cvt+0x9e>
 800adb6:	f8cd 900c 	str.w	r9, [sp, #12]
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adbe:	eba3 0308 	sub.w	r3, r3, r8
 800adc2:	4640      	mov	r0, r8
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	b004      	add	sp, #16
 800adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800adcc <__exponent>:
 800adcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adce:	2900      	cmp	r1, #0
 800add0:	4604      	mov	r4, r0
 800add2:	bfba      	itte	lt
 800add4:	4249      	neglt	r1, r1
 800add6:	232d      	movlt	r3, #45	; 0x2d
 800add8:	232b      	movge	r3, #43	; 0x2b
 800adda:	2909      	cmp	r1, #9
 800addc:	f804 2b02 	strb.w	r2, [r4], #2
 800ade0:	7043      	strb	r3, [r0, #1]
 800ade2:	dd20      	ble.n	800ae26 <__exponent+0x5a>
 800ade4:	f10d 0307 	add.w	r3, sp, #7
 800ade8:	461f      	mov	r7, r3
 800adea:	260a      	movs	r6, #10
 800adec:	fb91 f5f6 	sdiv	r5, r1, r6
 800adf0:	fb06 1115 	mls	r1, r6, r5, r1
 800adf4:	3130      	adds	r1, #48	; 0x30
 800adf6:	2d09      	cmp	r5, #9
 800adf8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adfc:	f103 32ff 	add.w	r2, r3, #4294967295
 800ae00:	4629      	mov	r1, r5
 800ae02:	dc09      	bgt.n	800ae18 <__exponent+0x4c>
 800ae04:	3130      	adds	r1, #48	; 0x30
 800ae06:	3b02      	subs	r3, #2
 800ae08:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ae0c:	42bb      	cmp	r3, r7
 800ae0e:	4622      	mov	r2, r4
 800ae10:	d304      	bcc.n	800ae1c <__exponent+0x50>
 800ae12:	1a10      	subs	r0, r2, r0
 800ae14:	b003      	add	sp, #12
 800ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae18:	4613      	mov	r3, r2
 800ae1a:	e7e7      	b.n	800adec <__exponent+0x20>
 800ae1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae20:	f804 2b01 	strb.w	r2, [r4], #1
 800ae24:	e7f2      	b.n	800ae0c <__exponent+0x40>
 800ae26:	2330      	movs	r3, #48	; 0x30
 800ae28:	4419      	add	r1, r3
 800ae2a:	7083      	strb	r3, [r0, #2]
 800ae2c:	1d02      	adds	r2, r0, #4
 800ae2e:	70c1      	strb	r1, [r0, #3]
 800ae30:	e7ef      	b.n	800ae12 <__exponent+0x46>
	...

0800ae34 <_printf_float>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	b08d      	sub	sp, #52	; 0x34
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ae40:	4616      	mov	r6, r2
 800ae42:	461f      	mov	r7, r3
 800ae44:	4605      	mov	r5, r0
 800ae46:	f003 f89d 	bl	800df84 <_localeconv_r>
 800ae4a:	6803      	ldr	r3, [r0, #0]
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7f5 f9be 	bl	80001d0 <strlen>
 800ae54:	2300      	movs	r3, #0
 800ae56:	930a      	str	r3, [sp, #40]	; 0x28
 800ae58:	f8d8 3000 	ldr.w	r3, [r8]
 800ae5c:	9005      	str	r0, [sp, #20]
 800ae5e:	3307      	adds	r3, #7
 800ae60:	f023 0307 	bic.w	r3, r3, #7
 800ae64:	f103 0208 	add.w	r2, r3, #8
 800ae68:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae6c:	f8d4 b000 	ldr.w	fp, [r4]
 800ae70:	f8c8 2000 	str.w	r2, [r8]
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae7c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae84:	9307      	str	r3, [sp, #28]
 800ae86:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8e:	4ba7      	ldr	r3, [pc, #668]	; (800b12c <_printf_float+0x2f8>)
 800ae90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae94:	f7f5 fe4a 	bl	8000b2c <__aeabi_dcmpun>
 800ae98:	bb70      	cbnz	r0, 800aef8 <_printf_float+0xc4>
 800ae9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9e:	4ba3      	ldr	r3, [pc, #652]	; (800b12c <_printf_float+0x2f8>)
 800aea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aea4:	f7f5 fe24 	bl	8000af0 <__aeabi_dcmple>
 800aea8:	bb30      	cbnz	r0, 800aef8 <_printf_float+0xc4>
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2300      	movs	r3, #0
 800aeae:	4640      	mov	r0, r8
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	f7f5 fe13 	bl	8000adc <__aeabi_dcmplt>
 800aeb6:	b110      	cbz	r0, 800aebe <_printf_float+0x8a>
 800aeb8:	232d      	movs	r3, #45	; 0x2d
 800aeba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aebe:	4a9c      	ldr	r2, [pc, #624]	; (800b130 <_printf_float+0x2fc>)
 800aec0:	4b9c      	ldr	r3, [pc, #624]	; (800b134 <_printf_float+0x300>)
 800aec2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800aec6:	bf8c      	ite	hi
 800aec8:	4690      	movhi	r8, r2
 800aeca:	4698      	movls	r8, r3
 800aecc:	2303      	movs	r3, #3
 800aece:	f02b 0204 	bic.w	r2, fp, #4
 800aed2:	6123      	str	r3, [r4, #16]
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	f04f 0900 	mov.w	r9, #0
 800aeda:	9700      	str	r7, [sp, #0]
 800aedc:	4633      	mov	r3, r6
 800aede:	aa0b      	add	r2, sp, #44	; 0x2c
 800aee0:	4621      	mov	r1, r4
 800aee2:	4628      	mov	r0, r5
 800aee4:	f000 f9e6 	bl	800b2b4 <_printf_common>
 800aee8:	3001      	adds	r0, #1
 800aeea:	f040 808d 	bne.w	800b008 <_printf_float+0x1d4>
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	b00d      	add	sp, #52	; 0x34
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	4642      	mov	r2, r8
 800aefa:	464b      	mov	r3, r9
 800aefc:	4640      	mov	r0, r8
 800aefe:	4649      	mov	r1, r9
 800af00:	f7f5 fe14 	bl	8000b2c <__aeabi_dcmpun>
 800af04:	b110      	cbz	r0, 800af0c <_printf_float+0xd8>
 800af06:	4a8c      	ldr	r2, [pc, #560]	; (800b138 <_printf_float+0x304>)
 800af08:	4b8c      	ldr	r3, [pc, #560]	; (800b13c <_printf_float+0x308>)
 800af0a:	e7da      	b.n	800aec2 <_printf_float+0x8e>
 800af0c:	6861      	ldr	r1, [r4, #4]
 800af0e:	1c4b      	adds	r3, r1, #1
 800af10:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800af14:	a80a      	add	r0, sp, #40	; 0x28
 800af16:	d13e      	bne.n	800af96 <_printf_float+0x162>
 800af18:	2306      	movs	r3, #6
 800af1a:	6063      	str	r3, [r4, #4]
 800af1c:	2300      	movs	r3, #0
 800af1e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800af22:	ab09      	add	r3, sp, #36	; 0x24
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	ec49 8b10 	vmov	d0, r8, r9
 800af2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af2e:	6022      	str	r2, [r4, #0]
 800af30:	f8cd a004 	str.w	sl, [sp, #4]
 800af34:	6861      	ldr	r1, [r4, #4]
 800af36:	4628      	mov	r0, r5
 800af38:	f7ff fee7 	bl	800ad0a <__cvt>
 800af3c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800af40:	2b47      	cmp	r3, #71	; 0x47
 800af42:	4680      	mov	r8, r0
 800af44:	d109      	bne.n	800af5a <_printf_float+0x126>
 800af46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af48:	1cd8      	adds	r0, r3, #3
 800af4a:	db02      	blt.n	800af52 <_printf_float+0x11e>
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	4293      	cmp	r3, r2
 800af50:	dd47      	ble.n	800afe2 <_printf_float+0x1ae>
 800af52:	f1aa 0a02 	sub.w	sl, sl, #2
 800af56:	fa5f fa8a 	uxtb.w	sl, sl
 800af5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af60:	d824      	bhi.n	800afac <_printf_float+0x178>
 800af62:	3901      	subs	r1, #1
 800af64:	4652      	mov	r2, sl
 800af66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af6a:	9109      	str	r1, [sp, #36]	; 0x24
 800af6c:	f7ff ff2e 	bl	800adcc <__exponent>
 800af70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af72:	1813      	adds	r3, r2, r0
 800af74:	2a01      	cmp	r2, #1
 800af76:	4681      	mov	r9, r0
 800af78:	6123      	str	r3, [r4, #16]
 800af7a:	dc02      	bgt.n	800af82 <_printf_float+0x14e>
 800af7c:	6822      	ldr	r2, [r4, #0]
 800af7e:	07d1      	lsls	r1, r2, #31
 800af80:	d501      	bpl.n	800af86 <_printf_float+0x152>
 800af82:	3301      	adds	r3, #1
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0a5      	beq.n	800aeda <_printf_float+0xa6>
 800af8e:	232d      	movs	r3, #45	; 0x2d
 800af90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af94:	e7a1      	b.n	800aeda <_printf_float+0xa6>
 800af96:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800af9a:	f000 8177 	beq.w	800b28c <_printf_float+0x458>
 800af9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800afa2:	d1bb      	bne.n	800af1c <_printf_float+0xe8>
 800afa4:	2900      	cmp	r1, #0
 800afa6:	d1b9      	bne.n	800af1c <_printf_float+0xe8>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e7b6      	b.n	800af1a <_printf_float+0xe6>
 800afac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800afb0:	d119      	bne.n	800afe6 <_printf_float+0x1b2>
 800afb2:	2900      	cmp	r1, #0
 800afb4:	6863      	ldr	r3, [r4, #4]
 800afb6:	dd0c      	ble.n	800afd2 <_printf_float+0x19e>
 800afb8:	6121      	str	r1, [r4, #16]
 800afba:	b913      	cbnz	r3, 800afc2 <_printf_float+0x18e>
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	07d2      	lsls	r2, r2, #31
 800afc0:	d502      	bpl.n	800afc8 <_printf_float+0x194>
 800afc2:	3301      	adds	r3, #1
 800afc4:	440b      	add	r3, r1
 800afc6:	6123      	str	r3, [r4, #16]
 800afc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afca:	65a3      	str	r3, [r4, #88]	; 0x58
 800afcc:	f04f 0900 	mov.w	r9, #0
 800afd0:	e7d9      	b.n	800af86 <_printf_float+0x152>
 800afd2:	b913      	cbnz	r3, 800afda <_printf_float+0x1a6>
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	07d0      	lsls	r0, r2, #31
 800afd8:	d501      	bpl.n	800afde <_printf_float+0x1aa>
 800afda:	3302      	adds	r3, #2
 800afdc:	e7f3      	b.n	800afc6 <_printf_float+0x192>
 800afde:	2301      	movs	r3, #1
 800afe0:	e7f1      	b.n	800afc6 <_printf_float+0x192>
 800afe2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800afe6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800afea:	4293      	cmp	r3, r2
 800afec:	db05      	blt.n	800affa <_printf_float+0x1c6>
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	07d1      	lsls	r1, r2, #31
 800aff4:	d5e8      	bpl.n	800afc8 <_printf_float+0x194>
 800aff6:	3301      	adds	r3, #1
 800aff8:	e7e5      	b.n	800afc6 <_printf_float+0x192>
 800affa:	2b00      	cmp	r3, #0
 800affc:	bfd4      	ite	le
 800affe:	f1c3 0302 	rsble	r3, r3, #2
 800b002:	2301      	movgt	r3, #1
 800b004:	4413      	add	r3, r2
 800b006:	e7de      	b.n	800afc6 <_printf_float+0x192>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	055a      	lsls	r2, r3, #21
 800b00c:	d407      	bmi.n	800b01e <_printf_float+0x1ea>
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	4642      	mov	r2, r8
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	d12b      	bne.n	800b074 <_printf_float+0x240>
 800b01c:	e767      	b.n	800aeee <_printf_float+0xba>
 800b01e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b022:	f240 80dc 	bls.w	800b1de <_printf_float+0x3aa>
 800b026:	2200      	movs	r2, #0
 800b028:	2300      	movs	r3, #0
 800b02a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b02e:	f7f5 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b032:	2800      	cmp	r0, #0
 800b034:	d033      	beq.n	800b09e <_printf_float+0x26a>
 800b036:	2301      	movs	r3, #1
 800b038:	4a41      	ldr	r2, [pc, #260]	; (800b140 <_printf_float+0x30c>)
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f af54 	beq.w	800aeee <_printf_float+0xba>
 800b046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b04a:	429a      	cmp	r2, r3
 800b04c:	db02      	blt.n	800b054 <_printf_float+0x220>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	07d8      	lsls	r0, r3, #31
 800b052:	d50f      	bpl.n	800b074 <_printf_float+0x240>
 800b054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b058:	4631      	mov	r1, r6
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b8      	blx	r7
 800b05e:	3001      	adds	r0, #1
 800b060:	f43f af45 	beq.w	800aeee <_printf_float+0xba>
 800b064:	f04f 0800 	mov.w	r8, #0
 800b068:	f104 091a 	add.w	r9, r4, #26
 800b06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b06e:	3b01      	subs	r3, #1
 800b070:	4543      	cmp	r3, r8
 800b072:	dc09      	bgt.n	800b088 <_printf_float+0x254>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	079b      	lsls	r3, r3, #30
 800b078:	f100 8103 	bmi.w	800b282 <_printf_float+0x44e>
 800b07c:	68e0      	ldr	r0, [r4, #12]
 800b07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b080:	4298      	cmp	r0, r3
 800b082:	bfb8      	it	lt
 800b084:	4618      	movlt	r0, r3
 800b086:	e734      	b.n	800aef2 <_printf_float+0xbe>
 800b088:	2301      	movs	r3, #1
 800b08a:	464a      	mov	r2, r9
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	47b8      	blx	r7
 800b092:	3001      	adds	r0, #1
 800b094:	f43f af2b 	beq.w	800aeee <_printf_float+0xba>
 800b098:	f108 0801 	add.w	r8, r8, #1
 800b09c:	e7e6      	b.n	800b06c <_printf_float+0x238>
 800b09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dc2b      	bgt.n	800b0fc <_printf_float+0x2c8>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	4a26      	ldr	r2, [pc, #152]	; (800b140 <_printf_float+0x30c>)
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	47b8      	blx	r7
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f43f af1d 	beq.w	800aeee <_printf_float+0xba>
 800b0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b6:	b923      	cbnz	r3, 800b0c2 <_printf_float+0x28e>
 800b0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ba:	b913      	cbnz	r3, 800b0c2 <_printf_float+0x28e>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	07d9      	lsls	r1, r3, #31
 800b0c0:	d5d8      	bpl.n	800b074 <_printf_float+0x240>
 800b0c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f af0e 	beq.w	800aeee <_printf_float+0xba>
 800b0d2:	f04f 0900 	mov.w	r9, #0
 800b0d6:	f104 0a1a 	add.w	sl, r4, #26
 800b0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0dc:	425b      	negs	r3, r3
 800b0de:	454b      	cmp	r3, r9
 800b0e0:	dc01      	bgt.n	800b0e6 <_printf_float+0x2b2>
 800b0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e4:	e794      	b.n	800b010 <_printf_float+0x1dc>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f43f aefc 	beq.w	800aeee <_printf_float+0xba>
 800b0f6:	f109 0901 	add.w	r9, r9, #1
 800b0fa:	e7ee      	b.n	800b0da <_printf_float+0x2a6>
 800b0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b100:	429a      	cmp	r2, r3
 800b102:	bfa8      	it	ge
 800b104:	461a      	movge	r2, r3
 800b106:	2a00      	cmp	r2, #0
 800b108:	4691      	mov	r9, r2
 800b10a:	dd07      	ble.n	800b11c <_printf_float+0x2e8>
 800b10c:	4613      	mov	r3, r2
 800b10e:	4631      	mov	r1, r6
 800b110:	4642      	mov	r2, r8
 800b112:	4628      	mov	r0, r5
 800b114:	47b8      	blx	r7
 800b116:	3001      	adds	r0, #1
 800b118:	f43f aee9 	beq.w	800aeee <_printf_float+0xba>
 800b11c:	f104 031a 	add.w	r3, r4, #26
 800b120:	f04f 0b00 	mov.w	fp, #0
 800b124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b128:	9306      	str	r3, [sp, #24]
 800b12a:	e015      	b.n	800b158 <_printf_float+0x324>
 800b12c:	7fefffff 	.word	0x7fefffff
 800b130:	0800f210 	.word	0x0800f210
 800b134:	0800f20c 	.word	0x0800f20c
 800b138:	0800f218 	.word	0x0800f218
 800b13c:	0800f214 	.word	0x0800f214
 800b140:	0800f21c 	.word	0x0800f21c
 800b144:	2301      	movs	r3, #1
 800b146:	9a06      	ldr	r2, [sp, #24]
 800b148:	4631      	mov	r1, r6
 800b14a:	4628      	mov	r0, r5
 800b14c:	47b8      	blx	r7
 800b14e:	3001      	adds	r0, #1
 800b150:	f43f aecd 	beq.w	800aeee <_printf_float+0xba>
 800b154:	f10b 0b01 	add.w	fp, fp, #1
 800b158:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b15c:	ebaa 0309 	sub.w	r3, sl, r9
 800b160:	455b      	cmp	r3, fp
 800b162:	dcef      	bgt.n	800b144 <_printf_float+0x310>
 800b164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b168:	429a      	cmp	r2, r3
 800b16a:	44d0      	add	r8, sl
 800b16c:	db15      	blt.n	800b19a <_printf_float+0x366>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	07da      	lsls	r2, r3, #31
 800b172:	d412      	bmi.n	800b19a <_printf_float+0x366>
 800b174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b176:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b178:	eba3 020a 	sub.w	r2, r3, sl
 800b17c:	eba3 0a01 	sub.w	sl, r3, r1
 800b180:	4592      	cmp	sl, r2
 800b182:	bfa8      	it	ge
 800b184:	4692      	movge	sl, r2
 800b186:	f1ba 0f00 	cmp.w	sl, #0
 800b18a:	dc0e      	bgt.n	800b1aa <_printf_float+0x376>
 800b18c:	f04f 0800 	mov.w	r8, #0
 800b190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b194:	f104 091a 	add.w	r9, r4, #26
 800b198:	e019      	b.n	800b1ce <_printf_float+0x39a>
 800b19a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d1e5      	bne.n	800b174 <_printf_float+0x340>
 800b1a8:	e6a1      	b.n	800aeee <_printf_float+0xba>
 800b1aa:	4653      	mov	r3, sl
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d1e9      	bne.n	800b18c <_printf_float+0x358>
 800b1b8:	e699      	b.n	800aeee <_printf_float+0xba>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	464a      	mov	r2, r9
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b8      	blx	r7
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	f43f ae92 	beq.w	800aeee <_printf_float+0xba>
 800b1ca:	f108 0801 	add.w	r8, r8, #1
 800b1ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1d2:	1a9b      	subs	r3, r3, r2
 800b1d4:	eba3 030a 	sub.w	r3, r3, sl
 800b1d8:	4543      	cmp	r3, r8
 800b1da:	dcee      	bgt.n	800b1ba <_printf_float+0x386>
 800b1dc:	e74a      	b.n	800b074 <_printf_float+0x240>
 800b1de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1e0:	2a01      	cmp	r2, #1
 800b1e2:	dc01      	bgt.n	800b1e8 <_printf_float+0x3b4>
 800b1e4:	07db      	lsls	r3, r3, #31
 800b1e6:	d53a      	bpl.n	800b25e <_printf_float+0x42a>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f43f ae7b 	beq.w	800aeee <_printf_float+0xba>
 800b1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f108 0801 	add.w	r8, r8, #1
 800b208:	f43f ae71 	beq.w	800aeee <_printf_float+0xba>
 800b20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20e:	2200      	movs	r2, #0
 800b210:	f103 3aff 	add.w	sl, r3, #4294967295
 800b214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b218:	2300      	movs	r3, #0
 800b21a:	f7f5 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800b21e:	b9c8      	cbnz	r0, 800b254 <_printf_float+0x420>
 800b220:	4653      	mov	r3, sl
 800b222:	4642      	mov	r2, r8
 800b224:	4631      	mov	r1, r6
 800b226:	4628      	mov	r0, r5
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	d10e      	bne.n	800b24c <_printf_float+0x418>
 800b22e:	e65e      	b.n	800aeee <_printf_float+0xba>
 800b230:	2301      	movs	r3, #1
 800b232:	4652      	mov	r2, sl
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	47b8      	blx	r7
 800b23a:	3001      	adds	r0, #1
 800b23c:	f43f ae57 	beq.w	800aeee <_printf_float+0xba>
 800b240:	f108 0801 	add.w	r8, r8, #1
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	3b01      	subs	r3, #1
 800b248:	4543      	cmp	r3, r8
 800b24a:	dcf1      	bgt.n	800b230 <_printf_float+0x3fc>
 800b24c:	464b      	mov	r3, r9
 800b24e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b252:	e6de      	b.n	800b012 <_printf_float+0x1de>
 800b254:	f04f 0800 	mov.w	r8, #0
 800b258:	f104 0a1a 	add.w	sl, r4, #26
 800b25c:	e7f2      	b.n	800b244 <_printf_float+0x410>
 800b25e:	2301      	movs	r3, #1
 800b260:	e7df      	b.n	800b222 <_printf_float+0x3ee>
 800b262:	2301      	movs	r3, #1
 800b264:	464a      	mov	r2, r9
 800b266:	4631      	mov	r1, r6
 800b268:	4628      	mov	r0, r5
 800b26a:	47b8      	blx	r7
 800b26c:	3001      	adds	r0, #1
 800b26e:	f43f ae3e 	beq.w	800aeee <_printf_float+0xba>
 800b272:	f108 0801 	add.w	r8, r8, #1
 800b276:	68e3      	ldr	r3, [r4, #12]
 800b278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b27a:	1a9b      	subs	r3, r3, r2
 800b27c:	4543      	cmp	r3, r8
 800b27e:	dcf0      	bgt.n	800b262 <_printf_float+0x42e>
 800b280:	e6fc      	b.n	800b07c <_printf_float+0x248>
 800b282:	f04f 0800 	mov.w	r8, #0
 800b286:	f104 0919 	add.w	r9, r4, #25
 800b28a:	e7f4      	b.n	800b276 <_printf_float+0x442>
 800b28c:	2900      	cmp	r1, #0
 800b28e:	f43f ae8b 	beq.w	800afa8 <_printf_float+0x174>
 800b292:	2300      	movs	r3, #0
 800b294:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b298:	ab09      	add	r3, sp, #36	; 0x24
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	ec49 8b10 	vmov	d0, r8, r9
 800b2a0:	6022      	str	r2, [r4, #0]
 800b2a2:	f8cd a004 	str.w	sl, [sp, #4]
 800b2a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7ff fd2d 	bl	800ad0a <__cvt>
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	e648      	b.n	800af46 <_printf_float+0x112>

0800b2b4 <_printf_common>:
 800b2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b8:	4691      	mov	r9, r2
 800b2ba:	461f      	mov	r7, r3
 800b2bc:	688a      	ldr	r2, [r1, #8]
 800b2be:	690b      	ldr	r3, [r1, #16]
 800b2c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	bfb8      	it	lt
 800b2c8:	4613      	movlt	r3, r2
 800b2ca:	f8c9 3000 	str.w	r3, [r9]
 800b2ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	b112      	cbz	r2, 800b2de <_printf_common+0x2a>
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f8c9 3000 	str.w	r3, [r9]
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	0699      	lsls	r1, r3, #26
 800b2e2:	bf42      	ittt	mi
 800b2e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b2e8:	3302      	addmi	r3, #2
 800b2ea:	f8c9 3000 	strmi.w	r3, [r9]
 800b2ee:	6825      	ldr	r5, [r4, #0]
 800b2f0:	f015 0506 	ands.w	r5, r5, #6
 800b2f4:	d107      	bne.n	800b306 <_printf_common+0x52>
 800b2f6:	f104 0a19 	add.w	sl, r4, #25
 800b2fa:	68e3      	ldr	r3, [r4, #12]
 800b2fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b300:	1a9b      	subs	r3, r3, r2
 800b302:	42ab      	cmp	r3, r5
 800b304:	dc28      	bgt.n	800b358 <_printf_common+0xa4>
 800b306:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	3300      	adds	r3, #0
 800b30e:	bf18      	it	ne
 800b310:	2301      	movne	r3, #1
 800b312:	0692      	lsls	r2, r2, #26
 800b314:	d42d      	bmi.n	800b372 <_printf_common+0xbe>
 800b316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b31a:	4639      	mov	r1, r7
 800b31c:	4630      	mov	r0, r6
 800b31e:	47c0      	blx	r8
 800b320:	3001      	adds	r0, #1
 800b322:	d020      	beq.n	800b366 <_printf_common+0xb2>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	68e5      	ldr	r5, [r4, #12]
 800b328:	f8d9 2000 	ldr.w	r2, [r9]
 800b32c:	f003 0306 	and.w	r3, r3, #6
 800b330:	2b04      	cmp	r3, #4
 800b332:	bf08      	it	eq
 800b334:	1aad      	subeq	r5, r5, r2
 800b336:	68a3      	ldr	r3, [r4, #8]
 800b338:	6922      	ldr	r2, [r4, #16]
 800b33a:	bf0c      	ite	eq
 800b33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b340:	2500      	movne	r5, #0
 800b342:	4293      	cmp	r3, r2
 800b344:	bfc4      	itt	gt
 800b346:	1a9b      	subgt	r3, r3, r2
 800b348:	18ed      	addgt	r5, r5, r3
 800b34a:	f04f 0900 	mov.w	r9, #0
 800b34e:	341a      	adds	r4, #26
 800b350:	454d      	cmp	r5, r9
 800b352:	d11a      	bne.n	800b38a <_printf_common+0xd6>
 800b354:	2000      	movs	r0, #0
 800b356:	e008      	b.n	800b36a <_printf_common+0xb6>
 800b358:	2301      	movs	r3, #1
 800b35a:	4652      	mov	r2, sl
 800b35c:	4639      	mov	r1, r7
 800b35e:	4630      	mov	r0, r6
 800b360:	47c0      	blx	r8
 800b362:	3001      	adds	r0, #1
 800b364:	d103      	bne.n	800b36e <_printf_common+0xba>
 800b366:	f04f 30ff 	mov.w	r0, #4294967295
 800b36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36e:	3501      	adds	r5, #1
 800b370:	e7c3      	b.n	800b2fa <_printf_common+0x46>
 800b372:	18e1      	adds	r1, r4, r3
 800b374:	1c5a      	adds	r2, r3, #1
 800b376:	2030      	movs	r0, #48	; 0x30
 800b378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b37c:	4422      	add	r2, r4
 800b37e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b386:	3302      	adds	r3, #2
 800b388:	e7c5      	b.n	800b316 <_printf_common+0x62>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4622      	mov	r2, r4
 800b38e:	4639      	mov	r1, r7
 800b390:	4630      	mov	r0, r6
 800b392:	47c0      	blx	r8
 800b394:	3001      	adds	r0, #1
 800b396:	d0e6      	beq.n	800b366 <_printf_common+0xb2>
 800b398:	f109 0901 	add.w	r9, r9, #1
 800b39c:	e7d8      	b.n	800b350 <_printf_common+0x9c>
	...

0800b3a0 <_printf_i>:
 800b3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	7e09      	ldrb	r1, [r1, #24]
 800b3ac:	b085      	sub	sp, #20
 800b3ae:	296e      	cmp	r1, #110	; 0x6e
 800b3b0:	4617      	mov	r7, r2
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	4698      	mov	r8, r3
 800b3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3b8:	f000 80b3 	beq.w	800b522 <_printf_i+0x182>
 800b3bc:	d822      	bhi.n	800b404 <_printf_i+0x64>
 800b3be:	2963      	cmp	r1, #99	; 0x63
 800b3c0:	d036      	beq.n	800b430 <_printf_i+0x90>
 800b3c2:	d80a      	bhi.n	800b3da <_printf_i+0x3a>
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	f000 80b9 	beq.w	800b53c <_printf_i+0x19c>
 800b3ca:	2958      	cmp	r1, #88	; 0x58
 800b3cc:	f000 8083 	beq.w	800b4d6 <_printf_i+0x136>
 800b3d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b3d8:	e032      	b.n	800b440 <_printf_i+0xa0>
 800b3da:	2964      	cmp	r1, #100	; 0x64
 800b3dc:	d001      	beq.n	800b3e2 <_printf_i+0x42>
 800b3de:	2969      	cmp	r1, #105	; 0x69
 800b3e0:	d1f6      	bne.n	800b3d0 <_printf_i+0x30>
 800b3e2:	6820      	ldr	r0, [r4, #0]
 800b3e4:	6813      	ldr	r3, [r2, #0]
 800b3e6:	0605      	lsls	r5, r0, #24
 800b3e8:	f103 0104 	add.w	r1, r3, #4
 800b3ec:	d52a      	bpl.n	800b444 <_printf_i+0xa4>
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6011      	str	r1, [r2, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da03      	bge.n	800b3fe <_printf_i+0x5e>
 800b3f6:	222d      	movs	r2, #45	; 0x2d
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b3fe:	486f      	ldr	r0, [pc, #444]	; (800b5bc <_printf_i+0x21c>)
 800b400:	220a      	movs	r2, #10
 800b402:	e039      	b.n	800b478 <_printf_i+0xd8>
 800b404:	2973      	cmp	r1, #115	; 0x73
 800b406:	f000 809d 	beq.w	800b544 <_printf_i+0x1a4>
 800b40a:	d808      	bhi.n	800b41e <_printf_i+0x7e>
 800b40c:	296f      	cmp	r1, #111	; 0x6f
 800b40e:	d020      	beq.n	800b452 <_printf_i+0xb2>
 800b410:	2970      	cmp	r1, #112	; 0x70
 800b412:	d1dd      	bne.n	800b3d0 <_printf_i+0x30>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	f043 0320 	orr.w	r3, r3, #32
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	e003      	b.n	800b426 <_printf_i+0x86>
 800b41e:	2975      	cmp	r1, #117	; 0x75
 800b420:	d017      	beq.n	800b452 <_printf_i+0xb2>
 800b422:	2978      	cmp	r1, #120	; 0x78
 800b424:	d1d4      	bne.n	800b3d0 <_printf_i+0x30>
 800b426:	2378      	movs	r3, #120	; 0x78
 800b428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b42c:	4864      	ldr	r0, [pc, #400]	; (800b5c0 <_printf_i+0x220>)
 800b42e:	e055      	b.n	800b4dc <_printf_i+0x13c>
 800b430:	6813      	ldr	r3, [r2, #0]
 800b432:	1d19      	adds	r1, r3, #4
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6011      	str	r1, [r2, #0]
 800b438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b43c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b440:	2301      	movs	r3, #1
 800b442:	e08c      	b.n	800b55e <_printf_i+0x1be>
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6011      	str	r1, [r2, #0]
 800b448:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b44c:	bf18      	it	ne
 800b44e:	b21b      	sxthne	r3, r3
 800b450:	e7cf      	b.n	800b3f2 <_printf_i+0x52>
 800b452:	6813      	ldr	r3, [r2, #0]
 800b454:	6825      	ldr	r5, [r4, #0]
 800b456:	1d18      	adds	r0, r3, #4
 800b458:	6010      	str	r0, [r2, #0]
 800b45a:	0628      	lsls	r0, r5, #24
 800b45c:	d501      	bpl.n	800b462 <_printf_i+0xc2>
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	e002      	b.n	800b468 <_printf_i+0xc8>
 800b462:	0668      	lsls	r0, r5, #25
 800b464:	d5fb      	bpl.n	800b45e <_printf_i+0xbe>
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	4854      	ldr	r0, [pc, #336]	; (800b5bc <_printf_i+0x21c>)
 800b46a:	296f      	cmp	r1, #111	; 0x6f
 800b46c:	bf14      	ite	ne
 800b46e:	220a      	movne	r2, #10
 800b470:	2208      	moveq	r2, #8
 800b472:	2100      	movs	r1, #0
 800b474:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b478:	6865      	ldr	r5, [r4, #4]
 800b47a:	60a5      	str	r5, [r4, #8]
 800b47c:	2d00      	cmp	r5, #0
 800b47e:	f2c0 8095 	blt.w	800b5ac <_printf_i+0x20c>
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	f021 0104 	bic.w	r1, r1, #4
 800b488:	6021      	str	r1, [r4, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d13d      	bne.n	800b50a <_printf_i+0x16a>
 800b48e:	2d00      	cmp	r5, #0
 800b490:	f040 808e 	bne.w	800b5b0 <_printf_i+0x210>
 800b494:	4665      	mov	r5, ip
 800b496:	2a08      	cmp	r2, #8
 800b498:	d10b      	bne.n	800b4b2 <_printf_i+0x112>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	07db      	lsls	r3, r3, #31
 800b49e:	d508      	bpl.n	800b4b2 <_printf_i+0x112>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	6862      	ldr	r2, [r4, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	bfde      	ittt	le
 800b4a8:	2330      	movle	r3, #48	; 0x30
 800b4aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4b2:	ebac 0305 	sub.w	r3, ip, r5
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	f8cd 8000 	str.w	r8, [sp]
 800b4bc:	463b      	mov	r3, r7
 800b4be:	aa03      	add	r2, sp, #12
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7ff fef6 	bl	800b2b4 <_printf_common>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d14d      	bne.n	800b568 <_printf_i+0x1c8>
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	b005      	add	sp, #20
 800b4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d6:	4839      	ldr	r0, [pc, #228]	; (800b5bc <_printf_i+0x21c>)
 800b4d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b4dc:	6813      	ldr	r3, [r2, #0]
 800b4de:	6821      	ldr	r1, [r4, #0]
 800b4e0:	1d1d      	adds	r5, r3, #4
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6015      	str	r5, [r2, #0]
 800b4e6:	060a      	lsls	r2, r1, #24
 800b4e8:	d50b      	bpl.n	800b502 <_printf_i+0x162>
 800b4ea:	07ca      	lsls	r2, r1, #31
 800b4ec:	bf44      	itt	mi
 800b4ee:	f041 0120 	orrmi.w	r1, r1, #32
 800b4f2:	6021      	strmi	r1, [r4, #0]
 800b4f4:	b91b      	cbnz	r3, 800b4fe <_printf_i+0x15e>
 800b4f6:	6822      	ldr	r2, [r4, #0]
 800b4f8:	f022 0220 	bic.w	r2, r2, #32
 800b4fc:	6022      	str	r2, [r4, #0]
 800b4fe:	2210      	movs	r2, #16
 800b500:	e7b7      	b.n	800b472 <_printf_i+0xd2>
 800b502:	064d      	lsls	r5, r1, #25
 800b504:	bf48      	it	mi
 800b506:	b29b      	uxthmi	r3, r3
 800b508:	e7ef      	b.n	800b4ea <_printf_i+0x14a>
 800b50a:	4665      	mov	r5, ip
 800b50c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b510:	fb02 3311 	mls	r3, r2, r1, r3
 800b514:	5cc3      	ldrb	r3, [r0, r3]
 800b516:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b51a:	460b      	mov	r3, r1
 800b51c:	2900      	cmp	r1, #0
 800b51e:	d1f5      	bne.n	800b50c <_printf_i+0x16c>
 800b520:	e7b9      	b.n	800b496 <_printf_i+0xf6>
 800b522:	6813      	ldr	r3, [r2, #0]
 800b524:	6825      	ldr	r5, [r4, #0]
 800b526:	6961      	ldr	r1, [r4, #20]
 800b528:	1d18      	adds	r0, r3, #4
 800b52a:	6010      	str	r0, [r2, #0]
 800b52c:	0628      	lsls	r0, r5, #24
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	d501      	bpl.n	800b536 <_printf_i+0x196>
 800b532:	6019      	str	r1, [r3, #0]
 800b534:	e002      	b.n	800b53c <_printf_i+0x19c>
 800b536:	066a      	lsls	r2, r5, #25
 800b538:	d5fb      	bpl.n	800b532 <_printf_i+0x192>
 800b53a:	8019      	strh	r1, [r3, #0]
 800b53c:	2300      	movs	r3, #0
 800b53e:	6123      	str	r3, [r4, #16]
 800b540:	4665      	mov	r5, ip
 800b542:	e7b9      	b.n	800b4b8 <_printf_i+0x118>
 800b544:	6813      	ldr	r3, [r2, #0]
 800b546:	1d19      	adds	r1, r3, #4
 800b548:	6011      	str	r1, [r2, #0]
 800b54a:	681d      	ldr	r5, [r3, #0]
 800b54c:	6862      	ldr	r2, [r4, #4]
 800b54e:	2100      	movs	r1, #0
 800b550:	4628      	mov	r0, r5
 800b552:	f7f4 fe45 	bl	80001e0 <memchr>
 800b556:	b108      	cbz	r0, 800b55c <_printf_i+0x1bc>
 800b558:	1b40      	subs	r0, r0, r5
 800b55a:	6060      	str	r0, [r4, #4]
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	2300      	movs	r3, #0
 800b562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b566:	e7a7      	b.n	800b4b8 <_printf_i+0x118>
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	462a      	mov	r2, r5
 800b56c:	4639      	mov	r1, r7
 800b56e:	4630      	mov	r0, r6
 800b570:	47c0      	blx	r8
 800b572:	3001      	adds	r0, #1
 800b574:	d0aa      	beq.n	800b4cc <_printf_i+0x12c>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	079b      	lsls	r3, r3, #30
 800b57a:	d413      	bmi.n	800b5a4 <_printf_i+0x204>
 800b57c:	68e0      	ldr	r0, [r4, #12]
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	4298      	cmp	r0, r3
 800b582:	bfb8      	it	lt
 800b584:	4618      	movlt	r0, r3
 800b586:	e7a3      	b.n	800b4d0 <_printf_i+0x130>
 800b588:	2301      	movs	r3, #1
 800b58a:	464a      	mov	r2, r9
 800b58c:	4639      	mov	r1, r7
 800b58e:	4630      	mov	r0, r6
 800b590:	47c0      	blx	r8
 800b592:	3001      	adds	r0, #1
 800b594:	d09a      	beq.n	800b4cc <_printf_i+0x12c>
 800b596:	3501      	adds	r5, #1
 800b598:	68e3      	ldr	r3, [r4, #12]
 800b59a:	9a03      	ldr	r2, [sp, #12]
 800b59c:	1a9b      	subs	r3, r3, r2
 800b59e:	42ab      	cmp	r3, r5
 800b5a0:	dcf2      	bgt.n	800b588 <_printf_i+0x1e8>
 800b5a2:	e7eb      	b.n	800b57c <_printf_i+0x1dc>
 800b5a4:	2500      	movs	r5, #0
 800b5a6:	f104 0919 	add.w	r9, r4, #25
 800b5aa:	e7f5      	b.n	800b598 <_printf_i+0x1f8>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1ac      	bne.n	800b50a <_printf_i+0x16a>
 800b5b0:	7803      	ldrb	r3, [r0, #0]
 800b5b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5ba:	e76c      	b.n	800b496 <_printf_i+0xf6>
 800b5bc:	0800f21e 	.word	0x0800f21e
 800b5c0:	0800f22f 	.word	0x0800f22f

0800b5c4 <_scanf_float>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	688b      	ldr	r3, [r1, #8]
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	1e5a      	subs	r2, r3, #1
 800b5d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5d4:	b087      	sub	sp, #28
 800b5d6:	bf83      	ittte	hi
 800b5d8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b5dc:	189b      	addhi	r3, r3, r2
 800b5de:	9301      	strhi	r3, [sp, #4]
 800b5e0:	2300      	movls	r3, #0
 800b5e2:	bf86      	itte	hi
 800b5e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5e8:	608b      	strhi	r3, [r1, #8]
 800b5ea:	9301      	strls	r3, [sp, #4]
 800b5ec:	680b      	ldr	r3, [r1, #0]
 800b5ee:	4688      	mov	r8, r1
 800b5f0:	f04f 0b00 	mov.w	fp, #0
 800b5f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5f8:	f848 3b1c 	str.w	r3, [r8], #28
 800b5fc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b600:	4607      	mov	r7, r0
 800b602:	460c      	mov	r4, r1
 800b604:	4645      	mov	r5, r8
 800b606:	465a      	mov	r2, fp
 800b608:	46d9      	mov	r9, fp
 800b60a:	f8cd b008 	str.w	fp, [sp, #8]
 800b60e:	68a1      	ldr	r1, [r4, #8]
 800b610:	b181      	cbz	r1, 800b634 <_scanf_float+0x70>
 800b612:	6833      	ldr	r3, [r6, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b49      	cmp	r3, #73	; 0x49
 800b618:	d071      	beq.n	800b6fe <_scanf_float+0x13a>
 800b61a:	d84d      	bhi.n	800b6b8 <_scanf_float+0xf4>
 800b61c:	2b39      	cmp	r3, #57	; 0x39
 800b61e:	d840      	bhi.n	800b6a2 <_scanf_float+0xde>
 800b620:	2b31      	cmp	r3, #49	; 0x31
 800b622:	f080 8088 	bcs.w	800b736 <_scanf_float+0x172>
 800b626:	2b2d      	cmp	r3, #45	; 0x2d
 800b628:	f000 8090 	beq.w	800b74c <_scanf_float+0x188>
 800b62c:	d815      	bhi.n	800b65a <_scanf_float+0x96>
 800b62e:	2b2b      	cmp	r3, #43	; 0x2b
 800b630:	f000 808c 	beq.w	800b74c <_scanf_float+0x188>
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	d003      	beq.n	800b642 <_scanf_float+0x7e>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	3a01      	subs	r2, #1
 800b644:	2a01      	cmp	r2, #1
 800b646:	f200 80ea 	bhi.w	800b81e <_scanf_float+0x25a>
 800b64a:	4545      	cmp	r5, r8
 800b64c:	f200 80dc 	bhi.w	800b808 <_scanf_float+0x244>
 800b650:	2601      	movs	r6, #1
 800b652:	4630      	mov	r0, r6
 800b654:	b007      	add	sp, #28
 800b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	2b2e      	cmp	r3, #46	; 0x2e
 800b65c:	f000 809f 	beq.w	800b79e <_scanf_float+0x1da>
 800b660:	2b30      	cmp	r3, #48	; 0x30
 800b662:	d1e7      	bne.n	800b634 <_scanf_float+0x70>
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b66a:	d064      	beq.n	800b736 <_scanf_float+0x172>
 800b66c:	9b01      	ldr	r3, [sp, #4]
 800b66e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b672:	6020      	str	r0, [r4, #0]
 800b674:	f109 0901 	add.w	r9, r9, #1
 800b678:	b11b      	cbz	r3, 800b682 <_scanf_float+0xbe>
 800b67a:	3b01      	subs	r3, #1
 800b67c:	3101      	adds	r1, #1
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	60a1      	str	r1, [r4, #8]
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	3b01      	subs	r3, #1
 800b686:	60a3      	str	r3, [r4, #8]
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	3301      	adds	r3, #1
 800b68c:	6123      	str	r3, [r4, #16]
 800b68e:	6873      	ldr	r3, [r6, #4]
 800b690:	3b01      	subs	r3, #1
 800b692:	2b00      	cmp	r3, #0
 800b694:	6073      	str	r3, [r6, #4]
 800b696:	f340 80ac 	ble.w	800b7f2 <_scanf_float+0x22e>
 800b69a:	6833      	ldr	r3, [r6, #0]
 800b69c:	3301      	adds	r3, #1
 800b69e:	6033      	str	r3, [r6, #0]
 800b6a0:	e7b5      	b.n	800b60e <_scanf_float+0x4a>
 800b6a2:	2b45      	cmp	r3, #69	; 0x45
 800b6a4:	f000 8085 	beq.w	800b7b2 <_scanf_float+0x1ee>
 800b6a8:	2b46      	cmp	r3, #70	; 0x46
 800b6aa:	d06a      	beq.n	800b782 <_scanf_float+0x1be>
 800b6ac:	2b41      	cmp	r3, #65	; 0x41
 800b6ae:	d1c1      	bne.n	800b634 <_scanf_float+0x70>
 800b6b0:	2a01      	cmp	r2, #1
 800b6b2:	d1bf      	bne.n	800b634 <_scanf_float+0x70>
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	e046      	b.n	800b746 <_scanf_float+0x182>
 800b6b8:	2b65      	cmp	r3, #101	; 0x65
 800b6ba:	d07a      	beq.n	800b7b2 <_scanf_float+0x1ee>
 800b6bc:	d818      	bhi.n	800b6f0 <_scanf_float+0x12c>
 800b6be:	2b54      	cmp	r3, #84	; 0x54
 800b6c0:	d066      	beq.n	800b790 <_scanf_float+0x1cc>
 800b6c2:	d811      	bhi.n	800b6e8 <_scanf_float+0x124>
 800b6c4:	2b4e      	cmp	r3, #78	; 0x4e
 800b6c6:	d1b5      	bne.n	800b634 <_scanf_float+0x70>
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	d146      	bne.n	800b75a <_scanf_float+0x196>
 800b6cc:	f1b9 0f00 	cmp.w	r9, #0
 800b6d0:	d145      	bne.n	800b75e <_scanf_float+0x19a>
 800b6d2:	6821      	ldr	r1, [r4, #0]
 800b6d4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b6d8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b6dc:	d13f      	bne.n	800b75e <_scanf_float+0x19a>
 800b6de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b6e2:	6021      	str	r1, [r4, #0]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	e02e      	b.n	800b746 <_scanf_float+0x182>
 800b6e8:	2b59      	cmp	r3, #89	; 0x59
 800b6ea:	d01e      	beq.n	800b72a <_scanf_float+0x166>
 800b6ec:	2b61      	cmp	r3, #97	; 0x61
 800b6ee:	e7de      	b.n	800b6ae <_scanf_float+0xea>
 800b6f0:	2b6e      	cmp	r3, #110	; 0x6e
 800b6f2:	d0e9      	beq.n	800b6c8 <_scanf_float+0x104>
 800b6f4:	d815      	bhi.n	800b722 <_scanf_float+0x15e>
 800b6f6:	2b66      	cmp	r3, #102	; 0x66
 800b6f8:	d043      	beq.n	800b782 <_scanf_float+0x1be>
 800b6fa:	2b69      	cmp	r3, #105	; 0x69
 800b6fc:	d19a      	bne.n	800b634 <_scanf_float+0x70>
 800b6fe:	f1bb 0f00 	cmp.w	fp, #0
 800b702:	d138      	bne.n	800b776 <_scanf_float+0x1b2>
 800b704:	f1b9 0f00 	cmp.w	r9, #0
 800b708:	d197      	bne.n	800b63a <_scanf_float+0x76>
 800b70a:	6821      	ldr	r1, [r4, #0]
 800b70c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b710:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b714:	d195      	bne.n	800b642 <_scanf_float+0x7e>
 800b716:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b71a:	6021      	str	r1, [r4, #0]
 800b71c:	f04f 0b01 	mov.w	fp, #1
 800b720:	e011      	b.n	800b746 <_scanf_float+0x182>
 800b722:	2b74      	cmp	r3, #116	; 0x74
 800b724:	d034      	beq.n	800b790 <_scanf_float+0x1cc>
 800b726:	2b79      	cmp	r3, #121	; 0x79
 800b728:	d184      	bne.n	800b634 <_scanf_float+0x70>
 800b72a:	f1bb 0f07 	cmp.w	fp, #7
 800b72e:	d181      	bne.n	800b634 <_scanf_float+0x70>
 800b730:	f04f 0b08 	mov.w	fp, #8
 800b734:	e007      	b.n	800b746 <_scanf_float+0x182>
 800b736:	eb12 0f0b 	cmn.w	r2, fp
 800b73a:	f47f af7b 	bne.w	800b634 <_scanf_float+0x70>
 800b73e:	6821      	ldr	r1, [r4, #0]
 800b740:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b744:	6021      	str	r1, [r4, #0]
 800b746:	702b      	strb	r3, [r5, #0]
 800b748:	3501      	adds	r5, #1
 800b74a:	e79a      	b.n	800b682 <_scanf_float+0xbe>
 800b74c:	6821      	ldr	r1, [r4, #0]
 800b74e:	0608      	lsls	r0, r1, #24
 800b750:	f57f af70 	bpl.w	800b634 <_scanf_float+0x70>
 800b754:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b758:	e7f4      	b.n	800b744 <_scanf_float+0x180>
 800b75a:	2a02      	cmp	r2, #2
 800b75c:	d047      	beq.n	800b7ee <_scanf_float+0x22a>
 800b75e:	f1bb 0f01 	cmp.w	fp, #1
 800b762:	d003      	beq.n	800b76c <_scanf_float+0x1a8>
 800b764:	f1bb 0f04 	cmp.w	fp, #4
 800b768:	f47f af64 	bne.w	800b634 <_scanf_float+0x70>
 800b76c:	f10b 0b01 	add.w	fp, fp, #1
 800b770:	fa5f fb8b 	uxtb.w	fp, fp
 800b774:	e7e7      	b.n	800b746 <_scanf_float+0x182>
 800b776:	f1bb 0f03 	cmp.w	fp, #3
 800b77a:	d0f7      	beq.n	800b76c <_scanf_float+0x1a8>
 800b77c:	f1bb 0f05 	cmp.w	fp, #5
 800b780:	e7f2      	b.n	800b768 <_scanf_float+0x1a4>
 800b782:	f1bb 0f02 	cmp.w	fp, #2
 800b786:	f47f af55 	bne.w	800b634 <_scanf_float+0x70>
 800b78a:	f04f 0b03 	mov.w	fp, #3
 800b78e:	e7da      	b.n	800b746 <_scanf_float+0x182>
 800b790:	f1bb 0f06 	cmp.w	fp, #6
 800b794:	f47f af4e 	bne.w	800b634 <_scanf_float+0x70>
 800b798:	f04f 0b07 	mov.w	fp, #7
 800b79c:	e7d3      	b.n	800b746 <_scanf_float+0x182>
 800b79e:	6821      	ldr	r1, [r4, #0]
 800b7a0:	0588      	lsls	r0, r1, #22
 800b7a2:	f57f af47 	bpl.w	800b634 <_scanf_float+0x70>
 800b7a6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b7aa:	6021      	str	r1, [r4, #0]
 800b7ac:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7b0:	e7c9      	b.n	800b746 <_scanf_float+0x182>
 800b7b2:	6821      	ldr	r1, [r4, #0]
 800b7b4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b7b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b7bc:	d006      	beq.n	800b7cc <_scanf_float+0x208>
 800b7be:	0548      	lsls	r0, r1, #21
 800b7c0:	f57f af38 	bpl.w	800b634 <_scanf_float+0x70>
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	f43f af3b 	beq.w	800b642 <_scanf_float+0x7e>
 800b7cc:	0588      	lsls	r0, r1, #22
 800b7ce:	bf58      	it	pl
 800b7d0:	9802      	ldrpl	r0, [sp, #8]
 800b7d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b7d6:	bf58      	it	pl
 800b7d8:	eba9 0000 	subpl.w	r0, r9, r0
 800b7dc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b7e0:	bf58      	it	pl
 800b7e2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b7e6:	6021      	str	r1, [r4, #0]
 800b7e8:	f04f 0900 	mov.w	r9, #0
 800b7ec:	e7ab      	b.n	800b746 <_scanf_float+0x182>
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	e7a9      	b.n	800b746 <_scanf_float+0x182>
 800b7f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7f6:	9205      	str	r2, [sp, #20]
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	4798      	blx	r3
 800b7fe:	9a05      	ldr	r2, [sp, #20]
 800b800:	2800      	cmp	r0, #0
 800b802:	f43f af04 	beq.w	800b60e <_scanf_float+0x4a>
 800b806:	e715      	b.n	800b634 <_scanf_float+0x70>
 800b808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b80c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b810:	4632      	mov	r2, r6
 800b812:	4638      	mov	r0, r7
 800b814:	4798      	blx	r3
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	3b01      	subs	r3, #1
 800b81a:	6123      	str	r3, [r4, #16]
 800b81c:	e715      	b.n	800b64a <_scanf_float+0x86>
 800b81e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b822:	2b06      	cmp	r3, #6
 800b824:	d80a      	bhi.n	800b83c <_scanf_float+0x278>
 800b826:	f1bb 0f02 	cmp.w	fp, #2
 800b82a:	d968      	bls.n	800b8fe <_scanf_float+0x33a>
 800b82c:	f1ab 0b03 	sub.w	fp, fp, #3
 800b830:	fa5f fb8b 	uxtb.w	fp, fp
 800b834:	eba5 0b0b 	sub.w	fp, r5, fp
 800b838:	455d      	cmp	r5, fp
 800b83a:	d14b      	bne.n	800b8d4 <_scanf_float+0x310>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	05da      	lsls	r2, r3, #23
 800b840:	d51f      	bpl.n	800b882 <_scanf_float+0x2be>
 800b842:	055b      	lsls	r3, r3, #21
 800b844:	d468      	bmi.n	800b918 <_scanf_float+0x354>
 800b846:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	2965      	cmp	r1, #101	; 0x65
 800b84e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b852:	f105 3bff 	add.w	fp, r5, #4294967295
 800b856:	6123      	str	r3, [r4, #16]
 800b858:	d00d      	beq.n	800b876 <_scanf_float+0x2b2>
 800b85a:	2945      	cmp	r1, #69	; 0x45
 800b85c:	d00b      	beq.n	800b876 <_scanf_float+0x2b2>
 800b85e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b862:	4632      	mov	r2, r6
 800b864:	4638      	mov	r0, r7
 800b866:	4798      	blx	r3
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b86e:	3b01      	subs	r3, #1
 800b870:	f1a5 0b02 	sub.w	fp, r5, #2
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b87a:	4632      	mov	r2, r6
 800b87c:	4638      	mov	r0, r7
 800b87e:	4798      	blx	r3
 800b880:	465d      	mov	r5, fp
 800b882:	6826      	ldr	r6, [r4, #0]
 800b884:	f016 0610 	ands.w	r6, r6, #16
 800b888:	d17a      	bne.n	800b980 <_scanf_float+0x3bc>
 800b88a:	702e      	strb	r6, [r5, #0]
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b896:	d142      	bne.n	800b91e <_scanf_float+0x35a>
 800b898:	9b02      	ldr	r3, [sp, #8]
 800b89a:	eba9 0303 	sub.w	r3, r9, r3
 800b89e:	425a      	negs	r2, r3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d149      	bne.n	800b938 <_scanf_float+0x374>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4641      	mov	r1, r8
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f000 ff21 	bl	800c6f0 <_strtod_r>
 800b8ae:	6825      	ldr	r5, [r4, #0]
 800b8b0:	f8da 3000 	ldr.w	r3, [sl]
 800b8b4:	f015 0f02 	tst.w	r5, #2
 800b8b8:	f103 0204 	add.w	r2, r3, #4
 800b8bc:	ec59 8b10 	vmov	r8, r9, d0
 800b8c0:	f8ca 2000 	str.w	r2, [sl]
 800b8c4:	d043      	beq.n	800b94e <_scanf_float+0x38a>
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	e9c3 8900 	strd	r8, r9, [r3]
 800b8cc:	68e3      	ldr	r3, [r4, #12]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	60e3      	str	r3, [r4, #12]
 800b8d2:	e6be      	b.n	800b652 <_scanf_float+0x8e>
 800b8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4638      	mov	r0, r7
 800b8e0:	4798      	blx	r3
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	e7a6      	b.n	800b838 <_scanf_float+0x274>
 800b8ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	4798      	blx	r3
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	6123      	str	r3, [r4, #16]
 800b8fe:	4545      	cmp	r5, r8
 800b900:	d8f3      	bhi.n	800b8ea <_scanf_float+0x326>
 800b902:	e6a5      	b.n	800b650 <_scanf_float+0x8c>
 800b904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b908:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b90c:	4632      	mov	r2, r6
 800b90e:	4638      	mov	r0, r7
 800b910:	4798      	blx	r3
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	3b01      	subs	r3, #1
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	4545      	cmp	r5, r8
 800b91a:	d8f3      	bhi.n	800b904 <_scanf_float+0x340>
 800b91c:	e698      	b.n	800b650 <_scanf_float+0x8c>
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d0bf      	beq.n	800b8a4 <_scanf_float+0x2e0>
 800b924:	9904      	ldr	r1, [sp, #16]
 800b926:	230a      	movs	r3, #10
 800b928:	4632      	mov	r2, r6
 800b92a:	3101      	adds	r1, #1
 800b92c:	4638      	mov	r0, r7
 800b92e:	f000 ff6b 	bl	800c808 <_strtol_r>
 800b932:	9b03      	ldr	r3, [sp, #12]
 800b934:	9d04      	ldr	r5, [sp, #16]
 800b936:	1ac2      	subs	r2, r0, r3
 800b938:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b93c:	429d      	cmp	r5, r3
 800b93e:	bf28      	it	cs
 800b940:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b944:	490f      	ldr	r1, [pc, #60]	; (800b984 <_scanf_float+0x3c0>)
 800b946:	4628      	mov	r0, r5
 800b948:	f000 f8a0 	bl	800ba8c <siprintf>
 800b94c:	e7aa      	b.n	800b8a4 <_scanf_float+0x2e0>
 800b94e:	f015 0504 	ands.w	r5, r5, #4
 800b952:	d1b8      	bne.n	800b8c6 <_scanf_float+0x302>
 800b954:	681f      	ldr	r7, [r3, #0]
 800b956:	ee10 2a10 	vmov	r2, s0
 800b95a:	464b      	mov	r3, r9
 800b95c:	ee10 0a10 	vmov	r0, s0
 800b960:	4649      	mov	r1, r9
 800b962:	f7f5 f8e3 	bl	8000b2c <__aeabi_dcmpun>
 800b966:	b128      	cbz	r0, 800b974 <_scanf_float+0x3b0>
 800b968:	4628      	mov	r0, r5
 800b96a:	f000 f889 	bl	800ba80 <nanf>
 800b96e:	ed87 0a00 	vstr	s0, [r7]
 800b972:	e7ab      	b.n	800b8cc <_scanf_float+0x308>
 800b974:	4640      	mov	r0, r8
 800b976:	4649      	mov	r1, r9
 800b978:	f7f5 f936 	bl	8000be8 <__aeabi_d2f>
 800b97c:	6038      	str	r0, [r7, #0]
 800b97e:	e7a5      	b.n	800b8cc <_scanf_float+0x308>
 800b980:	2600      	movs	r6, #0
 800b982:	e666      	b.n	800b652 <_scanf_float+0x8e>
 800b984:	0800f240 	.word	0x0800f240

0800b988 <iprintf>:
 800b988:	b40f      	push	{r0, r1, r2, r3}
 800b98a:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <iprintf+0x2c>)
 800b98c:	b513      	push	{r0, r1, r4, lr}
 800b98e:	681c      	ldr	r4, [r3, #0]
 800b990:	b124      	cbz	r4, 800b99c <iprintf+0x14>
 800b992:	69a3      	ldr	r3, [r4, #24]
 800b994:	b913      	cbnz	r3, 800b99c <iprintf+0x14>
 800b996:	4620      	mov	r0, r4
 800b998:	f001 ff3e 	bl	800d818 <__sinit>
 800b99c:	ab05      	add	r3, sp, #20
 800b99e:	9a04      	ldr	r2, [sp, #16]
 800b9a0:	68a1      	ldr	r1, [r4, #8]
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f003 f9ab 	bl	800ed00 <_vfiprintf_r>
 800b9aa:	b002      	add	sp, #8
 800b9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b0:	b004      	add	sp, #16
 800b9b2:	4770      	bx	lr
 800b9b4:	20000040 	.word	0x20000040

0800b9b8 <_puts_r>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	4605      	mov	r5, r0
 800b9be:	b118      	cbz	r0, 800b9c8 <_puts_r+0x10>
 800b9c0:	6983      	ldr	r3, [r0, #24]
 800b9c2:	b90b      	cbnz	r3, 800b9c8 <_puts_r+0x10>
 800b9c4:	f001 ff28 	bl	800d818 <__sinit>
 800b9c8:	69ab      	ldr	r3, [r5, #24]
 800b9ca:	68ac      	ldr	r4, [r5, #8]
 800b9cc:	b913      	cbnz	r3, 800b9d4 <_puts_r+0x1c>
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f001 ff22 	bl	800d818 <__sinit>
 800b9d4:	4b23      	ldr	r3, [pc, #140]	; (800ba64 <_puts_r+0xac>)
 800b9d6:	429c      	cmp	r4, r3
 800b9d8:	d117      	bne.n	800ba0a <_puts_r+0x52>
 800b9da:	686c      	ldr	r4, [r5, #4]
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	071b      	lsls	r3, r3, #28
 800b9e0:	d51d      	bpl.n	800ba1e <_puts_r+0x66>
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	b1db      	cbz	r3, 800ba1e <_puts_r+0x66>
 800b9e6:	3e01      	subs	r6, #1
 800b9e8:	68a3      	ldr	r3, [r4, #8]
 800b9ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	60a3      	str	r3, [r4, #8]
 800b9f2:	b9e9      	cbnz	r1, 800ba30 <_puts_r+0x78>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	da2e      	bge.n	800ba56 <_puts_r+0x9e>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	210a      	movs	r1, #10
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f000 ff15 	bl	800c82c <__swbuf_r>
 800ba02:	3001      	adds	r0, #1
 800ba04:	d011      	beq.n	800ba2a <_puts_r+0x72>
 800ba06:	200a      	movs	r0, #10
 800ba08:	e011      	b.n	800ba2e <_puts_r+0x76>
 800ba0a:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <_puts_r+0xb0>)
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d101      	bne.n	800ba14 <_puts_r+0x5c>
 800ba10:	68ac      	ldr	r4, [r5, #8]
 800ba12:	e7e3      	b.n	800b9dc <_puts_r+0x24>
 800ba14:	4b15      	ldr	r3, [pc, #84]	; (800ba6c <_puts_r+0xb4>)
 800ba16:	429c      	cmp	r4, r3
 800ba18:	bf08      	it	eq
 800ba1a:	68ec      	ldreq	r4, [r5, #12]
 800ba1c:	e7de      	b.n	800b9dc <_puts_r+0x24>
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4628      	mov	r0, r5
 800ba22:	f000 ff55 	bl	800c8d0 <__swsetup_r>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d0dd      	beq.n	800b9e6 <_puts_r+0x2e>
 800ba2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2e:	bd70      	pop	{r4, r5, r6, pc}
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	da04      	bge.n	800ba3e <_puts_r+0x86>
 800ba34:	69a2      	ldr	r2, [r4, #24]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	dc06      	bgt.n	800ba48 <_puts_r+0x90>
 800ba3a:	290a      	cmp	r1, #10
 800ba3c:	d004      	beq.n	800ba48 <_puts_r+0x90>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	6022      	str	r2, [r4, #0]
 800ba44:	7019      	strb	r1, [r3, #0]
 800ba46:	e7cf      	b.n	800b9e8 <_puts_r+0x30>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	f000 feee 	bl	800c82c <__swbuf_r>
 800ba50:	3001      	adds	r0, #1
 800ba52:	d1c9      	bne.n	800b9e8 <_puts_r+0x30>
 800ba54:	e7e9      	b.n	800ba2a <_puts_r+0x72>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	200a      	movs	r0, #10
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	6022      	str	r2, [r4, #0]
 800ba5e:	7018      	strb	r0, [r3, #0]
 800ba60:	e7e5      	b.n	800ba2e <_puts_r+0x76>
 800ba62:	bf00      	nop
 800ba64:	0800f2c8 	.word	0x0800f2c8
 800ba68:	0800f2e8 	.word	0x0800f2e8
 800ba6c:	0800f2a8 	.word	0x0800f2a8

0800ba70 <puts>:
 800ba70:	4b02      	ldr	r3, [pc, #8]	; (800ba7c <puts+0xc>)
 800ba72:	4601      	mov	r1, r0
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	f7ff bf9f 	b.w	800b9b8 <_puts_r>
 800ba7a:	bf00      	nop
 800ba7c:	20000040 	.word	0x20000040

0800ba80 <nanf>:
 800ba80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba88 <nanf+0x8>
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	7fc00000 	.word	0x7fc00000

0800ba8c <siprintf>:
 800ba8c:	b40e      	push	{r1, r2, r3}
 800ba8e:	b500      	push	{lr}
 800ba90:	b09c      	sub	sp, #112	; 0x70
 800ba92:	ab1d      	add	r3, sp, #116	; 0x74
 800ba94:	9002      	str	r0, [sp, #8]
 800ba96:	9006      	str	r0, [sp, #24]
 800ba98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba9c:	4809      	ldr	r0, [pc, #36]	; (800bac4 <siprintf+0x38>)
 800ba9e:	9107      	str	r1, [sp, #28]
 800baa0:	9104      	str	r1, [sp, #16]
 800baa2:	4909      	ldr	r1, [pc, #36]	; (800bac8 <siprintf+0x3c>)
 800baa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	6800      	ldr	r0, [r0, #0]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	a902      	add	r1, sp, #8
 800bab0:	f003 f804 	bl	800eabc <_svfiprintf_r>
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	b01c      	add	sp, #112	; 0x70
 800babc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac0:	b003      	add	sp, #12
 800bac2:	4770      	bx	lr
 800bac4:	20000040 	.word	0x20000040
 800bac8:	ffff0208 	.word	0xffff0208

0800bacc <sulp>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	4604      	mov	r4, r0
 800bad0:	460d      	mov	r5, r1
 800bad2:	ec45 4b10 	vmov	d0, r4, r5
 800bad6:	4616      	mov	r6, r2
 800bad8:	f002 fdac 	bl	800e634 <__ulp>
 800badc:	ec51 0b10 	vmov	r0, r1, d0
 800bae0:	b17e      	cbz	r6, 800bb02 <sulp+0x36>
 800bae2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bae6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800baea:	2b00      	cmp	r3, #0
 800baec:	dd09      	ble.n	800bb02 <sulp+0x36>
 800baee:	051b      	lsls	r3, r3, #20
 800baf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800baf4:	2400      	movs	r4, #0
 800baf6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bafa:	4622      	mov	r2, r4
 800bafc:	462b      	mov	r3, r5
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	0000      	movs	r0, r0
	...

0800bb08 <_strtod_l>:
 800bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	461f      	mov	r7, r3
 800bb0e:	b0a1      	sub	sp, #132	; 0x84
 800bb10:	2300      	movs	r3, #0
 800bb12:	4681      	mov	r9, r0
 800bb14:	4638      	mov	r0, r7
 800bb16:	460e      	mov	r6, r1
 800bb18:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb1a:	931c      	str	r3, [sp, #112]	; 0x70
 800bb1c:	f002 fa2f 	bl	800df7e <__localeconv_l>
 800bb20:	4680      	mov	r8, r0
 800bb22:	6800      	ldr	r0, [r0, #0]
 800bb24:	f7f4 fb54 	bl	80001d0 <strlen>
 800bb28:	f04f 0a00 	mov.w	sl, #0
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	f04f 0b00 	mov.w	fp, #0
 800bb32:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb36:	781a      	ldrb	r2, [r3, #0]
 800bb38:	2a0d      	cmp	r2, #13
 800bb3a:	d832      	bhi.n	800bba2 <_strtod_l+0x9a>
 800bb3c:	2a09      	cmp	r2, #9
 800bb3e:	d236      	bcs.n	800bbae <_strtod_l+0xa6>
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	d03e      	beq.n	800bbc2 <_strtod_l+0xba>
 800bb44:	2300      	movs	r3, #0
 800bb46:	930d      	str	r3, [sp, #52]	; 0x34
 800bb48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bb4a:	782b      	ldrb	r3, [r5, #0]
 800bb4c:	2b30      	cmp	r3, #48	; 0x30
 800bb4e:	f040 80ac 	bne.w	800bcaa <_strtod_l+0x1a2>
 800bb52:	786b      	ldrb	r3, [r5, #1]
 800bb54:	2b58      	cmp	r3, #88	; 0x58
 800bb56:	d001      	beq.n	800bb5c <_strtod_l+0x54>
 800bb58:	2b78      	cmp	r3, #120	; 0x78
 800bb5a:	d167      	bne.n	800bc2c <_strtod_l+0x124>
 800bb5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	ab1c      	add	r3, sp, #112	; 0x70
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	9702      	str	r7, [sp, #8]
 800bb66:	ab1d      	add	r3, sp, #116	; 0x74
 800bb68:	4a88      	ldr	r2, [pc, #544]	; (800bd8c <_strtod_l+0x284>)
 800bb6a:	a91b      	add	r1, sp, #108	; 0x6c
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f001 ff2c 	bl	800d9ca <__gethex>
 800bb72:	f010 0407 	ands.w	r4, r0, #7
 800bb76:	4606      	mov	r6, r0
 800bb78:	d005      	beq.n	800bb86 <_strtod_l+0x7e>
 800bb7a:	2c06      	cmp	r4, #6
 800bb7c:	d12b      	bne.n	800bbd6 <_strtod_l+0xce>
 800bb7e:	3501      	adds	r5, #1
 800bb80:	2300      	movs	r3, #0
 800bb82:	951b      	str	r5, [sp, #108]	; 0x6c
 800bb84:	930d      	str	r3, [sp, #52]	; 0x34
 800bb86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f040 859a 	bne.w	800c6c2 <_strtod_l+0xbba>
 800bb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb90:	b1e3      	cbz	r3, 800bbcc <_strtod_l+0xc4>
 800bb92:	4652      	mov	r2, sl
 800bb94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb98:	ec43 2b10 	vmov	d0, r2, r3
 800bb9c:	b021      	add	sp, #132	; 0x84
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	2a2b      	cmp	r2, #43	; 0x2b
 800bba4:	d015      	beq.n	800bbd2 <_strtod_l+0xca>
 800bba6:	2a2d      	cmp	r2, #45	; 0x2d
 800bba8:	d004      	beq.n	800bbb4 <_strtod_l+0xac>
 800bbaa:	2a20      	cmp	r2, #32
 800bbac:	d1ca      	bne.n	800bb44 <_strtod_l+0x3c>
 800bbae:	3301      	adds	r3, #1
 800bbb0:	931b      	str	r3, [sp, #108]	; 0x6c
 800bbb2:	e7bf      	b.n	800bb34 <_strtod_l+0x2c>
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	920d      	str	r2, [sp, #52]	; 0x34
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	921b      	str	r2, [sp, #108]	; 0x6c
 800bbbc:	785b      	ldrb	r3, [r3, #1]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1c2      	bne.n	800bb48 <_strtod_l+0x40>
 800bbc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbc4:	961b      	str	r6, [sp, #108]	; 0x6c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f040 8579 	bne.w	800c6be <_strtod_l+0xbb6>
 800bbcc:	4652      	mov	r2, sl
 800bbce:	465b      	mov	r3, fp
 800bbd0:	e7e2      	b.n	800bb98 <_strtod_l+0x90>
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	e7ef      	b.n	800bbb6 <_strtod_l+0xae>
 800bbd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bbd8:	b13a      	cbz	r2, 800bbea <_strtod_l+0xe2>
 800bbda:	2135      	movs	r1, #53	; 0x35
 800bbdc:	a81e      	add	r0, sp, #120	; 0x78
 800bbde:	f002 fe21 	bl	800e824 <__copybits>
 800bbe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbe4:	4648      	mov	r0, r9
 800bbe6:	f002 fa8d 	bl	800e104 <_Bfree>
 800bbea:	3c01      	subs	r4, #1
 800bbec:	2c04      	cmp	r4, #4
 800bbee:	d806      	bhi.n	800bbfe <_strtod_l+0xf6>
 800bbf0:	e8df f004 	tbb	[pc, r4]
 800bbf4:	1714030a 	.word	0x1714030a
 800bbf8:	0a          	.byte	0x0a
 800bbf9:	00          	.byte	0x00
 800bbfa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bbfe:	0730      	lsls	r0, r6, #28
 800bc00:	d5c1      	bpl.n	800bb86 <_strtod_l+0x7e>
 800bc02:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bc06:	e7be      	b.n	800bb86 <_strtod_l+0x7e>
 800bc08:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bc0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bc0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc12:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bc16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bc1a:	e7f0      	b.n	800bbfe <_strtod_l+0xf6>
 800bc1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bd90 <_strtod_l+0x288>
 800bc20:	e7ed      	b.n	800bbfe <_strtod_l+0xf6>
 800bc22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bc26:	f04f 3aff 	mov.w	sl, #4294967295
 800bc2a:	e7e8      	b.n	800bbfe <_strtod_l+0xf6>
 800bc2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc32:	785b      	ldrb	r3, [r3, #1]
 800bc34:	2b30      	cmp	r3, #48	; 0x30
 800bc36:	d0f9      	beq.n	800bc2c <_strtod_l+0x124>
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0a4      	beq.n	800bb86 <_strtod_l+0x7e>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	2500      	movs	r5, #0
 800bc40:	9306      	str	r3, [sp, #24]
 800bc42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc44:	9308      	str	r3, [sp, #32]
 800bc46:	9507      	str	r5, [sp, #28]
 800bc48:	9505      	str	r5, [sp, #20]
 800bc4a:	220a      	movs	r2, #10
 800bc4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bc4e:	7807      	ldrb	r7, [r0, #0]
 800bc50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bc54:	b2d9      	uxtb	r1, r3
 800bc56:	2909      	cmp	r1, #9
 800bc58:	d929      	bls.n	800bcae <_strtod_l+0x1a6>
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	f8d8 1000 	ldr.w	r1, [r8]
 800bc60:	f003 f9b7 	bl	800efd2 <strncmp>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d031      	beq.n	800bccc <_strtod_l+0x1c4>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	9c05      	ldr	r4, [sp, #20]
 800bc6c:	9004      	str	r0, [sp, #16]
 800bc6e:	463b      	mov	r3, r7
 800bc70:	4602      	mov	r2, r0
 800bc72:	2b65      	cmp	r3, #101	; 0x65
 800bc74:	d001      	beq.n	800bc7a <_strtod_l+0x172>
 800bc76:	2b45      	cmp	r3, #69	; 0x45
 800bc78:	d114      	bne.n	800bca4 <_strtod_l+0x19c>
 800bc7a:	b924      	cbnz	r4, 800bc86 <_strtod_l+0x17e>
 800bc7c:	b910      	cbnz	r0, 800bc84 <_strtod_l+0x17c>
 800bc7e:	9b06      	ldr	r3, [sp, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d09e      	beq.n	800bbc2 <_strtod_l+0xba>
 800bc84:	2400      	movs	r4, #0
 800bc86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bc88:	1c73      	adds	r3, r6, #1
 800bc8a:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc8c:	7873      	ldrb	r3, [r6, #1]
 800bc8e:	2b2b      	cmp	r3, #43	; 0x2b
 800bc90:	d078      	beq.n	800bd84 <_strtod_l+0x27c>
 800bc92:	2b2d      	cmp	r3, #45	; 0x2d
 800bc94:	d070      	beq.n	800bd78 <_strtod_l+0x270>
 800bc96:	f04f 0c00 	mov.w	ip, #0
 800bc9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bc9e:	2f09      	cmp	r7, #9
 800bca0:	d97c      	bls.n	800bd9c <_strtod_l+0x294>
 800bca2:	961b      	str	r6, [sp, #108]	; 0x6c
 800bca4:	f04f 0e00 	mov.w	lr, #0
 800bca8:	e09a      	b.n	800bde0 <_strtod_l+0x2d8>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	e7c7      	b.n	800bc3e <_strtod_l+0x136>
 800bcae:	9905      	ldr	r1, [sp, #20]
 800bcb0:	2908      	cmp	r1, #8
 800bcb2:	bfdd      	ittte	le
 800bcb4:	9907      	ldrle	r1, [sp, #28]
 800bcb6:	fb02 3301 	mlale	r3, r2, r1, r3
 800bcba:	9307      	strle	r3, [sp, #28]
 800bcbc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bcc0:	9b05      	ldr	r3, [sp, #20]
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	9305      	str	r3, [sp, #20]
 800bcc8:	901b      	str	r0, [sp, #108]	; 0x6c
 800bcca:	e7bf      	b.n	800bc4c <_strtod_l+0x144>
 800bccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcce:	191a      	adds	r2, r3, r4
 800bcd0:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcd2:	9a05      	ldr	r2, [sp, #20]
 800bcd4:	5d1b      	ldrb	r3, [r3, r4]
 800bcd6:	2a00      	cmp	r2, #0
 800bcd8:	d037      	beq.n	800bd4a <_strtod_l+0x242>
 800bcda:	9c05      	ldr	r4, [sp, #20]
 800bcdc:	4602      	mov	r2, r0
 800bcde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bce2:	2909      	cmp	r1, #9
 800bce4:	d913      	bls.n	800bd0e <_strtod_l+0x206>
 800bce6:	2101      	movs	r1, #1
 800bce8:	9104      	str	r1, [sp, #16]
 800bcea:	e7c2      	b.n	800bc72 <_strtod_l+0x16a>
 800bcec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcee:	1c5a      	adds	r2, r3, #1
 800bcf0:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	2b30      	cmp	r3, #48	; 0x30
 800bcf8:	d0f8      	beq.n	800bcec <_strtod_l+0x1e4>
 800bcfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bcfe:	2a08      	cmp	r2, #8
 800bd00:	f200 84e4 	bhi.w	800c6cc <_strtod_l+0xbc4>
 800bd04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bd06:	9208      	str	r2, [sp, #32]
 800bd08:	4602      	mov	r2, r0
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bd12:	f100 0101 	add.w	r1, r0, #1
 800bd16:	d012      	beq.n	800bd3e <_strtod_l+0x236>
 800bd18:	440a      	add	r2, r1
 800bd1a:	eb00 0c04 	add.w	ip, r0, r4
 800bd1e:	4621      	mov	r1, r4
 800bd20:	270a      	movs	r7, #10
 800bd22:	458c      	cmp	ip, r1
 800bd24:	d113      	bne.n	800bd4e <_strtod_l+0x246>
 800bd26:	1821      	adds	r1, r4, r0
 800bd28:	2908      	cmp	r1, #8
 800bd2a:	f104 0401 	add.w	r4, r4, #1
 800bd2e:	4404      	add	r4, r0
 800bd30:	dc19      	bgt.n	800bd66 <_strtod_l+0x25e>
 800bd32:	9b07      	ldr	r3, [sp, #28]
 800bd34:	210a      	movs	r1, #10
 800bd36:	fb01 e303 	mla	r3, r1, r3, lr
 800bd3a:	9307      	str	r3, [sp, #28]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd40:	1c58      	adds	r0, r3, #1
 800bd42:	901b      	str	r0, [sp, #108]	; 0x6c
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	4608      	mov	r0, r1
 800bd48:	e7c9      	b.n	800bcde <_strtod_l+0x1d6>
 800bd4a:	9805      	ldr	r0, [sp, #20]
 800bd4c:	e7d3      	b.n	800bcf6 <_strtod_l+0x1ee>
 800bd4e:	2908      	cmp	r1, #8
 800bd50:	f101 0101 	add.w	r1, r1, #1
 800bd54:	dc03      	bgt.n	800bd5e <_strtod_l+0x256>
 800bd56:	9b07      	ldr	r3, [sp, #28]
 800bd58:	437b      	muls	r3, r7
 800bd5a:	9307      	str	r3, [sp, #28]
 800bd5c:	e7e1      	b.n	800bd22 <_strtod_l+0x21a>
 800bd5e:	2910      	cmp	r1, #16
 800bd60:	bfd8      	it	le
 800bd62:	437d      	mulle	r5, r7
 800bd64:	e7dd      	b.n	800bd22 <_strtod_l+0x21a>
 800bd66:	2c10      	cmp	r4, #16
 800bd68:	bfdc      	itt	le
 800bd6a:	210a      	movle	r1, #10
 800bd6c:	fb01 e505 	mlale	r5, r1, r5, lr
 800bd70:	e7e4      	b.n	800bd3c <_strtod_l+0x234>
 800bd72:	2301      	movs	r3, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	e781      	b.n	800bc7c <_strtod_l+0x174>
 800bd78:	f04f 0c01 	mov.w	ip, #1
 800bd7c:	1cb3      	adds	r3, r6, #2
 800bd7e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd80:	78b3      	ldrb	r3, [r6, #2]
 800bd82:	e78a      	b.n	800bc9a <_strtod_l+0x192>
 800bd84:	f04f 0c00 	mov.w	ip, #0
 800bd88:	e7f8      	b.n	800bd7c <_strtod_l+0x274>
 800bd8a:	bf00      	nop
 800bd8c:	0800f248 	.word	0x0800f248
 800bd90:	7ff00000 	.word	0x7ff00000
 800bd94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd96:	1c5f      	adds	r7, r3, #1
 800bd98:	971b      	str	r7, [sp, #108]	; 0x6c
 800bd9a:	785b      	ldrb	r3, [r3, #1]
 800bd9c:	2b30      	cmp	r3, #48	; 0x30
 800bd9e:	d0f9      	beq.n	800bd94 <_strtod_l+0x28c>
 800bda0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bda4:	2f08      	cmp	r7, #8
 800bda6:	f63f af7d 	bhi.w	800bca4 <_strtod_l+0x19c>
 800bdaa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bdae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdb0:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdb4:	1c5f      	adds	r7, r3, #1
 800bdb6:	971b      	str	r7, [sp, #108]	; 0x6c
 800bdb8:	785b      	ldrb	r3, [r3, #1]
 800bdba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bdbe:	f1b8 0f09 	cmp.w	r8, #9
 800bdc2:	d937      	bls.n	800be34 <_strtod_l+0x32c>
 800bdc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdc6:	1a7f      	subs	r7, r7, r1
 800bdc8:	2f08      	cmp	r7, #8
 800bdca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bdce:	dc37      	bgt.n	800be40 <_strtod_l+0x338>
 800bdd0:	45be      	cmp	lr, r7
 800bdd2:	bfa8      	it	ge
 800bdd4:	46be      	movge	lr, r7
 800bdd6:	f1bc 0f00 	cmp.w	ip, #0
 800bdda:	d001      	beq.n	800bde0 <_strtod_l+0x2d8>
 800bddc:	f1ce 0e00 	rsb	lr, lr, #0
 800bde0:	2c00      	cmp	r4, #0
 800bde2:	d151      	bne.n	800be88 <_strtod_l+0x380>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f47f aece 	bne.w	800bb86 <_strtod_l+0x7e>
 800bdea:	9a06      	ldr	r2, [sp, #24]
 800bdec:	2a00      	cmp	r2, #0
 800bdee:	f47f aeca 	bne.w	800bb86 <_strtod_l+0x7e>
 800bdf2:	9a04      	ldr	r2, [sp, #16]
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	f47f aee4 	bne.w	800bbc2 <_strtod_l+0xba>
 800bdfa:	2b4e      	cmp	r3, #78	; 0x4e
 800bdfc:	d027      	beq.n	800be4e <_strtod_l+0x346>
 800bdfe:	dc21      	bgt.n	800be44 <_strtod_l+0x33c>
 800be00:	2b49      	cmp	r3, #73	; 0x49
 800be02:	f47f aede 	bne.w	800bbc2 <_strtod_l+0xba>
 800be06:	49a0      	ldr	r1, [pc, #640]	; (800c088 <_strtod_l+0x580>)
 800be08:	a81b      	add	r0, sp, #108	; 0x6c
 800be0a:	f002 f811 	bl	800de30 <__match>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f43f aed7 	beq.w	800bbc2 <_strtod_l+0xba>
 800be14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be16:	499d      	ldr	r1, [pc, #628]	; (800c08c <_strtod_l+0x584>)
 800be18:	3b01      	subs	r3, #1
 800be1a:	a81b      	add	r0, sp, #108	; 0x6c
 800be1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800be1e:	f002 f807 	bl	800de30 <__match>
 800be22:	b910      	cbnz	r0, 800be2a <_strtod_l+0x322>
 800be24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be26:	3301      	adds	r3, #1
 800be28:	931b      	str	r3, [sp, #108]	; 0x6c
 800be2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c0a0 <_strtod_l+0x598>
 800be2e:	f04f 0a00 	mov.w	sl, #0
 800be32:	e6a8      	b.n	800bb86 <_strtod_l+0x7e>
 800be34:	210a      	movs	r1, #10
 800be36:	fb01 3e0e 	mla	lr, r1, lr, r3
 800be3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800be3e:	e7b8      	b.n	800bdb2 <_strtod_l+0x2aa>
 800be40:	46be      	mov	lr, r7
 800be42:	e7c8      	b.n	800bdd6 <_strtod_l+0x2ce>
 800be44:	2b69      	cmp	r3, #105	; 0x69
 800be46:	d0de      	beq.n	800be06 <_strtod_l+0x2fe>
 800be48:	2b6e      	cmp	r3, #110	; 0x6e
 800be4a:	f47f aeba 	bne.w	800bbc2 <_strtod_l+0xba>
 800be4e:	4990      	ldr	r1, [pc, #576]	; (800c090 <_strtod_l+0x588>)
 800be50:	a81b      	add	r0, sp, #108	; 0x6c
 800be52:	f001 ffed 	bl	800de30 <__match>
 800be56:	2800      	cmp	r0, #0
 800be58:	f43f aeb3 	beq.w	800bbc2 <_strtod_l+0xba>
 800be5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b28      	cmp	r3, #40	; 0x28
 800be62:	d10e      	bne.n	800be82 <_strtod_l+0x37a>
 800be64:	aa1e      	add	r2, sp, #120	; 0x78
 800be66:	498b      	ldr	r1, [pc, #556]	; (800c094 <_strtod_l+0x58c>)
 800be68:	a81b      	add	r0, sp, #108	; 0x6c
 800be6a:	f001 fff5 	bl	800de58 <__hexnan>
 800be6e:	2805      	cmp	r0, #5
 800be70:	d107      	bne.n	800be82 <_strtod_l+0x37a>
 800be72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800be78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800be7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800be80:	e681      	b.n	800bb86 <_strtod_l+0x7e>
 800be82:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c0a8 <_strtod_l+0x5a0>
 800be86:	e7d2      	b.n	800be2e <_strtod_l+0x326>
 800be88:	ebae 0302 	sub.w	r3, lr, r2
 800be8c:	9306      	str	r3, [sp, #24]
 800be8e:	9b05      	ldr	r3, [sp, #20]
 800be90:	9807      	ldr	r0, [sp, #28]
 800be92:	2b00      	cmp	r3, #0
 800be94:	bf08      	it	eq
 800be96:	4623      	moveq	r3, r4
 800be98:	2c10      	cmp	r4, #16
 800be9a:	9305      	str	r3, [sp, #20]
 800be9c:	46a0      	mov	r8, r4
 800be9e:	bfa8      	it	ge
 800bea0:	f04f 0810 	movge.w	r8, #16
 800bea4:	f7f4 fb2e 	bl	8000504 <__aeabi_ui2d>
 800bea8:	2c09      	cmp	r4, #9
 800beaa:	4682      	mov	sl, r0
 800beac:	468b      	mov	fp, r1
 800beae:	dc13      	bgt.n	800bed8 <_strtod_l+0x3d0>
 800beb0:	9b06      	ldr	r3, [sp, #24]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f43f ae67 	beq.w	800bb86 <_strtod_l+0x7e>
 800beb8:	9b06      	ldr	r3, [sp, #24]
 800beba:	dd7a      	ble.n	800bfb2 <_strtod_l+0x4aa>
 800bebc:	2b16      	cmp	r3, #22
 800bebe:	dc61      	bgt.n	800bf84 <_strtod_l+0x47c>
 800bec0:	4a75      	ldr	r2, [pc, #468]	; (800c098 <_strtod_l+0x590>)
 800bec2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bec6:	e9de 0100 	ldrd	r0, r1, [lr]
 800beca:	4652      	mov	r2, sl
 800becc:	465b      	mov	r3, fp
 800bece:	f7f4 fb93 	bl	80005f8 <__aeabi_dmul>
 800bed2:	4682      	mov	sl, r0
 800bed4:	468b      	mov	fp, r1
 800bed6:	e656      	b.n	800bb86 <_strtod_l+0x7e>
 800bed8:	4b6f      	ldr	r3, [pc, #444]	; (800c098 <_strtod_l+0x590>)
 800beda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bede:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bee2:	f7f4 fb89 	bl	80005f8 <__aeabi_dmul>
 800bee6:	4606      	mov	r6, r0
 800bee8:	4628      	mov	r0, r5
 800beea:	460f      	mov	r7, r1
 800beec:	f7f4 fb0a 	bl	8000504 <__aeabi_ui2d>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4630      	mov	r0, r6
 800bef6:	4639      	mov	r1, r7
 800bef8:	f7f4 f9c8 	bl	800028c <__adddf3>
 800befc:	2c0f      	cmp	r4, #15
 800befe:	4682      	mov	sl, r0
 800bf00:	468b      	mov	fp, r1
 800bf02:	ddd5      	ble.n	800beb0 <_strtod_l+0x3a8>
 800bf04:	9b06      	ldr	r3, [sp, #24]
 800bf06:	eba4 0808 	sub.w	r8, r4, r8
 800bf0a:	4498      	add	r8, r3
 800bf0c:	f1b8 0f00 	cmp.w	r8, #0
 800bf10:	f340 8096 	ble.w	800c040 <_strtod_l+0x538>
 800bf14:	f018 030f 	ands.w	r3, r8, #15
 800bf18:	d00a      	beq.n	800bf30 <_strtod_l+0x428>
 800bf1a:	495f      	ldr	r1, [pc, #380]	; (800c098 <_strtod_l+0x590>)
 800bf1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf20:	4652      	mov	r2, sl
 800bf22:	465b      	mov	r3, fp
 800bf24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	4682      	mov	sl, r0
 800bf2e:	468b      	mov	fp, r1
 800bf30:	f038 080f 	bics.w	r8, r8, #15
 800bf34:	d073      	beq.n	800c01e <_strtod_l+0x516>
 800bf36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bf3a:	dd47      	ble.n	800bfcc <_strtod_l+0x4c4>
 800bf3c:	2400      	movs	r4, #0
 800bf3e:	46a0      	mov	r8, r4
 800bf40:	9407      	str	r4, [sp, #28]
 800bf42:	9405      	str	r4, [sp, #20]
 800bf44:	2322      	movs	r3, #34	; 0x22
 800bf46:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c0a0 <_strtod_l+0x598>
 800bf4a:	f8c9 3000 	str.w	r3, [r9]
 800bf4e:	f04f 0a00 	mov.w	sl, #0
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f43f ae16 	beq.w	800bb86 <_strtod_l+0x7e>
 800bf5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f002 f8d1 	bl	800e104 <_Bfree>
 800bf62:	9905      	ldr	r1, [sp, #20]
 800bf64:	4648      	mov	r0, r9
 800bf66:	f002 f8cd 	bl	800e104 <_Bfree>
 800bf6a:	4641      	mov	r1, r8
 800bf6c:	4648      	mov	r0, r9
 800bf6e:	f002 f8c9 	bl	800e104 <_Bfree>
 800bf72:	9907      	ldr	r1, [sp, #28]
 800bf74:	4648      	mov	r0, r9
 800bf76:	f002 f8c5 	bl	800e104 <_Bfree>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4648      	mov	r0, r9
 800bf7e:	f002 f8c1 	bl	800e104 <_Bfree>
 800bf82:	e600      	b.n	800bb86 <_strtod_l+0x7e>
 800bf84:	9a06      	ldr	r2, [sp, #24]
 800bf86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	dbba      	blt.n	800bf04 <_strtod_l+0x3fc>
 800bf8e:	4d42      	ldr	r5, [pc, #264]	; (800c098 <_strtod_l+0x590>)
 800bf90:	f1c4 040f 	rsb	r4, r4, #15
 800bf94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bf98:	4652      	mov	r2, sl
 800bf9a:	465b      	mov	r3, fp
 800bf9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa0:	f7f4 fb2a 	bl	80005f8 <__aeabi_dmul>
 800bfa4:	9b06      	ldr	r3, [sp, #24]
 800bfa6:	1b1c      	subs	r4, r3, r4
 800bfa8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bfac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfb0:	e78d      	b.n	800bece <_strtod_l+0x3c6>
 800bfb2:	f113 0f16 	cmn.w	r3, #22
 800bfb6:	dba5      	blt.n	800bf04 <_strtod_l+0x3fc>
 800bfb8:	4a37      	ldr	r2, [pc, #220]	; (800c098 <_strtod_l+0x590>)
 800bfba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bfbe:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	f7f4 fc41 	bl	800084c <__aeabi_ddiv>
 800bfca:	e782      	b.n	800bed2 <_strtod_l+0x3ca>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4e33      	ldr	r6, [pc, #204]	; (800c09c <_strtod_l+0x594>)
 800bfd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bfd4:	4650      	mov	r0, sl
 800bfd6:	4659      	mov	r1, fp
 800bfd8:	461d      	mov	r5, r3
 800bfda:	f1b8 0f01 	cmp.w	r8, #1
 800bfde:	dc21      	bgt.n	800c024 <_strtod_l+0x51c>
 800bfe0:	b10b      	cbz	r3, 800bfe6 <_strtod_l+0x4de>
 800bfe2:	4682      	mov	sl, r0
 800bfe4:	468b      	mov	fp, r1
 800bfe6:	4b2d      	ldr	r3, [pc, #180]	; (800c09c <_strtod_l+0x594>)
 800bfe8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bfec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bff0:	4652      	mov	r2, sl
 800bff2:	465b      	mov	r3, fp
 800bff4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bff8:	f7f4 fafe 	bl	80005f8 <__aeabi_dmul>
 800bffc:	4b28      	ldr	r3, [pc, #160]	; (800c0a0 <_strtod_l+0x598>)
 800bffe:	460a      	mov	r2, r1
 800c000:	400b      	ands	r3, r1
 800c002:	4928      	ldr	r1, [pc, #160]	; (800c0a4 <_strtod_l+0x59c>)
 800c004:	428b      	cmp	r3, r1
 800c006:	4682      	mov	sl, r0
 800c008:	d898      	bhi.n	800bf3c <_strtod_l+0x434>
 800c00a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c00e:	428b      	cmp	r3, r1
 800c010:	bf86      	itte	hi
 800c012:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c0ac <_strtod_l+0x5a4>
 800c016:	f04f 3aff 	movhi.w	sl, #4294967295
 800c01a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c01e:	2300      	movs	r3, #0
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	e077      	b.n	800c114 <_strtod_l+0x60c>
 800c024:	f018 0f01 	tst.w	r8, #1
 800c028:	d006      	beq.n	800c038 <_strtod_l+0x530>
 800c02a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 fae1 	bl	80005f8 <__aeabi_dmul>
 800c036:	2301      	movs	r3, #1
 800c038:	3501      	adds	r5, #1
 800c03a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c03e:	e7cc      	b.n	800bfda <_strtod_l+0x4d2>
 800c040:	d0ed      	beq.n	800c01e <_strtod_l+0x516>
 800c042:	f1c8 0800 	rsb	r8, r8, #0
 800c046:	f018 020f 	ands.w	r2, r8, #15
 800c04a:	d00a      	beq.n	800c062 <_strtod_l+0x55a>
 800c04c:	4b12      	ldr	r3, [pc, #72]	; (800c098 <_strtod_l+0x590>)
 800c04e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c052:	4650      	mov	r0, sl
 800c054:	4659      	mov	r1, fp
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f7f4 fbf7 	bl	800084c <__aeabi_ddiv>
 800c05e:	4682      	mov	sl, r0
 800c060:	468b      	mov	fp, r1
 800c062:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c066:	d0da      	beq.n	800c01e <_strtod_l+0x516>
 800c068:	f1b8 0f1f 	cmp.w	r8, #31
 800c06c:	dd20      	ble.n	800c0b0 <_strtod_l+0x5a8>
 800c06e:	2400      	movs	r4, #0
 800c070:	46a0      	mov	r8, r4
 800c072:	9407      	str	r4, [sp, #28]
 800c074:	9405      	str	r4, [sp, #20]
 800c076:	2322      	movs	r3, #34	; 0x22
 800c078:	f04f 0a00 	mov.w	sl, #0
 800c07c:	f04f 0b00 	mov.w	fp, #0
 800c080:	f8c9 3000 	str.w	r3, [r9]
 800c084:	e765      	b.n	800bf52 <_strtod_l+0x44a>
 800c086:	bf00      	nop
 800c088:	0800f211 	.word	0x0800f211
 800c08c:	0800f29b 	.word	0x0800f29b
 800c090:	0800f219 	.word	0x0800f219
 800c094:	0800f25c 	.word	0x0800f25c
 800c098:	0800f340 	.word	0x0800f340
 800c09c:	0800f318 	.word	0x0800f318
 800c0a0:	7ff00000 	.word	0x7ff00000
 800c0a4:	7ca00000 	.word	0x7ca00000
 800c0a8:	fff80000 	.word	0xfff80000
 800c0ac:	7fefffff 	.word	0x7fefffff
 800c0b0:	f018 0310 	ands.w	r3, r8, #16
 800c0b4:	bf18      	it	ne
 800c0b6:	236a      	movne	r3, #106	; 0x6a
 800c0b8:	4da0      	ldr	r5, [pc, #640]	; (800c33c <_strtod_l+0x834>)
 800c0ba:	9304      	str	r3, [sp, #16]
 800c0bc:	4650      	mov	r0, sl
 800c0be:	4659      	mov	r1, fp
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f1b8 0f00 	cmp.w	r8, #0
 800c0c6:	f300 810a 	bgt.w	800c2de <_strtod_l+0x7d6>
 800c0ca:	b10b      	cbz	r3, 800c0d0 <_strtod_l+0x5c8>
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	468b      	mov	fp, r1
 800c0d0:	9b04      	ldr	r3, [sp, #16]
 800c0d2:	b1bb      	cbz	r3, 800c104 <_strtod_l+0x5fc>
 800c0d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c0d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	4659      	mov	r1, fp
 800c0e0:	dd10      	ble.n	800c104 <_strtod_l+0x5fc>
 800c0e2:	2b1f      	cmp	r3, #31
 800c0e4:	f340 8107 	ble.w	800c2f6 <_strtod_l+0x7ee>
 800c0e8:	2b34      	cmp	r3, #52	; 0x34
 800c0ea:	bfde      	ittt	le
 800c0ec:	3b20      	suble	r3, #32
 800c0ee:	f04f 32ff 	movle.w	r2, #4294967295
 800c0f2:	fa02 f303 	lslle.w	r3, r2, r3
 800c0f6:	f04f 0a00 	mov.w	sl, #0
 800c0fa:	bfcc      	ite	gt
 800c0fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c100:	ea03 0b01 	andle.w	fp, r3, r1
 800c104:	2200      	movs	r2, #0
 800c106:	2300      	movs	r3, #0
 800c108:	4650      	mov	r0, sl
 800c10a:	4659      	mov	r1, fp
 800c10c:	f7f4 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c110:	2800      	cmp	r0, #0
 800c112:	d1ac      	bne.n	800c06e <_strtod_l+0x566>
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	9a05      	ldr	r2, [sp, #20]
 800c11a:	9908      	ldr	r1, [sp, #32]
 800c11c:	4623      	mov	r3, r4
 800c11e:	4648      	mov	r0, r9
 800c120:	f002 f842 	bl	800e1a8 <__s2b>
 800c124:	9007      	str	r0, [sp, #28]
 800c126:	2800      	cmp	r0, #0
 800c128:	f43f af08 	beq.w	800bf3c <_strtod_l+0x434>
 800c12c:	9a06      	ldr	r2, [sp, #24]
 800c12e:	9b06      	ldr	r3, [sp, #24]
 800c130:	2a00      	cmp	r2, #0
 800c132:	f1c3 0300 	rsb	r3, r3, #0
 800c136:	bfa8      	it	ge
 800c138:	2300      	movge	r3, #0
 800c13a:	930e      	str	r3, [sp, #56]	; 0x38
 800c13c:	2400      	movs	r4, #0
 800c13e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c142:	9316      	str	r3, [sp, #88]	; 0x58
 800c144:	46a0      	mov	r8, r4
 800c146:	9b07      	ldr	r3, [sp, #28]
 800c148:	4648      	mov	r0, r9
 800c14a:	6859      	ldr	r1, [r3, #4]
 800c14c:	f001 ffa6 	bl	800e09c <_Balloc>
 800c150:	9005      	str	r0, [sp, #20]
 800c152:	2800      	cmp	r0, #0
 800c154:	f43f aef6 	beq.w	800bf44 <_strtod_l+0x43c>
 800c158:	9b07      	ldr	r3, [sp, #28]
 800c15a:	691a      	ldr	r2, [r3, #16]
 800c15c:	3202      	adds	r2, #2
 800c15e:	f103 010c 	add.w	r1, r3, #12
 800c162:	0092      	lsls	r2, r2, #2
 800c164:	300c      	adds	r0, #12
 800c166:	f7fe fdbd 	bl	800ace4 <memcpy>
 800c16a:	aa1e      	add	r2, sp, #120	; 0x78
 800c16c:	a91d      	add	r1, sp, #116	; 0x74
 800c16e:	ec4b ab10 	vmov	d0, sl, fp
 800c172:	4648      	mov	r0, r9
 800c174:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c178:	f002 fad2 	bl	800e720 <__d2b>
 800c17c:	901c      	str	r0, [sp, #112]	; 0x70
 800c17e:	2800      	cmp	r0, #0
 800c180:	f43f aee0 	beq.w	800bf44 <_strtod_l+0x43c>
 800c184:	2101      	movs	r1, #1
 800c186:	4648      	mov	r0, r9
 800c188:	f002 f89a 	bl	800e2c0 <__i2b>
 800c18c:	4680      	mov	r8, r0
 800c18e:	2800      	cmp	r0, #0
 800c190:	f43f aed8 	beq.w	800bf44 <_strtod_l+0x43c>
 800c194:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c196:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c198:	2e00      	cmp	r6, #0
 800c19a:	bfab      	itete	ge
 800c19c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c19e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c1a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c1a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c1a4:	bfac      	ite	ge
 800c1a6:	18f7      	addge	r7, r6, r3
 800c1a8:	1b9d      	sublt	r5, r3, r6
 800c1aa:	9b04      	ldr	r3, [sp, #16]
 800c1ac:	1af6      	subs	r6, r6, r3
 800c1ae:	4416      	add	r6, r2
 800c1b0:	4b63      	ldr	r3, [pc, #396]	; (800c340 <_strtod_l+0x838>)
 800c1b2:	3e01      	subs	r6, #1
 800c1b4:	429e      	cmp	r6, r3
 800c1b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c1ba:	f280 80af 	bge.w	800c31c <_strtod_l+0x814>
 800c1be:	1b9b      	subs	r3, r3, r6
 800c1c0:	2b1f      	cmp	r3, #31
 800c1c2:	eba2 0203 	sub.w	r2, r2, r3
 800c1c6:	f04f 0101 	mov.w	r1, #1
 800c1ca:	f300 809b 	bgt.w	800c304 <_strtod_l+0x7fc>
 800c1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d8:	18be      	adds	r6, r7, r2
 800c1da:	9b04      	ldr	r3, [sp, #16]
 800c1dc:	42b7      	cmp	r7, r6
 800c1de:	4415      	add	r5, r2
 800c1e0:	441d      	add	r5, r3
 800c1e2:	463b      	mov	r3, r7
 800c1e4:	bfa8      	it	ge
 800c1e6:	4633      	movge	r3, r6
 800c1e8:	42ab      	cmp	r3, r5
 800c1ea:	bfa8      	it	ge
 800c1ec:	462b      	movge	r3, r5
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	bfc2      	ittt	gt
 800c1f2:	1af6      	subgt	r6, r6, r3
 800c1f4:	1aed      	subgt	r5, r5, r3
 800c1f6:	1aff      	subgt	r7, r7, r3
 800c1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1fa:	b1bb      	cbz	r3, 800c22c <_strtod_l+0x724>
 800c1fc:	4641      	mov	r1, r8
 800c1fe:	461a      	mov	r2, r3
 800c200:	4648      	mov	r0, r9
 800c202:	f002 f8fd 	bl	800e400 <__pow5mult>
 800c206:	4680      	mov	r8, r0
 800c208:	2800      	cmp	r0, #0
 800c20a:	f43f ae9b 	beq.w	800bf44 <_strtod_l+0x43c>
 800c20e:	4601      	mov	r1, r0
 800c210:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c212:	4648      	mov	r0, r9
 800c214:	f002 f85d 	bl	800e2d2 <__multiply>
 800c218:	900c      	str	r0, [sp, #48]	; 0x30
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f43f ae92 	beq.w	800bf44 <_strtod_l+0x43c>
 800c220:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c222:	4648      	mov	r0, r9
 800c224:	f001 ff6e 	bl	800e104 <_Bfree>
 800c228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c22a:	931c      	str	r3, [sp, #112]	; 0x70
 800c22c:	2e00      	cmp	r6, #0
 800c22e:	dc7a      	bgt.n	800c326 <_strtod_l+0x81e>
 800c230:	9b06      	ldr	r3, [sp, #24]
 800c232:	2b00      	cmp	r3, #0
 800c234:	dd08      	ble.n	800c248 <_strtod_l+0x740>
 800c236:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c238:	9905      	ldr	r1, [sp, #20]
 800c23a:	4648      	mov	r0, r9
 800c23c:	f002 f8e0 	bl	800e400 <__pow5mult>
 800c240:	9005      	str	r0, [sp, #20]
 800c242:	2800      	cmp	r0, #0
 800c244:	f43f ae7e 	beq.w	800bf44 <_strtod_l+0x43c>
 800c248:	2d00      	cmp	r5, #0
 800c24a:	dd08      	ble.n	800c25e <_strtod_l+0x756>
 800c24c:	462a      	mov	r2, r5
 800c24e:	9905      	ldr	r1, [sp, #20]
 800c250:	4648      	mov	r0, r9
 800c252:	f002 f923 	bl	800e49c <__lshift>
 800c256:	9005      	str	r0, [sp, #20]
 800c258:	2800      	cmp	r0, #0
 800c25a:	f43f ae73 	beq.w	800bf44 <_strtod_l+0x43c>
 800c25e:	2f00      	cmp	r7, #0
 800c260:	dd08      	ble.n	800c274 <_strtod_l+0x76c>
 800c262:	4641      	mov	r1, r8
 800c264:	463a      	mov	r2, r7
 800c266:	4648      	mov	r0, r9
 800c268:	f002 f918 	bl	800e49c <__lshift>
 800c26c:	4680      	mov	r8, r0
 800c26e:	2800      	cmp	r0, #0
 800c270:	f43f ae68 	beq.w	800bf44 <_strtod_l+0x43c>
 800c274:	9a05      	ldr	r2, [sp, #20]
 800c276:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c278:	4648      	mov	r0, r9
 800c27a:	f002 f97d 	bl	800e578 <__mdiff>
 800c27e:	4604      	mov	r4, r0
 800c280:	2800      	cmp	r0, #0
 800c282:	f43f ae5f 	beq.w	800bf44 <_strtod_l+0x43c>
 800c286:	68c3      	ldr	r3, [r0, #12]
 800c288:	930c      	str	r3, [sp, #48]	; 0x30
 800c28a:	2300      	movs	r3, #0
 800c28c:	60c3      	str	r3, [r0, #12]
 800c28e:	4641      	mov	r1, r8
 800c290:	f002 f958 	bl	800e544 <__mcmp>
 800c294:	2800      	cmp	r0, #0
 800c296:	da55      	bge.n	800c344 <_strtod_l+0x83c>
 800c298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c29a:	b9e3      	cbnz	r3, 800c2d6 <_strtod_l+0x7ce>
 800c29c:	f1ba 0f00 	cmp.w	sl, #0
 800c2a0:	d119      	bne.n	800c2d6 <_strtod_l+0x7ce>
 800c2a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2a6:	b9b3      	cbnz	r3, 800c2d6 <_strtod_l+0x7ce>
 800c2a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2ac:	0d1b      	lsrs	r3, r3, #20
 800c2ae:	051b      	lsls	r3, r3, #20
 800c2b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c2b4:	d90f      	bls.n	800c2d6 <_strtod_l+0x7ce>
 800c2b6:	6963      	ldr	r3, [r4, #20]
 800c2b8:	b913      	cbnz	r3, 800c2c0 <_strtod_l+0x7b8>
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	dd0a      	ble.n	800c2d6 <_strtod_l+0x7ce>
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	4648      	mov	r0, r9
 800c2c6:	f002 f8e9 	bl	800e49c <__lshift>
 800c2ca:	4641      	mov	r1, r8
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	f002 f939 	bl	800e544 <__mcmp>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	dc67      	bgt.n	800c3a6 <_strtod_l+0x89e>
 800c2d6:	9b04      	ldr	r3, [sp, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d171      	bne.n	800c3c0 <_strtod_l+0x8b8>
 800c2dc:	e63d      	b.n	800bf5a <_strtod_l+0x452>
 800c2de:	f018 0f01 	tst.w	r8, #1
 800c2e2:	d004      	beq.n	800c2ee <_strtod_l+0x7e6>
 800c2e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2e8:	f7f4 f986 	bl	80005f8 <__aeabi_dmul>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2f2:	3508      	adds	r5, #8
 800c2f4:	e6e5      	b.n	800c0c2 <_strtod_l+0x5ba>
 800c2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fe:	ea03 0a0a 	and.w	sl, r3, sl
 800c302:	e6ff      	b.n	800c104 <_strtod_l+0x5fc>
 800c304:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c308:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c30c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c310:	36e2      	adds	r6, #226	; 0xe2
 800c312:	fa01 f306 	lsl.w	r3, r1, r6
 800c316:	930a      	str	r3, [sp, #40]	; 0x28
 800c318:	910f      	str	r1, [sp, #60]	; 0x3c
 800c31a:	e75d      	b.n	800c1d8 <_strtod_l+0x6d0>
 800c31c:	2300      	movs	r3, #0
 800c31e:	930a      	str	r3, [sp, #40]	; 0x28
 800c320:	2301      	movs	r3, #1
 800c322:	930f      	str	r3, [sp, #60]	; 0x3c
 800c324:	e758      	b.n	800c1d8 <_strtod_l+0x6d0>
 800c326:	4632      	mov	r2, r6
 800c328:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c32a:	4648      	mov	r0, r9
 800c32c:	f002 f8b6 	bl	800e49c <__lshift>
 800c330:	901c      	str	r0, [sp, #112]	; 0x70
 800c332:	2800      	cmp	r0, #0
 800c334:	f47f af7c 	bne.w	800c230 <_strtod_l+0x728>
 800c338:	e604      	b.n	800bf44 <_strtod_l+0x43c>
 800c33a:	bf00      	nop
 800c33c:	0800f270 	.word	0x0800f270
 800c340:	fffffc02 	.word	0xfffffc02
 800c344:	465d      	mov	r5, fp
 800c346:	f040 8086 	bne.w	800c456 <_strtod_l+0x94e>
 800c34a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c34c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c350:	b32a      	cbz	r2, 800c39e <_strtod_l+0x896>
 800c352:	4aaf      	ldr	r2, [pc, #700]	; (800c610 <_strtod_l+0xb08>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d153      	bne.n	800c400 <_strtod_l+0x8f8>
 800c358:	9b04      	ldr	r3, [sp, #16]
 800c35a:	4650      	mov	r0, sl
 800c35c:	b1d3      	cbz	r3, 800c394 <_strtod_l+0x88c>
 800c35e:	4aad      	ldr	r2, [pc, #692]	; (800c614 <_strtod_l+0xb0c>)
 800c360:	402a      	ands	r2, r5
 800c362:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c366:	f04f 31ff 	mov.w	r1, #4294967295
 800c36a:	d816      	bhi.n	800c39a <_strtod_l+0x892>
 800c36c:	0d12      	lsrs	r2, r2, #20
 800c36e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c372:	fa01 f303 	lsl.w	r3, r1, r3
 800c376:	4298      	cmp	r0, r3
 800c378:	d142      	bne.n	800c400 <_strtod_l+0x8f8>
 800c37a:	4ba7      	ldr	r3, [pc, #668]	; (800c618 <_strtod_l+0xb10>)
 800c37c:	429d      	cmp	r5, r3
 800c37e:	d102      	bne.n	800c386 <_strtod_l+0x87e>
 800c380:	3001      	adds	r0, #1
 800c382:	f43f addf 	beq.w	800bf44 <_strtod_l+0x43c>
 800c386:	4ba3      	ldr	r3, [pc, #652]	; (800c614 <_strtod_l+0xb0c>)
 800c388:	402b      	ands	r3, r5
 800c38a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c38e:	f04f 0a00 	mov.w	sl, #0
 800c392:	e7a0      	b.n	800c2d6 <_strtod_l+0x7ce>
 800c394:	f04f 33ff 	mov.w	r3, #4294967295
 800c398:	e7ed      	b.n	800c376 <_strtod_l+0x86e>
 800c39a:	460b      	mov	r3, r1
 800c39c:	e7eb      	b.n	800c376 <_strtod_l+0x86e>
 800c39e:	bb7b      	cbnz	r3, 800c400 <_strtod_l+0x8f8>
 800c3a0:	f1ba 0f00 	cmp.w	sl, #0
 800c3a4:	d12c      	bne.n	800c400 <_strtod_l+0x8f8>
 800c3a6:	9904      	ldr	r1, [sp, #16]
 800c3a8:	4a9a      	ldr	r2, [pc, #616]	; (800c614 <_strtod_l+0xb0c>)
 800c3aa:	465b      	mov	r3, fp
 800c3ac:	b1f1      	cbz	r1, 800c3ec <_strtod_l+0x8e4>
 800c3ae:	ea02 010b 	and.w	r1, r2, fp
 800c3b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c3b6:	dc19      	bgt.n	800c3ec <_strtod_l+0x8e4>
 800c3b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c3bc:	f77f ae5b 	ble.w	800c076 <_strtod_l+0x56e>
 800c3c0:	4a96      	ldr	r2, [pc, #600]	; (800c61c <_strtod_l+0xb14>)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c3d0:	f7f4 f912 	bl	80005f8 <__aeabi_dmul>
 800c3d4:	4682      	mov	sl, r0
 800c3d6:	468b      	mov	fp, r1
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	f47f adbe 	bne.w	800bf5a <_strtod_l+0x452>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f47f adbb 	bne.w	800bf5a <_strtod_l+0x452>
 800c3e4:	2322      	movs	r3, #34	; 0x22
 800c3e6:	f8c9 3000 	str.w	r3, [r9]
 800c3ea:	e5b6      	b.n	800bf5a <_strtod_l+0x452>
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c3f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c3f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c3fa:	f04f 3aff 	mov.w	sl, #4294967295
 800c3fe:	e76a      	b.n	800c2d6 <_strtod_l+0x7ce>
 800c400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c402:	b193      	cbz	r3, 800c42a <_strtod_l+0x922>
 800c404:	422b      	tst	r3, r5
 800c406:	f43f af66 	beq.w	800c2d6 <_strtod_l+0x7ce>
 800c40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c40c:	9a04      	ldr	r2, [sp, #16]
 800c40e:	4650      	mov	r0, sl
 800c410:	4659      	mov	r1, fp
 800c412:	b173      	cbz	r3, 800c432 <_strtod_l+0x92a>
 800c414:	f7ff fb5a 	bl	800bacc <sulp>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c420:	f7f3 ff34 	bl	800028c <__adddf3>
 800c424:	4682      	mov	sl, r0
 800c426:	468b      	mov	fp, r1
 800c428:	e755      	b.n	800c2d6 <_strtod_l+0x7ce>
 800c42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c42c:	ea13 0f0a 	tst.w	r3, sl
 800c430:	e7e9      	b.n	800c406 <_strtod_l+0x8fe>
 800c432:	f7ff fb4b 	bl	800bacc <sulp>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c43e:	f7f3 ff23 	bl	8000288 <__aeabi_dsub>
 800c442:	2200      	movs	r2, #0
 800c444:	2300      	movs	r3, #0
 800c446:	4682      	mov	sl, r0
 800c448:	468b      	mov	fp, r1
 800c44a:	f7f4 fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c44e:	2800      	cmp	r0, #0
 800c450:	f47f ae11 	bne.w	800c076 <_strtod_l+0x56e>
 800c454:	e73f      	b.n	800c2d6 <_strtod_l+0x7ce>
 800c456:	4641      	mov	r1, r8
 800c458:	4620      	mov	r0, r4
 800c45a:	f002 f9b0 	bl	800e7be <__ratio>
 800c45e:	ec57 6b10 	vmov	r6, r7, d0
 800c462:	2200      	movs	r2, #0
 800c464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c468:	ee10 0a10 	vmov	r0, s0
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f4 fb3f 	bl	8000af0 <__aeabi_dcmple>
 800c472:	2800      	cmp	r0, #0
 800c474:	d077      	beq.n	800c566 <_strtod_l+0xa5e>
 800c476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d04a      	beq.n	800c512 <_strtod_l+0xa0a>
 800c47c:	4b68      	ldr	r3, [pc, #416]	; (800c620 <_strtod_l+0xb18>)
 800c47e:	2200      	movs	r2, #0
 800c480:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c484:	4f66      	ldr	r7, [pc, #408]	; (800c620 <_strtod_l+0xb18>)
 800c486:	2600      	movs	r6, #0
 800c488:	4b62      	ldr	r3, [pc, #392]	; (800c614 <_strtod_l+0xb0c>)
 800c48a:	402b      	ands	r3, r5
 800c48c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c48e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c490:	4b64      	ldr	r3, [pc, #400]	; (800c624 <_strtod_l+0xb1c>)
 800c492:	429a      	cmp	r2, r3
 800c494:	f040 80ce 	bne.w	800c634 <_strtod_l+0xb2c>
 800c498:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c49c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c4a4:	ec4b ab10 	vmov	d0, sl, fp
 800c4a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c4ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4b0:	f002 f8c0 	bl	800e634 <__ulp>
 800c4b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4b8:	ec53 2b10 	vmov	r2, r3, d0
 800c4bc:	f7f4 f89c 	bl	80005f8 <__aeabi_dmul>
 800c4c0:	4652      	mov	r2, sl
 800c4c2:	465b      	mov	r3, fp
 800c4c4:	f7f3 fee2 	bl	800028c <__adddf3>
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4952      	ldr	r1, [pc, #328]	; (800c614 <_strtod_l+0xb0c>)
 800c4cc:	4a56      	ldr	r2, [pc, #344]	; (800c628 <_strtod_l+0xb20>)
 800c4ce:	4019      	ands	r1, r3
 800c4d0:	4291      	cmp	r1, r2
 800c4d2:	4682      	mov	sl, r0
 800c4d4:	d95b      	bls.n	800c58e <_strtod_l+0xa86>
 800c4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d103      	bne.n	800c4e8 <_strtod_l+0x9e0>
 800c4e0:	9b08      	ldr	r3, [sp, #32]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	f43f ad2e 	beq.w	800bf44 <_strtod_l+0x43c>
 800c4e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c618 <_strtod_l+0xb10>
 800c4ec:	f04f 3aff 	mov.w	sl, #4294967295
 800c4f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4f2:	4648      	mov	r0, r9
 800c4f4:	f001 fe06 	bl	800e104 <_Bfree>
 800c4f8:	9905      	ldr	r1, [sp, #20]
 800c4fa:	4648      	mov	r0, r9
 800c4fc:	f001 fe02 	bl	800e104 <_Bfree>
 800c500:	4641      	mov	r1, r8
 800c502:	4648      	mov	r0, r9
 800c504:	f001 fdfe 	bl	800e104 <_Bfree>
 800c508:	4621      	mov	r1, r4
 800c50a:	4648      	mov	r0, r9
 800c50c:	f001 fdfa 	bl	800e104 <_Bfree>
 800c510:	e619      	b.n	800c146 <_strtod_l+0x63e>
 800c512:	f1ba 0f00 	cmp.w	sl, #0
 800c516:	d11a      	bne.n	800c54e <_strtod_l+0xa46>
 800c518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c51c:	b9eb      	cbnz	r3, 800c55a <_strtod_l+0xa52>
 800c51e:	2200      	movs	r2, #0
 800c520:	4b3f      	ldr	r3, [pc, #252]	; (800c620 <_strtod_l+0xb18>)
 800c522:	4630      	mov	r0, r6
 800c524:	4639      	mov	r1, r7
 800c526:	f7f4 fad9 	bl	8000adc <__aeabi_dcmplt>
 800c52a:	b9c8      	cbnz	r0, 800c560 <_strtod_l+0xa58>
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	2200      	movs	r2, #0
 800c532:	4b3e      	ldr	r3, [pc, #248]	; (800c62c <_strtod_l+0xb24>)
 800c534:	f7f4 f860 	bl	80005f8 <__aeabi_dmul>
 800c538:	4606      	mov	r6, r0
 800c53a:	460f      	mov	r7, r1
 800c53c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c540:	9618      	str	r6, [sp, #96]	; 0x60
 800c542:	9319      	str	r3, [sp, #100]	; 0x64
 800c544:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c548:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c54c:	e79c      	b.n	800c488 <_strtod_l+0x980>
 800c54e:	f1ba 0f01 	cmp.w	sl, #1
 800c552:	d102      	bne.n	800c55a <_strtod_l+0xa52>
 800c554:	2d00      	cmp	r5, #0
 800c556:	f43f ad8e 	beq.w	800c076 <_strtod_l+0x56e>
 800c55a:	2200      	movs	r2, #0
 800c55c:	4b34      	ldr	r3, [pc, #208]	; (800c630 <_strtod_l+0xb28>)
 800c55e:	e78f      	b.n	800c480 <_strtod_l+0x978>
 800c560:	2600      	movs	r6, #0
 800c562:	4f32      	ldr	r7, [pc, #200]	; (800c62c <_strtod_l+0xb24>)
 800c564:	e7ea      	b.n	800c53c <_strtod_l+0xa34>
 800c566:	4b31      	ldr	r3, [pc, #196]	; (800c62c <_strtod_l+0xb24>)
 800c568:	4630      	mov	r0, r6
 800c56a:	4639      	mov	r1, r7
 800c56c:	2200      	movs	r2, #0
 800c56e:	f7f4 f843 	bl	80005f8 <__aeabi_dmul>
 800c572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	b933      	cbnz	r3, 800c588 <_strtod_l+0xa80>
 800c57a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c57e:	9010      	str	r0, [sp, #64]	; 0x40
 800c580:	9311      	str	r3, [sp, #68]	; 0x44
 800c582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c586:	e7df      	b.n	800c548 <_strtod_l+0xa40>
 800c588:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c58c:	e7f9      	b.n	800c582 <_strtod_l+0xa7a>
 800c58e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1ab      	bne.n	800c4f0 <_strtod_l+0x9e8>
 800c598:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c59c:	0d1b      	lsrs	r3, r3, #20
 800c59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5a0:	051b      	lsls	r3, r3, #20
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	465d      	mov	r5, fp
 800c5a6:	d1a3      	bne.n	800c4f0 <_strtod_l+0x9e8>
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7f4 fad4 	bl	8000b58 <__aeabi_d2iz>
 800c5b0:	f7f3 ffb8 	bl	8000524 <__aeabi_i2d>
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7f3 fe64 	bl	8000288 <__aeabi_dsub>
 800c5c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	460f      	mov	r7, r1
 800c5c6:	b933      	cbnz	r3, 800c5d6 <_strtod_l+0xace>
 800c5c8:	f1ba 0f00 	cmp.w	sl, #0
 800c5cc:	d103      	bne.n	800c5d6 <_strtod_l+0xace>
 800c5ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c5d2:	2d00      	cmp	r5, #0
 800c5d4:	d06d      	beq.n	800c6b2 <_strtod_l+0xbaa>
 800c5d6:	a30a      	add	r3, pc, #40	; (adr r3, 800c600 <_strtod_l+0xaf8>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	4630      	mov	r0, r6
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f7f4 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f47f acb8 	bne.w	800bf5a <_strtod_l+0x452>
 800c5ea:	a307      	add	r3, pc, #28	; (adr r3, 800c608 <_strtod_l+0xb00>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	f7f4 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	f43f af79 	beq.w	800c4f0 <_strtod_l+0x9e8>
 800c5fe:	e4ac      	b.n	800bf5a <_strtod_l+0x452>
 800c600:	94a03595 	.word	0x94a03595
 800c604:	3fdfffff 	.word	0x3fdfffff
 800c608:	35afe535 	.word	0x35afe535
 800c60c:	3fe00000 	.word	0x3fe00000
 800c610:	000fffff 	.word	0x000fffff
 800c614:	7ff00000 	.word	0x7ff00000
 800c618:	7fefffff 	.word	0x7fefffff
 800c61c:	39500000 	.word	0x39500000
 800c620:	3ff00000 	.word	0x3ff00000
 800c624:	7fe00000 	.word	0x7fe00000
 800c628:	7c9fffff 	.word	0x7c9fffff
 800c62c:	3fe00000 	.word	0x3fe00000
 800c630:	bff00000 	.word	0xbff00000
 800c634:	9b04      	ldr	r3, [sp, #16]
 800c636:	b333      	cbz	r3, 800c686 <_strtod_l+0xb7e>
 800c638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c63a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c63e:	d822      	bhi.n	800c686 <_strtod_l+0xb7e>
 800c640:	a327      	add	r3, pc, #156	; (adr r3, 800c6e0 <_strtod_l+0xbd8>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	4630      	mov	r0, r6
 800c648:	4639      	mov	r1, r7
 800c64a:	f7f4 fa51 	bl	8000af0 <__aeabi_dcmple>
 800c64e:	b1a0      	cbz	r0, 800c67a <_strtod_l+0xb72>
 800c650:	4639      	mov	r1, r7
 800c652:	4630      	mov	r0, r6
 800c654:	f7f4 faa8 	bl	8000ba8 <__aeabi_d2uiz>
 800c658:	2800      	cmp	r0, #0
 800c65a:	bf08      	it	eq
 800c65c:	2001      	moveq	r0, #1
 800c65e:	f7f3 ff51 	bl	8000504 <__aeabi_ui2d>
 800c662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c664:	4606      	mov	r6, r0
 800c666:	460f      	mov	r7, r1
 800c668:	bb03      	cbnz	r3, 800c6ac <_strtod_l+0xba4>
 800c66a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c66e:	9012      	str	r0, [sp, #72]	; 0x48
 800c670:	9313      	str	r3, [sp, #76]	; 0x4c
 800c672:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c676:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c67c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c67e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	930b      	str	r3, [sp, #44]	; 0x2c
 800c686:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c68a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c68e:	f001 ffd1 	bl	800e634 <__ulp>
 800c692:	4650      	mov	r0, sl
 800c694:	ec53 2b10 	vmov	r2, r3, d0
 800c698:	4659      	mov	r1, fp
 800c69a:	f7f3 ffad 	bl	80005f8 <__aeabi_dmul>
 800c69e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6a2:	f7f3 fdf3 	bl	800028c <__adddf3>
 800c6a6:	4682      	mov	sl, r0
 800c6a8:	468b      	mov	fp, r1
 800c6aa:	e772      	b.n	800c592 <_strtod_l+0xa8a>
 800c6ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c6b0:	e7df      	b.n	800c672 <_strtod_l+0xb6a>
 800c6b2:	a30d      	add	r3, pc, #52	; (adr r3, 800c6e8 <_strtod_l+0xbe0>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	f7f4 fa10 	bl	8000adc <__aeabi_dcmplt>
 800c6bc:	e79c      	b.n	800c5f8 <_strtod_l+0xaf0>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	930d      	str	r3, [sp, #52]	; 0x34
 800c6c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	f7ff ba61 	b.w	800bb8e <_strtod_l+0x86>
 800c6cc:	2b65      	cmp	r3, #101	; 0x65
 800c6ce:	f04f 0200 	mov.w	r2, #0
 800c6d2:	f43f ab4e 	beq.w	800bd72 <_strtod_l+0x26a>
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	9104      	str	r1, [sp, #16]
 800c6dc:	f7ff bacb 	b.w	800bc76 <_strtod_l+0x16e>
 800c6e0:	ffc00000 	.word	0xffc00000
 800c6e4:	41dfffff 	.word	0x41dfffff
 800c6e8:	94a03595 	.word	0x94a03595
 800c6ec:	3fcfffff 	.word	0x3fcfffff

0800c6f0 <_strtod_r>:
 800c6f0:	4b05      	ldr	r3, [pc, #20]	; (800c708 <_strtod_r+0x18>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	b410      	push	{r4}
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	4c04      	ldr	r4, [pc, #16]	; (800c70c <_strtod_r+0x1c>)
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	bf08      	it	eq
 800c6fe:	4623      	moveq	r3, r4
 800c700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c704:	f7ff ba00 	b.w	800bb08 <_strtod_l>
 800c708:	20000040 	.word	0x20000040
 800c70c:	200000a4 	.word	0x200000a4

0800c710 <_strtol_l.isra.0>:
 800c710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	4680      	mov	r8, r0
 800c716:	4689      	mov	r9, r1
 800c718:	4692      	mov	sl, r2
 800c71a:	461e      	mov	r6, r3
 800c71c:	460f      	mov	r7, r1
 800c71e:	463d      	mov	r5, r7
 800c720:	9808      	ldr	r0, [sp, #32]
 800c722:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c726:	f001 fc27 	bl	800df78 <__locale_ctype_ptr_l>
 800c72a:	4420      	add	r0, r4
 800c72c:	7843      	ldrb	r3, [r0, #1]
 800c72e:	f013 0308 	ands.w	r3, r3, #8
 800c732:	d132      	bne.n	800c79a <_strtol_l.isra.0+0x8a>
 800c734:	2c2d      	cmp	r4, #45	; 0x2d
 800c736:	d132      	bne.n	800c79e <_strtol_l.isra.0+0x8e>
 800c738:	787c      	ldrb	r4, [r7, #1]
 800c73a:	1cbd      	adds	r5, r7, #2
 800c73c:	2201      	movs	r2, #1
 800c73e:	2e00      	cmp	r6, #0
 800c740:	d05d      	beq.n	800c7fe <_strtol_l.isra.0+0xee>
 800c742:	2e10      	cmp	r6, #16
 800c744:	d109      	bne.n	800c75a <_strtol_l.isra.0+0x4a>
 800c746:	2c30      	cmp	r4, #48	; 0x30
 800c748:	d107      	bne.n	800c75a <_strtol_l.isra.0+0x4a>
 800c74a:	782b      	ldrb	r3, [r5, #0]
 800c74c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c750:	2b58      	cmp	r3, #88	; 0x58
 800c752:	d14f      	bne.n	800c7f4 <_strtol_l.isra.0+0xe4>
 800c754:	786c      	ldrb	r4, [r5, #1]
 800c756:	2610      	movs	r6, #16
 800c758:	3502      	adds	r5, #2
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	bf14      	ite	ne
 800c75e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c762:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c766:	2700      	movs	r7, #0
 800c768:	fbb1 fcf6 	udiv	ip, r1, r6
 800c76c:	4638      	mov	r0, r7
 800c76e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c772:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c776:	2b09      	cmp	r3, #9
 800c778:	d817      	bhi.n	800c7aa <_strtol_l.isra.0+0x9a>
 800c77a:	461c      	mov	r4, r3
 800c77c:	42a6      	cmp	r6, r4
 800c77e:	dd23      	ble.n	800c7c8 <_strtol_l.isra.0+0xb8>
 800c780:	1c7b      	adds	r3, r7, #1
 800c782:	d007      	beq.n	800c794 <_strtol_l.isra.0+0x84>
 800c784:	4584      	cmp	ip, r0
 800c786:	d31c      	bcc.n	800c7c2 <_strtol_l.isra.0+0xb2>
 800c788:	d101      	bne.n	800c78e <_strtol_l.isra.0+0x7e>
 800c78a:	45a6      	cmp	lr, r4
 800c78c:	db19      	blt.n	800c7c2 <_strtol_l.isra.0+0xb2>
 800c78e:	fb00 4006 	mla	r0, r0, r6, r4
 800c792:	2701      	movs	r7, #1
 800c794:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c798:	e7eb      	b.n	800c772 <_strtol_l.isra.0+0x62>
 800c79a:	462f      	mov	r7, r5
 800c79c:	e7bf      	b.n	800c71e <_strtol_l.isra.0+0xe>
 800c79e:	2c2b      	cmp	r4, #43	; 0x2b
 800c7a0:	bf04      	itt	eq
 800c7a2:	1cbd      	addeq	r5, r7, #2
 800c7a4:	787c      	ldrbeq	r4, [r7, #1]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	e7c9      	b.n	800c73e <_strtol_l.isra.0+0x2e>
 800c7aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c7ae:	2b19      	cmp	r3, #25
 800c7b0:	d801      	bhi.n	800c7b6 <_strtol_l.isra.0+0xa6>
 800c7b2:	3c37      	subs	r4, #55	; 0x37
 800c7b4:	e7e2      	b.n	800c77c <_strtol_l.isra.0+0x6c>
 800c7b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c7ba:	2b19      	cmp	r3, #25
 800c7bc:	d804      	bhi.n	800c7c8 <_strtol_l.isra.0+0xb8>
 800c7be:	3c57      	subs	r4, #87	; 0x57
 800c7c0:	e7dc      	b.n	800c77c <_strtol_l.isra.0+0x6c>
 800c7c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c7c6:	e7e5      	b.n	800c794 <_strtol_l.isra.0+0x84>
 800c7c8:	1c7b      	adds	r3, r7, #1
 800c7ca:	d108      	bne.n	800c7de <_strtol_l.isra.0+0xce>
 800c7cc:	2322      	movs	r3, #34	; 0x22
 800c7ce:	f8c8 3000 	str.w	r3, [r8]
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	f1ba 0f00 	cmp.w	sl, #0
 800c7d8:	d107      	bne.n	800c7ea <_strtol_l.isra.0+0xda>
 800c7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7de:	b102      	cbz	r2, 800c7e2 <_strtol_l.isra.0+0xd2>
 800c7e0:	4240      	negs	r0, r0
 800c7e2:	f1ba 0f00 	cmp.w	sl, #0
 800c7e6:	d0f8      	beq.n	800c7da <_strtol_l.isra.0+0xca>
 800c7e8:	b10f      	cbz	r7, 800c7ee <_strtol_l.isra.0+0xde>
 800c7ea:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7ee:	f8ca 9000 	str.w	r9, [sl]
 800c7f2:	e7f2      	b.n	800c7da <_strtol_l.isra.0+0xca>
 800c7f4:	2430      	movs	r4, #48	; 0x30
 800c7f6:	2e00      	cmp	r6, #0
 800c7f8:	d1af      	bne.n	800c75a <_strtol_l.isra.0+0x4a>
 800c7fa:	2608      	movs	r6, #8
 800c7fc:	e7ad      	b.n	800c75a <_strtol_l.isra.0+0x4a>
 800c7fe:	2c30      	cmp	r4, #48	; 0x30
 800c800:	d0a3      	beq.n	800c74a <_strtol_l.isra.0+0x3a>
 800c802:	260a      	movs	r6, #10
 800c804:	e7a9      	b.n	800c75a <_strtol_l.isra.0+0x4a>
	...

0800c808 <_strtol_r>:
 800c808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c80a:	4c06      	ldr	r4, [pc, #24]	; (800c824 <_strtol_r+0x1c>)
 800c80c:	4d06      	ldr	r5, [pc, #24]	; (800c828 <_strtol_r+0x20>)
 800c80e:	6824      	ldr	r4, [r4, #0]
 800c810:	6a24      	ldr	r4, [r4, #32]
 800c812:	2c00      	cmp	r4, #0
 800c814:	bf08      	it	eq
 800c816:	462c      	moveq	r4, r5
 800c818:	9400      	str	r4, [sp, #0]
 800c81a:	f7ff ff79 	bl	800c710 <_strtol_l.isra.0>
 800c81e:	b003      	add	sp, #12
 800c820:	bd30      	pop	{r4, r5, pc}
 800c822:	bf00      	nop
 800c824:	20000040 	.word	0x20000040
 800c828:	200000a4 	.word	0x200000a4

0800c82c <__swbuf_r>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	460e      	mov	r6, r1
 800c830:	4614      	mov	r4, r2
 800c832:	4605      	mov	r5, r0
 800c834:	b118      	cbz	r0, 800c83e <__swbuf_r+0x12>
 800c836:	6983      	ldr	r3, [r0, #24]
 800c838:	b90b      	cbnz	r3, 800c83e <__swbuf_r+0x12>
 800c83a:	f000 ffed 	bl	800d818 <__sinit>
 800c83e:	4b21      	ldr	r3, [pc, #132]	; (800c8c4 <__swbuf_r+0x98>)
 800c840:	429c      	cmp	r4, r3
 800c842:	d12a      	bne.n	800c89a <__swbuf_r+0x6e>
 800c844:	686c      	ldr	r4, [r5, #4]
 800c846:	69a3      	ldr	r3, [r4, #24]
 800c848:	60a3      	str	r3, [r4, #8]
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	071a      	lsls	r2, r3, #28
 800c84e:	d52e      	bpl.n	800c8ae <__swbuf_r+0x82>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	b363      	cbz	r3, 800c8ae <__swbuf_r+0x82>
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	6820      	ldr	r0, [r4, #0]
 800c858:	1ac0      	subs	r0, r0, r3
 800c85a:	6963      	ldr	r3, [r4, #20]
 800c85c:	b2f6      	uxtb	r6, r6
 800c85e:	4283      	cmp	r3, r0
 800c860:	4637      	mov	r7, r6
 800c862:	dc04      	bgt.n	800c86e <__swbuf_r+0x42>
 800c864:	4621      	mov	r1, r4
 800c866:	4628      	mov	r0, r5
 800c868:	f000 ff6c 	bl	800d744 <_fflush_r>
 800c86c:	bb28      	cbnz	r0, 800c8ba <__swbuf_r+0x8e>
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	3b01      	subs	r3, #1
 800c872:	60a3      	str	r3, [r4, #8]
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	6022      	str	r2, [r4, #0]
 800c87a:	701e      	strb	r6, [r3, #0]
 800c87c:	6963      	ldr	r3, [r4, #20]
 800c87e:	3001      	adds	r0, #1
 800c880:	4283      	cmp	r3, r0
 800c882:	d004      	beq.n	800c88e <__swbuf_r+0x62>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	07db      	lsls	r3, r3, #31
 800c888:	d519      	bpl.n	800c8be <__swbuf_r+0x92>
 800c88a:	2e0a      	cmp	r6, #10
 800c88c:	d117      	bne.n	800c8be <__swbuf_r+0x92>
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	f000 ff57 	bl	800d744 <_fflush_r>
 800c896:	b190      	cbz	r0, 800c8be <__swbuf_r+0x92>
 800c898:	e00f      	b.n	800c8ba <__swbuf_r+0x8e>
 800c89a:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <__swbuf_r+0x9c>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	d101      	bne.n	800c8a4 <__swbuf_r+0x78>
 800c8a0:	68ac      	ldr	r4, [r5, #8]
 800c8a2:	e7d0      	b.n	800c846 <__swbuf_r+0x1a>
 800c8a4:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <__swbuf_r+0xa0>)
 800c8a6:	429c      	cmp	r4, r3
 800c8a8:	bf08      	it	eq
 800c8aa:	68ec      	ldreq	r4, [r5, #12]
 800c8ac:	e7cb      	b.n	800c846 <__swbuf_r+0x1a>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f000 f80d 	bl	800c8d0 <__swsetup_r>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d0cc      	beq.n	800c854 <__swbuf_r+0x28>
 800c8ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c8be:	4638      	mov	r0, r7
 800c8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	0800f2c8 	.word	0x0800f2c8
 800c8c8:	0800f2e8 	.word	0x0800f2e8
 800c8cc:	0800f2a8 	.word	0x0800f2a8

0800c8d0 <__swsetup_r>:
 800c8d0:	4b32      	ldr	r3, [pc, #200]	; (800c99c <__swsetup_r+0xcc>)
 800c8d2:	b570      	push	{r4, r5, r6, lr}
 800c8d4:	681d      	ldr	r5, [r3, #0]
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	460c      	mov	r4, r1
 800c8da:	b125      	cbz	r5, 800c8e6 <__swsetup_r+0x16>
 800c8dc:	69ab      	ldr	r3, [r5, #24]
 800c8de:	b913      	cbnz	r3, 800c8e6 <__swsetup_r+0x16>
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f000 ff99 	bl	800d818 <__sinit>
 800c8e6:	4b2e      	ldr	r3, [pc, #184]	; (800c9a0 <__swsetup_r+0xd0>)
 800c8e8:	429c      	cmp	r4, r3
 800c8ea:	d10f      	bne.n	800c90c <__swsetup_r+0x3c>
 800c8ec:	686c      	ldr	r4, [r5, #4]
 800c8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	0715      	lsls	r5, r2, #28
 800c8f6:	d42c      	bmi.n	800c952 <__swsetup_r+0x82>
 800c8f8:	06d0      	lsls	r0, r2, #27
 800c8fa:	d411      	bmi.n	800c920 <__swsetup_r+0x50>
 800c8fc:	2209      	movs	r2, #9
 800c8fe:	6032      	str	r2, [r6, #0]
 800c900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c904:	81a3      	strh	r3, [r4, #12]
 800c906:	f04f 30ff 	mov.w	r0, #4294967295
 800c90a:	e03e      	b.n	800c98a <__swsetup_r+0xba>
 800c90c:	4b25      	ldr	r3, [pc, #148]	; (800c9a4 <__swsetup_r+0xd4>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	d101      	bne.n	800c916 <__swsetup_r+0x46>
 800c912:	68ac      	ldr	r4, [r5, #8]
 800c914:	e7eb      	b.n	800c8ee <__swsetup_r+0x1e>
 800c916:	4b24      	ldr	r3, [pc, #144]	; (800c9a8 <__swsetup_r+0xd8>)
 800c918:	429c      	cmp	r4, r3
 800c91a:	bf08      	it	eq
 800c91c:	68ec      	ldreq	r4, [r5, #12]
 800c91e:	e7e6      	b.n	800c8ee <__swsetup_r+0x1e>
 800c920:	0751      	lsls	r1, r2, #29
 800c922:	d512      	bpl.n	800c94a <__swsetup_r+0x7a>
 800c924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c926:	b141      	cbz	r1, 800c93a <__swsetup_r+0x6a>
 800c928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c92c:	4299      	cmp	r1, r3
 800c92e:	d002      	beq.n	800c936 <__swsetup_r+0x66>
 800c930:	4630      	mov	r0, r6
 800c932:	f001 ffc1 	bl	800e8b8 <_free_r>
 800c936:	2300      	movs	r3, #0
 800c938:	6363      	str	r3, [r4, #52]	; 0x34
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c940:	81a3      	strh	r3, [r4, #12]
 800c942:	2300      	movs	r3, #0
 800c944:	6063      	str	r3, [r4, #4]
 800c946:	6923      	ldr	r3, [r4, #16]
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	f043 0308 	orr.w	r3, r3, #8
 800c950:	81a3      	strh	r3, [r4, #12]
 800c952:	6923      	ldr	r3, [r4, #16]
 800c954:	b94b      	cbnz	r3, 800c96a <__swsetup_r+0x9a>
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c95c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c960:	d003      	beq.n	800c96a <__swsetup_r+0x9a>
 800c962:	4621      	mov	r1, r4
 800c964:	4630      	mov	r0, r6
 800c966:	f001 fb3f 	bl	800dfe8 <__smakebuf_r>
 800c96a:	89a2      	ldrh	r2, [r4, #12]
 800c96c:	f012 0301 	ands.w	r3, r2, #1
 800c970:	d00c      	beq.n	800c98c <__swsetup_r+0xbc>
 800c972:	2300      	movs	r3, #0
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	6963      	ldr	r3, [r4, #20]
 800c978:	425b      	negs	r3, r3
 800c97a:	61a3      	str	r3, [r4, #24]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	b953      	cbnz	r3, 800c996 <__swsetup_r+0xc6>
 800c980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c984:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c988:	d1ba      	bne.n	800c900 <__swsetup_r+0x30>
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	0792      	lsls	r2, r2, #30
 800c98e:	bf58      	it	pl
 800c990:	6963      	ldrpl	r3, [r4, #20]
 800c992:	60a3      	str	r3, [r4, #8]
 800c994:	e7f2      	b.n	800c97c <__swsetup_r+0xac>
 800c996:	2000      	movs	r0, #0
 800c998:	e7f7      	b.n	800c98a <__swsetup_r+0xba>
 800c99a:	bf00      	nop
 800c99c:	20000040 	.word	0x20000040
 800c9a0:	0800f2c8 	.word	0x0800f2c8
 800c9a4:	0800f2e8 	.word	0x0800f2e8
 800c9a8:	0800f2a8 	.word	0x0800f2a8

0800c9ac <quorem>:
 800c9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	6903      	ldr	r3, [r0, #16]
 800c9b2:	690c      	ldr	r4, [r1, #16]
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	4680      	mov	r8, r0
 800c9b8:	f2c0 8082 	blt.w	800cac0 <quorem+0x114>
 800c9bc:	3c01      	subs	r4, #1
 800c9be:	f101 0714 	add.w	r7, r1, #20
 800c9c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c9c6:	f100 0614 	add.w	r6, r0, #20
 800c9ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c9ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c9d2:	eb06 030c 	add.w	r3, r6, ip
 800c9d6:	3501      	adds	r5, #1
 800c9d8:	eb07 090c 	add.w	r9, r7, ip
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	fbb0 f5f5 	udiv	r5, r0, r5
 800c9e2:	b395      	cbz	r5, 800ca4a <quorem+0x9e>
 800c9e4:	f04f 0a00 	mov.w	sl, #0
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	46b6      	mov	lr, r6
 800c9ec:	46d3      	mov	fp, sl
 800c9ee:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9f2:	b293      	uxth	r3, r2
 800c9f4:	fb05 a303 	mla	r3, r5, r3, sl
 800c9f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	ebab 0303 	sub.w	r3, fp, r3
 800ca02:	0c12      	lsrs	r2, r2, #16
 800ca04:	f8de b000 	ldr.w	fp, [lr]
 800ca08:	fb05 a202 	mla	r2, r5, r2, sl
 800ca0c:	fa13 f38b 	uxtah	r3, r3, fp
 800ca10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ca14:	fa1f fb82 	uxth.w	fp, r2
 800ca18:	f8de 2000 	ldr.w	r2, [lr]
 800ca1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ca20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca2a:	4581      	cmp	r9, r0
 800ca2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ca30:	f84e 3b04 	str.w	r3, [lr], #4
 800ca34:	d2db      	bcs.n	800c9ee <quorem+0x42>
 800ca36:	f856 300c 	ldr.w	r3, [r6, ip]
 800ca3a:	b933      	cbnz	r3, 800ca4a <quorem+0x9e>
 800ca3c:	9b01      	ldr	r3, [sp, #4]
 800ca3e:	3b04      	subs	r3, #4
 800ca40:	429e      	cmp	r6, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	d330      	bcc.n	800caa8 <quorem+0xfc>
 800ca46:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	f001 fd7a 	bl	800e544 <__mcmp>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	db25      	blt.n	800caa0 <quorem+0xf4>
 800ca54:	3501      	adds	r5, #1
 800ca56:	4630      	mov	r0, r6
 800ca58:	f04f 0c00 	mov.w	ip, #0
 800ca5c:	f857 2b04 	ldr.w	r2, [r7], #4
 800ca60:	f8d0 e000 	ldr.w	lr, [r0]
 800ca64:	b293      	uxth	r3, r2
 800ca66:	ebac 0303 	sub.w	r3, ip, r3
 800ca6a:	0c12      	lsrs	r2, r2, #16
 800ca6c:	fa13 f38e 	uxtah	r3, r3, lr
 800ca70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca7e:	45b9      	cmp	r9, r7
 800ca80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca84:	f840 3b04 	str.w	r3, [r0], #4
 800ca88:	d2e8      	bcs.n	800ca5c <quorem+0xb0>
 800ca8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ca8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ca92:	b92a      	cbnz	r2, 800caa0 <quorem+0xf4>
 800ca94:	3b04      	subs	r3, #4
 800ca96:	429e      	cmp	r6, r3
 800ca98:	461a      	mov	r2, r3
 800ca9a:	d30b      	bcc.n	800cab4 <quorem+0x108>
 800ca9c:	f8c8 4010 	str.w	r4, [r8, #16]
 800caa0:	4628      	mov	r0, r5
 800caa2:	b003      	add	sp, #12
 800caa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa8:	6812      	ldr	r2, [r2, #0]
 800caaa:	3b04      	subs	r3, #4
 800caac:	2a00      	cmp	r2, #0
 800caae:	d1ca      	bne.n	800ca46 <quorem+0x9a>
 800cab0:	3c01      	subs	r4, #1
 800cab2:	e7c5      	b.n	800ca40 <quorem+0x94>
 800cab4:	6812      	ldr	r2, [r2, #0]
 800cab6:	3b04      	subs	r3, #4
 800cab8:	2a00      	cmp	r2, #0
 800caba:	d1ef      	bne.n	800ca9c <quorem+0xf0>
 800cabc:	3c01      	subs	r4, #1
 800cabe:	e7ea      	b.n	800ca96 <quorem+0xea>
 800cac0:	2000      	movs	r0, #0
 800cac2:	e7ee      	b.n	800caa2 <quorem+0xf6>
 800cac4:	0000      	movs	r0, r0
	...

0800cac8 <_dtoa_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	ec57 6b10 	vmov	r6, r7, d0
 800cad0:	b097      	sub	sp, #92	; 0x5c
 800cad2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cad4:	9106      	str	r1, [sp, #24]
 800cad6:	4604      	mov	r4, r0
 800cad8:	920b      	str	r2, [sp, #44]	; 0x2c
 800cada:	9312      	str	r3, [sp, #72]	; 0x48
 800cadc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cae0:	e9cd 6700 	strd	r6, r7, [sp]
 800cae4:	b93d      	cbnz	r5, 800caf6 <_dtoa_r+0x2e>
 800cae6:	2010      	movs	r0, #16
 800cae8:	f001 fabe 	bl	800e068 <malloc>
 800caec:	6260      	str	r0, [r4, #36]	; 0x24
 800caee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800caf2:	6005      	str	r5, [r0, #0]
 800caf4:	60c5      	str	r5, [r0, #12]
 800caf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caf8:	6819      	ldr	r1, [r3, #0]
 800cafa:	b151      	cbz	r1, 800cb12 <_dtoa_r+0x4a>
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	604a      	str	r2, [r1, #4]
 800cb00:	2301      	movs	r3, #1
 800cb02:	4093      	lsls	r3, r2
 800cb04:	608b      	str	r3, [r1, #8]
 800cb06:	4620      	mov	r0, r4
 800cb08:	f001 fafc 	bl	800e104 <_Bfree>
 800cb0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	1e3b      	subs	r3, r7, #0
 800cb14:	bfbb      	ittet	lt
 800cb16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb1a:	9301      	strlt	r3, [sp, #4]
 800cb1c:	2300      	movge	r3, #0
 800cb1e:	2201      	movlt	r2, #1
 800cb20:	bfac      	ite	ge
 800cb22:	f8c8 3000 	strge.w	r3, [r8]
 800cb26:	f8c8 2000 	strlt.w	r2, [r8]
 800cb2a:	4baf      	ldr	r3, [pc, #700]	; (800cde8 <_dtoa_r+0x320>)
 800cb2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb30:	ea33 0308 	bics.w	r3, r3, r8
 800cb34:	d114      	bne.n	800cb60 <_dtoa_r+0x98>
 800cb36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb38:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	9b00      	ldr	r3, [sp, #0]
 800cb40:	b923      	cbnz	r3, 800cb4c <_dtoa_r+0x84>
 800cb42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f000 8542 	beq.w	800d5d0 <_dtoa_r+0xb08>
 800cb4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cdfc <_dtoa_r+0x334>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 8544 	beq.w	800d5e0 <_dtoa_r+0xb18>
 800cb58:	f10b 0303 	add.w	r3, fp, #3
 800cb5c:	f000 bd3e 	b.w	800d5dc <_dtoa_r+0xb14>
 800cb60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb64:	2200      	movs	r2, #0
 800cb66:	2300      	movs	r3, #0
 800cb68:	4630      	mov	r0, r6
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	f7f3 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb70:	4681      	mov	r9, r0
 800cb72:	b168      	cbz	r0, 800cb90 <_dtoa_r+0xc8>
 800cb74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb76:	2301      	movs	r3, #1
 800cb78:	6013      	str	r3, [r2, #0]
 800cb7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 8524 	beq.w	800d5ca <_dtoa_r+0xb02>
 800cb82:	4b9a      	ldr	r3, [pc, #616]	; (800cdec <_dtoa_r+0x324>)
 800cb84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb86:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	f000 bd28 	b.w	800d5e0 <_dtoa_r+0xb18>
 800cb90:	aa14      	add	r2, sp, #80	; 0x50
 800cb92:	a915      	add	r1, sp, #84	; 0x54
 800cb94:	ec47 6b10 	vmov	d0, r6, r7
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f001 fdc1 	bl	800e720 <__d2b>
 800cb9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cba2:	9004      	str	r0, [sp, #16]
 800cba4:	2d00      	cmp	r5, #0
 800cba6:	d07c      	beq.n	800cca2 <_dtoa_r+0x1da>
 800cba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cbb0:	46b2      	mov	sl, r6
 800cbb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cbb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cbba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	4b8b      	ldr	r3, [pc, #556]	; (800cdf0 <_dtoa_r+0x328>)
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	f7f3 fb5f 	bl	8000288 <__aeabi_dsub>
 800cbca:	a381      	add	r3, pc, #516	; (adr r3, 800cdd0 <_dtoa_r+0x308>)
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f7f3 fd12 	bl	80005f8 <__aeabi_dmul>
 800cbd4:	a380      	add	r3, pc, #512	; (adr r3, 800cdd8 <_dtoa_r+0x310>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fb57 	bl	800028c <__adddf3>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	460f      	mov	r7, r1
 800cbe4:	f7f3 fc9e 	bl	8000524 <__aeabi_i2d>
 800cbe8:	a37d      	add	r3, pc, #500	; (adr r3, 800cde0 <_dtoa_r+0x318>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fd03 	bl	80005f8 <__aeabi_dmul>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	f7f3 fb47 	bl	800028c <__adddf3>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	460f      	mov	r7, r1
 800cc02:	f7f3 ffa9 	bl	8000b58 <__aeabi_d2iz>
 800cc06:	2200      	movs	r2, #0
 800cc08:	4682      	mov	sl, r0
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	4639      	mov	r1, r7
 800cc10:	f7f3 ff64 	bl	8000adc <__aeabi_dcmplt>
 800cc14:	b148      	cbz	r0, 800cc2a <_dtoa_r+0x162>
 800cc16:	4650      	mov	r0, sl
 800cc18:	f7f3 fc84 	bl	8000524 <__aeabi_i2d>
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	463b      	mov	r3, r7
 800cc20:	f7f3 ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc24:	b908      	cbnz	r0, 800cc2a <_dtoa_r+0x162>
 800cc26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc2a:	f1ba 0f16 	cmp.w	sl, #22
 800cc2e:	d859      	bhi.n	800cce4 <_dtoa_r+0x21c>
 800cc30:	4970      	ldr	r1, [pc, #448]	; (800cdf4 <_dtoa_r+0x32c>)
 800cc32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cc36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc3e:	f7f3 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d050      	beq.n	800cce8 <_dtoa_r+0x220>
 800cc46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc50:	1b5d      	subs	r5, r3, r5
 800cc52:	f1b5 0801 	subs.w	r8, r5, #1
 800cc56:	bf49      	itett	mi
 800cc58:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc5c:	2300      	movpl	r3, #0
 800cc5e:	9305      	strmi	r3, [sp, #20]
 800cc60:	f04f 0800 	movmi.w	r8, #0
 800cc64:	bf58      	it	pl
 800cc66:	9305      	strpl	r3, [sp, #20]
 800cc68:	f1ba 0f00 	cmp.w	sl, #0
 800cc6c:	db3e      	blt.n	800ccec <_dtoa_r+0x224>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	44d0      	add	r8, sl
 800cc72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cc76:	9307      	str	r3, [sp, #28]
 800cc78:	9b06      	ldr	r3, [sp, #24]
 800cc7a:	2b09      	cmp	r3, #9
 800cc7c:	f200 8090 	bhi.w	800cda0 <_dtoa_r+0x2d8>
 800cc80:	2b05      	cmp	r3, #5
 800cc82:	bfc4      	itt	gt
 800cc84:	3b04      	subgt	r3, #4
 800cc86:	9306      	strgt	r3, [sp, #24]
 800cc88:	9b06      	ldr	r3, [sp, #24]
 800cc8a:	f1a3 0302 	sub.w	r3, r3, #2
 800cc8e:	bfcc      	ite	gt
 800cc90:	2500      	movgt	r5, #0
 800cc92:	2501      	movle	r5, #1
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	f200 808f 	bhi.w	800cdb8 <_dtoa_r+0x2f0>
 800cc9a:	e8df f003 	tbb	[pc, r3]
 800cc9e:	7f7d      	.short	0x7f7d
 800cca0:	7131      	.short	0x7131
 800cca2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cca6:	441d      	add	r5, r3
 800cca8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ccac:	2820      	cmp	r0, #32
 800ccae:	dd13      	ble.n	800ccd8 <_dtoa_r+0x210>
 800ccb0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ccb4:	9b00      	ldr	r3, [sp, #0]
 800ccb6:	fa08 f800 	lsl.w	r8, r8, r0
 800ccba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ccbe:	fa23 f000 	lsr.w	r0, r3, r0
 800ccc2:	ea48 0000 	orr.w	r0, r8, r0
 800ccc6:	f7f3 fc1d 	bl	8000504 <__aeabi_ui2d>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4682      	mov	sl, r0
 800ccce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ccd2:	3d01      	subs	r5, #1
 800ccd4:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccd6:	e772      	b.n	800cbbe <_dtoa_r+0xf6>
 800ccd8:	9b00      	ldr	r3, [sp, #0]
 800ccda:	f1c0 0020 	rsb	r0, r0, #32
 800ccde:	fa03 f000 	lsl.w	r0, r3, r0
 800cce2:	e7f0      	b.n	800ccc6 <_dtoa_r+0x1fe>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e7b1      	b.n	800cc4c <_dtoa_r+0x184>
 800cce8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccea:	e7b0      	b.n	800cc4e <_dtoa_r+0x186>
 800ccec:	9b05      	ldr	r3, [sp, #20]
 800ccee:	eba3 030a 	sub.w	r3, r3, sl
 800ccf2:	9305      	str	r3, [sp, #20]
 800ccf4:	f1ca 0300 	rsb	r3, sl, #0
 800ccf8:	9307      	str	r3, [sp, #28]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	930e      	str	r3, [sp, #56]	; 0x38
 800ccfe:	e7bb      	b.n	800cc78 <_dtoa_r+0x1b0>
 800cd00:	2301      	movs	r3, #1
 800cd02:	930a      	str	r3, [sp, #40]	; 0x28
 800cd04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	dd59      	ble.n	800cdbe <_dtoa_r+0x2f6>
 800cd0a:	9302      	str	r3, [sp, #8]
 800cd0c:	4699      	mov	r9, r3
 800cd0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd10:	2200      	movs	r2, #0
 800cd12:	6072      	str	r2, [r6, #4]
 800cd14:	2204      	movs	r2, #4
 800cd16:	f102 0014 	add.w	r0, r2, #20
 800cd1a:	4298      	cmp	r0, r3
 800cd1c:	6871      	ldr	r1, [r6, #4]
 800cd1e:	d953      	bls.n	800cdc8 <_dtoa_r+0x300>
 800cd20:	4620      	mov	r0, r4
 800cd22:	f001 f9bb 	bl	800e09c <_Balloc>
 800cd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd28:	6030      	str	r0, [r6, #0]
 800cd2a:	f1b9 0f0e 	cmp.w	r9, #14
 800cd2e:	f8d3 b000 	ldr.w	fp, [r3]
 800cd32:	f200 80e6 	bhi.w	800cf02 <_dtoa_r+0x43a>
 800cd36:	2d00      	cmp	r5, #0
 800cd38:	f000 80e3 	beq.w	800cf02 <_dtoa_r+0x43a>
 800cd3c:	ed9d 7b00 	vldr	d7, [sp]
 800cd40:	f1ba 0f00 	cmp.w	sl, #0
 800cd44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cd48:	dd74      	ble.n	800ce34 <_dtoa_r+0x36c>
 800cd4a:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <_dtoa_r+0x32c>)
 800cd4c:	f00a 030f 	and.w	r3, sl, #15
 800cd50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd54:	ed93 7b00 	vldr	d7, [r3]
 800cd58:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cd5c:	06f0      	lsls	r0, r6, #27
 800cd5e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cd62:	d565      	bpl.n	800ce30 <_dtoa_r+0x368>
 800cd64:	4b24      	ldr	r3, [pc, #144]	; (800cdf8 <_dtoa_r+0x330>)
 800cd66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd6e:	f7f3 fd6d 	bl	800084c <__aeabi_ddiv>
 800cd72:	e9cd 0100 	strd	r0, r1, [sp]
 800cd76:	f006 060f 	and.w	r6, r6, #15
 800cd7a:	2503      	movs	r5, #3
 800cd7c:	4f1e      	ldr	r7, [pc, #120]	; (800cdf8 <_dtoa_r+0x330>)
 800cd7e:	e04c      	b.n	800ce1a <_dtoa_r+0x352>
 800cd80:	2301      	movs	r3, #1
 800cd82:	930a      	str	r3, [sp, #40]	; 0x28
 800cd84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd86:	4453      	add	r3, sl
 800cd88:	f103 0901 	add.w	r9, r3, #1
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	464b      	mov	r3, r9
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	bfb8      	it	lt
 800cd94:	2301      	movlt	r3, #1
 800cd96:	e7ba      	b.n	800cd0e <_dtoa_r+0x246>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	e7b2      	b.n	800cd02 <_dtoa_r+0x23a>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	e7f0      	b.n	800cd82 <_dtoa_r+0x2ba>
 800cda0:	2501      	movs	r5, #1
 800cda2:	2300      	movs	r3, #0
 800cda4:	9306      	str	r3, [sp, #24]
 800cda6:	950a      	str	r5, [sp, #40]	; 0x28
 800cda8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdac:	9302      	str	r3, [sp, #8]
 800cdae:	4699      	mov	r9, r3
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2312      	movs	r3, #18
 800cdb4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cdb6:	e7aa      	b.n	800cd0e <_dtoa_r+0x246>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	930a      	str	r3, [sp, #40]	; 0x28
 800cdbc:	e7f4      	b.n	800cda8 <_dtoa_r+0x2e0>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	9302      	str	r3, [sp, #8]
 800cdc2:	4699      	mov	r9, r3
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	e7f5      	b.n	800cdb4 <_dtoa_r+0x2ec>
 800cdc8:	3101      	adds	r1, #1
 800cdca:	6071      	str	r1, [r6, #4]
 800cdcc:	0052      	lsls	r2, r2, #1
 800cdce:	e7a2      	b.n	800cd16 <_dtoa_r+0x24e>
 800cdd0:	636f4361 	.word	0x636f4361
 800cdd4:	3fd287a7 	.word	0x3fd287a7
 800cdd8:	8b60c8b3 	.word	0x8b60c8b3
 800cddc:	3fc68a28 	.word	0x3fc68a28
 800cde0:	509f79fb 	.word	0x509f79fb
 800cde4:	3fd34413 	.word	0x3fd34413
 800cde8:	7ff00000 	.word	0x7ff00000
 800cdec:	0800f21d 	.word	0x0800f21d
 800cdf0:	3ff80000 	.word	0x3ff80000
 800cdf4:	0800f340 	.word	0x0800f340
 800cdf8:	0800f318 	.word	0x0800f318
 800cdfc:	0800f2a1 	.word	0x0800f2a1
 800ce00:	07f1      	lsls	r1, r6, #31
 800ce02:	d508      	bpl.n	800ce16 <_dtoa_r+0x34e>
 800ce04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce0c:	f7f3 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ce10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce14:	3501      	adds	r5, #1
 800ce16:	1076      	asrs	r6, r6, #1
 800ce18:	3708      	adds	r7, #8
 800ce1a:	2e00      	cmp	r6, #0
 800ce1c:	d1f0      	bne.n	800ce00 <_dtoa_r+0x338>
 800ce1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce26:	f7f3 fd11 	bl	800084c <__aeabi_ddiv>
 800ce2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ce2e:	e01a      	b.n	800ce66 <_dtoa_r+0x39e>
 800ce30:	2502      	movs	r5, #2
 800ce32:	e7a3      	b.n	800cd7c <_dtoa_r+0x2b4>
 800ce34:	f000 80a0 	beq.w	800cf78 <_dtoa_r+0x4b0>
 800ce38:	f1ca 0600 	rsb	r6, sl, #0
 800ce3c:	4b9f      	ldr	r3, [pc, #636]	; (800d0bc <_dtoa_r+0x5f4>)
 800ce3e:	4fa0      	ldr	r7, [pc, #640]	; (800d0c0 <_dtoa_r+0x5f8>)
 800ce40:	f006 020f 	and.w	r2, r6, #15
 800ce44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce50:	f7f3 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ce54:	e9cd 0100 	strd	r0, r1, [sp]
 800ce58:	1136      	asrs	r6, r6, #4
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2502      	movs	r5, #2
 800ce5e:	2e00      	cmp	r6, #0
 800ce60:	d17f      	bne.n	800cf62 <_dtoa_r+0x49a>
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1e1      	bne.n	800ce2a <_dtoa_r+0x362>
 800ce66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 8087 	beq.w	800cf7c <_dtoa_r+0x4b4>
 800ce6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce72:	2200      	movs	r2, #0
 800ce74:	4b93      	ldr	r3, [pc, #588]	; (800d0c4 <_dtoa_r+0x5fc>)
 800ce76:	4630      	mov	r0, r6
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f7f3 fe2f 	bl	8000adc <__aeabi_dcmplt>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d07c      	beq.n	800cf7c <_dtoa_r+0x4b4>
 800ce82:	f1b9 0f00 	cmp.w	r9, #0
 800ce86:	d079      	beq.n	800cf7c <_dtoa_r+0x4b4>
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dd35      	ble.n	800cefa <_dtoa_r+0x432>
 800ce8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce92:	9308      	str	r3, [sp, #32]
 800ce94:	4639      	mov	r1, r7
 800ce96:	2200      	movs	r2, #0
 800ce98:	4b8b      	ldr	r3, [pc, #556]	; (800d0c8 <_dtoa_r+0x600>)
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f7f3 fbac 	bl	80005f8 <__aeabi_dmul>
 800cea0:	e9cd 0100 	strd	r0, r1, [sp]
 800cea4:	9f02      	ldr	r7, [sp, #8]
 800cea6:	3501      	adds	r5, #1
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f7f3 fb3b 	bl	8000524 <__aeabi_i2d>
 800ceae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceb2:	f7f3 fba1 	bl	80005f8 <__aeabi_dmul>
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	4b84      	ldr	r3, [pc, #528]	; (800d0cc <_dtoa_r+0x604>)
 800ceba:	f7f3 f9e7 	bl	800028c <__adddf3>
 800cebe:	4605      	mov	r5, r0
 800cec0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cec4:	2f00      	cmp	r7, #0
 800cec6:	d15d      	bne.n	800cf84 <_dtoa_r+0x4bc>
 800cec8:	2200      	movs	r2, #0
 800ceca:	4b81      	ldr	r3, [pc, #516]	; (800d0d0 <_dtoa_r+0x608>)
 800cecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ced0:	f7f3 f9da 	bl	8000288 <__aeabi_dsub>
 800ced4:	462a      	mov	r2, r5
 800ced6:	4633      	mov	r3, r6
 800ced8:	e9cd 0100 	strd	r0, r1, [sp]
 800cedc:	f7f3 fe1c 	bl	8000b18 <__aeabi_dcmpgt>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	f040 8288 	bne.w	800d3f6 <_dtoa_r+0x92e>
 800cee6:	462a      	mov	r2, r5
 800cee8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ceec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef0:	f7f3 fdf4 	bl	8000adc <__aeabi_dcmplt>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f040 827c 	bne.w	800d3f2 <_dtoa_r+0x92a>
 800cefa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cefe:	e9cd 2300 	strd	r2, r3, [sp]
 800cf02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f2c0 8150 	blt.w	800d1aa <_dtoa_r+0x6e2>
 800cf0a:	f1ba 0f0e 	cmp.w	sl, #14
 800cf0e:	f300 814c 	bgt.w	800d1aa <_dtoa_r+0x6e2>
 800cf12:	4b6a      	ldr	r3, [pc, #424]	; (800d0bc <_dtoa_r+0x5f4>)
 800cf14:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf18:	ed93 7b00 	vldr	d7, [r3]
 800cf1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf24:	f280 80d8 	bge.w	800d0d8 <_dtoa_r+0x610>
 800cf28:	f1b9 0f00 	cmp.w	r9, #0
 800cf2c:	f300 80d4 	bgt.w	800d0d8 <_dtoa_r+0x610>
 800cf30:	f040 825e 	bne.w	800d3f0 <_dtoa_r+0x928>
 800cf34:	2200      	movs	r2, #0
 800cf36:	4b66      	ldr	r3, [pc, #408]	; (800d0d0 <_dtoa_r+0x608>)
 800cf38:	ec51 0b17 	vmov	r0, r1, d7
 800cf3c:	f7f3 fb5c 	bl	80005f8 <__aeabi_dmul>
 800cf40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf44:	f7f3 fdde 	bl	8000b04 <__aeabi_dcmpge>
 800cf48:	464f      	mov	r7, r9
 800cf4a:	464e      	mov	r6, r9
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	f040 8234 	bne.w	800d3ba <_dtoa_r+0x8f2>
 800cf52:	2331      	movs	r3, #49	; 0x31
 800cf54:	f10b 0501 	add.w	r5, fp, #1
 800cf58:	f88b 3000 	strb.w	r3, [fp]
 800cf5c:	f10a 0a01 	add.w	sl, sl, #1
 800cf60:	e22f      	b.n	800d3c2 <_dtoa_r+0x8fa>
 800cf62:	07f2      	lsls	r2, r6, #31
 800cf64:	d505      	bpl.n	800cf72 <_dtoa_r+0x4aa>
 800cf66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf6a:	f7f3 fb45 	bl	80005f8 <__aeabi_dmul>
 800cf6e:	3501      	adds	r5, #1
 800cf70:	2301      	movs	r3, #1
 800cf72:	1076      	asrs	r6, r6, #1
 800cf74:	3708      	adds	r7, #8
 800cf76:	e772      	b.n	800ce5e <_dtoa_r+0x396>
 800cf78:	2502      	movs	r5, #2
 800cf7a:	e774      	b.n	800ce66 <_dtoa_r+0x39e>
 800cf7c:	f8cd a020 	str.w	sl, [sp, #32]
 800cf80:	464f      	mov	r7, r9
 800cf82:	e791      	b.n	800cea8 <_dtoa_r+0x3e0>
 800cf84:	4b4d      	ldr	r3, [pc, #308]	; (800d0bc <_dtoa_r+0x5f4>)
 800cf86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf8a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d047      	beq.n	800d024 <_dtoa_r+0x55c>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	2000      	movs	r0, #0
 800cf9a:	494e      	ldr	r1, [pc, #312]	; (800d0d4 <_dtoa_r+0x60c>)
 800cf9c:	f7f3 fc56 	bl	800084c <__aeabi_ddiv>
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4633      	mov	r3, r6
 800cfa4:	f7f3 f970 	bl	8000288 <__aeabi_dsub>
 800cfa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cfac:	465d      	mov	r5, fp
 800cfae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfb2:	f7f3 fdd1 	bl	8000b58 <__aeabi_d2iz>
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	f7f3 fab4 	bl	8000524 <__aeabi_i2d>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfc4:	f7f3 f960 	bl	8000288 <__aeabi_dsub>
 800cfc8:	3630      	adds	r6, #48	; 0x30
 800cfca:	f805 6b01 	strb.w	r6, [r5], #1
 800cfce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfd2:	e9cd 0100 	strd	r0, r1, [sp]
 800cfd6:	f7f3 fd81 	bl	8000adc <__aeabi_dcmplt>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d163      	bne.n	800d0a6 <_dtoa_r+0x5de>
 800cfde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	4937      	ldr	r1, [pc, #220]	; (800d0c4 <_dtoa_r+0x5fc>)
 800cfe6:	f7f3 f94f 	bl	8000288 <__aeabi_dsub>
 800cfea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfee:	f7f3 fd75 	bl	8000adc <__aeabi_dcmplt>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	f040 80b7 	bne.w	800d166 <_dtoa_r+0x69e>
 800cff8:	eba5 030b 	sub.w	r3, r5, fp
 800cffc:	429f      	cmp	r7, r3
 800cffe:	f77f af7c 	ble.w	800cefa <_dtoa_r+0x432>
 800d002:	2200      	movs	r2, #0
 800d004:	4b30      	ldr	r3, [pc, #192]	; (800d0c8 <_dtoa_r+0x600>)
 800d006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d00a:	f7f3 faf5 	bl	80005f8 <__aeabi_dmul>
 800d00e:	2200      	movs	r2, #0
 800d010:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d014:	4b2c      	ldr	r3, [pc, #176]	; (800d0c8 <_dtoa_r+0x600>)
 800d016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d01a:	f7f3 faed 	bl	80005f8 <__aeabi_dmul>
 800d01e:	e9cd 0100 	strd	r0, r1, [sp]
 800d022:	e7c4      	b.n	800cfae <_dtoa_r+0x4e6>
 800d024:	462a      	mov	r2, r5
 800d026:	4633      	mov	r3, r6
 800d028:	f7f3 fae6 	bl	80005f8 <__aeabi_dmul>
 800d02c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d030:	eb0b 0507 	add.w	r5, fp, r7
 800d034:	465e      	mov	r6, fp
 800d036:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d03a:	f7f3 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800d03e:	4607      	mov	r7, r0
 800d040:	f7f3 fa70 	bl	8000524 <__aeabi_i2d>
 800d044:	3730      	adds	r7, #48	; 0x30
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d04e:	f7f3 f91b 	bl	8000288 <__aeabi_dsub>
 800d052:	f806 7b01 	strb.w	r7, [r6], #1
 800d056:	42ae      	cmp	r6, r5
 800d058:	e9cd 0100 	strd	r0, r1, [sp]
 800d05c:	f04f 0200 	mov.w	r2, #0
 800d060:	d126      	bne.n	800d0b0 <_dtoa_r+0x5e8>
 800d062:	4b1c      	ldr	r3, [pc, #112]	; (800d0d4 <_dtoa_r+0x60c>)
 800d064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d068:	f7f3 f910 	bl	800028c <__adddf3>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d074:	f7f3 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 800d078:	2800      	cmp	r0, #0
 800d07a:	d174      	bne.n	800d166 <_dtoa_r+0x69e>
 800d07c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d080:	2000      	movs	r0, #0
 800d082:	4914      	ldr	r1, [pc, #80]	; (800d0d4 <_dtoa_r+0x60c>)
 800d084:	f7f3 f900 	bl	8000288 <__aeabi_dsub>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d090:	f7f3 fd24 	bl	8000adc <__aeabi_dcmplt>
 800d094:	2800      	cmp	r0, #0
 800d096:	f43f af30 	beq.w	800cefa <_dtoa_r+0x432>
 800d09a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d09e:	2b30      	cmp	r3, #48	; 0x30
 800d0a0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d0a4:	d002      	beq.n	800d0ac <_dtoa_r+0x5e4>
 800d0a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d0aa:	e04a      	b.n	800d142 <_dtoa_r+0x67a>
 800d0ac:	4615      	mov	r5, r2
 800d0ae:	e7f4      	b.n	800d09a <_dtoa_r+0x5d2>
 800d0b0:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <_dtoa_r+0x600>)
 800d0b2:	f7f3 faa1 	bl	80005f8 <__aeabi_dmul>
 800d0b6:	e9cd 0100 	strd	r0, r1, [sp]
 800d0ba:	e7bc      	b.n	800d036 <_dtoa_r+0x56e>
 800d0bc:	0800f340 	.word	0x0800f340
 800d0c0:	0800f318 	.word	0x0800f318
 800d0c4:	3ff00000 	.word	0x3ff00000
 800d0c8:	40240000 	.word	0x40240000
 800d0cc:	401c0000 	.word	0x401c0000
 800d0d0:	40140000 	.word	0x40140000
 800d0d4:	3fe00000 	.word	0x3fe00000
 800d0d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0dc:	465d      	mov	r5, fp
 800d0de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	f7f3 fbb1 	bl	800084c <__aeabi_ddiv>
 800d0ea:	f7f3 fd35 	bl	8000b58 <__aeabi_d2iz>
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	f7f3 fa18 	bl	8000524 <__aeabi_i2d>
 800d0f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0f8:	f7f3 fa7e 	bl	80005f8 <__aeabi_dmul>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4630      	mov	r0, r6
 800d102:	4639      	mov	r1, r7
 800d104:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d108:	f7f3 f8be 	bl	8000288 <__aeabi_dsub>
 800d10c:	f805 6b01 	strb.w	r6, [r5], #1
 800d110:	eba5 060b 	sub.w	r6, r5, fp
 800d114:	45b1      	cmp	r9, r6
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	d139      	bne.n	800d190 <_dtoa_r+0x6c8>
 800d11c:	f7f3 f8b6 	bl	800028c <__adddf3>
 800d120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d124:	4606      	mov	r6, r0
 800d126:	460f      	mov	r7, r1
 800d128:	f7f3 fcf6 	bl	8000b18 <__aeabi_dcmpgt>
 800d12c:	b9c8      	cbnz	r0, 800d162 <_dtoa_r+0x69a>
 800d12e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7f3 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d13a:	b110      	cbz	r0, 800d142 <_dtoa_r+0x67a>
 800d13c:	f018 0f01 	tst.w	r8, #1
 800d140:	d10f      	bne.n	800d162 <_dtoa_r+0x69a>
 800d142:	9904      	ldr	r1, [sp, #16]
 800d144:	4620      	mov	r0, r4
 800d146:	f000 ffdd 	bl	800e104 <_Bfree>
 800d14a:	2300      	movs	r3, #0
 800d14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d14e:	702b      	strb	r3, [r5, #0]
 800d150:	f10a 0301 	add.w	r3, sl, #1
 800d154:	6013      	str	r3, [r2, #0]
 800d156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 8241 	beq.w	800d5e0 <_dtoa_r+0xb18>
 800d15e:	601d      	str	r5, [r3, #0]
 800d160:	e23e      	b.n	800d5e0 <_dtoa_r+0xb18>
 800d162:	f8cd a020 	str.w	sl, [sp, #32]
 800d166:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d16a:	2a39      	cmp	r2, #57	; 0x39
 800d16c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d170:	d108      	bne.n	800d184 <_dtoa_r+0x6bc>
 800d172:	459b      	cmp	fp, r3
 800d174:	d10a      	bne.n	800d18c <_dtoa_r+0x6c4>
 800d176:	9b08      	ldr	r3, [sp, #32]
 800d178:	3301      	adds	r3, #1
 800d17a:	9308      	str	r3, [sp, #32]
 800d17c:	2330      	movs	r3, #48	; 0x30
 800d17e:	f88b 3000 	strb.w	r3, [fp]
 800d182:	465b      	mov	r3, fp
 800d184:	781a      	ldrb	r2, [r3, #0]
 800d186:	3201      	adds	r2, #1
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	e78c      	b.n	800d0a6 <_dtoa_r+0x5de>
 800d18c:	461d      	mov	r5, r3
 800d18e:	e7ea      	b.n	800d166 <_dtoa_r+0x69e>
 800d190:	2200      	movs	r2, #0
 800d192:	4b9b      	ldr	r3, [pc, #620]	; (800d400 <_dtoa_r+0x938>)
 800d194:	f7f3 fa30 	bl	80005f8 <__aeabi_dmul>
 800d198:	2200      	movs	r2, #0
 800d19a:	2300      	movs	r3, #0
 800d19c:	4606      	mov	r6, r0
 800d19e:	460f      	mov	r7, r1
 800d1a0:	f7f3 fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d09a      	beq.n	800d0de <_dtoa_r+0x616>
 800d1a8:	e7cb      	b.n	800d142 <_dtoa_r+0x67a>
 800d1aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ac:	2a00      	cmp	r2, #0
 800d1ae:	f000 808b 	beq.w	800d2c8 <_dtoa_r+0x800>
 800d1b2:	9a06      	ldr	r2, [sp, #24]
 800d1b4:	2a01      	cmp	r2, #1
 800d1b6:	dc6e      	bgt.n	800d296 <_dtoa_r+0x7ce>
 800d1b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	d067      	beq.n	800d28e <_dtoa_r+0x7c6>
 800d1be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1c2:	9f07      	ldr	r7, [sp, #28]
 800d1c4:	9d05      	ldr	r5, [sp, #20]
 800d1c6:	9a05      	ldr	r2, [sp, #20]
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	441a      	add	r2, r3
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	9205      	str	r2, [sp, #20]
 800d1d0:	4498      	add	r8, r3
 800d1d2:	f001 f875 	bl	800e2c0 <__i2b>
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	2d00      	cmp	r5, #0
 800d1da:	dd0c      	ble.n	800d1f6 <_dtoa_r+0x72e>
 800d1dc:	f1b8 0f00 	cmp.w	r8, #0
 800d1e0:	dd09      	ble.n	800d1f6 <_dtoa_r+0x72e>
 800d1e2:	4545      	cmp	r5, r8
 800d1e4:	9a05      	ldr	r2, [sp, #20]
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	bfa8      	it	ge
 800d1ea:	4643      	movge	r3, r8
 800d1ec:	1ad2      	subs	r2, r2, r3
 800d1ee:	9205      	str	r2, [sp, #20]
 800d1f0:	1aed      	subs	r5, r5, r3
 800d1f2:	eba8 0803 	sub.w	r8, r8, r3
 800d1f6:	9b07      	ldr	r3, [sp, #28]
 800d1f8:	b1eb      	cbz	r3, 800d236 <_dtoa_r+0x76e>
 800d1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d067      	beq.n	800d2d0 <_dtoa_r+0x808>
 800d200:	b18f      	cbz	r7, 800d226 <_dtoa_r+0x75e>
 800d202:	4631      	mov	r1, r6
 800d204:	463a      	mov	r2, r7
 800d206:	4620      	mov	r0, r4
 800d208:	f001 f8fa 	bl	800e400 <__pow5mult>
 800d20c:	9a04      	ldr	r2, [sp, #16]
 800d20e:	4601      	mov	r1, r0
 800d210:	4606      	mov	r6, r0
 800d212:	4620      	mov	r0, r4
 800d214:	f001 f85d 	bl	800e2d2 <__multiply>
 800d218:	9904      	ldr	r1, [sp, #16]
 800d21a:	9008      	str	r0, [sp, #32]
 800d21c:	4620      	mov	r0, r4
 800d21e:	f000 ff71 	bl	800e104 <_Bfree>
 800d222:	9b08      	ldr	r3, [sp, #32]
 800d224:	9304      	str	r3, [sp, #16]
 800d226:	9b07      	ldr	r3, [sp, #28]
 800d228:	1bda      	subs	r2, r3, r7
 800d22a:	d004      	beq.n	800d236 <_dtoa_r+0x76e>
 800d22c:	9904      	ldr	r1, [sp, #16]
 800d22e:	4620      	mov	r0, r4
 800d230:	f001 f8e6 	bl	800e400 <__pow5mult>
 800d234:	9004      	str	r0, [sp, #16]
 800d236:	2101      	movs	r1, #1
 800d238:	4620      	mov	r0, r4
 800d23a:	f001 f841 	bl	800e2c0 <__i2b>
 800d23e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d240:	4607      	mov	r7, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 81d0 	beq.w	800d5e8 <_dtoa_r+0xb20>
 800d248:	461a      	mov	r2, r3
 800d24a:	4601      	mov	r1, r0
 800d24c:	4620      	mov	r0, r4
 800d24e:	f001 f8d7 	bl	800e400 <__pow5mult>
 800d252:	9b06      	ldr	r3, [sp, #24]
 800d254:	2b01      	cmp	r3, #1
 800d256:	4607      	mov	r7, r0
 800d258:	dc40      	bgt.n	800d2dc <_dtoa_r+0x814>
 800d25a:	9b00      	ldr	r3, [sp, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d139      	bne.n	800d2d4 <_dtoa_r+0x80c>
 800d260:	9b01      	ldr	r3, [sp, #4]
 800d262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d266:	2b00      	cmp	r3, #0
 800d268:	d136      	bne.n	800d2d8 <_dtoa_r+0x810>
 800d26a:	9b01      	ldr	r3, [sp, #4]
 800d26c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d270:	0d1b      	lsrs	r3, r3, #20
 800d272:	051b      	lsls	r3, r3, #20
 800d274:	b12b      	cbz	r3, 800d282 <_dtoa_r+0x7ba>
 800d276:	9b05      	ldr	r3, [sp, #20]
 800d278:	3301      	adds	r3, #1
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	f108 0801 	add.w	r8, r8, #1
 800d280:	2301      	movs	r3, #1
 800d282:	9307      	str	r3, [sp, #28]
 800d284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d286:	2b00      	cmp	r3, #0
 800d288:	d12a      	bne.n	800d2e0 <_dtoa_r+0x818>
 800d28a:	2001      	movs	r0, #1
 800d28c:	e030      	b.n	800d2f0 <_dtoa_r+0x828>
 800d28e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d290:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d294:	e795      	b.n	800d1c2 <_dtoa_r+0x6fa>
 800d296:	9b07      	ldr	r3, [sp, #28]
 800d298:	f109 37ff 	add.w	r7, r9, #4294967295
 800d29c:	42bb      	cmp	r3, r7
 800d29e:	bfbf      	itttt	lt
 800d2a0:	9b07      	ldrlt	r3, [sp, #28]
 800d2a2:	9707      	strlt	r7, [sp, #28]
 800d2a4:	1afa      	sublt	r2, r7, r3
 800d2a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d2a8:	bfbb      	ittet	lt
 800d2aa:	189b      	addlt	r3, r3, r2
 800d2ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d2ae:	1bdf      	subge	r7, r3, r7
 800d2b0:	2700      	movlt	r7, #0
 800d2b2:	f1b9 0f00 	cmp.w	r9, #0
 800d2b6:	bfb5      	itete	lt
 800d2b8:	9b05      	ldrlt	r3, [sp, #20]
 800d2ba:	9d05      	ldrge	r5, [sp, #20]
 800d2bc:	eba3 0509 	sublt.w	r5, r3, r9
 800d2c0:	464b      	movge	r3, r9
 800d2c2:	bfb8      	it	lt
 800d2c4:	2300      	movlt	r3, #0
 800d2c6:	e77e      	b.n	800d1c6 <_dtoa_r+0x6fe>
 800d2c8:	9f07      	ldr	r7, [sp, #28]
 800d2ca:	9d05      	ldr	r5, [sp, #20]
 800d2cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d2ce:	e783      	b.n	800d1d8 <_dtoa_r+0x710>
 800d2d0:	9a07      	ldr	r2, [sp, #28]
 800d2d2:	e7ab      	b.n	800d22c <_dtoa_r+0x764>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	e7d4      	b.n	800d282 <_dtoa_r+0x7ba>
 800d2d8:	9b00      	ldr	r3, [sp, #0]
 800d2da:	e7d2      	b.n	800d282 <_dtoa_r+0x7ba>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9307      	str	r3, [sp, #28]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d2e6:	6918      	ldr	r0, [r3, #16]
 800d2e8:	f000 ff9c 	bl	800e224 <__hi0bits>
 800d2ec:	f1c0 0020 	rsb	r0, r0, #32
 800d2f0:	4440      	add	r0, r8
 800d2f2:	f010 001f 	ands.w	r0, r0, #31
 800d2f6:	d047      	beq.n	800d388 <_dtoa_r+0x8c0>
 800d2f8:	f1c0 0320 	rsb	r3, r0, #32
 800d2fc:	2b04      	cmp	r3, #4
 800d2fe:	dd3b      	ble.n	800d378 <_dtoa_r+0x8b0>
 800d300:	9b05      	ldr	r3, [sp, #20]
 800d302:	f1c0 001c 	rsb	r0, r0, #28
 800d306:	4403      	add	r3, r0
 800d308:	9305      	str	r3, [sp, #20]
 800d30a:	4405      	add	r5, r0
 800d30c:	4480      	add	r8, r0
 800d30e:	9b05      	ldr	r3, [sp, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	dd05      	ble.n	800d320 <_dtoa_r+0x858>
 800d314:	461a      	mov	r2, r3
 800d316:	9904      	ldr	r1, [sp, #16]
 800d318:	4620      	mov	r0, r4
 800d31a:	f001 f8bf 	bl	800e49c <__lshift>
 800d31e:	9004      	str	r0, [sp, #16]
 800d320:	f1b8 0f00 	cmp.w	r8, #0
 800d324:	dd05      	ble.n	800d332 <_dtoa_r+0x86a>
 800d326:	4639      	mov	r1, r7
 800d328:	4642      	mov	r2, r8
 800d32a:	4620      	mov	r0, r4
 800d32c:	f001 f8b6 	bl	800e49c <__lshift>
 800d330:	4607      	mov	r7, r0
 800d332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d334:	b353      	cbz	r3, 800d38c <_dtoa_r+0x8c4>
 800d336:	4639      	mov	r1, r7
 800d338:	9804      	ldr	r0, [sp, #16]
 800d33a:	f001 f903 	bl	800e544 <__mcmp>
 800d33e:	2800      	cmp	r0, #0
 800d340:	da24      	bge.n	800d38c <_dtoa_r+0x8c4>
 800d342:	2300      	movs	r3, #0
 800d344:	220a      	movs	r2, #10
 800d346:	9904      	ldr	r1, [sp, #16]
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 fef2 	bl	800e132 <__multadd>
 800d34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d350:	9004      	str	r0, [sp, #16]
 800d352:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 814d 	beq.w	800d5f6 <_dtoa_r+0xb2e>
 800d35c:	2300      	movs	r3, #0
 800d35e:	4631      	mov	r1, r6
 800d360:	220a      	movs	r2, #10
 800d362:	4620      	mov	r0, r4
 800d364:	f000 fee5 	bl	800e132 <__multadd>
 800d368:	9b02      	ldr	r3, [sp, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	4606      	mov	r6, r0
 800d36e:	dc4f      	bgt.n	800d410 <_dtoa_r+0x948>
 800d370:	9b06      	ldr	r3, [sp, #24]
 800d372:	2b02      	cmp	r3, #2
 800d374:	dd4c      	ble.n	800d410 <_dtoa_r+0x948>
 800d376:	e011      	b.n	800d39c <_dtoa_r+0x8d4>
 800d378:	d0c9      	beq.n	800d30e <_dtoa_r+0x846>
 800d37a:	9a05      	ldr	r2, [sp, #20]
 800d37c:	331c      	adds	r3, #28
 800d37e:	441a      	add	r2, r3
 800d380:	9205      	str	r2, [sp, #20]
 800d382:	441d      	add	r5, r3
 800d384:	4498      	add	r8, r3
 800d386:	e7c2      	b.n	800d30e <_dtoa_r+0x846>
 800d388:	4603      	mov	r3, r0
 800d38a:	e7f6      	b.n	800d37a <_dtoa_r+0x8b2>
 800d38c:	f1b9 0f00 	cmp.w	r9, #0
 800d390:	dc38      	bgt.n	800d404 <_dtoa_r+0x93c>
 800d392:	9b06      	ldr	r3, [sp, #24]
 800d394:	2b02      	cmp	r3, #2
 800d396:	dd35      	ble.n	800d404 <_dtoa_r+0x93c>
 800d398:	f8cd 9008 	str.w	r9, [sp, #8]
 800d39c:	9b02      	ldr	r3, [sp, #8]
 800d39e:	b963      	cbnz	r3, 800d3ba <_dtoa_r+0x8f2>
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	2205      	movs	r2, #5
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 fec4 	bl	800e132 <__multadd>
 800d3aa:	4601      	mov	r1, r0
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	9804      	ldr	r0, [sp, #16]
 800d3b0:	f001 f8c8 	bl	800e544 <__mcmp>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	f73f adcc 	bgt.w	800cf52 <_dtoa_r+0x48a>
 800d3ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3bc:	465d      	mov	r5, fp
 800d3be:	ea6f 0a03 	mvn.w	sl, r3
 800d3c2:	f04f 0900 	mov.w	r9, #0
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fe9b 	bl	800e104 <_Bfree>
 800d3ce:	2e00      	cmp	r6, #0
 800d3d0:	f43f aeb7 	beq.w	800d142 <_dtoa_r+0x67a>
 800d3d4:	f1b9 0f00 	cmp.w	r9, #0
 800d3d8:	d005      	beq.n	800d3e6 <_dtoa_r+0x91e>
 800d3da:	45b1      	cmp	r9, r6
 800d3dc:	d003      	beq.n	800d3e6 <_dtoa_r+0x91e>
 800d3de:	4649      	mov	r1, r9
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fe8f 	bl	800e104 <_Bfree>
 800d3e6:	4631      	mov	r1, r6
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fe8b 	bl	800e104 <_Bfree>
 800d3ee:	e6a8      	b.n	800d142 <_dtoa_r+0x67a>
 800d3f0:	2700      	movs	r7, #0
 800d3f2:	463e      	mov	r6, r7
 800d3f4:	e7e1      	b.n	800d3ba <_dtoa_r+0x8f2>
 800d3f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d3fa:	463e      	mov	r6, r7
 800d3fc:	e5a9      	b.n	800cf52 <_dtoa_r+0x48a>
 800d3fe:	bf00      	nop
 800d400:	40240000 	.word	0x40240000
 800d404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d406:	f8cd 9008 	str.w	r9, [sp, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f000 80fa 	beq.w	800d604 <_dtoa_r+0xb3c>
 800d410:	2d00      	cmp	r5, #0
 800d412:	dd05      	ble.n	800d420 <_dtoa_r+0x958>
 800d414:	4631      	mov	r1, r6
 800d416:	462a      	mov	r2, r5
 800d418:	4620      	mov	r0, r4
 800d41a:	f001 f83f 	bl	800e49c <__lshift>
 800d41e:	4606      	mov	r6, r0
 800d420:	9b07      	ldr	r3, [sp, #28]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d04c      	beq.n	800d4c0 <_dtoa_r+0x9f8>
 800d426:	6871      	ldr	r1, [r6, #4]
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 fe37 	bl	800e09c <_Balloc>
 800d42e:	6932      	ldr	r2, [r6, #16]
 800d430:	3202      	adds	r2, #2
 800d432:	4605      	mov	r5, r0
 800d434:	0092      	lsls	r2, r2, #2
 800d436:	f106 010c 	add.w	r1, r6, #12
 800d43a:	300c      	adds	r0, #12
 800d43c:	f7fd fc52 	bl	800ace4 <memcpy>
 800d440:	2201      	movs	r2, #1
 800d442:	4629      	mov	r1, r5
 800d444:	4620      	mov	r0, r4
 800d446:	f001 f829 	bl	800e49c <__lshift>
 800d44a:	9b00      	ldr	r3, [sp, #0]
 800d44c:	f8cd b014 	str.w	fp, [sp, #20]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	46b1      	mov	r9, r6
 800d456:	9307      	str	r3, [sp, #28]
 800d458:	4606      	mov	r6, r0
 800d45a:	4639      	mov	r1, r7
 800d45c:	9804      	ldr	r0, [sp, #16]
 800d45e:	f7ff faa5 	bl	800c9ac <quorem>
 800d462:	4649      	mov	r1, r9
 800d464:	4605      	mov	r5, r0
 800d466:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d46a:	9804      	ldr	r0, [sp, #16]
 800d46c:	f001 f86a 	bl	800e544 <__mcmp>
 800d470:	4632      	mov	r2, r6
 800d472:	9000      	str	r0, [sp, #0]
 800d474:	4639      	mov	r1, r7
 800d476:	4620      	mov	r0, r4
 800d478:	f001 f87e 	bl	800e578 <__mdiff>
 800d47c:	68c3      	ldr	r3, [r0, #12]
 800d47e:	4602      	mov	r2, r0
 800d480:	bb03      	cbnz	r3, 800d4c4 <_dtoa_r+0x9fc>
 800d482:	4601      	mov	r1, r0
 800d484:	9008      	str	r0, [sp, #32]
 800d486:	9804      	ldr	r0, [sp, #16]
 800d488:	f001 f85c 	bl	800e544 <__mcmp>
 800d48c:	9a08      	ldr	r2, [sp, #32]
 800d48e:	4603      	mov	r3, r0
 800d490:	4611      	mov	r1, r2
 800d492:	4620      	mov	r0, r4
 800d494:	9308      	str	r3, [sp, #32]
 800d496:	f000 fe35 	bl	800e104 <_Bfree>
 800d49a:	9b08      	ldr	r3, [sp, #32]
 800d49c:	b9a3      	cbnz	r3, 800d4c8 <_dtoa_r+0xa00>
 800d49e:	9a06      	ldr	r2, [sp, #24]
 800d4a0:	b992      	cbnz	r2, 800d4c8 <_dtoa_r+0xa00>
 800d4a2:	9a07      	ldr	r2, [sp, #28]
 800d4a4:	b982      	cbnz	r2, 800d4c8 <_dtoa_r+0xa00>
 800d4a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4aa:	d029      	beq.n	800d500 <_dtoa_r+0xa38>
 800d4ac:	9b00      	ldr	r3, [sp, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dd01      	ble.n	800d4b6 <_dtoa_r+0x9ee>
 800d4b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d4b6:	9b05      	ldr	r3, [sp, #20]
 800d4b8:	1c5d      	adds	r5, r3, #1
 800d4ba:	f883 8000 	strb.w	r8, [r3]
 800d4be:	e782      	b.n	800d3c6 <_dtoa_r+0x8fe>
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	e7c2      	b.n	800d44a <_dtoa_r+0x982>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e7e3      	b.n	800d490 <_dtoa_r+0x9c8>
 800d4c8:	9a00      	ldr	r2, [sp, #0]
 800d4ca:	2a00      	cmp	r2, #0
 800d4cc:	db04      	blt.n	800d4d8 <_dtoa_r+0xa10>
 800d4ce:	d125      	bne.n	800d51c <_dtoa_r+0xa54>
 800d4d0:	9a06      	ldr	r2, [sp, #24]
 800d4d2:	bb1a      	cbnz	r2, 800d51c <_dtoa_r+0xa54>
 800d4d4:	9a07      	ldr	r2, [sp, #28]
 800d4d6:	bb0a      	cbnz	r2, 800d51c <_dtoa_r+0xa54>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	ddec      	ble.n	800d4b6 <_dtoa_r+0x9ee>
 800d4dc:	2201      	movs	r2, #1
 800d4de:	9904      	ldr	r1, [sp, #16]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 ffdb 	bl	800e49c <__lshift>
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	9004      	str	r0, [sp, #16]
 800d4ea:	f001 f82b 	bl	800e544 <__mcmp>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	dc03      	bgt.n	800d4fa <_dtoa_r+0xa32>
 800d4f2:	d1e0      	bne.n	800d4b6 <_dtoa_r+0x9ee>
 800d4f4:	f018 0f01 	tst.w	r8, #1
 800d4f8:	d0dd      	beq.n	800d4b6 <_dtoa_r+0x9ee>
 800d4fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4fe:	d1d8      	bne.n	800d4b2 <_dtoa_r+0x9ea>
 800d500:	9b05      	ldr	r3, [sp, #20]
 800d502:	9a05      	ldr	r2, [sp, #20]
 800d504:	1c5d      	adds	r5, r3, #1
 800d506:	2339      	movs	r3, #57	; 0x39
 800d508:	7013      	strb	r3, [r2, #0]
 800d50a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d50e:	2b39      	cmp	r3, #57	; 0x39
 800d510:	f105 32ff 	add.w	r2, r5, #4294967295
 800d514:	d04f      	beq.n	800d5b6 <_dtoa_r+0xaee>
 800d516:	3301      	adds	r3, #1
 800d518:	7013      	strb	r3, [r2, #0]
 800d51a:	e754      	b.n	800d3c6 <_dtoa_r+0x8fe>
 800d51c:	9a05      	ldr	r2, [sp, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f102 0501 	add.w	r5, r2, #1
 800d524:	dd06      	ble.n	800d534 <_dtoa_r+0xa6c>
 800d526:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d52a:	d0e9      	beq.n	800d500 <_dtoa_r+0xa38>
 800d52c:	f108 0801 	add.w	r8, r8, #1
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	e7c2      	b.n	800d4ba <_dtoa_r+0x9f2>
 800d534:	9a02      	ldr	r2, [sp, #8]
 800d536:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d53a:	eba5 030b 	sub.w	r3, r5, fp
 800d53e:	4293      	cmp	r3, r2
 800d540:	d021      	beq.n	800d586 <_dtoa_r+0xabe>
 800d542:	2300      	movs	r3, #0
 800d544:	220a      	movs	r2, #10
 800d546:	9904      	ldr	r1, [sp, #16]
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fdf2 	bl	800e132 <__multadd>
 800d54e:	45b1      	cmp	r9, r6
 800d550:	9004      	str	r0, [sp, #16]
 800d552:	f04f 0300 	mov.w	r3, #0
 800d556:	f04f 020a 	mov.w	r2, #10
 800d55a:	4649      	mov	r1, r9
 800d55c:	4620      	mov	r0, r4
 800d55e:	d105      	bne.n	800d56c <_dtoa_r+0xaa4>
 800d560:	f000 fde7 	bl	800e132 <__multadd>
 800d564:	4681      	mov	r9, r0
 800d566:	4606      	mov	r6, r0
 800d568:	9505      	str	r5, [sp, #20]
 800d56a:	e776      	b.n	800d45a <_dtoa_r+0x992>
 800d56c:	f000 fde1 	bl	800e132 <__multadd>
 800d570:	4631      	mov	r1, r6
 800d572:	4681      	mov	r9, r0
 800d574:	2300      	movs	r3, #0
 800d576:	220a      	movs	r2, #10
 800d578:	4620      	mov	r0, r4
 800d57a:	f000 fdda 	bl	800e132 <__multadd>
 800d57e:	4606      	mov	r6, r0
 800d580:	e7f2      	b.n	800d568 <_dtoa_r+0xaa0>
 800d582:	f04f 0900 	mov.w	r9, #0
 800d586:	2201      	movs	r2, #1
 800d588:	9904      	ldr	r1, [sp, #16]
 800d58a:	4620      	mov	r0, r4
 800d58c:	f000 ff86 	bl	800e49c <__lshift>
 800d590:	4639      	mov	r1, r7
 800d592:	9004      	str	r0, [sp, #16]
 800d594:	f000 ffd6 	bl	800e544 <__mcmp>
 800d598:	2800      	cmp	r0, #0
 800d59a:	dcb6      	bgt.n	800d50a <_dtoa_r+0xa42>
 800d59c:	d102      	bne.n	800d5a4 <_dtoa_r+0xadc>
 800d59e:	f018 0f01 	tst.w	r8, #1
 800d5a2:	d1b2      	bne.n	800d50a <_dtoa_r+0xa42>
 800d5a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5a8:	2b30      	cmp	r3, #48	; 0x30
 800d5aa:	f105 32ff 	add.w	r2, r5, #4294967295
 800d5ae:	f47f af0a 	bne.w	800d3c6 <_dtoa_r+0x8fe>
 800d5b2:	4615      	mov	r5, r2
 800d5b4:	e7f6      	b.n	800d5a4 <_dtoa_r+0xadc>
 800d5b6:	4593      	cmp	fp, r2
 800d5b8:	d105      	bne.n	800d5c6 <_dtoa_r+0xafe>
 800d5ba:	2331      	movs	r3, #49	; 0x31
 800d5bc:	f10a 0a01 	add.w	sl, sl, #1
 800d5c0:	f88b 3000 	strb.w	r3, [fp]
 800d5c4:	e6ff      	b.n	800d3c6 <_dtoa_r+0x8fe>
 800d5c6:	4615      	mov	r5, r2
 800d5c8:	e79f      	b.n	800d50a <_dtoa_r+0xa42>
 800d5ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d630 <_dtoa_r+0xb68>
 800d5ce:	e007      	b.n	800d5e0 <_dtoa_r+0xb18>
 800d5d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d634 <_dtoa_r+0xb6c>
 800d5d6:	b11b      	cbz	r3, 800d5e0 <_dtoa_r+0xb18>
 800d5d8:	f10b 0308 	add.w	r3, fp, #8
 800d5dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d5de:	6013      	str	r3, [r2, #0]
 800d5e0:	4658      	mov	r0, fp
 800d5e2:	b017      	add	sp, #92	; 0x5c
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	9b06      	ldr	r3, [sp, #24]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	f77f ae35 	ble.w	800d25a <_dtoa_r+0x792>
 800d5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	e649      	b.n	800d28a <_dtoa_r+0x7c2>
 800d5f6:	9b02      	ldr	r3, [sp, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dc03      	bgt.n	800d604 <_dtoa_r+0xb3c>
 800d5fc:	9b06      	ldr	r3, [sp, #24]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	f73f aecc 	bgt.w	800d39c <_dtoa_r+0x8d4>
 800d604:	465d      	mov	r5, fp
 800d606:	4639      	mov	r1, r7
 800d608:	9804      	ldr	r0, [sp, #16]
 800d60a:	f7ff f9cf 	bl	800c9ac <quorem>
 800d60e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d612:	f805 8b01 	strb.w	r8, [r5], #1
 800d616:	9a02      	ldr	r2, [sp, #8]
 800d618:	eba5 030b 	sub.w	r3, r5, fp
 800d61c:	429a      	cmp	r2, r3
 800d61e:	ddb0      	ble.n	800d582 <_dtoa_r+0xaba>
 800d620:	2300      	movs	r3, #0
 800d622:	220a      	movs	r2, #10
 800d624:	9904      	ldr	r1, [sp, #16]
 800d626:	4620      	mov	r0, r4
 800d628:	f000 fd83 	bl	800e132 <__multadd>
 800d62c:	9004      	str	r0, [sp, #16]
 800d62e:	e7ea      	b.n	800d606 <_dtoa_r+0xb3e>
 800d630:	0800f21c 	.word	0x0800f21c
 800d634:	0800f298 	.word	0x0800f298

0800d638 <__sflush_r>:
 800d638:	898a      	ldrh	r2, [r1, #12]
 800d63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d63e:	4605      	mov	r5, r0
 800d640:	0710      	lsls	r0, r2, #28
 800d642:	460c      	mov	r4, r1
 800d644:	d458      	bmi.n	800d6f8 <__sflush_r+0xc0>
 800d646:	684b      	ldr	r3, [r1, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	dc05      	bgt.n	800d658 <__sflush_r+0x20>
 800d64c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d64e:	2b00      	cmp	r3, #0
 800d650:	dc02      	bgt.n	800d658 <__sflush_r+0x20>
 800d652:	2000      	movs	r0, #0
 800d654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	d0f9      	beq.n	800d652 <__sflush_r+0x1a>
 800d65e:	2300      	movs	r3, #0
 800d660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d664:	682f      	ldr	r7, [r5, #0]
 800d666:	6a21      	ldr	r1, [r4, #32]
 800d668:	602b      	str	r3, [r5, #0]
 800d66a:	d032      	beq.n	800d6d2 <__sflush_r+0x9a>
 800d66c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	075a      	lsls	r2, r3, #29
 800d672:	d505      	bpl.n	800d680 <__sflush_r+0x48>
 800d674:	6863      	ldr	r3, [r4, #4]
 800d676:	1ac0      	subs	r0, r0, r3
 800d678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d67a:	b10b      	cbz	r3, 800d680 <__sflush_r+0x48>
 800d67c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d67e:	1ac0      	subs	r0, r0, r3
 800d680:	2300      	movs	r3, #0
 800d682:	4602      	mov	r2, r0
 800d684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d686:	6a21      	ldr	r1, [r4, #32]
 800d688:	4628      	mov	r0, r5
 800d68a:	47b0      	blx	r6
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	d106      	bne.n	800d6a0 <__sflush_r+0x68>
 800d692:	6829      	ldr	r1, [r5, #0]
 800d694:	291d      	cmp	r1, #29
 800d696:	d848      	bhi.n	800d72a <__sflush_r+0xf2>
 800d698:	4a29      	ldr	r2, [pc, #164]	; (800d740 <__sflush_r+0x108>)
 800d69a:	40ca      	lsrs	r2, r1
 800d69c:	07d6      	lsls	r6, r2, #31
 800d69e:	d544      	bpl.n	800d72a <__sflush_r+0xf2>
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	6062      	str	r2, [r4, #4]
 800d6a4:	04d9      	lsls	r1, r3, #19
 800d6a6:	6922      	ldr	r2, [r4, #16]
 800d6a8:	6022      	str	r2, [r4, #0]
 800d6aa:	d504      	bpl.n	800d6b6 <__sflush_r+0x7e>
 800d6ac:	1c42      	adds	r2, r0, #1
 800d6ae:	d101      	bne.n	800d6b4 <__sflush_r+0x7c>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b903      	cbnz	r3, 800d6b6 <__sflush_r+0x7e>
 800d6b4:	6560      	str	r0, [r4, #84]	; 0x54
 800d6b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6b8:	602f      	str	r7, [r5, #0]
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	d0c9      	beq.n	800d652 <__sflush_r+0x1a>
 800d6be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	d002      	beq.n	800d6cc <__sflush_r+0x94>
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f001 f8f6 	bl	800e8b8 <_free_r>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	6360      	str	r0, [r4, #52]	; 0x34
 800d6d0:	e7c0      	b.n	800d654 <__sflush_r+0x1c>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	47b0      	blx	r6
 800d6d8:	1c41      	adds	r1, r0, #1
 800d6da:	d1c8      	bne.n	800d66e <__sflush_r+0x36>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d0c5      	beq.n	800d66e <__sflush_r+0x36>
 800d6e2:	2b1d      	cmp	r3, #29
 800d6e4:	d001      	beq.n	800d6ea <__sflush_r+0xb2>
 800d6e6:	2b16      	cmp	r3, #22
 800d6e8:	d101      	bne.n	800d6ee <__sflush_r+0xb6>
 800d6ea:	602f      	str	r7, [r5, #0]
 800d6ec:	e7b1      	b.n	800d652 <__sflush_r+0x1a>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6f4:	81a3      	strh	r3, [r4, #12]
 800d6f6:	e7ad      	b.n	800d654 <__sflush_r+0x1c>
 800d6f8:	690f      	ldr	r7, [r1, #16]
 800d6fa:	2f00      	cmp	r7, #0
 800d6fc:	d0a9      	beq.n	800d652 <__sflush_r+0x1a>
 800d6fe:	0793      	lsls	r3, r2, #30
 800d700:	680e      	ldr	r6, [r1, #0]
 800d702:	bf08      	it	eq
 800d704:	694b      	ldreq	r3, [r1, #20]
 800d706:	600f      	str	r7, [r1, #0]
 800d708:	bf18      	it	ne
 800d70a:	2300      	movne	r3, #0
 800d70c:	eba6 0807 	sub.w	r8, r6, r7
 800d710:	608b      	str	r3, [r1, #8]
 800d712:	f1b8 0f00 	cmp.w	r8, #0
 800d716:	dd9c      	ble.n	800d652 <__sflush_r+0x1a>
 800d718:	4643      	mov	r3, r8
 800d71a:	463a      	mov	r2, r7
 800d71c:	6a21      	ldr	r1, [r4, #32]
 800d71e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d720:	4628      	mov	r0, r5
 800d722:	47b0      	blx	r6
 800d724:	2800      	cmp	r0, #0
 800d726:	dc06      	bgt.n	800d736 <__sflush_r+0xfe>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d72e:	81a3      	strh	r3, [r4, #12]
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	e78e      	b.n	800d654 <__sflush_r+0x1c>
 800d736:	4407      	add	r7, r0
 800d738:	eba8 0800 	sub.w	r8, r8, r0
 800d73c:	e7e9      	b.n	800d712 <__sflush_r+0xda>
 800d73e:	bf00      	nop
 800d740:	20400001 	.word	0x20400001

0800d744 <_fflush_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	690b      	ldr	r3, [r1, #16]
 800d748:	4605      	mov	r5, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b1db      	cbz	r3, 800d786 <_fflush_r+0x42>
 800d74e:	b118      	cbz	r0, 800d758 <_fflush_r+0x14>
 800d750:	6983      	ldr	r3, [r0, #24]
 800d752:	b90b      	cbnz	r3, 800d758 <_fflush_r+0x14>
 800d754:	f000 f860 	bl	800d818 <__sinit>
 800d758:	4b0c      	ldr	r3, [pc, #48]	; (800d78c <_fflush_r+0x48>)
 800d75a:	429c      	cmp	r4, r3
 800d75c:	d109      	bne.n	800d772 <_fflush_r+0x2e>
 800d75e:	686c      	ldr	r4, [r5, #4]
 800d760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d764:	b17b      	cbz	r3, 800d786 <_fflush_r+0x42>
 800d766:	4621      	mov	r1, r4
 800d768:	4628      	mov	r0, r5
 800d76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d76e:	f7ff bf63 	b.w	800d638 <__sflush_r>
 800d772:	4b07      	ldr	r3, [pc, #28]	; (800d790 <_fflush_r+0x4c>)
 800d774:	429c      	cmp	r4, r3
 800d776:	d101      	bne.n	800d77c <_fflush_r+0x38>
 800d778:	68ac      	ldr	r4, [r5, #8]
 800d77a:	e7f1      	b.n	800d760 <_fflush_r+0x1c>
 800d77c:	4b05      	ldr	r3, [pc, #20]	; (800d794 <_fflush_r+0x50>)
 800d77e:	429c      	cmp	r4, r3
 800d780:	bf08      	it	eq
 800d782:	68ec      	ldreq	r4, [r5, #12]
 800d784:	e7ec      	b.n	800d760 <_fflush_r+0x1c>
 800d786:	2000      	movs	r0, #0
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	bf00      	nop
 800d78c:	0800f2c8 	.word	0x0800f2c8
 800d790:	0800f2e8 	.word	0x0800f2e8
 800d794:	0800f2a8 	.word	0x0800f2a8

0800d798 <std>:
 800d798:	2300      	movs	r3, #0
 800d79a:	b510      	push	{r4, lr}
 800d79c:	4604      	mov	r4, r0
 800d79e:	e9c0 3300 	strd	r3, r3, [r0]
 800d7a2:	6083      	str	r3, [r0, #8]
 800d7a4:	8181      	strh	r1, [r0, #12]
 800d7a6:	6643      	str	r3, [r0, #100]	; 0x64
 800d7a8:	81c2      	strh	r2, [r0, #14]
 800d7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7ae:	6183      	str	r3, [r0, #24]
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	2208      	movs	r2, #8
 800d7b4:	305c      	adds	r0, #92	; 0x5c
 800d7b6:	f7fd faa0 	bl	800acfa <memset>
 800d7ba:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <std+0x38>)
 800d7bc:	6263      	str	r3, [r4, #36]	; 0x24
 800d7be:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <std+0x3c>)
 800d7c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7c2:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <std+0x40>)
 800d7c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7c6:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <std+0x44>)
 800d7c8:	6224      	str	r4, [r4, #32]
 800d7ca:	6323      	str	r3, [r4, #48]	; 0x30
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	bf00      	nop
 800d7d0:	0800ef4d 	.word	0x0800ef4d
 800d7d4:	0800ef6f 	.word	0x0800ef6f
 800d7d8:	0800efa7 	.word	0x0800efa7
 800d7dc:	0800efcb 	.word	0x0800efcb

0800d7e0 <_cleanup_r>:
 800d7e0:	4901      	ldr	r1, [pc, #4]	; (800d7e8 <_cleanup_r+0x8>)
 800d7e2:	f000 b885 	b.w	800d8f0 <_fwalk_reent>
 800d7e6:	bf00      	nop
 800d7e8:	0800d745 	.word	0x0800d745

0800d7ec <__sfmoreglue>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	1e4a      	subs	r2, r1, #1
 800d7f0:	2568      	movs	r5, #104	; 0x68
 800d7f2:	4355      	muls	r5, r2
 800d7f4:	460e      	mov	r6, r1
 800d7f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7fa:	f001 f8ab 	bl	800e954 <_malloc_r>
 800d7fe:	4604      	mov	r4, r0
 800d800:	b140      	cbz	r0, 800d814 <__sfmoreglue+0x28>
 800d802:	2100      	movs	r1, #0
 800d804:	e9c0 1600 	strd	r1, r6, [r0]
 800d808:	300c      	adds	r0, #12
 800d80a:	60a0      	str	r0, [r4, #8]
 800d80c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d810:	f7fd fa73 	bl	800acfa <memset>
 800d814:	4620      	mov	r0, r4
 800d816:	bd70      	pop	{r4, r5, r6, pc}

0800d818 <__sinit>:
 800d818:	6983      	ldr	r3, [r0, #24]
 800d81a:	b510      	push	{r4, lr}
 800d81c:	4604      	mov	r4, r0
 800d81e:	bb33      	cbnz	r3, 800d86e <__sinit+0x56>
 800d820:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d824:	6503      	str	r3, [r0, #80]	; 0x50
 800d826:	4b12      	ldr	r3, [pc, #72]	; (800d870 <__sinit+0x58>)
 800d828:	4a12      	ldr	r2, [pc, #72]	; (800d874 <__sinit+0x5c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6282      	str	r2, [r0, #40]	; 0x28
 800d82e:	4298      	cmp	r0, r3
 800d830:	bf04      	itt	eq
 800d832:	2301      	moveq	r3, #1
 800d834:	6183      	streq	r3, [r0, #24]
 800d836:	f000 f81f 	bl	800d878 <__sfp>
 800d83a:	6060      	str	r0, [r4, #4]
 800d83c:	4620      	mov	r0, r4
 800d83e:	f000 f81b 	bl	800d878 <__sfp>
 800d842:	60a0      	str	r0, [r4, #8]
 800d844:	4620      	mov	r0, r4
 800d846:	f000 f817 	bl	800d878 <__sfp>
 800d84a:	2200      	movs	r2, #0
 800d84c:	60e0      	str	r0, [r4, #12]
 800d84e:	2104      	movs	r1, #4
 800d850:	6860      	ldr	r0, [r4, #4]
 800d852:	f7ff ffa1 	bl	800d798 <std>
 800d856:	2201      	movs	r2, #1
 800d858:	2109      	movs	r1, #9
 800d85a:	68a0      	ldr	r0, [r4, #8]
 800d85c:	f7ff ff9c 	bl	800d798 <std>
 800d860:	2202      	movs	r2, #2
 800d862:	2112      	movs	r1, #18
 800d864:	68e0      	ldr	r0, [r4, #12]
 800d866:	f7ff ff97 	bl	800d798 <std>
 800d86a:	2301      	movs	r3, #1
 800d86c:	61a3      	str	r3, [r4, #24]
 800d86e:	bd10      	pop	{r4, pc}
 800d870:	0800f208 	.word	0x0800f208
 800d874:	0800d7e1 	.word	0x0800d7e1

0800d878 <__sfp>:
 800d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87a:	4b1b      	ldr	r3, [pc, #108]	; (800d8e8 <__sfp+0x70>)
 800d87c:	681e      	ldr	r6, [r3, #0]
 800d87e:	69b3      	ldr	r3, [r6, #24]
 800d880:	4607      	mov	r7, r0
 800d882:	b913      	cbnz	r3, 800d88a <__sfp+0x12>
 800d884:	4630      	mov	r0, r6
 800d886:	f7ff ffc7 	bl	800d818 <__sinit>
 800d88a:	3648      	adds	r6, #72	; 0x48
 800d88c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d890:	3b01      	subs	r3, #1
 800d892:	d503      	bpl.n	800d89c <__sfp+0x24>
 800d894:	6833      	ldr	r3, [r6, #0]
 800d896:	b133      	cbz	r3, 800d8a6 <__sfp+0x2e>
 800d898:	6836      	ldr	r6, [r6, #0]
 800d89a:	e7f7      	b.n	800d88c <__sfp+0x14>
 800d89c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8a0:	b16d      	cbz	r5, 800d8be <__sfp+0x46>
 800d8a2:	3468      	adds	r4, #104	; 0x68
 800d8a4:	e7f4      	b.n	800d890 <__sfp+0x18>
 800d8a6:	2104      	movs	r1, #4
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	f7ff ff9f 	bl	800d7ec <__sfmoreglue>
 800d8ae:	6030      	str	r0, [r6, #0]
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d1f1      	bne.n	800d898 <__sfp+0x20>
 800d8b4:	230c      	movs	r3, #12
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8be:	4b0b      	ldr	r3, [pc, #44]	; (800d8ec <__sfp+0x74>)
 800d8c0:	6665      	str	r5, [r4, #100]	; 0x64
 800d8c2:	e9c4 5500 	strd	r5, r5, [r4]
 800d8c6:	60a5      	str	r5, [r4, #8]
 800d8c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d8cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d8d0:	2208      	movs	r2, #8
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8d8:	f7fd fa0f 	bl	800acfa <memset>
 800d8dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8e4:	e7e9      	b.n	800d8ba <__sfp+0x42>
 800d8e6:	bf00      	nop
 800d8e8:	0800f208 	.word	0x0800f208
 800d8ec:	ffff0001 	.word	0xffff0001

0800d8f0 <_fwalk_reent>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	4680      	mov	r8, r0
 800d8f6:	4689      	mov	r9, r1
 800d8f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8fc:	2600      	movs	r6, #0
 800d8fe:	b914      	cbnz	r4, 800d906 <_fwalk_reent+0x16>
 800d900:	4630      	mov	r0, r6
 800d902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d906:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d90a:	3f01      	subs	r7, #1
 800d90c:	d501      	bpl.n	800d912 <_fwalk_reent+0x22>
 800d90e:	6824      	ldr	r4, [r4, #0]
 800d910:	e7f5      	b.n	800d8fe <_fwalk_reent+0xe>
 800d912:	89ab      	ldrh	r3, [r5, #12]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d907      	bls.n	800d928 <_fwalk_reent+0x38>
 800d918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d91c:	3301      	adds	r3, #1
 800d91e:	d003      	beq.n	800d928 <_fwalk_reent+0x38>
 800d920:	4629      	mov	r1, r5
 800d922:	4640      	mov	r0, r8
 800d924:	47c8      	blx	r9
 800d926:	4306      	orrs	r6, r0
 800d928:	3568      	adds	r5, #104	; 0x68
 800d92a:	e7ee      	b.n	800d90a <_fwalk_reent+0x1a>

0800d92c <rshift>:
 800d92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d92e:	6906      	ldr	r6, [r0, #16]
 800d930:	114b      	asrs	r3, r1, #5
 800d932:	429e      	cmp	r6, r3
 800d934:	f100 0414 	add.w	r4, r0, #20
 800d938:	dd30      	ble.n	800d99c <rshift+0x70>
 800d93a:	f011 011f 	ands.w	r1, r1, #31
 800d93e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d942:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d946:	d108      	bne.n	800d95a <rshift+0x2e>
 800d948:	4621      	mov	r1, r4
 800d94a:	42b2      	cmp	r2, r6
 800d94c:	460b      	mov	r3, r1
 800d94e:	d211      	bcs.n	800d974 <rshift+0x48>
 800d950:	f852 3b04 	ldr.w	r3, [r2], #4
 800d954:	f841 3b04 	str.w	r3, [r1], #4
 800d958:	e7f7      	b.n	800d94a <rshift+0x1e>
 800d95a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d95e:	f1c1 0c20 	rsb	ip, r1, #32
 800d962:	40cd      	lsrs	r5, r1
 800d964:	3204      	adds	r2, #4
 800d966:	4623      	mov	r3, r4
 800d968:	42b2      	cmp	r2, r6
 800d96a:	4617      	mov	r7, r2
 800d96c:	d30c      	bcc.n	800d988 <rshift+0x5c>
 800d96e:	601d      	str	r5, [r3, #0]
 800d970:	b105      	cbz	r5, 800d974 <rshift+0x48>
 800d972:	3304      	adds	r3, #4
 800d974:	1b1a      	subs	r2, r3, r4
 800d976:	42a3      	cmp	r3, r4
 800d978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d97c:	bf08      	it	eq
 800d97e:	2300      	moveq	r3, #0
 800d980:	6102      	str	r2, [r0, #16]
 800d982:	bf08      	it	eq
 800d984:	6143      	streq	r3, [r0, #20]
 800d986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d988:	683f      	ldr	r7, [r7, #0]
 800d98a:	fa07 f70c 	lsl.w	r7, r7, ip
 800d98e:	433d      	orrs	r5, r7
 800d990:	f843 5b04 	str.w	r5, [r3], #4
 800d994:	f852 5b04 	ldr.w	r5, [r2], #4
 800d998:	40cd      	lsrs	r5, r1
 800d99a:	e7e5      	b.n	800d968 <rshift+0x3c>
 800d99c:	4623      	mov	r3, r4
 800d99e:	e7e9      	b.n	800d974 <rshift+0x48>

0800d9a0 <__hexdig_fun>:
 800d9a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9a4:	2b09      	cmp	r3, #9
 800d9a6:	d802      	bhi.n	800d9ae <__hexdig_fun+0xe>
 800d9a8:	3820      	subs	r0, #32
 800d9aa:	b2c0      	uxtb	r0, r0
 800d9ac:	4770      	bx	lr
 800d9ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d801      	bhi.n	800d9ba <__hexdig_fun+0x1a>
 800d9b6:	3847      	subs	r0, #71	; 0x47
 800d9b8:	e7f7      	b.n	800d9aa <__hexdig_fun+0xa>
 800d9ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9be:	2b05      	cmp	r3, #5
 800d9c0:	d801      	bhi.n	800d9c6 <__hexdig_fun+0x26>
 800d9c2:	3827      	subs	r0, #39	; 0x27
 800d9c4:	e7f1      	b.n	800d9aa <__hexdig_fun+0xa>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	4770      	bx	lr

0800d9ca <__gethex>:
 800d9ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ce:	b08b      	sub	sp, #44	; 0x2c
 800d9d0:	468a      	mov	sl, r1
 800d9d2:	9002      	str	r0, [sp, #8]
 800d9d4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d9d6:	9306      	str	r3, [sp, #24]
 800d9d8:	4690      	mov	r8, r2
 800d9da:	f000 fad0 	bl	800df7e <__localeconv_l>
 800d9de:	6803      	ldr	r3, [r0, #0]
 800d9e0:	9303      	str	r3, [sp, #12]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7f2 fbf4 	bl	80001d0 <strlen>
 800d9e8:	9b03      	ldr	r3, [sp, #12]
 800d9ea:	9001      	str	r0, [sp, #4]
 800d9ec:	4403      	add	r3, r0
 800d9ee:	f04f 0b00 	mov.w	fp, #0
 800d9f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d9f6:	9307      	str	r3, [sp, #28]
 800d9f8:	f8da 3000 	ldr.w	r3, [sl]
 800d9fc:	3302      	adds	r3, #2
 800d9fe:	461f      	mov	r7, r3
 800da00:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da04:	2830      	cmp	r0, #48	; 0x30
 800da06:	d06c      	beq.n	800dae2 <__gethex+0x118>
 800da08:	f7ff ffca 	bl	800d9a0 <__hexdig_fun>
 800da0c:	4604      	mov	r4, r0
 800da0e:	2800      	cmp	r0, #0
 800da10:	d16a      	bne.n	800dae8 <__gethex+0x11e>
 800da12:	9a01      	ldr	r2, [sp, #4]
 800da14:	9903      	ldr	r1, [sp, #12]
 800da16:	4638      	mov	r0, r7
 800da18:	f001 fadb 	bl	800efd2 <strncmp>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d166      	bne.n	800daee <__gethex+0x124>
 800da20:	9b01      	ldr	r3, [sp, #4]
 800da22:	5cf8      	ldrb	r0, [r7, r3]
 800da24:	18fe      	adds	r6, r7, r3
 800da26:	f7ff ffbb 	bl	800d9a0 <__hexdig_fun>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d062      	beq.n	800daf4 <__gethex+0x12a>
 800da2e:	4633      	mov	r3, r6
 800da30:	7818      	ldrb	r0, [r3, #0]
 800da32:	2830      	cmp	r0, #48	; 0x30
 800da34:	461f      	mov	r7, r3
 800da36:	f103 0301 	add.w	r3, r3, #1
 800da3a:	d0f9      	beq.n	800da30 <__gethex+0x66>
 800da3c:	f7ff ffb0 	bl	800d9a0 <__hexdig_fun>
 800da40:	fab0 f580 	clz	r5, r0
 800da44:	096d      	lsrs	r5, r5, #5
 800da46:	4634      	mov	r4, r6
 800da48:	f04f 0b01 	mov.w	fp, #1
 800da4c:	463a      	mov	r2, r7
 800da4e:	4616      	mov	r6, r2
 800da50:	3201      	adds	r2, #1
 800da52:	7830      	ldrb	r0, [r6, #0]
 800da54:	f7ff ffa4 	bl	800d9a0 <__hexdig_fun>
 800da58:	2800      	cmp	r0, #0
 800da5a:	d1f8      	bne.n	800da4e <__gethex+0x84>
 800da5c:	9a01      	ldr	r2, [sp, #4]
 800da5e:	9903      	ldr	r1, [sp, #12]
 800da60:	4630      	mov	r0, r6
 800da62:	f001 fab6 	bl	800efd2 <strncmp>
 800da66:	b950      	cbnz	r0, 800da7e <__gethex+0xb4>
 800da68:	b954      	cbnz	r4, 800da80 <__gethex+0xb6>
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	18f4      	adds	r4, r6, r3
 800da6e:	4622      	mov	r2, r4
 800da70:	4616      	mov	r6, r2
 800da72:	3201      	adds	r2, #1
 800da74:	7830      	ldrb	r0, [r6, #0]
 800da76:	f7ff ff93 	bl	800d9a0 <__hexdig_fun>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d1f8      	bne.n	800da70 <__gethex+0xa6>
 800da7e:	b10c      	cbz	r4, 800da84 <__gethex+0xba>
 800da80:	1ba4      	subs	r4, r4, r6
 800da82:	00a4      	lsls	r4, r4, #2
 800da84:	7833      	ldrb	r3, [r6, #0]
 800da86:	2b50      	cmp	r3, #80	; 0x50
 800da88:	d001      	beq.n	800da8e <__gethex+0xc4>
 800da8a:	2b70      	cmp	r3, #112	; 0x70
 800da8c:	d140      	bne.n	800db10 <__gethex+0x146>
 800da8e:	7873      	ldrb	r3, [r6, #1]
 800da90:	2b2b      	cmp	r3, #43	; 0x2b
 800da92:	d031      	beq.n	800daf8 <__gethex+0x12e>
 800da94:	2b2d      	cmp	r3, #45	; 0x2d
 800da96:	d033      	beq.n	800db00 <__gethex+0x136>
 800da98:	1c71      	adds	r1, r6, #1
 800da9a:	f04f 0900 	mov.w	r9, #0
 800da9e:	7808      	ldrb	r0, [r1, #0]
 800daa0:	f7ff ff7e 	bl	800d9a0 <__hexdig_fun>
 800daa4:	1e43      	subs	r3, r0, #1
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	2b18      	cmp	r3, #24
 800daaa:	d831      	bhi.n	800db10 <__gethex+0x146>
 800daac:	f1a0 0210 	sub.w	r2, r0, #16
 800dab0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dab4:	f7ff ff74 	bl	800d9a0 <__hexdig_fun>
 800dab8:	1e43      	subs	r3, r0, #1
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b18      	cmp	r3, #24
 800dabe:	d922      	bls.n	800db06 <__gethex+0x13c>
 800dac0:	f1b9 0f00 	cmp.w	r9, #0
 800dac4:	d000      	beq.n	800dac8 <__gethex+0xfe>
 800dac6:	4252      	negs	r2, r2
 800dac8:	4414      	add	r4, r2
 800daca:	f8ca 1000 	str.w	r1, [sl]
 800dace:	b30d      	cbz	r5, 800db14 <__gethex+0x14a>
 800dad0:	f1bb 0f00 	cmp.w	fp, #0
 800dad4:	bf0c      	ite	eq
 800dad6:	2706      	moveq	r7, #6
 800dad8:	2700      	movne	r7, #0
 800dada:	4638      	mov	r0, r7
 800dadc:	b00b      	add	sp, #44	; 0x2c
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	f10b 0b01 	add.w	fp, fp, #1
 800dae6:	e78a      	b.n	800d9fe <__gethex+0x34>
 800dae8:	2500      	movs	r5, #0
 800daea:	462c      	mov	r4, r5
 800daec:	e7ae      	b.n	800da4c <__gethex+0x82>
 800daee:	463e      	mov	r6, r7
 800daf0:	2501      	movs	r5, #1
 800daf2:	e7c7      	b.n	800da84 <__gethex+0xba>
 800daf4:	4604      	mov	r4, r0
 800daf6:	e7fb      	b.n	800daf0 <__gethex+0x126>
 800daf8:	f04f 0900 	mov.w	r9, #0
 800dafc:	1cb1      	adds	r1, r6, #2
 800dafe:	e7ce      	b.n	800da9e <__gethex+0xd4>
 800db00:	f04f 0901 	mov.w	r9, #1
 800db04:	e7fa      	b.n	800dafc <__gethex+0x132>
 800db06:	230a      	movs	r3, #10
 800db08:	fb03 0202 	mla	r2, r3, r2, r0
 800db0c:	3a10      	subs	r2, #16
 800db0e:	e7cf      	b.n	800dab0 <__gethex+0xe6>
 800db10:	4631      	mov	r1, r6
 800db12:	e7da      	b.n	800daca <__gethex+0x100>
 800db14:	1bf3      	subs	r3, r6, r7
 800db16:	3b01      	subs	r3, #1
 800db18:	4629      	mov	r1, r5
 800db1a:	2b07      	cmp	r3, #7
 800db1c:	dc49      	bgt.n	800dbb2 <__gethex+0x1e8>
 800db1e:	9802      	ldr	r0, [sp, #8]
 800db20:	f000 fabc 	bl	800e09c <_Balloc>
 800db24:	9b01      	ldr	r3, [sp, #4]
 800db26:	f100 0914 	add.w	r9, r0, #20
 800db2a:	f04f 0b00 	mov.w	fp, #0
 800db2e:	f1c3 0301 	rsb	r3, r3, #1
 800db32:	4605      	mov	r5, r0
 800db34:	f8cd 9010 	str.w	r9, [sp, #16]
 800db38:	46da      	mov	sl, fp
 800db3a:	9308      	str	r3, [sp, #32]
 800db3c:	42b7      	cmp	r7, r6
 800db3e:	d33b      	bcc.n	800dbb8 <__gethex+0x1ee>
 800db40:	9804      	ldr	r0, [sp, #16]
 800db42:	f840 ab04 	str.w	sl, [r0], #4
 800db46:	eba0 0009 	sub.w	r0, r0, r9
 800db4a:	1080      	asrs	r0, r0, #2
 800db4c:	6128      	str	r0, [r5, #16]
 800db4e:	0147      	lsls	r7, r0, #5
 800db50:	4650      	mov	r0, sl
 800db52:	f000 fb67 	bl	800e224 <__hi0bits>
 800db56:	f8d8 6000 	ldr.w	r6, [r8]
 800db5a:	1a3f      	subs	r7, r7, r0
 800db5c:	42b7      	cmp	r7, r6
 800db5e:	dd64      	ble.n	800dc2a <__gethex+0x260>
 800db60:	1bbf      	subs	r7, r7, r6
 800db62:	4639      	mov	r1, r7
 800db64:	4628      	mov	r0, r5
 800db66:	f000 fe77 	bl	800e858 <__any_on>
 800db6a:	4682      	mov	sl, r0
 800db6c:	b178      	cbz	r0, 800db8e <__gethex+0x1c4>
 800db6e:	1e7b      	subs	r3, r7, #1
 800db70:	1159      	asrs	r1, r3, #5
 800db72:	f003 021f 	and.w	r2, r3, #31
 800db76:	f04f 0a01 	mov.w	sl, #1
 800db7a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800db7e:	fa0a f202 	lsl.w	r2, sl, r2
 800db82:	420a      	tst	r2, r1
 800db84:	d003      	beq.n	800db8e <__gethex+0x1c4>
 800db86:	4553      	cmp	r3, sl
 800db88:	dc46      	bgt.n	800dc18 <__gethex+0x24e>
 800db8a:	f04f 0a02 	mov.w	sl, #2
 800db8e:	4639      	mov	r1, r7
 800db90:	4628      	mov	r0, r5
 800db92:	f7ff fecb 	bl	800d92c <rshift>
 800db96:	443c      	add	r4, r7
 800db98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db9c:	42a3      	cmp	r3, r4
 800db9e:	da52      	bge.n	800dc46 <__gethex+0x27c>
 800dba0:	4629      	mov	r1, r5
 800dba2:	9802      	ldr	r0, [sp, #8]
 800dba4:	f000 faae 	bl	800e104 <_Bfree>
 800dba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbaa:	2300      	movs	r3, #0
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	27a3      	movs	r7, #163	; 0xa3
 800dbb0:	e793      	b.n	800dada <__gethex+0x110>
 800dbb2:	3101      	adds	r1, #1
 800dbb4:	105b      	asrs	r3, r3, #1
 800dbb6:	e7b0      	b.n	800db1a <__gethex+0x150>
 800dbb8:	1e73      	subs	r3, r6, #1
 800dbba:	9305      	str	r3, [sp, #20]
 800dbbc:	9a07      	ldr	r2, [sp, #28]
 800dbbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d018      	beq.n	800dbf8 <__gethex+0x22e>
 800dbc6:	f1bb 0f20 	cmp.w	fp, #32
 800dbca:	d107      	bne.n	800dbdc <__gethex+0x212>
 800dbcc:	9b04      	ldr	r3, [sp, #16]
 800dbce:	f8c3 a000 	str.w	sl, [r3]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	f04f 0a00 	mov.w	sl, #0
 800dbd8:	9304      	str	r3, [sp, #16]
 800dbda:	46d3      	mov	fp, sl
 800dbdc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dbe0:	f7ff fede 	bl	800d9a0 <__hexdig_fun>
 800dbe4:	f000 000f 	and.w	r0, r0, #15
 800dbe8:	fa00 f00b 	lsl.w	r0, r0, fp
 800dbec:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbf0:	f10b 0b04 	add.w	fp, fp, #4
 800dbf4:	9b05      	ldr	r3, [sp, #20]
 800dbf6:	e00d      	b.n	800dc14 <__gethex+0x24a>
 800dbf8:	9b05      	ldr	r3, [sp, #20]
 800dbfa:	9a08      	ldr	r2, [sp, #32]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	42bb      	cmp	r3, r7
 800dc00:	d3e1      	bcc.n	800dbc6 <__gethex+0x1fc>
 800dc02:	4618      	mov	r0, r3
 800dc04:	9a01      	ldr	r2, [sp, #4]
 800dc06:	9903      	ldr	r1, [sp, #12]
 800dc08:	9309      	str	r3, [sp, #36]	; 0x24
 800dc0a:	f001 f9e2 	bl	800efd2 <strncmp>
 800dc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1d8      	bne.n	800dbc6 <__gethex+0x1fc>
 800dc14:	461e      	mov	r6, r3
 800dc16:	e791      	b.n	800db3c <__gethex+0x172>
 800dc18:	1eb9      	subs	r1, r7, #2
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f000 fe1c 	bl	800e858 <__any_on>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d0b2      	beq.n	800db8a <__gethex+0x1c0>
 800dc24:	f04f 0a03 	mov.w	sl, #3
 800dc28:	e7b1      	b.n	800db8e <__gethex+0x1c4>
 800dc2a:	da09      	bge.n	800dc40 <__gethex+0x276>
 800dc2c:	1bf7      	subs	r7, r6, r7
 800dc2e:	4629      	mov	r1, r5
 800dc30:	463a      	mov	r2, r7
 800dc32:	9802      	ldr	r0, [sp, #8]
 800dc34:	f000 fc32 	bl	800e49c <__lshift>
 800dc38:	1be4      	subs	r4, r4, r7
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	f100 0914 	add.w	r9, r0, #20
 800dc40:	f04f 0a00 	mov.w	sl, #0
 800dc44:	e7a8      	b.n	800db98 <__gethex+0x1ce>
 800dc46:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc4a:	42a0      	cmp	r0, r4
 800dc4c:	dd6a      	ble.n	800dd24 <__gethex+0x35a>
 800dc4e:	1b04      	subs	r4, r0, r4
 800dc50:	42a6      	cmp	r6, r4
 800dc52:	dc2e      	bgt.n	800dcb2 <__gethex+0x2e8>
 800dc54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d022      	beq.n	800dca2 <__gethex+0x2d8>
 800dc5c:	2b03      	cmp	r3, #3
 800dc5e:	d024      	beq.n	800dcaa <__gethex+0x2e0>
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d115      	bne.n	800dc90 <__gethex+0x2c6>
 800dc64:	42a6      	cmp	r6, r4
 800dc66:	d113      	bne.n	800dc90 <__gethex+0x2c6>
 800dc68:	2e01      	cmp	r6, #1
 800dc6a:	dc0b      	bgt.n	800dc84 <__gethex+0x2ba>
 800dc6c:	9a06      	ldr	r2, [sp, #24]
 800dc6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	2301      	movs	r3, #1
 800dc76:	612b      	str	r3, [r5, #16]
 800dc78:	f8c9 3000 	str.w	r3, [r9]
 800dc7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc7e:	2762      	movs	r7, #98	; 0x62
 800dc80:	601d      	str	r5, [r3, #0]
 800dc82:	e72a      	b.n	800dada <__gethex+0x110>
 800dc84:	1e71      	subs	r1, r6, #1
 800dc86:	4628      	mov	r0, r5
 800dc88:	f000 fde6 	bl	800e858 <__any_on>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d1ed      	bne.n	800dc6c <__gethex+0x2a2>
 800dc90:	4629      	mov	r1, r5
 800dc92:	9802      	ldr	r0, [sp, #8]
 800dc94:	f000 fa36 	bl	800e104 <_Bfree>
 800dc98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6013      	str	r3, [r2, #0]
 800dc9e:	2750      	movs	r7, #80	; 0x50
 800dca0:	e71b      	b.n	800dada <__gethex+0x110>
 800dca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d0e1      	beq.n	800dc6c <__gethex+0x2a2>
 800dca8:	e7f2      	b.n	800dc90 <__gethex+0x2c6>
 800dcaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1dd      	bne.n	800dc6c <__gethex+0x2a2>
 800dcb0:	e7ee      	b.n	800dc90 <__gethex+0x2c6>
 800dcb2:	1e67      	subs	r7, r4, #1
 800dcb4:	f1ba 0f00 	cmp.w	sl, #0
 800dcb8:	d131      	bne.n	800dd1e <__gethex+0x354>
 800dcba:	b127      	cbz	r7, 800dcc6 <__gethex+0x2fc>
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f000 fdca 	bl	800e858 <__any_on>
 800dcc4:	4682      	mov	sl, r0
 800dcc6:	117a      	asrs	r2, r7, #5
 800dcc8:	2301      	movs	r3, #1
 800dcca:	f007 071f 	and.w	r7, r7, #31
 800dcce:	fa03 f707 	lsl.w	r7, r3, r7
 800dcd2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	421f      	tst	r7, r3
 800dcda:	4628      	mov	r0, r5
 800dcdc:	bf18      	it	ne
 800dcde:	f04a 0a02 	orrne.w	sl, sl, #2
 800dce2:	1b36      	subs	r6, r6, r4
 800dce4:	f7ff fe22 	bl	800d92c <rshift>
 800dce8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dcec:	2702      	movs	r7, #2
 800dcee:	f1ba 0f00 	cmp.w	sl, #0
 800dcf2:	d048      	beq.n	800dd86 <__gethex+0x3bc>
 800dcf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	d015      	beq.n	800dd28 <__gethex+0x35e>
 800dcfc:	2b03      	cmp	r3, #3
 800dcfe:	d017      	beq.n	800dd30 <__gethex+0x366>
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d109      	bne.n	800dd18 <__gethex+0x34e>
 800dd04:	f01a 0f02 	tst.w	sl, #2
 800dd08:	d006      	beq.n	800dd18 <__gethex+0x34e>
 800dd0a:	f8d9 3000 	ldr.w	r3, [r9]
 800dd0e:	ea4a 0a03 	orr.w	sl, sl, r3
 800dd12:	f01a 0f01 	tst.w	sl, #1
 800dd16:	d10e      	bne.n	800dd36 <__gethex+0x36c>
 800dd18:	f047 0710 	orr.w	r7, r7, #16
 800dd1c:	e033      	b.n	800dd86 <__gethex+0x3bc>
 800dd1e:	f04f 0a01 	mov.w	sl, #1
 800dd22:	e7d0      	b.n	800dcc6 <__gethex+0x2fc>
 800dd24:	2701      	movs	r7, #1
 800dd26:	e7e2      	b.n	800dcee <__gethex+0x324>
 800dd28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd2a:	f1c3 0301 	rsb	r3, r3, #1
 800dd2e:	9315      	str	r3, [sp, #84]	; 0x54
 800dd30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d0f0      	beq.n	800dd18 <__gethex+0x34e>
 800dd36:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dd3a:	f105 0314 	add.w	r3, r5, #20
 800dd3e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dd42:	eb03 010a 	add.w	r1, r3, sl
 800dd46:	f04f 0c00 	mov.w	ip, #0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd50:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd54:	d01c      	beq.n	800dd90 <__gethex+0x3c6>
 800dd56:	3201      	adds	r2, #1
 800dd58:	6002      	str	r2, [r0, #0]
 800dd5a:	2f02      	cmp	r7, #2
 800dd5c:	f105 0314 	add.w	r3, r5, #20
 800dd60:	d138      	bne.n	800ddd4 <__gethex+0x40a>
 800dd62:	f8d8 2000 	ldr.w	r2, [r8]
 800dd66:	3a01      	subs	r2, #1
 800dd68:	42b2      	cmp	r2, r6
 800dd6a:	d10a      	bne.n	800dd82 <__gethex+0x3b8>
 800dd6c:	1171      	asrs	r1, r6, #5
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f006 061f 	and.w	r6, r6, #31
 800dd74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd78:	fa02 f606 	lsl.w	r6, r2, r6
 800dd7c:	421e      	tst	r6, r3
 800dd7e:	bf18      	it	ne
 800dd80:	4617      	movne	r7, r2
 800dd82:	f047 0720 	orr.w	r7, r7, #32
 800dd86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd88:	601d      	str	r5, [r3, #0]
 800dd8a:	9b06      	ldr	r3, [sp, #24]
 800dd8c:	601c      	str	r4, [r3, #0]
 800dd8e:	e6a4      	b.n	800dada <__gethex+0x110>
 800dd90:	4299      	cmp	r1, r3
 800dd92:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd96:	d8d8      	bhi.n	800dd4a <__gethex+0x380>
 800dd98:	68ab      	ldr	r3, [r5, #8]
 800dd9a:	4599      	cmp	r9, r3
 800dd9c:	db12      	blt.n	800ddc4 <__gethex+0x3fa>
 800dd9e:	6869      	ldr	r1, [r5, #4]
 800dda0:	9802      	ldr	r0, [sp, #8]
 800dda2:	3101      	adds	r1, #1
 800dda4:	f000 f97a 	bl	800e09c <_Balloc>
 800dda8:	692a      	ldr	r2, [r5, #16]
 800ddaa:	3202      	adds	r2, #2
 800ddac:	f105 010c 	add.w	r1, r5, #12
 800ddb0:	4683      	mov	fp, r0
 800ddb2:	0092      	lsls	r2, r2, #2
 800ddb4:	300c      	adds	r0, #12
 800ddb6:	f7fc ff95 	bl	800ace4 <memcpy>
 800ddba:	4629      	mov	r1, r5
 800ddbc:	9802      	ldr	r0, [sp, #8]
 800ddbe:	f000 f9a1 	bl	800e104 <_Bfree>
 800ddc2:	465d      	mov	r5, fp
 800ddc4:	692b      	ldr	r3, [r5, #16]
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ddcc:	612a      	str	r2, [r5, #16]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	615a      	str	r2, [r3, #20]
 800ddd2:	e7c2      	b.n	800dd5a <__gethex+0x390>
 800ddd4:	692a      	ldr	r2, [r5, #16]
 800ddd6:	454a      	cmp	r2, r9
 800ddd8:	dd0b      	ble.n	800ddf2 <__gethex+0x428>
 800ddda:	2101      	movs	r1, #1
 800dddc:	4628      	mov	r0, r5
 800ddde:	f7ff fda5 	bl	800d92c <rshift>
 800dde2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dde6:	3401      	adds	r4, #1
 800dde8:	42a3      	cmp	r3, r4
 800ddea:	f6ff aed9 	blt.w	800dba0 <__gethex+0x1d6>
 800ddee:	2701      	movs	r7, #1
 800ddf0:	e7c7      	b.n	800dd82 <__gethex+0x3b8>
 800ddf2:	f016 061f 	ands.w	r6, r6, #31
 800ddf6:	d0fa      	beq.n	800ddee <__gethex+0x424>
 800ddf8:	449a      	add	sl, r3
 800ddfa:	f1c6 0620 	rsb	r6, r6, #32
 800ddfe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800de02:	f000 fa0f 	bl	800e224 <__hi0bits>
 800de06:	42b0      	cmp	r0, r6
 800de08:	dbe7      	blt.n	800ddda <__gethex+0x410>
 800de0a:	e7f0      	b.n	800ddee <__gethex+0x424>

0800de0c <L_shift>:
 800de0c:	f1c2 0208 	rsb	r2, r2, #8
 800de10:	0092      	lsls	r2, r2, #2
 800de12:	b570      	push	{r4, r5, r6, lr}
 800de14:	f1c2 0620 	rsb	r6, r2, #32
 800de18:	6843      	ldr	r3, [r0, #4]
 800de1a:	6804      	ldr	r4, [r0, #0]
 800de1c:	fa03 f506 	lsl.w	r5, r3, r6
 800de20:	432c      	orrs	r4, r5
 800de22:	40d3      	lsrs	r3, r2
 800de24:	6004      	str	r4, [r0, #0]
 800de26:	f840 3f04 	str.w	r3, [r0, #4]!
 800de2a:	4288      	cmp	r0, r1
 800de2c:	d3f4      	bcc.n	800de18 <L_shift+0xc>
 800de2e:	bd70      	pop	{r4, r5, r6, pc}

0800de30 <__match>:
 800de30:	b530      	push	{r4, r5, lr}
 800de32:	6803      	ldr	r3, [r0, #0]
 800de34:	3301      	adds	r3, #1
 800de36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de3a:	b914      	cbnz	r4, 800de42 <__match+0x12>
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	2001      	movs	r0, #1
 800de40:	bd30      	pop	{r4, r5, pc}
 800de42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de4a:	2d19      	cmp	r5, #25
 800de4c:	bf98      	it	ls
 800de4e:	3220      	addls	r2, #32
 800de50:	42a2      	cmp	r2, r4
 800de52:	d0f0      	beq.n	800de36 <__match+0x6>
 800de54:	2000      	movs	r0, #0
 800de56:	e7f3      	b.n	800de40 <__match+0x10>

0800de58 <__hexnan>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	680b      	ldr	r3, [r1, #0]
 800de5e:	6801      	ldr	r1, [r0, #0]
 800de60:	115f      	asrs	r7, r3, #5
 800de62:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800de66:	f013 031f 	ands.w	r3, r3, #31
 800de6a:	b087      	sub	sp, #28
 800de6c:	bf18      	it	ne
 800de6e:	3704      	addne	r7, #4
 800de70:	2500      	movs	r5, #0
 800de72:	1f3e      	subs	r6, r7, #4
 800de74:	4682      	mov	sl, r0
 800de76:	4690      	mov	r8, r2
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	f847 5c04 	str.w	r5, [r7, #-4]
 800de7e:	46b1      	mov	r9, r6
 800de80:	4634      	mov	r4, r6
 800de82:	9502      	str	r5, [sp, #8]
 800de84:	46ab      	mov	fp, r5
 800de86:	784a      	ldrb	r2, [r1, #1]
 800de88:	1c4b      	adds	r3, r1, #1
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	b342      	cbz	r2, 800dee0 <__hexnan+0x88>
 800de8e:	4610      	mov	r0, r2
 800de90:	9105      	str	r1, [sp, #20]
 800de92:	9204      	str	r2, [sp, #16]
 800de94:	f7ff fd84 	bl	800d9a0 <__hexdig_fun>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d143      	bne.n	800df24 <__hexnan+0xcc>
 800de9c:	9a04      	ldr	r2, [sp, #16]
 800de9e:	9905      	ldr	r1, [sp, #20]
 800dea0:	2a20      	cmp	r2, #32
 800dea2:	d818      	bhi.n	800ded6 <__hexnan+0x7e>
 800dea4:	9b02      	ldr	r3, [sp, #8]
 800dea6:	459b      	cmp	fp, r3
 800dea8:	dd13      	ble.n	800ded2 <__hexnan+0x7a>
 800deaa:	454c      	cmp	r4, r9
 800deac:	d206      	bcs.n	800debc <__hexnan+0x64>
 800deae:	2d07      	cmp	r5, #7
 800deb0:	dc04      	bgt.n	800debc <__hexnan+0x64>
 800deb2:	462a      	mov	r2, r5
 800deb4:	4649      	mov	r1, r9
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7ff ffa8 	bl	800de0c <L_shift>
 800debc:	4544      	cmp	r4, r8
 800debe:	d944      	bls.n	800df4a <__hexnan+0xf2>
 800dec0:	2300      	movs	r3, #0
 800dec2:	f1a4 0904 	sub.w	r9, r4, #4
 800dec6:	f844 3c04 	str.w	r3, [r4, #-4]
 800deca:	f8cd b008 	str.w	fp, [sp, #8]
 800dece:	464c      	mov	r4, r9
 800ded0:	461d      	mov	r5, r3
 800ded2:	9903      	ldr	r1, [sp, #12]
 800ded4:	e7d7      	b.n	800de86 <__hexnan+0x2e>
 800ded6:	2a29      	cmp	r2, #41	; 0x29
 800ded8:	d14a      	bne.n	800df70 <__hexnan+0x118>
 800deda:	3102      	adds	r1, #2
 800dedc:	f8ca 1000 	str.w	r1, [sl]
 800dee0:	f1bb 0f00 	cmp.w	fp, #0
 800dee4:	d044      	beq.n	800df70 <__hexnan+0x118>
 800dee6:	454c      	cmp	r4, r9
 800dee8:	d206      	bcs.n	800def8 <__hexnan+0xa0>
 800deea:	2d07      	cmp	r5, #7
 800deec:	dc04      	bgt.n	800def8 <__hexnan+0xa0>
 800deee:	462a      	mov	r2, r5
 800def0:	4649      	mov	r1, r9
 800def2:	4620      	mov	r0, r4
 800def4:	f7ff ff8a 	bl	800de0c <L_shift>
 800def8:	4544      	cmp	r4, r8
 800defa:	d928      	bls.n	800df4e <__hexnan+0xf6>
 800defc:	4643      	mov	r3, r8
 800defe:	f854 2b04 	ldr.w	r2, [r4], #4
 800df02:	f843 2b04 	str.w	r2, [r3], #4
 800df06:	42a6      	cmp	r6, r4
 800df08:	d2f9      	bcs.n	800defe <__hexnan+0xa6>
 800df0a:	2200      	movs	r2, #0
 800df0c:	f843 2b04 	str.w	r2, [r3], #4
 800df10:	429e      	cmp	r6, r3
 800df12:	d2fb      	bcs.n	800df0c <__hexnan+0xb4>
 800df14:	6833      	ldr	r3, [r6, #0]
 800df16:	b91b      	cbnz	r3, 800df20 <__hexnan+0xc8>
 800df18:	4546      	cmp	r6, r8
 800df1a:	d127      	bne.n	800df6c <__hexnan+0x114>
 800df1c:	2301      	movs	r3, #1
 800df1e:	6033      	str	r3, [r6, #0]
 800df20:	2005      	movs	r0, #5
 800df22:	e026      	b.n	800df72 <__hexnan+0x11a>
 800df24:	3501      	adds	r5, #1
 800df26:	2d08      	cmp	r5, #8
 800df28:	f10b 0b01 	add.w	fp, fp, #1
 800df2c:	dd06      	ble.n	800df3c <__hexnan+0xe4>
 800df2e:	4544      	cmp	r4, r8
 800df30:	d9cf      	bls.n	800ded2 <__hexnan+0x7a>
 800df32:	2300      	movs	r3, #0
 800df34:	f844 3c04 	str.w	r3, [r4, #-4]
 800df38:	2501      	movs	r5, #1
 800df3a:	3c04      	subs	r4, #4
 800df3c:	6822      	ldr	r2, [r4, #0]
 800df3e:	f000 000f 	and.w	r0, r0, #15
 800df42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df46:	6020      	str	r0, [r4, #0]
 800df48:	e7c3      	b.n	800ded2 <__hexnan+0x7a>
 800df4a:	2508      	movs	r5, #8
 800df4c:	e7c1      	b.n	800ded2 <__hexnan+0x7a>
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d0df      	beq.n	800df14 <__hexnan+0xbc>
 800df54:	f04f 32ff 	mov.w	r2, #4294967295
 800df58:	f1c3 0320 	rsb	r3, r3, #32
 800df5c:	fa22 f303 	lsr.w	r3, r2, r3
 800df60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800df64:	401a      	ands	r2, r3
 800df66:	f847 2c04 	str.w	r2, [r7, #-4]
 800df6a:	e7d3      	b.n	800df14 <__hexnan+0xbc>
 800df6c:	3e04      	subs	r6, #4
 800df6e:	e7d1      	b.n	800df14 <__hexnan+0xbc>
 800df70:	2004      	movs	r0, #4
 800df72:	b007      	add	sp, #28
 800df74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df78 <__locale_ctype_ptr_l>:
 800df78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800df7c:	4770      	bx	lr

0800df7e <__localeconv_l>:
 800df7e:	30f0      	adds	r0, #240	; 0xf0
 800df80:	4770      	bx	lr
	...

0800df84 <_localeconv_r>:
 800df84:	4b04      	ldr	r3, [pc, #16]	; (800df98 <_localeconv_r+0x14>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6a18      	ldr	r0, [r3, #32]
 800df8a:	4b04      	ldr	r3, [pc, #16]	; (800df9c <_localeconv_r+0x18>)
 800df8c:	2800      	cmp	r0, #0
 800df8e:	bf08      	it	eq
 800df90:	4618      	moveq	r0, r3
 800df92:	30f0      	adds	r0, #240	; 0xf0
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	20000040 	.word	0x20000040
 800df9c:	200000a4 	.word	0x200000a4

0800dfa0 <__swhatbuf_r>:
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	460e      	mov	r6, r1
 800dfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfa8:	2900      	cmp	r1, #0
 800dfaa:	b096      	sub	sp, #88	; 0x58
 800dfac:	4614      	mov	r4, r2
 800dfae:	461d      	mov	r5, r3
 800dfb0:	da07      	bge.n	800dfc2 <__swhatbuf_r+0x22>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	602b      	str	r3, [r5, #0]
 800dfb6:	89b3      	ldrh	r3, [r6, #12]
 800dfb8:	061a      	lsls	r2, r3, #24
 800dfba:	d410      	bmi.n	800dfde <__swhatbuf_r+0x3e>
 800dfbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc0:	e00e      	b.n	800dfe0 <__swhatbuf_r+0x40>
 800dfc2:	466a      	mov	r2, sp
 800dfc4:	f001 f846 	bl	800f054 <_fstat_r>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	dbf2      	blt.n	800dfb2 <__swhatbuf_r+0x12>
 800dfcc:	9a01      	ldr	r2, [sp, #4]
 800dfce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dfd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dfd6:	425a      	negs	r2, r3
 800dfd8:	415a      	adcs	r2, r3
 800dfda:	602a      	str	r2, [r5, #0]
 800dfdc:	e7ee      	b.n	800dfbc <__swhatbuf_r+0x1c>
 800dfde:	2340      	movs	r3, #64	; 0x40
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	b016      	add	sp, #88	; 0x58
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}

0800dfe8 <__smakebuf_r>:
 800dfe8:	898b      	ldrh	r3, [r1, #12]
 800dfea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfec:	079d      	lsls	r5, r3, #30
 800dfee:	4606      	mov	r6, r0
 800dff0:	460c      	mov	r4, r1
 800dff2:	d507      	bpl.n	800e004 <__smakebuf_r+0x1c>
 800dff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dff8:	6023      	str	r3, [r4, #0]
 800dffa:	6123      	str	r3, [r4, #16]
 800dffc:	2301      	movs	r3, #1
 800dffe:	6163      	str	r3, [r4, #20]
 800e000:	b002      	add	sp, #8
 800e002:	bd70      	pop	{r4, r5, r6, pc}
 800e004:	ab01      	add	r3, sp, #4
 800e006:	466a      	mov	r2, sp
 800e008:	f7ff ffca 	bl	800dfa0 <__swhatbuf_r>
 800e00c:	9900      	ldr	r1, [sp, #0]
 800e00e:	4605      	mov	r5, r0
 800e010:	4630      	mov	r0, r6
 800e012:	f000 fc9f 	bl	800e954 <_malloc_r>
 800e016:	b948      	cbnz	r0, 800e02c <__smakebuf_r+0x44>
 800e018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e01c:	059a      	lsls	r2, r3, #22
 800e01e:	d4ef      	bmi.n	800e000 <__smakebuf_r+0x18>
 800e020:	f023 0303 	bic.w	r3, r3, #3
 800e024:	f043 0302 	orr.w	r3, r3, #2
 800e028:	81a3      	strh	r3, [r4, #12]
 800e02a:	e7e3      	b.n	800dff4 <__smakebuf_r+0xc>
 800e02c:	4b0d      	ldr	r3, [pc, #52]	; (800e064 <__smakebuf_r+0x7c>)
 800e02e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	6020      	str	r0, [r4, #0]
 800e034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	9b00      	ldr	r3, [sp, #0]
 800e03c:	6163      	str	r3, [r4, #20]
 800e03e:	9b01      	ldr	r3, [sp, #4]
 800e040:	6120      	str	r0, [r4, #16]
 800e042:	b15b      	cbz	r3, 800e05c <__smakebuf_r+0x74>
 800e044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e048:	4630      	mov	r0, r6
 800e04a:	f001 f815 	bl	800f078 <_isatty_r>
 800e04e:	b128      	cbz	r0, 800e05c <__smakebuf_r+0x74>
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	f023 0303 	bic.w	r3, r3, #3
 800e056:	f043 0301 	orr.w	r3, r3, #1
 800e05a:	81a3      	strh	r3, [r4, #12]
 800e05c:	89a3      	ldrh	r3, [r4, #12]
 800e05e:	431d      	orrs	r5, r3
 800e060:	81a5      	strh	r5, [r4, #12]
 800e062:	e7cd      	b.n	800e000 <__smakebuf_r+0x18>
 800e064:	0800d7e1 	.word	0x0800d7e1

0800e068 <malloc>:
 800e068:	4b02      	ldr	r3, [pc, #8]	; (800e074 <malloc+0xc>)
 800e06a:	4601      	mov	r1, r0
 800e06c:	6818      	ldr	r0, [r3, #0]
 800e06e:	f000 bc71 	b.w	800e954 <_malloc_r>
 800e072:	bf00      	nop
 800e074:	20000040 	.word	0x20000040

0800e078 <__ascii_mbtowc>:
 800e078:	b082      	sub	sp, #8
 800e07a:	b901      	cbnz	r1, 800e07e <__ascii_mbtowc+0x6>
 800e07c:	a901      	add	r1, sp, #4
 800e07e:	b142      	cbz	r2, 800e092 <__ascii_mbtowc+0x1a>
 800e080:	b14b      	cbz	r3, 800e096 <__ascii_mbtowc+0x1e>
 800e082:	7813      	ldrb	r3, [r2, #0]
 800e084:	600b      	str	r3, [r1, #0]
 800e086:	7812      	ldrb	r2, [r2, #0]
 800e088:	1c10      	adds	r0, r2, #0
 800e08a:	bf18      	it	ne
 800e08c:	2001      	movne	r0, #1
 800e08e:	b002      	add	sp, #8
 800e090:	4770      	bx	lr
 800e092:	4610      	mov	r0, r2
 800e094:	e7fb      	b.n	800e08e <__ascii_mbtowc+0x16>
 800e096:	f06f 0001 	mvn.w	r0, #1
 800e09a:	e7f8      	b.n	800e08e <__ascii_mbtowc+0x16>

0800e09c <_Balloc>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e0a0:	4604      	mov	r4, r0
 800e0a2:	460e      	mov	r6, r1
 800e0a4:	b93d      	cbnz	r5, 800e0b6 <_Balloc+0x1a>
 800e0a6:	2010      	movs	r0, #16
 800e0a8:	f7ff ffde 	bl	800e068 <malloc>
 800e0ac:	6260      	str	r0, [r4, #36]	; 0x24
 800e0ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e0b2:	6005      	str	r5, [r0, #0]
 800e0b4:	60c5      	str	r5, [r0, #12]
 800e0b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e0b8:	68eb      	ldr	r3, [r5, #12]
 800e0ba:	b183      	cbz	r3, 800e0de <_Balloc+0x42>
 800e0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e0c4:	b9b8      	cbnz	r0, 800e0f6 <_Balloc+0x5a>
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	fa01 f506 	lsl.w	r5, r1, r6
 800e0cc:	1d6a      	adds	r2, r5, #5
 800e0ce:	0092      	lsls	r2, r2, #2
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f000 fbe2 	bl	800e89a <_calloc_r>
 800e0d6:	b160      	cbz	r0, 800e0f2 <_Balloc+0x56>
 800e0d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e0dc:	e00e      	b.n	800e0fc <_Balloc+0x60>
 800e0de:	2221      	movs	r2, #33	; 0x21
 800e0e0:	2104      	movs	r1, #4
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f000 fbd9 	bl	800e89a <_calloc_r>
 800e0e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0ea:	60e8      	str	r0, [r5, #12]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1e4      	bne.n	800e0bc <_Balloc+0x20>
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	bd70      	pop	{r4, r5, r6, pc}
 800e0f6:	6802      	ldr	r2, [r0, #0]
 800e0f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e102:	e7f7      	b.n	800e0f4 <_Balloc+0x58>

0800e104 <_Bfree>:
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e108:	4606      	mov	r6, r0
 800e10a:	460d      	mov	r5, r1
 800e10c:	b93c      	cbnz	r4, 800e11e <_Bfree+0x1a>
 800e10e:	2010      	movs	r0, #16
 800e110:	f7ff ffaa 	bl	800e068 <malloc>
 800e114:	6270      	str	r0, [r6, #36]	; 0x24
 800e116:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e11a:	6004      	str	r4, [r0, #0]
 800e11c:	60c4      	str	r4, [r0, #12]
 800e11e:	b13d      	cbz	r5, 800e130 <_Bfree+0x2c>
 800e120:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e122:	686a      	ldr	r2, [r5, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e12a:	6029      	str	r1, [r5, #0]
 800e12c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e130:	bd70      	pop	{r4, r5, r6, pc}

0800e132 <__multadd>:
 800e132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e136:	690d      	ldr	r5, [r1, #16]
 800e138:	461f      	mov	r7, r3
 800e13a:	4606      	mov	r6, r0
 800e13c:	460c      	mov	r4, r1
 800e13e:	f101 0c14 	add.w	ip, r1, #20
 800e142:	2300      	movs	r3, #0
 800e144:	f8dc 0000 	ldr.w	r0, [ip]
 800e148:	b281      	uxth	r1, r0
 800e14a:	fb02 7101 	mla	r1, r2, r1, r7
 800e14e:	0c0f      	lsrs	r7, r1, #16
 800e150:	0c00      	lsrs	r0, r0, #16
 800e152:	fb02 7000 	mla	r0, r2, r0, r7
 800e156:	b289      	uxth	r1, r1
 800e158:	3301      	adds	r3, #1
 800e15a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e15e:	429d      	cmp	r5, r3
 800e160:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e164:	f84c 1b04 	str.w	r1, [ip], #4
 800e168:	dcec      	bgt.n	800e144 <__multadd+0x12>
 800e16a:	b1d7      	cbz	r7, 800e1a2 <__multadd+0x70>
 800e16c:	68a3      	ldr	r3, [r4, #8]
 800e16e:	42ab      	cmp	r3, r5
 800e170:	dc12      	bgt.n	800e198 <__multadd+0x66>
 800e172:	6861      	ldr	r1, [r4, #4]
 800e174:	4630      	mov	r0, r6
 800e176:	3101      	adds	r1, #1
 800e178:	f7ff ff90 	bl	800e09c <_Balloc>
 800e17c:	6922      	ldr	r2, [r4, #16]
 800e17e:	3202      	adds	r2, #2
 800e180:	f104 010c 	add.w	r1, r4, #12
 800e184:	4680      	mov	r8, r0
 800e186:	0092      	lsls	r2, r2, #2
 800e188:	300c      	adds	r0, #12
 800e18a:	f7fc fdab 	bl	800ace4 <memcpy>
 800e18e:	4621      	mov	r1, r4
 800e190:	4630      	mov	r0, r6
 800e192:	f7ff ffb7 	bl	800e104 <_Bfree>
 800e196:	4644      	mov	r4, r8
 800e198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e19c:	3501      	adds	r5, #1
 800e19e:	615f      	str	r7, [r3, #20]
 800e1a0:	6125      	str	r5, [r4, #16]
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1a8 <__s2b>:
 800e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	4615      	mov	r5, r2
 800e1b0:	461f      	mov	r7, r3
 800e1b2:	2209      	movs	r2, #9
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1bc:	2100      	movs	r1, #0
 800e1be:	2201      	movs	r2, #1
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	db20      	blt.n	800e206 <__s2b+0x5e>
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	f7ff ff69 	bl	800e09c <_Balloc>
 800e1ca:	9b08      	ldr	r3, [sp, #32]
 800e1cc:	6143      	str	r3, [r0, #20]
 800e1ce:	2d09      	cmp	r5, #9
 800e1d0:	f04f 0301 	mov.w	r3, #1
 800e1d4:	6103      	str	r3, [r0, #16]
 800e1d6:	dd19      	ble.n	800e20c <__s2b+0x64>
 800e1d8:	f104 0809 	add.w	r8, r4, #9
 800e1dc:	46c1      	mov	r9, r8
 800e1de:	442c      	add	r4, r5
 800e1e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e1e4:	4601      	mov	r1, r0
 800e1e6:	3b30      	subs	r3, #48	; 0x30
 800e1e8:	220a      	movs	r2, #10
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f7ff ffa1 	bl	800e132 <__multadd>
 800e1f0:	45a1      	cmp	r9, r4
 800e1f2:	d1f5      	bne.n	800e1e0 <__s2b+0x38>
 800e1f4:	eb08 0405 	add.w	r4, r8, r5
 800e1f8:	3c08      	subs	r4, #8
 800e1fa:	1b2d      	subs	r5, r5, r4
 800e1fc:	1963      	adds	r3, r4, r5
 800e1fe:	42bb      	cmp	r3, r7
 800e200:	db07      	blt.n	800e212 <__s2b+0x6a>
 800e202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e206:	0052      	lsls	r2, r2, #1
 800e208:	3101      	adds	r1, #1
 800e20a:	e7d9      	b.n	800e1c0 <__s2b+0x18>
 800e20c:	340a      	adds	r4, #10
 800e20e:	2509      	movs	r5, #9
 800e210:	e7f3      	b.n	800e1fa <__s2b+0x52>
 800e212:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e216:	4601      	mov	r1, r0
 800e218:	3b30      	subs	r3, #48	; 0x30
 800e21a:	220a      	movs	r2, #10
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff ff88 	bl	800e132 <__multadd>
 800e222:	e7eb      	b.n	800e1fc <__s2b+0x54>

0800e224 <__hi0bits>:
 800e224:	0c02      	lsrs	r2, r0, #16
 800e226:	0412      	lsls	r2, r2, #16
 800e228:	4603      	mov	r3, r0
 800e22a:	b9b2      	cbnz	r2, 800e25a <__hi0bits+0x36>
 800e22c:	0403      	lsls	r3, r0, #16
 800e22e:	2010      	movs	r0, #16
 800e230:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e234:	bf04      	itt	eq
 800e236:	021b      	lsleq	r3, r3, #8
 800e238:	3008      	addeq	r0, #8
 800e23a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e23e:	bf04      	itt	eq
 800e240:	011b      	lsleq	r3, r3, #4
 800e242:	3004      	addeq	r0, #4
 800e244:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e248:	bf04      	itt	eq
 800e24a:	009b      	lsleq	r3, r3, #2
 800e24c:	3002      	addeq	r0, #2
 800e24e:	2b00      	cmp	r3, #0
 800e250:	db06      	blt.n	800e260 <__hi0bits+0x3c>
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	d503      	bpl.n	800e25e <__hi0bits+0x3a>
 800e256:	3001      	adds	r0, #1
 800e258:	4770      	bx	lr
 800e25a:	2000      	movs	r0, #0
 800e25c:	e7e8      	b.n	800e230 <__hi0bits+0xc>
 800e25e:	2020      	movs	r0, #32
 800e260:	4770      	bx	lr

0800e262 <__lo0bits>:
 800e262:	6803      	ldr	r3, [r0, #0]
 800e264:	f013 0207 	ands.w	r2, r3, #7
 800e268:	4601      	mov	r1, r0
 800e26a:	d00b      	beq.n	800e284 <__lo0bits+0x22>
 800e26c:	07da      	lsls	r2, r3, #31
 800e26e:	d423      	bmi.n	800e2b8 <__lo0bits+0x56>
 800e270:	0798      	lsls	r0, r3, #30
 800e272:	bf49      	itett	mi
 800e274:	085b      	lsrmi	r3, r3, #1
 800e276:	089b      	lsrpl	r3, r3, #2
 800e278:	2001      	movmi	r0, #1
 800e27a:	600b      	strmi	r3, [r1, #0]
 800e27c:	bf5c      	itt	pl
 800e27e:	600b      	strpl	r3, [r1, #0]
 800e280:	2002      	movpl	r0, #2
 800e282:	4770      	bx	lr
 800e284:	b298      	uxth	r0, r3
 800e286:	b9a8      	cbnz	r0, 800e2b4 <__lo0bits+0x52>
 800e288:	0c1b      	lsrs	r3, r3, #16
 800e28a:	2010      	movs	r0, #16
 800e28c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e290:	bf04      	itt	eq
 800e292:	0a1b      	lsreq	r3, r3, #8
 800e294:	3008      	addeq	r0, #8
 800e296:	071a      	lsls	r2, r3, #28
 800e298:	bf04      	itt	eq
 800e29a:	091b      	lsreq	r3, r3, #4
 800e29c:	3004      	addeq	r0, #4
 800e29e:	079a      	lsls	r2, r3, #30
 800e2a0:	bf04      	itt	eq
 800e2a2:	089b      	lsreq	r3, r3, #2
 800e2a4:	3002      	addeq	r0, #2
 800e2a6:	07da      	lsls	r2, r3, #31
 800e2a8:	d402      	bmi.n	800e2b0 <__lo0bits+0x4e>
 800e2aa:	085b      	lsrs	r3, r3, #1
 800e2ac:	d006      	beq.n	800e2bc <__lo0bits+0x5a>
 800e2ae:	3001      	adds	r0, #1
 800e2b0:	600b      	str	r3, [r1, #0]
 800e2b2:	4770      	bx	lr
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	e7e9      	b.n	800e28c <__lo0bits+0x2a>
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	4770      	bx	lr
 800e2bc:	2020      	movs	r0, #32
 800e2be:	4770      	bx	lr

0800e2c0 <__i2b>:
 800e2c0:	b510      	push	{r4, lr}
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	f7ff fee9 	bl	800e09c <_Balloc>
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	6144      	str	r4, [r0, #20]
 800e2ce:	6102      	str	r2, [r0, #16]
 800e2d0:	bd10      	pop	{r4, pc}

0800e2d2 <__multiply>:
 800e2d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d6:	4614      	mov	r4, r2
 800e2d8:	690a      	ldr	r2, [r1, #16]
 800e2da:	6923      	ldr	r3, [r4, #16]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	bfb8      	it	lt
 800e2e0:	460b      	movlt	r3, r1
 800e2e2:	4688      	mov	r8, r1
 800e2e4:	bfbc      	itt	lt
 800e2e6:	46a0      	movlt	r8, r4
 800e2e8:	461c      	movlt	r4, r3
 800e2ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e2ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e2f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e2fa:	eb07 0609 	add.w	r6, r7, r9
 800e2fe:	42b3      	cmp	r3, r6
 800e300:	bfb8      	it	lt
 800e302:	3101      	addlt	r1, #1
 800e304:	f7ff feca 	bl	800e09c <_Balloc>
 800e308:	f100 0514 	add.w	r5, r0, #20
 800e30c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e310:	462b      	mov	r3, r5
 800e312:	2200      	movs	r2, #0
 800e314:	4573      	cmp	r3, lr
 800e316:	d316      	bcc.n	800e346 <__multiply+0x74>
 800e318:	f104 0214 	add.w	r2, r4, #20
 800e31c:	f108 0114 	add.w	r1, r8, #20
 800e320:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e324:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	9b00      	ldr	r3, [sp, #0]
 800e32c:	9201      	str	r2, [sp, #4]
 800e32e:	4293      	cmp	r3, r2
 800e330:	d80c      	bhi.n	800e34c <__multiply+0x7a>
 800e332:	2e00      	cmp	r6, #0
 800e334:	dd03      	ble.n	800e33e <__multiply+0x6c>
 800e336:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d05d      	beq.n	800e3fa <__multiply+0x128>
 800e33e:	6106      	str	r6, [r0, #16]
 800e340:	b003      	add	sp, #12
 800e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e346:	f843 2b04 	str.w	r2, [r3], #4
 800e34a:	e7e3      	b.n	800e314 <__multiply+0x42>
 800e34c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e350:	f1bb 0f00 	cmp.w	fp, #0
 800e354:	d023      	beq.n	800e39e <__multiply+0xcc>
 800e356:	4689      	mov	r9, r1
 800e358:	46ac      	mov	ip, r5
 800e35a:	f04f 0800 	mov.w	r8, #0
 800e35e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e362:	f8dc a000 	ldr.w	sl, [ip]
 800e366:	b2a3      	uxth	r3, r4
 800e368:	fa1f fa8a 	uxth.w	sl, sl
 800e36c:	fb0b a303 	mla	r3, fp, r3, sl
 800e370:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e374:	f8dc 4000 	ldr.w	r4, [ip]
 800e378:	4443      	add	r3, r8
 800e37a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e37e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e382:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e386:	46e2      	mov	sl, ip
 800e388:	b29b      	uxth	r3, r3
 800e38a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e38e:	454f      	cmp	r7, r9
 800e390:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e394:	f84a 3b04 	str.w	r3, [sl], #4
 800e398:	d82b      	bhi.n	800e3f2 <__multiply+0x120>
 800e39a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e3a4:	3204      	adds	r2, #4
 800e3a6:	f1ba 0f00 	cmp.w	sl, #0
 800e3aa:	d020      	beq.n	800e3ee <__multiply+0x11c>
 800e3ac:	682b      	ldr	r3, [r5, #0]
 800e3ae:	4689      	mov	r9, r1
 800e3b0:	46a8      	mov	r8, r5
 800e3b2:	f04f 0b00 	mov.w	fp, #0
 800e3b6:	f8b9 c000 	ldrh.w	ip, [r9]
 800e3ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e3be:	fb0a 440c 	mla	r4, sl, ip, r4
 800e3c2:	445c      	add	r4, fp
 800e3c4:	46c4      	mov	ip, r8
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e3cc:	f84c 3b04 	str.w	r3, [ip], #4
 800e3d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e3d8:	0c1b      	lsrs	r3, r3, #16
 800e3da:	fb0a b303 	mla	r3, sl, r3, fp
 800e3de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e3e2:	454f      	cmp	r7, r9
 800e3e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e3e8:	d805      	bhi.n	800e3f6 <__multiply+0x124>
 800e3ea:	f8c8 3004 	str.w	r3, [r8, #4]
 800e3ee:	3504      	adds	r5, #4
 800e3f0:	e79b      	b.n	800e32a <__multiply+0x58>
 800e3f2:	46d4      	mov	ip, sl
 800e3f4:	e7b3      	b.n	800e35e <__multiply+0x8c>
 800e3f6:	46e0      	mov	r8, ip
 800e3f8:	e7dd      	b.n	800e3b6 <__multiply+0xe4>
 800e3fa:	3e01      	subs	r6, #1
 800e3fc:	e799      	b.n	800e332 <__multiply+0x60>
	...

0800e400 <__pow5mult>:
 800e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e404:	4615      	mov	r5, r2
 800e406:	f012 0203 	ands.w	r2, r2, #3
 800e40a:	4606      	mov	r6, r0
 800e40c:	460f      	mov	r7, r1
 800e40e:	d007      	beq.n	800e420 <__pow5mult+0x20>
 800e410:	3a01      	subs	r2, #1
 800e412:	4c21      	ldr	r4, [pc, #132]	; (800e498 <__pow5mult+0x98>)
 800e414:	2300      	movs	r3, #0
 800e416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e41a:	f7ff fe8a 	bl	800e132 <__multadd>
 800e41e:	4607      	mov	r7, r0
 800e420:	10ad      	asrs	r5, r5, #2
 800e422:	d035      	beq.n	800e490 <__pow5mult+0x90>
 800e424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e426:	b93c      	cbnz	r4, 800e438 <__pow5mult+0x38>
 800e428:	2010      	movs	r0, #16
 800e42a:	f7ff fe1d 	bl	800e068 <malloc>
 800e42e:	6270      	str	r0, [r6, #36]	; 0x24
 800e430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e434:	6004      	str	r4, [r0, #0]
 800e436:	60c4      	str	r4, [r0, #12]
 800e438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e440:	b94c      	cbnz	r4, 800e456 <__pow5mult+0x56>
 800e442:	f240 2171 	movw	r1, #625	; 0x271
 800e446:	4630      	mov	r0, r6
 800e448:	f7ff ff3a 	bl	800e2c0 <__i2b>
 800e44c:	2300      	movs	r3, #0
 800e44e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e452:	4604      	mov	r4, r0
 800e454:	6003      	str	r3, [r0, #0]
 800e456:	f04f 0800 	mov.w	r8, #0
 800e45a:	07eb      	lsls	r3, r5, #31
 800e45c:	d50a      	bpl.n	800e474 <__pow5mult+0x74>
 800e45e:	4639      	mov	r1, r7
 800e460:	4622      	mov	r2, r4
 800e462:	4630      	mov	r0, r6
 800e464:	f7ff ff35 	bl	800e2d2 <__multiply>
 800e468:	4639      	mov	r1, r7
 800e46a:	4681      	mov	r9, r0
 800e46c:	4630      	mov	r0, r6
 800e46e:	f7ff fe49 	bl	800e104 <_Bfree>
 800e472:	464f      	mov	r7, r9
 800e474:	106d      	asrs	r5, r5, #1
 800e476:	d00b      	beq.n	800e490 <__pow5mult+0x90>
 800e478:	6820      	ldr	r0, [r4, #0]
 800e47a:	b938      	cbnz	r0, 800e48c <__pow5mult+0x8c>
 800e47c:	4622      	mov	r2, r4
 800e47e:	4621      	mov	r1, r4
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff ff26 	bl	800e2d2 <__multiply>
 800e486:	6020      	str	r0, [r4, #0]
 800e488:	f8c0 8000 	str.w	r8, [r0]
 800e48c:	4604      	mov	r4, r0
 800e48e:	e7e4      	b.n	800e45a <__pow5mult+0x5a>
 800e490:	4638      	mov	r0, r7
 800e492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e496:	bf00      	nop
 800e498:	0800f408 	.word	0x0800f408

0800e49c <__lshift>:
 800e49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4a6:	6923      	ldr	r3, [r4, #16]
 800e4a8:	6849      	ldr	r1, [r1, #4]
 800e4aa:	eb0a 0903 	add.w	r9, sl, r3
 800e4ae:	68a3      	ldr	r3, [r4, #8]
 800e4b0:	4607      	mov	r7, r0
 800e4b2:	4616      	mov	r6, r2
 800e4b4:	f109 0501 	add.w	r5, r9, #1
 800e4b8:	42ab      	cmp	r3, r5
 800e4ba:	db32      	blt.n	800e522 <__lshift+0x86>
 800e4bc:	4638      	mov	r0, r7
 800e4be:	f7ff fded 	bl	800e09c <_Balloc>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	4680      	mov	r8, r0
 800e4c6:	f100 0114 	add.w	r1, r0, #20
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	4553      	cmp	r3, sl
 800e4ce:	db2b      	blt.n	800e528 <__lshift+0x8c>
 800e4d0:	6920      	ldr	r0, [r4, #16]
 800e4d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4d6:	f104 0314 	add.w	r3, r4, #20
 800e4da:	f016 021f 	ands.w	r2, r6, #31
 800e4de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4e6:	d025      	beq.n	800e534 <__lshift+0x98>
 800e4e8:	f1c2 0e20 	rsb	lr, r2, #32
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	681e      	ldr	r6, [r3, #0]
 800e4f0:	468a      	mov	sl, r1
 800e4f2:	4096      	lsls	r6, r2
 800e4f4:	4330      	orrs	r0, r6
 800e4f6:	f84a 0b04 	str.w	r0, [sl], #4
 800e4fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800e4fe:	459c      	cmp	ip, r3
 800e500:	fa20 f00e 	lsr.w	r0, r0, lr
 800e504:	d814      	bhi.n	800e530 <__lshift+0x94>
 800e506:	6048      	str	r0, [r1, #4]
 800e508:	b108      	cbz	r0, 800e50e <__lshift+0x72>
 800e50a:	f109 0502 	add.w	r5, r9, #2
 800e50e:	3d01      	subs	r5, #1
 800e510:	4638      	mov	r0, r7
 800e512:	f8c8 5010 	str.w	r5, [r8, #16]
 800e516:	4621      	mov	r1, r4
 800e518:	f7ff fdf4 	bl	800e104 <_Bfree>
 800e51c:	4640      	mov	r0, r8
 800e51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e522:	3101      	adds	r1, #1
 800e524:	005b      	lsls	r3, r3, #1
 800e526:	e7c7      	b.n	800e4b8 <__lshift+0x1c>
 800e528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e52c:	3301      	adds	r3, #1
 800e52e:	e7cd      	b.n	800e4cc <__lshift+0x30>
 800e530:	4651      	mov	r1, sl
 800e532:	e7dc      	b.n	800e4ee <__lshift+0x52>
 800e534:	3904      	subs	r1, #4
 800e536:	f853 2b04 	ldr.w	r2, [r3], #4
 800e53a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e53e:	459c      	cmp	ip, r3
 800e540:	d8f9      	bhi.n	800e536 <__lshift+0x9a>
 800e542:	e7e4      	b.n	800e50e <__lshift+0x72>

0800e544 <__mcmp>:
 800e544:	6903      	ldr	r3, [r0, #16]
 800e546:	690a      	ldr	r2, [r1, #16]
 800e548:	1a9b      	subs	r3, r3, r2
 800e54a:	b530      	push	{r4, r5, lr}
 800e54c:	d10c      	bne.n	800e568 <__mcmp+0x24>
 800e54e:	0092      	lsls	r2, r2, #2
 800e550:	3014      	adds	r0, #20
 800e552:	3114      	adds	r1, #20
 800e554:	1884      	adds	r4, r0, r2
 800e556:	4411      	add	r1, r2
 800e558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e55c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e560:	4295      	cmp	r5, r2
 800e562:	d003      	beq.n	800e56c <__mcmp+0x28>
 800e564:	d305      	bcc.n	800e572 <__mcmp+0x2e>
 800e566:	2301      	movs	r3, #1
 800e568:	4618      	mov	r0, r3
 800e56a:	bd30      	pop	{r4, r5, pc}
 800e56c:	42a0      	cmp	r0, r4
 800e56e:	d3f3      	bcc.n	800e558 <__mcmp+0x14>
 800e570:	e7fa      	b.n	800e568 <__mcmp+0x24>
 800e572:	f04f 33ff 	mov.w	r3, #4294967295
 800e576:	e7f7      	b.n	800e568 <__mcmp+0x24>

0800e578 <__mdiff>:
 800e578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e57c:	460d      	mov	r5, r1
 800e57e:	4607      	mov	r7, r0
 800e580:	4611      	mov	r1, r2
 800e582:	4628      	mov	r0, r5
 800e584:	4614      	mov	r4, r2
 800e586:	f7ff ffdd 	bl	800e544 <__mcmp>
 800e58a:	1e06      	subs	r6, r0, #0
 800e58c:	d108      	bne.n	800e5a0 <__mdiff+0x28>
 800e58e:	4631      	mov	r1, r6
 800e590:	4638      	mov	r0, r7
 800e592:	f7ff fd83 	bl	800e09c <_Balloc>
 800e596:	2301      	movs	r3, #1
 800e598:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a0:	bfa4      	itt	ge
 800e5a2:	4623      	movge	r3, r4
 800e5a4:	462c      	movge	r4, r5
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	6861      	ldr	r1, [r4, #4]
 800e5aa:	bfa6      	itte	ge
 800e5ac:	461d      	movge	r5, r3
 800e5ae:	2600      	movge	r6, #0
 800e5b0:	2601      	movlt	r6, #1
 800e5b2:	f7ff fd73 	bl	800e09c <_Balloc>
 800e5b6:	692b      	ldr	r3, [r5, #16]
 800e5b8:	60c6      	str	r6, [r0, #12]
 800e5ba:	6926      	ldr	r6, [r4, #16]
 800e5bc:	f105 0914 	add.w	r9, r5, #20
 800e5c0:	f104 0214 	add.w	r2, r4, #20
 800e5c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e5c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e5cc:	f100 0514 	add.w	r5, r0, #20
 800e5d0:	f04f 0e00 	mov.w	lr, #0
 800e5d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e5d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e5dc:	fa1e f18a 	uxtah	r1, lr, sl
 800e5e0:	b2a3      	uxth	r3, r4
 800e5e2:	1ac9      	subs	r1, r1, r3
 800e5e4:	0c23      	lsrs	r3, r4, #16
 800e5e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e5ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e5ee:	b289      	uxth	r1, r1
 800e5f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e5f4:	45c8      	cmp	r8, r9
 800e5f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e5fa:	4694      	mov	ip, r2
 800e5fc:	f845 3b04 	str.w	r3, [r5], #4
 800e600:	d8e8      	bhi.n	800e5d4 <__mdiff+0x5c>
 800e602:	45bc      	cmp	ip, r7
 800e604:	d304      	bcc.n	800e610 <__mdiff+0x98>
 800e606:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e60a:	b183      	cbz	r3, 800e62e <__mdiff+0xb6>
 800e60c:	6106      	str	r6, [r0, #16]
 800e60e:	e7c5      	b.n	800e59c <__mdiff+0x24>
 800e610:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e614:	fa1e f381 	uxtah	r3, lr, r1
 800e618:	141a      	asrs	r2, r3, #16
 800e61a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e61e:	b29b      	uxth	r3, r3
 800e620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e624:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e628:	f845 3b04 	str.w	r3, [r5], #4
 800e62c:	e7e9      	b.n	800e602 <__mdiff+0x8a>
 800e62e:	3e01      	subs	r6, #1
 800e630:	e7e9      	b.n	800e606 <__mdiff+0x8e>
	...

0800e634 <__ulp>:
 800e634:	4b12      	ldr	r3, [pc, #72]	; (800e680 <__ulp+0x4c>)
 800e636:	ee10 2a90 	vmov	r2, s1
 800e63a:	401a      	ands	r2, r3
 800e63c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e640:	2b00      	cmp	r3, #0
 800e642:	dd04      	ble.n	800e64e <__ulp+0x1a>
 800e644:	2000      	movs	r0, #0
 800e646:	4619      	mov	r1, r3
 800e648:	ec41 0b10 	vmov	d0, r0, r1
 800e64c:	4770      	bx	lr
 800e64e:	425b      	negs	r3, r3
 800e650:	151b      	asrs	r3, r3, #20
 800e652:	2b13      	cmp	r3, #19
 800e654:	f04f 0000 	mov.w	r0, #0
 800e658:	f04f 0100 	mov.w	r1, #0
 800e65c:	dc04      	bgt.n	800e668 <__ulp+0x34>
 800e65e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e662:	fa42 f103 	asr.w	r1, r2, r3
 800e666:	e7ef      	b.n	800e648 <__ulp+0x14>
 800e668:	3b14      	subs	r3, #20
 800e66a:	2b1e      	cmp	r3, #30
 800e66c:	f04f 0201 	mov.w	r2, #1
 800e670:	bfda      	itte	le
 800e672:	f1c3 031f 	rsble	r3, r3, #31
 800e676:	fa02 f303 	lslle.w	r3, r2, r3
 800e67a:	4613      	movgt	r3, r2
 800e67c:	4618      	mov	r0, r3
 800e67e:	e7e3      	b.n	800e648 <__ulp+0x14>
 800e680:	7ff00000 	.word	0x7ff00000

0800e684 <__b2d>:
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	6905      	ldr	r5, [r0, #16]
 800e688:	f100 0714 	add.w	r7, r0, #20
 800e68c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e690:	1f2e      	subs	r6, r5, #4
 800e692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e696:	4620      	mov	r0, r4
 800e698:	f7ff fdc4 	bl	800e224 <__hi0bits>
 800e69c:	f1c0 0320 	rsb	r3, r0, #32
 800e6a0:	280a      	cmp	r0, #10
 800e6a2:	600b      	str	r3, [r1, #0]
 800e6a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e71c <__b2d+0x98>
 800e6a8:	dc14      	bgt.n	800e6d4 <__b2d+0x50>
 800e6aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800e6ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800e6b2:	42b7      	cmp	r7, r6
 800e6b4:	ea41 030c 	orr.w	r3, r1, ip
 800e6b8:	bf34      	ite	cc
 800e6ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6be:	2100      	movcs	r1, #0
 800e6c0:	3015      	adds	r0, #21
 800e6c2:	fa04 f000 	lsl.w	r0, r4, r0
 800e6c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e6ca:	ea40 0201 	orr.w	r2, r0, r1
 800e6ce:	ec43 2b10 	vmov	d0, r2, r3
 800e6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6d4:	42b7      	cmp	r7, r6
 800e6d6:	bf3a      	itte	cc
 800e6d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e6dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6e0:	2100      	movcs	r1, #0
 800e6e2:	380b      	subs	r0, #11
 800e6e4:	d015      	beq.n	800e712 <__b2d+0x8e>
 800e6e6:	4084      	lsls	r4, r0
 800e6e8:	f1c0 0520 	rsb	r5, r0, #32
 800e6ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e6f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e6f4:	42be      	cmp	r6, r7
 800e6f6:	fa21 fc05 	lsr.w	ip, r1, r5
 800e6fa:	ea44 030c 	orr.w	r3, r4, ip
 800e6fe:	bf8c      	ite	hi
 800e700:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e704:	2400      	movls	r4, #0
 800e706:	fa01 f000 	lsl.w	r0, r1, r0
 800e70a:	40ec      	lsrs	r4, r5
 800e70c:	ea40 0204 	orr.w	r2, r0, r4
 800e710:	e7dd      	b.n	800e6ce <__b2d+0x4a>
 800e712:	ea44 030c 	orr.w	r3, r4, ip
 800e716:	460a      	mov	r2, r1
 800e718:	e7d9      	b.n	800e6ce <__b2d+0x4a>
 800e71a:	bf00      	nop
 800e71c:	3ff00000 	.word	0x3ff00000

0800e720 <__d2b>:
 800e720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e724:	460e      	mov	r6, r1
 800e726:	2101      	movs	r1, #1
 800e728:	ec59 8b10 	vmov	r8, r9, d0
 800e72c:	4615      	mov	r5, r2
 800e72e:	f7ff fcb5 	bl	800e09c <_Balloc>
 800e732:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e736:	4607      	mov	r7, r0
 800e738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e73c:	bb34      	cbnz	r4, 800e78c <__d2b+0x6c>
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	f1b8 0300 	subs.w	r3, r8, #0
 800e744:	d027      	beq.n	800e796 <__d2b+0x76>
 800e746:	a802      	add	r0, sp, #8
 800e748:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e74c:	f7ff fd89 	bl	800e262 <__lo0bits>
 800e750:	9900      	ldr	r1, [sp, #0]
 800e752:	b1f0      	cbz	r0, 800e792 <__d2b+0x72>
 800e754:	9a01      	ldr	r2, [sp, #4]
 800e756:	f1c0 0320 	rsb	r3, r0, #32
 800e75a:	fa02 f303 	lsl.w	r3, r2, r3
 800e75e:	430b      	orrs	r3, r1
 800e760:	40c2      	lsrs	r2, r0
 800e762:	617b      	str	r3, [r7, #20]
 800e764:	9201      	str	r2, [sp, #4]
 800e766:	9b01      	ldr	r3, [sp, #4]
 800e768:	61bb      	str	r3, [r7, #24]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	bf14      	ite	ne
 800e76e:	2102      	movne	r1, #2
 800e770:	2101      	moveq	r1, #1
 800e772:	6139      	str	r1, [r7, #16]
 800e774:	b1c4      	cbz	r4, 800e7a8 <__d2b+0x88>
 800e776:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e77a:	4404      	add	r4, r0
 800e77c:	6034      	str	r4, [r6, #0]
 800e77e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e782:	6028      	str	r0, [r5, #0]
 800e784:	4638      	mov	r0, r7
 800e786:	b003      	add	sp, #12
 800e788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e790:	e7d5      	b.n	800e73e <__d2b+0x1e>
 800e792:	6179      	str	r1, [r7, #20]
 800e794:	e7e7      	b.n	800e766 <__d2b+0x46>
 800e796:	a801      	add	r0, sp, #4
 800e798:	f7ff fd63 	bl	800e262 <__lo0bits>
 800e79c:	9b01      	ldr	r3, [sp, #4]
 800e79e:	617b      	str	r3, [r7, #20]
 800e7a0:	2101      	movs	r1, #1
 800e7a2:	6139      	str	r1, [r7, #16]
 800e7a4:	3020      	adds	r0, #32
 800e7a6:	e7e5      	b.n	800e774 <__d2b+0x54>
 800e7a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e7ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7b0:	6030      	str	r0, [r6, #0]
 800e7b2:	6918      	ldr	r0, [r3, #16]
 800e7b4:	f7ff fd36 	bl	800e224 <__hi0bits>
 800e7b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e7bc:	e7e1      	b.n	800e782 <__d2b+0x62>

0800e7be <__ratio>:
 800e7be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c2:	4688      	mov	r8, r1
 800e7c4:	4669      	mov	r1, sp
 800e7c6:	4681      	mov	r9, r0
 800e7c8:	f7ff ff5c 	bl	800e684 <__b2d>
 800e7cc:	a901      	add	r1, sp, #4
 800e7ce:	4640      	mov	r0, r8
 800e7d0:	ec57 6b10 	vmov	r6, r7, d0
 800e7d4:	f7ff ff56 	bl	800e684 <__b2d>
 800e7d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e7e0:	eba3 0c02 	sub.w	ip, r3, r2
 800e7e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e7e8:	1a9b      	subs	r3, r3, r2
 800e7ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e7ee:	ec5b ab10 	vmov	sl, fp, d0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	bfce      	itee	gt
 800e7f6:	463a      	movgt	r2, r7
 800e7f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7fc:	465a      	movle	r2, fp
 800e7fe:	4659      	mov	r1, fp
 800e800:	463d      	mov	r5, r7
 800e802:	bfd4      	ite	le
 800e804:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e808:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e80c:	4630      	mov	r0, r6
 800e80e:	ee10 2a10 	vmov	r2, s0
 800e812:	460b      	mov	r3, r1
 800e814:	4629      	mov	r1, r5
 800e816:	f7f2 f819 	bl	800084c <__aeabi_ddiv>
 800e81a:	ec41 0b10 	vmov	d0, r0, r1
 800e81e:	b003      	add	sp, #12
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e824 <__copybits>:
 800e824:	3901      	subs	r1, #1
 800e826:	b510      	push	{r4, lr}
 800e828:	1149      	asrs	r1, r1, #5
 800e82a:	6914      	ldr	r4, [r2, #16]
 800e82c:	3101      	adds	r1, #1
 800e82e:	f102 0314 	add.w	r3, r2, #20
 800e832:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e836:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e83a:	42a3      	cmp	r3, r4
 800e83c:	4602      	mov	r2, r0
 800e83e:	d303      	bcc.n	800e848 <__copybits+0x24>
 800e840:	2300      	movs	r3, #0
 800e842:	428a      	cmp	r2, r1
 800e844:	d305      	bcc.n	800e852 <__copybits+0x2e>
 800e846:	bd10      	pop	{r4, pc}
 800e848:	f853 2b04 	ldr.w	r2, [r3], #4
 800e84c:	f840 2b04 	str.w	r2, [r0], #4
 800e850:	e7f3      	b.n	800e83a <__copybits+0x16>
 800e852:	f842 3b04 	str.w	r3, [r2], #4
 800e856:	e7f4      	b.n	800e842 <__copybits+0x1e>

0800e858 <__any_on>:
 800e858:	f100 0214 	add.w	r2, r0, #20
 800e85c:	6900      	ldr	r0, [r0, #16]
 800e85e:	114b      	asrs	r3, r1, #5
 800e860:	4298      	cmp	r0, r3
 800e862:	b510      	push	{r4, lr}
 800e864:	db11      	blt.n	800e88a <__any_on+0x32>
 800e866:	dd0a      	ble.n	800e87e <__any_on+0x26>
 800e868:	f011 011f 	ands.w	r1, r1, #31
 800e86c:	d007      	beq.n	800e87e <__any_on+0x26>
 800e86e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e872:	fa24 f001 	lsr.w	r0, r4, r1
 800e876:	fa00 f101 	lsl.w	r1, r0, r1
 800e87a:	428c      	cmp	r4, r1
 800e87c:	d10b      	bne.n	800e896 <__any_on+0x3e>
 800e87e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e882:	4293      	cmp	r3, r2
 800e884:	d803      	bhi.n	800e88e <__any_on+0x36>
 800e886:	2000      	movs	r0, #0
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	4603      	mov	r3, r0
 800e88c:	e7f7      	b.n	800e87e <__any_on+0x26>
 800e88e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e892:	2900      	cmp	r1, #0
 800e894:	d0f5      	beq.n	800e882 <__any_on+0x2a>
 800e896:	2001      	movs	r0, #1
 800e898:	e7f6      	b.n	800e888 <__any_on+0x30>

0800e89a <_calloc_r>:
 800e89a:	b538      	push	{r3, r4, r5, lr}
 800e89c:	fb02 f401 	mul.w	r4, r2, r1
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	f000 f857 	bl	800e954 <_malloc_r>
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	b118      	cbz	r0, 800e8b2 <_calloc_r+0x18>
 800e8aa:	4622      	mov	r2, r4
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	f7fc fa24 	bl	800acfa <memset>
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e8b8 <_free_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	2900      	cmp	r1, #0
 800e8be:	d045      	beq.n	800e94c <_free_r+0x94>
 800e8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c4:	1f0c      	subs	r4, r1, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	bfb8      	it	lt
 800e8ca:	18e4      	addlt	r4, r4, r3
 800e8cc:	f000 fc0f 	bl	800f0ee <__malloc_lock>
 800e8d0:	4a1f      	ldr	r2, [pc, #124]	; (800e950 <_free_r+0x98>)
 800e8d2:	6813      	ldr	r3, [r2, #0]
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	b933      	cbnz	r3, 800e8e6 <_free_r+0x2e>
 800e8d8:	6063      	str	r3, [r4, #4]
 800e8da:	6014      	str	r4, [r2, #0]
 800e8dc:	4628      	mov	r0, r5
 800e8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8e2:	f000 bc05 	b.w	800f0f0 <__malloc_unlock>
 800e8e6:	42a3      	cmp	r3, r4
 800e8e8:	d90c      	bls.n	800e904 <_free_r+0x4c>
 800e8ea:	6821      	ldr	r1, [r4, #0]
 800e8ec:	1862      	adds	r2, r4, r1
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	bf04      	itt	eq
 800e8f2:	681a      	ldreq	r2, [r3, #0]
 800e8f4:	685b      	ldreq	r3, [r3, #4]
 800e8f6:	6063      	str	r3, [r4, #4]
 800e8f8:	bf04      	itt	eq
 800e8fa:	1852      	addeq	r2, r2, r1
 800e8fc:	6022      	streq	r2, [r4, #0]
 800e8fe:	6004      	str	r4, [r0, #0]
 800e900:	e7ec      	b.n	800e8dc <_free_r+0x24>
 800e902:	4613      	mov	r3, r2
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	b10a      	cbz	r2, 800e90c <_free_r+0x54>
 800e908:	42a2      	cmp	r2, r4
 800e90a:	d9fa      	bls.n	800e902 <_free_r+0x4a>
 800e90c:	6819      	ldr	r1, [r3, #0]
 800e90e:	1858      	adds	r0, r3, r1
 800e910:	42a0      	cmp	r0, r4
 800e912:	d10b      	bne.n	800e92c <_free_r+0x74>
 800e914:	6820      	ldr	r0, [r4, #0]
 800e916:	4401      	add	r1, r0
 800e918:	1858      	adds	r0, r3, r1
 800e91a:	4282      	cmp	r2, r0
 800e91c:	6019      	str	r1, [r3, #0]
 800e91e:	d1dd      	bne.n	800e8dc <_free_r+0x24>
 800e920:	6810      	ldr	r0, [r2, #0]
 800e922:	6852      	ldr	r2, [r2, #4]
 800e924:	605a      	str	r2, [r3, #4]
 800e926:	4401      	add	r1, r0
 800e928:	6019      	str	r1, [r3, #0]
 800e92a:	e7d7      	b.n	800e8dc <_free_r+0x24>
 800e92c:	d902      	bls.n	800e934 <_free_r+0x7c>
 800e92e:	230c      	movs	r3, #12
 800e930:	602b      	str	r3, [r5, #0]
 800e932:	e7d3      	b.n	800e8dc <_free_r+0x24>
 800e934:	6820      	ldr	r0, [r4, #0]
 800e936:	1821      	adds	r1, r4, r0
 800e938:	428a      	cmp	r2, r1
 800e93a:	bf04      	itt	eq
 800e93c:	6811      	ldreq	r1, [r2, #0]
 800e93e:	6852      	ldreq	r2, [r2, #4]
 800e940:	6062      	str	r2, [r4, #4]
 800e942:	bf04      	itt	eq
 800e944:	1809      	addeq	r1, r1, r0
 800e946:	6021      	streq	r1, [r4, #0]
 800e948:	605c      	str	r4, [r3, #4]
 800e94a:	e7c7      	b.n	800e8dc <_free_r+0x24>
 800e94c:	bd38      	pop	{r3, r4, r5, pc}
 800e94e:	bf00      	nop
 800e950:	2001ef9c 	.word	0x2001ef9c

0800e954 <_malloc_r>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	1ccd      	adds	r5, r1, #3
 800e958:	f025 0503 	bic.w	r5, r5, #3
 800e95c:	3508      	adds	r5, #8
 800e95e:	2d0c      	cmp	r5, #12
 800e960:	bf38      	it	cc
 800e962:	250c      	movcc	r5, #12
 800e964:	2d00      	cmp	r5, #0
 800e966:	4606      	mov	r6, r0
 800e968:	db01      	blt.n	800e96e <_malloc_r+0x1a>
 800e96a:	42a9      	cmp	r1, r5
 800e96c:	d903      	bls.n	800e976 <_malloc_r+0x22>
 800e96e:	230c      	movs	r3, #12
 800e970:	6033      	str	r3, [r6, #0]
 800e972:	2000      	movs	r0, #0
 800e974:	bd70      	pop	{r4, r5, r6, pc}
 800e976:	f000 fbba 	bl	800f0ee <__malloc_lock>
 800e97a:	4a21      	ldr	r2, [pc, #132]	; (800ea00 <_malloc_r+0xac>)
 800e97c:	6814      	ldr	r4, [r2, #0]
 800e97e:	4621      	mov	r1, r4
 800e980:	b991      	cbnz	r1, 800e9a8 <_malloc_r+0x54>
 800e982:	4c20      	ldr	r4, [pc, #128]	; (800ea04 <_malloc_r+0xb0>)
 800e984:	6823      	ldr	r3, [r4, #0]
 800e986:	b91b      	cbnz	r3, 800e990 <_malloc_r+0x3c>
 800e988:	4630      	mov	r0, r6
 800e98a:	f000 facf 	bl	800ef2c <_sbrk_r>
 800e98e:	6020      	str	r0, [r4, #0]
 800e990:	4629      	mov	r1, r5
 800e992:	4630      	mov	r0, r6
 800e994:	f000 faca 	bl	800ef2c <_sbrk_r>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d124      	bne.n	800e9e6 <_malloc_r+0x92>
 800e99c:	230c      	movs	r3, #12
 800e99e:	6033      	str	r3, [r6, #0]
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f000 fba5 	bl	800f0f0 <__malloc_unlock>
 800e9a6:	e7e4      	b.n	800e972 <_malloc_r+0x1e>
 800e9a8:	680b      	ldr	r3, [r1, #0]
 800e9aa:	1b5b      	subs	r3, r3, r5
 800e9ac:	d418      	bmi.n	800e9e0 <_malloc_r+0x8c>
 800e9ae:	2b0b      	cmp	r3, #11
 800e9b0:	d90f      	bls.n	800e9d2 <_malloc_r+0x7e>
 800e9b2:	600b      	str	r3, [r1, #0]
 800e9b4:	50cd      	str	r5, [r1, r3]
 800e9b6:	18cc      	adds	r4, r1, r3
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f000 fb99 	bl	800f0f0 <__malloc_unlock>
 800e9be:	f104 000b 	add.w	r0, r4, #11
 800e9c2:	1d23      	adds	r3, r4, #4
 800e9c4:	f020 0007 	bic.w	r0, r0, #7
 800e9c8:	1ac3      	subs	r3, r0, r3
 800e9ca:	d0d3      	beq.n	800e974 <_malloc_r+0x20>
 800e9cc:	425a      	negs	r2, r3
 800e9ce:	50e2      	str	r2, [r4, r3]
 800e9d0:	e7d0      	b.n	800e974 <_malloc_r+0x20>
 800e9d2:	428c      	cmp	r4, r1
 800e9d4:	684b      	ldr	r3, [r1, #4]
 800e9d6:	bf16      	itet	ne
 800e9d8:	6063      	strne	r3, [r4, #4]
 800e9da:	6013      	streq	r3, [r2, #0]
 800e9dc:	460c      	movne	r4, r1
 800e9de:	e7eb      	b.n	800e9b8 <_malloc_r+0x64>
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	6849      	ldr	r1, [r1, #4]
 800e9e4:	e7cc      	b.n	800e980 <_malloc_r+0x2c>
 800e9e6:	1cc4      	adds	r4, r0, #3
 800e9e8:	f024 0403 	bic.w	r4, r4, #3
 800e9ec:	42a0      	cmp	r0, r4
 800e9ee:	d005      	beq.n	800e9fc <_malloc_r+0xa8>
 800e9f0:	1a21      	subs	r1, r4, r0
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f000 fa9a 	bl	800ef2c <_sbrk_r>
 800e9f8:	3001      	adds	r0, #1
 800e9fa:	d0cf      	beq.n	800e99c <_malloc_r+0x48>
 800e9fc:	6025      	str	r5, [r4, #0]
 800e9fe:	e7db      	b.n	800e9b8 <_malloc_r+0x64>
 800ea00:	2001ef9c 	.word	0x2001ef9c
 800ea04:	2001efa0 	.word	0x2001efa0

0800ea08 <__ssputs_r>:
 800ea08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea0c:	688e      	ldr	r6, [r1, #8]
 800ea0e:	429e      	cmp	r6, r3
 800ea10:	4682      	mov	sl, r0
 800ea12:	460c      	mov	r4, r1
 800ea14:	4690      	mov	r8, r2
 800ea16:	4699      	mov	r9, r3
 800ea18:	d837      	bhi.n	800ea8a <__ssputs_r+0x82>
 800ea1a:	898a      	ldrh	r2, [r1, #12]
 800ea1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea20:	d031      	beq.n	800ea86 <__ssputs_r+0x7e>
 800ea22:	6825      	ldr	r5, [r4, #0]
 800ea24:	6909      	ldr	r1, [r1, #16]
 800ea26:	1a6f      	subs	r7, r5, r1
 800ea28:	6965      	ldr	r5, [r4, #20]
 800ea2a:	2302      	movs	r3, #2
 800ea2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea30:	fb95 f5f3 	sdiv	r5, r5, r3
 800ea34:	f109 0301 	add.w	r3, r9, #1
 800ea38:	443b      	add	r3, r7
 800ea3a:	429d      	cmp	r5, r3
 800ea3c:	bf38      	it	cc
 800ea3e:	461d      	movcc	r5, r3
 800ea40:	0553      	lsls	r3, r2, #21
 800ea42:	d530      	bpl.n	800eaa6 <__ssputs_r+0x9e>
 800ea44:	4629      	mov	r1, r5
 800ea46:	f7ff ff85 	bl	800e954 <_malloc_r>
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	b950      	cbnz	r0, 800ea64 <__ssputs_r+0x5c>
 800ea4e:	230c      	movs	r3, #12
 800ea50:	f8ca 3000 	str.w	r3, [sl]
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea5a:	81a3      	strh	r3, [r4, #12]
 800ea5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea64:	463a      	mov	r2, r7
 800ea66:	6921      	ldr	r1, [r4, #16]
 800ea68:	f7fc f93c 	bl	800ace4 <memcpy>
 800ea6c:	89a3      	ldrh	r3, [r4, #12]
 800ea6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea76:	81a3      	strh	r3, [r4, #12]
 800ea78:	6126      	str	r6, [r4, #16]
 800ea7a:	6165      	str	r5, [r4, #20]
 800ea7c:	443e      	add	r6, r7
 800ea7e:	1bed      	subs	r5, r5, r7
 800ea80:	6026      	str	r6, [r4, #0]
 800ea82:	60a5      	str	r5, [r4, #8]
 800ea84:	464e      	mov	r6, r9
 800ea86:	454e      	cmp	r6, r9
 800ea88:	d900      	bls.n	800ea8c <__ssputs_r+0x84>
 800ea8a:	464e      	mov	r6, r9
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	4641      	mov	r1, r8
 800ea90:	6820      	ldr	r0, [r4, #0]
 800ea92:	f000 fb13 	bl	800f0bc <memmove>
 800ea96:	68a3      	ldr	r3, [r4, #8]
 800ea98:	1b9b      	subs	r3, r3, r6
 800ea9a:	60a3      	str	r3, [r4, #8]
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	441e      	add	r6, r3
 800eaa0:	6026      	str	r6, [r4, #0]
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	e7dc      	b.n	800ea60 <__ssputs_r+0x58>
 800eaa6:	462a      	mov	r2, r5
 800eaa8:	f000 fb23 	bl	800f0f2 <_realloc_r>
 800eaac:	4606      	mov	r6, r0
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d1e2      	bne.n	800ea78 <__ssputs_r+0x70>
 800eab2:	6921      	ldr	r1, [r4, #16]
 800eab4:	4650      	mov	r0, sl
 800eab6:	f7ff feff 	bl	800e8b8 <_free_r>
 800eaba:	e7c8      	b.n	800ea4e <__ssputs_r+0x46>

0800eabc <_svfiprintf_r>:
 800eabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac0:	461d      	mov	r5, r3
 800eac2:	898b      	ldrh	r3, [r1, #12]
 800eac4:	061f      	lsls	r7, r3, #24
 800eac6:	b09d      	sub	sp, #116	; 0x74
 800eac8:	4680      	mov	r8, r0
 800eaca:	460c      	mov	r4, r1
 800eacc:	4616      	mov	r6, r2
 800eace:	d50f      	bpl.n	800eaf0 <_svfiprintf_r+0x34>
 800ead0:	690b      	ldr	r3, [r1, #16]
 800ead2:	b96b      	cbnz	r3, 800eaf0 <_svfiprintf_r+0x34>
 800ead4:	2140      	movs	r1, #64	; 0x40
 800ead6:	f7ff ff3d 	bl	800e954 <_malloc_r>
 800eada:	6020      	str	r0, [r4, #0]
 800eadc:	6120      	str	r0, [r4, #16]
 800eade:	b928      	cbnz	r0, 800eaec <_svfiprintf_r+0x30>
 800eae0:	230c      	movs	r3, #12
 800eae2:	f8c8 3000 	str.w	r3, [r8]
 800eae6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaea:	e0c8      	b.n	800ec7e <_svfiprintf_r+0x1c2>
 800eaec:	2340      	movs	r3, #64	; 0x40
 800eaee:	6163      	str	r3, [r4, #20]
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf4:	2320      	movs	r3, #32
 800eaf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eafa:	2330      	movs	r3, #48	; 0x30
 800eafc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb00:	9503      	str	r5, [sp, #12]
 800eb02:	f04f 0b01 	mov.w	fp, #1
 800eb06:	4637      	mov	r7, r6
 800eb08:	463d      	mov	r5, r7
 800eb0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb0e:	b10b      	cbz	r3, 800eb14 <_svfiprintf_r+0x58>
 800eb10:	2b25      	cmp	r3, #37	; 0x25
 800eb12:	d13e      	bne.n	800eb92 <_svfiprintf_r+0xd6>
 800eb14:	ebb7 0a06 	subs.w	sl, r7, r6
 800eb18:	d00b      	beq.n	800eb32 <_svfiprintf_r+0x76>
 800eb1a:	4653      	mov	r3, sl
 800eb1c:	4632      	mov	r2, r6
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4640      	mov	r0, r8
 800eb22:	f7ff ff71 	bl	800ea08 <__ssputs_r>
 800eb26:	3001      	adds	r0, #1
 800eb28:	f000 80a4 	beq.w	800ec74 <_svfiprintf_r+0x1b8>
 800eb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb2e:	4453      	add	r3, sl
 800eb30:	9309      	str	r3, [sp, #36]	; 0x24
 800eb32:	783b      	ldrb	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f000 809d 	beq.w	800ec74 <_svfiprintf_r+0x1b8>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb44:	9304      	str	r3, [sp, #16]
 800eb46:	9307      	str	r3, [sp, #28]
 800eb48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb4c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb4e:	462f      	mov	r7, r5
 800eb50:	2205      	movs	r2, #5
 800eb52:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eb56:	4850      	ldr	r0, [pc, #320]	; (800ec98 <_svfiprintf_r+0x1dc>)
 800eb58:	f7f1 fb42 	bl	80001e0 <memchr>
 800eb5c:	9b04      	ldr	r3, [sp, #16]
 800eb5e:	b9d0      	cbnz	r0, 800eb96 <_svfiprintf_r+0xda>
 800eb60:	06d9      	lsls	r1, r3, #27
 800eb62:	bf44      	itt	mi
 800eb64:	2220      	movmi	r2, #32
 800eb66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb6a:	071a      	lsls	r2, r3, #28
 800eb6c:	bf44      	itt	mi
 800eb6e:	222b      	movmi	r2, #43	; 0x2b
 800eb70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb74:	782a      	ldrb	r2, [r5, #0]
 800eb76:	2a2a      	cmp	r2, #42	; 0x2a
 800eb78:	d015      	beq.n	800eba6 <_svfiprintf_r+0xea>
 800eb7a:	9a07      	ldr	r2, [sp, #28]
 800eb7c:	462f      	mov	r7, r5
 800eb7e:	2000      	movs	r0, #0
 800eb80:	250a      	movs	r5, #10
 800eb82:	4639      	mov	r1, r7
 800eb84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb88:	3b30      	subs	r3, #48	; 0x30
 800eb8a:	2b09      	cmp	r3, #9
 800eb8c:	d94d      	bls.n	800ec2a <_svfiprintf_r+0x16e>
 800eb8e:	b1b8      	cbz	r0, 800ebc0 <_svfiprintf_r+0x104>
 800eb90:	e00f      	b.n	800ebb2 <_svfiprintf_r+0xf6>
 800eb92:	462f      	mov	r7, r5
 800eb94:	e7b8      	b.n	800eb08 <_svfiprintf_r+0x4c>
 800eb96:	4a40      	ldr	r2, [pc, #256]	; (800ec98 <_svfiprintf_r+0x1dc>)
 800eb98:	1a80      	subs	r0, r0, r2
 800eb9a:	fa0b f000 	lsl.w	r0, fp, r0
 800eb9e:	4318      	orrs	r0, r3
 800eba0:	9004      	str	r0, [sp, #16]
 800eba2:	463d      	mov	r5, r7
 800eba4:	e7d3      	b.n	800eb4e <_svfiprintf_r+0x92>
 800eba6:	9a03      	ldr	r2, [sp, #12]
 800eba8:	1d11      	adds	r1, r2, #4
 800ebaa:	6812      	ldr	r2, [r2, #0]
 800ebac:	9103      	str	r1, [sp, #12]
 800ebae:	2a00      	cmp	r2, #0
 800ebb0:	db01      	blt.n	800ebb6 <_svfiprintf_r+0xfa>
 800ebb2:	9207      	str	r2, [sp, #28]
 800ebb4:	e004      	b.n	800ebc0 <_svfiprintf_r+0x104>
 800ebb6:	4252      	negs	r2, r2
 800ebb8:	f043 0302 	orr.w	r3, r3, #2
 800ebbc:	9207      	str	r2, [sp, #28]
 800ebbe:	9304      	str	r3, [sp, #16]
 800ebc0:	783b      	ldrb	r3, [r7, #0]
 800ebc2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebc4:	d10c      	bne.n	800ebe0 <_svfiprintf_r+0x124>
 800ebc6:	787b      	ldrb	r3, [r7, #1]
 800ebc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ebca:	d133      	bne.n	800ec34 <_svfiprintf_r+0x178>
 800ebcc:	9b03      	ldr	r3, [sp, #12]
 800ebce:	1d1a      	adds	r2, r3, #4
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	9203      	str	r2, [sp, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bfb8      	it	lt
 800ebd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebdc:	3702      	adds	r7, #2
 800ebde:	9305      	str	r3, [sp, #20]
 800ebe0:	4d2e      	ldr	r5, [pc, #184]	; (800ec9c <_svfiprintf_r+0x1e0>)
 800ebe2:	7839      	ldrb	r1, [r7, #0]
 800ebe4:	2203      	movs	r2, #3
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f7f1 fafa 	bl	80001e0 <memchr>
 800ebec:	b138      	cbz	r0, 800ebfe <_svfiprintf_r+0x142>
 800ebee:	2340      	movs	r3, #64	; 0x40
 800ebf0:	1b40      	subs	r0, r0, r5
 800ebf2:	fa03 f000 	lsl.w	r0, r3, r0
 800ebf6:	9b04      	ldr	r3, [sp, #16]
 800ebf8:	4303      	orrs	r3, r0
 800ebfa:	3701      	adds	r7, #1
 800ebfc:	9304      	str	r3, [sp, #16]
 800ebfe:	7839      	ldrb	r1, [r7, #0]
 800ec00:	4827      	ldr	r0, [pc, #156]	; (800eca0 <_svfiprintf_r+0x1e4>)
 800ec02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec06:	2206      	movs	r2, #6
 800ec08:	1c7e      	adds	r6, r7, #1
 800ec0a:	f7f1 fae9 	bl	80001e0 <memchr>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d038      	beq.n	800ec84 <_svfiprintf_r+0x1c8>
 800ec12:	4b24      	ldr	r3, [pc, #144]	; (800eca4 <_svfiprintf_r+0x1e8>)
 800ec14:	bb13      	cbnz	r3, 800ec5c <_svfiprintf_r+0x1a0>
 800ec16:	9b03      	ldr	r3, [sp, #12]
 800ec18:	3307      	adds	r3, #7
 800ec1a:	f023 0307 	bic.w	r3, r3, #7
 800ec1e:	3308      	adds	r3, #8
 800ec20:	9303      	str	r3, [sp, #12]
 800ec22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec24:	444b      	add	r3, r9
 800ec26:	9309      	str	r3, [sp, #36]	; 0x24
 800ec28:	e76d      	b.n	800eb06 <_svfiprintf_r+0x4a>
 800ec2a:	fb05 3202 	mla	r2, r5, r2, r3
 800ec2e:	2001      	movs	r0, #1
 800ec30:	460f      	mov	r7, r1
 800ec32:	e7a6      	b.n	800eb82 <_svfiprintf_r+0xc6>
 800ec34:	2300      	movs	r3, #0
 800ec36:	3701      	adds	r7, #1
 800ec38:	9305      	str	r3, [sp, #20]
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	250a      	movs	r5, #10
 800ec3e:	4638      	mov	r0, r7
 800ec40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec44:	3a30      	subs	r2, #48	; 0x30
 800ec46:	2a09      	cmp	r2, #9
 800ec48:	d903      	bls.n	800ec52 <_svfiprintf_r+0x196>
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d0c8      	beq.n	800ebe0 <_svfiprintf_r+0x124>
 800ec4e:	9105      	str	r1, [sp, #20]
 800ec50:	e7c6      	b.n	800ebe0 <_svfiprintf_r+0x124>
 800ec52:	fb05 2101 	mla	r1, r5, r1, r2
 800ec56:	2301      	movs	r3, #1
 800ec58:	4607      	mov	r7, r0
 800ec5a:	e7f0      	b.n	800ec3e <_svfiprintf_r+0x182>
 800ec5c:	ab03      	add	r3, sp, #12
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	4622      	mov	r2, r4
 800ec62:	4b11      	ldr	r3, [pc, #68]	; (800eca8 <_svfiprintf_r+0x1ec>)
 800ec64:	a904      	add	r1, sp, #16
 800ec66:	4640      	mov	r0, r8
 800ec68:	f7fc f8e4 	bl	800ae34 <_printf_float>
 800ec6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec70:	4681      	mov	r9, r0
 800ec72:	d1d6      	bne.n	800ec22 <_svfiprintf_r+0x166>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	065b      	lsls	r3, r3, #25
 800ec78:	f53f af35 	bmi.w	800eae6 <_svfiprintf_r+0x2a>
 800ec7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec7e:	b01d      	add	sp, #116	; 0x74
 800ec80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec84:	ab03      	add	r3, sp, #12
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	4622      	mov	r2, r4
 800ec8a:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <_svfiprintf_r+0x1ec>)
 800ec8c:	a904      	add	r1, sp, #16
 800ec8e:	4640      	mov	r0, r8
 800ec90:	f7fc fb86 	bl	800b3a0 <_printf_i>
 800ec94:	e7ea      	b.n	800ec6c <_svfiprintf_r+0x1b0>
 800ec96:	bf00      	nop
 800ec98:	0800f414 	.word	0x0800f414
 800ec9c:	0800f41a 	.word	0x0800f41a
 800eca0:	0800f41e 	.word	0x0800f41e
 800eca4:	0800ae35 	.word	0x0800ae35
 800eca8:	0800ea09 	.word	0x0800ea09

0800ecac <__sfputc_r>:
 800ecac:	6893      	ldr	r3, [r2, #8]
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	b410      	push	{r4}
 800ecb4:	6093      	str	r3, [r2, #8]
 800ecb6:	da08      	bge.n	800ecca <__sfputc_r+0x1e>
 800ecb8:	6994      	ldr	r4, [r2, #24]
 800ecba:	42a3      	cmp	r3, r4
 800ecbc:	db01      	blt.n	800ecc2 <__sfputc_r+0x16>
 800ecbe:	290a      	cmp	r1, #10
 800ecc0:	d103      	bne.n	800ecca <__sfputc_r+0x1e>
 800ecc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecc6:	f7fd bdb1 	b.w	800c82c <__swbuf_r>
 800ecca:	6813      	ldr	r3, [r2, #0]
 800eccc:	1c58      	adds	r0, r3, #1
 800ecce:	6010      	str	r0, [r2, #0]
 800ecd0:	7019      	strb	r1, [r3, #0]
 800ecd2:	4608      	mov	r0, r1
 800ecd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <__sfputs_r>:
 800ecda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecdc:	4606      	mov	r6, r0
 800ecde:	460f      	mov	r7, r1
 800ece0:	4614      	mov	r4, r2
 800ece2:	18d5      	adds	r5, r2, r3
 800ece4:	42ac      	cmp	r4, r5
 800ece6:	d101      	bne.n	800ecec <__sfputs_r+0x12>
 800ece8:	2000      	movs	r0, #0
 800ecea:	e007      	b.n	800ecfc <__sfputs_r+0x22>
 800ecec:	463a      	mov	r2, r7
 800ecee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f7ff ffda 	bl	800ecac <__sfputc_r>
 800ecf8:	1c43      	adds	r3, r0, #1
 800ecfa:	d1f3      	bne.n	800ece4 <__sfputs_r+0xa>
 800ecfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed00 <_vfiprintf_r>:
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	460c      	mov	r4, r1
 800ed06:	b09d      	sub	sp, #116	; 0x74
 800ed08:	4617      	mov	r7, r2
 800ed0a:	461d      	mov	r5, r3
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	b118      	cbz	r0, 800ed18 <_vfiprintf_r+0x18>
 800ed10:	6983      	ldr	r3, [r0, #24]
 800ed12:	b90b      	cbnz	r3, 800ed18 <_vfiprintf_r+0x18>
 800ed14:	f7fe fd80 	bl	800d818 <__sinit>
 800ed18:	4b7c      	ldr	r3, [pc, #496]	; (800ef0c <_vfiprintf_r+0x20c>)
 800ed1a:	429c      	cmp	r4, r3
 800ed1c:	d158      	bne.n	800edd0 <_vfiprintf_r+0xd0>
 800ed1e:	6874      	ldr	r4, [r6, #4]
 800ed20:	89a3      	ldrh	r3, [r4, #12]
 800ed22:	0718      	lsls	r0, r3, #28
 800ed24:	d55e      	bpl.n	800ede4 <_vfiprintf_r+0xe4>
 800ed26:	6923      	ldr	r3, [r4, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d05b      	beq.n	800ede4 <_vfiprintf_r+0xe4>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed30:	2320      	movs	r3, #32
 800ed32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed36:	2330      	movs	r3, #48	; 0x30
 800ed38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed3c:	9503      	str	r5, [sp, #12]
 800ed3e:	f04f 0b01 	mov.w	fp, #1
 800ed42:	46b8      	mov	r8, r7
 800ed44:	4645      	mov	r5, r8
 800ed46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed4a:	b10b      	cbz	r3, 800ed50 <_vfiprintf_r+0x50>
 800ed4c:	2b25      	cmp	r3, #37	; 0x25
 800ed4e:	d154      	bne.n	800edfa <_vfiprintf_r+0xfa>
 800ed50:	ebb8 0a07 	subs.w	sl, r8, r7
 800ed54:	d00b      	beq.n	800ed6e <_vfiprintf_r+0x6e>
 800ed56:	4653      	mov	r3, sl
 800ed58:	463a      	mov	r2, r7
 800ed5a:	4621      	mov	r1, r4
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f7ff ffbc 	bl	800ecda <__sfputs_r>
 800ed62:	3001      	adds	r0, #1
 800ed64:	f000 80c2 	beq.w	800eeec <_vfiprintf_r+0x1ec>
 800ed68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6a:	4453      	add	r3, sl
 800ed6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed6e:	f898 3000 	ldrb.w	r3, [r8]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f000 80ba 	beq.w	800eeec <_vfiprintf_r+0x1ec>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed82:	9304      	str	r3, [sp, #16]
 800ed84:	9307      	str	r3, [sp, #28]
 800ed86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed8c:	46a8      	mov	r8, r5
 800ed8e:	2205      	movs	r2, #5
 800ed90:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ed94:	485e      	ldr	r0, [pc, #376]	; (800ef10 <_vfiprintf_r+0x210>)
 800ed96:	f7f1 fa23 	bl	80001e0 <memchr>
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	bb78      	cbnz	r0, 800edfe <_vfiprintf_r+0xfe>
 800ed9e:	06d9      	lsls	r1, r3, #27
 800eda0:	bf44      	itt	mi
 800eda2:	2220      	movmi	r2, #32
 800eda4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eda8:	071a      	lsls	r2, r3, #28
 800edaa:	bf44      	itt	mi
 800edac:	222b      	movmi	r2, #43	; 0x2b
 800edae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edb2:	782a      	ldrb	r2, [r5, #0]
 800edb4:	2a2a      	cmp	r2, #42	; 0x2a
 800edb6:	d02a      	beq.n	800ee0e <_vfiprintf_r+0x10e>
 800edb8:	9a07      	ldr	r2, [sp, #28]
 800edba:	46a8      	mov	r8, r5
 800edbc:	2000      	movs	r0, #0
 800edbe:	250a      	movs	r5, #10
 800edc0:	4641      	mov	r1, r8
 800edc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edc6:	3b30      	subs	r3, #48	; 0x30
 800edc8:	2b09      	cmp	r3, #9
 800edca:	d969      	bls.n	800eea0 <_vfiprintf_r+0x1a0>
 800edcc:	b360      	cbz	r0, 800ee28 <_vfiprintf_r+0x128>
 800edce:	e024      	b.n	800ee1a <_vfiprintf_r+0x11a>
 800edd0:	4b50      	ldr	r3, [pc, #320]	; (800ef14 <_vfiprintf_r+0x214>)
 800edd2:	429c      	cmp	r4, r3
 800edd4:	d101      	bne.n	800edda <_vfiprintf_r+0xda>
 800edd6:	68b4      	ldr	r4, [r6, #8]
 800edd8:	e7a2      	b.n	800ed20 <_vfiprintf_r+0x20>
 800edda:	4b4f      	ldr	r3, [pc, #316]	; (800ef18 <_vfiprintf_r+0x218>)
 800eddc:	429c      	cmp	r4, r3
 800edde:	bf08      	it	eq
 800ede0:	68f4      	ldreq	r4, [r6, #12]
 800ede2:	e79d      	b.n	800ed20 <_vfiprintf_r+0x20>
 800ede4:	4621      	mov	r1, r4
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fd fd72 	bl	800c8d0 <__swsetup_r>
 800edec:	2800      	cmp	r0, #0
 800edee:	d09d      	beq.n	800ed2c <_vfiprintf_r+0x2c>
 800edf0:	f04f 30ff 	mov.w	r0, #4294967295
 800edf4:	b01d      	add	sp, #116	; 0x74
 800edf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfa:	46a8      	mov	r8, r5
 800edfc:	e7a2      	b.n	800ed44 <_vfiprintf_r+0x44>
 800edfe:	4a44      	ldr	r2, [pc, #272]	; (800ef10 <_vfiprintf_r+0x210>)
 800ee00:	1a80      	subs	r0, r0, r2
 800ee02:	fa0b f000 	lsl.w	r0, fp, r0
 800ee06:	4318      	orrs	r0, r3
 800ee08:	9004      	str	r0, [sp, #16]
 800ee0a:	4645      	mov	r5, r8
 800ee0c:	e7be      	b.n	800ed8c <_vfiprintf_r+0x8c>
 800ee0e:	9a03      	ldr	r2, [sp, #12]
 800ee10:	1d11      	adds	r1, r2, #4
 800ee12:	6812      	ldr	r2, [r2, #0]
 800ee14:	9103      	str	r1, [sp, #12]
 800ee16:	2a00      	cmp	r2, #0
 800ee18:	db01      	blt.n	800ee1e <_vfiprintf_r+0x11e>
 800ee1a:	9207      	str	r2, [sp, #28]
 800ee1c:	e004      	b.n	800ee28 <_vfiprintf_r+0x128>
 800ee1e:	4252      	negs	r2, r2
 800ee20:	f043 0302 	orr.w	r3, r3, #2
 800ee24:	9207      	str	r2, [sp, #28]
 800ee26:	9304      	str	r3, [sp, #16]
 800ee28:	f898 3000 	ldrb.w	r3, [r8]
 800ee2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee2e:	d10e      	bne.n	800ee4e <_vfiprintf_r+0x14e>
 800ee30:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee34:	2b2a      	cmp	r3, #42	; 0x2a
 800ee36:	d138      	bne.n	800eeaa <_vfiprintf_r+0x1aa>
 800ee38:	9b03      	ldr	r3, [sp, #12]
 800ee3a:	1d1a      	adds	r2, r3, #4
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	9203      	str	r2, [sp, #12]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	bfb8      	it	lt
 800ee44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee48:	f108 0802 	add.w	r8, r8, #2
 800ee4c:	9305      	str	r3, [sp, #20]
 800ee4e:	4d33      	ldr	r5, [pc, #204]	; (800ef1c <_vfiprintf_r+0x21c>)
 800ee50:	f898 1000 	ldrb.w	r1, [r8]
 800ee54:	2203      	movs	r2, #3
 800ee56:	4628      	mov	r0, r5
 800ee58:	f7f1 f9c2 	bl	80001e0 <memchr>
 800ee5c:	b140      	cbz	r0, 800ee70 <_vfiprintf_r+0x170>
 800ee5e:	2340      	movs	r3, #64	; 0x40
 800ee60:	1b40      	subs	r0, r0, r5
 800ee62:	fa03 f000 	lsl.w	r0, r3, r0
 800ee66:	9b04      	ldr	r3, [sp, #16]
 800ee68:	4303      	orrs	r3, r0
 800ee6a:	f108 0801 	add.w	r8, r8, #1
 800ee6e:	9304      	str	r3, [sp, #16]
 800ee70:	f898 1000 	ldrb.w	r1, [r8]
 800ee74:	482a      	ldr	r0, [pc, #168]	; (800ef20 <_vfiprintf_r+0x220>)
 800ee76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee7a:	2206      	movs	r2, #6
 800ee7c:	f108 0701 	add.w	r7, r8, #1
 800ee80:	f7f1 f9ae 	bl	80001e0 <memchr>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d037      	beq.n	800eef8 <_vfiprintf_r+0x1f8>
 800ee88:	4b26      	ldr	r3, [pc, #152]	; (800ef24 <_vfiprintf_r+0x224>)
 800ee8a:	bb1b      	cbnz	r3, 800eed4 <_vfiprintf_r+0x1d4>
 800ee8c:	9b03      	ldr	r3, [sp, #12]
 800ee8e:	3307      	adds	r3, #7
 800ee90:	f023 0307 	bic.w	r3, r3, #7
 800ee94:	3308      	adds	r3, #8
 800ee96:	9303      	str	r3, [sp, #12]
 800ee98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee9a:	444b      	add	r3, r9
 800ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9e:	e750      	b.n	800ed42 <_vfiprintf_r+0x42>
 800eea0:	fb05 3202 	mla	r2, r5, r2, r3
 800eea4:	2001      	movs	r0, #1
 800eea6:	4688      	mov	r8, r1
 800eea8:	e78a      	b.n	800edc0 <_vfiprintf_r+0xc0>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	f108 0801 	add.w	r8, r8, #1
 800eeb0:	9305      	str	r3, [sp, #20]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	250a      	movs	r5, #10
 800eeb6:	4640      	mov	r0, r8
 800eeb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eebc:	3a30      	subs	r2, #48	; 0x30
 800eebe:	2a09      	cmp	r2, #9
 800eec0:	d903      	bls.n	800eeca <_vfiprintf_r+0x1ca>
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0c3      	beq.n	800ee4e <_vfiprintf_r+0x14e>
 800eec6:	9105      	str	r1, [sp, #20]
 800eec8:	e7c1      	b.n	800ee4e <_vfiprintf_r+0x14e>
 800eeca:	fb05 2101 	mla	r1, r5, r1, r2
 800eece:	2301      	movs	r3, #1
 800eed0:	4680      	mov	r8, r0
 800eed2:	e7f0      	b.n	800eeb6 <_vfiprintf_r+0x1b6>
 800eed4:	ab03      	add	r3, sp, #12
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	4622      	mov	r2, r4
 800eeda:	4b13      	ldr	r3, [pc, #76]	; (800ef28 <_vfiprintf_r+0x228>)
 800eedc:	a904      	add	r1, sp, #16
 800eede:	4630      	mov	r0, r6
 800eee0:	f7fb ffa8 	bl	800ae34 <_printf_float>
 800eee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eee8:	4681      	mov	r9, r0
 800eeea:	d1d5      	bne.n	800ee98 <_vfiprintf_r+0x198>
 800eeec:	89a3      	ldrh	r3, [r4, #12]
 800eeee:	065b      	lsls	r3, r3, #25
 800eef0:	f53f af7e 	bmi.w	800edf0 <_vfiprintf_r+0xf0>
 800eef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eef6:	e77d      	b.n	800edf4 <_vfiprintf_r+0xf4>
 800eef8:	ab03      	add	r3, sp, #12
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4622      	mov	r2, r4
 800eefe:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <_vfiprintf_r+0x228>)
 800ef00:	a904      	add	r1, sp, #16
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7fc fa4c 	bl	800b3a0 <_printf_i>
 800ef08:	e7ec      	b.n	800eee4 <_vfiprintf_r+0x1e4>
 800ef0a:	bf00      	nop
 800ef0c:	0800f2c8 	.word	0x0800f2c8
 800ef10:	0800f414 	.word	0x0800f414
 800ef14:	0800f2e8 	.word	0x0800f2e8
 800ef18:	0800f2a8 	.word	0x0800f2a8
 800ef1c:	0800f41a 	.word	0x0800f41a
 800ef20:	0800f41e 	.word	0x0800f41e
 800ef24:	0800ae35 	.word	0x0800ae35
 800ef28:	0800ecdb 	.word	0x0800ecdb

0800ef2c <_sbrk_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4c06      	ldr	r4, [pc, #24]	; (800ef48 <_sbrk_r+0x1c>)
 800ef30:	2300      	movs	r3, #0
 800ef32:	4605      	mov	r5, r0
 800ef34:	4608      	mov	r0, r1
 800ef36:	6023      	str	r3, [r4, #0]
 800ef38:	f7f7 fb32 	bl	80065a0 <_sbrk>
 800ef3c:	1c43      	adds	r3, r0, #1
 800ef3e:	d102      	bne.n	800ef46 <_sbrk_r+0x1a>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	b103      	cbz	r3, 800ef46 <_sbrk_r+0x1a>
 800ef44:	602b      	str	r3, [r5, #0]
 800ef46:	bd38      	pop	{r3, r4, r5, pc}
 800ef48:	2001f4dc 	.word	0x2001f4dc

0800ef4c <__sread>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	460c      	mov	r4, r1
 800ef50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef54:	f000 f8f4 	bl	800f140 <_read_r>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	bfab      	itete	ge
 800ef5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef60:	181b      	addge	r3, r3, r0
 800ef62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef66:	bfac      	ite	ge
 800ef68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef6a:	81a3      	strhlt	r3, [r4, #12]
 800ef6c:	bd10      	pop	{r4, pc}

0800ef6e <__swrite>:
 800ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	461f      	mov	r7, r3
 800ef74:	898b      	ldrh	r3, [r1, #12]
 800ef76:	05db      	lsls	r3, r3, #23
 800ef78:	4605      	mov	r5, r0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	4616      	mov	r6, r2
 800ef7e:	d505      	bpl.n	800ef8c <__swrite+0x1e>
 800ef80:	2302      	movs	r3, #2
 800ef82:	2200      	movs	r2, #0
 800ef84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef88:	f000 f886 	bl	800f098 <_lseek_r>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	4632      	mov	r2, r6
 800ef9a:	463b      	mov	r3, r7
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efa2:	f000 b835 	b.w	800f010 <_write_r>

0800efa6 <__sseek>:
 800efa6:	b510      	push	{r4, lr}
 800efa8:	460c      	mov	r4, r1
 800efaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efae:	f000 f873 	bl	800f098 <_lseek_r>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	bf15      	itete	ne
 800efb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800efba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efc2:	81a3      	strheq	r3, [r4, #12]
 800efc4:	bf18      	it	ne
 800efc6:	81a3      	strhne	r3, [r4, #12]
 800efc8:	bd10      	pop	{r4, pc}

0800efca <__sclose>:
 800efca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efce:	f000 b831 	b.w	800f034 <_close_r>

0800efd2 <strncmp>:
 800efd2:	b510      	push	{r4, lr}
 800efd4:	b16a      	cbz	r2, 800eff2 <strncmp+0x20>
 800efd6:	3901      	subs	r1, #1
 800efd8:	1884      	adds	r4, r0, r2
 800efda:	f810 3b01 	ldrb.w	r3, [r0], #1
 800efde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d103      	bne.n	800efee <strncmp+0x1c>
 800efe6:	42a0      	cmp	r0, r4
 800efe8:	d001      	beq.n	800efee <strncmp+0x1c>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1f5      	bne.n	800efda <strncmp+0x8>
 800efee:	1a98      	subs	r0, r3, r2
 800eff0:	bd10      	pop	{r4, pc}
 800eff2:	4610      	mov	r0, r2
 800eff4:	e7fc      	b.n	800eff0 <strncmp+0x1e>

0800eff6 <__ascii_wctomb>:
 800eff6:	b149      	cbz	r1, 800f00c <__ascii_wctomb+0x16>
 800eff8:	2aff      	cmp	r2, #255	; 0xff
 800effa:	bf85      	ittet	hi
 800effc:	238a      	movhi	r3, #138	; 0x8a
 800effe:	6003      	strhi	r3, [r0, #0]
 800f000:	700a      	strbls	r2, [r1, #0]
 800f002:	f04f 30ff 	movhi.w	r0, #4294967295
 800f006:	bf98      	it	ls
 800f008:	2001      	movls	r0, #1
 800f00a:	4770      	bx	lr
 800f00c:	4608      	mov	r0, r1
 800f00e:	4770      	bx	lr

0800f010 <_write_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4c07      	ldr	r4, [pc, #28]	; (800f030 <_write_r+0x20>)
 800f014:	4605      	mov	r5, r0
 800f016:	4608      	mov	r0, r1
 800f018:	4611      	mov	r1, r2
 800f01a:	2200      	movs	r2, #0
 800f01c:	6022      	str	r2, [r4, #0]
 800f01e:	461a      	mov	r2, r3
 800f020:	f7f7 fa6d 	bl	80064fe <_write>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d102      	bne.n	800f02e <_write_r+0x1e>
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	b103      	cbz	r3, 800f02e <_write_r+0x1e>
 800f02c:	602b      	str	r3, [r5, #0]
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	2001f4dc 	.word	0x2001f4dc

0800f034 <_close_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4c06      	ldr	r4, [pc, #24]	; (800f050 <_close_r+0x1c>)
 800f038:	2300      	movs	r3, #0
 800f03a:	4605      	mov	r5, r0
 800f03c:	4608      	mov	r0, r1
 800f03e:	6023      	str	r3, [r4, #0]
 800f040:	f7f7 fa79 	bl	8006536 <_close>
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	d102      	bne.n	800f04e <_close_r+0x1a>
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	b103      	cbz	r3, 800f04e <_close_r+0x1a>
 800f04c:	602b      	str	r3, [r5, #0]
 800f04e:	bd38      	pop	{r3, r4, r5, pc}
 800f050:	2001f4dc 	.word	0x2001f4dc

0800f054 <_fstat_r>:
 800f054:	b538      	push	{r3, r4, r5, lr}
 800f056:	4c07      	ldr	r4, [pc, #28]	; (800f074 <_fstat_r+0x20>)
 800f058:	2300      	movs	r3, #0
 800f05a:	4605      	mov	r5, r0
 800f05c:	4608      	mov	r0, r1
 800f05e:	4611      	mov	r1, r2
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	f7f7 fa74 	bl	800654e <_fstat>
 800f066:	1c43      	adds	r3, r0, #1
 800f068:	d102      	bne.n	800f070 <_fstat_r+0x1c>
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	b103      	cbz	r3, 800f070 <_fstat_r+0x1c>
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	bd38      	pop	{r3, r4, r5, pc}
 800f072:	bf00      	nop
 800f074:	2001f4dc 	.word	0x2001f4dc

0800f078 <_isatty_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4c06      	ldr	r4, [pc, #24]	; (800f094 <_isatty_r+0x1c>)
 800f07c:	2300      	movs	r3, #0
 800f07e:	4605      	mov	r5, r0
 800f080:	4608      	mov	r0, r1
 800f082:	6023      	str	r3, [r4, #0]
 800f084:	f7f7 fa73 	bl	800656e <_isatty>
 800f088:	1c43      	adds	r3, r0, #1
 800f08a:	d102      	bne.n	800f092 <_isatty_r+0x1a>
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	b103      	cbz	r3, 800f092 <_isatty_r+0x1a>
 800f090:	602b      	str	r3, [r5, #0]
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	2001f4dc 	.word	0x2001f4dc

0800f098 <_lseek_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4c07      	ldr	r4, [pc, #28]	; (800f0b8 <_lseek_r+0x20>)
 800f09c:	4605      	mov	r5, r0
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	6022      	str	r2, [r4, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f7f7 fa6c 	bl	8006584 <_lseek>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d102      	bne.n	800f0b6 <_lseek_r+0x1e>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	b103      	cbz	r3, 800f0b6 <_lseek_r+0x1e>
 800f0b4:	602b      	str	r3, [r5, #0]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	2001f4dc 	.word	0x2001f4dc

0800f0bc <memmove>:
 800f0bc:	4288      	cmp	r0, r1
 800f0be:	b510      	push	{r4, lr}
 800f0c0:	eb01 0302 	add.w	r3, r1, r2
 800f0c4:	d807      	bhi.n	800f0d6 <memmove+0x1a>
 800f0c6:	1e42      	subs	r2, r0, #1
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	d00a      	beq.n	800f0e2 <memmove+0x26>
 800f0cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f0d4:	e7f8      	b.n	800f0c8 <memmove+0xc>
 800f0d6:	4283      	cmp	r3, r0
 800f0d8:	d9f5      	bls.n	800f0c6 <memmove+0xa>
 800f0da:	1881      	adds	r1, r0, r2
 800f0dc:	1ad2      	subs	r2, r2, r3
 800f0de:	42d3      	cmn	r3, r2
 800f0e0:	d100      	bne.n	800f0e4 <memmove+0x28>
 800f0e2:	bd10      	pop	{r4, pc}
 800f0e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f0ec:	e7f7      	b.n	800f0de <memmove+0x22>

0800f0ee <__malloc_lock>:
 800f0ee:	4770      	bx	lr

0800f0f0 <__malloc_unlock>:
 800f0f0:	4770      	bx	lr

0800f0f2 <_realloc_r>:
 800f0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f4:	4607      	mov	r7, r0
 800f0f6:	4614      	mov	r4, r2
 800f0f8:	460e      	mov	r6, r1
 800f0fa:	b921      	cbnz	r1, 800f106 <_realloc_r+0x14>
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f102:	f7ff bc27 	b.w	800e954 <_malloc_r>
 800f106:	b922      	cbnz	r2, 800f112 <_realloc_r+0x20>
 800f108:	f7ff fbd6 	bl	800e8b8 <_free_r>
 800f10c:	4625      	mov	r5, r4
 800f10e:	4628      	mov	r0, r5
 800f110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f112:	f000 f827 	bl	800f164 <_malloc_usable_size_r>
 800f116:	42a0      	cmp	r0, r4
 800f118:	d20f      	bcs.n	800f13a <_realloc_r+0x48>
 800f11a:	4621      	mov	r1, r4
 800f11c:	4638      	mov	r0, r7
 800f11e:	f7ff fc19 	bl	800e954 <_malloc_r>
 800f122:	4605      	mov	r5, r0
 800f124:	2800      	cmp	r0, #0
 800f126:	d0f2      	beq.n	800f10e <_realloc_r+0x1c>
 800f128:	4631      	mov	r1, r6
 800f12a:	4622      	mov	r2, r4
 800f12c:	f7fb fdda 	bl	800ace4 <memcpy>
 800f130:	4631      	mov	r1, r6
 800f132:	4638      	mov	r0, r7
 800f134:	f7ff fbc0 	bl	800e8b8 <_free_r>
 800f138:	e7e9      	b.n	800f10e <_realloc_r+0x1c>
 800f13a:	4635      	mov	r5, r6
 800f13c:	e7e7      	b.n	800f10e <_realloc_r+0x1c>
	...

0800f140 <_read_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4c07      	ldr	r4, [pc, #28]	; (800f160 <_read_r+0x20>)
 800f144:	4605      	mov	r5, r0
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	2200      	movs	r2, #0
 800f14c:	6022      	str	r2, [r4, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	f7f7 f9b8 	bl	80064c4 <_read>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_read_r+0x1e>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_read_r+0x1e>
 800f15c:	602b      	str	r3, [r5, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	2001f4dc 	.word	0x2001f4dc

0800f164 <_malloc_usable_size_r>:
 800f164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f168:	1f18      	subs	r0, r3, #4
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	bfbc      	itt	lt
 800f16e:	580b      	ldrlt	r3, [r1, r0]
 800f170:	18c0      	addlt	r0, r0, r3
 800f172:	4770      	bx	lr

0800f174 <_init>:
 800f174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f176:	bf00      	nop
 800f178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f17a:	bc08      	pop	{r3}
 800f17c:	469e      	mov	lr, r3
 800f17e:	4770      	bx	lr

0800f180 <_fini>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	bf00      	nop
 800f184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f186:	bc08      	pop	{r3}
 800f188:	469e      	mov	lr, r3
 800f18a:	4770      	bx	lr


robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fedc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08010070  08010070  00020070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105f8  080105f8  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  080105f8  080105f8  000205f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010600  08010600  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010600  08010600  00020600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010604  08010604  00020604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001cfb4  20000210  08010818  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001d1c4  08010818  0003d1c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b4b  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004935  00000000  00000000  00052d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a8  00000000  00000000  000576c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00059068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005a820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001733d  00000000  00000000  0007f2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb464  00000000  00000000  000965e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e2c  00000000  00000000  00161ac8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010054 	.word	0x08010054

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010054 	.word	0x08010054

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc53 	bl	800184c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fab8 	bl	8009660 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fab4 	bl	8009660 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001cd78 	.word	0x2001cd78
 8001110:	2001cd38 	.word	0x2001cd38
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <updateEncoderCnt+0x178>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <updateEncoderCnt+0x17c>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <updateEncoderCnt+0x180>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <updateEncoderCnt+0x184>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <updateEncoderCnt+0x188>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <updateEncoderCnt+0x17c>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <updateEncoderCnt+0x188>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <updateEncoderCnt+0x18c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <updateEncoderCnt+0x184>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <updateEncoderCnt+0x18c>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <updateEncoderCnt+0x17c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <updateEncoderCnt+0x184>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <updateEncoderCnt+0x170>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <updateEncoderCnt+0x190>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <updateEncoderCnt+0x194>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <updateEncoderCnt+0x190>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <updateEncoderCnt+0x194>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	distance_30mm += distance_1ms;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <updateEncoderCnt+0x198>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <updateEncoderCnt+0x190>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <updateEncoderCnt+0x198>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <updateEncoderCnt+0x19c>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <updateEncoderCnt+0x190>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <updateEncoderCnt+0x19c>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <updateEncoderCnt+0x190>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <updateEncoderCnt+0x190>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <updateEncoderCnt+0x190>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <updateEncoderCnt+0x1ac>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <updateEncoderCnt+0x190>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <updateEncoderCnt+0x1ac>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001262:	ed93 7a00 	vldr	s14, [r3]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <updateEncoderCnt+0x190>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001272:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateEncoderCnt+0x178>)
 8001278:	f242 7210 	movw	r2, #10000	; 0x2710
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <updateEncoderCnt+0x180>)
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001286:	bf00      	nop
 8001288:	bd98      	pop	{r3, r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	bec93a2d 	.word	0xbec93a2d
 8001294:	3f8c463a 	.word	0x3f8c463a
 8001298:	40000400 	.word	0x40000400
 800129c:	20000244 	.word	0x20000244
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000246 	.word	0x20000246
 80012a8:	20000248 	.word	0x20000248
 80012ac:	2000024a 	.word	0x2000024a
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	20000250 	.word	0x20000250
 80012b8:	20000254 	.word	0x20000254
 80012bc:	20000258 	.word	0x20000258
 80012c0:	2000025c 	.word	0x2000025c
 80012c4:	20000260 	.word	0x20000260
 80012c8:	20000264 	.word	0x20000264
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <getEncoderCnt+0x2c>)
 80012e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <getEncoderCnt+0x30>)
 80012ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	801a      	strh	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000244 	.word	0x20000244
 8001304:	20000246 	.word	0x20000246

08001308 <getTotalDistance>:

float getTotalDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return total_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getTotalDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getGoalJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <getSideLineJudgeDistance+0x18>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
}
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000264 	.word	0x20000264

0800135c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <setTotalDistance+0x1c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	2000025c 	.word	0x2000025c

0800137c <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <getCrossLineIgnoreDistance+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000268 	.word	0x20000268

08001398 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	total_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearTotalDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearGoalJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearSideLineJudgeDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearCrossLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <clearSideLineIgnoreDistance+0x18>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000026c 	.word	0x2000026c

08001424 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <getDistance10mm+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000250 	.word	0x20000250

08001440 <clearDistance10mm>:

void clearDistance10mm(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <clearDistance10mm+0x18>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000250 	.word	0x20000250

0800145c <getDistance30mm>:

float getDistance30mm(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return distance_30mm;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <getDistance30mm+0x18>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000254 	.word	0x20000254

08001478 <clearDistance30mm>:

void clearDistance30mm(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	distance_30mm = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <clearDistance30mm+0x18>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000254 	.word	0x20000254
 8001494:	00000000 	.word	0x00000000

08001498 <getspeedcount>:

float getspeedcount(void){
 8001498:	b598      	push	{r3, r4, r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <getspeedcount+0x60>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	db16      	blt.n	80014de <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <getspeedcount+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	a30d      	add	r3, pc, #52	; (adr r3, 80014f0 <getspeedcount+0x58>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe fee4 	bl	800028c <__adddf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fb8c 	bl	8000be8 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <getspeedcount+0x64>)
 80014d4:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <getspeedcount+0x60>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <getspeedcount+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	bd98      	pop	{r3, r4, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fb99999 	.word	0x3fb99999
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000270 	.word	0x20000270

08001500 <clearspeedcount>:

void clearspeedcount(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <clearspeedcount+0x14>)
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <clearspeedcount+0x18>)
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000270 	.word	0x20000270
 8001518:	3dcccccd 	.word	0x3dcccccd

0800151c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FLASH_Unlock+0x1c>)
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Unlock+0x20>)
 8001524:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <FLASH_Unlock+0x1c>)
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <FLASH_Unlock+0x24>)
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	45670123 	.word	0x45670123
 8001540:	cdef89ab 	.word	0xcdef89ab

08001544 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <FLASH_Lock+0x1c>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <FLASH_Lock+0x1c>)
 800154e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001552:	6113      	str	r3, [r2, #16]

}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001568:	bf00      	nop
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <FLASH_WaitBusy+0x1c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <FLASH_WaitBusy+0x6>
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800158e:	f006 f89f 	bl	80076d0 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 f955 	bl	8007860 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015b6:	f006 f8ad 	bl	8007714 <HAL_FLASH_Lock>
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80015d0:	f7ff ffa4 	bl	800151c <FLASH_Unlock>

	FLASH_WaitBusy();
 80015d4:	f7ff ffc6 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80015f6:	f7ff ffb5 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <FLASH_Write_Word_F+0x50>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001606:	f7ff ff9d 	bl	8001544 <FLASH_Lock>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800161e:	f001 ffb3 	bl	8003588 <IMU_init>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f004 ffbb 	bl	80065a4 <HAL_Delay>

	return who_i_am;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <updateIMUValue>:

void updateIMUValue(){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800163e:	f001 ffc7 	bl	80035d0 <read_gyro_data>
	zg_ = zg;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <updateIMUValue+0x188>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <updateIMUValue+0x18c>)
 800164a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <updateIMUValue+0x188>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <updateIMUValue+0x190>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <updateIMUValue+0x18c>)
 8001692:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <updateIMUValue+0x18c>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <updateIMUValue+0x194>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <updateIMUValue+0x18c>)
 80016b8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <updateIMUValue+0x18c>)
 80016bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <updateIMUValue+0x190>)
 80016c2:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <updateIMUValue+0x18c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a332      	add	r3, pc, #200	; (adr r3, 80017a8 <updateIMUValue+0x170>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	a330      	add	r3, pc, #192	; (adr r3, 80017b0 <updateIMUValue+0x178>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <updateIMUValue+0x198>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4602      	mov	r2, r0
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <updateIMUValue+0x19c>)
 800171a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <updateIMUValue+0x1a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <updateIMUValue+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	a320      	add	r3, pc, #128	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <updateIMUValue+0x1a0>)
 800175a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <updateIMUValue+0x1a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a310      	add	r3, pc, #64	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <updateIMUValue+0x1a4>)
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	66666666 	.word	0x66666666
 80017ac:	40306666 	.word	0x40306666
 80017b0:	54411744 	.word	0x54411744
 80017b4:	400921fb 	.word	0x400921fb
 80017b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017bc:	3f50624d 	.word	0x3f50624d
 80017c0:	2001cea0 	.word	0x2001cea0
 80017c4:	2001cdb8 	.word	0x2001cdb8
 80017c8:	20000278 	.word	0x20000278
 80017cc:	20000274 	.word	0x20000274
 80017d0:	40668000 	.word	0x40668000
 80017d4:	2001cdc8 	.word	0x2001cdc8
 80017d8:	2001cdc0 	.word	0x2001cdc0
 80017dc:	2001cdc4 	.word	0x2001cdc4

080017e0 <IMU_average>:

void IMU_average(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	float average = 0;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	e015      	b.n	800181e <IMU_average+0x3e>
		average = average+zg;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <IMU_average+0x60>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ed97 7a01 	vldr	s14, [r7, #4]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f004 fec9 	bl	80065a4 <HAL_Delay>
		setLED2('A');
 8001812:	2041      	movs	r0, #65	; 0x41
 8001814:	f000 f912 	bl	8001a3c <setLED2>
	for(int i=0;i<=1000;i++){
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	dde5      	ble.n	80017f2 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001844 <IMU_average+0x64>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <IMU_average+0x68>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2001cea0 	.word	0x2001cea0
 8001844:	447a0000 	.word	0x447a0000
 8001848:	20000274 	.word	0x20000274

0800184c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <getTheta10mm+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2001cdc0 	.word	0x2001cdc0

08001868 <clearTheta10mm>:

void clearTheta10mm()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <clearTheta10mm+0x18>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2001cdc0 	.word	0x2001cdc0

08001884 <clearaddTheta>:
{
	return add_theta;
}

void clearaddTheta()
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	add_theta = 0;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <clearaddTheta+0x18>)
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2001cdc4 	.word	0x2001cdc4

080018a0 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b52      	cmp	r3, #82	; 0x52
 80018ae:	d112      	bne.n	80018d6 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4860      	ldr	r0, [pc, #384]	; (8001a38 <setLED+0x198>)
 80018b8:	f006 faa6 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c2:	485d      	ldr	r0, [pc, #372]	; (8001a38 <setLED+0x198>)
 80018c4:	f006 faa0 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ce:	485a      	ldr	r0, [pc, #360]	; (8001a38 <setLED+0x198>)
 80018d0:	f006 fa9a 	bl	8007e08 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80018d4:	e0ab      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'G'){
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b47      	cmp	r3, #71	; 0x47
 80018da:	d112      	bne.n	8001902 <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e2:	4855      	ldr	r0, [pc, #340]	; (8001a38 <setLED+0x198>)
 80018e4:	f006 fa90 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ee:	4852      	ldr	r0, [pc, #328]	; (8001a38 <setLED+0x198>)
 80018f0:	f006 fa8a 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fa:	484f      	ldr	r0, [pc, #316]	; (8001a38 <setLED+0x198>)
 80018fc:	f006 fa84 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001900:	e095      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'B'){
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b42      	cmp	r3, #66	; 0x42
 8001906:	d112      	bne.n	800192e <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190e:	484a      	ldr	r0, [pc, #296]	; (8001a38 <setLED+0x198>)
 8001910:	f006 fa7a 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191a:	4847      	ldr	r0, [pc, #284]	; (8001a38 <setLED+0x198>)
 800191c:	f006 fa74 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001926:	4844      	ldr	r0, [pc, #272]	; (8001a38 <setLED+0x198>)
 8001928:	f006 fa6e 	bl	8007e08 <HAL_GPIO_WritePin>
}
 800192c:	e07f      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'M'){
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b4d      	cmp	r3, #77	; 0x4d
 8001932:	d112      	bne.n	800195a <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193a:	483f      	ldr	r0, [pc, #252]	; (8001a38 <setLED+0x198>)
 800193c:	f006 fa64 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001946:	483c      	ldr	r0, [pc, #240]	; (8001a38 <setLED+0x198>)
 8001948:	f006 fa5e 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001952:	4839      	ldr	r0, [pc, #228]	; (8001a38 <setLED+0x198>)
 8001954:	f006 fa58 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001958:	e069      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'Y'){
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b59      	cmp	r3, #89	; 0x59
 800195e:	d112      	bne.n	8001986 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001966:	4834      	ldr	r0, [pc, #208]	; (8001a38 <setLED+0x198>)
 8001968:	f006 fa4e 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001972:	4831      	ldr	r0, [pc, #196]	; (8001a38 <setLED+0x198>)
 8001974:	f006 fa48 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197e:	482e      	ldr	r0, [pc, #184]	; (8001a38 <setLED+0x198>)
 8001980:	f006 fa42 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001984:	e053      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'C'){
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b43      	cmp	r3, #67	; 0x43
 800198a:	d112      	bne.n	80019b2 <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	4829      	ldr	r0, [pc, #164]	; (8001a38 <setLED+0x198>)
 8001994:	f006 fa38 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	4826      	ldr	r0, [pc, #152]	; (8001a38 <setLED+0x198>)
 80019a0:	f006 fa32 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019aa:	4823      	ldr	r0, [pc, #140]	; (8001a38 <setLED+0x198>)
 80019ac:	f006 fa2c 	bl	8007e08 <HAL_GPIO_WritePin>
}
 80019b0:	e03d      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'W'){
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b57      	cmp	r3, #87	; 0x57
 80019b6:	d112      	bne.n	80019de <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019be:	481e      	ldr	r0, [pc, #120]	; (8001a38 <setLED+0x198>)
 80019c0:	f006 fa22 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	481b      	ldr	r0, [pc, #108]	; (8001a38 <setLED+0x198>)
 80019cc:	f006 fa1c 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <setLED+0x198>)
 80019d8:	f006 fa16 	bl	8007e08 <HAL_GPIO_WritePin>
}
 80019dc:	e027      	b.n	8001a2e <setLED+0x18e>
	else if(color == 'N'){
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b4e      	cmp	r3, #78	; 0x4e
 80019e2:	d112      	bne.n	8001a0a <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ea:	4813      	ldr	r0, [pc, #76]	; (8001a38 <setLED+0x198>)
 80019ec:	f006 fa0c 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f6:	4810      	ldr	r0, [pc, #64]	; (8001a38 <setLED+0x198>)
 80019f8:	f006 fa06 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <setLED+0x198>)
 8001a04:	f006 fa00 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001a08:	e011      	b.n	8001a2e <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <setLED+0x198>)
 8001a12:	f006 f9f9 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <setLED+0x198>)
 8001a1e:	f006 f9f3 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <setLED+0x198>)
 8001a2a:	f006 f9ed 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40020800 	.word	0x40020800

08001a3c <setLED2>:

void setLED2(uint8_t color2)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b52      	cmp	r3, #82	; 0x52
 8001a4a:	d124      	bne.n	8001a96 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a52:	48c5      	ldr	r0, [pc, #788]	; (8001d68 <setLED2+0x32c>)
 8001a54:	f006 f9d8 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	48c3      	ldr	r0, [pc, #780]	; (8001d6c <setLED2+0x330>)
 8001a60:	f006 f9d2 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	48c0      	ldr	r0, [pc, #768]	; (8001d6c <setLED2+0x330>)
 8001a6c:	f006 f9cc 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a76:	48bd      	ldr	r0, [pc, #756]	; (8001d6c <setLED2+0x330>)
 8001a78:	f006 f9c6 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	48ba      	ldr	r0, [pc, #744]	; (8001d6c <setLED2+0x330>)
 8001a84:	f006 f9c0 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	48b7      	ldr	r0, [pc, #732]	; (8001d6c <setLED2+0x330>)
 8001a90:	f006 f9ba 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001a94:	e163      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'G'){
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b47      	cmp	r3, #71	; 0x47
 8001a9a:	d124      	bne.n	8001ae6 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa2:	48b1      	ldr	r0, [pc, #708]	; (8001d68 <setLED2+0x32c>)
 8001aa4:	f006 f9b0 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aae:	48af      	ldr	r0, [pc, #700]	; (8001d6c <setLED2+0x330>)
 8001ab0:	f006 f9aa 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aba:	48ac      	ldr	r0, [pc, #688]	; (8001d6c <setLED2+0x330>)
 8001abc:	f006 f9a4 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac6:	48a9      	ldr	r0, [pc, #676]	; (8001d6c <setLED2+0x330>)
 8001ac8:	f006 f99e 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad2:	48a6      	ldr	r0, [pc, #664]	; (8001d6c <setLED2+0x330>)
 8001ad4:	f006 f998 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ade:	48a3      	ldr	r0, [pc, #652]	; (8001d6c <setLED2+0x330>)
 8001ae0:	f006 f992 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001ae4:	e13b      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'B'){
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b42      	cmp	r3, #66	; 0x42
 8001aea:	d124      	bne.n	8001b36 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af2:	489d      	ldr	r0, [pc, #628]	; (8001d68 <setLED2+0x32c>)
 8001af4:	f006 f988 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afe:	489b      	ldr	r0, [pc, #620]	; (8001d6c <setLED2+0x330>)
 8001b00:	f006 f982 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0a:	4898      	ldr	r0, [pc, #608]	; (8001d6c <setLED2+0x330>)
 8001b0c:	f006 f97c 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b16:	4895      	ldr	r0, [pc, #596]	; (8001d6c <setLED2+0x330>)
 8001b18:	f006 f976 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b22:	4892      	ldr	r0, [pc, #584]	; (8001d6c <setLED2+0x330>)
 8001b24:	f006 f970 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b2e:	488f      	ldr	r0, [pc, #572]	; (8001d6c <setLED2+0x330>)
 8001b30:	f006 f96a 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001b34:	e113      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'W'){
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b57      	cmp	r3, #87	; 0x57
 8001b3a:	d124      	bne.n	8001b86 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b42:	4889      	ldr	r0, [pc, #548]	; (8001d68 <setLED2+0x32c>)
 8001b44:	f006 f960 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4887      	ldr	r0, [pc, #540]	; (8001d6c <setLED2+0x330>)
 8001b50:	f006 f95a 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	4884      	ldr	r0, [pc, #528]	; (8001d6c <setLED2+0x330>)
 8001b5c:	f006 f954 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b66:	4881      	ldr	r0, [pc, #516]	; (8001d6c <setLED2+0x330>)
 8001b68:	f006 f94e 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b72:	487e      	ldr	r0, [pc, #504]	; (8001d6c <setLED2+0x330>)
 8001b74:	f006 f948 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b7e:	487b      	ldr	r0, [pc, #492]	; (8001d6c <setLED2+0x330>)
 8001b80:	f006 f942 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001b84:	e0eb      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'Y'){
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b59      	cmp	r3, #89	; 0x59
 8001b8a:	d124      	bne.n	8001bd6 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b92:	4875      	ldr	r0, [pc, #468]	; (8001d68 <setLED2+0x32c>)
 8001b94:	f006 f938 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b9e:	4873      	ldr	r0, [pc, #460]	; (8001d6c <setLED2+0x330>)
 8001ba0:	f006 f932 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4870      	ldr	r0, [pc, #448]	; (8001d6c <setLED2+0x330>)
 8001bac:	f006 f92c 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb6:	486d      	ldr	r0, [pc, #436]	; (8001d6c <setLED2+0x330>)
 8001bb8:	f006 f926 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc2:	486a      	ldr	r0, [pc, #424]	; (8001d6c <setLED2+0x330>)
 8001bc4:	f006 f920 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bce:	4867      	ldr	r0, [pc, #412]	; (8001d6c <setLED2+0x330>)
 8001bd0:	f006 f91a 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001bd4:	e0c3      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'X'){
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b58      	cmp	r3, #88	; 0x58
 8001bda:	d124      	bne.n	8001c26 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <setLED2+0x32c>)
 8001be4:	f006 f910 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bee:	485f      	ldr	r0, [pc, #380]	; (8001d6c <setLED2+0x330>)
 8001bf0:	f006 f90a 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	485c      	ldr	r0, [pc, #368]	; (8001d6c <setLED2+0x330>)
 8001bfc:	f006 f904 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c06:	4859      	ldr	r0, [pc, #356]	; (8001d6c <setLED2+0x330>)
 8001c08:	f006 f8fe 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c12:	4856      	ldr	r0, [pc, #344]	; (8001d6c <setLED2+0x330>)
 8001c14:	f006 f8f8 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1e:	4853      	ldr	r0, [pc, #332]	; (8001d6c <setLED2+0x330>)
 8001c20:	f006 f8f2 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001c24:	e09b      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'V'){
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b56      	cmp	r3, #86	; 0x56
 8001c2a:	d124      	bne.n	8001c76 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c32:	484d      	ldr	r0, [pc, #308]	; (8001d68 <setLED2+0x32c>)
 8001c34:	f006 f8e8 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c3e:	484b      	ldr	r0, [pc, #300]	; (8001d6c <setLED2+0x330>)
 8001c40:	f006 f8e2 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4848      	ldr	r0, [pc, #288]	; (8001d6c <setLED2+0x330>)
 8001c4c:	f006 f8dc 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c56:	4845      	ldr	r0, [pc, #276]	; (8001d6c <setLED2+0x330>)
 8001c58:	f006 f8d6 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c62:	4842      	ldr	r0, [pc, #264]	; (8001d6c <setLED2+0x330>)
 8001c64:	f006 f8d0 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c6e:	483f      	ldr	r0, [pc, #252]	; (8001d6c <setLED2+0x330>)
 8001c70:	f006 f8ca 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001c74:	e073      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'T'){
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b54      	cmp	r3, #84	; 0x54
 8001c7a:	d124      	bne.n	8001cc6 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c82:	4839      	ldr	r0, [pc, #228]	; (8001d68 <setLED2+0x32c>)
 8001c84:	f006 f8c0 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4837      	ldr	r0, [pc, #220]	; (8001d6c <setLED2+0x330>)
 8001c90:	f006 f8ba 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	4834      	ldr	r0, [pc, #208]	; (8001d6c <setLED2+0x330>)
 8001c9c:	f006 f8b4 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca6:	4831      	ldr	r0, [pc, #196]	; (8001d6c <setLED2+0x330>)
 8001ca8:	f006 f8ae 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb2:	482e      	ldr	r0, [pc, #184]	; (8001d6c <setLED2+0x330>)
 8001cb4:	f006 f8a8 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cbe:	482b      	ldr	r0, [pc, #172]	; (8001d6c <setLED2+0x330>)
 8001cc0:	f006 f8a2 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001cc4:	e04b      	b.n	8001d5e <setLED2+0x322>
	else if(color2 == 'A'){
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b41      	cmp	r3, #65	; 0x41
 8001cca:	d124      	bne.n	8001d16 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd2:	4825      	ldr	r0, [pc, #148]	; (8001d68 <setLED2+0x32c>)
 8001cd4:	f006 f898 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cde:	4823      	ldr	r0, [pc, #140]	; (8001d6c <setLED2+0x330>)
 8001ce0:	f006 f892 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cea:	4820      	ldr	r0, [pc, #128]	; (8001d6c <setLED2+0x330>)
 8001cec:	f006 f88c 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf6:	481d      	ldr	r0, [pc, #116]	; (8001d6c <setLED2+0x330>)
 8001cf8:	f006 f886 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d02:	481a      	ldr	r0, [pc, #104]	; (8001d6c <setLED2+0x330>)
 8001d04:	f006 f880 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0e:	4817      	ldr	r0, [pc, #92]	; (8001d6c <setLED2+0x330>)
 8001d10:	f006 f87a 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001d14:	e023      	b.n	8001d5e <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1c:	4812      	ldr	r0, [pc, #72]	; (8001d68 <setLED2+0x32c>)
 8001d1e:	f006 f873 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d28:	4810      	ldr	r0, [pc, #64]	; (8001d6c <setLED2+0x330>)
 8001d2a:	f006 f86d 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <setLED2+0x330>)
 8001d36:	f006 f867 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d40:	480a      	ldr	r0, [pc, #40]	; (8001d6c <setLED2+0x330>)
 8001d42:	f006 f861 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <setLED2+0x330>)
 8001d4e:	f006 f85b 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <setLED2+0x330>)
 8001d5a:	f006 f855 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400

08001d70 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001d78:	4bb3      	ldr	r3, [pc, #716]	; (8002048 <calculateLineFollowingTermFlip+0x2d8>)
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	4bb3      	ldr	r3, [pc, #716]	; (800204c <calculateLineFollowingTermFlip+0x2dc>)
 8001d7e:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001d86:	4bb2      	ldr	r3, [pc, #712]	; (8002050 <calculateLineFollowingTermFlip+0x2e0>)
 8001d88:	f993 3000 	ldrsb.w	r3, [r3]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	f040 8140 	bne.w	8002012 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001d92:	4bb0      	ldr	r3, [pc, #704]	; (8002054 <calculateLineFollowingTermFlip+0x2e4>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d106      	bne.n	8001da8 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001d9a:	4baf      	ldr	r3, [pc, #700]	; (8002058 <calculateLineFollowingTermFlip+0x2e8>)
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001da2:	4bac      	ldr	r3, [pc, #688]	; (8002054 <calculateLineFollowingTermFlip+0x2e4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001da8:	4bac      	ldr	r3, [pc, #688]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbb8 	bl	8000524 <__aeabi_i2d>
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4ba9      	ldr	r3, [pc, #676]	; (8002060 <calculateLineFollowingTermFlip+0x2f0>)
 8001dba:	f7fe fc1d 	bl	80005f8 <__aeabi_dmul>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	4625      	mov	r5, r4
 8001dc4:	461c      	mov	r4, r3
 8001dc6:	4ba5      	ldr	r3, [pc, #660]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fba9 	bl	8000524 <__aeabi_i2d>
 8001dd2:	a393      	add	r3, pc, #588	; (adr r3, 8002020 <calculateLineFollowingTermFlip+0x2b0>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc0e 	bl	80005f8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe fa52 	bl	800028c <__adddf3>
 8001de8:	4603      	mov	r3, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	4625      	mov	r5, r4
 8001dee:	461c      	mov	r4, r3
 8001df0:	4b9a      	ldr	r3, [pc, #616]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001df2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb94 	bl	8000524 <__aeabi_i2d>
 8001dfc:	a38a      	add	r3, pc, #552	; (adr r3, 8002028 <calculateLineFollowingTermFlip+0x2b8>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fbf9 	bl	80005f8 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f7fe fa3d 	bl	800028c <__adddf3>
 8001e12:	4603      	mov	r3, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	4625      	mov	r5, r4
 8001e18:	461c      	mov	r4, r3
 8001e1a:	4b90      	ldr	r3, [pc, #576]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001e1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb7f 	bl	8000524 <__aeabi_i2d>
 8001e26:	a382      	add	r3, pc, #520	; (adr r3, 8002030 <calculateLineFollowingTermFlip+0x2c0>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fbe4 	bl	80005f8 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fa28 	bl	800028c <__adddf3>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4625      	mov	r5, r4
 8001e42:	461c      	mov	r4, r3
 8001e44:	4b85      	ldr	r3, [pc, #532]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001e46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb6a 	bl	8000524 <__aeabi_i2d>
 8001e50:	a379      	add	r3, pc, #484	; (adr r3, 8002038 <calculateLineFollowingTermFlip+0x2c8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fbcf 	bl	80005f8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	4629      	mov	r1, r5
 8001e62:	f7fe fa13 	bl	800028c <__adddf3>
 8001e66:	4603      	mov	r3, r0
 8001e68:	460c      	mov	r4, r1
 8001e6a:	4625      	mov	r5, r4
 8001e6c:	461c      	mov	r4, r3
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001e70:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb55 	bl	8000524 <__aeabi_i2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa03 	bl	800028c <__adddf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b74      	ldr	r3, [pc, #464]	; (8002064 <calculateLineFollowingTermFlip+0x2f4>)
 8001e94:	f7fe fcda 	bl	800084c <__aeabi_ddiv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	4625      	mov	r5, r4
 8001e9e:	461c      	mov	r4, r3
 8001ea0:	4b6e      	ldr	r3, [pc, #440]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001ea2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb3c 	bl	8000524 <__aeabi_i2d>
 8001eac:	4680      	mov	r8, r0
 8001eae:	4689      	mov	r9, r1
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001eb2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb34 	bl	8000524 <__aeabi_i2d>
 8001ebc:	a35e      	add	r3, pc, #376	; (adr r3, 8002038 <calculateLineFollowingTermFlip+0x2c8>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fb99 	bl	80005f8 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4649      	mov	r1, r9
 8001ece:	f7fe f9dd 	bl	800028c <__adddf3>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4690      	mov	r8, r2
 8001ed8:	4699      	mov	r9, r3
 8001eda:	4b60      	ldr	r3, [pc, #384]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001edc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb1f 	bl	8000524 <__aeabi_i2d>
 8001ee6:	a352      	add	r3, pc, #328	; (adr r3, 8002030 <calculateLineFollowingTermFlip+0x2c0>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb84 	bl	80005f8 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4640      	mov	r0, r8
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	f7fe f9c8 	bl	800028c <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4690      	mov	r8, r2
 8001f02:	4699      	mov	r9, r3
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001f06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb0a 	bl	8000524 <__aeabi_i2d>
 8001f10:	a345      	add	r3, pc, #276	; (adr r3, 8002028 <calculateLineFollowingTermFlip+0x2b8>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fb6f 	bl	80005f8 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4640      	mov	r0, r8
 8001f20:	4649      	mov	r1, r9
 8001f22:	f7fe f9b3 	bl	800028c <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4690      	mov	r8, r2
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	4b4b      	ldr	r3, [pc, #300]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001f30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe faf5 	bl	8000524 <__aeabi_i2d>
 8001f3a:	a339      	add	r3, pc, #228	; (adr r3, 8002020 <calculateLineFollowingTermFlip+0x2b0>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fb5a 	bl	80005f8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe f99e 	bl	800028c <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4690      	mov	r8, r2
 8001f56:	4699      	mov	r9, r3
 8001f58:	4b40      	ldr	r3, [pc, #256]	; (800205c <calculateLineFollowingTermFlip+0x2ec>)
 8001f5a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fae0 	bl	8000524 <__aeabi_i2d>
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <calculateLineFollowingTermFlip+0x2f0>)
 8001f6a:	f7fe fb45 	bl	80005f8 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4640      	mov	r0, r8
 8001f74:	4649      	mov	r1, r9
 8001f76:	f7fe f989 	bl	800028c <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <calculateLineFollowingTermFlip+0x2f4>)
 8001f88:	f7fe fc60 	bl	800084c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe f978 	bl	8000288 <__aeabi_dsub>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	f7fe fe22 	bl	8000be8 <__aeabi_d2f>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001fa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <calculateLineFollowingTermFlip+0x2f8>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	ee17 0a90 	vmov	r0, s15
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	a31a      	add	r3, pc, #104	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2d0>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fc36 	bl	800084c <__aeabi_ddiv>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	f7fe fdfe 	bl	8000be8 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <calculateLineFollowingTermFlip+0x2e8>)
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <calculateLineFollowingTermFlip+0x2fc>)
 8002008:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800200c:	4a16      	ldr	r2, [pc, #88]	; (8002068 <calculateLineFollowingTermFlip+0x2f8>)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6013      	str	r3, [r2, #0]
	}
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800201c:	f3af 8000 	nop.w
 8002020:	9999999a 	.word	0x9999999a
 8002024:	3ff99999 	.word	0x3ff99999
 8002028:	33333333 	.word	0x33333333
 800202c:	3ff73333 	.word	0x3ff73333
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	3ff4cccc 	.word	0x3ff4cccc
 8002038:	66666666 	.word	0x66666666
 800203c:	3ff26666 	.word	0x3ff26666
 8002040:	d2f1a9fc 	.word	0xd2f1a9fc
 8002044:	3f50624d 	.word	0x3f50624d
 8002048:	40733333 	.word	0x40733333
 800204c:	3ccccccd 	.word	0x3ccccccd
 8002050:	2000027a 	.word	0x2000027a
 8002054:	2000027b 	.word	0x2000027b
 8002058:	20000288 	.word	0x20000288
 800205c:	2001cce4 	.word	0x2001cce4
 8002060:	3ffc0000 	.word	0x3ffc0000
 8002064:	40180000 	.word	0x40180000
 8002068:	20000284 	.word	0x20000284
 800206c:	2000027c 	.word	0x2000027c

08002070 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8002076:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <lineTraceFlip+0x150>)
 8002078:	f993 3000 	ldrsb.w	r3, [r3]
 800207c:	2b01      	cmp	r3, #1
 800207e:	f040 8097 	bne.w	80021b0 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 8002082:	f001 fb55 	bl	8003730 <getVelocityControlTerm>
 8002086:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <lineTraceFlip+0x154>)
 800208c:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 800208e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002092:	edd7 7a03 	vldr	s15, [r7, #12]
 8002096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209e:	db02      	blt.n	80020a6 <lineTraceFlip+0x36>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e010      	b.n	80020c8 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	eef1 7a67 	vneg.f32	s15, s15
 80020ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	d805      	bhi.n	80020c8 <lineTraceFlip+0x58>
 80020bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c0:	eef1 7a67 	vneg.f32	s15, s15
 80020c4:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <lineTraceFlip+0x158>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80021cc <lineTraceFlip+0x15c>
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	db0d      	blt.n	8002106 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <lineTraceFlip+0x158>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80021cc <lineTraceFlip+0x15c>
 80020fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002100:	edc7 7a04 	vstr	s15, [r7, #16]
 8002104:	e01a      	b.n	800213c <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8002106:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <lineTraceFlip+0x158>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80021d0 <lineTraceFlip+0x160>
 8002118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	d80c      	bhi.n	800213c <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <lineTraceFlip+0x158>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ed97 7a05 	vldr	s14, [r7, #20]
 800212c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002130:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021d0 <lineTraceFlip+0x160>
 8002134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002138:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 800213c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002140:	edd7 7a04 	vldr	s15, [r7, #16]
 8002144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002148:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <lineTraceFlip+0x158>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	edd7 7a04 	vldr	s15, [r7, #16]
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <lineTraceFlip+0x158>)
 800215c:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <lineTraceFlip+0x158>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	ed97 7a05 	vldr	s14, [r7, #20]
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <lineTraceFlip+0x158>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ed97 7a05 	vldr	s14, [r7, #20]
 800217c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002180:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <lineTraceFlip+0x164>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 800218a:	edd7 7a02 	vldr	s15, [r7, #8]
 800218e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002192:	ee17 3a90 	vmov	r3, s15
 8002196:	b21b      	sxth	r3, r3
 8002198:	edd7 7a01 	vldr	s15, [r7, #4]
 800219c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a0:	ee17 2a90 	vmov	r2, s15
 80021a4:	b212      	sxth	r2, r2
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 fecd 	bl	8004f48 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021ae:	e003      	b.n	80021b8 <lineTraceFlip+0x148>
		setMotor(0, 0);
 80021b0:	2100      	movs	r1, #0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f002 fec8 	bl	8004f48 <setMotor>
}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000027a 	.word	0x2000027a
 80021c4:	44b264cd 	.word	0x44b264cd
 80021c8:	2000027c 	.word	0x2000027c
 80021cc:	44d1e000 	.word	0x44d1e000
 80021d0:	c4d1e000 	.word	0xc4d1e000
 80021d4:	2001cdcc 	.word	0x2001cdcc

080021d8 <startLineTrace>:

void startLineTrace()
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <startLineTrace+0x1c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <startLineTrace+0x20>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000027a 	.word	0x2000027a
 80021f8:	2000027b 	.word	0x2000027b

080021fc <stopLineTrace>:

void stopLineTrace()
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <stopLineTrace+0x1c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <stopLineTrace+0x20>)
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	2000027a 	.word	0x2000027a
 800221c:	2000027c 	.word	0x2000027c

08002220 <checkCourseOut>:

void checkCourseOut(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <checkCourseOut+0xb4>)
 8002228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222c:	461a      	mov	r2, r3
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <checkCourseOut+0xb4>)
 8002230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002234:	4413      	add	r3, r2
 8002236:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <checkCourseOut+0xb4>)
 8002238:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <checkCourseOut+0xb4>)
 8002240:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002244:	4413      	add	r3, r2
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <checkCourseOut+0xb4>)
 8002248:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800224c:	4413      	add	r3, r2
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <checkCourseOut+0xb4>)
 8002250:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002254:	4413      	add	r3, r2
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <checkCourseOut+0xb4>)
 8002258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800225c:	4413      	add	r3, r2
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <checkCourseOut+0xb4>)
 8002260:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002264:	4413      	add	r3, r2
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <checkCourseOut+0xb4>)
 8002268:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800226c:	4413      	add	r3, r2
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <checkCourseOut+0xb4>)
 8002270:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002274:	4413      	add	r3, r2
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <checkCourseOut+0xb4>)
 8002278:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800227c:	4413      	add	r3, r2
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <checkCourseOut+0xb4>)
 8002280:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8002284:	4413      	add	r3, r2
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <checkCourseOut+0xb8>)
 8002288:	fb82 1203 	smull	r1, r2, r2, r3
 800228c:	1052      	asrs	r2, r2, #1
 800228e:	17db      	asrs	r3, r3, #31
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800229a:	d906      	bls.n	80022aa <checkCourseOut+0x8a>
		dark_cnt++;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <checkCourseOut+0xbc>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <checkCourseOut+0xbc>)
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	e002      	b.n	80022b0 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <checkCourseOut+0xbc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <checkCourseOut+0xbc>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2b13      	cmp	r3, #19
 80022b6:	d903      	bls.n	80022c0 <checkCourseOut+0xa0>
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <checkCourseOut+0xc0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 80022be:	e002      	b.n	80022c6 <checkCourseOut+0xa6>
	else dark_flag = false;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <checkCourseOut+0xc0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	2001cce4 	.word	0x2001cce4
 80022d8:	2aaaaaab 	.word	0x2aaaaaab
 80022dc:	2000028c 	.word	0x2000028c
 80022e0:	20000280 	.word	0x20000280

080022e4 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	return dark_flag;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <getCouseOutFlag+0x14>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000280 	.word	0x20000280

080022fc <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002300:	2202      	movs	r2, #2
 8002302:	4905      	ldr	r1, [pc, #20]	; (8002318 <initADC+0x1c>)
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <initADC+0x20>)
 8002306:	f004 f9b3 	bl	8006670 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800230a:	220c      	movs	r2, #12
 800230c:	4904      	ldr	r1, [pc, #16]	; (8002320 <initADC+0x24>)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <initADC+0x28>)
 8002310:	f004 f9ae 	bl	8006670 <HAL_ADC_Start_DMA>
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200002a8 	.word	0x200002a8
 800231c:	2001ce20 	.word	0x2001ce20
 8002320:	20000290 	.word	0x20000290
 8002324:	2001cdd0 	.word	0x2001cdd0

08002328 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800232c:	4bc9      	ldr	r3, [pc, #804]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 800232e:	885b      	ldrh	r3, [r3, #2]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002338:	4bc7      	ldr	r3, [pc, #796]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 800233a:	edd3 7a01 	vldr	s15, [r3, #4]
 800233e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002342:	4bc6      	ldr	r3, [pc, #792]	; (800265c <storeAnalogSensorBuffer+0x334>)
 8002344:	ed93 7a01 	vldr	s14, [r3, #4]
 8002348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002660 <storeAnalogSensorBuffer+0x338>
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	4bc3      	ldr	r3, [pc, #780]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	b219      	sxth	r1, r3
 8002364:	4bc0      	ldr	r3, [pc, #768]	; (8002668 <storeAnalogSensorBuffer+0x340>)
 8002366:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800236a:	4bba      	ldr	r3, [pc, #744]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002376:	4bb8      	ldr	r3, [pc, #736]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002380:	4bb6      	ldr	r3, [pc, #728]	; (800265c <storeAnalogSensorBuffer+0x334>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002660 <storeAnalogSensorBuffer+0x338>
 800238e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002392:	4bb4      	ldr	r3, [pc, #720]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	b219      	sxth	r1, r3
 80023a2:	4bb2      	ldr	r3, [pc, #712]	; (800266c <storeAnalogSensorBuffer+0x344>)
 80023a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023a8:	4baa      	ldr	r3, [pc, #680]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 80023aa:	889b      	ldrh	r3, [r3, #4]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b4:	4ba8      	ldr	r3, [pc, #672]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 80023b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023be:	4ba7      	ldr	r3, [pc, #668]	; (800265c <storeAnalogSensorBuffer+0x334>)
 80023c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002660 <storeAnalogSensorBuffer+0x338>
 80023cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d0:	4ba4      	ldr	r3, [pc, #656]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023da:	ee17 3a90 	vmov	r3, s15
 80023de:	b219      	sxth	r1, r3
 80023e0:	4ba3      	ldr	r3, [pc, #652]	; (8002670 <storeAnalogSensorBuffer+0x348>)
 80023e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80023e6:	4b9b      	ldr	r3, [pc, #620]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 80023e8:	88db      	ldrh	r3, [r3, #6]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f2:	4b99      	ldr	r3, [pc, #612]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 80023f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80023f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023fc:	4b97      	ldr	r3, [pc, #604]	; (800265c <storeAnalogSensorBuffer+0x334>)
 80023fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8002402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002406:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002660 <storeAnalogSensorBuffer+0x338>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	4b95      	ldr	r3, [pc, #596]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002418:	ee17 3a90 	vmov	r3, s15
 800241c:	b219      	sxth	r1, r3
 800241e:	4b95      	ldr	r3, [pc, #596]	; (8002674 <storeAnalogSensorBuffer+0x34c>)
 8002420:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002424:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 8002426:	891b      	ldrh	r3, [r3, #8]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002430:	4b89      	ldr	r3, [pc, #548]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 8002432:	edd3 7a04 	vldr	s15, [r3, #16]
 8002436:	ee77 6a67 	vsub.f32	s13, s14, s15
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <storeAnalogSensorBuffer+0x334>)
 800243c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002444:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002660 <storeAnalogSensorBuffer+0x338>
 8002448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244c:	4b85      	ldr	r3, [pc, #532]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	b219      	sxth	r1, r3
 800245c:	4b86      	ldr	r3, [pc, #536]	; (8002678 <storeAnalogSensorBuffer+0x350>)
 800245e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002462:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 8002464:	895b      	ldrh	r3, [r3, #10]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246e:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 8002470:	edd3 7a05 	vldr	s15, [r3, #20]
 8002474:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002478:	4b78      	ldr	r3, [pc, #480]	; (800265c <storeAnalogSensorBuffer+0x334>)
 800247a:	ed93 7a05 	vldr	s14, [r3, #20]
 800247e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002482:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002660 <storeAnalogSensorBuffer+0x338>
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002494:	ee17 3a90 	vmov	r3, s15
 8002498:	b219      	sxth	r1, r3
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <storeAnalogSensorBuffer+0x354>)
 800249c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80024a0:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 80024a2:	899b      	ldrh	r3, [r3, #12]
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 80024ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80024b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024b6:	4b69      	ldr	r3, [pc, #420]	; (800265c <storeAnalogSensorBuffer+0x334>)
 80024b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002660 <storeAnalogSensorBuffer+0x338>
 80024c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d2:	ee17 3a90 	vmov	r3, s15
 80024d6:	b219      	sxth	r1, r3
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <storeAnalogSensorBuffer+0x358>)
 80024da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 80024e0:	89db      	ldrh	r3, [r3, #14]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ea:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 80024ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80024f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <storeAnalogSensorBuffer+0x334>)
 80024f6:	ed93 7a07 	vldr	s14, [r3, #28]
 80024fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fe:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002660 <storeAnalogSensorBuffer+0x338>
 8002502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002506:	4b57      	ldr	r3, [pc, #348]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002510:	ee17 3a90 	vmov	r3, s15
 8002514:	b219      	sxth	r1, r3
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <storeAnalogSensorBuffer+0x35c>)
 8002518:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800251c:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 800251e:	8a1b      	ldrh	r3, [r3, #16]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002528:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 800252a:	edd3 7a08 	vldr	s15, [r3, #32]
 800252e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <storeAnalogSensorBuffer+0x334>)
 8002534:	ed93 7a08 	vldr	s14, [r3, #32]
 8002538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002660 <storeAnalogSensorBuffer+0x338>
 8002540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800254e:	ee17 3a90 	vmov	r3, s15
 8002552:	b219      	sxth	r1, r3
 8002554:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <storeAnalogSensorBuffer+0x360>)
 8002556:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 800255c:	8a5b      	ldrh	r3, [r3, #18]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002566:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 8002568:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800256c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002570:	4b3a      	ldr	r3, [pc, #232]	; (800265c <storeAnalogSensorBuffer+0x334>)
 8002572:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002660 <storeAnalogSensorBuffer+0x338>
 800257e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002582:	4b38      	ldr	r3, [pc, #224]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258c:	ee17 3a90 	vmov	r3, s15
 8002590:	b219      	sxth	r1, r3
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <storeAnalogSensorBuffer+0x364>)
 8002594:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 800259a:	8a9b      	ldrh	r3, [r3, #20]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 80025a6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <storeAnalogSensorBuffer+0x334>)
 80025b0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002660 <storeAnalogSensorBuffer+0x338>
 80025bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 3a90 	vmov	r3, s15
 80025ce:	b219      	sxth	r1, r3
 80025d0:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <storeAnalogSensorBuffer+0x368>)
 80025d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <storeAnalogSensorBuffer+0x32c>)
 80025d8:	8adb      	ldrh	r3, [r3, #22]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <storeAnalogSensorBuffer+0x330>)
 80025e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <storeAnalogSensorBuffer+0x334>)
 80025ee:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80025f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002660 <storeAnalogSensorBuffer+0x338>
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002608:	ee17 3a90 	vmov	r3, s15
 800260c:	b219      	sxth	r1, r3
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <storeAnalogSensorBuffer+0x36c>)
 8002610:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <storeAnalogSensorBuffer+0x370>)
 8002616:	885b      	ldrh	r3, [r3, #2]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <storeAnalogSensorBuffer+0x374>)
 8002622:	edd3 7a01 	vldr	s15, [r3, #4]
 8002626:	ee77 6a67 	vsub.f32	s13, s14, s15
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <storeAnalogSensorBuffer+0x378>)
 800262c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002634:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002660 <storeAnalogSensorBuffer+0x338>
 8002638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <storeAnalogSensorBuffer+0x33c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002646:	ee17 3a90 	vmov	r3, s15
 800264a:	b219      	sxth	r1, r3
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <storeAnalogSensorBuffer+0x37c>)
 800264e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002652:	e029      	b.n	80026a8 <storeAnalogSensorBuffer+0x380>
 8002654:	20000290 	.word	0x20000290
 8002658:	2001cca4 	.word	0x2001cca4
 800265c:	2001cd08 	.word	0x2001cd08
 8002660:	447a0000 	.word	0x447a0000
 8002664:	20000030 	.word	0x20000030
 8002668:	200002c0 	.word	0x200002c0
 800266c:	200002ac 	.word	0x200002ac
 8002670:	200002d4 	.word	0x200002d4
 8002674:	200002e8 	.word	0x200002e8
 8002678:	200002fc 	.word	0x200002fc
 800267c:	20000310 	.word	0x20000310
 8002680:	20000324 	.word	0x20000324
 8002684:	20000338 	.word	0x20000338
 8002688:	2000034c 	.word	0x2000034c
 800268c:	20000360 	.word	0x20000360
 8002690:	20000374 	.word	0x20000374
 8002694:	20000388 	.word	0x20000388
 8002698:	200002a8 	.word	0x200002a8
 800269c:	2001cc9c 	.word	0x2001cc9c
 80026a0:	2001ccdc 	.word	0x2001ccdc
 80026a4:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <storeAnalogSensorBuffer+0x3d4>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <storeAnalogSensorBuffer+0x3d8>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <storeAnalogSensorBuffer+0x3dc>)
 80026c0:	ed93 7a00 	vldr	s14, [r3]
 80026c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002708 <storeAnalogSensorBuffer+0x3e0>
 80026cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <storeAnalogSensorBuffer+0x3e4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026da:	ee17 3a90 	vmov	r3, s15
 80026de:	b219      	sxth	r1, r3
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <storeAnalogSensorBuffer+0x3e8>)
 80026e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <storeAnalogSensorBuffer+0x3e4>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <storeAnalogSensorBuffer+0x3e4>)
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	200002a8 	.word	0x200002a8
 8002700:	2001cc9c 	.word	0x2001cc9c
 8002704:	2001ccdc 	.word	0x2001ccdc
 8002708:	447a0000 	.word	0x447a0000
 800270c:	20000030 	.word	0x20000030
 8002710:	200003b0 	.word	0x200003b0

08002714 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800271a:	4bc9      	ldr	r3, [pc, #804]	; (8002a40 <updateAnalogSensor+0x32c>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002726:	4bc7      	ldr	r3, [pc, #796]	; (8002a44 <updateAnalogSensor+0x330>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002730:	4bc5      	ldr	r3, [pc, #788]	; (8002a48 <updateAnalogSensor+0x334>)
 8002732:	ed93 7a00 	vldr	s14, [r3]
 8002736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a4c <updateAnalogSensor+0x338>
 800273e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002746:	ee17 3a90 	vmov	r3, s15
 800274a:	b21a      	sxth	r2, r3
 800274c:	4bc0      	ldr	r3, [pc, #768]	; (8002a50 <updateAnalogSensor+0x33c>)
 800274e:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002750:	4bbb      	ldr	r3, [pc, #748]	; (8002a40 <updateAnalogSensor+0x32c>)
 8002752:	885b      	ldrh	r3, [r3, #2]
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275c:	4bb9      	ldr	r3, [pc, #740]	; (8002a44 <updateAnalogSensor+0x330>)
 800275e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002762:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002766:	4bb8      	ldr	r3, [pc, #736]	; (8002a48 <updateAnalogSensor+0x334>)
 8002768:	ed93 7a01 	vldr	s14, [r3, #4]
 800276c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002770:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a4c <updateAnalogSensor+0x338>
 8002774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277c:	ee17 3a90 	vmov	r3, s15
 8002780:	b21a      	sxth	r2, r3
 8002782:	4bb3      	ldr	r3, [pc, #716]	; (8002a50 <updateAnalogSensor+0x33c>)
 8002784:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8002786:	4bae      	ldr	r3, [pc, #696]	; (8002a40 <updateAnalogSensor+0x32c>)
 8002788:	889b      	ldrh	r3, [r3, #4]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002792:	4bac      	ldr	r3, [pc, #688]	; (8002a44 <updateAnalogSensor+0x330>)
 8002794:	edd3 7a02 	vldr	s15, [r3, #8]
 8002798:	ee77 6a67 	vsub.f32	s13, s14, s15
 800279c:	4baa      	ldr	r3, [pc, #680]	; (8002a48 <updateAnalogSensor+0x334>)
 800279e:	ed93 7a02 	vldr	s14, [r3, #8]
 80027a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a4c <updateAnalogSensor+0x338>
 80027aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b2:	ee17 3a90 	vmov	r3, s15
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	4ba5      	ldr	r3, [pc, #660]	; (8002a50 <updateAnalogSensor+0x33c>)
 80027ba:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027bc:	4ba0      	ldr	r3, [pc, #640]	; (8002a40 <updateAnalogSensor+0x32c>)
 80027be:	88db      	ldrh	r3, [r3, #6]
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c8:	4b9e      	ldr	r3, [pc, #632]	; (8002a44 <updateAnalogSensor+0x330>)
 80027ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027d2:	4b9d      	ldr	r3, [pc, #628]	; (8002a48 <updateAnalogSensor+0x334>)
 80027d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027dc:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a4c <updateAnalogSensor+0x338>
 80027e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e8:	ee17 3a90 	vmov	r3, s15
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <updateAnalogSensor+0x33c>)
 80027f0:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80027f2:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <updateAnalogSensor+0x32c>)
 80027f4:	891b      	ldrh	r3, [r3, #8]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fe:	4b91      	ldr	r3, [pc, #580]	; (8002a44 <updateAnalogSensor+0x330>)
 8002800:	edd3 7a04 	vldr	s15, [r3, #16]
 8002804:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002808:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <updateAnalogSensor+0x334>)
 800280a:	ed93 7a04 	vldr	s14, [r3, #16]
 800280e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002812:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a4c <updateAnalogSensor+0x338>
 8002816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281e:	ee17 3a90 	vmov	r3, s15
 8002822:	b21a      	sxth	r2, r3
 8002824:	4b8a      	ldr	r3, [pc, #552]	; (8002a50 <updateAnalogSensor+0x33c>)
 8002826:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002828:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <updateAnalogSensor+0x32c>)
 800282a:	895b      	ldrh	r3, [r3, #10]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	4b83      	ldr	r3, [pc, #524]	; (8002a44 <updateAnalogSensor+0x330>)
 8002836:	edd3 7a05 	vldr	s15, [r3, #20]
 800283a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <updateAnalogSensor+0x334>)
 8002840:	ed93 7a05 	vldr	s14, [r3, #20]
 8002844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002848:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a4c <updateAnalogSensor+0x338>
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002854:	ee17 3a90 	vmov	r3, s15
 8002858:	b21a      	sxth	r2, r3
 800285a:	4b7d      	ldr	r3, [pc, #500]	; (8002a50 <updateAnalogSensor+0x33c>)
 800285c:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <updateAnalogSensor+0x32c>)
 8002860:	899b      	ldrh	r3, [r3, #12]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <updateAnalogSensor+0x330>)
 800286c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002870:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002874:	4b74      	ldr	r3, [pc, #464]	; (8002a48 <updateAnalogSensor+0x334>)
 8002876:	ed93 7a06 	vldr	s14, [r3, #24]
 800287a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800287e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a4c <updateAnalogSensor+0x338>
 8002882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288a:	ee17 3a90 	vmov	r3, s15
 800288e:	b21a      	sxth	r2, r3
 8002890:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <updateAnalogSensor+0x33c>)
 8002892:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <updateAnalogSensor+0x32c>)
 8002896:	89db      	ldrh	r3, [r3, #14]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <updateAnalogSensor+0x330>)
 80028a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80028a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028aa:	4b67      	ldr	r3, [pc, #412]	; (8002a48 <updateAnalogSensor+0x334>)
 80028ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80028b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a4c <updateAnalogSensor+0x338>
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	ee17 3a90 	vmov	r3, s15
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <updateAnalogSensor+0x33c>)
 80028c8:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <updateAnalogSensor+0x32c>)
 80028cc:	8a1b      	ldrh	r3, [r3, #16]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <updateAnalogSensor+0x330>)
 80028d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80028dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <updateAnalogSensor+0x334>)
 80028e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80028e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ea:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a4c <updateAnalogSensor+0x338>
 80028ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f6:	ee17 3a90 	vmov	r3, s15
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <updateAnalogSensor+0x33c>)
 80028fe:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <updateAnalogSensor+0x32c>)
 8002902:	8a5b      	ldrh	r3, [r3, #18]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <updateAnalogSensor+0x330>)
 800290e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002912:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002916:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <updateAnalogSensor+0x334>)
 8002918:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800291c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002920:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a4c <updateAnalogSensor+0x338>
 8002924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292c:	ee17 3a90 	vmov	r3, s15
 8002930:	b21a      	sxth	r2, r3
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <updateAnalogSensor+0x33c>)
 8002934:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002936:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <updateAnalogSensor+0x32c>)
 8002938:	8a9b      	ldrh	r3, [r3, #20]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <updateAnalogSensor+0x330>)
 8002944:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002948:	ee77 6a67 	vsub.f32	s13, s14, s15
 800294c:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <updateAnalogSensor+0x334>)
 800294e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002956:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a4c <updateAnalogSensor+0x338>
 800295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002962:	ee17 3a90 	vmov	r3, s15
 8002966:	b21a      	sxth	r2, r3
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <updateAnalogSensor+0x33c>)
 800296a:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <updateAnalogSensor+0x32c>)
 800296e:	8adb      	ldrh	r3, [r3, #22]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002978:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <updateAnalogSensor+0x330>)
 800297a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800297e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <updateAnalogSensor+0x334>)
 8002984:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a4c <updateAnalogSensor+0x338>
 8002990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002998:	ee17 3a90 	vmov	r3, s15
 800299c:	b21a      	sxth	r2, r3
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <updateAnalogSensor+0x33c>)
 80029a0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <updateAnalogSensor+0x340>)
 80029a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <updateAnalogSensor+0x340>)
 80029ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <updateAnalogSensor+0x340>)
 80029b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <updateAnalogSensor+0x340>)
 80029bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <updateAnalogSensor+0x340>)
 80029c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <updateAnalogSensor+0x340>)
 80029cc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <updateAnalogSensor+0x340>)
 80029d4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <updateAnalogSensor+0x340>)
 80029dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <updateAnalogSensor+0x340>)
 80029e4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <updateAnalogSensor+0x340>)
 80029ec:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <updateAnalogSensor+0x344>)
 80029f4:	fb82 1203 	smull	r1, r2, r2, r3
 80029f8:	1092      	asrs	r2, r2, #2
 80029fa:	17db      	asrs	r3, r3, #31
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <updateAnalogSensor+0x348>)
 8002a02:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a16:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a1e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a26:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <updateAnalogSensor+0x34c>)
 8002a36:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	e012      	b.n	8002a64 <updateAnalogSensor+0x350>
 8002a3e:	bf00      	nop
 8002a40:	20000290 	.word	0x20000290
 8002a44:	2001cca4 	.word	0x2001cca4
 8002a48:	2001cd08 	.word	0x2001cd08
 8002a4c:	447a0000 	.word	0x447a0000
 8002a50:	2001cce4 	.word	0x2001cce4
 8002a54:	2000039c 	.word	0x2000039c
 8002a58:	66666667 	.word	0x66666667
 8002a5c:	2001cc88 	.word	0x2001cc88
 8002a60:	200003b0 	.word	0x200003b0
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <updateAnalogSensor+0x3d0>)
 8002a66:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <updateAnalogSensor+0x3d0>)
 8002a6e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <updateAnalogSensor+0x3d0>)
 8002a76:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <updateAnalogSensor+0x3d4>)
 8002a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a82:	1092      	asrs	r2, r2, #2
 8002a84:	17db      	asrs	r3, r3, #31
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <updateAnalogSensor+0x3d8>)
 8002a8c:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	e01a      	b.n	8002aca <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <updateAnalogSensor+0x3dc>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aa0:	db05      	blt.n	8002aae <updateAnalogSensor+0x39a>
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <updateAnalogSensor+0x3dc>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <updateAnalogSensor+0x3dc>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	dc04      	bgt.n	8002ac4 <updateAnalogSensor+0x3b0>
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <updateAnalogSensor+0x3dc>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0b      	cmp	r3, #11
 8002ace:	dde1      	ble.n	8002a94 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <updateAnalogSensor+0x3e0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]

}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	200003b0 	.word	0x200003b0
 8002ae8:	66666667 	.word	0x66666667
 8002aec:	2001cd00 	.word	0x2001cd00
 8002af0:	2001cce4 	.word	0x2001cce4
 8002af4:	20000030 	.word	0x20000030

08002af8 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0a0      	sub	sp, #128	; 0x80
 8002afc:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002afe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b02:	2230      	movs	r2, #48	; 0x30
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f009 f869 	bl	800bbde <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	2230      	movs	r2, #48	; 0x30
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f009 f862 	bl	800bbde <memset>
 8002b1a:	4bd8      	ldr	r3, [pc, #864]	; (8002e7c <sensorCalibration+0x384>)
 8002b1c:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b24:	e026      	b.n	8002b74 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b26:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b2a:	4ad5      	ldr	r2, [pc, #852]	; (8002e80 <sensorCalibration+0x388>)
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b36:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b3a:	4ad2      	ldr	r2, [pc, #840]	; (8002e84 <sensorCalibration+0x38c>)
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	4ad1      	ldr	r2, [pc, #836]	; (8002e88 <sensorCalibration+0x390>)
 8002b42:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b44:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b40      	subs	r3, #64	; 0x40
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b58:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b62:	4413      	add	r3, r2
 8002b64:	3b70      	subs	r3, #112	; 0x70
 8002b66:	4ac8      	ldr	r2, [pc, #800]	; (8002e88 <sensorCalibration+0x390>)
 8002b68:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b6a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b74:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b78:	2b0b      	cmp	r3, #11
 8002b7a:	d9d4      	bls.n	8002b26 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002b82:	e013      	b.n	8002bac <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002b84:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002b88:	4ac0      	ldr	r2, [pc, #768]	; (8002e8c <sensorCalibration+0x394>)
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002b94:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002b98:	4abd      	ldr	r2, [pc, #756]	; (8002e90 <sensorCalibration+0x398>)
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4aba      	ldr	r2, [pc, #744]	; (8002e88 <sensorCalibration+0x390>)
 8002ba0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ba2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002bac:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d9e7      	bls.n	8002b84 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002bb4:	e0f5      	b.n	8002da2 <sensorCalibration+0x2aa>

		setLED2('X');
 8002bb6:	2058      	movs	r0, #88	; 0x58
 8002bb8:	f7fe ff40 	bl	8001a3c <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002bc2:	e06e      	b.n	8002ca2 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002bc4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bc8:	4ab2      	ldr	r2, [pc, #712]	; (8002e94 <sensorCalibration+0x39c>)
 8002bca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bd2:	ee07 2a90 	vmov	s15, r2
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002be0:	4413      	add	r3, r2
 8002be2:	3b40      	subs	r3, #64	; 0x40
 8002be4:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002be8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bec:	4aa9      	ldr	r2, [pc, #676]	; (8002e94 <sensorCalibration+0x39c>)
 8002bee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bf2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bf6:	ee07 2a90 	vmov	s15, r2
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c04:	4413      	add	r3, r2
 8002c06:	3b70      	subs	r3, #112	; 0x70
 8002c08:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c0c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c16:	4413      	add	r3, r2
 8002c18:	3b40      	subs	r3, #64	; 0x40
 8002c1a:	ed93 7a00 	vldr	s14, [r3]
 8002c1e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c22:	4a97      	ldr	r2, [pc, #604]	; (8002e80 <sensorCalibration+0x388>)
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	dd0d      	ble.n	8002c52 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002c36:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c3a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c44:	440a      	add	r2, r1
 8002c46:	3a40      	subs	r2, #64	; 0x40
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	498d      	ldr	r1, [pc, #564]	; (8002e80 <sensorCalibration+0x388>)
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b70      	subs	r3, #112	; 0x70
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c68:	4a86      	ldr	r2, [pc, #536]	; (8002e84 <sensorCalibration+0x38c>)
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	d50d      	bpl.n	8002c98 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002c7c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c80:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c84:	0092      	lsls	r2, r2, #2
 8002c86:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c8a:	440a      	add	r2, r1
 8002c8c:	3a70      	subs	r2, #112	; 0x70
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	497c      	ldr	r1, [pc, #496]	; (8002e84 <sensorCalibration+0x38c>)
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002c98:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002ca2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ca6:	2b0b      	cmp	r3, #11
 8002ca8:	d98c      	bls.n	8002bc4 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002cb0:	e073      	b.n	8002d9a <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cb2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cb6:	4a78      	ldr	r2, [pc, #480]	; (8002e98 <sensorCalibration+0x3a0>)
 8002cb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cbc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cc0:	ee07 2a90 	vmov	s15, r2
 8002cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b78      	subs	r3, #120	; 0x78
 8002cd2:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cd6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cda:	4a6f      	ldr	r2, [pc, #444]	; (8002e98 <sensorCalibration+0x3a0>)
 8002cdc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ce0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ce4:	ee07 2a90 	vmov	s15, r2
 8002ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b80      	subs	r3, #128	; 0x80
 8002cf6:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002cfa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d04:	4413      	add	r3, r2
 8002d06:	3b78      	subs	r3, #120	; 0x78
 8002d08:	ed93 7a00 	vldr	s14, [r3]
 8002d0c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d10:	4a5e      	ldr	r2, [pc, #376]	; (8002e8c <sensorCalibration+0x394>)
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	dd10      	ble.n	8002d46 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002d24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d28:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <sensorCalibration+0x3a0>)
 8002d2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d2e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d32:	ee07 2a90 	vmov	s15, r2
 8002d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3a:	4a54      	ldr	r2, [pc, #336]	; (8002e8c <sensorCalibration+0x394>)
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	edc3 7a00 	vstr	s15, [r3]
 8002d44:	e024      	b.n	8002d90 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d46:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d50:	4413      	add	r3, r2
 8002d52:	3b80      	subs	r3, #128	; 0x80
 8002d54:	ed93 7a00 	vldr	s14, [r3]
 8002d58:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d5c:	4a4c      	ldr	r2, [pc, #304]	; (8002e90 <sensorCalibration+0x398>)
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d50f      	bpl.n	8002d90 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002d70:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d74:	4a48      	ldr	r2, [pc, #288]	; (8002e98 <sensorCalibration+0x3a0>)
 8002d76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d7a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d7e:	ee07 2a90 	vmov	s15, r2
 8002d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d86:	4a42      	ldr	r2, [pc, #264]	; (8002e90 <sensorCalibration+0x398>)
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d90:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d94:	3301      	adds	r3, #1
 8002d96:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002d9a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d987      	bls.n	8002cb2 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002da2:	204c      	movs	r0, #76	; 0x4c
 8002da4:	f003 fa7e 	bl	80062a4 <getSwitchStatus>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	f43f af03 	beq.w	8002bb6 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002db6:	e01b      	b.n	8002df0 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002db8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dbc:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <sensorCalibration+0x388>)
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	ed93 7a00 	vldr	s14, [r3]
 8002dc6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dca:	4a2e      	ldr	r2, [pc, #184]	; (8002e84 <sensorCalibration+0x38c>)
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <sensorCalibration+0x3a4>)
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002de6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dea:	3301      	adds	r3, #1
 8002dec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002df0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002df4:	2b0b      	cmp	r3, #11
 8002df6:	d9df      	bls.n	8002db8 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002dfe:	e010      	b.n	8002e22 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002e00:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e04:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e08:	491e      	ldr	r1, [pc, #120]	; (8002e84 <sensorCalibration+0x38c>)
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	440a      	add	r2, r1
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	4923      	ldr	r1, [pc, #140]	; (8002ea0 <sensorCalibration+0x3a8>)
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e18:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e22:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e26:	2b0b      	cmp	r3, #11
 8002e28:	d9ea      	bls.n	8002e00 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e30:	e01b      	b.n	8002e6a <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e32:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <sensorCalibration+0x394>)
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <sensorCalibration+0x398>)
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <sensorCalibration+0x3ac>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e60:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e64:	3301      	adds	r3, #1
 8002e66:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e6a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d9df      	bls.n	8002e32 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e78:	e027      	b.n	8002eca <sensorCalibration+0x3d2>
 8002e7a:	bf00      	nop
 8002e7c:	447a0000 	.word	0x447a0000
 8002e80:	2001ce68 	.word	0x2001ce68
 8002e84:	20000000 	.word	0x20000000
 8002e88:	44bb8000 	.word	0x44bb8000
 8002e8c:	2001ce18 	.word	0x2001ce18
 8002e90:	2001ce98 	.word	0x2001ce98
 8002e94:	20000290 	.word	0x20000290
 8002e98:	200002a8 	.word	0x200002a8
 8002e9c:	2001cd08 	.word	0x2001cd08
 8002ea0:	2001cca4 	.word	0x2001cca4
 8002ea4:	2001ccdc 	.word	0x2001ccdc
		side_offset_values[i] = side_min_values[i];
 8002ea8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002eac:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002eb0:	490a      	ldr	r1, [pc, #40]	; (8002edc <sensorCalibration+0x3e4>)
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	440a      	add	r2, r1
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <sensorCalibration+0x3e8>)
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ec0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002eca:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d9ea      	bls.n	8002ea8 <sensorCalibration+0x3b0>
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3780      	adds	r7, #128	; 0x80
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2001ce98 	.word	0x2001ce98
 8002ee0:	2001cc9c 	.word	0x2001cc9c

08002ee4 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <initLog+0x60>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <initLog+0x64>)
 8002eee:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <initLog+0x68>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <initLog+0x6c>)
 8002ef6:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <initLog+0x70>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <initLog+0x74>)
 8002efe:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <initLog+0x78>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <initLog+0x7c>)
 8002f06:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <initLog+0x80>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <initLog+0x84>)
 8002f0e:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <initLog+0x60>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <initLog+0x88>)
 8002f16:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <initLog+0x68>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <initLog+0x8c>)
 8002f1e:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <initLog+0x70>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <initLog+0x90>)
 8002f26:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <initLog+0x78>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <initLog+0x94>)
 8002f2e:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <initLog+0x80>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <initLog+0x98>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	080100c8 	.word	0x080100c8
 8002f48:	2001cc84 	.word	0x2001cc84
 8002f4c:	080100cc 	.word	0x080100cc
 8002f50:	2001ccd8 	.word	0x2001ccd8
 8002f54:	080100d0 	.word	0x080100d0
 8002f58:	2001cc94 	.word	0x2001cc94
 8002f5c:	080100d4 	.word	0x080100d4
 8002f60:	2001cc80 	.word	0x2001cc80
 8002f64:	080100d8 	.word	0x080100d8
 8002f68:	2001cc90 	.word	0x2001cc90
 8002f6c:	2001cc8c 	.word	0x2001cc8c
 8002f70:	2001cc98 	.word	0x2001cc98
 8002f74:	2001cd04 	.word	0x2001cd04
 8002f78:	2001ccfc 	.word	0x2001ccfc
 8002f7c:	2001ccd4 	.word	0x2001ccd4

08002f80 <saveDistance>:

void saveDistance(float distance){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <saveDistance+0x2c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fb16 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <saveDistance+0x2c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4a03      	ldr	r2, [pc, #12]	; (8002fac <saveDistance+0x2c>)
 8002fa0:	6013      	str	r3, [r2, #0]
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2001cc84 	.word	0x2001cc84

08002fb0 <saveTheta>:

void saveTheta(float theta){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <saveTheta+0x2c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fafe 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <saveTheta+0x2c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <saveTheta+0x2c>)
 8002fd0:	6013      	str	r3, [r2, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2001ccd8 	.word	0x2001ccd8

08002fe0 <saveCross>:

void saveCross(float cross){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <saveCross+0x2c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fae6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <saveCross+0x2c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	4a03      	ldr	r2, [pc, #12]	; (800300c <saveCross+0x2c>)
 8003000:	6013      	str	r3, [r2, #0]
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2001cc94 	.word	0x2001cc94

08003010 <saveSide>:

void saveSide(float side){
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <saveSide+0x2c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe face 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <saveSide+0x2c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	4a03      	ldr	r2, [pc, #12]	; (800303c <saveSide+0x2c>)
 8003030:	6013      	str	r3, [r2, #0]
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2001cc80 	.word	0x2001cc80

08003040 <saveDebug>:

void saveDebug(float value){
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <saveDebug+0x2c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fab6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <saveDebug+0x2c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3304      	adds	r3, #4
 800305e:	4a03      	ldr	r2, [pc, #12]	; (800306c <saveDebug+0x2c>)
 8003060:	6013      	str	r3, [r2, #0]
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2001cc90 	.word	0x2001cc90

08003070 <ereaseLog>:


void ereaseLog(){
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003074:	2007      	movs	r0, #7
 8003076:	f7fe fa85 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 800307a:	2008      	movs	r0, #8
 800307c:	f7fe fa82 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8003080:	2009      	movs	r0, #9
 8003082:	f7fe fa7f 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8003086:	200a      	movs	r0, #10
 8003088:	f7fe fa7c 	bl	8001584 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 800308c:	200b      	movs	r0, #11
 800308e:	f7fe fa79 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <ereaseLog+0x50>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <ereaseLog+0x54>)
 8003098:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <ereaseLog+0x58>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <ereaseLog+0x5c>)
 80030a0:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <ereaseLog+0x60>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <ereaseLog+0x64>)
 80030a8:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <ereaseLog+0x68>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <ereaseLog+0x6c>)
 80030b0:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <ereaseLog+0x70>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <ereaseLog+0x74>)
 80030b8:	6013      	str	r3, [r2, #0]
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	080100c8 	.word	0x080100c8
 80030c4:	2001cc84 	.word	0x2001cc84
 80030c8:	080100cc 	.word	0x080100cc
 80030cc:	2001ccd8 	.word	0x2001ccd8
 80030d0:	080100d0 	.word	0x080100d0
 80030d4:	2001cc94 	.word	0x2001cc94
 80030d8:	080100d4 	.word	0x080100d4
 80030dc:	2001cc80 	.word	0x2001cc80
 80030e0:	080100d8 	.word	0x080100d8
 80030e4:	2001cc90 	.word	0x2001cc90

080030e8 <ereaseDebugLog>:

void ereaseDebugLog(){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80030ec:	200b      	movs	r0, #11
 80030ee:	f7fe fa49 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 80030f2:	4b03      	ldr	r3, [pc, #12]	; (8003100 <ereaseDebugLog+0x18>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a03      	ldr	r2, [pc, #12]	; (8003104 <ereaseDebugLog+0x1c>)
 80030f8:	6013      	str	r3, [r2, #0]
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	080100d8 	.word	0x080100d8
 8003104:	2001cc90 	.word	0x2001cc90

08003108 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <getDistanceLogSize+0x14>)
 800310e:	881b      	ldrh	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20016e44 	.word	0x20016e44

08003120 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <getCrossLogSize+0x14>)
 8003126:	881b      	ldrh	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20016e48 	.word	0x20016e48

08003138 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	return log_side_cnt;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <getSideLogSize+0x14>)
 800313e:	881b      	ldrh	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20016e4a 	.word	0x20016e4a

08003150 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <getDebugLogSize+0x14>)
 8003156:	881b      	ldrh	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20016e4c 	.word	0x20016e4c

08003168 <loadDistance>:


void loadDistance(){
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <loadDistance+0x6c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <loadDistance+0x70>)
 8003178:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <loadDistance+0x74>)
 800317c:	2200      	movs	r2, #0
 800317e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <loadDistance+0x70>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4915      	ldr	r1, [pc, #84]	; (80031e0 <loadDistance+0x78>)
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <loadDistance+0x78>)
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eef4 7a67 	vcmp.f32	s15, s15
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	d60e      	bvs.n	80031c6 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <loadDistance+0x74>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <loadDistance+0x74>)
 80031b2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <loadDistance+0x70>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <loadDistance+0x70>)
 80031bc:	6013      	str	r3, [r2, #0]
		i++;
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	3301      	adds	r3, #1
 80031c2:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 80031c4:	e7dc      	b.n	8003180 <loadDistance+0x18>
			break;
 80031c6:	bf00      	nop
	}
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	080100c8 	.word	0x080100c8
 80031d8:	2001cc8c 	.word	0x2001cc8c
 80031dc:	20016e44 	.word	0x20016e44
 80031e0:	2000c264 	.word	0x2000c264

080031e4 <loadTheta>:

void loadTheta(){
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <loadTheta+0x6c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <loadTheta+0x70>)
 80031f4:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <loadTheta+0x74>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 80031fc:	4b15      	ldr	r3, [pc, #84]	; (8003254 <loadTheta+0x70>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	4915      	ldr	r1, [pc, #84]	; (800325c <loadTheta+0x78>)
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4a12      	ldr	r2, [pc, #72]	; (800325c <loadTheta+0x78>)
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef4 7a67 	vcmp.f32	s15, s15
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d60e      	bvs.n	8003242 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <loadTheta+0x74>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <loadTheta+0x74>)
 800322e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <loadTheta+0x70>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3304      	adds	r3, #4
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <loadTheta+0x70>)
 8003238:	6013      	str	r3, [r2, #0]
		i++;
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	3301      	adds	r3, #1
 800323e:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003240:	e7dc      	b.n	80031fc <loadTheta+0x18>
			break;
 8003242:	bf00      	nop
	}
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	080100cc 	.word	0x080100cc
 8003254:	2001cc98 	.word	0x2001cc98
 8003258:	20016e46 	.word	0x20016e46
 800325c:	20011854 	.word	0x20011854

08003260 <loadCross>:

void loadCross(){
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800326a:	4b18      	ldr	r3, [pc, #96]	; (80032cc <loadCross+0x6c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <loadCross+0x70>)
 8003270:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <loadCross+0x74>)
 8003274:	2200      	movs	r2, #0
 8003276:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <loadCross+0x70>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	4915      	ldr	r1, [pc, #84]	; (80032d8 <loadCross+0x78>)
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <loadCross+0x78>)
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eef4 7a67 	vcmp.f32	s15, s15
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d60e      	bvs.n	80032be <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <loadCross+0x74>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <loadCross+0x74>)
 80032aa:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <loadCross+0x70>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <loadCross+0x70>)
 80032b4:	6013      	str	r3, [r2, #0]
		i++;
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	3301      	adds	r3, #1
 80032ba:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 80032bc:	e7dc      	b.n	8003278 <loadCross+0x18>
			break;
 80032be:	bf00      	nop
	}
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	080100d0 	.word	0x080100d0
 80032d0:	2001cd04 	.word	0x2001cd04
 80032d4:	20016e48 	.word	0x20016e48
 80032d8:	200003c4 	.word	0x200003c4

080032dc <loadSide>:

void loadSide(){
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <loadSide+0x6c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <loadSide+0x70>)
 80032ec:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <loadSide+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 80032f4:	4b15      	ldr	r3, [pc, #84]	; (800334c <loadSide+0x70>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4915      	ldr	r1, [pc, #84]	; (8003354 <loadSide+0x78>)
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <loadSide+0x78>)
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	eef4 7a67 	vcmp.f32	s15, s15
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	d60e      	bvs.n	800333a <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <loadSide+0x74>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <loadSide+0x74>)
 8003326:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <loadSide+0x70>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3304      	adds	r3, #4
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <loadSide+0x70>)
 8003330:	6013      	str	r3, [r2, #0]
		i++;
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	3301      	adds	r3, #1
 8003336:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003338:	e7dc      	b.n	80032f4 <loadSide+0x18>
			break;
 800333a:	bf00      	nop
	}
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	080100d4 	.word	0x080100d4
 800334c:	2001ccfc 	.word	0x2001ccfc
 8003350:	20016e4a 	.word	0x20016e4a
 8003354:	20000554 	.word	0x20000554

08003358 <loadDebug>:

void loadDebug(){
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <loadDebug+0x6c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <loadDebug+0x70>)
 8003368:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <loadDebug+0x74>)
 800336c:	2200      	movs	r2, #0
 800336e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <loadDebug+0x70>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4915      	ldr	r1, [pc, #84]	; (80033d0 <loadDebug+0x78>)
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <loadDebug+0x78>)
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	eef4 7a67 	vcmp.f32	s15, s15
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	d60e      	bvs.n	80033b6 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <loadDebug+0x74>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <loadDebug+0x74>)
 80033a2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <loadDebug+0x70>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <loadDebug+0x70>)
 80033ac:	6013      	str	r3, [r2, #0]
		i++;
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	3301      	adds	r3, #1
 80033b2:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80033b4:	e7dc      	b.n	8003370 <loadDebug+0x18>
			break;
 80033b6:	bf00      	nop
	}
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	080100d8 	.word	0x080100d8
 80033c8:	2001ccd4 	.word	0x2001ccd4
 80033cc:	20016e4c 	.word	0x20016e4c
 80033d0:	200006e4 	.word	0x200006e4

080033d4 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
	return log_distance;
 80033d8:	4b02      	ldr	r3, [pc, #8]	; (80033e4 <getDistanceArrayPointer+0x10>)
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	2000c264 	.word	0x2000c264

080033e8 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
	return log_theta;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <getThetaArrayPointer+0x10>)
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	20011854 	.word	0x20011854

080033fc <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <getDistanceLog+0x28>)
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	ee07 3a90 	vmov	s15, r3
}
 8003414:	eeb0 0a67 	vmov.f32	s0, s15
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000c264 	.word	0x2000c264

08003428 <getThetaLog>:

float getThetaLog(uint16_t idx){
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
	return log_theta[idx];
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <getThetaLog+0x28>)
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	ee07 3a90 	vmov	s15, r3
}
 8003440:	eeb0 0a67 	vmov.f32	s0, s15
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20011854 	.word	0x20011854

08003454 <getCrossLog>:

float getCrossLog(uint16_t idx){
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <getCrossLog+0x28>)
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	ee07 3a90 	vmov	s15, r3
}
 800346c:	eeb0 0a67 	vmov.f32	s0, s15
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	200003c4 	.word	0x200003c4

08003480 <getSideLog>:

float getSideLog(uint16_t idx){
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <getSideLog+0x28>)
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	ee07 3a90 	vmov	s15, r3
}
 8003498:	eeb0 0a67 	vmov.f32	s0, s15
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000554 	.word	0x20000554

080034ac <getDebugLog>:

float getDebugLog(uint16_t idx){
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	4a06      	ldr	r2, [pc, #24]	; (80034d4 <getDebugLog+0x28>)
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	ee07 3a90 	vmov	s15, r3
}
 80034c4:	eeb0 0a67 	vmov.f32	s0, s15
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	200006e4 	.word	0x200006e4

080034d8 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80034ec:	2200      	movs	r2, #0
 80034ee:	2104      	movs	r1, #4
 80034f0:	480d      	ldr	r0, [pc, #52]	; (8003528 <read_byte+0x50>)
 80034f2:	f004 fc89 	bl	8007e08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80034f6:	f107 010f 	add.w	r1, r7, #15
 80034fa:	2364      	movs	r3, #100	; 0x64
 80034fc:	2201      	movs	r2, #1
 80034fe:	480b      	ldr	r0, [pc, #44]	; (800352c <read_byte+0x54>)
 8003500:	f005 fa74 	bl	80089ec <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003504:	f107 010e 	add.w	r1, r7, #14
 8003508:	2364      	movs	r3, #100	; 0x64
 800350a:	2201      	movs	r2, #1
 800350c:	4807      	ldr	r0, [pc, #28]	; (800352c <read_byte+0x54>)
 800350e:	f005 fba1 	bl	8008c54 <HAL_SPI_Receive>
		CS_SET;
 8003512:	2201      	movs	r2, #1
 8003514:	2104      	movs	r1, #4
 8003516:	4804      	ldr	r0, [pc, #16]	; (8003528 <read_byte+0x50>)
 8003518:	f004 fc76 	bl	8007e08 <HAL_GPIO_WritePin>

	return val;
 800351c:	7bbb      	ldrb	r3, [r7, #14]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40020c00 	.word	0x40020c00
 800352c:	2001cf6c 	.word	0x2001cf6c

08003530 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	460a      	mov	r2, r1
 800353a:	71fb      	strb	r3, [r7, #7]
 800353c:	4613      	mov	r3, r2
 800353e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003546:	b2db      	uxtb	r3, r3
 8003548:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800354a:	2200      	movs	r2, #0
 800354c:	2104      	movs	r1, #4
 800354e:	480c      	ldr	r0, [pc, #48]	; (8003580 <write_byte+0x50>)
 8003550:	f004 fc5a 	bl	8007e08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003554:	f107 010f 	add.w	r1, r7, #15
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	2201      	movs	r2, #1
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <write_byte+0x54>)
 800355e:	f005 fa45 	bl	80089ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003562:	1db9      	adds	r1, r7, #6
 8003564:	2364      	movs	r3, #100	; 0x64
 8003566:	2201      	movs	r2, #1
 8003568:	4806      	ldr	r0, [pc, #24]	; (8003584 <write_byte+0x54>)
 800356a:	f005 fb73 	bl	8008c54 <HAL_SPI_Receive>
	CS_SET;
 800356e:	2201      	movs	r2, #1
 8003570:	2104      	movs	r1, #4
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <write_byte+0x50>)
 8003574:	f004 fc48 	bl	8007e08 <HAL_GPIO_WritePin>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40020c00 	.word	0x40020c00
 8003584:	2001cf6c 	.word	0x2001cf6c

08003588 <IMU_init>:

uint8_t IMU_init() {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 8003592:	2075      	movs	r0, #117	; 0x75
 8003594:	f7ff ffa0 	bl	80034d8 <read_byte>
 8003598:	4603      	mov	r3, r0
 800359a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 800359c:	79bb      	ldrb	r3, [r7, #6]
 800359e:	2b70      	cmp	r3, #112	; 0x70
 80035a0:	d110      	bne.n	80035c4 <IMU_init+0x3c>
		ret = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 80035a6:	2100      	movs	r1, #0
 80035a8:	206b      	movs	r0, #107	; 0x6b
 80035aa:	f7ff ffc1 	bl	8003530 <write_byte>
		HAL_Delay(100);
 80035ae:	2064      	movs	r0, #100	; 0x64
 80035b0:	f002 fff8 	bl	80065a4 <HAL_Delay>
		write_byte(0x1A, 0x00);
 80035b4:	2100      	movs	r1, #0
 80035b6:	201a      	movs	r0, #26
 80035b8:	f7ff ffba 	bl	8003530 <write_byte>
		write_byte(0x1B, 0x18);
 80035bc:	2118      	movs	r1, #24
 80035be:	201b      	movs	r0, #27
 80035c0:	f7ff ffb6 	bl	8003530 <write_byte>
	}
	return ret;
 80035c4:	79fb      	ldrb	r3, [r7, #7]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <read_gyro_data>:

void read_gyro_data() {
 80035d0:	b598      	push	{r3, r4, r7, lr}
 80035d2:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80035d4:	2047      	movs	r0, #71	; 0x47
 80035d6:	f7ff ff7f 	bl	80034d8 <read_byte>
 80035da:	4603      	mov	r3, r0
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	b21c      	sxth	r4, r3
 80035e0:	2048      	movs	r0, #72	; 0x48
 80035e2:	f7ff ff79 	bl	80034d8 <read_byte>
 80035e6:	4603      	mov	r3, r0
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	4323      	orrs	r3, r4
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <read_gyro_data+0x28>)
 80035f0:	801a      	strh	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	bd98      	pop	{r3, r4, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2001cea0 	.word	0x2001cea0
 80035fc:	00000000 	.word	0x00000000

08003600 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 8003606:	4b40      	ldr	r3, [pc, #256]	; (8003708 <calculateVelocityControlFlip+0x108>)
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	4b40      	ldr	r3, [pc, #256]	; (800370c <calculateVelocityControlFlip+0x10c>)
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800361a:	f000 f8d9 	bl	80037d0 <getCurrentVelocity>
 800361e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <calculateVelocityControlFlip+0x110>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d163      	bne.n	80036f2 <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 800362a:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <calculateVelocityControlFlip+0x114>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d106      	bne.n	8003640 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003632:	4b39      	ldr	r3, [pc, #228]	; (8003718 <calculateVelocityControlFlip+0x118>)
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <calculateVelocityControlFlip+0x114>)
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003640:	f000 f894 	bl	800376c <setvariablespeed>
 8003644:	eeb0 7a40 	vmov.f32	s14, s0
 8003648:	edd7 7a03 	vldr	s15, [r7, #12]
 800364c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003650:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003654:	ed97 7a07 	vldr	s14, [r7, #28]
 8003658:	edd7 7a04 	vldr	s15, [r7, #16]
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <calculateVelocityControlFlip+0x118>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc ff6d 	bl	8000548 <__aeabi_f2d>
 800366e:	4604      	mov	r4, r0
 8003670:	460d      	mov	r5, r1
 8003672:	ed97 7a06 	vldr	s14, [r7, #24]
 8003676:	edd7 7a04 	vldr	s15, [r7, #16]
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	ee17 0a90 	vmov	r0, s15
 8003682:	f7fc ff61 	bl	8000548 <__aeabi_f2d>
 8003686:	a31e      	add	r3, pc, #120	; (adr r3, 8003700 <calculateVelocityControlFlip+0x100>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ffb4 	bl	80005f8 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4620      	mov	r0, r4
 8003696:	4629      	mov	r1, r5
 8003698:	f7fc fdf8 	bl	800028c <__adddf3>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	4618      	mov	r0, r3
 80036a2:	4621      	mov	r1, r4
 80036a4:	f7fd faa0 	bl	8000be8 <__aeabi_d2f>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <calculateVelocityControlFlip+0x118>)
 80036ac:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <calculateVelocityControlFlip+0x118>)
 80036b0:	ed93 7a00 	vldr	s14, [r3]
 80036b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <calculateVelocityControlFlip+0x11c>)
 80036be:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <calculateVelocityControlFlip+0x120>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <calculateVelocityControlFlip+0x118>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <calculateVelocityControlFlip+0x124>)
 80036ce:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <calculateVelocityControlFlip+0x118>)
 80036d2:	ed93 7a00 	vldr	s14, [r3]
 80036d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036de:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <calculateVelocityControlFlip+0x128>)
 80036e8:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80036ec:	4a0f      	ldr	r2, [pc, #60]	; (800372c <calculateVelocityControlFlip+0x12c>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6013      	str	r3, [r2, #0]

	}

}
 80036f2:	bf00      	nop
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bdb0      	pop	{r4, r5, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w
 8003700:	d2f1a9fc 	.word	0xd2f1a9fc
 8003704:	3f50624d 	.word	0x3f50624d
 8003708:	44bb8000 	.word	0x44bb8000
 800370c:	469c4000 	.word	0x469c4000
 8003710:	20016e4e 	.word	0x20016e4e
 8003714:	20016e4f 	.word	0x20016e4f
 8003718:	20016e5c 	.word	0x20016e5c
 800371c:	2001ceac 	.word	0x2001ceac
 8003720:	2001cebc 	.word	0x2001cebc
 8003724:	2001ceb4 	.word	0x2001ceb4
 8003728:	20016e50 	.word	0x20016e50
 800372c:	20016e60 	.word	0x20016e60

08003730 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <getVelocityControlTerm+0x18>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	ee07 3a90 	vmov	s15, r3
}
 800373c:	eeb0 0a67 	vmov.f32	s0, s15
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20016e50 	.word	0x20016e50

0800374c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <setTargetVelocity+0x1c>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20016e54 	.word	0x20016e54

0800376c <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003770:	f7fd fe92 	bl	8001498 <getspeedcount>
 8003774:	eeb0 7a40 	vmov.f32	s14, s0
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <setvariablespeed+0x5c>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	db04      	blt.n	8003792 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <setvariablespeed+0x5c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <setvariablespeed+0x60>)
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e012      	b.n	80037b8 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003792:	f7fd fe81 	bl	8001498 <getspeedcount>
 8003796:	eeb0 7a40 	vmov.f32	s14, s0
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <setvariablespeed+0x5c>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	d506      	bpl.n	80037b8 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 80037aa:	f7fd fe75 	bl	8001498 <getspeedcount>
 80037ae:	eef0 7a40 	vmov.f32	s15, s0
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <setvariablespeed+0x60>)
 80037b4:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <setvariablespeed+0x60>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	ee07 3a90 	vmov	s15, r3
}
 80037c0:	eeb0 0a67 	vmov.f32	s0, s15
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20016e54 	.word	0x20016e54
 80037cc:	20016e58 	.word	0x20016e58

080037d0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	80fb      	strh	r3, [r7, #6]
 80037da:	2300      	movs	r3, #0
 80037dc:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80037de:	1d3a      	adds	r2, r7, #4
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fd75 	bl	80012d4 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80037ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	0fda      	lsrs	r2, r3, #31
 80037f8:	4413      	add	r3, r2
 80037fa:	105b      	asrs	r3, r3, #1
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003804:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7fc fe9d 	bl	8000548 <__aeabi_f2d>
 800380e:	a30d      	add	r3, pc, #52	; (adr r3, 8003844 <getCurrentVelocity+0x74>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f7fc fef0 	bl	80005f8 <__aeabi_dmul>
 8003818:	4603      	mov	r3, r0
 800381a:	460c      	mov	r4, r1
 800381c:	4618      	mov	r0, r3
 800381e:	4621      	mov	r1, r4
 8003820:	f7fd f9e2 	bl	8000be8 <__aeabi_d2f>
 8003824:	4603      	mov	r3, r0
 8003826:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003828:	4a05      	ldr	r2, [pc, #20]	; (8003840 <getCurrentVelocity+0x70>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	ee07 3a90 	vmov	s15, r3
}
 8003834:	eeb0 0a67 	vmov.f32	s0, s15
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}
 800383e:	bf00      	nop
 8003840:	2001ceb0 	.word	0x2001ceb0
 8003844:	2df331e5 	.word	0x2df331e5
 8003848:	3f878fcc 	.word	0x3f878fcc

0800384c <getTargetVelocity>:

float getTargetVelocity()
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	return target_velocity;
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <getTargetVelocity+0x18>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	ee07 3a90 	vmov	s15, r3
}
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	20016e54 	.word	0x20016e54

08003868 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <startVelocityControl+0x1c>)
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <startVelocityControl+0x20>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20016e4e 	.word	0x20016e4e
 8003888:	20016e4f 	.word	0x20016e4f

0800388c <stopVelocityControl>:

void stopVelocityControl(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <stopVelocityControl+0x14>)
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20016e4e 	.word	0x20016e4e

080038a4 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <setClearFlagOfVelocityControlI+0x14>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20016e4f 	.word	0x20016e4f

080038bc <CreateXYcoordinates>:

static float target_X_coordinate;
static float target_Y_coordinate;

void CreateXYcoordinates()
{
 80038bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038c0:	b08a      	sub	sp, #40	; 0x28
 80038c2:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80038c4:	f7ff fd86 	bl	80033d4 <getDistanceArrayPointer>
 80038c8:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80038ca:	f7ff fd8d 	bl	80033e8 <getThetaArrayPointer>
 80038ce:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 80038e2:	f7ff fc11 	bl	8003108 <getDistanceLogSize>
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 80038ea:	2300      	movs	r3, #0
 80038ec:	82fb      	strh	r3, [r7, #22]
 80038ee:	e08f      	b.n	8003a10 <CreateXYcoordinates+0x154>
		temp_distance = p_distance[i];
 80038f0:	8afb      	ldrh	r3, [r7, #22]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 80038fc:	8afb      	ldrh	r3, [r7, #22]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 8003908:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800390c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d101      	bne.n	800391a <CreateXYcoordinates+0x5e>
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <CreateXYcoordinates+0x168>)
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 800391a:	6a38      	ldr	r0, [r7, #32]
 800391c:	f7fc fe14 	bl	8000548 <__aeabi_f2d>
 8003920:	4604      	mov	r4, r0
 8003922:	460d      	mov	r5, r1
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fc fe0f 	bl	8000548 <__aeabi_f2d>
 800392a:	4680      	mov	r8, r0
 800392c:	4689      	mov	r9, r1
 800392e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003932:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003936:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800393a:	edd7 7a06 	vldr	s15, [r7, #24]
 800393e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003942:	ee17 0a90 	vmov	r0, s15
 8003946:	f7fc fdff 	bl	8000548 <__aeabi_f2d>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	ec43 2b10 	vmov	d0, r2, r3
 8003952:	f007 f8b9 	bl	800aac8 <cos>
 8003956:	ec53 2b10 	vmov	r2, r3, d0
 800395a:	4640      	mov	r0, r8
 800395c:	4649      	mov	r1, r9
 800395e:	f7fc fe4b 	bl	80005f8 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	f7fc fc8f 	bl	800028c <__adddf3>
 800396e:	4603      	mov	r3, r0
 8003970:	460c      	mov	r4, r1
 8003972:	4618      	mov	r0, r3
 8003974:	4621      	mov	r1, r4
 8003976:	f7fd f937 	bl	8000be8 <__aeabi_d2f>
 800397a:	4603      	mov	r3, r0
 800397c:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 800397e:	69f8      	ldr	r0, [r7, #28]
 8003980:	f7fc fde2 	bl	8000548 <__aeabi_f2d>
 8003984:	4604      	mov	r4, r0
 8003986:	460d      	mov	r5, r1
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fc fddd 	bl	8000548 <__aeabi_f2d>
 800398e:	4680      	mov	r8, r0
 8003990:	4689      	mov	r9, r1
 8003992:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003996:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800399a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800399e:	edd7 7a06 	vldr	s15, [r7, #24]
 80039a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a6:	ee17 0a90 	vmov	r0, s15
 80039aa:	f7fc fdcd 	bl	8000548 <__aeabi_f2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	ec43 2b10 	vmov	d0, r2, r3
 80039b6:	f007 f8cb 	bl	800ab50 <sin>
 80039ba:	ec53 2b10 	vmov	r2, r3, d0
 80039be:	4640      	mov	r0, r8
 80039c0:	4649      	mov	r1, r9
 80039c2:	f7fc fe19 	bl	80005f8 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4620      	mov	r0, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	f7fc fc5d 	bl	800028c <__adddf3>
 80039d2:	4603      	mov	r3, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	4618      	mov	r0, r3
 80039d8:	4621      	mov	r1, r4
 80039da:	f7fd f905 	bl	8000be8 <__aeabi_d2f>
 80039de:	4603      	mov	r3, r0
 80039e0:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 80039e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80039e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ee:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <CreateXYcoordinates+0x16c>)
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 80039fe:	8afb      	ldrh	r3, [r7, #22]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <CreateXYcoordinates+0x170>)
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < log_size; i++){
 8003a0a:	8afb      	ldrh	r3, [r7, #22]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	82fb      	strh	r3, [r7, #22]
 8003a10:	8afa      	ldrh	r2, [r7, #22]
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	f4ff af6b 	bcc.w	80038f0 <CreateXYcoordinates+0x34>

		//saveDebug(X_table[i]);//X_tableに値が入っているか確認済み
	    //saveDebug(Y_table[i]);

	}
}
 8003a1a:	bf00      	nop
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a24:	3727c5ac 	.word	0x3727c5ac
 8003a28:	20016e64 	.word	0x20016e64
 8003a2c:	20018da4 	.word	0x20018da4

08003a30 <updateTargetpoint>:

	return y;
}

void updateTargetpoint()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
	if(getTargetUpdateflag() == true){
 8003a34:	f002 f80c 	bl	8005a50 <getTargetUpdateflag>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d064      	beq.n	8003b08 <updateTargetpoint+0xd8>
		if(getTotalDistance() >= ref_XYdistance){
 8003a3e:	f7fd fc63 	bl	8001308 <getTotalDistance>
 8003a42:	eeb0 7a40 	vmov.f32	s14, s0
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <updateTargetpoint+0xdc>)
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	db17      	blt.n	8003a86 <updateTargetpoint+0x56>
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <updateTargetpoint+0xe0>)
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fcce 	bl	80033fc <getDistanceLog>
 8003a60:	eeb0 7a40 	vmov.f32	s14, s0
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <updateTargetpoint+0xdc>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <updateTargetpoint+0xdc>)
 8003a70:	edc3 7a00 	vstr	s15, [r3]
			targetpoint_table_idx++;
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <updateTargetpoint+0xe0>)
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <updateTargetpoint+0xe0>)
 8003a7e:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003a80:	f7fd fcfa 	bl	8001478 <clearDistance30mm>
 8003a84:	e021      	b.n	8003aca <updateTargetpoint+0x9a>
		}else if(getDistance30mm() >= 30){
 8003a86:	f7fd fce9 	bl	800145c <getDistance30mm>
 8003a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a8e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8003a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	db16      	blt.n	8003aca <updateTargetpoint+0x9a>
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <updateTargetpoint+0xe0>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fcab 	bl	80033fc <getDistanceLog>
 8003aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <updateTargetpoint+0xdc>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <updateTargetpoint+0xdc>)
 8003ab6:	edc3 7a00 	vstr	s15, [r3]
			targetpoint_table_idx++;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <updateTargetpoint+0xe0>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <updateTargetpoint+0xe0>)
 8003ac4:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003ac6:	f7fd fcd7 	bl	8001478 <clearDistance30mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize()){
 8003aca:	f7ff fb1d 	bl	8003108 <getDistanceLogSize>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <updateTargetpoint+0xe0>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d806      	bhi.n	8003ae8 <updateTargetpoint+0xb8>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 8003ada:	f7ff fb15 	bl	8003108 <getDistanceLogSize>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <updateTargetpoint+0xe0>)
 8003ae6:	801a      	strh	r2, [r3, #0]
		}

		target_X_coordinate = X_table[targetpoint_table_idx];
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <updateTargetpoint+0xe0>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <updateTargetpoint+0xe4>)
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <updateTargetpoint+0xe8>)
 8003af6:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[targetpoint_table_idx];
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <updateTargetpoint+0xe0>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <updateTargetpoint+0xec>)
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <updateTargetpoint+0xf0>)
 8003b06:	6013      	str	r3, [r2, #0]

	}
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2001cec0 	.word	0x2001cec0
 8003b10:	2001cec4 	.word	0x2001cec4
 8003b14:	20016e64 	.word	0x20016e64
 8003b18:	2001ace4 	.word	0x2001ace4
 8003b1c:	20018da4 	.word	0x20018da4
 8003b20:	2001ace8 	.word	0x2001ace8

08003b24 <getTargetpoint_X>:
float ErrorYcoodinates(void)
{
}

float getTargetpoint_X()
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	return target_X_coordinate;
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <getTargetpoint_X+0x18>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	ee07 3a90 	vmov	s15, r3
}
 8003b30:	eeb0 0a67 	vmov.f32	s0, s15
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	2001ace4 	.word	0x2001ace4

08003b40 <getTargetpoint_Y>:

float getTargetpoint_Y()
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
	return target_Y_coordinate;
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <getTargetpoint_Y+0x18>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	ee07 3a90 	vmov	s15, r3
}
 8003b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	2001ace8 	.word	0x2001ace8

08003b5c <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003b64:	1d39      	adds	r1, r7, #4
 8003b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4803      	ldr	r0, [pc, #12]	; (8003b7c <__io_putchar+0x20>)
 8003b6e:	f006 fb4a 	bl	800a206 <HAL_UART_Transmit>
	return ch;
 8003b72:	687b      	ldr	r3, [r7, #4]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2001cfc4 	.word	0x2001cfc4

08003b80 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d121      	bne.n	8003bd6 <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003b9a:	6013      	str	r3, [r2, #0]
      timer2++;
 8003b9c:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003ba4:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003ba6:	f7fd fabb 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003baa:	f7fd fd45 	bl	8001638 <updateIMUValue>
      updateAnalogSensor();
 8003bae:	f7fe fdb1 	bl	8002714 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003bb2:	f7fe f8dd 	bl	8001d70 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003bb6:	f7ff fd23 	bl	8003600 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003bba:	f7fd f9e5 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003bbe:	f7fe fa57 	bl	8002070 <lineTraceFlip>
      runningFlip();
 8003bc2:	f001 fc2f 	bl	8005424 <runningFlip>
      motorCtrlFlip();
 8003bc6:	f001 f949 	bl	8004e5c <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003bca:	f001 f9ab 	bl	8004f24 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003bce:	f001 fa17 	bl	8005000 <updateSideSensorStatus>

      checkCourseOut();
 8003bd2:	f7fe fb25 	bl	8002220 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d106      	bne.n	8003bee <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003be8:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003bea:	f7fe fb9d 	bl	8002328 <storeAnalogSensorBuffer>

   }
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40001000 	.word	0x40001000
 8003bfc:	2001cec8 	.word	0x2001cec8
 8003c00:	2001cf10 	.word	0x2001cf10
 8003c04:	40001400 	.word	0x40001400
 8003c08:	2001d0e8 	.word	0x2001d0e8

08003c0c <init>:

void init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	  initADC();
 8003c10:	f7fe fb74 	bl	80022fc <initADC>
	  initEncoder();
 8003c14:	f7fd fa66 	bl	80010e4 <initEncoder>
	  initLog();
 8003c18:	f7ff f964 	bl	8002ee4 <initLog>
	  initGyro();
 8003c1c:	f7fd fcfc 	bl	8001618 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003c20:	4809      	ldr	r0, [pc, #36]	; (8003c48 <init+0x3c>)
 8003c22:	f005 fbfe 	bl	8009422 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8003c26:	4809      	ldr	r0, [pc, #36]	; (8003c4c <init+0x40>)
 8003c28:	f005 fbfb 	bl	8009422 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003c2c:	f001 f8fe 	bl	8004e2c <initMotor>

	  setLED('R');
 8003c30:	2052      	movs	r0, #82	; 0x52
 8003c32:	f7fd fe35 	bl	80018a0 <setLED>

	  sensorCalibration();
 8003c36:	f7fe ff5f 	bl	8002af8 <sensorCalibration>

	  HAL_Delay(1000);
 8003c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c3e:	f002 fcb1 	bl	80065a4 <HAL_Delay>

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2001d064 	.word	0x2001d064
 8003c4c:	2001d14c 	.word	0x2001d14c

08003c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c56:	f002 fc33 	bl	80064c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c5a:	f000 fb95 	bl	8004388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c5e:	f001 f823 	bl	8004ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c62:	f000 fff9 	bl	8004c58 <MX_DMA_Init>
  MX_TIM1_Init();
 8003c66:	f000 fda9 	bl	80047bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8003c6a:	f000 fe29 	bl	80048c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003c6e:	f000 fe7b 	bl	8004968 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003c72:	f000 ff37 	bl	8004ae4 <MX_TIM8_Init>
  MX_ADC1_Init();
 8003c76:	f000 fbf1 	bl	800445c <MX_ADC1_Init>
  MX_I2C1_Init();
 8003c7a:	f000 fd3b 	bl	80046f4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003c7e:	f000 fd67 	bl	8004750 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003c82:	f000 ffbf 	bl	8004c04 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003c86:	f000 fec3 	bl	8004a10 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003c8a:	f000 fef7 	bl	8004a7c <MX_TIM7_Init>
  MX_ADC2_Init();
 8003c8e:	f000 fc45 	bl	800451c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003c92:	f7ff ffbb 	bl	8003c0c <init>

  bool running_flag = false;
 8003c96:	2300      	movs	r3, #0
 8003c98:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003c9a:	204c      	movs	r0, #76	; 0x4c
 8003c9c:	f002 fb02 	bl	80062a4 <getSwitchStatus>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d109      	bne.n	8003cba <main+0x6a>
 8003ca6:	4bb4      	ldr	r3, [pc, #720]	; (8003f78 <main+0x328>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d105      	bne.n	8003cba <main+0x6a>
		  timer = 0;
 8003cae:	4bb3      	ldr	r3, [pc, #716]	; (8003f7c <main+0x32c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	; (8003f78 <main+0x328>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003cba:	204c      	movs	r0, #76	; 0x4c
 8003cbc:	f002 faf2 	bl	80062a4 <getSwitchStatus>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10a      	bne.n	8003cdc <main+0x8c>
 8003cc6:	4bad      	ldr	r3, [pc, #692]	; (8003f7c <main+0x32c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b14      	cmp	r3, #20
 8003ccc:	d906      	bls.n	8003cdc <main+0x8c>
 8003cce:	4baa      	ldr	r3, [pc, #680]	; (8003f78 <main+0x328>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <main+0x8c>
		  sw = 2;
 8003cd6:	4ba8      	ldr	r3, [pc, #672]	; (8003f78 <main+0x328>)
 8003cd8:	2202      	movs	r2, #2
 8003cda:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8003cdc:	4ba7      	ldr	r3, [pc, #668]	; (8003f7c <main+0x32c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b28      	cmp	r3, #40	; 0x28
 8003ce2:	d906      	bls.n	8003cf2 <main+0xa2>
 8003ce4:	4ba4      	ldr	r3, [pc, #656]	; (8003f78 <main+0x328>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d102      	bne.n	8003cf2 <main+0xa2>
		  sw = 0;
 8003cec:	4ba2      	ldr	r3, [pc, #648]	; (8003f78 <main+0x328>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8003cf2:	204c      	movs	r0, #76	; 0x4c
 8003cf4:	f002 fad6 	bl	80062a4 <getSwitchStatus>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <main+0xc8>
 8003cfe:	4b9e      	ldr	r3, [pc, #632]	; (8003f78 <main+0x328>)
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d108      	bne.n	8003d18 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 8003d06:	4b9e      	ldr	r3, [pc, #632]	; (8003f80 <main+0x330>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	4b9c      	ldr	r3, [pc, #624]	; (8003f80 <main+0x330>)
 8003d10:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8003d12:	4b99      	ldr	r3, [pc, #612]	; (8003f78 <main+0x328>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8003d18:	2052      	movs	r0, #82	; 0x52
 8003d1a:	f002 fac3 	bl	80062a4 <getSwitchStatus>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d109      	bne.n	8003d38 <main+0xe8>
 8003d24:	4b97      	ldr	r3, [pc, #604]	; (8003f84 <main+0x334>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <main+0xe8>
	  	  timer = 0;
 8003d2c:	4b93      	ldr	r3, [pc, #588]	; (8003f7c <main+0x32c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003d32:	4b94      	ldr	r3, [pc, #592]	; (8003f84 <main+0x334>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003d38:	2052      	movs	r0, #82	; 0x52
 8003d3a:	f002 fab3 	bl	80062a4 <getSwitchStatus>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10a      	bne.n	8003d5a <main+0x10a>
 8003d44:	4b8d      	ldr	r3, [pc, #564]	; (8003f7c <main+0x32c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b14      	cmp	r3, #20
 8003d4a:	d906      	bls.n	8003d5a <main+0x10a>
 8003d4c:	4b8d      	ldr	r3, [pc, #564]	; (8003f84 <main+0x334>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <main+0x10a>
	  	  sw2 = 2;
 8003d54:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <main+0x334>)
 8003d56:	2202      	movs	r2, #2
 8003d58:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003d5a:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <main+0x32c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b28      	cmp	r3, #40	; 0x28
 8003d60:	d906      	bls.n	8003d70 <main+0x120>
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <main+0x334>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <main+0x120>
	  	  sw2 = 0;
 8003d6a:	4b86      	ldr	r3, [pc, #536]	; (8003f84 <main+0x334>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003d70:	2052      	movs	r0, #82	; 0x52
 8003d72:	f002 fa97 	bl	80062a4 <getSwitchStatus>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10c      	bne.n	8003d96 <main+0x146>
 8003d7c:	4b81      	ldr	r3, [pc, #516]	; (8003f84 <main+0x334>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d108      	bne.n	8003d96 <main+0x146>
	  	  cnt++;
 8003d84:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <main+0x338>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <main+0x338>)
 8003d8e:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003d90:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <main+0x334>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003d96:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <main+0x338>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d902      	bls.n	8003da4 <main+0x154>
		  cnt = 0;
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <main+0x338>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003da4:	4b78      	ldr	r3, [pc, #480]	; (8003f88 <main+0x338>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <main+0x174>
		  HAL_Delay(1000);
 8003dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003db0:	f002 fbf8 	bl	80065a4 <HAL_Delay>
		  running_flag = true;
 8003db4:	2301      	movs	r3, #1
 8003db6:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8003db8:	4b74      	ldr	r3, [pc, #464]	; (8003f8c <main+0x33c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003dbe:	4b72      	ldr	r3, [pc, #456]	; (8003f88 <main+0x338>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f083 0301 	eor.w	r3, r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <main+0x188>
		  stopLineTrace();
 8003dd0:	f7fe fa14 	bl	80021fc <stopLineTrace>
		  stopVelocityControl();
 8003dd4:	f7ff fd5a 	bl	800388c <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8003dd8:	f001 fe2e 	bl	8005a38 <getgoalStatus>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <main+0x1a2>
		  running_flag = false;
 8003de2:	2300      	movs	r3, #0
 8003de4:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8003de6:	4b68      	ldr	r3, [pc, #416]	; (8003f88 <main+0x338>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f001 f8e9 	bl	8004fc4 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 8003df2:	4b63      	ldr	r3, [pc, #396]	; (8003f80 <main+0x330>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	2b0d      	cmp	r3, #13
 8003df8:	d902      	bls.n	8003e00 <main+0x1b0>
		  soiya = 0;
 8003dfa:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <main+0x330>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8003e00:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <main+0x330>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	2b0d      	cmp	r3, #13
 8003e06:	f200 8297 	bhi.w	8004338 <main+0x6e8>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <main+0x1c0>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e49 	.word	0x08003e49
 8003e14:	08003e75 	.word	0x08003e75
 8003e18:	08003eab 	.word	0x08003eab
 8003e1c:	08003eef 	.word	0x08003eef
 8003e20:	08003f33 	.word	0x08003f33
 8003e24:	08003fa9 	.word	0x08003fa9
 8003e28:	08003ffd 	.word	0x08003ffd
 8003e2c:	08004051 	.word	0x08004051
 8003e30:	080040a5 	.word	0x080040a5
 8003e34:	080040f9 	.word	0x080040f9
 8003e38:	0800414d 	.word	0x0800414d
 8003e3c:	080041a1 	.word	0x080041a1
 8003e40:	080041f5 	.word	0x080041f5
 8003e44:	08004249 	.word	0x08004249

			  case 0:
				  setLED('W');
 8003e48:	2057      	movs	r0, #87	; 0x57
 8003e4a:	f7fd fd29 	bl	80018a0 <setLED>
				  setLED2('R');
 8003e4e:	2052      	movs	r0, #82	; 0x52
 8003e50:	f7fd fdf4 	bl	8001a3c <setLED2>
				  printf("0\r\n");
 8003e54:	484e      	ldr	r0, [pc, #312]	; (8003f90 <main+0x340>)
 8003e56:	f008 fd7d 	bl	800c954 <puts>

				  if(running_flag == true){
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 826d 	beq.w	800433c <main+0x6ec>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 8003e62:	2002      	movs	r0, #2
 8003e64:	f001 f8f6 	bl	8005054 <setRunMode>
						  runningInit();
 8003e68:	f001 fbe0 	bl	800562c <runningInit>
						  soiya = 13;
 8003e6c:	4b44      	ldr	r3, [pc, #272]	; (8003f80 <main+0x330>)
 8003e6e:	220d      	movs	r2, #13
 8003e70:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 8003e72:	e263      	b.n	800433c <main+0x6ec>

			  case 1:
				  setLED('G');
 8003e74:	2047      	movs	r0, #71	; 0x47
 8003e76:	f7fd fd13 	bl	80018a0 <setLED>
				  setLED2('G');
 8003e7a:	2047      	movs	r0, #71	; 0x47
 8003e7c:	f7fd fdde 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 825c 	beq.w	8004340 <main+0x6f0>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003e88:	f7fd fb3a 	bl	8001500 <clearspeedcount>

					      //setVelocityRange(0, 0);
						  setTargetVelocity(0.0);
 8003e8c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003f94 <main+0x344>
 8003e90:	f7ff fc5c 	bl	800374c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 8003e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e98:	f001 f894 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 8003e9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003ea0:	f002 fb80 	bl	80065a4 <HAL_Delay>

						  running();
 8003ea4:	f001 f9be 	bl	8005224 <running>
				  }

				  break;
 8003ea8:	e24a      	b.n	8004340 <main+0x6f0>

			  case 2:
				  setLED('Y');
 8003eaa:	2059      	movs	r0, #89	; 0x59
 8003eac:	f7fd fcf8 	bl	80018a0 <setLED>
				  setLED2('R');
 8003eb0:	2052      	movs	r0, #82	; 0x52
 8003eb2:	f7fd fdc3 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8243 	beq.w	8004344 <main+0x6f4>
						  //startLineTrace();

					      clearspeedcount();
 8003ebe:	f7fd fb1f 	bl	8001500 <clearspeedcount>

					      IMU_average();
 8003ec2:	f7fd fc8d 	bl	80017e0 <IMU_average>

					      setRunMode(1);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f001 f8c4 	bl	8005054 <setRunMode>

					      setVelocityRange(1.0, 1.0);
 8003ecc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ed0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003ed4:	f001 fdc8 	bl	8005a68 <setVelocityRange>

						  setsuctionMotor(500);
 8003ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003edc:	f001 f872 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1000);
 8003ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ee4:	f002 fb5e 	bl	80065a4 <HAL_Delay>

						  running();
 8003ee8:	f001 f99c 	bl	8005224 <running>
				  }

				  break;
 8003eec:	e22a      	b.n	8004344 <main+0x6f4>

			  case 3:
				  setLED('Y');
 8003eee:	2059      	movs	r0, #89	; 0x59
 8003ef0:	f7fd fcd6 	bl	80018a0 <setLED>
				  setLED2('G');
 8003ef4:	2047      	movs	r0, #71	; 0x47
 8003ef6:	f7fd fda1 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8223 	beq.w	8004348 <main+0x6f8>
						  //startLineTrace();

						  clearspeedcount();
 8003f02:	f7fd fafd 	bl	8001500 <clearspeedcount>

						  IMU_average();
 8003f06:	f7fd fc6b 	bl	80017e0 <IMU_average>

						  setRunMode(1);
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	f001 f8a2 	bl	8005054 <setRunMode>

						  setVelocityRange(2.2, 2.2);
 8003f10:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003f98 <main+0x348>
 8003f14:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003f98 <main+0x348>
 8003f18:	f001 fda6 	bl	8005a68 <setVelocityRange>

						  setsuctionMotor(500);
 8003f1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f20:	f001 f850 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1000);
 8003f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f28:	f002 fb3c 	bl	80065a4 <HAL_Delay>

						  running();
 8003f2c:	f001 f97a 	bl	8005224 <running>
				  }

				  break;
 8003f30:	e20a      	b.n	8004348 <main+0x6f8>

			  case 4:
				  setLED('C');
 8003f32:	2043      	movs	r0, #67	; 0x43
 8003f34:	f7fd fcb4 	bl	80018a0 <setLED>
				  setLED2('R');
 8003f38:	2052      	movs	r0, #82	; 0x52
 8003f3a:	f7fd fd7f 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8203 	beq.w	800434c <main+0x6fc>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003f46:	f7fd fadb 	bl	8001500 <clearspeedcount>

						  IMU_average();
 8003f4a:	f7fd fc49 	bl	80017e0 <IMU_average>

						  setRunMode(5);
 8003f4e:	2005      	movs	r0, #5
 8003f50:	f001 f880 	bl	8005054 <setRunMode>

						  setVelocityRange(1.0, 1.0);
 8003f54:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f5c:	f001 fd84 	bl	8005a68 <setVelocityRange>

						  setsuctionMotor(500);
 8003f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f64:	f001 f82e 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 8003f68:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f6c:	f002 fb1a 	bl	80065a4 <HAL_Delay>

						  running();
 8003f70:	f001 f958 	bl	8005224 <running>
				  }

				  break;
 8003f74:	e1ea      	b.n	800434c <main+0x6fc>
 8003f76:	bf00      	nop
 8003f78:	2001d0e4 	.word	0x2001d0e4
 8003f7c:	2001cec8 	.word	0x2001cec8
 8003f80:	2001acee 	.word	0x2001acee
 8003f84:	2001acec 	.word	0x2001acec
 8003f88:	2001cf68 	.word	0x2001cf68
 8003f8c:	2001cf10 	.word	0x2001cf10
 8003f90:	08010070 	.word	0x08010070
 8003f94:	00000000 	.word	0x00000000
 8003f98:	400ccccd 	.word	0x400ccccd
 8003f9c:	40133333 	.word	0x40133333
 8003fa0:	40266666 	.word	0x40266666
 8003fa4:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 8003fa8:	2043      	movs	r0, #67	; 0x43
 8003faa:	f7fd fc79 	bl	80018a0 <setLED>
				  setLED2('G');
 8003fae:	2047      	movs	r0, #71	; 0x47
 8003fb0:	f7fd fd44 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 81ca 	beq.w	8004350 <main+0x700>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003fbc:	f7fd faa0 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f001 f847 	bl	8005054 <setRunMode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 8003fc6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003fca:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8003fce:	f001 fd4b 	bl	8005a68 <setVelocityRange>
						  setAccDec(7, 3);
 8003fd2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003fd6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003fda:	f001 fd5d 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003fde:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 8003fa4 <main+0x354>
 8003fe2:	f001 fd71 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 8003fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fea:	f000 ffeb 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 8003fee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003ff2:	f002 fad7 	bl	80065a4 <HAL_Delay>

						  running();
 8003ff6:	f001 f915 	bl	8005224 <running>
				  }

				  break;
 8003ffa:	e1a9      	b.n	8004350 <main+0x700>

			  case 6:
				  setLED('C');
 8003ffc:	2043      	movs	r0, #67	; 0x43
 8003ffe:	f7fd fc4f 	bl	80018a0 <setLED>
				  setLED2('B');
 8004002:	2042      	movs	r0, #66	; 0x42
 8004004:	f7fd fd1a 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 81a2 	beq.w	8004354 <main+0x704>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004010:	f7fd fa76 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004014:	2002      	movs	r0, #2
 8004016:	f001 f81d 	bl	8005054 <setRunMode>

						  setVelocityRange(2.0, 6.0);
 800401a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800401e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004022:	f001 fd21 	bl	8005a68 <setVelocityRange>
						  setAccDec(8, 5);
 8004026:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800402a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800402e:	f001 fd33 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004032:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 8003fa4 <main+0x354>
 8004036:	f001 fd47 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 800403a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800403e:	f000 ffc1 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 8004042:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004046:	f002 faad 	bl	80065a4 <HAL_Delay>

						  running();
 800404a:	f001 f8eb 	bl	8005224 <running>
				  }

				  break;
 800404e:	e181      	b.n	8004354 <main+0x704>

			  case 7:
				  setLED('C');
 8004050:	2043      	movs	r0, #67	; 0x43
 8004052:	f7fd fc25 	bl	80018a0 <setLED>
				  setLED2('W');
 8004056:	2057      	movs	r0, #87	; 0x57
 8004058:	f7fd fcf0 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 817a 	beq.w	8004358 <main+0x708>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004064:	f7fd fa4c 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004068:	2002      	movs	r0, #2
 800406a:	f000 fff3 	bl	8005054 <setRunMode>

						  setVelocityRange(2.5, 6.0);
 800406e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004072:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004076:	f001 fcf7 	bl	8005a68 <setVelocityRange>
						  setAccDec(8, 5);
 800407a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800407e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004082:	f001 fd09 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004086:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 8003fa4 <main+0x354>
 800408a:	f001 fd1d 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 800408e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004092:	f000 ff97 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 8004096:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800409a:	f002 fa83 	bl	80065a4 <HAL_Delay>

						  running();
 800409e:	f001 f8c1 	bl	8005224 <running>
				  }

				  break;
 80040a2:	e159      	b.n	8004358 <main+0x708>

			  case 8:
				  setLED('C');
 80040a4:	2043      	movs	r0, #67	; 0x43
 80040a6:	f7fd fbfb 	bl	80018a0 <setLED>
				  setLED2('Y');
 80040aa:	2059      	movs	r0, #89	; 0x59
 80040ac:	f7fd fcc6 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8152 	beq.w	800435c <main+0x70c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80040b8:	f7fd fa22 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80040bc:	2003      	movs	r0, #3
 80040be:	f000 ffc9 	bl	8005054 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80040c2:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80040c6:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 8003f9c <main+0x34c>
 80040ca:	f001 fccd 	bl	8005a68 <setVelocityRange>
						  setAccDec(7, 4);
 80040ce:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80040d2:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80040d6:	f001 fcdf 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80040da:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 8003fa4 <main+0x354>
 80040de:	f001 fcf3 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 80040e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040e6:	f000 ff6d 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 80040ea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80040ee:	f002 fa59 	bl	80065a4 <HAL_Delay>

						  running();
 80040f2:	f001 f897 	bl	8005224 <running>
				  }

			  	  break;
 80040f6:	e131      	b.n	800435c <main+0x70c>

			  case 9:
				  setLED('C');
 80040f8:	2043      	movs	r0, #67	; 0x43
 80040fa:	f7fd fbd1 	bl	80018a0 <setLED>
				  setLED2('X');
 80040fe:	2058      	movs	r0, #88	; 0x58
 8004100:	f7fd fc9c 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 812a 	beq.w	8004360 <main+0x710>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800410c:	f7fd f9f8 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 8004110:	2003      	movs	r0, #3
 8004112:	f000 ff9f 	bl	8005054 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004116:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 800411a:	ed1f 0a60 	vldr	s0, [pc, #-384]	; 8003f9c <main+0x34c>
 800411e:	f001 fca3 	bl	8005a68 <setVelocityRange>
						  setAccDec(8, 6);
 8004122:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004126:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800412a:	f001 fcb5 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800412e:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8003fa4 <main+0x354>
 8004132:	f001 fcc9 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 8004136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800413a:	f000 ff43 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1500);
 800413e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004142:	f002 fa2f 	bl	80065a4 <HAL_Delay>

						  running();
 8004146:	f001 f86d 	bl	8005224 <running>
				  }

				  break;
 800414a:	e109      	b.n	8004360 <main+0x710>

			  case 10:
				  setLED('C');
 800414c:	2043      	movs	r0, #67	; 0x43
 800414e:	f7fd fba7 	bl	80018a0 <setLED>
				  setLED2('V');
 8004152:	2056      	movs	r0, #86	; 0x56
 8004154:	f7fd fc72 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8102 	beq.w	8004364 <main+0x714>
						  //startLineTrace();

						  clearspeedcount();
 8004160:	f7fd f9ce 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004164:	2002      	movs	r0, #2
 8004166:	f000 ff75 	bl	8005054 <setRunMode>

						  setVelocityRange(2.5, 7.5);
 800416a:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 800416e:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004172:	f001 fc79 	bl	8005a68 <setVelocityRange>
						  setAccDec(7, 4);
 8004176:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800417a:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800417e:	f001 fc8b 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004182:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 8003fa4 <main+0x354>
 8004186:	f001 fc9f 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 800418a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800418e:	f000 ff19 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1000);
 8004192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004196:	f002 fa05 	bl	80065a4 <HAL_Delay>

						  running();
 800419a:	f001 f843 	bl	8005224 <running>
				  }

				  break;
 800419e:	e0e1      	b.n	8004364 <main+0x714>


			  case 11:
				  setLED('C');
 80041a0:	2043      	movs	r0, #67	; 0x43
 80041a2:	f7fd fb7d 	bl	80018a0 <setLED>
				  setLED2('T');
 80041a6:	2054      	movs	r0, #84	; 0x54
 80041a8:	f7fd fc48 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80da 	beq.w	8004368 <main+0x718>
						  //startLineTrace();

						  clearspeedcount();
 80041b4:	f7fd f9a4 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80041b8:	2003      	movs	r0, #3
 80041ba:	f000 ff4b 	bl	8005054 <setRunMode>

						  setVelocityRange(2.5, 8.5);
 80041be:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 80041c2:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80041c6:	f001 fc4f 	bl	8005a68 <setVelocityRange>
						  setAccDec(10, 5);
 80041ca:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80041ce:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80041d2:	f001 fc61 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80041d6:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 8003fa4 <main+0x354>
 80041da:	f001 fc75 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 80041de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041e2:	f000 feef 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1000);
 80041e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ea:	f002 f9db 	bl	80065a4 <HAL_Delay>

						  running();
 80041ee:	f001 f819 	bl	8005224 <running>
				  }

				  break;
 80041f2:	e0b9      	b.n	8004368 <main+0x718>

			  case 12:
				  setLED('C');
 80041f4:	2043      	movs	r0, #67	; 0x43
 80041f6:	f7fd fb53 	bl	80018a0 <setLED>
				  setLED2('A');
 80041fa:	2041      	movs	r0, #65	; 0x41
 80041fc:	f7fd fc1e 	bl	8001a3c <setLED2>

				  if(running_flag == true){
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80b2 	beq.w	800436c <main+0x71c>
						  //startLineTrace();

						  clearspeedcount();
 8004208:	f7fd f97a 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 800420c:	2002      	movs	r0, #2
 800420e:	f000 ff21 	bl	8005054 <setRunMode>

						  setVelocityRange(2.6, 10.0);
 8004212:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004216:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 8003fa0 <main+0x350>
 800421a:	f001 fc25 	bl	8005a68 <setVelocityRange>
						  setAccDec(7, 4);
 800421e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004222:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004226:	f001 fc37 	bl	8005a98 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800422a:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 8003fa4 <main+0x354>
 800422e:	f001 fc4b 	bl	8005ac8 <setStraightRadius>

						  setsuctionMotor(500);
 8004232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004236:	f000 fec5 	bl	8004fc4 <setsuctionMotor>

						  HAL_Delay(1000);
 800423a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800423e:	f002 f9b1 	bl	80065a4 <HAL_Delay>

						  running();
 8004242:	f000 ffef 	bl	8005224 <running>
				  }

				  break;
 8004246:	e091      	b.n	800436c <main+0x71c>

			  case 13:
				  setLED('M');
 8004248:	204d      	movs	r0, #77	; 0x4d
 800424a:	f7fd fb29 	bl	80018a0 <setLED>
				  setLED2('A');
 800424e:	2041      	movs	r0, #65	; 0x41
 8004250:	f7fd fbf4 	bl	8001a3c <setLED2>
				  printf("6\r\n");
 8004254:	4847      	ldr	r0, [pc, #284]	; (8004374 <main+0x724>)
 8004256:	f008 fb7d 	bl	800c954 <puts>

				  if(running_flag == true){
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8087 	beq.w	8004370 <main+0x720>
					  loadDistance();
 8004262:	f7fe ff81 	bl	8003168 <loadDistance>
					  loadTheta();
 8004266:	f7fe ffbd 	bl	80031e4 <loadTheta>
					  loadCross();
 800426a:	f7fe fff9 	bl	8003260 <loadCross>
					  loadSide();
 800426e:	f7ff f835 	bl	80032dc <loadSide>
					  loadDebug();
 8004272:	f7ff f871 	bl	8003358 <loadDebug>



					  printf("Distance, Theta\r\n");
 8004276:	4840      	ldr	r0, [pc, #256]	; (8004378 <main+0x728>)
 8004278:	f008 fb6c 	bl	800c954 <puts>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 800427c:	2300      	movs	r3, #0
 800427e:	80bb      	strh	r3, [r7, #4]
 8004280:	e01f      	b.n	80042c2 <main+0x672>
						 printf("%f, %f\r\n", getDistanceLog(i), getThetaLog(i));
 8004282:	88bb      	ldrh	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff f8b9 	bl	80033fc <getDistanceLog>
 800428a:	ee10 3a10 	vmov	r3, s0
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc f95a 	bl	8000548 <__aeabi_f2d>
 8004294:	4605      	mov	r5, r0
 8004296:	460e      	mov	r6, r1
 8004298:	88bb      	ldrh	r3, [r7, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f8c4 	bl	8003428 <getThetaLog>
 80042a0:	ee10 3a10 	vmov	r3, s0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc f94f 	bl	8000548 <__aeabi_f2d>
 80042aa:	4603      	mov	r3, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	e9cd 3400 	strd	r3, r4, [sp]
 80042b2:	462a      	mov	r2, r5
 80042b4:	4633      	mov	r3, r6
 80042b6:	4831      	ldr	r0, [pc, #196]	; (800437c <main+0x72c>)
 80042b8:	f008 fad8 	bl	800c86c <iprintf>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 80042bc:	88bb      	ldrh	r3, [r7, #4]
 80042be:	3301      	adds	r3, #1
 80042c0:	80bb      	strh	r3, [r7, #4]
 80042c2:	f7fe ff21 	bl	8003108 <getDistanceLogSize>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	88bb      	ldrh	r3, [r7, #4]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d3d8      	bcc.n	8004282 <main+0x632>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 80042d0:	482b      	ldr	r0, [pc, #172]	; (8004380 <main+0x730>)
 80042d2:	f008 fb3f 	bl	800c954 <puts>
					  uint16_t size = getDebugLogSize();
 80042d6:	f7fe ff3b 	bl	8003150 <getDebugLogSize>
 80042da:	4603      	mov	r3, r0
 80042dc:	803b      	strh	r3, [r7, #0]
					  for(uint16_t i = 0; i < size; i = i+2){
 80042de:	2300      	movs	r3, #0
 80042e0:	807b      	strh	r3, [r7, #2]
 80042e2:	e021      	b.n	8004328 <main+0x6d8>
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
 80042e4:	887b      	ldrh	r3, [r7, #2]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f8e0 	bl	80034ac <getDebugLog>
 80042ec:	ee10 3a10 	vmov	r3, s0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc f929 	bl	8000548 <__aeabi_f2d>
 80042f6:	4605      	mov	r5, r0
 80042f8:	460e      	mov	r6, r1
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	3301      	adds	r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f8d3 	bl	80034ac <getDebugLog>
 8004306:	ee10 3a10 	vmov	r3, s0
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc f91c 	bl	8000548 <__aeabi_f2d>
 8004310:	4603      	mov	r3, r0
 8004312:	460c      	mov	r4, r1
 8004314:	e9cd 3400 	strd	r3, r4, [sp]
 8004318:	462a      	mov	r2, r5
 800431a:	4633      	mov	r3, r6
 800431c:	4817      	ldr	r0, [pc, #92]	; (800437c <main+0x72c>)
 800431e:	f008 faa5 	bl	800c86c <iprintf>
					  for(uint16_t i = 0; i < size; i = i+2){
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	3302      	adds	r3, #2
 8004326:	807b      	strh	r3, [r7, #2]
 8004328:	887a      	ldrh	r2, [r7, #2]
 800432a:	883b      	ldrh	r3, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d3d9      	bcc.n	80042e4 <main+0x694>
					  }

					  printf("9999, 9999\r\n");
 8004330:	4814      	ldr	r0, [pc, #80]	; (8004384 <main+0x734>)
 8004332:	f008 fb0f 	bl	800c954 <puts>
				  }

				  break;
 8004336:	e01b      	b.n	8004370 <main+0x720>

			  default:
				  break;
 8004338:	bf00      	nop
 800433a:	e4ae      	b.n	8003c9a <main+0x4a>
				  break;
 800433c:	bf00      	nop
 800433e:	e4ac      	b.n	8003c9a <main+0x4a>
				  break;
 8004340:	bf00      	nop
 8004342:	e4aa      	b.n	8003c9a <main+0x4a>
				  break;
 8004344:	bf00      	nop
 8004346:	e4a8      	b.n	8003c9a <main+0x4a>
				  break;
 8004348:	bf00      	nop
 800434a:	e4a6      	b.n	8003c9a <main+0x4a>
				  break;
 800434c:	bf00      	nop
 800434e:	e4a4      	b.n	8003c9a <main+0x4a>
				  break;
 8004350:	bf00      	nop
 8004352:	e4a2      	b.n	8003c9a <main+0x4a>
				  break;
 8004354:	bf00      	nop
 8004356:	e4a0      	b.n	8003c9a <main+0x4a>
				  break;
 8004358:	bf00      	nop
 800435a:	e49e      	b.n	8003c9a <main+0x4a>
			  	  break;
 800435c:	bf00      	nop
 800435e:	e49c      	b.n	8003c9a <main+0x4a>
				  break;
 8004360:	bf00      	nop
 8004362:	e49a      	b.n	8003c9a <main+0x4a>
				  break;
 8004364:	bf00      	nop
 8004366:	e498      	b.n	8003c9a <main+0x4a>
				  break;
 8004368:	bf00      	nop
 800436a:	e496      	b.n	8003c9a <main+0x4a>
				  break;
 800436c:	bf00      	nop
 800436e:	e494      	b.n	8003c9a <main+0x4a>
				  break;
 8004370:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004372:	e492      	b.n	8003c9a <main+0x4a>
 8004374:	08010074 	.word	0x08010074
 8004378:	08010078 	.word	0x08010078
 800437c:	0801008c 	.word	0x0801008c
 8004380:	08010098 	.word	0x08010098
 8004384:	080100bc 	.word	0x080100bc

08004388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b094      	sub	sp, #80	; 0x50
 800438c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800438e:	f107 0320 	add.w	r3, r7, #32
 8004392:	2230      	movs	r2, #48	; 0x30
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f007 fc21 	bl	800bbde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800439c:	f107 030c 	add.w	r3, r7, #12
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	4b28      	ldr	r3, [pc, #160]	; (8004454 <SystemClock_Config+0xcc>)
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	4a27      	ldr	r2, [pc, #156]	; (8004454 <SystemClock_Config+0xcc>)
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6413      	str	r3, [r2, #64]	; 0x40
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <SystemClock_Config+0xcc>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	4b22      	ldr	r3, [pc, #136]	; (8004458 <SystemClock_Config+0xd0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a21      	ldr	r2, [pc, #132]	; (8004458 <SystemClock_Config+0xd0>)
 80043d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <SystemClock_Config+0xd0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043e4:	2302      	movs	r3, #2
 80043e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043e8:	2301      	movs	r3, #1
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043ec:	2310      	movs	r3, #16
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043f0:	2302      	movs	r3, #2
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043f4:	2300      	movs	r3, #0
 80043f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80043f8:	2308      	movs	r3, #8
 80043fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80043fc:	23a8      	movs	r3, #168	; 0xa8
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004400:	2302      	movs	r3, #2
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004404:	2304      	movs	r3, #4
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004408:	f107 0320 	add.w	r3, r7, #32
 800440c:	4618      	mov	r0, r3
 800440e:	f003 fe4d 	bl	80080ac <HAL_RCC_OscConfig>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004418:	f000 fd04 	bl	8004e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800441c:	230f      	movs	r3, #15
 800441e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004420:	2302      	movs	r3, #2
 8004422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004428:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800442c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800442e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	2105      	movs	r1, #5
 800443a:	4618      	mov	r0, r3
 800443c:	f004 f8a6 	bl	800858c <HAL_RCC_ClockConfig>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004446:	f000 fced 	bl	8004e24 <Error_Handler>
  }
}
 800444a:	bf00      	nop
 800444c:	3750      	adds	r7, #80	; 0x50
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000

0800445c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004462:	463b      	mov	r3, r7
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <MX_ADC1_Init+0xb4>)
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <MX_ADC1_Init+0xb8>)
 8004472:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004474:	4b26      	ldr	r3, [pc, #152]	; (8004510 <MX_ADC1_Init+0xb4>)
 8004476:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800447a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800447c:	4b24      	ldr	r3, [pc, #144]	; (8004510 <MX_ADC1_Init+0xb4>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <MX_ADC1_Init+0xb4>)
 8004484:	2201      	movs	r2, #1
 8004486:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <MX_ADC1_Init+0xb4>)
 800448a:	2201      	movs	r2, #1
 800448c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <MX_ADC1_Init+0xb4>)
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <MX_ADC1_Init+0xb4>)
 8004498:	2200      	movs	r2, #0
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <MX_ADC1_Init+0xb4>)
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <MX_ADC1_Init+0xbc>)
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044aa:	2202      	movs	r2, #2
 80044ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044b6:	4b16      	ldr	r3, [pc, #88]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044bc:	4814      	ldr	r0, [pc, #80]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044be:	f002 f893 	bl	80065e8 <HAL_ADC_Init>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80044c8:	f000 fcac 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80044cc:	230c      	movs	r3, #12
 80044ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80044d0:	2301      	movs	r3, #1
 80044d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80044d4:	2307      	movs	r3, #7
 80044d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044d8:	463b      	mov	r3, r7
 80044da:	4619      	mov	r1, r3
 80044dc:	480c      	ldr	r0, [pc, #48]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044de:	f002 f9d7 	bl	8006890 <HAL_ADC_ConfigChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80044e8:	f000 fc9c 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80044ec:	230d      	movs	r3, #13
 80044ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80044f0:	2302      	movs	r3, #2
 80044f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044f4:	463b      	mov	r3, r7
 80044f6:	4619      	mov	r1, r3
 80044f8:	4805      	ldr	r0, [pc, #20]	; (8004510 <MX_ADC1_Init+0xb4>)
 80044fa:	f002 f9c9 	bl	8006890 <HAL_ADC_ConfigChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004504:	f000 fc8e 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2001ce20 	.word	0x2001ce20
 8004514:	40012000 	.word	0x40012000
 8004518:	0f000001 	.word	0x0f000001

0800451c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004522:	463b      	mov	r3, r7
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800452e:	4b6e      	ldr	r3, [pc, #440]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004530:	4a6e      	ldr	r2, [pc, #440]	; (80046ec <MX_ADC2_Init+0x1d0>)
 8004532:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004534:	4b6c      	ldr	r3, [pc, #432]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800453a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800453c:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004542:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004544:	2201      	movs	r2, #1
 8004546:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004548:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800454a:	2201      	movs	r2, #1
 800454c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800454e:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004556:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004558:	2200      	movs	r2, #0
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800455c:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800455e:	4a64      	ldr	r2, [pc, #400]	; (80046f0 <MX_ADC2_Init+0x1d4>)
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004564:	2200      	movs	r2, #0
 8004566:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8004568:	4b5f      	ldr	r3, [pc, #380]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800456a:	220c      	movs	r2, #12
 800456c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800456e:	4b5e      	ldr	r3, [pc, #376]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004576:	4b5c      	ldr	r3, [pc, #368]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004578:	2201      	movs	r2, #1
 800457a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800457c:	485a      	ldr	r0, [pc, #360]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800457e:	f002 f833 	bl	80065e8 <HAL_ADC_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004588:	f000 fc4c 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800458c:	2300      	movs	r3, #0
 800458e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004590:	2301      	movs	r3, #1
 8004592:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004594:	2307      	movs	r3, #7
 8004596:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004598:	463b      	mov	r3, r7
 800459a:	4619      	mov	r1, r3
 800459c:	4852      	ldr	r0, [pc, #328]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800459e:	f002 f977 	bl	8006890 <HAL_ADC_ConfigChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80045a8:	f000 fc3c 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80045b0:	2302      	movs	r3, #2
 80045b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045b4:	463b      	mov	r3, r7
 80045b6:	4619      	mov	r1, r3
 80045b8:	484b      	ldr	r0, [pc, #300]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 80045ba:	f002 f969 	bl	8006890 <HAL_ADC_ConfigChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80045c4:	f000 fc2e 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80045c8:	2302      	movs	r3, #2
 80045ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80045cc:	2303      	movs	r3, #3
 80045ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045d0:	463b      	mov	r3, r7
 80045d2:	4619      	mov	r1, r3
 80045d4:	4844      	ldr	r0, [pc, #272]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 80045d6:	f002 f95b 	bl	8006890 <HAL_ADC_ConfigChannel>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80045e0:	f000 fc20 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80045e4:	2303      	movs	r3, #3
 80045e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80045e8:	2304      	movs	r3, #4
 80045ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045ec:	463b      	mov	r3, r7
 80045ee:	4619      	mov	r1, r3
 80045f0:	483d      	ldr	r0, [pc, #244]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 80045f2:	f002 f94d 	bl	8006890 <HAL_ADC_ConfigChannel>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80045fc:	f000 fc12 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004600:	2304      	movs	r3, #4
 8004602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004604:	2305      	movs	r3, #5
 8004606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004608:	463b      	mov	r3, r7
 800460a:	4619      	mov	r1, r3
 800460c:	4836      	ldr	r0, [pc, #216]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800460e:	f002 f93f 	bl	8006890 <HAL_ADC_ConfigChannel>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004618:	f000 fc04 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800461c:	2305      	movs	r3, #5
 800461e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004620:	2306      	movs	r3, #6
 8004622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004624:	463b      	mov	r3, r7
 8004626:	4619      	mov	r1, r3
 8004628:	482f      	ldr	r0, [pc, #188]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800462a:	f002 f931 	bl	8006890 <HAL_ADC_ConfigChannel>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004634:	f000 fbf6 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004638:	2306      	movs	r3, #6
 800463a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800463c:	2307      	movs	r3, #7
 800463e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004640:	463b      	mov	r3, r7
 8004642:	4619      	mov	r1, r3
 8004644:	4828      	ldr	r0, [pc, #160]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004646:	f002 f923 	bl	8006890 <HAL_ADC_ConfigChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004650:	f000 fbe8 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004654:	2307      	movs	r3, #7
 8004656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004658:	2308      	movs	r3, #8
 800465a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800465c:	463b      	mov	r3, r7
 800465e:	4619      	mov	r1, r3
 8004660:	4821      	ldr	r0, [pc, #132]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 8004662:	f002 f915 	bl	8006890 <HAL_ADC_ConfigChannel>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800466c:	f000 fbda 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004670:	2308      	movs	r3, #8
 8004672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004674:	2309      	movs	r3, #9
 8004676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004678:	463b      	mov	r3, r7
 800467a:	4619      	mov	r1, r3
 800467c:	481a      	ldr	r0, [pc, #104]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800467e:	f002 f907 	bl	8006890 <HAL_ADC_ConfigChannel>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004688:	f000 fbcc 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800468c:	2309      	movs	r3, #9
 800468e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004690:	230a      	movs	r3, #10
 8004692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004694:	463b      	mov	r3, r7
 8004696:	4619      	mov	r1, r3
 8004698:	4813      	ldr	r0, [pc, #76]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 800469a:	f002 f8f9 	bl	8006890 <HAL_ADC_ConfigChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80046a4:	f000 fbbe 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80046a8:	230e      	movs	r3, #14
 80046aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80046ac:	230b      	movs	r3, #11
 80046ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046b0:	463b      	mov	r3, r7
 80046b2:	4619      	mov	r1, r3
 80046b4:	480c      	ldr	r0, [pc, #48]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 80046b6:	f002 f8eb 	bl	8006890 <HAL_ADC_ConfigChannel>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80046c0:	f000 fbb0 	bl	8004e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80046c4:	230f      	movs	r3, #15
 80046c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80046c8:	230c      	movs	r3, #12
 80046ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046cc:	463b      	mov	r3, r7
 80046ce:	4619      	mov	r1, r3
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <MX_ADC2_Init+0x1cc>)
 80046d2:	f002 f8dd 	bl	8006890 <HAL_ADC_ConfigChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80046dc:	f000 fba2 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	2001cdd0 	.word	0x2001cdd0
 80046ec:	40012100 	.word	0x40012100
 80046f0:	0f000001 	.word	0x0f000001

080046f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <MX_I2C1_Init+0x50>)
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <MX_I2C1_Init+0x54>)
 80046fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80046fe:	4b11      	ldr	r3, [pc, #68]	; (8004744 <MX_I2C1_Init+0x50>)
 8004700:	4a12      	ldr	r2, [pc, #72]	; (800474c <MX_I2C1_Init+0x58>)
 8004702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <MX_I2C1_Init+0x50>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <MX_I2C1_Init+0x50>)
 800470c:	2200      	movs	r2, #0
 800470e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <MX_I2C1_Init+0x50>)
 8004712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <MX_I2C1_Init+0x50>)
 800471a:	2200      	movs	r2, #0
 800471c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <MX_I2C1_Init+0x50>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <MX_I2C1_Init+0x50>)
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <MX_I2C1_Init+0x50>)
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004730:	4804      	ldr	r0, [pc, #16]	; (8004744 <MX_I2C1_Init+0x50>)
 8004732:	f003 fb83 	bl	8007e3c <HAL_I2C_Init>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800473c:	f000 fb72 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004740:	bf00      	nop
 8004742:	bd80      	pop	{r7, pc}
 8004744:	2001cf14 	.word	0x2001cf14
 8004748:	40005400 	.word	0x40005400
 800474c:	000186a0 	.word	0x000186a0

08004750 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <MX_SPI3_Init+0x68>)
 8004758:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <MX_SPI3_Init+0x64>)
 800475c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004760:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <MX_SPI3_Init+0x64>)
 800476a:	2200      	movs	r2, #0
 800476c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004770:	2200      	movs	r2, #0
 8004772:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004776:	2200      	movs	r2, #0
 8004778:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <MX_SPI3_Init+0x64>)
 800477c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004780:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004784:	2228      	movs	r2, #40	; 0x28
 8004786:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <MX_SPI3_Init+0x64>)
 800478a:	2200      	movs	r2, #0
 800478c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004790:	2200      	movs	r2, #0
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <MX_SPI3_Init+0x64>)
 8004796:	2200      	movs	r2, #0
 8004798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <MX_SPI3_Init+0x64>)
 800479c:	220a      	movs	r2, #10
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80047a0:	4804      	ldr	r0, [pc, #16]	; (80047b4 <MX_SPI3_Init+0x64>)
 80047a2:	f004 f8bf 	bl	8008924 <HAL_SPI_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80047ac:	f000 fb3a 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	2001cf6c 	.word	0x2001cf6c
 80047b8:	40003c00 	.word	0x40003c00

080047bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b092      	sub	sp, #72	; 0x48
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
 80047dc:	615a      	str	r2, [r3, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	2220      	movs	r2, #32
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f007 f9f9 	bl	800bbde <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047ec:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <MX_TIM1_Init+0xfc>)
 80047ee:	4a33      	ldr	r2, [pc, #204]	; (80048bc <MX_TIM1_Init+0x100>)
 80047f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <MX_TIM1_Init+0xfc>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f8:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <MX_TIM1_Init+0xfc>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80047fe:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <MX_TIM1_Init+0xfc>)
 8004800:	f240 3247 	movw	r2, #839	; 0x347
 8004804:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004806:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <MX_TIM1_Init+0xfc>)
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800480c:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <MX_TIM1_Init+0xfc>)
 800480e:	2200      	movs	r2, #0
 8004810:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004812:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <MX_TIM1_Init+0xfc>)
 8004814:	2200      	movs	r2, #0
 8004816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004818:	4827      	ldr	r0, [pc, #156]	; (80048b8 <MX_TIM1_Init+0xfc>)
 800481a:	f004 fe26 	bl	800946a <HAL_TIM_PWM_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004824:	f000 fafe 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004828:	2300      	movs	r3, #0
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800482c:	2300      	movs	r3, #0
 800482e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004834:	4619      	mov	r1, r3
 8004836:	4820      	ldr	r0, [pc, #128]	; (80048b8 <MX_TIM1_Init+0xfc>)
 8004838:	f005 fbb6 	bl	8009fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004842:	f000 faef 	bl	8004e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004846:	2360      	movs	r3, #96	; 0x60
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800484e:	2300      	movs	r3, #0
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800485e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004862:	220c      	movs	r2, #12
 8004864:	4619      	mov	r1, r3
 8004866:	4814      	ldr	r0, [pc, #80]	; (80048b8 <MX_TIM1_Init+0xfc>)
 8004868:	f005 f83a 	bl	80098e0 <HAL_TIM_PWM_ConfigChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004872:	f000 fad7 	bl	8004e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800488a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800488e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4807      	ldr	r0, [pc, #28]	; (80048b8 <MX_TIM1_Init+0xfc>)
 800489a:	f005 fc01 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80048a4:	f000 fabe 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80048a8:	4803      	ldr	r0, [pc, #12]	; (80048b8 <MX_TIM1_Init+0xfc>)
 80048aa:	f001 fbfd 	bl	80060a8 <HAL_TIM_MspPostInit>

}
 80048ae:	bf00      	nop
 80048b0:	3748      	adds	r7, #72	; 0x48
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2001d0a4 	.word	0x2001d0a4
 80048bc:	40010000 	.word	0x40010000

080048c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	; 0x30
 80048c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f007 f985 	bl	800bbde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <MX_TIM3_Init+0xa0>)
 80048de:	4a21      	ldr	r2, [pc, #132]	; (8004964 <MX_TIM3_Init+0xa4>)
 80048e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <MX_TIM3_Init+0xa0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <MX_TIM3_Init+0xa0>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <MX_TIM3_Init+0xa0>)
 80048f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <MX_TIM3_Init+0xa0>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <MX_TIM3_Init+0xa0>)
 80048fe:	2200      	movs	r2, #0
 8004900:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004902:	2301      	movs	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800490a:	2301      	movs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800491a:	2301      	movs	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800491e:	2300      	movs	r3, #0
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004926:	f107 030c 	add.w	r3, r7, #12
 800492a:	4619      	mov	r1, r3
 800492c:	480c      	ldr	r0, [pc, #48]	; (8004960 <MX_TIM3_Init+0xa0>)
 800492e:	f004 fe05 	bl	800953c <HAL_TIM_Encoder_Init>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004938:	f000 fa74 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800493c:	2300      	movs	r3, #0
 800493e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004940:	2300      	movs	r3, #0
 8004942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4805      	ldr	r0, [pc, #20]	; (8004960 <MX_TIM3_Init+0xa0>)
 800494a:	f005 fb2d 	bl	8009fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004954:	f000 fa66 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004958:	bf00      	nop
 800495a:	3730      	adds	r7, #48	; 0x30
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	2001cd78 	.word	0x2001cd78
 8004964:	40000400 	.word	0x40000400

08004968 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08c      	sub	sp, #48	; 0x30
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800496e:	f107 030c 	add.w	r3, r7, #12
 8004972:	2224      	movs	r2, #36	; 0x24
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f007 f931 	bl	800bbde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <MX_TIM4_Init+0xa0>)
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <MX_TIM4_Init+0xa4>)
 8004988:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800498a:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <MX_TIM4_Init+0xa0>)
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <MX_TIM4_Init+0xa0>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <MX_TIM4_Init+0xa0>)
 8004998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <MX_TIM4_Init+0xa0>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <MX_TIM4_Init+0xa0>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80049b2:	2301      	movs	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80049c2:	2301      	movs	r3, #1
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80049ce:	f107 030c 	add.w	r3, r7, #12
 80049d2:	4619      	mov	r1, r3
 80049d4:	480c      	ldr	r0, [pc, #48]	; (8004a08 <MX_TIM4_Init+0xa0>)
 80049d6:	f004 fdb1 	bl	800953c <HAL_TIM_Encoder_Init>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80049e0:	f000 fa20 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80049ec:	1d3b      	adds	r3, r7, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4805      	ldr	r0, [pc, #20]	; (8004a08 <MX_TIM4_Init+0xa0>)
 80049f2:	f005 fad9 	bl	8009fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80049fc:	f000 fa12 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004a00:	bf00      	nop
 8004a02:	3730      	adds	r7, #48	; 0x30
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	2001cd38 	.word	0x2001cd38
 8004a0c:	40000800 	.word	0x40000800

08004a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a16:	463b      	mov	r3, r7
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <MX_TIM6_Init+0x68>)
 8004a22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a26:	2253      	movs	r2, #83	; 0x53
 8004a28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a3e:	480d      	ldr	r0, [pc, #52]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a40:	f004 fcc4 	bl	80093cc <HAL_TIM_Base_Init>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004a4a:	f000 f9eb 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a56:	463b      	mov	r3, r7
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4806      	ldr	r0, [pc, #24]	; (8004a74 <MX_TIM6_Init+0x64>)
 8004a5c:	f005 faa4 	bl	8009fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004a66:	f000 f9dd 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2001d064 	.word	0x2001d064
 8004a78:	40001000 	.word	0x40001000

08004a7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a82:	463b      	mov	r3, r7
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <MX_TIM7_Init+0x60>)
 8004a8c:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <MX_TIM7_Init+0x64>)
 8004a8e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <MX_TIM7_Init+0x60>)
 8004a92:	2253      	movs	r2, #83	; 0x53
 8004a94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <MX_TIM7_Init+0x60>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <MX_TIM7_Init+0x60>)
 8004a9e:	2263      	movs	r2, #99	; 0x63
 8004aa0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <MX_TIM7_Init+0x60>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004aa8:	480c      	ldr	r0, [pc, #48]	; (8004adc <MX_TIM7_Init+0x60>)
 8004aaa:	f004 fc8f 	bl	80093cc <HAL_TIM_Base_Init>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004ab4:	f000 f9b6 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4805      	ldr	r0, [pc, #20]	; (8004adc <MX_TIM7_Init+0x60>)
 8004ac6:	f005 fa6f 	bl	8009fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004ad0:	f000 f9a8 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	2001d14c 	.word	0x2001d14c
 8004ae0:	40001400 	.word	0x40001400

08004ae4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b092      	sub	sp, #72	; 0x48
 8004ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
 8004b04:	615a      	str	r2, [r3, #20]
 8004b06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f007 f865 	bl	800bbde <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004b14:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b16:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <MX_TIM8_Init+0x11c>)
 8004b18:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004b1a:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b20:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004b26:	4b35      	ldr	r3, [pc, #212]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b28:	f240 628f 	movw	r2, #1679	; 0x68f
 8004b2c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b3a:	4b30      	ldr	r3, [pc, #192]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004b40:	482e      	ldr	r0, [pc, #184]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b42:	f004 fc92 	bl	800946a <HAL_TIM_PWM_Init>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004b4c:	f000 f96a 	bl	8004e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b50:	2300      	movs	r3, #0
 8004b52:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4827      	ldr	r0, [pc, #156]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b60:	f005 fa22 	bl	8009fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004b6a:	f000 f95b 	bl	8004e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b6e:	2360      	movs	r3, #96	; 0x60
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b76:	2300      	movs	r3, #0
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4619      	mov	r1, r3
 8004b92:	481a      	ldr	r0, [pc, #104]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004b94:	f004 fea4 	bl	80098e0 <HAL_TIM_PWM_ConfigChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004b9e:	f000 f941 	bl	8004e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4814      	ldr	r0, [pc, #80]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004bac:	f004 fe98 	bl	80098e0 <HAL_TIM_PWM_ConfigChannel>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004bb6:	f000 f935 	bl	8004e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4807      	ldr	r0, [pc, #28]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004bde:	f005 fa5f 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004be8:	f000 f91c 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004bec:	4803      	ldr	r0, [pc, #12]	; (8004bfc <MX_TIM8_Init+0x118>)
 8004bee:	f001 fa5b 	bl	80060a8 <HAL_TIM_MspPostInit>

}
 8004bf2:	bf00      	nop
 8004bf4:	3748      	adds	r7, #72	; 0x48
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2001cecc 	.word	0x2001cecc
 8004c00:	40010400 	.word	0x40010400

08004c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c0a:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <MX_USART1_UART_Init+0x50>)
 8004c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c2a:	220c      	movs	r2, #12
 8004c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c3a:	4805      	ldr	r0, [pc, #20]	; (8004c50 <MX_USART1_UART_Init+0x4c>)
 8004c3c:	f005 fa96 	bl	800a16c <HAL_UART_Init>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004c46:	f000 f8ed 	bl	8004e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	2001cfc4 	.word	0x2001cfc4
 8004c54:	40011000 	.word	0x40011000

08004c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <MX_DMA_Init+0x4c>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <MX_DMA_Init+0x4c>)
 8004c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <MX_DMA_Init+0x4c>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	2038      	movs	r0, #56	; 0x38
 8004c80:	f002 f981 	bl	8006f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004c84:	2038      	movs	r0, #56	; 0x38
 8004c86:	f002 f99a 	bl	8006fbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	203a      	movs	r0, #58	; 0x3a
 8004c90:	f002 f979 	bl	8006f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004c94:	203a      	movs	r0, #58	; 0x3a
 8004c96:	f002 f992 	bl	8006fbe <HAL_NVIC_EnableIRQ>

}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cae:	f107 0314 	add.w	r3, r7, #20
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	4b53      	ldr	r3, [pc, #332]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	4a52      	ldr	r2, [pc, #328]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cce:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4b4c      	ldr	r3, [pc, #304]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4a4b      	ldr	r2, [pc, #300]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cea:	4b49      	ldr	r3, [pc, #292]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	4b45      	ldr	r3, [pc, #276]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4a44      	ldr	r2, [pc, #272]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	6313      	str	r3, [r2, #48]	; 0x30
 8004d06:	4b42      	ldr	r3, [pc, #264]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	4a3d      	ldr	r2, [pc, #244]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	6313      	str	r3, [r2, #48]	; 0x30
 8004d22:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	4a36      	ldr	r2, [pc, #216]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d38:	f043 0308 	orr.w	r3, r3, #8
 8004d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3e:	4b34      	ldr	r3, [pc, #208]	; (8004e10 <MX_GPIO_Init+0x168>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004d50:	4830      	ldr	r0, [pc, #192]	; (8004e14 <MX_GPIO_Init+0x16c>)
 8004d52:	f003 f859 	bl	8007e08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004d56:	2200      	movs	r2, #0
 8004d58:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004d5c:	482e      	ldr	r0, [pc, #184]	; (8004e18 <MX_GPIO_Init+0x170>)
 8004d5e:	f003 f853 	bl	8007e08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d68:	482c      	ldr	r0, [pc, #176]	; (8004e1c <MX_GPIO_Init+0x174>)
 8004d6a:	f003 f84d 	bl	8007e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2104      	movs	r1, #4
 8004d72:	482b      	ldr	r0, [pc, #172]	; (8004e20 <MX_GPIO_Init+0x178>)
 8004d74:	f003 f848 	bl	8007e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004d78:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004d7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d8a:	f107 0314 	add.w	r3, r7, #20
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4820      	ldr	r0, [pc, #128]	; (8004e14 <MX_GPIO_Init+0x16c>)
 8004d92:	f002 fe87 	bl	8007aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004d96:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8004d9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da4:	2300      	movs	r3, #0
 8004da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	4619      	mov	r1, r3
 8004dae:	481a      	ldr	r0, [pc, #104]	; (8004e18 <MX_GPIO_Init+0x170>)
 8004db0:	f002 fe78 	bl	8007aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004db4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc2:	f107 0314 	add.w	r3, r7, #20
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4814      	ldr	r0, [pc, #80]	; (8004e1c <MX_GPIO_Init+0x174>)
 8004dca:	f002 fe6b 	bl	8007aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	4619      	mov	r1, r3
 8004de6:	480d      	ldr	r0, [pc, #52]	; (8004e1c <MX_GPIO_Init+0x174>)
 8004de8:	f002 fe5c 	bl	8007aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004dec:	2304      	movs	r3, #4
 8004dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004df0:	2301      	movs	r3, #1
 8004df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	4807      	ldr	r0, [pc, #28]	; (8004e20 <MX_GPIO_Init+0x178>)
 8004e04:	f002 fe4e 	bl	8007aa4 <HAL_GPIO_Init>

}
 8004e08:	bf00      	nop
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40020800 	.word	0x40020800
 8004e18:	40020400 	.word	0x40020400
 8004e1c:	40020000 	.word	0x40020000
 8004e20:	40020c00 	.word	0x40020c00

08004e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e2a:	e7fe      	b.n	8004e2a <Error_Handler+0x6>

08004e2c <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8004e30:	2100      	movs	r1, #0
 8004e32:	4808      	ldr	r0, [pc, #32]	; (8004e54 <initMotor+0x28>)
 8004e34:	f004 fb44 	bl	80094c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8004e38:	2108      	movs	r1, #8
 8004e3a:	4806      	ldr	r0, [pc, #24]	; (8004e54 <initMotor+0x28>)
 8004e3c:	f004 fb40 	bl	80094c0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004e40:	210c      	movs	r1, #12
 8004e42:	4805      	ldr	r0, [pc, #20]	; (8004e58 <initMotor+0x2c>)
 8004e44:	f004 fb3c 	bl	80094c0 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8004e48:	2064      	movs	r0, #100	; 0x64
 8004e4a:	f001 fbab 	bl	80065a4 <HAL_Delay>
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2001cecc 	.word	0x2001cecc
 8004e58:	2001d0a4 	.word	0x2001d0a4

08004e5c <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <motorCtrlFlip+0xb0>)
 8004e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db0d      	blt.n	8004e88 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <motorCtrlFlip+0xb0>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004e72:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <motorCtrlFlip+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e7a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	4824      	ldr	r0, [pc, #144]	; (8004f14 <motorCtrlFlip+0xb8>)
 8004e82:	f002 ffc1 	bl	8007e08 <HAL_GPIO_WritePin>
 8004e86:	e010      	b.n	8004eaa <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8004e88:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <motorCtrlFlip+0xb0>)
 8004e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	425b      	negs	r3, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004e96:	4b1e      	ldr	r3, [pc, #120]	; (8004f10 <motorCtrlFlip+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e9e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	481b      	ldr	r0, [pc, #108]	; (8004f14 <motorCtrlFlip+0xb8>)
 8004ea6:	f002 ffaf 	bl	8007e08 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <motorCtrlFlip+0xbc>)
 8004eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db0e      	blt.n	8004ed2 <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8004eb4:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <motorCtrlFlip+0xbc>)
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004eba:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <motorCtrlFlip+0xb4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004ec2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eca:	4812      	ldr	r0, [pc, #72]	; (8004f14 <motorCtrlFlip+0xb8>)
 8004ecc:	f002 ff9c 	bl	8007e08 <HAL_GPIO_WritePin>
 8004ed0:	e011      	b.n	8004ef6 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <motorCtrlFlip+0xbc>)
 8004ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	425b      	negs	r3, r3
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <motorCtrlFlip+0xb4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004ee8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004eea:	2201      	movs	r2, #1
 8004eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ef0:	4808      	ldr	r0, [pc, #32]	; (8004f14 <motorCtrlFlip+0xb8>)
 8004ef2:	f002 ff89 	bl	8007e08 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <motorCtrlFlip+0xc0>)
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <motorCtrlFlip+0xc4>)
 8004efe:	88bb      	ldrh	r3, [r7, #4]
 8004f00:	8013      	strh	r3, [r2, #0]
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2001acf0 	.word	0x2001acf0
 8004f10:	2001cecc 	.word	0x2001cecc
 8004f14:	40020800 	.word	0x40020800
 8004f18:	2001acf2 	.word	0x2001acf2
 8004f1c:	2001d190 	.word	0x2001d190
 8004f20:	2001d18e 	.word	0x2001d18e

08004f24 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <suctionmotorCtrlFlip+0x1c>)
 8004f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <suctionmotorCtrlFlip+0x20>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2001acf4 	.word	0x2001acf4
 8004f44:	2001d0a4 	.word	0x2001d0a4

08004f48 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	460a      	mov	r2, r1
 8004f52:	80fb      	strh	r3, [r7, #6]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8004f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f5c:	f240 628e 	movw	r2, #1678	; 0x68e
 8004f60:	4293      	cmp	r3, r2
 8004f62:	dd03      	ble.n	8004f6c <setMotor+0x24>
 8004f64:	f240 638f 	movw	r3, #1679	; 0x68f
 8004f68:	80fb      	strh	r3, [r7, #6]
 8004f6a:	e007      	b.n	8004f7c <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8004f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f70:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <setMotor+0x70>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	da02      	bge.n	8004f7c <setMotor+0x34>
 8004f76:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004f7a:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8004f7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f80:	f240 628e 	movw	r2, #1678	; 0x68e
 8004f84:	4293      	cmp	r3, r2
 8004f86:	dd03      	ble.n	8004f90 <setMotor+0x48>
 8004f88:	f240 638f 	movw	r3, #1679	; 0x68f
 8004f8c:	80bb      	strh	r3, [r7, #4]
 8004f8e:	e007      	b.n	8004fa0 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8004f90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f94:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <setMotor+0x70>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	da02      	bge.n	8004fa0 <setMotor+0x58>
 8004f9a:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004f9e:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8004fa0:	4a06      	ldr	r2, [pc, #24]	; (8004fbc <setMotor+0x74>)
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8004fa6:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <setMotor+0x78>)
 8004fa8:	88bb      	ldrh	r3, [r7, #4]
 8004faa:	8013      	strh	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	fffff972 	.word	0xfffff972
 8004fbc:	2001acf0 	.word	0x2001acf0
 8004fc0:	2001acf2 	.word	0x2001acf2

08004fc4 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8004fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfb8      	it	lt
 8004fd6:	425b      	neglt	r3, r3
 8004fd8:	b21a      	sxth	r2, r3
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <setsuctionMotor+0x38>)
 8004fdc:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8004fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe2:	f240 3246 	movw	r2, #838	; 0x346
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	dd02      	ble.n	8004ff0 <setsuctionMotor+0x2c>
 8004fea:	f240 3347 	movw	r3, #839	; 0x347
 8004fee:	80fb      	strh	r3, [r7, #6]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	2001acf4 	.word	0x2001acf4

08005000 <updateSideSensorStatus>:
static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;
static int16_t V_motor;

void updateSideSensorStatus(){
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <updateSideSensorStatus+0x44>)
 8005006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800500a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800500e:	dc03      	bgt.n	8005018 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <updateSideSensorStatus+0x48>)
 8005012:	2201      	movs	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e002      	b.n	800501e <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <updateSideSensorStatus+0x48>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <updateSideSensorStatus+0x4c>)
 8005020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005028:	dc03      	bgt.n	8005032 <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <updateSideSensorStatus+0x50>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8005030:	e002      	b.n	8005038 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <updateSideSensorStatus+0x50>)
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2001cd00 	.word	0x2001cd00
 8005048:	2001cc44 	.word	0x2001cc44
 800504c:	2001cc88 	.word	0x2001cc88
 8005050:	2001cc45 	.word	0x2001cc45

08005054 <setRunMode>:

void setRunMode(uint16_t num){
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
	mode = num;
 800505e:	4a04      	ldr	r2, [pc, #16]	; (8005070 <setRunMode+0x1c>)
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	8013      	strh	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	2001d198 	.word	0x2001d198

08005074 <isCrossLine>:

bool isCrossLine()
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <isCrossLine+0x88>)
 800507c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005088:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <isCrossLine+0x88>)
 800508e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509a:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 800509e:	edd7 7a01 	vldr	s15, [r7, #4]
 80050a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005100 <isCrossLine+0x8c>
 80050a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d50f      	bpl.n	80050d0 <isCrossLine+0x5c>
 80050b0:	edd7 7a00 	vldr	s15, [r7]
 80050b4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005100 <isCrossLine+0x8c>
 80050b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c0:	d506      	bpl.n	80050d0 <isCrossLine+0x5c>
		cnt++;
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <isCrossLine+0x90>)
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <isCrossLine+0x90>)
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <isCrossLine+0x90>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <isCrossLine+0x90>)
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d903      	bls.n	80050e6 <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <isCrossLine+0x94>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e002      	b.n	80050ec <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <isCrossLine+0x94>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <isCrossLine+0x94>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2001cce4 	.word	0x2001cce4
 8005100:	442f0000 	.word	0x442f0000
 8005104:	2001cc64 	.word	0x2001cc64
 8005108:	2001cc66 	.word	0x2001cc66
 800510c:	00000000 	.word	0x00000000

08005110 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005110:	b580      	push	{r7, lr}
 8005112:	ed2d 8b02 	vpush	{d8}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 800511a:	2300      	movs	r3, #0
 800511c:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <isContinuousCurvature+0xc8>)
 8005120:	ed93 8a00 	vldr	s16, [r3]
 8005124:	f7fc fb92 	bl	800184c <getTheta10mm>
 8005128:	eef0 7a40 	vmov.f32	s15, s0
 800512c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005130:	eef0 7ae7 	vabs.f32	s15, s15
 8005134:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005138:	4b28      	ldr	r3, [pc, #160]	; (80051dc <isContinuousCurvature+0xcc>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005140:	4b26      	ldr	r3, [pc, #152]	; (80051dc <isContinuousCurvature+0xcc>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8005146:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <isContinuousCurvature+0xd0>)
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 800514e:	6838      	ldr	r0, [r7, #0]
 8005150:	f7fb f9fa 	bl	8000548 <__aeabi_f2d>
 8005154:	a31e      	add	r3, pc, #120	; (adr r3, 80051d0 <isContinuousCurvature+0xc0>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb fcc9 	bl	8000af0 <__aeabi_dcmple>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <isContinuousCurvature+0x6a>
 8005164:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <isContinuousCurvature+0xd0>)
 8005166:	edd3 7a00 	vldr	s15, [r3]
 800516a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800516e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005172:	4b1b      	ldr	r3, [pc, #108]	; (80051e0 <isContinuousCurvature+0xd0>)
 8005174:	edc3 7a00 	vstr	s15, [r3]
 8005178:	e003      	b.n	8005182 <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 800517a:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <isContinuousCurvature+0xd0>)
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8005182:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <isContinuousCurvature+0xd0>)
 8005184:	edd3 7a00 	vldr	s15, [r3]
 8005188:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80051e4 <isContinuousCurvature+0xd4>
 800518c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005194:	db01      	blt.n	800519a <isContinuousCurvature+0x8a>
 8005196:	2301      	movs	r3, #1
 8005198:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <isContinuousCurvature+0xd0>)
 800519c:	edd3 7a00 	vldr	s15, [r3]
 80051a0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80051e8 <isContinuousCurvature+0xd8>
 80051a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ac:	db02      	blt.n	80051b4 <isContinuousCurvature+0xa4>
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <isContinuousCurvature+0xd0>)
 80051b0:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <isContinuousCurvature+0xdc>)
 80051b2:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 80051b4:	f7fc fb4a 	bl	800184c <getTheta10mm>
 80051b8:	eef0 7a40 	vmov.f32	s15, s0
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <isContinuousCurvature+0xc8>)
 80051be:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 80051c2:	79fb      	ldrb	r3, [r7, #7]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	ecbd 8b02 	vpop	{d8}
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	47ae147b 	.word	0x47ae147b
 80051d4:	3f947ae1 	.word	0x3f947ae1
 80051d8:	2001cc68 	.word	0x2001cc68
 80051dc:	2001cc48 	.word	0x2001cc48
 80051e0:	2001cc6c 	.word	0x2001cc6c
 80051e4:	42200000 	.word	0x42200000
 80051e8:	447a0000 	.word	0x447a0000
 80051ec:	447a0000 	.word	0x447a0000

080051f0 <isTargetDistance>:

bool isTargetDistance(float target){
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 80051fe:	f7fc f911 	bl	8001424 <getDistance10mm>
 8005202:	eeb0 7a40 	vmov.f32	s14, s0
 8005206:	edd7 7a01 	vldr	s15, [r7, #4]
 800520a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005212:	d801      	bhi.n	8005218 <isTargetDistance+0x28>
		ret = true;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <running>:

void running(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	80fb      	strh	r3, [r7, #6]

	runningInit();
 800522e:	f000 f9fd 	bl	800562c <runningInit>
	startLineTrace();
 8005232:	f7fc ffd1 	bl	80021d8 <startLineTrace>
	startVelocityControl();
 8005236:	f7fe fb17 	bl	8003868 <startVelocityControl>
	setTargetVelocity(min_velocity);
 800523a:	4b73      	ldr	r3, [pc, #460]	; (8005408 <running+0x1e4>)
 800523c:	edd3 7a00 	vldr	s15, [r3]
 8005240:	eeb0 0a67 	vmov.f32	s0, s15
 8005244:	f7fe fa82 	bl	800374c <setTargetVelocity>

	while(goal_flag == false){
 8005248:	e0d2      	b.n	80053f0 <running+0x1cc>
		switch(pattern){
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b14      	cmp	r3, #20
 800524e:	f200 80c2 	bhi.w	80053d6 <running+0x1b2>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <running+0x34>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052ad 	.word	0x080052ad
 800525c:	080053d7 	.word	0x080053d7
 8005260:	080053d7 	.word	0x080053d7
 8005264:	080053d7 	.word	0x080053d7
 8005268:	080053d7 	.word	0x080053d7
 800526c:	080052fb 	.word	0x080052fb
 8005270:	080053d7 	.word	0x080053d7
 8005274:	080053d7 	.word	0x080053d7
 8005278:	080053d7 	.word	0x080053d7
 800527c:	080053d7 	.word	0x080053d7
 8005280:	0800530f 	.word	0x0800530f
 8005284:	080053d7 	.word	0x080053d7
 8005288:	080053d7 	.word	0x080053d7
 800528c:	080053d7 	.word	0x080053d7
 8005290:	080053d7 	.word	0x080053d7
 8005294:	080053d7 	.word	0x080053d7
 8005298:	080053d7 	.word	0x080053d7
 800529c:	080053d7 	.word	0x080053d7
 80052a0:	080053d7 	.word	0x080053d7
 80052a4:	080053d7 	.word	0x080053d7
 80052a8:	080053ab 	.word	0x080053ab

				  case 0:
					  if(getSideSensorStatusR() == true){
 80052ac:	f000 fc28 	bl	8005b00 <getSideSensorStatusR>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 808c 	beq.w	80053d0 <running+0x1ac>
						  start_goal_line_cnt++;
 80052b8:	4b54      	ldr	r3, [pc, #336]	; (800540c <running+0x1e8>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	4b52      	ldr	r3, [pc, #328]	; (800540c <running+0x1e8>)
 80052c2:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 80052c4:	4b52      	ldr	r3, [pc, #328]	; (8005410 <running+0x1ec>)
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d102      	bne.n	80052d2 <running+0xae>
 80052cc:	f000 fa3a 	bl	8005744 <startLogging>
 80052d0:	e00c      	b.n	80052ec <running+0xc8>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 80052d2:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <running+0x1ec>)
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d003      	beq.n	80052e2 <running+0xbe>
 80052da:	4b4d      	ldr	r3, [pc, #308]	; (8005410 <running+0x1ec>)
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d102      	bne.n	80052e8 <running+0xc4>
 80052e2:	f000 fa69 	bl	80057b8 <startVelocityUpdate>
 80052e6:	e001      	b.n	80052ec <running+0xc8>
						  else startTargetUpdate();
 80052e8:	f000 fa48 	bl	800577c <startTargetUpdate>

						  clearGoalJudgeDistance();
 80052ec:	f7fc f862 	bl	80013b4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 80052f0:	f7fc f86e 	bl	80013d0 <clearSideLineJudgeDistance>
						  pattern = 5;
 80052f4:	2305      	movs	r3, #5
 80052f6:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 80052f8:	e06a      	b.n	80053d0 <running+0x1ac>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 80052fa:	f000 fc01 	bl	8005b00 <getSideSensorStatusR>
 80052fe:	4603      	mov	r3, r0
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <running+0xea>
 800530a:	230a      	movs	r3, #10
 800530c:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 800530e:	f000 fbeb 	bl	8005ae8 <getSideSensorStatusL>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <running+0xfe>
						  goal_judge_flag = false;
 8005318:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <running+0x1f0>)
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800531e:	f7fc f849 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8005322:	4b3c      	ldr	r3, [pc, #240]	; (8005414 <running+0x1f0>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	f083 0301 	eor.w	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <running+0x138>
 8005330:	f000 fbe6 	bl	8005b00 <getSideSensorStatusR>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d010      	beq.n	800535c <running+0x138>
 800533a:	f7fb fff3 	bl	8001324 <getGoalJudgeDistance>
 800533e:	eeb0 7a40 	vmov.f32	s14, s0
 8005342:	eddf 7a35 	vldr	s15, [pc, #212]	; 8005418 <running+0x1f4>
 8005346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	db05      	blt.n	800535c <running+0x138>
						  goal_judge_flag = true;
 8005350:	4b30      	ldr	r3, [pc, #192]	; (8005414 <running+0x1f0>)
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005356:	f7fc f82d 	bl	80013b4 <clearGoalJudgeDistance>
 800535a:	e019      	b.n	8005390 <running+0x16c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <running+0x1f0>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d015      	beq.n	8005390 <running+0x16c>
 8005364:	f7fb ffde 	bl	8001324 <getGoalJudgeDistance>
 8005368:	eeb0 7a40 	vmov.f32	s14, s0
 800536c:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005418 <running+0x1f4>
 8005370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005378:	db0a      	blt.n	8005390 <running+0x16c>
						  start_goal_line_cnt++;
 800537a:	4b24      	ldr	r3, [pc, #144]	; (800540c <running+0x1e8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b22      	ldr	r3, [pc, #136]	; (800540c <running+0x1e8>)
 8005384:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <running+0x1f0>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800538c:	f7fc f812 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <running+0x1e8>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d91d      	bls.n	80053d4 <running+0x1b0>
						  stopLogging();
 8005398:	f000 f9e4 	bl	8005764 <stopLogging>
						  stopVelocityUpdate();
 800539c:	f000 fa2e 	bl	80057fc <stopVelocityUpdate>
						  stopTargetUpdate();
 80053a0:	f000 f9fe 	bl	80057a0 <stopTargetUpdate>
						  pattern = 20;
 80053a4:	2314      	movs	r3, #20
 80053a6:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 80053a8:	e014      	b.n	80053d4 <running+0x1b0>

				  case 20:

					  setTargetVelocity(1.0);
 80053aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053ae:	f7fe f9cd 	bl	800374c <setTargetVelocity>
					  HAL_Delay(100);
 80053b2:	2064      	movs	r0, #100	; 0x64
 80053b4:	f001 f8f6 	bl	80065a4 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 80053b8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800541c <running+0x1f8>
 80053bc:	f7fe f9c6 	bl	800374c <setTargetVelocity>
					  HAL_Delay(500);
 80053c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053c4:	f001 f8ee 	bl	80065a4 <HAL_Delay>

					  goal_flag = true;
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <running+0x1fc>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]

					  break;
 80053ce:	e002      	b.n	80053d6 <running+0x1b2>
					  break;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <running+0x1b2>
					  break;
 80053d4:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 80053d6:	f7fc ff85 	bl	80022e4 <getCouseOutFlag>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <running+0x1cc>
		{
			stopLogging();
 80053e0:	f000 f9c0 	bl	8005764 <stopLogging>
			stopVelocityUpdate();
 80053e4:	f000 fa0a 	bl	80057fc <stopVelocityUpdate>
			stopTargetUpdate();
 80053e8:	f000 f9da 	bl	80057a0 <stopTargetUpdate>
		    pattern = 20;
 80053ec:	2314      	movs	r3, #20
 80053ee:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <running+0x1fc>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f47f af25 	bne.w	800524a <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	2001cc50 	.word	0x2001cc50
 800540c:	2001cc38 	.word	0x2001cc38
 8005410:	2001d198 	.word	0x2001d198
 8005414:	2001cc47 	.word	0x2001cc47
 8005418:	428c0000 	.word	0x428c0000
 800541c:	00000000 	.word	0x00000000
 8005420:	2001cc46 	.word	0x2001cc46

08005424 <runningFlip>:

void runningFlip()
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005428:	4b76      	ldr	r3, [pc, #472]	; (8005604 <runningFlip+0x1e0>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80e7 	beq.w	8005600 <runningFlip+0x1dc>
		setLED('G');
 8005432:	2047      	movs	r0, #71	; 0x47
 8005434:	f7fc fa34 	bl	80018a0 <setLED>
		updateTargetVelocity();//速度の更新
 8005438:	f000 f9ec 	bl	8005814 <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 800543c:	f7fe faf8 	bl	8003a30 <updateTargetpoint>

		if(isTargetDistance(30) == true){
 8005440:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8005444:	f7ff fed4 	bl	80051f0 <isTargetDistance>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <runningFlip+0x46>
			saveLog();
 800544e:	f000 f931 	bl	80056b4 <saveLog>

			if(isContinuousCurvature() == true){
 8005452:	f7ff fe5d 	bl	8005110 <isContinuousCurvature>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 800545c:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <runningFlip+0x1e4>)
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8005462:	f7fb ffed 	bl	8001440 <clearDistance10mm>
			clearTheta10mm();
 8005466:	f7fc f9ff 	bl	8001868 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 800546a:	f7ff fe03 	bl	8005074 <isCrossLine>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d026      	beq.n	80054c2 <runningFlip+0x9e>
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <runningFlip+0x1e8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f083 0301 	eor.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01f      	beq.n	80054c2 <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 8005482:	4b62      	ldr	r3, [pc, #392]	; (800560c <runningFlip+0x1e8>)
 8005484:	2201      	movs	r2, #1
 8005486:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005488:	4b5f      	ldr	r3, [pc, #380]	; (8005608 <runningFlip+0x1e4>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 800548e:	f7fb ffad 	bl	80013ec <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8005492:	f7fb ffb9 	bl	8001408 <clearSideLineIgnoreDistance>

			if(mode == 1){
 8005496:	4b5e      	ldr	r3, [pc, #376]	; (8005610 <runningFlip+0x1ec>)
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10b      	bne.n	80054b6 <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <runningFlip+0x1f0>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 80054a4:	f7fb ff30 	bl	8001308 <getTotalDistance>
 80054a8:	eef0 7a40 	vmov.f32	s15, s0
 80054ac:	eeb0 0a67 	vmov.f32	s0, s15
 80054b0:	f7fd fd96 	bl	8002fe0 <saveCross>
			if(mode == 1){
 80054b4:	e017      	b.n	80054e6 <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 80054b6:	4b57      	ldr	r3, [pc, #348]	; (8005614 <runningFlip+0x1f0>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80054bc:	f000 fa10 	bl	80058e0 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 80054c0:	e011      	b.n	80054e6 <runningFlip+0xc2>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 80054c2:	4b52      	ldr	r3, [pc, #328]	; (800560c <runningFlip+0x1e8>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00d      	beq.n	80054e6 <runningFlip+0xc2>
 80054ca:	f7fb ff57 	bl	800137c <getCrossLineIgnoreDistance>
 80054ce:	eeb0 7a40 	vmov.f32	s14, s0
 80054d2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005618 <runningFlip+0x1f4>
 80054d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	db02      	blt.n	80054e6 <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 80054e0:	4b4a      	ldr	r3, [pc, #296]	; (800560c <runningFlip+0x1e8>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 80054e6:	f000 fb0b 	bl	8005b00 <getSideSensorStatusR>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <runningFlip+0xd6>
			side_line_judge_flag = false;
 80054f0:	4b4a      	ldr	r3, [pc, #296]	; (800561c <runningFlip+0x1f8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80054f6:	f7fb ff6b 	bl	80013d0 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 80054fa:	4b48      	ldr	r3, [pc, #288]	; (800561c <runningFlip+0x1f8>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f083 0301 	eor.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <runningFlip+0x110>
 8005508:	f000 faee 	bl	8005ae8 <getSideSensorStatusL>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <runningFlip+0x110>
 8005512:	f7fb ff15 	bl	8001340 <getSideLineJudgeDistance>
 8005516:	eeb0 7a40 	vmov.f32	s14, s0
 800551a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8005620 <runningFlip+0x1fc>
 800551e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	db05      	blt.n	8005534 <runningFlip+0x110>
			side_line_judge_flag = true;
 8005528:	4b3c      	ldr	r3, [pc, #240]	; (800561c <runningFlip+0x1f8>)
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 800552e:	f7fb ff4f 	bl	80013d0 <clearSideLineJudgeDistance>
 8005532:	e02f      	b.n	8005594 <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8005534:	4b39      	ldr	r3, [pc, #228]	; (800561c <runningFlip+0x1f8>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02b      	beq.n	8005594 <runningFlip+0x170>
 800553c:	f7fb ff00 	bl	8001340 <getSideLineJudgeDistance>
 8005540:	eeb0 7a40 	vmov.f32	s14, s0
 8005544:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005620 <runningFlip+0x1fc>
 8005548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005550:	db20      	blt.n	8005594 <runningFlip+0x170>
			clearSideLineJudgeDistance();
 8005552:	f7fb ff3d 	bl	80013d0 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 8005556:	4b31      	ldr	r3, [pc, #196]	; (800561c <runningFlip+0x1f8>)
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 800555c:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <runningFlip+0x1e4>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <runningFlip+0x170>
				continuous_curve_flag = false;
 8005564:	4b28      	ldr	r3, [pc, #160]	; (8005608 <runningFlip+0x1e4>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 800556a:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <runningFlip+0x200>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <runningFlip+0x1ec>)
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10b      	bne.n	8005590 <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <runningFlip+0x204>)
 800557a:	2200      	movs	r2, #0
 800557c:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 800557e:	f7fb fec3 	bl	8001308 <getTotalDistance>
 8005582:	eef0 7a40 	vmov.f32	s15, s0
 8005586:	eeb0 0a67 	vmov.f32	s0, s15
 800558a:	f7fd fd41 	bl	8003010 <saveSide>
 800558e:	e001      	b.n	8005594 <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8005590:	f000 f9fc 	bl	800598c <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 8005594:	4b1f      	ldr	r3, [pc, #124]	; (8005614 <runningFlip+0x1f0>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <runningFlip+0x1f0>)
 800559e:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 80055a0:	4b21      	ldr	r3, [pc, #132]	; (8005628 <runningFlip+0x204>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <runningFlip+0x204>)
 80055aa:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <runningFlip+0x1f0>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d903      	bls.n	80055c0 <runningFlip+0x19c>
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <runningFlip+0x1f0>)
 80055ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80055be:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <runningFlip+0x204>)
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d903      	bls.n	80055d4 <runningFlip+0x1b0>
 80055cc:	4b16      	ldr	r3, [pc, #88]	; (8005628 <runningFlip+0x204>)
 80055ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80055d2:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <runningFlip+0x204>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	2b96      	cmp	r3, #150	; 0x96
 80055da:	d803      	bhi.n	80055e4 <runningFlip+0x1c0>
 80055dc:	2047      	movs	r0, #71	; 0x47
 80055de:	f7fc fa2d 	bl	8001a3c <setLED2>
 80055e2:	e002      	b.n	80055ea <runningFlip+0x1c6>
	    else setLED2('N');
 80055e4:	204e      	movs	r0, #78	; 0x4e
 80055e6:	f7fc fa29 	bl	8001a3c <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <runningFlip+0x204>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	2b96      	cmp	r3, #150	; 0x96
 80055f0:	d803      	bhi.n	80055fa <runningFlip+0x1d6>
 80055f2:	2042      	movs	r0, #66	; 0x42
 80055f4:	f7fc f954 	bl	80018a0 <setLED>
	    else setLED('G');
	}
}
 80055f8:	e002      	b.n	8005600 <runningFlip+0x1dc>
	    else setLED('G');
 80055fa:	2047      	movs	r0, #71	; 0x47
 80055fc:	f7fc f950 	bl	80018a0 <setLED>
}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}
 8005604:	2001cc4a 	.word	0x2001cc4a
 8005608:	2001cc49 	.word	0x2001cc49
 800560c:	2001cc42 	.word	0x2001cc42
 8005610:	2001d198 	.word	0x2001d198
 8005614:	2001cc3e 	.word	0x2001cc3e
 8005618:	42480000 	.word	0x42480000
 800561c:	2001cc43 	.word	0x2001cc43
 8005620:	42700000 	.word	0x42700000
 8005624:	2001cc48 	.word	0x2001cc48
 8005628:	2001cc40 	.word	0x2001cc40

0800562c <runningInit>:

void runningInit()
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
	if(mode == 1){
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <runningInit+0x68>)
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <runningInit+0x18>
		setLED('W');
 8005638:	2057      	movs	r0, #87	; 0x57
 800563a:	f7fc f931 	bl	80018a0 <setLED>
		ereaseLog();
 800563e:	f7fd fd17 	bl	8003070 <ereaseLog>
 8005642:	e00b      	b.n	800565c <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 8005644:	f7fd fd50 	bl	80030e8 <ereaseDebugLog>
		loadDistance();
 8005648:	f7fd fd8e 	bl	8003168 <loadDistance>
		loadTheta();
 800564c:	f7fd fdca 	bl	80031e4 <loadTheta>
		loadCross();
 8005650:	f7fd fe06 	bl	8003260 <loadCross>
		loadSide();
 8005654:	f7fd fe42 	bl	80032dc <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 8005658:	f7fe f930 	bl	80038bc <CreateXYcoordinates>
	}

	clearCrossLineIgnoreDistance();
 800565c:	f7fb fec6 	bl	80013ec <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005660:	f7fb fed2 	bl	8001408 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <runningInit+0x6c>)
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <runningInit+0x70>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <runningInit+0x74>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <runningInit+0x78>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <runningInit+0x7c>)
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <runningInit+0x80>)
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <runningInit+0x84>)
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	2001d198 	.word	0x2001d198
 8005698:	2001cc38 	.word	0x2001cc38
 800569c:	2001cc42 	.word	0x2001cc42
 80056a0:	2001cc43 	.word	0x2001cc43
 80056a4:	2001cc47 	.word	0x2001cc47
 80056a8:	2001cc48 	.word	0x2001cc48
 80056ac:	2001cc49 	.word	0x2001cc49
 80056b0:	2001cc4a 	.word	0x2001cc4a

080056b4 <saveLog>:

void saveLog(){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80056b8:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <saveLog+0x84>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d010      	beq.n	80056e2 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 80056c0:	f7fb feb0 	bl	8001424 <getDistance10mm>
 80056c4:	eef0 7a40 	vmov.f32	s15, s0
 80056c8:	eeb0 0a67 	vmov.f32	s0, s15
 80056cc:	f7fd fc58 	bl	8002f80 <saveDistance>
		saveTheta(getTheta10mm());
 80056d0:	f7fc f8bc 	bl	800184c <getTheta10mm>
 80056d4:	eef0 7a40 	vmov.f32	s15, s0
 80056d8:	eeb0 0a67 	vmov.f32	s0, s15
 80056dc:	f7fd fc68 	bl	8002fb0 <saveTheta>
		//saveDebug(CurrentXcoordinates());
		//saveDebug(CurrentYcoordinates());
		saveDebug(getTargetpoint_X());
		saveDebug(getTargetpoint_Y());
	}
}
 80056e0:	e028      	b.n	8005734 <saveLog+0x80>
	else if(velocity_update_flag == true){
 80056e2:	4b16      	ldr	r3, [pc, #88]	; (800573c <saveLog+0x88>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <saveLog+0x58>
		saveDebug(getTargetVelocity());
 80056ea:	f7fe f8af 	bl	800384c <getTargetVelocity>
 80056ee:	eef0 7a40 	vmov.f32	s15, s0
 80056f2:	eeb0 0a67 	vmov.f32	s0, s15
 80056f6:	f7fd fca3 	bl	8003040 <saveDebug>
		saveDebug(getCurrentVelocity());
 80056fa:	f7fe f869 	bl	80037d0 <getCurrentVelocity>
 80056fe:	eef0 7a40 	vmov.f32	s15, s0
 8005702:	eeb0 0a67 	vmov.f32	s0, s15
 8005706:	f7fd fc9b 	bl	8003040 <saveDebug>
}
 800570a:	e013      	b.n	8005734 <saveLog+0x80>
	else if(target_update_flag == true){
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <saveLog+0x8c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00f      	beq.n	8005734 <saveLog+0x80>
		saveDebug(getTargetpoint_X());
 8005714:	f7fe fa06 	bl	8003b24 <getTargetpoint_X>
 8005718:	eef0 7a40 	vmov.f32	s15, s0
 800571c:	eeb0 0a67 	vmov.f32	s0, s15
 8005720:	f7fd fc8e 	bl	8003040 <saveDebug>
		saveDebug(getTargetpoint_Y());
 8005724:	f7fe fa0c 	bl	8003b40 <getTargetpoint_Y>
 8005728:	eef0 7a40 	vmov.f32	s15, s0
 800572c:	eeb0 0a67 	vmov.f32	s0, s15
 8005730:	f7fd fc86 	bl	8003040 <saveDebug>
}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2001cc4b 	.word	0x2001cc4b
 800573c:	2001cc4d 	.word	0x2001cc4d
 8005740:	2001cc4c 	.word	0x2001cc4c

08005744 <startLogging>:

void startLogging(){
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005748:	f7fb fe7a 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 800574c:	f7fc f88c 	bl	8001868 <clearTheta10mm>
	clearTotalDistance();
 8005750:	f7fb fe22 	bl	8001398 <clearTotalDistance>
	logging_flag = true;
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <startLogging+0x1c>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2001cc4b 	.word	0x2001cc4b

08005764 <stopLogging>:

void stopLogging()
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
	logging_flag = false;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <stopLogging+0x14>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	2001cc4b 	.word	0x2001cc4b

0800577c <startTargetUpdate>:

void startTargetUpdate()
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005780:	f7fb fe5e 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 8005784:	f7fc f870 	bl	8001868 <clearTheta10mm>
	clearaddTheta();
 8005788:	f7fc f87c 	bl	8001884 <clearaddTheta>
	clearTotalDistance();
 800578c:	f7fb fe04 	bl	8001398 <clearTotalDistance>
	target_update_flag = true;
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <startTargetUpdate+0x20>)
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	2001cc4c 	.word	0x2001cc4c

080057a0 <stopTargetUpdate>:

void stopTargetUpdate()
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
	target_update_flag = false;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <stopTargetUpdate+0x14>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	2001cc4c 	.word	0x2001cc4c

080057b8 <startVelocityUpdate>:

void startVelocityUpdate(){
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80057bc:	f7fb fe40 	bl	8001440 <clearDistance10mm>
	clearTotalDistance();
 80057c0:	f7fb fdea 	bl	8001398 <clearTotalDistance>
	velocity_table_idx = 0;
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <startVelocityUpdate+0x30>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <startVelocityUpdate+0x34>)
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <startVelocityUpdate+0x38>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <startVelocityUpdate+0x3c>)
 80057da:	2200      	movs	r2, #0
 80057dc:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <startVelocityUpdate+0x40>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	801a      	strh	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	2001d19a 	.word	0x2001d19a
 80057ec:	2001d194 	.word	0x2001d194
 80057f0:	2001cc4d 	.word	0x2001cc4d
 80057f4:	2001cc3a 	.word	0x2001cc3a
 80057f8:	2001cc3c 	.word	0x2001cc3c

080057fc <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <stopVelocityUpdate+0x14>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2001cc4d 	.word	0x2001cc4d

08005814 <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005818:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <updateTargetVelocity+0xb8>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d053      	beq.n	80058c8 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 8005820:	f7fb fd72 	bl	8001308 <getTotalDistance>
 8005824:	eeb0 7a40 	vmov.f32	s14, s0
 8005828:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <updateTargetVelocity+0xbc>)
 800582a:	edd3 7a00 	vldr	s15, [r3]
 800582e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005836:	db14      	blt.n	8005862 <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005838:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <updateTargetVelocity+0xc0>)
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f7fd fddd 	bl	80033fc <getDistanceLog>
 8005842:	eeb0 7a40 	vmov.f32	s14, s0
 8005846:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <updateTargetVelocity+0xbc>)
 8005848:	edd3 7a00 	vldr	s15, [r3]
 800584c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <updateTargetVelocity+0xbc>)
 8005852:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005856:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <updateTargetVelocity+0xc0>)
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	3301      	adds	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <updateTargetVelocity+0xc0>)
 8005860:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005862:	f7fd fc51 	bl	8003108 <getDistanceLogSize>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <updateTargetVelocity+0xc0>)
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d806      	bhi.n	8005880 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005872:	f7fd fc49 	bl	8003108 <getDistanceLogSize>
 8005876:	4603      	mov	r3, r0
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <updateTargetVelocity+0xc0>)
 800587e:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <updateTargetVelocity+0xc0>)
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <updateTargetVelocity+0xc4>)
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	edd3 7a00 	vldr	s15, [r3]
 800588e:	eeb0 0a67 	vmov.f32	s0, s15
 8005892:	f7fd ff5b 	bl	800374c <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005896:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <updateTargetVelocity+0xc0>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <updateTargetVelocity+0xc4>)
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	ed93 7a00 	vldr	s14, [r3]
 80058a4:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <updateTargetVelocity+0xc8>)
 80058a6:	edd3 7a00 	vldr	s15, [r3]
 80058aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b2:	d501      	bpl.n	80058b8 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 80058b4:	f7fd fff6 	bl	80038a4 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <updateTargetVelocity+0xc0>)
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	4a06      	ldr	r2, [pc, #24]	; (80058d8 <updateTargetVelocity+0xc4>)
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a05      	ldr	r2, [pc, #20]	; (80058dc <updateTargetVelocity+0xc8>)
 80058c6:	6013      	str	r3, [r2, #0]
	}
}
 80058c8:	bf00      	nop
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2001cc4d 	.word	0x2001cc4d
 80058d0:	2001d194 	.word	0x2001d194
 80058d4:	2001d19a 	.word	0x2001d19a
 80058d8:	2001acf8 	.word	0x2001acf8
 80058dc:	2001cc70 	.word	0x2001cc70

080058e0 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 80058e6:	e03f      	b.n	8005968 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd fdb1 	bl	8003454 <getCrossLog>
 80058f2:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 80058f6:	f7fb fd07 	bl	8001308 <getTotalDistance>
 80058fa:	eeb0 7a40 	vmov.f32	s14, s0
 80058fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005906:	eef0 7ae7 	vabs.f32	s15, s15
 800590a:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 800590e:	edd7 7a00 	vldr	s15, [r7]
 8005912:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005984 <correctionTotalDistanceFromCrossLine+0xa4>
 8005916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	d80d      	bhi.n	800593c <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005922:	2200      	movs	r2, #0
 8005924:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005926:	ed97 0a01 	vldr	s0, [r7, #4]
 800592a:	f7fb fd17 	bl	800135c <setTotalDistance>
			cross_line_idx++;
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005938:	801a      	strh	r2, [r3, #0]
			break;
 800593a:	e01d      	b.n	8005978 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 800593c:	4b10      	ldr	r3, [pc, #64]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005946:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005948:	f7fd fbea 	bl	8003120 <getCrossLogSize>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d807      	bhi.n	8005968 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005958:	f7fd fbe2 	bl	8003120 <getCrossLogSize>
 800595c:	4603      	mov	r3, r0
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	4b07      	ldr	r3, [pc, #28]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005964:	801a      	strh	r2, [r3, #0]
			break;
 8005966:	e007      	b.n	8005978 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005968:	f7fd fbda 	bl	8003120 <getCrossLogSize>
 800596c:	4603      	mov	r3, r0
 800596e:	461a      	mov	r2, r3
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d2b7      	bcs.n	80058e8 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	2001cc3a 	.word	0x2001cc3a
 8005984:	437a0000 	.word	0x437a0000
 8005988:	2001cc3e 	.word	0x2001cc3e

0800598c <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005992:	e03f      	b.n	8005a14 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005994:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd fd71 	bl	8003480 <getSideLog>
 800599e:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 80059a2:	f7fb fcb1 	bl	8001308 <getTotalDistance>
 80059a6:	eeb0 7a40 	vmov.f32	s14, s0
 80059aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80059ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059b2:	eef0 7ae7 	vabs.f32	s15, s15
 80059b6:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 80059ba:	edd7 7a00 	vldr	s15, [r7]
 80059be:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005a30 <correctionTotalDistanceFromSideLine+0xa4>
 80059c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ca:	d80d      	bhi.n	80059e8 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <correctionTotalDistanceFromSideLine+0xa8>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 80059d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80059d6:	f7fb fcc1 	bl	800135c <setTotalDistance>
			side_line_idx++;
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 80059e4:	801a      	strh	r2, [r3, #0]
			break;
 80059e6:	e01d      	b.n	8005a24 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 80059f2:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 80059f4:	f7fd fba0 	bl	8003138 <getSideLogSize>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d807      	bhi.n	8005a14 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005a04:	f7fd fb98 	bl	8003138 <getSideLogSize>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a10:	801a      	strh	r2, [r3, #0]
			break;
 8005a12:	e007      	b.n	8005a24 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005a14:	f7fd fb90 	bl	8003138 <getSideLogSize>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d2b7      	bcs.n	8005994 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	2001cc3c 	.word	0x2001cc3c
 8005a30:	437a0000 	.word	0x437a0000
 8005a34:	2001cc40 	.word	0x2001cc40

08005a38 <getgoalStatus>:
		th = th + temp_theta;
	}
}
*/
bool getgoalStatus()
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
	return goal_flag;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <getgoalStatus+0x14>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	2001cc46 	.word	0x2001cc46

08005a50 <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
	return target_update_flag;
 8005a54:	4b03      	ldr	r3, [pc, #12]	; (8005a64 <getTargetUpdateflag+0x14>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	2001cc4c 	.word	0x2001cc4c

08005a68 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a72:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <setVelocityRange+0x28>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005a7c:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <setVelocityRange+0x2c>)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6013      	str	r3, [r2, #0]
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	2001cc50 	.word	0x2001cc50
 8005a94:	2001cc54 	.word	0x2001cc54

08005a98 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005aa2:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005aa6:	4a06      	ldr	r2, [pc, #24]	; (8005ac0 <setAccDec+0x28>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005aac:	4a05      	ldr	r2, [pc, #20]	; (8005ac4 <setAccDec+0x2c>)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6013      	str	r3, [r2, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2001cc58 	.word	0x2001cc58
 8005ac4:	2001cc5c 	.word	0x2001cc5c

08005ac8 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <setStraightRadius+0x1c>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6013      	str	r3, [r2, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	2001cc60 	.word	0x2001cc60

08005ae8 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <getSideSensorStatusL+0x14>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	2001cc44 	.word	0x2001cc44

08005b00 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <getSideSensorStatusR+0x14>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2001cc45 	.word	0x2001cc45

08005b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_MspInit+0x4c>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40023800 	.word	0x40023800

08005b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a79      	ldr	r2, [pc, #484]	; (8005d6c <HAL_ADC_MspInit+0x204>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d158      	bne.n	8005c3c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	4b78      	ldr	r3, [pc, #480]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	4a77      	ldr	r2, [pc, #476]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b98:	6453      	str	r3, [r2, #68]	; 0x44
 8005b9a:	4b75      	ldr	r3, [pc, #468]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	4b71      	ldr	r3, [pc, #452]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	4a70      	ldr	r2, [pc, #448]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb6:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005bc2:	230e      	movs	r3, #14
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4867      	ldr	r0, [pc, #412]	; (8005d74 <HAL_ADC_MspInit+0x20c>)
 8005bd6:	f001 ff65 	bl	8007aa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005bda:	4b67      	ldr	r3, [pc, #412]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005bdc:	4a67      	ldr	r2, [pc, #412]	; (8005d7c <HAL_ADC_MspInit+0x214>)
 8005bde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005be0:	4b65      	ldr	r3, [pc, #404]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005be6:	4b64      	ldr	r3, [pc, #400]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bec:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005bf2:	4b61      	ldr	r3, [pc, #388]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005c02:	4b5d      	ldr	r3, [pc, #372]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005c0a:	4b5b      	ldr	r3, [pc, #364]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c18:	4b57      	ldr	r3, [pc, #348]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005c1e:	4856      	ldr	r0, [pc, #344]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c20:	f001 f9e8 	bl	8006ff4 <HAL_DMA_Init>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005c2a:	f7ff f8fb 	bl	8004e24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a51      	ldr	r2, [pc, #324]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
 8005c34:	4a50      	ldr	r2, [pc, #320]	; (8005d78 <HAL_ADC_MspInit+0x210>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005c3a:	e092      	b.n	8005d62 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a4f      	ldr	r2, [pc, #316]	; (8005d80 <HAL_ADC_MspInit+0x218>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f040 808d 	bne.w	8005d62 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	4b48      	ldr	r3, [pc, #288]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c50:	4a47      	ldr	r2, [pc, #284]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c56:	6453      	str	r3, [r2, #68]	; 0x44
 8005c58:	4b45      	ldr	r3, [pc, #276]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	6313      	str	r3, [r2, #48]	; 0x30
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c8a:	f043 0304 	orr.w	r3, r3, #4
 8005c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c90:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	4a32      	ldr	r2, [pc, #200]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	6313      	str	r3, [r2, #48]	; 0x30
 8005cac:	4b30      	ldr	r3, [pc, #192]	; (8005d70 <HAL_ADC_MspInit+0x208>)
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005cb8:	23ff      	movs	r3, #255	; 0xff
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	482e      	ldr	r0, [pc, #184]	; (8005d84 <HAL_ADC_MspInit+0x21c>)
 8005ccc:	f001 feea 	bl	8007aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005cd0:	2330      	movs	r3, #48	; 0x30
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4824      	ldr	r0, [pc, #144]	; (8005d74 <HAL_ADC_MspInit+0x20c>)
 8005ce4:	f001 fede 	bl	8007aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cec:	2303      	movs	r3, #3
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4823      	ldr	r0, [pc, #140]	; (8005d88 <HAL_ADC_MspInit+0x220>)
 8005cfc:	f001 fed2 	bl	8007aa4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005d00:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d02:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <HAL_ADC_MspInit+0x228>)
 8005d04:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d0c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d0e:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005d1a:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d20:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d22:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d28:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d30:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005d32:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d38:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005d3a:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005d46:	4811      	ldr	r0, [pc, #68]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d48:	f001 f954 	bl	8006ff4 <HAL_DMA_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005d52:	f7ff f867 	bl	8004e24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38
 8005d5c:	4a0b      	ldr	r2, [pc, #44]	; (8005d8c <HAL_ADC_MspInit+0x224>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005d62:	bf00      	nop
 8005d64:	3738      	adds	r7, #56	; 0x38
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40012000 	.word	0x40012000
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40020800 	.word	0x40020800
 8005d78:	2001d004 	.word	0x2001d004
 8005d7c:	40026410 	.word	0x40026410
 8005d80:	40012100 	.word	0x40012100
 8005d84:	40020000 	.word	0x40020000
 8005d88:	40020400 	.word	0x40020400
 8005d8c:	2001d0ec 	.word	0x2001d0ec
 8005d90:	40026440 	.word	0x40026440

08005d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <HAL_I2C_MspInit+0x84>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d12c      	bne.n	8005e10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <HAL_I2C_MspInit+0x88>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_I2C_MspInit+0x88>)
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <HAL_I2C_MspInit+0x88>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dd8:	2312      	movs	r3, #18
 8005dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005de0:	2303      	movs	r3, #3
 8005de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005de4:	2304      	movs	r3, #4
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	4619      	mov	r1, r3
 8005dee:	480c      	ldr	r0, [pc, #48]	; (8005e20 <HAL_I2C_MspInit+0x8c>)
 8005df0:	f001 fe58 	bl	8007aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_I2C_MspInit+0x88>)
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	4a07      	ldr	r2, [pc, #28]	; (8005e1c <HAL_I2C_MspInit+0x88>)
 8005dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e02:	6413      	str	r3, [r2, #64]	; 0x40
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <HAL_I2C_MspInit+0x88>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e10:	bf00      	nop
 8005e12:	3728      	adds	r7, #40	; 0x28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40005400 	.word	0x40005400
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40020400 	.word	0x40020400

08005e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	60da      	str	r2, [r3, #12]
 8005e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <HAL_SPI_MspInit+0x84>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d12c      	bne.n	8005ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	4b18      	ldr	r3, [pc, #96]	; (8005eac <HAL_SPI_MspInit+0x88>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	4a17      	ldr	r2, [pc, #92]	; (8005eac <HAL_SPI_MspInit+0x88>)
 8005e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e54:	6413      	str	r3, [r2, #64]	; 0x40
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <HAL_SPI_MspInit+0x88>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_SPI_MspInit+0x88>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <HAL_SPI_MspInit+0x88>)
 8005e6c:	f043 0304 	orr.w	r3, r3, #4
 8005e70:	6313      	str	r3, [r2, #48]	; 0x30
 8005e72:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <HAL_SPI_MspInit+0x88>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005e7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005e90:	2306      	movs	r3, #6
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e94:	f107 0314 	add.w	r3, r7, #20
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <HAL_SPI_MspInit+0x8c>)
 8005e9c:	f001 fe02 	bl	8007aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005ea0:	bf00      	nop
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40003c00 	.word	0x40003c00
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40020800 	.word	0x40020800

08005eb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_TIM_PWM_MspInit+0x64>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10e      	bne.n	8005ee4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <HAL_TIM_PWM_MspInit+0x68>)
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <HAL_TIM_PWM_MspInit+0x68>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ed6:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <HAL_TIM_PWM_MspInit+0x68>)
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005ee2:	e012      	b.n	8005f0a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <HAL_TIM_PWM_MspInit+0x6c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d10d      	bne.n	8005f0a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_TIM_PWM_MspInit+0x68>)
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <HAL_TIM_PWM_MspInit+0x68>)
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	6453      	str	r3, [r2, #68]	; 0x44
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_TIM_PWM_MspInit+0x68>)
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40010400 	.word	0x40010400

08005f24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08c      	sub	sp, #48	; 0x30
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2c:	f107 031c 	add.w	r3, r7, #28
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a32      	ldr	r2, [pc, #200]	; (800600c <HAL_TIM_Encoder_MspInit+0xe8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d12c      	bne.n	8005fa0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	4a30      	ldr	r2, [pc, #192]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	6413      	str	r3, [r2, #64]	; 0x40
 8005f56:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	4b2a      	ldr	r3, [pc, #168]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	4a29      	ldr	r2, [pc, #164]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005f6c:	f043 0302 	orr.w	r3, r3, #2
 8005f70:	6313      	str	r3, [r2, #48]	; 0x30
 8005f72:	4b27      	ldr	r3, [pc, #156]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f7e:	2330      	movs	r3, #48	; 0x30
 8005f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f82:	2302      	movs	r3, #2
 8005f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f92:	f107 031c 	add.w	r3, r7, #28
 8005f96:	4619      	mov	r1, r3
 8005f98:	481e      	ldr	r0, [pc, #120]	; (8006014 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005f9a:	f001 fd83 	bl	8007aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005f9e:	e030      	b.n	8006002 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d12b      	bne.n	8006002 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	4a17      	ldr	r2, [pc, #92]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005fb4:	f043 0304 	orr.w	r3, r3, #4
 8005fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a10      	ldr	r2, [pc, #64]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <HAL_TIM_Encoder_MspInit+0xec>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fe2:	23c0      	movs	r3, #192	; 0xc0
 8005fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff6:	f107 031c 	add.w	r3, r7, #28
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4805      	ldr	r0, [pc, #20]	; (8006014 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005ffe:	f001 fd51 	bl	8007aa4 <HAL_GPIO_Init>
}
 8006002:	bf00      	nop
 8006004:	3730      	adds	r7, #48	; 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40000400 	.word	0x40000400
 8006010:	40023800 	.word	0x40023800
 8006014:	40020400 	.word	0x40020400
 8006018:	40000800 	.word	0x40000800

0800601c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1c      	ldr	r2, [pc, #112]	; (800609c <HAL_TIM_Base_MspInit+0x80>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d116      	bne.n	800605c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_TIM_Base_MspInit+0x84>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	4a1a      	ldr	r2, [pc, #104]	; (80060a0 <HAL_TIM_Base_MspInit+0x84>)
 8006038:	f043 0310 	orr.w	r3, r3, #16
 800603c:	6413      	str	r3, [r2, #64]	; 0x40
 800603e:	4b18      	ldr	r3, [pc, #96]	; (80060a0 <HAL_TIM_Base_MspInit+0x84>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800604a:	2200      	movs	r2, #0
 800604c:	2101      	movs	r1, #1
 800604e:	2036      	movs	r0, #54	; 0x36
 8006050:	f000 ff99 	bl	8006f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006054:	2036      	movs	r0, #54	; 0x36
 8006056:	f000 ffb2 	bl	8006fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800605a:	e01a      	b.n	8006092 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a10      	ldr	r2, [pc, #64]	; (80060a4 <HAL_TIM_Base_MspInit+0x88>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d115      	bne.n	8006092 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <HAL_TIM_Base_MspInit+0x84>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <HAL_TIM_Base_MspInit+0x84>)
 8006070:	f043 0320 	orr.w	r3, r3, #32
 8006074:	6413      	str	r3, [r2, #64]	; 0x40
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_TIM_Base_MspInit+0x84>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	60bb      	str	r3, [r7, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	2037      	movs	r0, #55	; 0x37
 8006088:	f000 ff7d 	bl	8006f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800608c:	2037      	movs	r0, #55	; 0x37
 800608e:	f000 ff96 	bl	8006fbe <HAL_NVIC_EnableIRQ>
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40001000 	.word	0x40001000
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40001400 	.word	0x40001400

080060a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b0:	f107 0314 	add.w	r3, r7, #20
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	609a      	str	r2, [r3, #8]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a25      	ldr	r2, [pc, #148]	; (800615c <HAL_TIM_MspPostInit+0xb4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d11f      	bne.n	800610a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	4b24      	ldr	r3, [pc, #144]	; (8006160 <HAL_TIM_MspPostInit+0xb8>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4a23      	ldr	r2, [pc, #140]	; (8006160 <HAL_TIM_MspPostInit+0xb8>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6313      	str	r3, [r2, #48]	; 0x30
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <HAL_TIM_MspPostInit+0xb8>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80060e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ec:	2302      	movs	r3, #2
 80060ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f4:	2300      	movs	r3, #0
 80060f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060f8:	2301      	movs	r3, #1
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	4619      	mov	r1, r3
 8006102:	4818      	ldr	r0, [pc, #96]	; (8006164 <HAL_TIM_MspPostInit+0xbc>)
 8006104:	f001 fcce 	bl	8007aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006108:	e023      	b.n	8006152 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a16      	ldr	r2, [pc, #88]	; (8006168 <HAL_TIM_MspPostInit+0xc0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d11e      	bne.n	8006152 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <HAL_TIM_MspPostInit+0xb8>)
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	4a10      	ldr	r2, [pc, #64]	; (8006160 <HAL_TIM_MspPostInit+0xb8>)
 800611e:	f043 0304 	orr.w	r3, r3, #4
 8006122:	6313      	str	r3, [r2, #48]	; 0x30
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <HAL_TIM_MspPostInit+0xb8>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8006130:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613e:	2300      	movs	r3, #0
 8006140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006142:	2303      	movs	r3, #3
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	4619      	mov	r1, r3
 800614c:	4807      	ldr	r0, [pc, #28]	; (800616c <HAL_TIM_MspPostInit+0xc4>)
 800614e:	f001 fca9 	bl	8007aa4 <HAL_GPIO_Init>
}
 8006152:	bf00      	nop
 8006154:	3728      	adds	r7, #40	; 0x28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40023800 	.word	0x40023800
 8006164:	40020000 	.word	0x40020000
 8006168:	40010400 	.word	0x40010400
 800616c:	40020800 	.word	0x40020800

08006170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <HAL_UART_MspInit+0x84>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d12c      	bne.n	80061ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <HAL_UART_MspInit+0x88>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <HAL_UART_MspInit+0x88>)
 800619c:	f043 0310 	orr.w	r3, r3, #16
 80061a0:	6453      	str	r3, [r2, #68]	; 0x44
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <HAL_UART_MspInit+0x88>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <HAL_UART_MspInit+0x88>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <HAL_UART_MspInit+0x88>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6313      	str	r3, [r2, #48]	; 0x30
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <HAL_UART_MspInit+0x88>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80061ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d0:	2302      	movs	r3, #2
 80061d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d8:	2303      	movs	r3, #3
 80061da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061dc:	2307      	movs	r3, #7
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e0:	f107 0314 	add.w	r3, r7, #20
 80061e4:	4619      	mov	r1, r3
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <HAL_UART_MspInit+0x8c>)
 80061e8:	f001 fc5c 	bl	8007aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80061ec:	bf00      	nop
 80061ee:	3728      	adds	r7, #40	; 0x28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40011000 	.word	0x40011000
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40020000 	.word	0x40020000

08006200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006204:	e7fe      	b.n	8006204 <NMI_Handler+0x4>

08006206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800620a:	e7fe      	b.n	800620a <HardFault_Handler+0x4>

0800620c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006210:	e7fe      	b.n	8006210 <MemManage_Handler+0x4>

08006212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006216:	e7fe      	b.n	8006216 <BusFault_Handler+0x4>

08006218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800621c:	e7fe      	b.n	800621c <UsageFault_Handler+0x4>

0800621e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006230:	bf00      	nop
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800623a:	b480      	push	{r7}
 800623c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800624c:	f000 f98a 	bl	8006564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}

08006254 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006258:	4802      	ldr	r0, [pc, #8]	; (8006264 <TIM6_DAC_IRQHandler+0x10>)
 800625a:	f003 fa38 	bl	80096ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	2001d064 	.word	0x2001d064

08006268 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800626c:	4802      	ldr	r0, [pc, #8]	; (8006278 <TIM7_IRQHandler+0x10>)
 800626e:	f003 fa2e 	bl	80096ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2001d14c 	.word	0x2001d14c

0800627c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006280:	4802      	ldr	r0, [pc, #8]	; (800628c <DMA2_Stream0_IRQHandler+0x10>)
 8006282:	f000 ffbd 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006286:	bf00      	nop
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	2001d004 	.word	0x2001d004

08006290 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006294:	4802      	ldr	r0, [pc, #8]	; (80062a0 <DMA2_Stream2_IRQHandler+0x10>)
 8006296:	f000 ffb3 	bl	8007200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800629a:	bf00      	nop
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	2001d0ec 	.word	0x2001d0ec

080062a4 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	2b52      	cmp	r3, #82	; 0x52
 80062b6:	d10a      	bne.n	80062ce <getSwitchStatus+0x2a>
 80062b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062bc:	480d      	ldr	r0, [pc, #52]	; (80062f4 <getSwitchStatus+0x50>)
 80062be:	f001 fd8b 	bl	8007dd8 <HAL_GPIO_ReadPin>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <getSwitchStatus+0x2a>
		ret = 1;
 80062c8:	2301      	movs	r3, #1
 80062ca:	81fb      	strh	r3, [r7, #14]
 80062cc:	e00c      	b.n	80062e8 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	2b4c      	cmp	r3, #76	; 0x4c
 80062d2:	d109      	bne.n	80062e8 <getSwitchStatus+0x44>
 80062d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d8:	4806      	ldr	r0, [pc, #24]	; (80062f4 <getSwitchStatus+0x50>)
 80062da:	f001 fd7d 	bl	8007dd8 <HAL_GPIO_ReadPin>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <getSwitchStatus+0x44>
		ret = 1;
 80062e4:	2301      	movs	r3, #1
 80062e6:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 80062e8:	89fb      	ldrh	r3, [r7, #14]

}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40020000 	.word	0x40020000

080062f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e00a      	b.n	8006320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800630a:	f3af 8000 	nop.w
 800630e:	4601      	mov	r1, r0
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	60ba      	str	r2, [r7, #8]
 8006316:	b2ca      	uxtb	r2, r1
 8006318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	3301      	adds	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	429a      	cmp	r2, r3
 8006326:	dbf0      	blt.n	800630a <_read+0x12>
	}

return len;
 8006328:	687b      	ldr	r3, [r7, #4]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	e009      	b.n	8006358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	60ba      	str	r2, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd fc05 	bl	8003b5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	3301      	adds	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	dbf1      	blt.n	8006344 <_write+0x12>
	}
	return len;
 8006360:	687b      	ldr	r3, [r7, #4]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_close>:

int _close(int file)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
	return -1;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006392:	605a      	str	r2, [r3, #4]
	return 0;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <_isatty>:

int _isatty(int file)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
	return 1;
 80063aa:	2301      	movs	r3, #1
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
	return 0;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063dc:	4a14      	ldr	r2, [pc, #80]	; (8006430 <_sbrk+0x5c>)
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <_sbrk+0x60>)
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <_sbrk+0x64>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <_sbrk+0x64>)
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <_sbrk+0x68>)
 80063f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <_sbrk+0x64>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d207      	bcs.n	8006414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006404:	f005 fbb6 	bl	800bb74 <__errno>
 8006408:	4602      	mov	r2, r0
 800640a:	230c      	movs	r3, #12
 800640c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	e009      	b.n	8006428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <_sbrk+0x64>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <_sbrk+0x64>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	4a05      	ldr	r2, [pc, #20]	; (8006438 <_sbrk+0x64>)
 8006424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20020000 	.word	0x20020000
 8006434:	00000400 	.word	0x00000400
 8006438:	2001cc74 	.word	0x2001cc74
 800643c:	2001d1c8 	.word	0x2001d1c8

08006440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <SystemInit+0x28>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	4a07      	ldr	r2, [pc, #28]	; (8006468 <SystemInit+0x28>)
 800644c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <SystemInit+0x28>)
 8006456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800645a:	609a      	str	r2, [r3, #8]
#endif
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	e000ed00 	.word	0xe000ed00

0800646c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800646c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006472:	e003      	b.n	800647c <LoopCopyDataInit>

08006474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800647a:	3104      	adds	r1, #4

0800647c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800647c:	480b      	ldr	r0, [pc, #44]	; (80064ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006484:	d3f6      	bcc.n	8006474 <CopyDataInit>
  ldr  r2, =_sbss
 8006486:	4a0b      	ldr	r2, [pc, #44]	; (80064b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006488:	e002      	b.n	8006490 <LoopFillZerobss>

0800648a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800648a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800648c:	f842 3b04 	str.w	r3, [r2], #4

08006490 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006494:	d3f9      	bcc.n	800648a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006496:	f7ff ffd3 	bl	8006440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800649a:	f005 fb71 	bl	800bb80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800649e:	f7fd fbd7 	bl	8003c50 <main>
  bx  lr    
 80064a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80064a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80064a8:	08010608 	.word	0x08010608
  ldr  r0, =_sdata
 80064ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80064b0:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80064b4:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80064b8:	2001d1c4 	.word	0x2001d1c4

080064bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064bc:	e7fe      	b.n	80064bc <ADC_IRQHandler>
	...

080064c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064c4:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <HAL_Init+0x40>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <HAL_Init+0x40>)
 80064ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <HAL_Init+0x40>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <HAL_Init+0x40>)
 80064d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064dc:	4b08      	ldr	r3, [pc, #32]	; (8006500 <HAL_Init+0x40>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a07      	ldr	r2, [pc, #28]	; (8006500 <HAL_Init+0x40>)
 80064e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064e8:	2003      	movs	r0, #3
 80064ea:	f000 fd41 	bl	8006f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064ee:	2000      	movs	r0, #0
 80064f0:	f000 f808 	bl	8006504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064f4:	f7ff fb10 	bl	8005b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40023c00 	.word	0x40023c00

08006504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800650c:	4b12      	ldr	r3, [pc, #72]	; (8006558 <HAL_InitTick+0x54>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b12      	ldr	r3, [pc, #72]	; (800655c <HAL_InitTick+0x58>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	4619      	mov	r1, r3
 8006516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800651a:	fbb3 f3f1 	udiv	r3, r3, r1
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fd59 	bl	8006fda <HAL_SYSTICK_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e00e      	b.n	8006550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b0f      	cmp	r3, #15
 8006536:	d80a      	bhi.n	800654e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006538:	2200      	movs	r2, #0
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	f000 fd21 	bl	8006f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006544:	4a06      	ldr	r2, [pc, #24]	; (8006560 <HAL_InitTick+0x5c>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000034 	.word	0x20000034
 800655c:	2000003c 	.word	0x2000003c
 8006560:	20000038 	.word	0x20000038

08006564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_IncTick+0x20>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <HAL_IncTick+0x24>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4413      	add	r3, r2
 8006574:	4a04      	ldr	r2, [pc, #16]	; (8006588 <HAL_IncTick+0x24>)
 8006576:	6013      	str	r3, [r2, #0]
}
 8006578:	bf00      	nop
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2000003c 	.word	0x2000003c
 8006588:	2001d19c 	.word	0x2001d19c

0800658c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  return uwTick;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <HAL_GetTick+0x14>)
 8006592:	681b      	ldr	r3, [r3, #0]
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	2001d19c 	.word	0x2001d19c

080065a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065ac:	f7ff ffee 	bl	800658c <HAL_GetTick>
 80065b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d005      	beq.n	80065ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <HAL_Delay+0x40>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065ca:	bf00      	nop
 80065cc:	f7ff ffde 	bl	800658c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d8f7      	bhi.n	80065cc <HAL_Delay+0x28>
  {
  }
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	2000003c 	.word	0x2000003c

080065e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e033      	b.n	8006666 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff faae 	bl	8005b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b00      	cmp	r3, #0
 8006624:	d118      	bne.n	8006658 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800662e:	f023 0302 	bic.w	r3, r3, #2
 8006632:	f043 0202 	orr.w	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa4a 	bl	8006ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
 8006656:	e001      	b.n	800665c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_ADC_Start_DMA+0x1e>
 800668a:	2302      	movs	r3, #2
 800668c:	e0cc      	b.n	8006828 <HAL_ADC_Start_DMA+0x1b8>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d018      	beq.n	80066d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80066b4:	4b5e      	ldr	r3, [pc, #376]	; (8006830 <HAL_ADC_Start_DMA+0x1c0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a5e      	ldr	r2, [pc, #376]	; (8006834 <HAL_ADC_Start_DMA+0x1c4>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	0c9a      	lsrs	r2, r3, #18
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066c8:	e002      	b.n	80066d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f9      	bne.n	80066ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 80a0 	bne.w	8006826 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006710:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d106      	bne.n	8006734 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	f023 0206 	bic.w	r2, r3, #6
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	645a      	str	r2, [r3, #68]	; 0x44
 8006732:	e002      	b.n	800673a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006742:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <HAL_ADC_Start_DMA+0x1c8>)
 8006744:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	4a3c      	ldr	r2, [pc, #240]	; (800683c <HAL_ADC_Start_DMA+0x1cc>)
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	4a3b      	ldr	r2, [pc, #236]	; (8006840 <HAL_ADC_Start_DMA+0x1d0>)
 8006754:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	4a3a      	ldr	r2, [pc, #232]	; (8006844 <HAL_ADC_Start_DMA+0x1d4>)
 800675c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006766:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006776:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006786:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	334c      	adds	r3, #76	; 0x4c
 8006792:	4619      	mov	r1, r3
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f000 fcda 	bl	8007150 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d12a      	bne.n	80067fe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a26      	ldr	r2, [pc, #152]	; (8006848 <HAL_ADC_Start_DMA+0x1d8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d015      	beq.n	80067de <HAL_ADC_Start_DMA+0x16e>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a25      	ldr	r2, [pc, #148]	; (800684c <HAL_ADC_Start_DMA+0x1dc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d105      	bne.n	80067c8 <HAL_ADC_Start_DMA+0x158>
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <HAL_ADC_Start_DMA+0x1c8>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a20      	ldr	r2, [pc, #128]	; (8006850 <HAL_ADC_Start_DMA+0x1e0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d129      	bne.n	8006826 <HAL_ADC_Start_DMA+0x1b6>
 80067d2:	4b19      	ldr	r3, [pc, #100]	; (8006838 <HAL_ADC_Start_DMA+0x1c8>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2b0f      	cmp	r3, #15
 80067dc:	d823      	bhi.n	8006826 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11c      	bne.n	8006826 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	e013      	b.n	8006826 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a11      	ldr	r2, [pc, #68]	; (8006848 <HAL_ADC_Start_DMA+0x1d8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d10e      	bne.n	8006826 <HAL_ADC_Start_DMA+0x1b6>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d107      	bne.n	8006826 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006824:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000034 	.word	0x20000034
 8006834:	431bde83 	.word	0x431bde83
 8006838:	40012300 	.word	0x40012300
 800683c:	08006ccd 	.word	0x08006ccd
 8006840:	08006d87 	.word	0x08006d87
 8006844:	08006da3 	.word	0x08006da3
 8006848:	40012000 	.word	0x40012000
 800684c:	40012100 	.word	0x40012100
 8006850:	40012200 	.word	0x40012200

08006854 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x1c>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e105      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x228>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d925      	bls.n	8006908 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68d9      	ldr	r1, [r3, #12]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	4613      	mov	r3, r2
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4413      	add	r3, r2
 80068d0:	3b1e      	subs	r3, #30
 80068d2:	2207      	movs	r2, #7
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	43da      	mvns	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	400a      	ands	r2, r1
 80068e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68d9      	ldr	r1, [r3, #12]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4618      	mov	r0, r3
 80068f4:	4603      	mov	r3, r0
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	4403      	add	r3, r0
 80068fa:	3b1e      	subs	r3, #30
 80068fc:	409a      	lsls	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	e022      	b.n	800694e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6919      	ldr	r1, [r3, #16]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	4613      	mov	r3, r2
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	4413      	add	r3, r2
 800691c:	2207      	movs	r2, #7
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43da      	mvns	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	400a      	ands	r2, r1
 800692a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6919      	ldr	r1, [r3, #16]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	4618      	mov	r0, r3
 800693e:	4603      	mov	r3, r0
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4403      	add	r3, r0
 8006944:	409a      	lsls	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d824      	bhi.n	80069a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	3b05      	subs	r3, #5
 8006968:	221f      	movs	r2, #31
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43da      	mvns	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	400a      	ands	r2, r1
 8006976:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	4618      	mov	r0, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	3b05      	subs	r3, #5
 8006992:	fa00 f203 	lsl.w	r2, r0, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	635a      	str	r2, [r3, #52]	; 0x34
 800699e:	e04c      	b.n	8006a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	d824      	bhi.n	80069f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	3b23      	subs	r3, #35	; 0x23
 80069ba:	221f      	movs	r2, #31
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	43da      	mvns	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	400a      	ands	r2, r1
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	4618      	mov	r0, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	3b23      	subs	r3, #35	; 0x23
 80069e4:	fa00 f203 	lsl.w	r2, r0, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
 80069f0:	e023      	b.n	8006a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	3b41      	subs	r3, #65	; 0x41
 8006a04:	221f      	movs	r2, #31
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43da      	mvns	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	400a      	ands	r2, r1
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4618      	mov	r0, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3b41      	subs	r3, #65	; 0x41
 8006a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a3a:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <HAL_ADC_ConfigChannel+0x234>)
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a21      	ldr	r2, [pc, #132]	; (8006ac8 <HAL_ADC_ConfigChannel+0x238>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d109      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x1cc>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b12      	cmp	r3, #18
 8006a4e:	d105      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <HAL_ADC_ConfigChannel+0x238>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d123      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x21e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d003      	beq.n	8006a76 <HAL_ADC_ConfigChannel+0x1e6>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b11      	cmp	r3, #17
 8006a74:	d11b      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d111      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a8a:	4b10      	ldr	r3, [pc, #64]	; (8006acc <HAL_ADC_ConfigChannel+0x23c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a10      	ldr	r2, [pc, #64]	; (8006ad0 <HAL_ADC_ConfigChannel+0x240>)
 8006a90:	fba2 2303 	umull	r2, r3, r2, r3
 8006a94:	0c9a      	lsrs	r2, r3, #18
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006aa0:	e002      	b.n	8006aa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f9      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40012300 	.word	0x40012300
 8006ac8:	40012000 	.word	0x40012000
 8006acc:	20000034 	.word	0x20000034
 8006ad0:	431bde83 	.word	0x431bde83

08006ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006adc:	4b79      	ldr	r3, [pc, #484]	; (8006cc4 <ADC_Init+0x1f0>)
 8006ade:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6859      	ldr	r1, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	021a      	lsls	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6859      	ldr	r1, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6899      	ldr	r1, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	4a58      	ldr	r2, [pc, #352]	; (8006cc8 <ADC_Init+0x1f4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d022      	beq.n	8006bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6899      	ldr	r1, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6899      	ldr	r1, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	e00f      	b.n	8006bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0202 	bic.w	r2, r2, #2
 8006be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6899      	ldr	r1, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7e1b      	ldrb	r3, [r3, #24]
 8006bec:	005a      	lsls	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	035a      	lsls	r2, r3, #13
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
 8006c36:	e007      	b.n	8006c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	051a      	lsls	r2, r3, #20
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6899      	ldr	r1, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c8a:	025a      	lsls	r2, r3, #9
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	029a      	lsls	r2, r3, #10
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40012300 	.word	0x40012300
 8006cc8:	0f000001 	.word	0x0f000001

08006ccc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d13c      	bne.n	8006d60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d12b      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d127      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d119      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0220 	bic.w	r2, r2, #32
 8006d32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fd7b 	bl	8006854 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d5e:	e00e      	b.n	8006d7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fd85 	bl	800687c <HAL_ADC_ErrorCallback>
}
 8006d72:	e004      	b.n	8006d7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fd67 	bl	8006868 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2240      	movs	r2, #64	; 0x40
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fd5a 	bl	800687c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <__NVIC_SetPriorityGrouping+0x44>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dec:	4013      	ands	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e02:	4a04      	ldr	r2, [pc, #16]	; (8006e14 <__NVIC_SetPriorityGrouping+0x44>)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	60d3      	str	r3, [r2, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e1c:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <__NVIC_GetPriorityGrouping+0x18>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	0a1b      	lsrs	r3, r3, #8
 8006e22:	f003 0307 	and.w	r3, r3, #7
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	db0b      	blt.n	8006e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	f003 021f 	and.w	r2, r3, #31
 8006e4c:	4907      	ldr	r1, [pc, #28]	; (8006e6c <__NVIC_EnableIRQ+0x38>)
 8006e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2001      	movs	r0, #1
 8006e56:	fa00 f202 	lsl.w	r2, r0, r2
 8006e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	e000e100 	.word	0xe000e100

08006e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	6039      	str	r1, [r7, #0]
 8006e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	db0a      	blt.n	8006e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	490c      	ldr	r1, [pc, #48]	; (8006ebc <__NVIC_SetPriority+0x4c>)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	0112      	lsls	r2, r2, #4
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	440b      	add	r3, r1
 8006e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e98:	e00a      	b.n	8006eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	4908      	ldr	r1, [pc, #32]	; (8006ec0 <__NVIC_SetPriority+0x50>)
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	3b04      	subs	r3, #4
 8006ea8:	0112      	lsls	r2, r2, #4
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	440b      	add	r3, r1
 8006eae:	761a      	strb	r2, [r3, #24]
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	e000e100 	.word	0xe000e100
 8006ec0:	e000ed00 	.word	0xe000ed00

08006ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f1c3 0307 	rsb	r3, r3, #7
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	bf28      	it	cs
 8006ee2:	2304      	movcs	r3, #4
 8006ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d902      	bls.n	8006ef4 <NVIC_EncodePriority+0x30>
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3b03      	subs	r3, #3
 8006ef2:	e000      	b.n	8006ef6 <NVIC_EncodePriority+0x32>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43da      	mvns	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	401a      	ands	r2, r3
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
 8006f16:	43d9      	mvns	r1, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f1c:	4313      	orrs	r3, r2
         );
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3724      	adds	r7, #36	; 0x24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f3c:	d301      	bcc.n	8006f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e00f      	b.n	8006f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f42:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <SysTick_Config+0x40>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f4a:	210f      	movs	r1, #15
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	f7ff ff8e 	bl	8006e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <SysTick_Config+0x40>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f5a:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <SysTick_Config+0x40>)
 8006f5c:	2207      	movs	r2, #7
 8006f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	e000e010 	.word	0xe000e010

08006f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff ff29 	bl	8006dd0 <__NVIC_SetPriorityGrouping>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f98:	f7ff ff3e 	bl	8006e18 <__NVIC_GetPriorityGrouping>
 8006f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f7ff ff8e 	bl	8006ec4 <NVIC_EncodePriority>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff5d 	bl	8006e70 <__NVIC_SetPriority>
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff ff31 	bl	8006e34 <__NVIC_EnableIRQ>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ffa2 	bl	8006f2c <SysTick_Config>
 8006fe8:	4603      	mov	r3, r0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007000:	f7ff fac4 	bl	800658c <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e099      	b.n	8007144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0201 	bic.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007030:	e00f      	b.n	8007052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007032:	f7ff faab 	bl	800658c <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b05      	cmp	r3, #5
 800703e:	d908      	bls.n	8007052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2203      	movs	r2, #3
 800704a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e078      	b.n	8007144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e8      	bne.n	8007032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4b38      	ldr	r3, [pc, #224]	; (800714c <HAL_DMA_Init+0x158>)
 800706c:	4013      	ands	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800707e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800708a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d107      	bne.n	80070bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	4313      	orrs	r3, r2
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0307 	bic.w	r3, r3, #7
 80070d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d117      	bne.n	8007116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00e      	beq.n	8007116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fa6f 	bl	80075dc <DMA_CheckFifoParam>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2240      	movs	r2, #64	; 0x40
 8007108:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007112:	2301      	movs	r3, #1
 8007114:	e016      	b.n	8007144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa26 	bl	8007570 <DMA_CalcBaseAndBitshift>
 8007124:	4603      	mov	r3, r0
 8007126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	223f      	movs	r2, #63	; 0x3f
 800712e:	409a      	lsls	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	f010803f 	.word	0xf010803f

08007150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007166:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_DMA_Start_IT+0x26>
 8007172:	2302      	movs	r3, #2
 8007174:	e040      	b.n	80071f8 <HAL_DMA_Start_IT+0xa8>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	d12f      	bne.n	80071ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f9b8 	bl	8007514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	223f      	movs	r2, #63	; 0x3f
 80071aa:	409a      	lsls	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0216 	orr.w	r2, r2, #22
 80071be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e005      	b.n	80071f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
 80071f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800720c:	4b92      	ldr	r3, [pc, #584]	; (8007458 <HAL_DMA_IRQHandler+0x258>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a92      	ldr	r2, [pc, #584]	; (800745c <HAL_DMA_IRQHandler+0x25c>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	0a9b      	lsrs	r3, r3, #10
 8007218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722a:	2208      	movs	r2, #8
 800722c:	409a      	lsls	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01a      	beq.n	800726c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d013      	beq.n	800726c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0204 	bic.w	r2, r2, #4
 8007252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007258:	2208      	movs	r2, #8
 800725a:	409a      	lsls	r2, r3
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007270:	2201      	movs	r2, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	2201      	movs	r2, #1
 8007290:	409a      	lsls	r2, r3
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a6:	2204      	movs	r2, #4
 80072a8:	409a      	lsls	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d012      	beq.n	80072d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	2204      	movs	r2, #4
 80072c6:	409a      	lsls	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	f043 0204 	orr.w	r2, r3, #4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	2210      	movs	r2, #16
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d043      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d03c      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fa:	2210      	movs	r2, #16
 80072fc:	409a      	lsls	r2, r3
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d018      	beq.n	8007342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d024      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
 800732e:	e01f      	b.n	8007370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01b      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	e016      	b.n	8007370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0208 	bic.w	r2, r2, #8
 800735e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	2220      	movs	r2, #32
 8007376:	409a      	lsls	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 808e 	beq.w	800749e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8086 	beq.w	800749e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	2220      	movs	r2, #32
 8007398:	409a      	lsls	r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d136      	bne.n	8007418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0216 	bic.w	r2, r2, #22
 80073b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <HAL_DMA_IRQHandler+0x1da>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0208 	bic.w	r2, r2, #8
 80073e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	223f      	movs	r2, #63	; 0x3f
 80073f0:	409a      	lsls	r2, r3
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	2b00      	cmp	r3, #0
 800740c:	d07d      	beq.n	800750a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
        }
        return;
 8007416:	e078      	b.n	800750a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	2b00      	cmp	r3, #0
 800743a:	d030      	beq.n	800749e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
 8007444:	e02b      	b.n	800749e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d027      	beq.n	800749e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
 8007456:	e022      	b.n	800749e <HAL_DMA_IRQHandler+0x29e>
 8007458:	20000034 	.word	0x20000034
 800745c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0210 	bic.w	r2, r2, #16
 800747c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d032      	beq.n	800750c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d022      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2205      	movs	r2, #5
 80074b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d307      	bcc.n	80074e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f2      	bne.n	80074ca <HAL_DMA_IRQHandler+0x2ca>
 80074e4:	e000      	b.n	80074e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80074e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
 8007508:	e000      	b.n	800750c <HAL_DMA_IRQHandler+0x30c>
        return;
 800750a:	bf00      	nop
    }
  }
}
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d108      	bne.n	8007554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007552:	e007      	b.n	8007564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	60da      	str	r2, [r3, #12]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	3b10      	subs	r3, #16
 8007580:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <DMA_CalcBaseAndBitshift+0x64>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800758a:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <DMA_CalcBaseAndBitshift+0x68>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d909      	bls.n	80075b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	1d1a      	adds	r2, r3, #4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	659a      	str	r2, [r3, #88]	; 0x58
 80075b0:	e007      	b.n	80075c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	aaaaaaab 	.word	0xaaaaaaab
 80075d8:	080100f4 	.word	0x080100f4

080075dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d11f      	bne.n	8007636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d855      	bhi.n	80076a8 <DMA_CheckFifoParam+0xcc>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <DMA_CheckFifoParam+0x28>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007615 	.word	0x08007615
 8007608:	08007627 	.word	0x08007627
 800760c:	08007615 	.word	0x08007615
 8007610:	080076a9 	.word	0x080076a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d045      	beq.n	80076ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007624:	e042      	b.n	80076ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800762e:	d13f      	bne.n	80076b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007634:	e03c      	b.n	80076b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763e:	d121      	bne.n	8007684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d836      	bhi.n	80076b4 <DMA_CheckFifoParam+0xd8>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <DMA_CheckFifoParam+0x70>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007663 	.word	0x08007663
 8007654:	0800765d 	.word	0x0800765d
 8007658:	08007675 	.word	0x08007675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
      break;
 8007660:	e02f      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d024      	beq.n	80076b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007672:	e021      	b.n	80076b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800767c:	d11e      	bne.n	80076bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007682:	e01b      	b.n	80076bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d902      	bls.n	8007690 <DMA_CheckFifoParam+0xb4>
 800768a:	2b03      	cmp	r3, #3
 800768c:	d003      	beq.n	8007696 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800768e:	e018      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e015      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
      break;
 80076a6:	e00b      	b.n	80076c0 <DMA_CheckFifoParam+0xe4>
      break;
 80076a8:	bf00      	nop
 80076aa:	e00a      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076ac:	bf00      	nop
 80076ae:	e008      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076b0:	bf00      	nop
 80076b2:	e006      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076b4:	bf00      	nop
 80076b6:	e004      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
      break;
 80076c0:	bf00      	nop
    }
  } 
  
  return status; 
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <HAL_FLASH_Unlock+0x38>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da0b      	bge.n	80076fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <HAL_FLASH_Unlock+0x38>)
 80076e4:	4a09      	ldr	r2, [pc, #36]	; (800770c <HAL_FLASH_Unlock+0x3c>)
 80076e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <HAL_FLASH_Unlock+0x38>)
 80076ea:	4a09      	ldr	r2, [pc, #36]	; (8007710 <HAL_FLASH_Unlock+0x40>)
 80076ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_FLASH_Unlock+0x38>)
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da01      	bge.n	80076fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80076fa:	79fb      	ldrb	r3, [r7, #7]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40023c00 	.word	0x40023c00
 800770c:	45670123 	.word	0x45670123
 8007710:	cdef89ab 	.word	0xcdef89ab

08007714 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <HAL_FLASH_Lock+0x1c>)
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	4a04      	ldr	r2, [pc, #16]	; (8007730 <HAL_FLASH_Lock+0x1c>)
 800771e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007722:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	40023c00 	.word	0x40023c00

08007734 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <FLASH_WaitForLastOperation+0x78>)
 8007742:	2200      	movs	r2, #0
 8007744:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007746:	f7fe ff21 	bl	800658c <HAL_GetTick>
 800774a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800774c:	e010      	b.n	8007770 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d00c      	beq.n	8007770 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <FLASH_WaitForLastOperation+0x38>
 800775c:	f7fe ff16 	bl	800658c <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d201      	bcs.n	8007770 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e019      	b.n	80077a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <FLASH_WaitForLastOperation+0x7c>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e8      	bne.n	800774e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800777c:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <FLASH_WaitForLastOperation+0x7c>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <FLASH_WaitForLastOperation+0x7c>)
 800778a:	2201      	movs	r2, #1
 800778c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <FLASH_WaitForLastOperation+0x7c>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800779a:	f000 f80b 	bl	80077b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
  
}  
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2001d1a0 	.word	0x2001d1a0
 80077b0:	40023c00 	.word	0x40023c00

080077b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80077b8:	4b27      	ldr	r3, [pc, #156]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80077c4:	4b25      	ldr	r3, [pc, #148]	; (800785c <FLASH_SetErrorCode+0xa8>)
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f043 0310 	orr.w	r3, r3, #16
 80077cc:	4a23      	ldr	r2, [pc, #140]	; (800785c <FLASH_SetErrorCode+0xa8>)
 80077ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80077d0:	4b21      	ldr	r3, [pc, #132]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 80077d2:	2210      	movs	r2, #16
 80077d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80077d6:	4b20      	ldr	r3, [pc, #128]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80077e2:	4b1e      	ldr	r3, [pc, #120]	; (800785c <FLASH_SetErrorCode+0xa8>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f043 0308 	orr.w	r3, r3, #8
 80077ea:	4a1c      	ldr	r2, [pc, #112]	; (800785c <FLASH_SetErrorCode+0xa8>)
 80077ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80077ee:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 80077f0:	2220      	movs	r2, #32
 80077f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80077f4:	4b18      	ldr	r3, [pc, #96]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <FLASH_SetErrorCode+0xa8>)
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f043 0304 	orr.w	r3, r3, #4
 8007808:	4a14      	ldr	r2, [pc, #80]	; (800785c <FLASH_SetErrorCode+0xa8>)
 800780a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800780c:	4b12      	ldr	r3, [pc, #72]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 800780e:	2240      	movs	r2, #64	; 0x40
 8007810:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781a:	2b00      	cmp	r3, #0
 800781c:	d008      	beq.n	8007830 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <FLASH_SetErrorCode+0xa8>)
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f043 0302 	orr.w	r3, r3, #2
 8007826:	4a0d      	ldr	r2, [pc, #52]	; (800785c <FLASH_SetErrorCode+0xa8>)
 8007828:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 800782c:	2280      	movs	r2, #128	; 0x80
 800782e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007830:	4b09      	ldr	r3, [pc, #36]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800783c:	4b07      	ldr	r3, [pc, #28]	; (800785c <FLASH_SetErrorCode+0xa8>)
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	f043 0320 	orr.w	r3, r3, #32
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <FLASH_SetErrorCode+0xa8>)
 8007846:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007848:	4b03      	ldr	r3, [pc, #12]	; (8007858 <FLASH_SetErrorCode+0xa4>)
 800784a:	2202      	movs	r2, #2
 800784c:	60da      	str	r2, [r3, #12]
  }
}
 800784e:	bf00      	nop
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	40023c00 	.word	0x40023c00
 800785c:	2001d1a0 	.word	0x2001d1a0

08007860 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007872:	4b31      	ldr	r3, [pc, #196]	; (8007938 <HAL_FLASHEx_Erase+0xd8>)
 8007874:	7e1b      	ldrb	r3, [r3, #24]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_FLASHEx_Erase+0x1e>
 800787a:	2302      	movs	r3, #2
 800787c:	e058      	b.n	8007930 <HAL_FLASHEx_Erase+0xd0>
 800787e:	4b2e      	ldr	r3, [pc, #184]	; (8007938 <HAL_FLASHEx_Erase+0xd8>)
 8007880:	2201      	movs	r2, #1
 8007882:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007884:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007888:	f7ff ff54 	bl	8007734 <FLASH_WaitForLastOperation>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d148      	bne.n	8007928 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d115      	bne.n	80078d2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f000 f844 	bl	8007940 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80078bc:	f7ff ff3a 	bl	8007734 <FLASH_WaitForLastOperation>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80078c4:	4b1d      	ldr	r3, [pc, #116]	; (800793c <HAL_FLASHEx_Erase+0xdc>)
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	4a1c      	ldr	r2, [pc, #112]	; (800793c <HAL_FLASHEx_Erase+0xdc>)
 80078ca:	f023 0304 	bic.w	r3, r3, #4
 80078ce:	6113      	str	r3, [r2, #16]
 80078d0:	e028      	b.n	8007924 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	60bb      	str	r3, [r7, #8]
 80078d8:	e01c      	b.n	8007914 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	4619      	mov	r1, r3
 80078e2:	68b8      	ldr	r0, [r7, #8]
 80078e4:	f000 f850 	bl	8007988 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80078ec:	f7ff ff22 	bl	8007734 <FLASH_WaitForLastOperation>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <HAL_FLASHEx_Erase+0xdc>)
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	4a10      	ldr	r2, [pc, #64]	; (800793c <HAL_FLASHEx_Erase+0xdc>)
 80078fa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80078fe:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	601a      	str	r2, [r3, #0]
          break;
 800790c:	e00a      	b.n	8007924 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3301      	adds	r3, #1
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4413      	add	r3, r2
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	429a      	cmp	r2, r3
 8007922:	d3da      	bcc.n	80078da <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007924:	f000 f878 	bl	8007a18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007928:	4b03      	ldr	r3, [pc, #12]	; (8007938 <HAL_FLASHEx_Erase+0xd8>)
 800792a:	2200      	movs	r2, #0
 800792c:	761a      	strb	r2, [r3, #24]

  return status;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	2001d1a0 	.word	0x2001d1a0
 800793c:	40023c00 	.word	0x40023c00

08007940 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <FLASH_MassErase+0x44>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <FLASH_MassErase+0x44>)
 8007952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007956:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <FLASH_MassErase+0x44>)
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	4a09      	ldr	r2, [pc, #36]	; (8007984 <FLASH_MassErase+0x44>)
 800795e:	f043 0304 	orr.w	r3, r3, #4
 8007962:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <FLASH_MassErase+0x44>)
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	4313      	orrs	r3, r2
 800796e:	4a05      	ldr	r2, [pc, #20]	; (8007984 <FLASH_MassErase+0x44>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	6113      	str	r3, [r2, #16]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40023c00 	.word	0x40023c00

08007988 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e010      	b.n	80079c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d103      	bne.n	80079b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80079aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e009      	b.n	80079c6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d103      	bne.n	80079c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e002      	b.n	80079c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80079c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80079c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80079d2:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	490f      	ldr	r1, [pc, #60]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80079de:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80079e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	4313      	orrs	r3, r2
 80079f4:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079f6:	f043 0302 	orr.w	r3, r3, #2
 80079fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <FLASH_Erase_Sector+0x8c>)
 8007a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a06:	6113      	str	r3, [r2, #16]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40023c00 	.word	0x40023c00

08007a18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007a1c:	4b20      	ldr	r3, [pc, #128]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1c      	ldr	r2, [pc, #112]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a32:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007a34:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a19      	ldr	r2, [pc, #100]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a16      	ldr	r2, [pc, #88]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a4a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a4c:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a56:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d017      	beq.n	8007a94 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007a64:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a0d      	ldr	r2, [pc, #52]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a0a      	ldr	r2, [pc, #40]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a07      	ldr	r2, [pc, #28]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a86:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a04      	ldr	r2, [pc, #16]	; (8007aa0 <FLASH_FlushCaches+0x88>)
 8007a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a92:	6013      	str	r3, [r2, #0]
  }
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40023c00 	.word	0x40023c00

08007aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b089      	sub	sp, #36	; 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	e16b      	b.n	8007d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	f040 815a 	bne.w	8007d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d00b      	beq.n	8007afe <HAL_GPIO_Init+0x5a>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d007      	beq.n	8007afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007af2:	2b11      	cmp	r3, #17
 8007af4:	d003      	beq.n	8007afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b12      	cmp	r3, #18
 8007afc:	d130      	bne.n	8007b60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	2203      	movs	r2, #3
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	4013      	ands	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b34:	2201      	movs	r2, #1
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4013      	ands	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 0201 	and.w	r2, r3, #1
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	fa02 f303 	lsl.w	r3, r2, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b70:	43db      	mvns	r3, r3
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	4013      	ands	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d003      	beq.n	8007ba0 <HAL_GPIO_Init+0xfc>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b12      	cmp	r3, #18
 8007b9e:	d123      	bne.n	8007be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	08da      	lsrs	r2, r3, #3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3208      	adds	r2, #8
 8007ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	220f      	movs	r2, #15
 8007bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	08da      	lsrs	r2, r3, #3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3208      	adds	r2, #8
 8007be2:	69b9      	ldr	r1, [r7, #24]
 8007be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f003 0203 	and.w	r2, r3, #3
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80b4 	beq.w	8007d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	4b5f      	ldr	r3, [pc, #380]	; (8007dac <HAL_GPIO_Init+0x308>)
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	4a5e      	ldr	r2, [pc, #376]	; (8007dac <HAL_GPIO_Init+0x308>)
 8007c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c38:	6453      	str	r3, [r2, #68]	; 0x44
 8007c3a:	4b5c      	ldr	r3, [pc, #368]	; (8007dac <HAL_GPIO_Init+0x308>)
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c46:	4a5a      	ldr	r2, [pc, #360]	; (8007db0 <HAL_GPIO_Init+0x30c>)
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	089b      	lsrs	r3, r3, #2
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	220f      	movs	r2, #15
 8007c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c62:	43db      	mvns	r3, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a51      	ldr	r2, [pc, #324]	; (8007db4 <HAL_GPIO_Init+0x310>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d02b      	beq.n	8007cca <HAL_GPIO_Init+0x226>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a50      	ldr	r2, [pc, #320]	; (8007db8 <HAL_GPIO_Init+0x314>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d025      	beq.n	8007cc6 <HAL_GPIO_Init+0x222>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a4f      	ldr	r2, [pc, #316]	; (8007dbc <HAL_GPIO_Init+0x318>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d01f      	beq.n	8007cc2 <HAL_GPIO_Init+0x21e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a4e      	ldr	r2, [pc, #312]	; (8007dc0 <HAL_GPIO_Init+0x31c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d019      	beq.n	8007cbe <HAL_GPIO_Init+0x21a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a4d      	ldr	r2, [pc, #308]	; (8007dc4 <HAL_GPIO_Init+0x320>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d013      	beq.n	8007cba <HAL_GPIO_Init+0x216>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a4c      	ldr	r2, [pc, #304]	; (8007dc8 <HAL_GPIO_Init+0x324>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00d      	beq.n	8007cb6 <HAL_GPIO_Init+0x212>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a4b      	ldr	r2, [pc, #300]	; (8007dcc <HAL_GPIO_Init+0x328>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <HAL_GPIO_Init+0x20e>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a4a      	ldr	r2, [pc, #296]	; (8007dd0 <HAL_GPIO_Init+0x32c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d101      	bne.n	8007cae <HAL_GPIO_Init+0x20a>
 8007caa:	2307      	movs	r3, #7
 8007cac:	e00e      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	e00c      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cb2:	2306      	movs	r3, #6
 8007cb4:	e00a      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cb6:	2305      	movs	r3, #5
 8007cb8:	e008      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cba:	2304      	movs	r3, #4
 8007cbc:	e006      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e004      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e002      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <HAL_GPIO_Init+0x228>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	f002 0203 	and.w	r2, r2, #3
 8007cd2:	0092      	lsls	r2, r2, #2
 8007cd4:	4093      	lsls	r3, r2
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cdc:	4934      	ldr	r1, [pc, #208]	; (8007db0 <HAL_GPIO_Init+0x30c>)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007cea:	4b3a      	ldr	r3, [pc, #232]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	43db      	mvns	r3, r3
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d0e:	4a31      	ldr	r2, [pc, #196]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007d14:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4013      	ands	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d38:	4a26      	ldr	r2, [pc, #152]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d3e:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	43db      	mvns	r3, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	43db      	mvns	r3, r3
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	4013      	ands	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d8c:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <HAL_GPIO_Init+0x330>)
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	f67f ae90 	bls.w	8007ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007da0:	bf00      	nop
 8007da2:	3724      	adds	r7, #36	; 0x24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40023800 	.word	0x40023800
 8007db0:	40013800 	.word	0x40013800
 8007db4:	40020000 	.word	0x40020000
 8007db8:	40020400 	.word	0x40020400
 8007dbc:	40020800 	.word	0x40020800
 8007dc0:	40020c00 	.word	0x40020c00
 8007dc4:	40021000 	.word	0x40021000
 8007dc8:	40021400 	.word	0x40021400
 8007dcc:	40021800 	.word	0x40021800
 8007dd0:	40021c00 	.word	0x40021c00
 8007dd4:	40013c00 	.word	0x40013c00

08007dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	887b      	ldrh	r3, [r7, #2]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e001      	b.n	8007dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	807b      	strh	r3, [r7, #2]
 8007e14:	4613      	mov	r3, r2
 8007e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e18:	787b      	ldrb	r3, [r7, #1]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e1e:	887a      	ldrh	r2, [r7, #2]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e24:	e003      	b.n	8007e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e26:	887b      	ldrh	r3, [r7, #2]
 8007e28:	041a      	lsls	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	619a      	str	r2, [r3, #24]
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e11f      	b.n	800808e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fd ff96 	bl	8005d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2224      	movs	r2, #36	; 0x24
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0201 	bic.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ea0:	f000 fd18 	bl	80088d4 <HAL_RCC_GetPCLK1Freq>
 8007ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4a7b      	ldr	r2, [pc, #492]	; (8008098 <HAL_I2C_Init+0x25c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d807      	bhi.n	8007ec0 <HAL_I2C_Init+0x84>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a7a      	ldr	r2, [pc, #488]	; (800809c <HAL_I2C_Init+0x260>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bf94      	ite	ls
 8007eb8:	2301      	movls	r3, #1
 8007eba:	2300      	movhi	r3, #0
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	e006      	b.n	8007ece <HAL_I2C_Init+0x92>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4a77      	ldr	r2, [pc, #476]	; (80080a0 <HAL_I2C_Init+0x264>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bf94      	ite	ls
 8007ec8:	2301      	movls	r3, #1
 8007eca:	2300      	movhi	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e0db      	b.n	800808e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a72      	ldr	r2, [pc, #456]	; (80080a4 <HAL_I2C_Init+0x268>)
 8007eda:	fba2 2303 	umull	r2, r3, r2, r3
 8007ede:	0c9b      	lsrs	r3, r3, #18
 8007ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4a64      	ldr	r2, [pc, #400]	; (8008098 <HAL_I2C_Init+0x25c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d802      	bhi.n	8007f10 <HAL_I2C_Init+0xd4>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	e009      	b.n	8007f24 <HAL_I2C_Init+0xe8>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	4a63      	ldr	r2, [pc, #396]	; (80080a8 <HAL_I2C_Init+0x26c>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	099b      	lsrs	r3, r3, #6
 8007f22:	3301      	adds	r3, #1
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	4956      	ldr	r1, [pc, #344]	; (8008098 <HAL_I2C_Init+0x25c>)
 8007f40:	428b      	cmp	r3, r1
 8007f42:	d80d      	bhi.n	8007f60 <HAL_I2C_Init+0x124>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	1e59      	subs	r1, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f52:	3301      	adds	r3, #1
 8007f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	bf38      	it	cc
 8007f5c:	2304      	movcc	r3, #4
 8007f5e:	e04f      	b.n	8008000 <HAL_I2C_Init+0x1c4>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d111      	bne.n	8007f8c <HAL_I2C_Init+0x150>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	1e58      	subs	r0, r3, #1
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	440b      	add	r3, r1
 8007f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	e012      	b.n	8007fb2 <HAL_I2C_Init+0x176>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	1e58      	subs	r0, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6859      	ldr	r1, [r3, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	440b      	add	r3, r1
 8007f9a:	0099      	lsls	r1, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_I2C_Init+0x17e>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e022      	b.n	8008000 <HAL_I2C_Init+0x1c4>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10e      	bne.n	8007fe0 <HAL_I2C_Init+0x1a4>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1e58      	subs	r0, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	440b      	add	r3, r1
 8007fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fde:	e00f      	b.n	8008000 <HAL_I2C_Init+0x1c4>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	1e58      	subs	r0, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6859      	ldr	r1, [r3, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	0099      	lsls	r1, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	6809      	ldr	r1, [r1, #0]
 8008004:	4313      	orrs	r3, r2
 8008006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800802e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6911      	ldr	r1, [r2, #16]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	68d2      	ldr	r2, [r2, #12]
 800803a:	4311      	orrs	r1, r2
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	430b      	orrs	r3, r1
 8008042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	000186a0 	.word	0x000186a0
 800809c:	001e847f 	.word	0x001e847f
 80080a0:	003d08ff 	.word	0x003d08ff
 80080a4:	431bde83 	.word	0x431bde83
 80080a8:	10624dd3 	.word	0x10624dd3

080080ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e25b      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d075      	beq.n	80081b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ca:	4ba3      	ldr	r3, [pc, #652]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 030c 	and.w	r3, r3, #12
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d00c      	beq.n	80080f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080d6:	4ba0      	ldr	r3, [pc, #640]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d112      	bne.n	8008108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080e2:	4b9d      	ldr	r3, [pc, #628]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ee:	d10b      	bne.n	8008108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f0:	4b99      	ldr	r3, [pc, #612]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d05b      	beq.n	80081b4 <HAL_RCC_OscConfig+0x108>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d157      	bne.n	80081b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e236      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008110:	d106      	bne.n	8008120 <HAL_RCC_OscConfig+0x74>
 8008112:	4b91      	ldr	r3, [pc, #580]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a90      	ldr	r2, [pc, #576]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e01d      	b.n	800815c <HAL_RCC_OscConfig+0xb0>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008128:	d10c      	bne.n	8008144 <HAL_RCC_OscConfig+0x98>
 800812a:	4b8b      	ldr	r3, [pc, #556]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a8a      	ldr	r2, [pc, #552]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4b88      	ldr	r3, [pc, #544]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a87      	ldr	r2, [pc, #540]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800813c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	e00b      	b.n	800815c <HAL_RCC_OscConfig+0xb0>
 8008144:	4b84      	ldr	r3, [pc, #528]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a83      	ldr	r2, [pc, #524]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800814a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	4b81      	ldr	r3, [pc, #516]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a80      	ldr	r2, [pc, #512]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800815a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d013      	beq.n	800818c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008164:	f7fe fa12 	bl	800658c <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800816c:	f7fe fa0e 	bl	800658c <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b64      	cmp	r3, #100	; 0x64
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e1fb      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800817e:	4b76      	ldr	r3, [pc, #472]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f0      	beq.n	800816c <HAL_RCC_OscConfig+0xc0>
 800818a:	e014      	b.n	80081b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800818c:	f7fe f9fe 	bl	800658c <HAL_GetTick>
 8008190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008194:	f7fe f9fa 	bl	800658c <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b64      	cmp	r3, #100	; 0x64
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e1e7      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081a6:	4b6c      	ldr	r3, [pc, #432]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f0      	bne.n	8008194 <HAL_RCC_OscConfig+0xe8>
 80081b2:	e000      	b.n	80081b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d063      	beq.n	800828a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081c2:	4b65      	ldr	r3, [pc, #404]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 030c 	and.w	r3, r3, #12
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00b      	beq.n	80081e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ce:	4b62      	ldr	r3, [pc, #392]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d11c      	bne.n	8008214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081da:	4b5f      	ldr	r3, [pc, #380]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d116      	bne.n	8008214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081e6:	4b5c      	ldr	r3, [pc, #368]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <HAL_RCC_OscConfig+0x152>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d001      	beq.n	80081fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e1bb      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081fe:	4b56      	ldr	r3, [pc, #344]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4952      	ldr	r1, [pc, #328]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800820e:	4313      	orrs	r3, r2
 8008210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008212:	e03a      	b.n	800828a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d020      	beq.n	800825e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800821c:	4b4f      	ldr	r3, [pc, #316]	; (800835c <HAL_RCC_OscConfig+0x2b0>)
 800821e:	2201      	movs	r2, #1
 8008220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008222:	f7fe f9b3 	bl	800658c <HAL_GetTick>
 8008226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008228:	e008      	b.n	800823c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800822a:	f7fe f9af 	bl	800658c <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e19c      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800823c:	4b46      	ldr	r3, [pc, #280]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0f0      	beq.n	800822a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008248:	4b43      	ldr	r3, [pc, #268]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	4940      	ldr	r1, [pc, #256]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008258:	4313      	orrs	r3, r2
 800825a:	600b      	str	r3, [r1, #0]
 800825c:	e015      	b.n	800828a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800825e:	4b3f      	ldr	r3, [pc, #252]	; (800835c <HAL_RCC_OscConfig+0x2b0>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fe f992 	bl	800658c <HAL_GetTick>
 8008268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800826c:	f7fe f98e 	bl	800658c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e17b      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800827e:	4b36      	ldr	r3, [pc, #216]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	2b00      	cmp	r3, #0
 8008294:	d030      	beq.n	80082f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d016      	beq.n	80082cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800829e:	4b30      	ldr	r3, [pc, #192]	; (8008360 <HAL_RCC_OscConfig+0x2b4>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a4:	f7fe f972 	bl	800658c <HAL_GetTick>
 80082a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082ac:	f7fe f96e 	bl	800658c <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e15b      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082be:	4b26      	ldr	r3, [pc, #152]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80082c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0f0      	beq.n	80082ac <HAL_RCC_OscConfig+0x200>
 80082ca:	e015      	b.n	80082f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082cc:	4b24      	ldr	r3, [pc, #144]	; (8008360 <HAL_RCC_OscConfig+0x2b4>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d2:	f7fe f95b 	bl	800658c <HAL_GetTick>
 80082d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082d8:	e008      	b.n	80082ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082da:	f7fe f957 	bl	800658c <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e144      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082ec:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 80082ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1f0      	bne.n	80082da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80a0 	beq.w	8008446 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800830a:	4b13      	ldr	r3, [pc, #76]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	4a0e      	ldr	r2, [pc, #56]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008324:	6413      	str	r3, [r2, #64]	; 0x40
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <HAL_RCC_OscConfig+0x2ac>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <HAL_RCC_OscConfig+0x2b8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d121      	bne.n	8008386 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <HAL_RCC_OscConfig+0x2b8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a07      	ldr	r2, [pc, #28]	; (8008364 <HAL_RCC_OscConfig+0x2b8>)
 8008348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800834c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800834e:	f7fe f91d 	bl	800658c <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008354:	e011      	b.n	800837a <HAL_RCC_OscConfig+0x2ce>
 8008356:	bf00      	nop
 8008358:	40023800 	.word	0x40023800
 800835c:	42470000 	.word	0x42470000
 8008360:	42470e80 	.word	0x42470e80
 8008364:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008368:	f7fe f910 	bl	800658c <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e0fd      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800837a:	4b81      	ldr	r3, [pc, #516]	; (8008580 <HAL_RCC_OscConfig+0x4d4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d106      	bne.n	800839c <HAL_RCC_OscConfig+0x2f0>
 800838e:	4b7d      	ldr	r3, [pc, #500]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	4a7c      	ldr	r2, [pc, #496]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 8008394:	f043 0301 	orr.w	r3, r3, #1
 8008398:	6713      	str	r3, [r2, #112]	; 0x70
 800839a:	e01c      	b.n	80083d6 <HAL_RCC_OscConfig+0x32a>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b05      	cmp	r3, #5
 80083a2:	d10c      	bne.n	80083be <HAL_RCC_OscConfig+0x312>
 80083a4:	4b77      	ldr	r3, [pc, #476]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	4a76      	ldr	r2, [pc, #472]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083aa:	f043 0304 	orr.w	r3, r3, #4
 80083ae:	6713      	str	r3, [r2, #112]	; 0x70
 80083b0:	4b74      	ldr	r3, [pc, #464]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b4:	4a73      	ldr	r2, [pc, #460]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	6713      	str	r3, [r2, #112]	; 0x70
 80083bc:	e00b      	b.n	80083d6 <HAL_RCC_OscConfig+0x32a>
 80083be:	4b71      	ldr	r3, [pc, #452]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	4a70      	ldr	r2, [pc, #448]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	6713      	str	r3, [r2, #112]	; 0x70
 80083ca:	4b6e      	ldr	r3, [pc, #440]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	4a6d      	ldr	r2, [pc, #436]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083d0:	f023 0304 	bic.w	r3, r3, #4
 80083d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d015      	beq.n	800840a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083de:	f7fe f8d5 	bl	800658c <HAL_GetTick>
 80083e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e4:	e00a      	b.n	80083fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e6:	f7fe f8d1 	bl	800658c <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d901      	bls.n	80083fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e0bc      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fc:	4b61      	ldr	r3, [pc, #388]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80083fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0ee      	beq.n	80083e6 <HAL_RCC_OscConfig+0x33a>
 8008408:	e014      	b.n	8008434 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800840a:	f7fe f8bf 	bl	800658c <HAL_GetTick>
 800840e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008410:	e00a      	b.n	8008428 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008412:	f7fe f8bb 	bl	800658c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008420:	4293      	cmp	r3, r2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e0a6      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008428:	4b56      	ldr	r3, [pc, #344]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1ee      	bne.n	8008412 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d105      	bne.n	8008446 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800843a:	4b52      	ldr	r3, [pc, #328]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	4a51      	ldr	r2, [pc, #324]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 8008440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 8092 	beq.w	8008574 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008450:	4b4c      	ldr	r3, [pc, #304]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f003 030c 	and.w	r3, r3, #12
 8008458:	2b08      	cmp	r3, #8
 800845a:	d05c      	beq.n	8008516 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d141      	bne.n	80084e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008464:	4b48      	ldr	r3, [pc, #288]	; (8008588 <HAL_RCC_OscConfig+0x4dc>)
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800846a:	f7fe f88f 	bl	800658c <HAL_GetTick>
 800846e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008470:	e008      	b.n	8008484 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008472:	f7fe f88b 	bl	800658c <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d901      	bls.n	8008484 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e078      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008484:	4b3f      	ldr	r3, [pc, #252]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f0      	bne.n	8008472 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69da      	ldr	r2, [r3, #28]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	019b      	lsls	r3, r3, #6
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	3b01      	subs	r3, #1
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	061b      	lsls	r3, r3, #24
 80084b4:	4933      	ldr	r1, [pc, #204]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084ba:	4b33      	ldr	r3, [pc, #204]	; (8008588 <HAL_RCC_OscConfig+0x4dc>)
 80084bc:	2201      	movs	r2, #1
 80084be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c0:	f7fe f864 	bl	800658c <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c8:	f7fe f860 	bl	800658c <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e04d      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084da:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0f0      	beq.n	80084c8 <HAL_RCC_OscConfig+0x41c>
 80084e6:	e045      	b.n	8008574 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e8:	4b27      	ldr	r3, [pc, #156]	; (8008588 <HAL_RCC_OscConfig+0x4dc>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ee:	f7fe f84d 	bl	800658c <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f6:	f7fe f849 	bl	800658c <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e036      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008508:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <HAL_RCC_OscConfig+0x44a>
 8008514:	e02e      	b.n	8008574 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e029      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008522:	4b18      	ldr	r3, [pc, #96]	; (8008584 <HAL_RCC_OscConfig+0x4d8>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	429a      	cmp	r2, r3
 8008534:	d11c      	bne.n	8008570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008540:	429a      	cmp	r2, r3
 8008542:	d115      	bne.n	8008570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800854a:	4013      	ands	r3, r2
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008550:	4293      	cmp	r3, r2
 8008552:	d10d      	bne.n	8008570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800855e:	429a      	cmp	r2, r3
 8008560:	d106      	bne.n	8008570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800856c:	429a      	cmp	r2, r3
 800856e:	d001      	beq.n	8008574 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e000      	b.n	8008576 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40007000 	.word	0x40007000
 8008584:	40023800 	.word	0x40023800
 8008588:	42470060 	.word	0x42470060

0800858c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0cc      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085a0:	4b68      	ldr	r3, [pc, #416]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d90c      	bls.n	80085c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ae:	4b65      	ldr	r3, [pc, #404]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b6:	4b63      	ldr	r3, [pc, #396]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d001      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0b8      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d020      	beq.n	8008616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085e0:	4b59      	ldr	r3, [pc, #356]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	4a58      	ldr	r2, [pc, #352]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085f8:	4b53      	ldr	r3, [pc, #332]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	4a52      	ldr	r2, [pc, #328]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008604:	4b50      	ldr	r3, [pc, #320]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	494d      	ldr	r1, [pc, #308]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d044      	beq.n	80086ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d107      	bne.n	800863a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862a:	4b47      	ldr	r3, [pc, #284]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d119      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e07f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d003      	beq.n	800864a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008646:	2b03      	cmp	r3, #3
 8008648:	d107      	bne.n	800865a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800864a:	4b3f      	ldr	r3, [pc, #252]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e06f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865a:	4b3b      	ldr	r3, [pc, #236]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e067      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800866a:	4b37      	ldr	r3, [pc, #220]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f023 0203 	bic.w	r2, r3, #3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	4934      	ldr	r1, [pc, #208]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008678:	4313      	orrs	r3, r2
 800867a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800867c:	f7fd ff86 	bl	800658c <HAL_GetTick>
 8008680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008682:	e00a      	b.n	800869a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008684:	f7fd ff82 	bl	800658c <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e04f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800869a:	4b2b      	ldr	r3, [pc, #172]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 020c 	and.w	r2, r3, #12
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d1eb      	bne.n	8008684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086ac:	4b25      	ldr	r3, [pc, #148]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 030f 	and.w	r3, r3, #15
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d20c      	bcs.n	80086d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ba:	4b22      	ldr	r3, [pc, #136]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d001      	beq.n	80086d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e032      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086e0:	4b19      	ldr	r3, [pc, #100]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	4916      	ldr	r1, [pc, #88]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086fe:	4b12      	ldr	r3, [pc, #72]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	490e      	ldr	r1, [pc, #56]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800870e:	4313      	orrs	r3, r2
 8008710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008712:	f000 f821 	bl	8008758 <HAL_RCC_GetSysClockFreq>
 8008716:	4601      	mov	r1, r0
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	091b      	lsrs	r3, r3, #4
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	4a0a      	ldr	r2, [pc, #40]	; (800874c <HAL_RCC_ClockConfig+0x1c0>)
 8008724:	5cd3      	ldrb	r3, [r2, r3]
 8008726:	fa21 f303 	lsr.w	r3, r1, r3
 800872a:	4a09      	ldr	r2, [pc, #36]	; (8008750 <HAL_RCC_ClockConfig+0x1c4>)
 800872c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <HAL_RCC_ClockConfig+0x1c8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fee6 	bl	8006504 <HAL_InitTick>

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40023c00 	.word	0x40023c00
 8008748:	40023800 	.word	0x40023800
 800874c:	080100dc 	.word	0x080100dc
 8008750:	20000034 	.word	0x20000034
 8008754:	20000038 	.word	0x20000038

08008758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	2300      	movs	r3, #0
 8008768:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800876e:	4b50      	ldr	r3, [pc, #320]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f003 030c 	and.w	r3, r3, #12
 8008776:	2b04      	cmp	r3, #4
 8008778:	d007      	beq.n	800878a <HAL_RCC_GetSysClockFreq+0x32>
 800877a:	2b08      	cmp	r3, #8
 800877c:	d008      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0x38>
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 808d 	bne.w	800889e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008784:	4b4b      	ldr	r3, [pc, #300]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008786:	60bb      	str	r3, [r7, #8]
       break;
 8008788:	e08c      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800878a:	4b4b      	ldr	r3, [pc, #300]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800878c:	60bb      	str	r3, [r7, #8]
      break;
 800878e:	e089      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008790:	4b47      	ldr	r3, [pc, #284]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008798:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800879a:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d023      	beq.n	80087ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087a6:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	099b      	lsrs	r3, r3, #6
 80087ac:	f04f 0400 	mov.w	r4, #0
 80087b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	ea03 0501 	and.w	r5, r3, r1
 80087bc:	ea04 0602 	and.w	r6, r4, r2
 80087c0:	4a3d      	ldr	r2, [pc, #244]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80087c2:	fb02 f106 	mul.w	r1, r2, r6
 80087c6:	2200      	movs	r2, #0
 80087c8:	fb02 f205 	mul.w	r2, r2, r5
 80087cc:	440a      	add	r2, r1
 80087ce:	493a      	ldr	r1, [pc, #232]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80087d0:	fba5 0101 	umull	r0, r1, r5, r1
 80087d4:	1853      	adds	r3, r2, r1
 80087d6:	4619      	mov	r1, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f04f 0400 	mov.w	r4, #0
 80087de:	461a      	mov	r2, r3
 80087e0:	4623      	mov	r3, r4
 80087e2:	f7f8 fa51 	bl	8000c88 <__aeabi_uldivmod>
 80087e6:	4603      	mov	r3, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e049      	b.n	8008882 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087ee:	4b30      	ldr	r3, [pc, #192]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	099b      	lsrs	r3, r3, #6
 80087f4:	f04f 0400 	mov.w	r4, #0
 80087f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	ea03 0501 	and.w	r5, r3, r1
 8008804:	ea04 0602 	and.w	r6, r4, r2
 8008808:	4629      	mov	r1, r5
 800880a:	4632      	mov	r2, r6
 800880c:	f04f 0300 	mov.w	r3, #0
 8008810:	f04f 0400 	mov.w	r4, #0
 8008814:	0154      	lsls	r4, r2, #5
 8008816:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800881a:	014b      	lsls	r3, r1, #5
 800881c:	4619      	mov	r1, r3
 800881e:	4622      	mov	r2, r4
 8008820:	1b49      	subs	r1, r1, r5
 8008822:	eb62 0206 	sbc.w	r2, r2, r6
 8008826:	f04f 0300 	mov.w	r3, #0
 800882a:	f04f 0400 	mov.w	r4, #0
 800882e:	0194      	lsls	r4, r2, #6
 8008830:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008834:	018b      	lsls	r3, r1, #6
 8008836:	1a5b      	subs	r3, r3, r1
 8008838:	eb64 0402 	sbc.w	r4, r4, r2
 800883c:	f04f 0100 	mov.w	r1, #0
 8008840:	f04f 0200 	mov.w	r2, #0
 8008844:	00e2      	lsls	r2, r4, #3
 8008846:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800884a:	00d9      	lsls	r1, r3, #3
 800884c:	460b      	mov	r3, r1
 800884e:	4614      	mov	r4, r2
 8008850:	195b      	adds	r3, r3, r5
 8008852:	eb44 0406 	adc.w	r4, r4, r6
 8008856:	f04f 0100 	mov.w	r1, #0
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	02a2      	lsls	r2, r4, #10
 8008860:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008864:	0299      	lsls	r1, r3, #10
 8008866:	460b      	mov	r3, r1
 8008868:	4614      	mov	r4, r2
 800886a:	4618      	mov	r0, r3
 800886c:	4621      	mov	r1, r4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f04f 0400 	mov.w	r4, #0
 8008874:	461a      	mov	r2, r3
 8008876:	4623      	mov	r3, r4
 8008878:	f7f8 fa06 	bl	8000c88 <__aeabi_uldivmod>
 800887c:	4603      	mov	r3, r0
 800887e:	460c      	mov	r4, r1
 8008880:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	f003 0303 	and.w	r3, r3, #3
 800888c:	3301      	adds	r3, #1
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	60bb      	str	r3, [r7, #8]
      break;
 800889c:	e002      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80088a0:	60bb      	str	r3, [r7, #8]
      break;
 80088a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088a4:	68bb      	ldr	r3, [r7, #8]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40023800 	.word	0x40023800
 80088b4:	00f42400 	.word	0x00f42400
 80088b8:	00bebc20 	.word	0x00bebc20

080088bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80088c2:	681b      	ldr	r3, [r3, #0]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20000034 	.word	0x20000034

080088d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088d8:	f7ff fff0 	bl	80088bc <HAL_RCC_GetHCLKFreq>
 80088dc:	4601      	mov	r1, r0
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	0a9b      	lsrs	r3, r3, #10
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	4a03      	ldr	r2, [pc, #12]	; (80088f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088ea:	5cd3      	ldrb	r3, [r2, r3]
 80088ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	40023800 	.word	0x40023800
 80088f8:	080100ec 	.word	0x080100ec

080088fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008900:	f7ff ffdc 	bl	80088bc <HAL_RCC_GetHCLKFreq>
 8008904:	4601      	mov	r1, r0
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	0b5b      	lsrs	r3, r3, #13
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	4a03      	ldr	r2, [pc, #12]	; (8008920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008912:	5cd3      	ldrb	r3, [r2, r3]
 8008914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008918:	4618      	mov	r0, r3
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40023800 	.word	0x40023800
 8008920:	080100ec 	.word	0x080100ec

08008924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e056      	b.n	80089e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7fd fa67 	bl	8005e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800896c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	ea42 0103 	orr.w	r1, r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 0104 	and.w	r1, r3, #4
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69da      	ldr	r2, [r3, #28]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	4613      	mov	r3, r2
 80089fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_SPI_Transmit+0x22>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e11e      	b.n	8008c4c <HAL_SPI_Transmit+0x260>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a16:	f7fd fdb9 	bl	800658c <HAL_GetTick>
 8008a1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d002      	beq.n	8008a32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a30:	e103      	b.n	8008c3a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <HAL_SPI_Transmit+0x52>
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a42:	e0fa      	b.n	8008c3a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2203      	movs	r2, #3
 8008a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	88fa      	ldrh	r2, [r7, #6]
 8008a5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	88fa      	ldrh	r2, [r7, #6]
 8008a62:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a8a:	d107      	bne.n	8008a9c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa6:	2b40      	cmp	r3, #64	; 0x40
 8008aa8:	d007      	beq.n	8008aba <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ab8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac2:	d14b      	bne.n	8008b5c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <HAL_SPI_Transmit+0xe6>
 8008acc:	8afb      	ldrh	r3, [r7, #22]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d13e      	bne.n	8008b50 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	881a      	ldrh	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	1c9a      	adds	r2, r3, #2
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	3b01      	subs	r3, #1
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008af6:	e02b      	b.n	8008b50 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d112      	bne.n	8008b2c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	881a      	ldrh	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b16:	1c9a      	adds	r2, r3, #2
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b2a:	e011      	b.n	8008b50 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2c:	f7fd fd2e 	bl	800658c <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d803      	bhi.n	8008b44 <HAL_SPI_Transmit+0x158>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d102      	bne.n	8008b4a <HAL_SPI_Transmit+0x15e>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b4e:	e074      	b.n	8008c3a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1ce      	bne.n	8008af8 <HAL_SPI_Transmit+0x10c>
 8008b5a:	e04c      	b.n	8008bf6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <HAL_SPI_Transmit+0x17e>
 8008b64:	8afb      	ldrh	r3, [r7, #22]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d140      	bne.n	8008bec <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	330c      	adds	r3, #12
 8008b74:	7812      	ldrb	r2, [r2, #0]
 8008b76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b90:	e02c      	b.n	8008bec <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d113      	bne.n	8008bc8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bc6:	e011      	b.n	8008bec <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bc8:	f7fd fce0 	bl	800658c <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d803      	bhi.n	8008be0 <HAL_SPI_Transmit+0x1f4>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bde:	d102      	bne.n	8008be6 <HAL_SPI_Transmit+0x1fa>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bea:	e026      	b.n	8008c3a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1cd      	bne.n	8008b92 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fba4 	bl	8009348 <SPI_EndRxTxTransaction>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c14:	2300      	movs	r3, #0
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e000      	b.n	8008c3a <HAL_SPI_Transmit+0x24e>
  }

error:
 8008c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3720      	adds	r7, #32
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c70:	d112      	bne.n	8008c98 <HAL_SPI_Receive+0x44>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10e      	bne.n	8008c98 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	68b9      	ldr	r1, [r7, #8]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 f8e9 	bl	8008e66 <HAL_SPI_TransmitReceive>
 8008c94:	4603      	mov	r3, r0
 8008c96:	e0e2      	b.n	8008e5e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d101      	bne.n	8008ca6 <HAL_SPI_Receive+0x52>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e0db      	b.n	8008e5e <HAL_SPI_Receive+0x20a>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cae:	f7fd fc6d 	bl	800658c <HAL_GetTick>
 8008cb2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d002      	beq.n	8008cc6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cc4:	e0c2      	b.n	8008e4c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <HAL_SPI_Receive+0x7e>
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cd6:	e0b9      	b.n	8008e4c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2204      	movs	r2, #4
 8008cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	88fa      	ldrh	r2, [r7, #6]
 8008cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	88fa      	ldrh	r2, [r7, #6]
 8008cf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1e:	d107      	bne.n	8008d30 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d007      	beq.n	8008d4e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d162      	bne.n	8008e1c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008d56:	e02e      	b.n	8008db6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d115      	bne.n	8008d92 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f103 020c 	add.w	r2, r3, #12
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d90:	e011      	b.n	8008db6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d92:	f7fd fbfb 	bl	800658c <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d803      	bhi.n	8008daa <HAL_SPI_Receive+0x156>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d102      	bne.n	8008db0 <HAL_SPI_Receive+0x15c>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008db4:	e04a      	b.n	8008e4c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1cb      	bne.n	8008d58 <HAL_SPI_Receive+0x104>
 8008dc0:	e031      	b.n	8008e26 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d113      	bne.n	8008df8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	b292      	uxth	r2, r2
 8008ddc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	1c9a      	adds	r2, r3, #2
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008df6:	e011      	b.n	8008e1c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df8:	f7fd fbc8 	bl	800658c <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d803      	bhi.n	8008e10 <HAL_SPI_Receive+0x1bc>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0e:	d102      	bne.n	8008e16 <HAL_SPI_Receive+0x1c2>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e1a:	e017      	b.n	8008e4c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1cd      	bne.n	8008dc2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fa27 	bl	800927e <SPI_EndRxTransaction>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
 8008e48:	e000      	b.n	8008e4c <HAL_SPI_Receive+0x1f8>
  }

error :
 8008e4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b08c      	sub	sp, #48	; 0x30
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e74:	2301      	movs	r3, #1
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <HAL_SPI_TransmitReceive+0x26>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e18a      	b.n	80091a2 <HAL_SPI_TransmitReceive+0x33c>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e94:	f7fd fb7a 	bl	800658c <HAL_GetTick>
 8008e98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008eaa:	887b      	ldrh	r3, [r7, #2]
 8008eac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d00f      	beq.n	8008ed6 <HAL_SPI_TransmitReceive+0x70>
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ebc:	d107      	bne.n	8008ece <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d103      	bne.n	8008ece <HAL_SPI_TransmitReceive+0x68>
 8008ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d003      	beq.n	8008ed6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ed4:	e15b      	b.n	800918e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_SPI_TransmitReceive+0x82>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <HAL_SPI_TransmitReceive+0x82>
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008eee:	e14e      	b.n	800918e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d003      	beq.n	8008f04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2205      	movs	r2, #5
 8008f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	887a      	ldrh	r2, [r7, #2]
 8008f14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	887a      	ldrh	r2, [r7, #2]
 8008f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	887a      	ldrh	r2, [r7, #2]
 8008f26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	887a      	ldrh	r2, [r7, #2]
 8008f2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f44:	2b40      	cmp	r3, #64	; 0x40
 8008f46:	d007      	beq.n	8008f58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f60:	d178      	bne.n	8009054 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <HAL_SPI_TransmitReceive+0x10a>
 8008f6a:	8b7b      	ldrh	r3, [r7, #26]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d166      	bne.n	800903e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	881a      	ldrh	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	1c9a      	adds	r2, r3, #2
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f94:	e053      	b.n	800903e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d11b      	bne.n	8008fdc <HAL_SPI_TransmitReceive+0x176>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d016      	beq.n	8008fdc <HAL_SPI_TransmitReceive+0x176>
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d113      	bne.n	8008fdc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb8:	881a      	ldrh	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	1c9a      	adds	r2, r3, #2
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d119      	bne.n	800901e <HAL_SPI_TransmitReceive+0x1b8>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d014      	beq.n	800901e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	b292      	uxth	r2, r2
 8009000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	1c9a      	adds	r2, r3, #2
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800901a:	2301      	movs	r3, #1
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800901e:	f7fd fab5 	bl	800658c <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800902a:	429a      	cmp	r2, r3
 800902c:	d807      	bhi.n	800903e <HAL_SPI_TransmitReceive+0x1d8>
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d003      	beq.n	800903e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800903c:	e0a7      	b.n	800918e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1a6      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x130>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1a1      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x130>
 8009052:	e07c      	b.n	800914e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <HAL_SPI_TransmitReceive+0x1fc>
 800905c:	8b7b      	ldrh	r3, [r7, #26]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d16b      	bne.n	800913a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	7812      	ldrb	r2, [r2, #0]
 800906e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009088:	e057      	b.n	800913a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b02      	cmp	r3, #2
 8009096:	d11c      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x26c>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d017      	beq.n	80090d2 <HAL_SPI_TransmitReceive+0x26c>
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d114      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	330c      	adds	r3, #12
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d119      	bne.n	8009114 <HAL_SPI_TransmitReceive+0x2ae>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d014      	beq.n	8009114 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	b2d2      	uxtb	r2, r2
 80090f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009110:	2301      	movs	r3, #1
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009114:	f7fd fa3a 	bl	800658c <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009120:	429a      	cmp	r2, r3
 8009122:	d803      	bhi.n	800912c <HAL_SPI_TransmitReceive+0x2c6>
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	d102      	bne.n	8009132 <HAL_SPI_TransmitReceive+0x2cc>
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009138:	e029      	b.n	800918e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800913e:	b29b      	uxth	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1a2      	bne.n	800908a <HAL_SPI_TransmitReceive+0x224>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d19d      	bne.n	800908a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800914e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f8f8 	bl	8009348 <SPI_EndRxTxTransaction>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d006      	beq.n	800916c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2220      	movs	r2, #32
 8009168:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800916a:	e010      	b.n	800918e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	e000      	b.n	800918e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800918c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800919e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3730      	adds	r7, #48	; 0x30
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ba:	e04c      	b.n	8009256 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d048      	beq.n	8009256 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80091c4:	f7fd f9e2 	bl	800658c <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d902      	bls.n	80091da <SPI_WaitFlagStateUntilTimeout+0x30>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d13d      	bne.n	8009256 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091f2:	d111      	bne.n	8009218 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091fc:	d004      	beq.n	8009208 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009206:	d107      	bne.n	8009218 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009220:	d10f      	bne.n	8009242 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e00f      	b.n	8009276 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4013      	ands	r3, r2
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	bf0c      	ite	eq
 8009266:	2301      	moveq	r3, #1
 8009268:	2300      	movne	r3, #0
 800926a:	b2db      	uxtb	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	429a      	cmp	r2, r3
 8009272:	d1a3      	bne.n	80091bc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af02      	add	r7, sp, #8
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009292:	d111      	bne.n	80092b8 <SPI_EndRxTransaction+0x3a>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800929c:	d004      	beq.n	80092a8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a6:	d107      	bne.n	80092b8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092b6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092c0:	d12a      	bne.n	8009318 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ca:	d012      	beq.n	80092f2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2200      	movs	r2, #0
 80092d4:	2180      	movs	r1, #128	; 0x80
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff ff67 	bl	80091aa <SPI_WaitFlagStateUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d02d      	beq.n	800933e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	f043 0220 	orr.w	r2, r3, #32
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e026      	b.n	8009340 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2200      	movs	r2, #0
 80092fa:	2101      	movs	r1, #1
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f7ff ff54 	bl	80091aa <SPI_WaitFlagStateUntilTimeout>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01a      	beq.n	800933e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930c:	f043 0220 	orr.w	r2, r3, #32
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e013      	b.n	8009340 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2200      	movs	r2, #0
 8009320:	2101      	movs	r1, #1
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7ff ff41 	bl	80091aa <SPI_WaitFlagStateUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d007      	beq.n	800933e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	f043 0220 	orr.w	r2, r3, #32
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e000      	b.n	8009340 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009354:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <SPI_EndRxTxTransaction+0x7c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1b      	ldr	r2, [pc, #108]	; (80093c8 <SPI_EndRxTxTransaction+0x80>)
 800935a:	fba2 2303 	umull	r2, r3, r2, r3
 800935e:	0d5b      	lsrs	r3, r3, #21
 8009360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009364:	fb02 f303 	mul.w	r3, r2, r3
 8009368:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009372:	d112      	bne.n	800939a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	2180      	movs	r1, #128	; 0x80
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f7ff ff13 	bl	80091aa <SPI_WaitFlagStateUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	f043 0220 	orr.w	r2, r3, #32
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e00f      	b.n	80093ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b0:	2b80      	cmp	r3, #128	; 0x80
 80093b2:	d0f2      	beq.n	800939a <SPI_EndRxTxTransaction+0x52>
 80093b4:	e000      	b.n	80093b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80093b6:	bf00      	nop
  }

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000034 	.word	0x20000034
 80093c8:	165e9f81 	.word	0x165e9f81

080093cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e01d      	b.n	800941a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fc fe12 	bl	800601c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f000 fb56 	bl	8009abc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b06      	cmp	r3, #6
 800944a:	d007      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e01d      	b.n	80094b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fc fd0f 	bl	8005eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f000 fb07 	bl	8009abc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2201      	movs	r2, #1
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fd42 	bl	8009f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a15      	ldr	r2, [pc, #84]	; (8009534 <HAL_TIM_PWM_Start+0x74>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d004      	beq.n	80094ec <HAL_TIM_PWM_Start+0x2c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a14      	ldr	r2, [pc, #80]	; (8009538 <HAL_TIM_PWM_Start+0x78>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d101      	bne.n	80094f0 <HAL_TIM_PWM_Start+0x30>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e000      	b.n	80094f2 <HAL_TIM_PWM_Start+0x32>
 80094f0:	2300      	movs	r3, #0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009504:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b06      	cmp	r3, #6
 8009516:	d007      	beq.n	8009528 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0201 	orr.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	40010000 	.word	0x40010000
 8009538:	40010400 	.word	0x40010400

0800953c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e083      	b.n	8009658 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fc fcdd 	bl	8005f24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009580:	f023 0307 	bic.w	r3, r3, #7
 8009584:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3304      	adds	r3, #4
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f000 fa93 	bl	8009abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	4313      	orrs	r3, r2
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095dc:	f023 030c 	bic.w	r3, r3, #12
 80095e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	4313      	orrs	r3, r2
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	011a      	lsls	r2, r3, #4
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	031b      	lsls	r3, r3, #12
 800960c:	4313      	orrs	r3, r2
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4313      	orrs	r3, r2
 8009612:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800961a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	4313      	orrs	r3, r2
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <HAL_TIM_Encoder_Start+0x16>
 8009670:	2b04      	cmp	r3, #4
 8009672:	d008      	beq.n	8009686 <HAL_TIM_Encoder_Start+0x26>
 8009674:	e00f      	b.n	8009696 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2201      	movs	r2, #1
 800967c:	2100      	movs	r1, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fc6c 	bl	8009f5c <TIM_CCxChannelCmd>
      break;
 8009684:	e016      	b.n	80096b4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2201      	movs	r2, #1
 800968c:	2104      	movs	r1, #4
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fc64 	bl	8009f5c <TIM_CCxChannelCmd>
      break;
 8009694:	e00e      	b.n	80096b4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2201      	movs	r2, #1
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fc5c 	bl	8009f5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2201      	movs	r2, #1
 80096aa:	2104      	movs	r1, #4
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fc55 	bl	8009f5c <TIM_CCxChannelCmd>
      break;
 80096b2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d122      	bne.n	800972a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d11b      	bne.n	800972a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f06f 0202 	mvn.w	r2, #2
 80096fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f9b5 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 8009716:	e005      	b.n	8009724 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f9a7 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f9b8 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b04      	cmp	r3, #4
 8009736:	d122      	bne.n	800977e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b04      	cmp	r3, #4
 8009744:	d11b      	bne.n	800977e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f06f 0204 	mvn.w	r2, #4
 800974e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f98b 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 800976a:	e005      	b.n	8009778 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f97d 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f98e 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	f003 0308 	and.w	r3, r3, #8
 8009788:	2b08      	cmp	r3, #8
 800978a:	d122      	bne.n	80097d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b08      	cmp	r3, #8
 8009798:	d11b      	bne.n	80097d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f06f 0208 	mvn.w	r2, #8
 80097a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2204      	movs	r2, #4
 80097a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f961 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 80097be:	e005      	b.n	80097cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f953 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f964 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f003 0310 	and.w	r3, r3, #16
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d122      	bne.n	8009826 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f003 0310 	and.w	r3, r3, #16
 80097ea:	2b10      	cmp	r3, #16
 80097ec:	d11b      	bne.n	8009826 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f06f 0210 	mvn.w	r2, #16
 80097f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2208      	movs	r2, #8
 80097fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f937 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 8009812:	e005      	b.n	8009820 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f929 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f93a 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b01      	cmp	r3, #1
 8009832:	d10e      	bne.n	8009852 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b01      	cmp	r3, #1
 8009840:	d107      	bne.n	8009852 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f06f 0201 	mvn.w	r2, #1
 800984a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7fa f997 	bl	8003b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985c:	2b80      	cmp	r3, #128	; 0x80
 800985e:	d10e      	bne.n	800987e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986a:	2b80      	cmp	r3, #128	; 0x80
 800986c:	d107      	bne.n	800987e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fc6d 	bl	800a158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009888:	2b40      	cmp	r3, #64	; 0x40
 800988a:	d10e      	bne.n	80098aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009896:	2b40      	cmp	r3, #64	; 0x40
 8009898:	d107      	bne.n	80098aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f8ff 	bl	8009aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d10e      	bne.n	80098d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	d107      	bne.n	80098d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f06f 0220 	mvn.w	r2, #32
 80098ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fc37 	bl	800a144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80098f6:	2302      	movs	r3, #2
 80098f8:	e0b4      	b.n	8009a64 <HAL_TIM_PWM_ConfigChannel+0x184>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2202      	movs	r2, #2
 8009906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b0c      	cmp	r3, #12
 800990e:	f200 809f 	bhi.w	8009a50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009912:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009918:	0800994d 	.word	0x0800994d
 800991c:	08009a51 	.word	0x08009a51
 8009920:	08009a51 	.word	0x08009a51
 8009924:	08009a51 	.word	0x08009a51
 8009928:	0800998d 	.word	0x0800998d
 800992c:	08009a51 	.word	0x08009a51
 8009930:	08009a51 	.word	0x08009a51
 8009934:	08009a51 	.word	0x08009a51
 8009938:	080099cf 	.word	0x080099cf
 800993c:	08009a51 	.word	0x08009a51
 8009940:	08009a51 	.word	0x08009a51
 8009944:	08009a51 	.word	0x08009a51
 8009948:	08009a0f 	.word	0x08009a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68b9      	ldr	r1, [r7, #8]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f952 	bl	8009bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 0208 	orr.w	r2, r2, #8
 8009966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699a      	ldr	r2, [r3, #24]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0204 	bic.w	r2, r2, #4
 8009976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6999      	ldr	r1, [r3, #24]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	691a      	ldr	r2, [r3, #16]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	619a      	str	r2, [r3, #24]
      break;
 800998a:	e062      	b.n	8009a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f9a2 	bl	8009cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6999      	ldr	r1, [r3, #24]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	021a      	lsls	r2, r3, #8
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	619a      	str	r2, [r3, #24]
      break;
 80099cc:	e041      	b.n	8009a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 f9f7 	bl	8009dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69da      	ldr	r2, [r3, #28]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0208 	orr.w	r2, r2, #8
 80099e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69da      	ldr	r2, [r3, #28]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0204 	bic.w	r2, r2, #4
 80099f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69d9      	ldr	r1, [r3, #28]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	691a      	ldr	r2, [r3, #16]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	61da      	str	r2, [r3, #28]
      break;
 8009a0c:	e021      	b.n	8009a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fa4b 	bl	8009eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69d9      	ldr	r1, [r3, #28]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	021a      	lsls	r2, r3, #8
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	61da      	str	r2, [r3, #28]
      break;
 8009a4e:	e000      	b.n	8009a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009a50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a40      	ldr	r2, [pc, #256]	; (8009bd0 <TIM_Base_SetConfig+0x114>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d013      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ada:	d00f      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a3d      	ldr	r2, [pc, #244]	; (8009bd4 <TIM_Base_SetConfig+0x118>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00b      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3c      	ldr	r2, [pc, #240]	; (8009bd8 <TIM_Base_SetConfig+0x11c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3b      	ldr	r2, [pc, #236]	; (8009bdc <TIM_Base_SetConfig+0x120>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a3a      	ldr	r2, [pc, #232]	; (8009be0 <TIM_Base_SetConfig+0x124>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d108      	bne.n	8009b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a2f      	ldr	r2, [pc, #188]	; (8009bd0 <TIM_Base_SetConfig+0x114>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d02b      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1c:	d027      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a2c      	ldr	r2, [pc, #176]	; (8009bd4 <TIM_Base_SetConfig+0x118>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d023      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a2b      	ldr	r2, [pc, #172]	; (8009bd8 <TIM_Base_SetConfig+0x11c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01f      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a2a      	ldr	r2, [pc, #168]	; (8009bdc <TIM_Base_SetConfig+0x120>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01b      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a29      	ldr	r2, [pc, #164]	; (8009be0 <TIM_Base_SetConfig+0x124>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d017      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a28      	ldr	r2, [pc, #160]	; (8009be4 <TIM_Base_SetConfig+0x128>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a27      	ldr	r2, [pc, #156]	; (8009be8 <TIM_Base_SetConfig+0x12c>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00f      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a26      	ldr	r2, [pc, #152]	; (8009bec <TIM_Base_SetConfig+0x130>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a25      	ldr	r2, [pc, #148]	; (8009bf0 <TIM_Base_SetConfig+0x134>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d007      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a24      	ldr	r2, [pc, #144]	; (8009bf4 <TIM_Base_SetConfig+0x138>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d003      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a23      	ldr	r2, [pc, #140]	; (8009bf8 <TIM_Base_SetConfig+0x13c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d108      	bne.n	8009b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <TIM_Base_SetConfig+0x114>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d003      	beq.n	8009bb4 <TIM_Base_SetConfig+0xf8>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <TIM_Base_SetConfig+0x124>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d103      	bne.n	8009bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	615a      	str	r2, [r3, #20]
}
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40000400 	.word	0x40000400
 8009bd8:	40000800 	.word	0x40000800
 8009bdc:	40000c00 	.word	0x40000c00
 8009be0:	40010400 	.word	0x40010400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	40014400 	.word	0x40014400
 8009bec:	40014800 	.word	0x40014800
 8009bf0:	40001800 	.word	0x40001800
 8009bf4:	40001c00 	.word	0x40001c00
 8009bf8:	40002000 	.word	0x40002000

08009bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f023 0201 	bic.w	r2, r3, #1
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0303 	bic.w	r3, r3, #3
 8009c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f023 0302 	bic.w	r3, r3, #2
 8009c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a20      	ldr	r2, [pc, #128]	; (8009cd4 <TIM_OC1_SetConfig+0xd8>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d003      	beq.n	8009c60 <TIM_OC1_SetConfig+0x64>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a1f      	ldr	r2, [pc, #124]	; (8009cd8 <TIM_OC1_SetConfig+0xdc>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10c      	bne.n	8009c7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f023 0308 	bic.w	r3, r3, #8
 8009c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f023 0304 	bic.w	r3, r3, #4
 8009c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a15      	ldr	r2, [pc, #84]	; (8009cd4 <TIM_OC1_SetConfig+0xd8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d003      	beq.n	8009c8a <TIM_OC1_SetConfig+0x8e>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a14      	ldr	r2, [pc, #80]	; (8009cd8 <TIM_OC1_SetConfig+0xdc>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d111      	bne.n	8009cae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	621a      	str	r2, [r3, #32]
}
 8009cc8:	bf00      	nop
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	40010000 	.word	0x40010000
 8009cd8:	40010400 	.word	0x40010400

08009cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	f023 0210 	bic.w	r2, r3, #16
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f023 0320 	bic.w	r3, r3, #32
 8009d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a22      	ldr	r2, [pc, #136]	; (8009dc0 <TIM_OC2_SetConfig+0xe4>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d003      	beq.n	8009d44 <TIM_OC2_SetConfig+0x68>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <TIM_OC2_SetConfig+0xe8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d10d      	bne.n	8009d60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	011b      	lsls	r3, r3, #4
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a17      	ldr	r2, [pc, #92]	; (8009dc0 <TIM_OC2_SetConfig+0xe4>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_OC2_SetConfig+0x94>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a16      	ldr	r2, [pc, #88]	; (8009dc4 <TIM_OC2_SetConfig+0xe8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d113      	bne.n	8009d98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	621a      	str	r2, [r3, #32]
}
 8009db2:	bf00      	nop
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	40010000 	.word	0x40010000
 8009dc4:	40010400 	.word	0x40010400

08009dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a21      	ldr	r2, [pc, #132]	; (8009ea8 <TIM_OC3_SetConfig+0xe0>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_OC3_SetConfig+0x66>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a20      	ldr	r2, [pc, #128]	; (8009eac <TIM_OC3_SetConfig+0xe4>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d10d      	bne.n	8009e4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	021b      	lsls	r3, r3, #8
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a16      	ldr	r2, [pc, #88]	; (8009ea8 <TIM_OC3_SetConfig+0xe0>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d003      	beq.n	8009e5a <TIM_OC3_SetConfig+0x92>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a15      	ldr	r2, [pc, #84]	; (8009eac <TIM_OC3_SetConfig+0xe4>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d113      	bne.n	8009e82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	011b      	lsls	r3, r3, #4
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	621a      	str	r2, [r3, #32]
}
 8009e9c:	bf00      	nop
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	40010000 	.word	0x40010000
 8009eac:	40010400 	.word	0x40010400

08009eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	021b      	lsls	r3, r3, #8
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	031b      	lsls	r3, r3, #12
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <TIM_OC4_SetConfig+0xa4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_OC4_SetConfig+0x68>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <TIM_OC4_SetConfig+0xa8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d109      	bne.n	8009f2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	019b      	lsls	r3, r3, #6
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	621a      	str	r2, [r3, #32]
}
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	40010000 	.word	0x40010000
 8009f58:	40010400 	.word	0x40010400

08009f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f003 031f 	and.w	r3, r3, #31
 8009f6e:	2201      	movs	r2, #1
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a1a      	ldr	r2, [r3, #32]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	43db      	mvns	r3, r3
 8009f7e:	401a      	ands	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1a      	ldr	r2, [r3, #32]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f003 031f 	and.w	r3, r3, #31
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	fa01 f303 	lsl.w	r3, r1, r3
 8009f94:	431a      	orrs	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	621a      	str	r2, [r3, #32]
}
 8009f9a:	bf00      	nop
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e05a      	b.n	800a076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a21      	ldr	r2, [pc, #132]	; (800a084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d022      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a00c:	d01d      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a1d      	ldr	r2, [pc, #116]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d018      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a1b      	ldr	r2, [pc, #108]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d013      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a1a      	ldr	r2, [pc, #104]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d00e      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a18      	ldr	r2, [pc, #96]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d009      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a17      	ldr	r2, [pc, #92]	; (800a098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d004      	beq.n	800a04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a15      	ldr	r2, [pc, #84]	; (800a09c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d10c      	bne.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	4313      	orrs	r3, r2
 800a05a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	40010000 	.word	0x40010000
 800a088:	40000400 	.word	0x40000400
 800a08c:	40000800 	.word	0x40000800
 800a090:	40000c00 	.word	0x40000c00
 800a094:	40010400 	.word	0x40010400
 800a098:	40014000 	.word	0x40014000
 800a09c:	40001800 	.word	0x40001800

0800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e03d      	b.n	800a138 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e03f      	b.n	800a1fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7fb ffec 	bl	8006170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2224      	movs	r2, #36	; 0x24
 800a19c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f90b 	bl	800a3cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	695a      	ldr	r2, [r3, #20]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68da      	ldr	r2, [r3, #12]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2220      	movs	r2, #32
 800a1f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b088      	sub	sp, #32
 800a20a:	af02      	add	r7, sp, #8
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	603b      	str	r3, [r7, #0]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b20      	cmp	r3, #32
 800a224:	f040 8083 	bne.w	800a32e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <HAL_UART_Transmit+0x2e>
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e07b      	b.n	800a330 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_UART_Transmit+0x40>
 800a242:	2302      	movs	r3, #2
 800a244:	e074      	b.n	800a330 <HAL_UART_Transmit+0x12a>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2221      	movs	r2, #33	; 0x21
 800a258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a25c:	f7fc f996 	bl	800658c <HAL_GetTick>
 800a260:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	88fa      	ldrh	r2, [r7, #6]
 800a266:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	88fa      	ldrh	r2, [r7, #6]
 800a26c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a276:	e042      	b.n	800a2fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	3b01      	subs	r3, #1
 800a280:	b29a      	uxth	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28e:	d122      	bne.n	800a2d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2200      	movs	r2, #0
 800a298:	2180      	movs	r1, #128	; 0x80
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f84c 	bl	800a338 <UART_WaitOnFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e042      	b.n	800a330 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	60bb      	str	r3, [r7, #8]
 800a2cc:	e017      	b.n	800a2fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	60bb      	str	r3, [r7, #8]
 800a2d4:	e013      	b.n	800a2fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2180      	movs	r1, #128	; 0x80
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 f829 	bl	800a338 <UART_WaitOnFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e01f      	b.n	800a330 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	60ba      	str	r2, [r7, #8]
 800a2f6:	781a      	ldrb	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1b7      	bne.n	800a278 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2200      	movs	r2, #0
 800a310:	2140      	movs	r1, #64	; 0x40
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f810 	bl	800a338 <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e006      	b.n	800a330 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e000      	b.n	800a330 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a32e:	2302      	movs	r3, #2
  }
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	4613      	mov	r3, r2
 800a346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a348:	e02c      	b.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a350:	d028      	beq.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <UART_WaitOnFlagUntilTimeout+0x30>
 800a358:	f7fc f918 	bl	800658c <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	429a      	cmp	r2, r3
 800a366:	d21d      	bcs.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a376:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	695a      	ldr	r2, [r3, #20]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f022 0201 	bic.w	r2, r2, #1
 800a386:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2220      	movs	r2, #32
 800a394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e00f      	b.n	800a3c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	bf0c      	ite	eq
 800a3b4:	2301      	moveq	r3, #1
 800a3b6:	2300      	movne	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d0c3      	beq.n	800a34a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	68da      	ldr	r2, [r3, #12]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	4313      	orrs	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a40e:	f023 030c 	bic.w	r3, r3, #12
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	430b      	orrs	r3, r1
 800a41a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a43a:	f040 818b 	bne.w	800a754 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4ac1      	ldr	r2, [pc, #772]	; (800a748 <UART_SetConfig+0x37c>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d005      	beq.n	800a454 <UART_SetConfig+0x88>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4abf      	ldr	r2, [pc, #764]	; (800a74c <UART_SetConfig+0x380>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	f040 80bd 	bne.w	800a5ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a454:	f7fe fa52 	bl	80088fc <HAL_RCC_GetPCLK2Freq>
 800a458:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	461d      	mov	r5, r3
 800a45e:	f04f 0600 	mov.w	r6, #0
 800a462:	46a8      	mov	r8, r5
 800a464:	46b1      	mov	r9, r6
 800a466:	eb18 0308 	adds.w	r3, r8, r8
 800a46a:	eb49 0409 	adc.w	r4, r9, r9
 800a46e:	4698      	mov	r8, r3
 800a470:	46a1      	mov	r9, r4
 800a472:	eb18 0805 	adds.w	r8, r8, r5
 800a476:	eb49 0906 	adc.w	r9, r9, r6
 800a47a:	f04f 0100 	mov.w	r1, #0
 800a47e:	f04f 0200 	mov.w	r2, #0
 800a482:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a486:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a48a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a48e:	4688      	mov	r8, r1
 800a490:	4691      	mov	r9, r2
 800a492:	eb18 0005 	adds.w	r0, r8, r5
 800a496:	eb49 0106 	adc.w	r1, r9, r6
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	461d      	mov	r5, r3
 800a4a0:	f04f 0600 	mov.w	r6, #0
 800a4a4:	196b      	adds	r3, r5, r5
 800a4a6:	eb46 0406 	adc.w	r4, r6, r6
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	f7f6 fbeb 	bl	8000c88 <__aeabi_uldivmod>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	4ba5      	ldr	r3, [pc, #660]	; (800a750 <UART_SetConfig+0x384>)
 800a4ba:	fba3 2302 	umull	r2, r3, r3, r2
 800a4be:	095b      	lsrs	r3, r3, #5
 800a4c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	461d      	mov	r5, r3
 800a4c8:	f04f 0600 	mov.w	r6, #0
 800a4cc:	46a9      	mov	r9, r5
 800a4ce:	46b2      	mov	sl, r6
 800a4d0:	eb19 0309 	adds.w	r3, r9, r9
 800a4d4:	eb4a 040a 	adc.w	r4, sl, sl
 800a4d8:	4699      	mov	r9, r3
 800a4da:	46a2      	mov	sl, r4
 800a4dc:	eb19 0905 	adds.w	r9, r9, r5
 800a4e0:	eb4a 0a06 	adc.w	sl, sl, r6
 800a4e4:	f04f 0100 	mov.w	r1, #0
 800a4e8:	f04f 0200 	mov.w	r2, #0
 800a4ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a4f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a4f8:	4689      	mov	r9, r1
 800a4fa:	4692      	mov	sl, r2
 800a4fc:	eb19 0005 	adds.w	r0, r9, r5
 800a500:	eb4a 0106 	adc.w	r1, sl, r6
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	461d      	mov	r5, r3
 800a50a:	f04f 0600 	mov.w	r6, #0
 800a50e:	196b      	adds	r3, r5, r5
 800a510:	eb46 0406 	adc.w	r4, r6, r6
 800a514:	461a      	mov	r2, r3
 800a516:	4623      	mov	r3, r4
 800a518:	f7f6 fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800a51c:	4603      	mov	r3, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	461a      	mov	r2, r3
 800a522:	4b8b      	ldr	r3, [pc, #556]	; (800a750 <UART_SetConfig+0x384>)
 800a524:	fba3 1302 	umull	r1, r3, r3, r2
 800a528:	095b      	lsrs	r3, r3, #5
 800a52a:	2164      	movs	r1, #100	; 0x64
 800a52c:	fb01 f303 	mul.w	r3, r1, r3
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	3332      	adds	r3, #50	; 0x32
 800a536:	4a86      	ldr	r2, [pc, #536]	; (800a750 <UART_SetConfig+0x384>)
 800a538:	fba2 2303 	umull	r2, r3, r2, r3
 800a53c:	095b      	lsrs	r3, r3, #5
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a544:	4498      	add	r8, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	461d      	mov	r5, r3
 800a54a:	f04f 0600 	mov.w	r6, #0
 800a54e:	46a9      	mov	r9, r5
 800a550:	46b2      	mov	sl, r6
 800a552:	eb19 0309 	adds.w	r3, r9, r9
 800a556:	eb4a 040a 	adc.w	r4, sl, sl
 800a55a:	4699      	mov	r9, r3
 800a55c:	46a2      	mov	sl, r4
 800a55e:	eb19 0905 	adds.w	r9, r9, r5
 800a562:	eb4a 0a06 	adc.w	sl, sl, r6
 800a566:	f04f 0100 	mov.w	r1, #0
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a57a:	4689      	mov	r9, r1
 800a57c:	4692      	mov	sl, r2
 800a57e:	eb19 0005 	adds.w	r0, r9, r5
 800a582:	eb4a 0106 	adc.w	r1, sl, r6
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	461d      	mov	r5, r3
 800a58c:	f04f 0600 	mov.w	r6, #0
 800a590:	196b      	adds	r3, r5, r5
 800a592:	eb46 0406 	adc.w	r4, r6, r6
 800a596:	461a      	mov	r2, r3
 800a598:	4623      	mov	r3, r4
 800a59a:	f7f6 fb75 	bl	8000c88 <__aeabi_uldivmod>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	4b6a      	ldr	r3, [pc, #424]	; (800a750 <UART_SetConfig+0x384>)
 800a5a6:	fba3 1302 	umull	r1, r3, r3, r2
 800a5aa:	095b      	lsrs	r3, r3, #5
 800a5ac:	2164      	movs	r1, #100	; 0x64
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	3332      	adds	r3, #50	; 0x32
 800a5b8:	4a65      	ldr	r2, [pc, #404]	; (800a750 <UART_SetConfig+0x384>)
 800a5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	f003 0207 	and.w	r2, r3, #7
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4442      	add	r2, r8
 800a5ca:	609a      	str	r2, [r3, #8]
 800a5cc:	e26f      	b.n	800aaae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5ce:	f7fe f981 	bl	80088d4 <HAL_RCC_GetPCLK1Freq>
 800a5d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	461d      	mov	r5, r3
 800a5d8:	f04f 0600 	mov.w	r6, #0
 800a5dc:	46a8      	mov	r8, r5
 800a5de:	46b1      	mov	r9, r6
 800a5e0:	eb18 0308 	adds.w	r3, r8, r8
 800a5e4:	eb49 0409 	adc.w	r4, r9, r9
 800a5e8:	4698      	mov	r8, r3
 800a5ea:	46a1      	mov	r9, r4
 800a5ec:	eb18 0805 	adds.w	r8, r8, r5
 800a5f0:	eb49 0906 	adc.w	r9, r9, r6
 800a5f4:	f04f 0100 	mov.w	r1, #0
 800a5f8:	f04f 0200 	mov.w	r2, #0
 800a5fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a600:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a604:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a608:	4688      	mov	r8, r1
 800a60a:	4691      	mov	r9, r2
 800a60c:	eb18 0005 	adds.w	r0, r8, r5
 800a610:	eb49 0106 	adc.w	r1, r9, r6
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	461d      	mov	r5, r3
 800a61a:	f04f 0600 	mov.w	r6, #0
 800a61e:	196b      	adds	r3, r5, r5
 800a620:	eb46 0406 	adc.w	r4, r6, r6
 800a624:	461a      	mov	r2, r3
 800a626:	4623      	mov	r3, r4
 800a628:	f7f6 fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800a62c:	4603      	mov	r3, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	461a      	mov	r2, r3
 800a632:	4b47      	ldr	r3, [pc, #284]	; (800a750 <UART_SetConfig+0x384>)
 800a634:	fba3 2302 	umull	r2, r3, r3, r2
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	461d      	mov	r5, r3
 800a642:	f04f 0600 	mov.w	r6, #0
 800a646:	46a9      	mov	r9, r5
 800a648:	46b2      	mov	sl, r6
 800a64a:	eb19 0309 	adds.w	r3, r9, r9
 800a64e:	eb4a 040a 	adc.w	r4, sl, sl
 800a652:	4699      	mov	r9, r3
 800a654:	46a2      	mov	sl, r4
 800a656:	eb19 0905 	adds.w	r9, r9, r5
 800a65a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a65e:	f04f 0100 	mov.w	r1, #0
 800a662:	f04f 0200 	mov.w	r2, #0
 800a666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a66a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a66e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a672:	4689      	mov	r9, r1
 800a674:	4692      	mov	sl, r2
 800a676:	eb19 0005 	adds.w	r0, r9, r5
 800a67a:	eb4a 0106 	adc.w	r1, sl, r6
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	461d      	mov	r5, r3
 800a684:	f04f 0600 	mov.w	r6, #0
 800a688:	196b      	adds	r3, r5, r5
 800a68a:	eb46 0406 	adc.w	r4, r6, r6
 800a68e:	461a      	mov	r2, r3
 800a690:	4623      	mov	r3, r4
 800a692:	f7f6 faf9 	bl	8000c88 <__aeabi_uldivmod>
 800a696:	4603      	mov	r3, r0
 800a698:	460c      	mov	r4, r1
 800a69a:	461a      	mov	r2, r3
 800a69c:	4b2c      	ldr	r3, [pc, #176]	; (800a750 <UART_SetConfig+0x384>)
 800a69e:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a2:	095b      	lsrs	r3, r3, #5
 800a6a4:	2164      	movs	r1, #100	; 0x64
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	3332      	adds	r3, #50	; 0x32
 800a6b0:	4a27      	ldr	r2, [pc, #156]	; (800a750 <UART_SetConfig+0x384>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	095b      	lsrs	r3, r3, #5
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6be:	4498      	add	r8, r3
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	461d      	mov	r5, r3
 800a6c4:	f04f 0600 	mov.w	r6, #0
 800a6c8:	46a9      	mov	r9, r5
 800a6ca:	46b2      	mov	sl, r6
 800a6cc:	eb19 0309 	adds.w	r3, r9, r9
 800a6d0:	eb4a 040a 	adc.w	r4, sl, sl
 800a6d4:	4699      	mov	r9, r3
 800a6d6:	46a2      	mov	sl, r4
 800a6d8:	eb19 0905 	adds.w	r9, r9, r5
 800a6dc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a6e0:	f04f 0100 	mov.w	r1, #0
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6f4:	4689      	mov	r9, r1
 800a6f6:	4692      	mov	sl, r2
 800a6f8:	eb19 0005 	adds.w	r0, r9, r5
 800a6fc:	eb4a 0106 	adc.w	r1, sl, r6
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	461d      	mov	r5, r3
 800a706:	f04f 0600 	mov.w	r6, #0
 800a70a:	196b      	adds	r3, r5, r5
 800a70c:	eb46 0406 	adc.w	r4, r6, r6
 800a710:	461a      	mov	r2, r3
 800a712:	4623      	mov	r3, r4
 800a714:	f7f6 fab8 	bl	8000c88 <__aeabi_uldivmod>
 800a718:	4603      	mov	r3, r0
 800a71a:	460c      	mov	r4, r1
 800a71c:	461a      	mov	r2, r3
 800a71e:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <UART_SetConfig+0x384>)
 800a720:	fba3 1302 	umull	r1, r3, r3, r2
 800a724:	095b      	lsrs	r3, r3, #5
 800a726:	2164      	movs	r1, #100	; 0x64
 800a728:	fb01 f303 	mul.w	r3, r1, r3
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	3332      	adds	r3, #50	; 0x32
 800a732:	4a07      	ldr	r2, [pc, #28]	; (800a750 <UART_SetConfig+0x384>)
 800a734:	fba2 2303 	umull	r2, r3, r2, r3
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	f003 0207 	and.w	r2, r3, #7
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4442      	add	r2, r8
 800a744:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a746:	e1b2      	b.n	800aaae <UART_SetConfig+0x6e2>
 800a748:	40011000 	.word	0x40011000
 800a74c:	40011400 	.word	0x40011400
 800a750:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4ad7      	ldr	r2, [pc, #860]	; (800aab8 <UART_SetConfig+0x6ec>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d005      	beq.n	800a76a <UART_SetConfig+0x39e>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4ad6      	ldr	r2, [pc, #856]	; (800aabc <UART_SetConfig+0x6f0>)
 800a764:	4293      	cmp	r3, r2
 800a766:	f040 80d1 	bne.w	800a90c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a76a:	f7fe f8c7 	bl	80088fc <HAL_RCC_GetPCLK2Freq>
 800a76e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	469a      	mov	sl, r3
 800a774:	f04f 0b00 	mov.w	fp, #0
 800a778:	46d0      	mov	r8, sl
 800a77a:	46d9      	mov	r9, fp
 800a77c:	eb18 0308 	adds.w	r3, r8, r8
 800a780:	eb49 0409 	adc.w	r4, r9, r9
 800a784:	4698      	mov	r8, r3
 800a786:	46a1      	mov	r9, r4
 800a788:	eb18 080a 	adds.w	r8, r8, sl
 800a78c:	eb49 090b 	adc.w	r9, r9, fp
 800a790:	f04f 0100 	mov.w	r1, #0
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a79c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7a4:	4688      	mov	r8, r1
 800a7a6:	4691      	mov	r9, r2
 800a7a8:	eb1a 0508 	adds.w	r5, sl, r8
 800a7ac:	eb4b 0609 	adc.w	r6, fp, r9
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	f04f 0200 	mov.w	r2, #0
 800a7ba:	f04f 0300 	mov.w	r3, #0
 800a7be:	f04f 0400 	mov.w	r4, #0
 800a7c2:	0094      	lsls	r4, r2, #2
 800a7c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a7c8:	008b      	lsls	r3, r1, #2
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4623      	mov	r3, r4
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	f7f6 fa59 	bl	8000c88 <__aeabi_uldivmod>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	460c      	mov	r4, r1
 800a7da:	461a      	mov	r2, r3
 800a7dc:	4bb8      	ldr	r3, [pc, #736]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a7de:	fba3 2302 	umull	r2, r3, r3, r2
 800a7e2:	095b      	lsrs	r3, r3, #5
 800a7e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	469b      	mov	fp, r3
 800a7ec:	f04f 0c00 	mov.w	ip, #0
 800a7f0:	46d9      	mov	r9, fp
 800a7f2:	46e2      	mov	sl, ip
 800a7f4:	eb19 0309 	adds.w	r3, r9, r9
 800a7f8:	eb4a 040a 	adc.w	r4, sl, sl
 800a7fc:	4699      	mov	r9, r3
 800a7fe:	46a2      	mov	sl, r4
 800a800:	eb19 090b 	adds.w	r9, r9, fp
 800a804:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a808:	f04f 0100 	mov.w	r1, #0
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a81c:	4689      	mov	r9, r1
 800a81e:	4692      	mov	sl, r2
 800a820:	eb1b 0509 	adds.w	r5, fp, r9
 800a824:	eb4c 060a 	adc.w	r6, ip, sl
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	4619      	mov	r1, r3
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	f04f 0300 	mov.w	r3, #0
 800a836:	f04f 0400 	mov.w	r4, #0
 800a83a:	0094      	lsls	r4, r2, #2
 800a83c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a840:	008b      	lsls	r3, r1, #2
 800a842:	461a      	mov	r2, r3
 800a844:	4623      	mov	r3, r4
 800a846:	4628      	mov	r0, r5
 800a848:	4631      	mov	r1, r6
 800a84a:	f7f6 fa1d 	bl	8000c88 <__aeabi_uldivmod>
 800a84e:	4603      	mov	r3, r0
 800a850:	460c      	mov	r4, r1
 800a852:	461a      	mov	r2, r3
 800a854:	4b9a      	ldr	r3, [pc, #616]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a856:	fba3 1302 	umull	r1, r3, r3, r2
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	2164      	movs	r1, #100	; 0x64
 800a85e:	fb01 f303 	mul.w	r3, r1, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	3332      	adds	r3, #50	; 0x32
 800a868:	4a95      	ldr	r2, [pc, #596]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a86a:	fba2 2303 	umull	r2, r3, r2, r3
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a874:	4498      	add	r8, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	469b      	mov	fp, r3
 800a87a:	f04f 0c00 	mov.w	ip, #0
 800a87e:	46d9      	mov	r9, fp
 800a880:	46e2      	mov	sl, ip
 800a882:	eb19 0309 	adds.w	r3, r9, r9
 800a886:	eb4a 040a 	adc.w	r4, sl, sl
 800a88a:	4699      	mov	r9, r3
 800a88c:	46a2      	mov	sl, r4
 800a88e:	eb19 090b 	adds.w	r9, r9, fp
 800a892:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a896:	f04f 0100 	mov.w	r1, #0
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8aa:	4689      	mov	r9, r1
 800a8ac:	4692      	mov	sl, r2
 800a8ae:	eb1b 0509 	adds.w	r5, fp, r9
 800a8b2:	eb4c 060a 	adc.w	r6, ip, sl
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f04f 0200 	mov.w	r2, #0
 800a8c0:	f04f 0300 	mov.w	r3, #0
 800a8c4:	f04f 0400 	mov.w	r4, #0
 800a8c8:	0094      	lsls	r4, r2, #2
 800a8ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a8ce:	008b      	lsls	r3, r1, #2
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4623      	mov	r3, r4
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	f7f6 f9d6 	bl	8000c88 <__aeabi_uldivmod>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4b77      	ldr	r3, [pc, #476]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a8e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8e8:	095b      	lsrs	r3, r3, #5
 800a8ea:	2164      	movs	r1, #100	; 0x64
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	011b      	lsls	r3, r3, #4
 800a8f4:	3332      	adds	r3, #50	; 0x32
 800a8f6:	4a72      	ldr	r2, [pc, #456]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	f003 020f 	and.w	r2, r3, #15
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4442      	add	r2, r8
 800a908:	609a      	str	r2, [r3, #8]
 800a90a:	e0d0      	b.n	800aaae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a90c:	f7fd ffe2 	bl	80088d4 <HAL_RCC_GetPCLK1Freq>
 800a910:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	469a      	mov	sl, r3
 800a916:	f04f 0b00 	mov.w	fp, #0
 800a91a:	46d0      	mov	r8, sl
 800a91c:	46d9      	mov	r9, fp
 800a91e:	eb18 0308 	adds.w	r3, r8, r8
 800a922:	eb49 0409 	adc.w	r4, r9, r9
 800a926:	4698      	mov	r8, r3
 800a928:	46a1      	mov	r9, r4
 800a92a:	eb18 080a 	adds.w	r8, r8, sl
 800a92e:	eb49 090b 	adc.w	r9, r9, fp
 800a932:	f04f 0100 	mov.w	r1, #0
 800a936:	f04f 0200 	mov.w	r2, #0
 800a93a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a93e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a942:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a946:	4688      	mov	r8, r1
 800a948:	4691      	mov	r9, r2
 800a94a:	eb1a 0508 	adds.w	r5, sl, r8
 800a94e:	eb4b 0609 	adc.w	r6, fp, r9
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	4619      	mov	r1, r3
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	f04f 0300 	mov.w	r3, #0
 800a960:	f04f 0400 	mov.w	r4, #0
 800a964:	0094      	lsls	r4, r2, #2
 800a966:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a96a:	008b      	lsls	r3, r1, #2
 800a96c:	461a      	mov	r2, r3
 800a96e:	4623      	mov	r3, r4
 800a970:	4628      	mov	r0, r5
 800a972:	4631      	mov	r1, r6
 800a974:	f7f6 f988 	bl	8000c88 <__aeabi_uldivmod>
 800a978:	4603      	mov	r3, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	461a      	mov	r2, r3
 800a97e:	4b50      	ldr	r3, [pc, #320]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a980:	fba3 2302 	umull	r2, r3, r3, r2
 800a984:	095b      	lsrs	r3, r3, #5
 800a986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	469b      	mov	fp, r3
 800a98e:	f04f 0c00 	mov.w	ip, #0
 800a992:	46d9      	mov	r9, fp
 800a994:	46e2      	mov	sl, ip
 800a996:	eb19 0309 	adds.w	r3, r9, r9
 800a99a:	eb4a 040a 	adc.w	r4, sl, sl
 800a99e:	4699      	mov	r9, r3
 800a9a0:	46a2      	mov	sl, r4
 800a9a2:	eb19 090b 	adds.w	r9, r9, fp
 800a9a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a9aa:	f04f 0100 	mov.w	r1, #0
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9be:	4689      	mov	r9, r1
 800a9c0:	4692      	mov	sl, r2
 800a9c2:	eb1b 0509 	adds.w	r5, fp, r9
 800a9c6:	eb4c 060a 	adc.w	r6, ip, sl
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f04f 0200 	mov.w	r2, #0
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	f04f 0400 	mov.w	r4, #0
 800a9dc:	0094      	lsls	r4, r2, #2
 800a9de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9e2:	008b      	lsls	r3, r1, #2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4623      	mov	r3, r4
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	f7f6 f94c 	bl	8000c88 <__aeabi_uldivmod>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	4b32      	ldr	r3, [pc, #200]	; (800aac0 <UART_SetConfig+0x6f4>)
 800a9f8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9fc:	095b      	lsrs	r3, r3, #5
 800a9fe:	2164      	movs	r1, #100	; 0x64
 800aa00:	fb01 f303 	mul.w	r3, r1, r3
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	3332      	adds	r3, #50	; 0x32
 800aa0a:	4a2d      	ldr	r2, [pc, #180]	; (800aac0 <UART_SetConfig+0x6f4>)
 800aa0c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa10:	095b      	lsrs	r3, r3, #5
 800aa12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa16:	4498      	add	r8, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	469b      	mov	fp, r3
 800aa1c:	f04f 0c00 	mov.w	ip, #0
 800aa20:	46d9      	mov	r9, fp
 800aa22:	46e2      	mov	sl, ip
 800aa24:	eb19 0309 	adds.w	r3, r9, r9
 800aa28:	eb4a 040a 	adc.w	r4, sl, sl
 800aa2c:	4699      	mov	r9, r3
 800aa2e:	46a2      	mov	sl, r4
 800aa30:	eb19 090b 	adds.w	r9, r9, fp
 800aa34:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa38:	f04f 0100 	mov.w	r1, #0
 800aa3c:	f04f 0200 	mov.w	r2, #0
 800aa40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	4692      	mov	sl, r2
 800aa50:	eb1b 0509 	adds.w	r5, fp, r9
 800aa54:	eb4c 060a 	adc.w	r6, ip, sl
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f04f 0200 	mov.w	r2, #0
 800aa62:	f04f 0300 	mov.w	r3, #0
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	0094      	lsls	r4, r2, #2
 800aa6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa70:	008b      	lsls	r3, r1, #2
 800aa72:	461a      	mov	r2, r3
 800aa74:	4623      	mov	r3, r4
 800aa76:	4628      	mov	r0, r5
 800aa78:	4631      	mov	r1, r6
 800aa7a:	f7f6 f905 	bl	8000c88 <__aeabi_uldivmod>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	461a      	mov	r2, r3
 800aa84:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <UART_SetConfig+0x6f4>)
 800aa86:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8a:	095b      	lsrs	r3, r3, #5
 800aa8c:	2164      	movs	r1, #100	; 0x64
 800aa8e:	fb01 f303 	mul.w	r3, r1, r3
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	011b      	lsls	r3, r3, #4
 800aa96:	3332      	adds	r3, #50	; 0x32
 800aa98:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <UART_SetConfig+0x6f4>)
 800aa9a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa9e:	095b      	lsrs	r3, r3, #5
 800aaa0:	f003 020f 	and.w	r2, r3, #15
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4442      	add	r2, r8
 800aaaa:	609a      	str	r2, [r3, #8]
}
 800aaac:	e7ff      	b.n	800aaae <UART_SetConfig+0x6e2>
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	40011000 	.word	0x40011000
 800aabc:	40011400 	.word	0x40011400
 800aac0:	51eb851f 	.word	0x51eb851f
 800aac4:	00000000 	.word	0x00000000

0800aac8 <cos>:
 800aac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaca:	ec51 0b10 	vmov	r0, r1, d0
 800aace:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <cos+0x80>)
 800aad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aad4:	4293      	cmp	r3, r2
 800aad6:	dc06      	bgt.n	800aae6 <cos+0x1e>
 800aad8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ab40 <cos+0x78>
 800aadc:	f000 fa74 	bl	800afc8 <__kernel_cos>
 800aae0:	ec51 0b10 	vmov	r0, r1, d0
 800aae4:	e007      	b.n	800aaf6 <cos+0x2e>
 800aae6:	4a19      	ldr	r2, [pc, #100]	; (800ab4c <cos+0x84>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	dd09      	ble.n	800ab00 <cos+0x38>
 800aaec:	ee10 2a10 	vmov	r2, s0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	f7f5 fbc9 	bl	8000288 <__aeabi_dsub>
 800aaf6:	ec41 0b10 	vmov	d0, r0, r1
 800aafa:	b005      	add	sp, #20
 800aafc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab00:	4668      	mov	r0, sp
 800ab02:	f000 f86d 	bl	800abe0 <__ieee754_rem_pio2>
 800ab06:	f000 0003 	and.w	r0, r0, #3
 800ab0a:	2801      	cmp	r0, #1
 800ab0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab10:	ed9d 0b00 	vldr	d0, [sp]
 800ab14:	d007      	beq.n	800ab26 <cos+0x5e>
 800ab16:	2802      	cmp	r0, #2
 800ab18:	d00e      	beq.n	800ab38 <cos+0x70>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d0de      	beq.n	800aadc <cos+0x14>
 800ab1e:	2001      	movs	r0, #1
 800ab20:	f000 fe5a 	bl	800b7d8 <__kernel_sin>
 800ab24:	e7dc      	b.n	800aae0 <cos+0x18>
 800ab26:	f000 fe57 	bl	800b7d8 <__kernel_sin>
 800ab2a:	ec53 2b10 	vmov	r2, r3, d0
 800ab2e:	ee10 0a10 	vmov	r0, s0
 800ab32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ab36:	e7de      	b.n	800aaf6 <cos+0x2e>
 800ab38:	f000 fa46 	bl	800afc8 <__kernel_cos>
 800ab3c:	e7f5      	b.n	800ab2a <cos+0x62>
 800ab3e:	bf00      	nop
	...
 800ab48:	3fe921fb 	.word	0x3fe921fb
 800ab4c:	7fefffff 	.word	0x7fefffff

0800ab50 <sin>:
 800ab50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab52:	ec51 0b10 	vmov	r0, r1, d0
 800ab56:	4a20      	ldr	r2, [pc, #128]	; (800abd8 <sin+0x88>)
 800ab58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	dc07      	bgt.n	800ab70 <sin+0x20>
 800ab60:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800abd0 <sin+0x80>
 800ab64:	2000      	movs	r0, #0
 800ab66:	f000 fe37 	bl	800b7d8 <__kernel_sin>
 800ab6a:	ec51 0b10 	vmov	r0, r1, d0
 800ab6e:	e007      	b.n	800ab80 <sin+0x30>
 800ab70:	4a1a      	ldr	r2, [pc, #104]	; (800abdc <sin+0x8c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	dd09      	ble.n	800ab8a <sin+0x3a>
 800ab76:	ee10 2a10 	vmov	r2, s0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	f7f5 fb84 	bl	8000288 <__aeabi_dsub>
 800ab80:	ec41 0b10 	vmov	d0, r0, r1
 800ab84:	b005      	add	sp, #20
 800ab86:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab8a:	4668      	mov	r0, sp
 800ab8c:	f000 f828 	bl	800abe0 <__ieee754_rem_pio2>
 800ab90:	f000 0003 	and.w	r0, r0, #3
 800ab94:	2801      	cmp	r0, #1
 800ab96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab9a:	ed9d 0b00 	vldr	d0, [sp]
 800ab9e:	d004      	beq.n	800abaa <sin+0x5a>
 800aba0:	2802      	cmp	r0, #2
 800aba2:	d005      	beq.n	800abb0 <sin+0x60>
 800aba4:	b970      	cbnz	r0, 800abc4 <sin+0x74>
 800aba6:	2001      	movs	r0, #1
 800aba8:	e7dd      	b.n	800ab66 <sin+0x16>
 800abaa:	f000 fa0d 	bl	800afc8 <__kernel_cos>
 800abae:	e7dc      	b.n	800ab6a <sin+0x1a>
 800abb0:	2001      	movs	r0, #1
 800abb2:	f000 fe11 	bl	800b7d8 <__kernel_sin>
 800abb6:	ec53 2b10 	vmov	r2, r3, d0
 800abba:	ee10 0a10 	vmov	r0, s0
 800abbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800abc2:	e7dd      	b.n	800ab80 <sin+0x30>
 800abc4:	f000 fa00 	bl	800afc8 <__kernel_cos>
 800abc8:	e7f5      	b.n	800abb6 <sin+0x66>
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
	...
 800abd8:	3fe921fb 	.word	0x3fe921fb
 800abdc:	7fefffff 	.word	0x7fefffff

0800abe0 <__ieee754_rem_pio2>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	ec57 6b10 	vmov	r6, r7, d0
 800abe8:	4bc3      	ldr	r3, [pc, #780]	; (800aef8 <__ieee754_rem_pio2+0x318>)
 800abea:	b08d      	sub	sp, #52	; 0x34
 800abec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800abf0:	4598      	cmp	r8, r3
 800abf2:	4604      	mov	r4, r0
 800abf4:	9704      	str	r7, [sp, #16]
 800abf6:	dc07      	bgt.n	800ac08 <__ieee754_rem_pio2+0x28>
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	ed84 0b00 	vstr	d0, [r4]
 800ac00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac04:	2500      	movs	r5, #0
 800ac06:	e027      	b.n	800ac58 <__ieee754_rem_pio2+0x78>
 800ac08:	4bbc      	ldr	r3, [pc, #752]	; (800aefc <__ieee754_rem_pio2+0x31c>)
 800ac0a:	4598      	cmp	r8, r3
 800ac0c:	dc75      	bgt.n	800acfa <__ieee754_rem_pio2+0x11a>
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	4dbb      	ldr	r5, [pc, #748]	; (800af00 <__ieee754_rem_pio2+0x320>)
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	ee10 0a10 	vmov	r0, s0
 800ac18:	a3a9      	add	r3, pc, #676	; (adr r3, 800aec0 <__ieee754_rem_pio2+0x2e0>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	4639      	mov	r1, r7
 800ac20:	dd36      	ble.n	800ac90 <__ieee754_rem_pio2+0xb0>
 800ac22:	f7f5 fb31 	bl	8000288 <__aeabi_dsub>
 800ac26:	45a8      	cmp	r8, r5
 800ac28:	4606      	mov	r6, r0
 800ac2a:	460f      	mov	r7, r1
 800ac2c:	d018      	beq.n	800ac60 <__ieee754_rem_pio2+0x80>
 800ac2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2e8>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f7f5 fb28 	bl	8000288 <__aeabi_dsub>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fb20 	bl	8000288 <__aeabi_dsub>
 800ac48:	a39f      	add	r3, pc, #636	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2e8>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fb1b 	bl	8000288 <__aeabi_dsub>
 800ac52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac56:	2501      	movs	r5, #1
 800ac58:	4628      	mov	r0, r5
 800ac5a:	b00d      	add	sp, #52	; 0x34
 800ac5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac60:	a39b      	add	r3, pc, #620	; (adr r3, 800aed0 <__ieee754_rem_pio2+0x2f0>)
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	f7f5 fb0f 	bl	8000288 <__aeabi_dsub>
 800ac6a:	a39b      	add	r3, pc, #620	; (adr r3, 800aed8 <__ieee754_rem_pio2+0x2f8>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	4606      	mov	r6, r0
 800ac72:	460f      	mov	r7, r1
 800ac74:	f7f5 fb08 	bl	8000288 <__aeabi_dsub>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 fb00 	bl	8000288 <__aeabi_dsub>
 800ac88:	a393      	add	r3, pc, #588	; (adr r3, 800aed8 <__ieee754_rem_pio2+0x2f8>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	e7de      	b.n	800ac4e <__ieee754_rem_pio2+0x6e>
 800ac90:	f7f5 fafc 	bl	800028c <__adddf3>
 800ac94:	45a8      	cmp	r8, r5
 800ac96:	4606      	mov	r6, r0
 800ac98:	460f      	mov	r7, r1
 800ac9a:	d016      	beq.n	800acca <__ieee754_rem_pio2+0xea>
 800ac9c:	a38a      	add	r3, pc, #552	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2e8>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf3 	bl	800028c <__adddf3>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	e9c4 2300 	strd	r2, r3, [r4]
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7f5 fae9 	bl	8000288 <__aeabi_dsub>
 800acb6:	a384      	add	r3, pc, #528	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2e8>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fae6 	bl	800028c <__adddf3>
 800acc0:	f04f 35ff 	mov.w	r5, #4294967295
 800acc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acc8:	e7c6      	b.n	800ac58 <__ieee754_rem_pio2+0x78>
 800acca:	a381      	add	r3, pc, #516	; (adr r3, 800aed0 <__ieee754_rem_pio2+0x2f0>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fadc 	bl	800028c <__adddf3>
 800acd4:	a380      	add	r3, pc, #512	; (adr r3, 800aed8 <__ieee754_rem_pio2+0x2f8>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	4606      	mov	r6, r0
 800acdc:	460f      	mov	r7, r1
 800acde:	f7f5 fad5 	bl	800028c <__adddf3>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	e9c4 2300 	strd	r2, r3, [r4]
 800acea:	4630      	mov	r0, r6
 800acec:	4639      	mov	r1, r7
 800acee:	f7f5 facb 	bl	8000288 <__aeabi_dsub>
 800acf2:	a379      	add	r3, pc, #484	; (adr r3, 800aed8 <__ieee754_rem_pio2+0x2f8>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	e7e0      	b.n	800acbc <__ieee754_rem_pio2+0xdc>
 800acfa:	4b82      	ldr	r3, [pc, #520]	; (800af04 <__ieee754_rem_pio2+0x324>)
 800acfc:	4598      	cmp	r8, r3
 800acfe:	f300 80d0 	bgt.w	800aea2 <__ieee754_rem_pio2+0x2c2>
 800ad02:	f000 fe23 	bl	800b94c <fabs>
 800ad06:	ec57 6b10 	vmov	r6, r7, d0
 800ad0a:	ee10 0a10 	vmov	r0, s0
 800ad0e:	a374      	add	r3, pc, #464	; (adr r3, 800aee0 <__ieee754_rem_pio2+0x300>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 fc6f 	bl	80005f8 <__aeabi_dmul>
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4b7a      	ldr	r3, [pc, #488]	; (800af08 <__ieee754_rem_pio2+0x328>)
 800ad1e:	f7f5 fab5 	bl	800028c <__adddf3>
 800ad22:	f7f5 ff19 	bl	8000b58 <__aeabi_d2iz>
 800ad26:	4605      	mov	r5, r0
 800ad28:	f7f5 fbfc 	bl	8000524 <__aeabi_i2d>
 800ad2c:	a364      	add	r3, pc, #400	; (adr r3, 800aec0 <__ieee754_rem_pio2+0x2e0>)
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad36:	f7f5 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4630      	mov	r0, r6
 800ad40:	4639      	mov	r1, r7
 800ad42:	f7f5 faa1 	bl	8000288 <__aeabi_dsub>
 800ad46:	a360      	add	r3, pc, #384	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2e8>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	468b      	mov	fp, r1
 800ad50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad54:	f7f5 fc50 	bl	80005f8 <__aeabi_dmul>
 800ad58:	2d1f      	cmp	r5, #31
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	dc0c      	bgt.n	800ad7a <__ieee754_rem_pio2+0x19a>
 800ad60:	1e6a      	subs	r2, r5, #1
 800ad62:	4b6a      	ldr	r3, [pc, #424]	; (800af0c <__ieee754_rem_pio2+0x32c>)
 800ad64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad68:	4543      	cmp	r3, r8
 800ad6a:	d006      	beq.n	800ad7a <__ieee754_rem_pio2+0x19a>
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	463b      	mov	r3, r7
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	f7f5 fa88 	bl	8000288 <__aeabi_dsub>
 800ad78:	e00e      	b.n	800ad98 <__ieee754_rem_pio2+0x1b8>
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	4650      	mov	r0, sl
 800ad80:	4659      	mov	r1, fp
 800ad82:	f7f5 fa81 	bl	8000288 <__aeabi_dsub>
 800ad86:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ad8a:	9305      	str	r3, [sp, #20]
 800ad8c:	9a05      	ldr	r2, [sp, #20]
 800ad8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	dc02      	bgt.n	800ad9e <__ieee754_rem_pio2+0x1be>
 800ad98:	e9c4 0100 	strd	r0, r1, [r4]
 800ad9c:	e039      	b.n	800ae12 <__ieee754_rem_pio2+0x232>
 800ad9e:	a34c      	add	r3, pc, #304	; (adr r3, 800aed0 <__ieee754_rem_pio2+0x2f0>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada8:	f7f5 fc26 	bl	80005f8 <__aeabi_dmul>
 800adac:	4606      	mov	r6, r0
 800adae:	460f      	mov	r7, r1
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4650      	mov	r0, sl
 800adb6:	4659      	mov	r1, fp
 800adb8:	f7f5 fa66 	bl	8000288 <__aeabi_dsub>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4680      	mov	r8, r0
 800adc2:	4689      	mov	r9, r1
 800adc4:	4650      	mov	r0, sl
 800adc6:	4659      	mov	r1, fp
 800adc8:	f7f5 fa5e 	bl	8000288 <__aeabi_dsub>
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	f7f5 fa5a 	bl	8000288 <__aeabi_dsub>
 800add4:	a340      	add	r3, pc, #256	; (adr r3, 800aed8 <__ieee754_rem_pio2+0x2f8>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	4606      	mov	r6, r0
 800addc:	460f      	mov	r7, r1
 800adde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade2:	f7f5 fc09 	bl	80005f8 <__aeabi_dmul>
 800ade6:	4632      	mov	r2, r6
 800ade8:	463b      	mov	r3, r7
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4606      	mov	r6, r0
 800adf4:	460f      	mov	r7, r1
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 fa45 	bl	8000288 <__aeabi_dsub>
 800adfe:	9a05      	ldr	r2, [sp, #20]
 800ae00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	2b31      	cmp	r3, #49	; 0x31
 800ae08:	dc20      	bgt.n	800ae4c <__ieee754_rem_pio2+0x26c>
 800ae0a:	e9c4 0100 	strd	r0, r1, [r4]
 800ae0e:	46c2      	mov	sl, r8
 800ae10:	46cb      	mov	fp, r9
 800ae12:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae16:	4650      	mov	r0, sl
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	f7f5 fa33 	bl	8000288 <__aeabi_dsub>
 800ae22:	463b      	mov	r3, r7
 800ae24:	4632      	mov	r2, r6
 800ae26:	f7f5 fa2f 	bl	8000288 <__aeabi_dsub>
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae32:	f6bf af11 	bge.w	800ac58 <__ieee754_rem_pio2+0x78>
 800ae36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae3a:	6063      	str	r3, [r4, #4]
 800ae3c:	f8c4 8000 	str.w	r8, [r4]
 800ae40:	60a0      	str	r0, [r4, #8]
 800ae42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae46:	60e3      	str	r3, [r4, #12]
 800ae48:	426d      	negs	r5, r5
 800ae4a:	e705      	b.n	800ac58 <__ieee754_rem_pio2+0x78>
 800ae4c:	a326      	add	r3, pc, #152	; (adr r3, 800aee8 <__ieee754_rem_pio2+0x308>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae56:	f7f5 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4640      	mov	r0, r8
 800ae64:	4649      	mov	r1, r9
 800ae66:	f7f5 fa0f 	bl	8000288 <__aeabi_dsub>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4682      	mov	sl, r0
 800ae70:	468b      	mov	fp, r1
 800ae72:	4640      	mov	r0, r8
 800ae74:	4649      	mov	r1, r9
 800ae76:	f7f5 fa07 	bl	8000288 <__aeabi_dsub>
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	463b      	mov	r3, r7
 800ae7e:	f7f5 fa03 	bl	8000288 <__aeabi_dsub>
 800ae82:	a31b      	add	r3, pc, #108	; (adr r3, 800aef0 <__ieee754_rem_pio2+0x310>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	4606      	mov	r6, r0
 800ae8a:	460f      	mov	r7, r1
 800ae8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae90:	f7f5 fbb2 	bl	80005f8 <__aeabi_dmul>
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	f7f5 f9f6 	bl	8000288 <__aeabi_dsub>
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	460f      	mov	r7, r1
 800aea0:	e764      	b.n	800ad6c <__ieee754_rem_pio2+0x18c>
 800aea2:	4b1b      	ldr	r3, [pc, #108]	; (800af10 <__ieee754_rem_pio2+0x330>)
 800aea4:	4598      	cmp	r8, r3
 800aea6:	dd35      	ble.n	800af14 <__ieee754_rem_pio2+0x334>
 800aea8:	ee10 2a10 	vmov	r2, s0
 800aeac:	463b      	mov	r3, r7
 800aeae:	4630      	mov	r0, r6
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	f7f5 f9e9 	bl	8000288 <__aeabi_dsub>
 800aeb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aeba:	e9c4 0100 	strd	r0, r1, [r4]
 800aebe:	e6a1      	b.n	800ac04 <__ieee754_rem_pio2+0x24>
 800aec0:	54400000 	.word	0x54400000
 800aec4:	3ff921fb 	.word	0x3ff921fb
 800aec8:	1a626331 	.word	0x1a626331
 800aecc:	3dd0b461 	.word	0x3dd0b461
 800aed0:	1a600000 	.word	0x1a600000
 800aed4:	3dd0b461 	.word	0x3dd0b461
 800aed8:	2e037073 	.word	0x2e037073
 800aedc:	3ba3198a 	.word	0x3ba3198a
 800aee0:	6dc9c883 	.word	0x6dc9c883
 800aee4:	3fe45f30 	.word	0x3fe45f30
 800aee8:	2e000000 	.word	0x2e000000
 800aeec:	3ba3198a 	.word	0x3ba3198a
 800aef0:	252049c1 	.word	0x252049c1
 800aef4:	397b839a 	.word	0x397b839a
 800aef8:	3fe921fb 	.word	0x3fe921fb
 800aefc:	4002d97b 	.word	0x4002d97b
 800af00:	3ff921fb 	.word	0x3ff921fb
 800af04:	413921fb 	.word	0x413921fb
 800af08:	3fe00000 	.word	0x3fe00000
 800af0c:	080100fc 	.word	0x080100fc
 800af10:	7fefffff 	.word	0x7fefffff
 800af14:	ea4f 5528 	mov.w	r5, r8, asr #20
 800af18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800af1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800af20:	4630      	mov	r0, r6
 800af22:	460f      	mov	r7, r1
 800af24:	f7f5 fe18 	bl	8000b58 <__aeabi_d2iz>
 800af28:	f7f5 fafc 	bl	8000524 <__aeabi_i2d>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4630      	mov	r0, r6
 800af32:	4639      	mov	r1, r7
 800af34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af38:	f7f5 f9a6 	bl	8000288 <__aeabi_dsub>
 800af3c:	2200      	movs	r2, #0
 800af3e:	4b1f      	ldr	r3, [pc, #124]	; (800afbc <__ieee754_rem_pio2+0x3dc>)
 800af40:	f7f5 fb5a 	bl	80005f8 <__aeabi_dmul>
 800af44:	460f      	mov	r7, r1
 800af46:	4606      	mov	r6, r0
 800af48:	f7f5 fe06 	bl	8000b58 <__aeabi_d2iz>
 800af4c:	f7f5 faea 	bl	8000524 <__aeabi_i2d>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	4630      	mov	r0, r6
 800af56:	4639      	mov	r1, r7
 800af58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af5c:	f7f5 f994 	bl	8000288 <__aeabi_dsub>
 800af60:	2200      	movs	r2, #0
 800af62:	4b16      	ldr	r3, [pc, #88]	; (800afbc <__ieee754_rem_pio2+0x3dc>)
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800af70:	f04f 0803 	mov.w	r8, #3
 800af74:	2600      	movs	r6, #0
 800af76:	2700      	movs	r7, #0
 800af78:	4632      	mov	r2, r6
 800af7a:	463b      	mov	r3, r7
 800af7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800af80:	f108 3aff 	add.w	sl, r8, #4294967295
 800af84:	f7f5 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 800af88:	b9b0      	cbnz	r0, 800afb8 <__ieee754_rem_pio2+0x3d8>
 800af8a:	4b0d      	ldr	r3, [pc, #52]	; (800afc0 <__ieee754_rem_pio2+0x3e0>)
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	2302      	movs	r3, #2
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	462a      	mov	r2, r5
 800af94:	4643      	mov	r3, r8
 800af96:	4621      	mov	r1, r4
 800af98:	a806      	add	r0, sp, #24
 800af9a:	f000 f8dd 	bl	800b158 <__kernel_rem_pio2>
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	4605      	mov	r5, r0
 800afa4:	f6bf ae58 	bge.w	800ac58 <__ieee754_rem_pio2+0x78>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afae:	6063      	str	r3, [r4, #4]
 800afb0:	68e3      	ldr	r3, [r4, #12]
 800afb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afb6:	e746      	b.n	800ae46 <__ieee754_rem_pio2+0x266>
 800afb8:	46d0      	mov	r8, sl
 800afba:	e7dd      	b.n	800af78 <__ieee754_rem_pio2+0x398>
 800afbc:	41700000 	.word	0x41700000
 800afc0:	0801017c 	.word	0x0801017c
 800afc4:	00000000 	.word	0x00000000

0800afc8 <__kernel_cos>:
 800afc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	ec59 8b10 	vmov	r8, r9, d0
 800afd0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800afd4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800afd8:	ed2d 8b02 	vpush	{d8}
 800afdc:	eeb0 8a41 	vmov.f32	s16, s2
 800afe0:	eef0 8a61 	vmov.f32	s17, s3
 800afe4:	da07      	bge.n	800aff6 <__kernel_cos+0x2e>
 800afe6:	ee10 0a10 	vmov	r0, s0
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 fdb4 	bl	8000b58 <__aeabi_d2iz>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	f000 8089 	beq.w	800b108 <__kernel_cos+0x140>
 800aff6:	4642      	mov	r2, r8
 800aff8:	464b      	mov	r3, r9
 800affa:	4640      	mov	r0, r8
 800affc:	4649      	mov	r1, r9
 800affe:	f7f5 fafb 	bl	80005f8 <__aeabi_dmul>
 800b002:	2200      	movs	r2, #0
 800b004:	4b4e      	ldr	r3, [pc, #312]	; (800b140 <__kernel_cos+0x178>)
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	f7f5 faf5 	bl	80005f8 <__aeabi_dmul>
 800b00e:	a340      	add	r3, pc, #256	; (adr r3, 800b110 <__kernel_cos+0x148>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	4682      	mov	sl, r0
 800b016:	468b      	mov	fp, r1
 800b018:	4620      	mov	r0, r4
 800b01a:	4629      	mov	r1, r5
 800b01c:	f7f5 faec 	bl	80005f8 <__aeabi_dmul>
 800b020:	a33d      	add	r3, pc, #244	; (adr r3, 800b118 <__kernel_cos+0x150>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 f931 	bl	800028c <__adddf3>
 800b02a:	4622      	mov	r2, r4
 800b02c:	462b      	mov	r3, r5
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	a33b      	add	r3, pc, #236	; (adr r3, 800b120 <__kernel_cos+0x158>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	f7f5 f926 	bl	8000288 <__aeabi_dsub>
 800b03c:	4622      	mov	r2, r4
 800b03e:	462b      	mov	r3, r5
 800b040:	f7f5 fada 	bl	80005f8 <__aeabi_dmul>
 800b044:	a338      	add	r3, pc, #224	; (adr r3, 800b128 <__kernel_cos+0x160>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 f91f 	bl	800028c <__adddf3>
 800b04e:	4622      	mov	r2, r4
 800b050:	462b      	mov	r3, r5
 800b052:	f7f5 fad1 	bl	80005f8 <__aeabi_dmul>
 800b056:	a336      	add	r3, pc, #216	; (adr r3, 800b130 <__kernel_cos+0x168>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f7f5 f914 	bl	8000288 <__aeabi_dsub>
 800b060:	4622      	mov	r2, r4
 800b062:	462b      	mov	r3, r5
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	a333      	add	r3, pc, #204	; (adr r3, 800b138 <__kernel_cos+0x170>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f7f5 f90d 	bl	800028c <__adddf3>
 800b072:	4622      	mov	r2, r4
 800b074:	462b      	mov	r3, r5
 800b076:	f7f5 fabf 	bl	80005f8 <__aeabi_dmul>
 800b07a:	4622      	mov	r2, r4
 800b07c:	462b      	mov	r3, r5
 800b07e:	f7f5 fabb 	bl	80005f8 <__aeabi_dmul>
 800b082:	ec53 2b18 	vmov	r2, r3, d8
 800b086:	4604      	mov	r4, r0
 800b088:	460d      	mov	r5, r1
 800b08a:	4640      	mov	r0, r8
 800b08c:	4649      	mov	r1, r9
 800b08e:	f7f5 fab3 	bl	80005f8 <__aeabi_dmul>
 800b092:	460b      	mov	r3, r1
 800b094:	4602      	mov	r2, r0
 800b096:	4629      	mov	r1, r5
 800b098:	4620      	mov	r0, r4
 800b09a:	f7f5 f8f5 	bl	8000288 <__aeabi_dsub>
 800b09e:	4b29      	ldr	r3, [pc, #164]	; (800b144 <__kernel_cos+0x17c>)
 800b0a0:	429e      	cmp	r6, r3
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	4689      	mov	r9, r1
 800b0a6:	dc11      	bgt.n	800b0cc <__kernel_cos+0x104>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4650      	mov	r0, sl
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	f7f5 f8ea 	bl	8000288 <__aeabi_dsub>
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4924      	ldr	r1, [pc, #144]	; (800b148 <__kernel_cos+0x180>)
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f7f5 f8e4 	bl	8000288 <__aeabi_dsub>
 800b0c0:	ecbd 8b02 	vpop	{d8}
 800b0c4:	ec41 0b10 	vmov	d0, r0, r1
 800b0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	4b1f      	ldr	r3, [pc, #124]	; (800b14c <__kernel_cos+0x184>)
 800b0ce:	491e      	ldr	r1, [pc, #120]	; (800b148 <__kernel_cos+0x180>)
 800b0d0:	429e      	cmp	r6, r3
 800b0d2:	bfcc      	ite	gt
 800b0d4:	4d1e      	ldrgt	r5, [pc, #120]	; (800b150 <__kernel_cos+0x188>)
 800b0d6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b0da:	2400      	movs	r4, #0
 800b0dc:	4622      	mov	r2, r4
 800b0de:	462b      	mov	r3, r5
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	f7f5 f8d1 	bl	8000288 <__aeabi_dsub>
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	460f      	mov	r7, r1
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	f7f5 f8c9 	bl	8000288 <__aeabi_dsub>
 800b0f6:	4642      	mov	r2, r8
 800b0f8:	464b      	mov	r3, r9
 800b0fa:	f7f5 f8c5 	bl	8000288 <__aeabi_dsub>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4630      	mov	r0, r6
 800b104:	4639      	mov	r1, r7
 800b106:	e7d9      	b.n	800b0bc <__kernel_cos+0xf4>
 800b108:	2000      	movs	r0, #0
 800b10a:	490f      	ldr	r1, [pc, #60]	; (800b148 <__kernel_cos+0x180>)
 800b10c:	e7d8      	b.n	800b0c0 <__kernel_cos+0xf8>
 800b10e:	bf00      	nop
 800b110:	be8838d4 	.word	0xbe8838d4
 800b114:	bda8fae9 	.word	0xbda8fae9
 800b118:	bdb4b1c4 	.word	0xbdb4b1c4
 800b11c:	3e21ee9e 	.word	0x3e21ee9e
 800b120:	809c52ad 	.word	0x809c52ad
 800b124:	3e927e4f 	.word	0x3e927e4f
 800b128:	19cb1590 	.word	0x19cb1590
 800b12c:	3efa01a0 	.word	0x3efa01a0
 800b130:	16c15177 	.word	0x16c15177
 800b134:	3f56c16c 	.word	0x3f56c16c
 800b138:	5555554c 	.word	0x5555554c
 800b13c:	3fa55555 	.word	0x3fa55555
 800b140:	3fe00000 	.word	0x3fe00000
 800b144:	3fd33332 	.word	0x3fd33332
 800b148:	3ff00000 	.word	0x3ff00000
 800b14c:	3fe90000 	.word	0x3fe90000
 800b150:	3fd20000 	.word	0x3fd20000
 800b154:	00000000 	.word	0x00000000

0800b158 <__kernel_rem_pio2>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	ed2d 8b02 	vpush	{d8}
 800b160:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b164:	1ed4      	subs	r4, r2, #3
 800b166:	9308      	str	r3, [sp, #32]
 800b168:	9101      	str	r1, [sp, #4]
 800b16a:	4bc5      	ldr	r3, [pc, #788]	; (800b480 <__kernel_rem_pio2+0x328>)
 800b16c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b16e:	9009      	str	r0, [sp, #36]	; 0x24
 800b170:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	9b08      	ldr	r3, [sp, #32]
 800b178:	3b01      	subs	r3, #1
 800b17a:	9307      	str	r3, [sp, #28]
 800b17c:	2318      	movs	r3, #24
 800b17e:	fb94 f4f3 	sdiv	r4, r4, r3
 800b182:	f06f 0317 	mvn.w	r3, #23
 800b186:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b18a:	fb04 3303 	mla	r3, r4, r3, r3
 800b18e:	eb03 0a02 	add.w	sl, r3, r2
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	9a07      	ldr	r2, [sp, #28]
 800b196:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b470 <__kernel_rem_pio2+0x318>
 800b19a:	eb03 0802 	add.w	r8, r3, r2
 800b19e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b1a0:	1aa7      	subs	r7, r4, r2
 800b1a2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b1a6:	ae22      	add	r6, sp, #136	; 0x88
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	4545      	cmp	r5, r8
 800b1ac:	dd13      	ble.n	800b1d6 <__kernel_rem_pio2+0x7e>
 800b1ae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b470 <__kernel_rem_pio2+0x318>
 800b1b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	9b04      	ldr	r3, [sp, #16]
 800b1ba:	429e      	cmp	r6, r3
 800b1bc:	dc32      	bgt.n	800b224 <__kernel_rem_pio2+0xcc>
 800b1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	9b08      	ldr	r3, [sp, #32]
 800b1c4:	199d      	adds	r5, r3, r6
 800b1c6:	ab22      	add	r3, sp, #136	; 0x88
 800b1c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b1cc:	9306      	str	r3, [sp, #24]
 800b1ce:	ec59 8b18 	vmov	r8, r9, d8
 800b1d2:	2700      	movs	r7, #0
 800b1d4:	e01f      	b.n	800b216 <__kernel_rem_pio2+0xbe>
 800b1d6:	42ef      	cmn	r7, r5
 800b1d8:	d407      	bmi.n	800b1ea <__kernel_rem_pio2+0x92>
 800b1da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b1de:	f7f5 f9a1 	bl	8000524 <__aeabi_i2d>
 800b1e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1e6:	3501      	adds	r5, #1
 800b1e8:	e7df      	b.n	800b1aa <__kernel_rem_pio2+0x52>
 800b1ea:	ec51 0b18 	vmov	r0, r1, d8
 800b1ee:	e7f8      	b.n	800b1e2 <__kernel_rem_pio2+0x8a>
 800b1f0:	9906      	ldr	r1, [sp, #24]
 800b1f2:	9d02      	ldr	r5, [sp, #8]
 800b1f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b1f8:	9106      	str	r1, [sp, #24]
 800b1fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b1fe:	9502      	str	r5, [sp, #8]
 800b200:	f7f5 f9fa 	bl	80005f8 <__aeabi_dmul>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4640      	mov	r0, r8
 800b20a:	4649      	mov	r1, r9
 800b20c:	f7f5 f83e 	bl	800028c <__adddf3>
 800b210:	3701      	adds	r7, #1
 800b212:	4680      	mov	r8, r0
 800b214:	4689      	mov	r9, r1
 800b216:	9b07      	ldr	r3, [sp, #28]
 800b218:	429f      	cmp	r7, r3
 800b21a:	dde9      	ble.n	800b1f0 <__kernel_rem_pio2+0x98>
 800b21c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b220:	3601      	adds	r6, #1
 800b222:	e7c9      	b.n	800b1b8 <__kernel_rem_pio2+0x60>
 800b224:	9b04      	ldr	r3, [sp, #16]
 800b226:	aa0e      	add	r2, sp, #56	; 0x38
 800b228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b22c:	930c      	str	r3, [sp, #48]	; 0x30
 800b22e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b230:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b234:	9c04      	ldr	r4, [sp, #16]
 800b236:	930b      	str	r3, [sp, #44]	; 0x2c
 800b238:	ab9a      	add	r3, sp, #616	; 0x268
 800b23a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b23e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b242:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b246:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b24a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b24e:	ab9a      	add	r3, sp, #616	; 0x268
 800b250:	445b      	add	r3, fp
 800b252:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b256:	2500      	movs	r5, #0
 800b258:	1b63      	subs	r3, r4, r5
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dc78      	bgt.n	800b350 <__kernel_rem_pio2+0x1f8>
 800b25e:	4650      	mov	r0, sl
 800b260:	ec49 8b10 	vmov	d0, r8, r9
 800b264:	f000 fc00 	bl	800ba68 <scalbn>
 800b268:	ec57 6b10 	vmov	r6, r7, d0
 800b26c:	2200      	movs	r2, #0
 800b26e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b272:	ee10 0a10 	vmov	r0, s0
 800b276:	4639      	mov	r1, r7
 800b278:	f7f5 f9be 	bl	80005f8 <__aeabi_dmul>
 800b27c:	ec41 0b10 	vmov	d0, r0, r1
 800b280:	f000 fb6e 	bl	800b960 <floor>
 800b284:	2200      	movs	r2, #0
 800b286:	ec51 0b10 	vmov	r0, r1, d0
 800b28a:	4b7e      	ldr	r3, [pc, #504]	; (800b484 <__kernel_rem_pio2+0x32c>)
 800b28c:	f7f5 f9b4 	bl	80005f8 <__aeabi_dmul>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f4 fff6 	bl	8000288 <__aeabi_dsub>
 800b29c:	460f      	mov	r7, r1
 800b29e:	4606      	mov	r6, r0
 800b2a0:	f7f5 fc5a 	bl	8000b58 <__aeabi_d2iz>
 800b2a4:	9006      	str	r0, [sp, #24]
 800b2a6:	f7f5 f93d 	bl	8000524 <__aeabi_i2d>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f4 ffe9 	bl	8000288 <__aeabi_dsub>
 800b2b6:	f1ba 0f00 	cmp.w	sl, #0
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	dd6c      	ble.n	800b39a <__kernel_rem_pio2+0x242>
 800b2c0:	1e62      	subs	r2, r4, #1
 800b2c2:	ab0e      	add	r3, sp, #56	; 0x38
 800b2c4:	f1ca 0118 	rsb	r1, sl, #24
 800b2c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b2cc:	9d06      	ldr	r5, [sp, #24]
 800b2ce:	fa40 f301 	asr.w	r3, r0, r1
 800b2d2:	441d      	add	r5, r3
 800b2d4:	408b      	lsls	r3, r1
 800b2d6:	1ac0      	subs	r0, r0, r3
 800b2d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b2da:	9506      	str	r5, [sp, #24]
 800b2dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b2e0:	f1ca 0317 	rsb	r3, sl, #23
 800b2e4:	fa40 f303 	asr.w	r3, r0, r3
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	9b02      	ldr	r3, [sp, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd62      	ble.n	800b3b6 <__kernel_rem_pio2+0x25e>
 800b2f0:	9b06      	ldr	r3, [sp, #24]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	9306      	str	r3, [sp, #24]
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b2fe:	4294      	cmp	r4, r2
 800b300:	f300 8095 	bgt.w	800b42e <__kernel_rem_pio2+0x2d6>
 800b304:	f1ba 0f00 	cmp.w	sl, #0
 800b308:	dd07      	ble.n	800b31a <__kernel_rem_pio2+0x1c2>
 800b30a:	f1ba 0f01 	cmp.w	sl, #1
 800b30e:	f000 80a2 	beq.w	800b456 <__kernel_rem_pio2+0x2fe>
 800b312:	f1ba 0f02 	cmp.w	sl, #2
 800b316:	f000 80c1 	beq.w	800b49c <__kernel_rem_pio2+0x344>
 800b31a:	9b02      	ldr	r3, [sp, #8]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d14a      	bne.n	800b3b6 <__kernel_rem_pio2+0x25e>
 800b320:	4632      	mov	r2, r6
 800b322:	463b      	mov	r3, r7
 800b324:	2000      	movs	r0, #0
 800b326:	4958      	ldr	r1, [pc, #352]	; (800b488 <__kernel_rem_pio2+0x330>)
 800b328:	f7f4 ffae 	bl	8000288 <__aeabi_dsub>
 800b32c:	4606      	mov	r6, r0
 800b32e:	460f      	mov	r7, r1
 800b330:	2d00      	cmp	r5, #0
 800b332:	d040      	beq.n	800b3b6 <__kernel_rem_pio2+0x25e>
 800b334:	4650      	mov	r0, sl
 800b336:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b478 <__kernel_rem_pio2+0x320>
 800b33a:	f000 fb95 	bl	800ba68 <scalbn>
 800b33e:	4630      	mov	r0, r6
 800b340:	4639      	mov	r1, r7
 800b342:	ec53 2b10 	vmov	r2, r3, d0
 800b346:	f7f4 ff9f 	bl	8000288 <__aeabi_dsub>
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	e032      	b.n	800b3b6 <__kernel_rem_pio2+0x25e>
 800b350:	2200      	movs	r2, #0
 800b352:	4b4e      	ldr	r3, [pc, #312]	; (800b48c <__kernel_rem_pio2+0x334>)
 800b354:	4640      	mov	r0, r8
 800b356:	4649      	mov	r1, r9
 800b358:	f7f5 f94e 	bl	80005f8 <__aeabi_dmul>
 800b35c:	f7f5 fbfc 	bl	8000b58 <__aeabi_d2iz>
 800b360:	f7f5 f8e0 	bl	8000524 <__aeabi_i2d>
 800b364:	2200      	movs	r2, #0
 800b366:	4b4a      	ldr	r3, [pc, #296]	; (800b490 <__kernel_rem_pio2+0x338>)
 800b368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b36c:	f7f5 f944 	bl	80005f8 <__aeabi_dmul>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4640      	mov	r0, r8
 800b376:	4649      	mov	r1, r9
 800b378:	f7f4 ff86 	bl	8000288 <__aeabi_dsub>
 800b37c:	f7f5 fbec 	bl	8000b58 <__aeabi_d2iz>
 800b380:	ab0e      	add	r3, sp, #56	; 0x38
 800b382:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b386:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b38e:	f7f4 ff7d 	bl	800028c <__adddf3>
 800b392:	3501      	adds	r5, #1
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	e75e      	b.n	800b258 <__kernel_rem_pio2+0x100>
 800b39a:	d105      	bne.n	800b3a8 <__kernel_rem_pio2+0x250>
 800b39c:	1e63      	subs	r3, r4, #1
 800b39e:	aa0e      	add	r2, sp, #56	; 0x38
 800b3a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b3a4:	15c3      	asrs	r3, r0, #23
 800b3a6:	e79f      	b.n	800b2e8 <__kernel_rem_pio2+0x190>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	; (800b494 <__kernel_rem_pio2+0x33c>)
 800b3ac:	f7f5 fbaa 	bl	8000b04 <__aeabi_dcmpge>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d139      	bne.n	800b428 <__kernel_rem_pio2+0x2d0>
 800b3b4:	9002      	str	r0, [sp, #8]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4639      	mov	r1, r7
 800b3be:	f7f5 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f000 80c7 	beq.w	800b556 <__kernel_rem_pio2+0x3fe>
 800b3c8:	1e65      	subs	r5, r4, #1
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	9904      	ldr	r1, [sp, #16]
 800b3d0:	428b      	cmp	r3, r1
 800b3d2:	da6a      	bge.n	800b4aa <__kernel_rem_pio2+0x352>
 800b3d4:	2a00      	cmp	r2, #0
 800b3d6:	f000 8088 	beq.w	800b4ea <__kernel_rem_pio2+0x392>
 800b3da:	ab0e      	add	r3, sp, #56	; 0x38
 800b3dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b3e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 80b4 	beq.w	800b552 <__kernel_rem_pio2+0x3fa>
 800b3ea:	4650      	mov	r0, sl
 800b3ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b478 <__kernel_rem_pio2+0x320>
 800b3f0:	f000 fb3a 	bl	800ba68 <scalbn>
 800b3f4:	00ec      	lsls	r4, r5, #3
 800b3f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b3f8:	191e      	adds	r6, r3, r4
 800b3fa:	ec59 8b10 	vmov	r8, r9, d0
 800b3fe:	f106 0a08 	add.w	sl, r6, #8
 800b402:	462f      	mov	r7, r5
 800b404:	2f00      	cmp	r7, #0
 800b406:	f280 80df 	bge.w	800b5c8 <__kernel_rem_pio2+0x470>
 800b40a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b470 <__kernel_rem_pio2+0x318>
 800b40e:	f04f 0a00 	mov.w	sl, #0
 800b412:	eba5 030a 	sub.w	r3, r5, sl
 800b416:	2b00      	cmp	r3, #0
 800b418:	f2c0 810a 	blt.w	800b630 <__kernel_rem_pio2+0x4d8>
 800b41c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b498 <__kernel_rem_pio2+0x340>
 800b420:	ec59 8b18 	vmov	r8, r9, d8
 800b424:	2700      	movs	r7, #0
 800b426:	e0f5      	b.n	800b614 <__kernel_rem_pio2+0x4bc>
 800b428:	2302      	movs	r3, #2
 800b42a:	9302      	str	r3, [sp, #8]
 800b42c:	e760      	b.n	800b2f0 <__kernel_rem_pio2+0x198>
 800b42e:	ab0e      	add	r3, sp, #56	; 0x38
 800b430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b434:	b94d      	cbnz	r5, 800b44a <__kernel_rem_pio2+0x2f2>
 800b436:	b12b      	cbz	r3, 800b444 <__kernel_rem_pio2+0x2ec>
 800b438:	a80e      	add	r0, sp, #56	; 0x38
 800b43a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b43e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b442:	2301      	movs	r3, #1
 800b444:	3201      	adds	r2, #1
 800b446:	461d      	mov	r5, r3
 800b448:	e759      	b.n	800b2fe <__kernel_rem_pio2+0x1a6>
 800b44a:	a80e      	add	r0, sp, #56	; 0x38
 800b44c:	1acb      	subs	r3, r1, r3
 800b44e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b452:	462b      	mov	r3, r5
 800b454:	e7f6      	b.n	800b444 <__kernel_rem_pio2+0x2ec>
 800b456:	1e62      	subs	r2, r4, #1
 800b458:	ab0e      	add	r3, sp, #56	; 0x38
 800b45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b462:	a90e      	add	r1, sp, #56	; 0x38
 800b464:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b468:	e757      	b.n	800b31a <__kernel_rem_pio2+0x1c2>
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w
	...
 800b47c:	3ff00000 	.word	0x3ff00000
 800b480:	080102c8 	.word	0x080102c8
 800b484:	40200000 	.word	0x40200000
 800b488:	3ff00000 	.word	0x3ff00000
 800b48c:	3e700000 	.word	0x3e700000
 800b490:	41700000 	.word	0x41700000
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	08010288 	.word	0x08010288
 800b49c:	1e62      	subs	r2, r4, #1
 800b49e:	ab0e      	add	r3, sp, #56	; 0x38
 800b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b4a8:	e7db      	b.n	800b462 <__kernel_rem_pio2+0x30a>
 800b4aa:	a90e      	add	r1, sp, #56	; 0x38
 800b4ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	e78b      	b.n	800b3ce <__kernel_rem_pio2+0x276>
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d0fa      	beq.n	800b4b6 <__kernel_rem_pio2+0x35e>
 800b4c0:	9a08      	ldr	r2, [sp, #32]
 800b4c2:	4422      	add	r2, r4
 800b4c4:	00d2      	lsls	r2, r2, #3
 800b4c6:	a922      	add	r1, sp, #136	; 0x88
 800b4c8:	18e3      	adds	r3, r4, r3
 800b4ca:	9206      	str	r2, [sp, #24]
 800b4cc:	440a      	add	r2, r1
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	f10b 0108 	add.w	r1, fp, #8
 800b4d4:	f102 0308 	add.w	r3, r2, #8
 800b4d8:	1c66      	adds	r6, r4, #1
 800b4da:	910a      	str	r1, [sp, #40]	; 0x28
 800b4dc:	2500      	movs	r5, #0
 800b4de:	930d      	str	r3, [sp, #52]	; 0x34
 800b4e0:	9b02      	ldr	r3, [sp, #8]
 800b4e2:	42b3      	cmp	r3, r6
 800b4e4:	da04      	bge.n	800b4f0 <__kernel_rem_pio2+0x398>
 800b4e6:	461c      	mov	r4, r3
 800b4e8:	e6a6      	b.n	800b238 <__kernel_rem_pio2+0xe0>
 800b4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e7e3      	b.n	800b4b8 <__kernel_rem_pio2+0x360>
 800b4f0:	9b06      	ldr	r3, [sp, #24]
 800b4f2:	18ef      	adds	r7, r5, r3
 800b4f4:	ab22      	add	r3, sp, #136	; 0x88
 800b4f6:	441f      	add	r7, r3
 800b4f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4fe:	f7f5 f811 	bl	8000524 <__aeabi_i2d>
 800b502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b504:	461c      	mov	r4, r3
 800b506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b508:	e9c7 0100 	strd	r0, r1, [r7]
 800b50c:	eb03 0b05 	add.w	fp, r3, r5
 800b510:	2700      	movs	r7, #0
 800b512:	f04f 0800 	mov.w	r8, #0
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	9b07      	ldr	r3, [sp, #28]
 800b51c:	429f      	cmp	r7, r3
 800b51e:	dd08      	ble.n	800b532 <__kernel_rem_pio2+0x3da>
 800b520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b522:	aa72      	add	r2, sp, #456	; 0x1c8
 800b524:	18eb      	adds	r3, r5, r3
 800b526:	4413      	add	r3, r2
 800b528:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b52c:	3601      	adds	r6, #1
 800b52e:	3508      	adds	r5, #8
 800b530:	e7d6      	b.n	800b4e0 <__kernel_rem_pio2+0x388>
 800b532:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b536:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b53a:	f7f5 f85d 	bl	80005f8 <__aeabi_dmul>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4640      	mov	r0, r8
 800b544:	4649      	mov	r1, r9
 800b546:	f7f4 fea1 	bl	800028c <__adddf3>
 800b54a:	3701      	adds	r7, #1
 800b54c:	4680      	mov	r8, r0
 800b54e:	4689      	mov	r9, r1
 800b550:	e7e3      	b.n	800b51a <__kernel_rem_pio2+0x3c2>
 800b552:	3d01      	subs	r5, #1
 800b554:	e741      	b.n	800b3da <__kernel_rem_pio2+0x282>
 800b556:	f1ca 0000 	rsb	r0, sl, #0
 800b55a:	ec47 6b10 	vmov	d0, r6, r7
 800b55e:	f000 fa83 	bl	800ba68 <scalbn>
 800b562:	ec57 6b10 	vmov	r6, r7, d0
 800b566:	2200      	movs	r2, #0
 800b568:	4b99      	ldr	r3, [pc, #612]	; (800b7d0 <__kernel_rem_pio2+0x678>)
 800b56a:	ee10 0a10 	vmov	r0, s0
 800b56e:	4639      	mov	r1, r7
 800b570:	f7f5 fac8 	bl	8000b04 <__aeabi_dcmpge>
 800b574:	b1f8      	cbz	r0, 800b5b6 <__kernel_rem_pio2+0x45e>
 800b576:	2200      	movs	r2, #0
 800b578:	4b96      	ldr	r3, [pc, #600]	; (800b7d4 <__kernel_rem_pio2+0x67c>)
 800b57a:	4630      	mov	r0, r6
 800b57c:	4639      	mov	r1, r7
 800b57e:	f7f5 f83b 	bl	80005f8 <__aeabi_dmul>
 800b582:	f7f5 fae9 	bl	8000b58 <__aeabi_d2iz>
 800b586:	4680      	mov	r8, r0
 800b588:	f7f4 ffcc 	bl	8000524 <__aeabi_i2d>
 800b58c:	2200      	movs	r2, #0
 800b58e:	4b90      	ldr	r3, [pc, #576]	; (800b7d0 <__kernel_rem_pio2+0x678>)
 800b590:	f7f5 f832 	bl	80005f8 <__aeabi_dmul>
 800b594:	460b      	mov	r3, r1
 800b596:	4602      	mov	r2, r0
 800b598:	4639      	mov	r1, r7
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7f4 fe74 	bl	8000288 <__aeabi_dsub>
 800b5a0:	f7f5 fada 	bl	8000b58 <__aeabi_d2iz>
 800b5a4:	1c65      	adds	r5, r4, #1
 800b5a6:	ab0e      	add	r3, sp, #56	; 0x38
 800b5a8:	f10a 0a18 	add.w	sl, sl, #24
 800b5ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b5b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b5b4:	e719      	b.n	800b3ea <__kernel_rem_pio2+0x292>
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	f7f5 facd 	bl	8000b58 <__aeabi_d2iz>
 800b5be:	ab0e      	add	r3, sp, #56	; 0x38
 800b5c0:	4625      	mov	r5, r4
 800b5c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b5c6:	e710      	b.n	800b3ea <__kernel_rem_pio2+0x292>
 800b5c8:	ab0e      	add	r3, sp, #56	; 0x38
 800b5ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b5ce:	f7f4 ffa9 	bl	8000524 <__aeabi_i2d>
 800b5d2:	4642      	mov	r2, r8
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	f7f5 f80f 	bl	80005f8 <__aeabi_dmul>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b5e0:	4b7c      	ldr	r3, [pc, #496]	; (800b7d4 <__kernel_rem_pio2+0x67c>)
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	f7f5 f807 	bl	80005f8 <__aeabi_dmul>
 800b5ea:	3f01      	subs	r7, #1
 800b5ec:	4680      	mov	r8, r0
 800b5ee:	4689      	mov	r9, r1
 800b5f0:	e708      	b.n	800b404 <__kernel_rem_pio2+0x2ac>
 800b5f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f4 fe3f 	bl	800028c <__adddf3>
 800b60e:	3701      	adds	r7, #1
 800b610:	4680      	mov	r8, r0
 800b612:	4689      	mov	r9, r1
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	429f      	cmp	r7, r3
 800b618:	dc01      	bgt.n	800b61e <__kernel_rem_pio2+0x4c6>
 800b61a:	45ba      	cmp	sl, r7
 800b61c:	dae9      	bge.n	800b5f2 <__kernel_rem_pio2+0x49a>
 800b61e:	ab4a      	add	r3, sp, #296	; 0x128
 800b620:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b624:	e9c3 8900 	strd	r8, r9, [r3]
 800b628:	f10a 0a01 	add.w	sl, sl, #1
 800b62c:	3e08      	subs	r6, #8
 800b62e:	e6f0      	b.n	800b412 <__kernel_rem_pio2+0x2ba>
 800b630:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b632:	2b03      	cmp	r3, #3
 800b634:	d85b      	bhi.n	800b6ee <__kernel_rem_pio2+0x596>
 800b636:	e8df f003 	tbb	[pc, r3]
 800b63a:	264a      	.short	0x264a
 800b63c:	0226      	.short	0x0226
 800b63e:	ab9a      	add	r3, sp, #616	; 0x268
 800b640:	441c      	add	r4, r3
 800b642:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b646:	46a2      	mov	sl, r4
 800b648:	46ab      	mov	fp, r5
 800b64a:	f1bb 0f00 	cmp.w	fp, #0
 800b64e:	dc6c      	bgt.n	800b72a <__kernel_rem_pio2+0x5d2>
 800b650:	46a2      	mov	sl, r4
 800b652:	46ab      	mov	fp, r5
 800b654:	f1bb 0f01 	cmp.w	fp, #1
 800b658:	f300 8086 	bgt.w	800b768 <__kernel_rem_pio2+0x610>
 800b65c:	2000      	movs	r0, #0
 800b65e:	2100      	movs	r1, #0
 800b660:	2d01      	cmp	r5, #1
 800b662:	f300 80a0 	bgt.w	800b7a6 <__kernel_rem_pio2+0x64e>
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b66c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 809e 	bne.w	800b7b2 <__kernel_rem_pio2+0x65a>
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	e9c3 7800 	strd	r7, r8, [r3]
 800b67c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b680:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b684:	e033      	b.n	800b6ee <__kernel_rem_pio2+0x596>
 800b686:	3408      	adds	r4, #8
 800b688:	ab4a      	add	r3, sp, #296	; 0x128
 800b68a:	441c      	add	r4, r3
 800b68c:	462e      	mov	r6, r5
 800b68e:	2000      	movs	r0, #0
 800b690:	2100      	movs	r1, #0
 800b692:	2e00      	cmp	r6, #0
 800b694:	da3a      	bge.n	800b70c <__kernel_rem_pio2+0x5b4>
 800b696:	9b02      	ldr	r3, [sp, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d03d      	beq.n	800b718 <__kernel_rem_pio2+0x5c0>
 800b69c:	4602      	mov	r2, r0
 800b69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6a2:	9c01      	ldr	r4, [sp, #4]
 800b6a4:	e9c4 2300 	strd	r2, r3, [r4]
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b6b0:	f7f4 fdea 	bl	8000288 <__aeabi_dsub>
 800b6b4:	ae4c      	add	r6, sp, #304	; 0x130
 800b6b6:	2401      	movs	r4, #1
 800b6b8:	42a5      	cmp	r5, r4
 800b6ba:	da30      	bge.n	800b71e <__kernel_rem_pio2+0x5c6>
 800b6bc:	9b02      	ldr	r3, [sp, #8]
 800b6be:	b113      	cbz	r3, 800b6c6 <__kernel_rem_pio2+0x56e>
 800b6c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	9b01      	ldr	r3, [sp, #4]
 800b6c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b6cc:	e00f      	b.n	800b6ee <__kernel_rem_pio2+0x596>
 800b6ce:	ab9a      	add	r3, sp, #616	; 0x268
 800b6d0:	441c      	add	r4, r3
 800b6d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	2100      	movs	r1, #0
 800b6da:	2d00      	cmp	r5, #0
 800b6dc:	da10      	bge.n	800b700 <__kernel_rem_pio2+0x5a8>
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	b113      	cbz	r3, 800b6e8 <__kernel_rem_pio2+0x590>
 800b6e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	e9c3 0100 	strd	r0, r1, [r3]
 800b6ee:	9b06      	ldr	r3, [sp, #24]
 800b6f0:	f003 0007 	and.w	r0, r3, #7
 800b6f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b6f8:	ecbd 8b02 	vpop	{d8}
 800b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b700:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b704:	f7f4 fdc2 	bl	800028c <__adddf3>
 800b708:	3d01      	subs	r5, #1
 800b70a:	e7e6      	b.n	800b6da <__kernel_rem_pio2+0x582>
 800b70c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b710:	f7f4 fdbc 	bl	800028c <__adddf3>
 800b714:	3e01      	subs	r6, #1
 800b716:	e7bc      	b.n	800b692 <__kernel_rem_pio2+0x53a>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	e7c1      	b.n	800b6a2 <__kernel_rem_pio2+0x54a>
 800b71e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b722:	f7f4 fdb3 	bl	800028c <__adddf3>
 800b726:	3401      	adds	r4, #1
 800b728:	e7c6      	b.n	800b6b8 <__kernel_rem_pio2+0x560>
 800b72a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b72e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b732:	4640      	mov	r0, r8
 800b734:	ec53 2b17 	vmov	r2, r3, d7
 800b738:	4649      	mov	r1, r9
 800b73a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b73e:	f7f4 fda5 	bl	800028c <__adddf3>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4606      	mov	r6, r0
 800b748:	460f      	mov	r7, r1
 800b74a:	4640      	mov	r0, r8
 800b74c:	4649      	mov	r1, r9
 800b74e:	f7f4 fd9b 	bl	8000288 <__aeabi_dsub>
 800b752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b756:	f7f4 fd99 	bl	800028c <__adddf3>
 800b75a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b75e:	e9ca 0100 	strd	r0, r1, [sl]
 800b762:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b766:	e770      	b.n	800b64a <__kernel_rem_pio2+0x4f2>
 800b768:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b76c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b770:	4630      	mov	r0, r6
 800b772:	ec53 2b17 	vmov	r2, r3, d7
 800b776:	4639      	mov	r1, r7
 800b778:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b77c:	f7f4 fd86 	bl	800028c <__adddf3>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4680      	mov	r8, r0
 800b786:	4689      	mov	r9, r1
 800b788:	4630      	mov	r0, r6
 800b78a:	4639      	mov	r1, r7
 800b78c:	f7f4 fd7c 	bl	8000288 <__aeabi_dsub>
 800b790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b794:	f7f4 fd7a 	bl	800028c <__adddf3>
 800b798:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b79c:	e9ca 0100 	strd	r0, r1, [sl]
 800b7a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b7a4:	e756      	b.n	800b654 <__kernel_rem_pio2+0x4fc>
 800b7a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b7aa:	f7f4 fd6f 	bl	800028c <__adddf3>
 800b7ae:	3d01      	subs	r5, #1
 800b7b0:	e756      	b.n	800b660 <__kernel_rem_pio2+0x508>
 800b7b2:	9b01      	ldr	r3, [sp, #4]
 800b7b4:	9a01      	ldr	r2, [sp, #4]
 800b7b6:	601f      	str	r7, [r3, #0]
 800b7b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b7bc:	605c      	str	r4, [r3, #4]
 800b7be:	609d      	str	r5, [r3, #8]
 800b7c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b7c4:	60d3      	str	r3, [r2, #12]
 800b7c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ca:	6110      	str	r0, [r2, #16]
 800b7cc:	6153      	str	r3, [r2, #20]
 800b7ce:	e78e      	b.n	800b6ee <__kernel_rem_pio2+0x596>
 800b7d0:	41700000 	.word	0x41700000
 800b7d4:	3e700000 	.word	0x3e700000

0800b7d8 <__kernel_sin>:
 800b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	ec55 4b10 	vmov	r4, r5, d0
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7ea:	ed8d 1b00 	vstr	d1, [sp]
 800b7ee:	9002      	str	r0, [sp, #8]
 800b7f0:	da06      	bge.n	800b800 <__kernel_sin+0x28>
 800b7f2:	ee10 0a10 	vmov	r0, s0
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f5 f9ae 	bl	8000b58 <__aeabi_d2iz>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d051      	beq.n	800b8a4 <__kernel_sin+0xcc>
 800b800:	4622      	mov	r2, r4
 800b802:	462b      	mov	r3, r5
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fef6 	bl	80005f8 <__aeabi_dmul>
 800b80c:	4682      	mov	sl, r0
 800b80e:	468b      	mov	fp, r1
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 feee 	bl	80005f8 <__aeabi_dmul>
 800b81c:	a341      	add	r3, pc, #260	; (adr r3, 800b924 <__kernel_sin+0x14c>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	4680      	mov	r8, r0
 800b824:	4689      	mov	r9, r1
 800b826:	4650      	mov	r0, sl
 800b828:	4659      	mov	r1, fp
 800b82a:	f7f4 fee5 	bl	80005f8 <__aeabi_dmul>
 800b82e:	a33f      	add	r3, pc, #252	; (adr r3, 800b92c <__kernel_sin+0x154>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f7f4 fd28 	bl	8000288 <__aeabi_dsub>
 800b838:	4652      	mov	r2, sl
 800b83a:	465b      	mov	r3, fp
 800b83c:	f7f4 fedc 	bl	80005f8 <__aeabi_dmul>
 800b840:	a33c      	add	r3, pc, #240	; (adr r3, 800b934 <__kernel_sin+0x15c>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fd21 	bl	800028c <__adddf3>
 800b84a:	4652      	mov	r2, sl
 800b84c:	465b      	mov	r3, fp
 800b84e:	f7f4 fed3 	bl	80005f8 <__aeabi_dmul>
 800b852:	a33a      	add	r3, pc, #232	; (adr r3, 800b93c <__kernel_sin+0x164>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fd16 	bl	8000288 <__aeabi_dsub>
 800b85c:	4652      	mov	r2, sl
 800b85e:	465b      	mov	r3, fp
 800b860:	f7f4 feca 	bl	80005f8 <__aeabi_dmul>
 800b864:	a337      	add	r3, pc, #220	; (adr r3, 800b944 <__kernel_sin+0x16c>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f7f4 fd0f 	bl	800028c <__adddf3>
 800b86e:	9b02      	ldr	r3, [sp, #8]
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	b9db      	cbnz	r3, 800b8ae <__kernel_sin+0xd6>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4650      	mov	r0, sl
 800b87c:	4659      	mov	r1, fp
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	a325      	add	r3, pc, #148	; (adr r3, 800b918 <__kernel_sin+0x140>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fcfe 	bl	8000288 <__aeabi_dsub>
 800b88c:	4642      	mov	r2, r8
 800b88e:	464b      	mov	r3, r9
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4620      	mov	r0, r4
 800b89a:	4629      	mov	r1, r5
 800b89c:	f7f4 fcf6 	bl	800028c <__adddf3>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	ec45 4b10 	vmov	d0, r4, r5
 800b8a8:	b005      	add	sp, #20
 800b8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	4b1b      	ldr	r3, [pc, #108]	; (800b920 <__kernel_sin+0x148>)
 800b8b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8b6:	f7f4 fe9f 	bl	80005f8 <__aeabi_dmul>
 800b8ba:	4632      	mov	r2, r6
 800b8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c0:	463b      	mov	r3, r7
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	f7f4 fe97 	bl	80005f8 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d2:	f7f4 fcd9 	bl	8000288 <__aeabi_dsub>
 800b8d6:	4652      	mov	r2, sl
 800b8d8:	465b      	mov	r3, fp
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8e2:	f7f4 fcd1 	bl	8000288 <__aeabi_dsub>
 800b8e6:	a30c      	add	r3, pc, #48	; (adr r3, 800b918 <__kernel_sin+0x140>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	f7f4 fe80 	bl	80005f8 <__aeabi_dmul>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f4 fcc4 	bl	800028c <__adddf3>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4620      	mov	r0, r4
 800b90a:	4629      	mov	r1, r5
 800b90c:	f7f4 fcbc 	bl	8000288 <__aeabi_dsub>
 800b910:	e7c6      	b.n	800b8a0 <__kernel_sin+0xc8>
 800b912:	bf00      	nop
 800b914:	f3af 8000 	nop.w
 800b918:	55555549 	.word	0x55555549
 800b91c:	3fc55555 	.word	0x3fc55555
 800b920:	3fe00000 	.word	0x3fe00000
 800b924:	5acfd57c 	.word	0x5acfd57c
 800b928:	3de5d93a 	.word	0x3de5d93a
 800b92c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b930:	3e5ae5e6 	.word	0x3e5ae5e6
 800b934:	57b1fe7d 	.word	0x57b1fe7d
 800b938:	3ec71de3 	.word	0x3ec71de3
 800b93c:	19c161d5 	.word	0x19c161d5
 800b940:	3f2a01a0 	.word	0x3f2a01a0
 800b944:	1110f8a6 	.word	0x1110f8a6
 800b948:	3f811111 	.word	0x3f811111

0800b94c <fabs>:
 800b94c:	ec51 0b10 	vmov	r0, r1, d0
 800b950:	ee10 2a10 	vmov	r2, s0
 800b954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b958:	ec43 2b10 	vmov	d0, r2, r3
 800b95c:	4770      	bx	lr
	...

0800b960 <floor>:
 800b960:	ec51 0b10 	vmov	r0, r1, d0
 800b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b968:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b96c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b970:	2e13      	cmp	r6, #19
 800b972:	460c      	mov	r4, r1
 800b974:	ee10 5a10 	vmov	r5, s0
 800b978:	4680      	mov	r8, r0
 800b97a:	dc34      	bgt.n	800b9e6 <floor+0x86>
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	da16      	bge.n	800b9ae <floor+0x4e>
 800b980:	a335      	add	r3, pc, #212	; (adr r3, 800ba58 <floor+0xf8>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fc81 	bl	800028c <__adddf3>
 800b98a:	2200      	movs	r2, #0
 800b98c:	2300      	movs	r3, #0
 800b98e:	f7f5 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800b992:	b148      	cbz	r0, 800b9a8 <floor+0x48>
 800b994:	2c00      	cmp	r4, #0
 800b996:	da59      	bge.n	800ba4c <floor+0xec>
 800b998:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b99c:	4a30      	ldr	r2, [pc, #192]	; (800ba60 <floor+0x100>)
 800b99e:	432b      	orrs	r3, r5
 800b9a0:	2500      	movs	r5, #0
 800b9a2:	42ab      	cmp	r3, r5
 800b9a4:	bf18      	it	ne
 800b9a6:	4614      	movne	r4, r2
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	e025      	b.n	800b9fa <floor+0x9a>
 800b9ae:	4f2d      	ldr	r7, [pc, #180]	; (800ba64 <floor+0x104>)
 800b9b0:	4137      	asrs	r7, r6
 800b9b2:	ea01 0307 	and.w	r3, r1, r7
 800b9b6:	4303      	orrs	r3, r0
 800b9b8:	d01f      	beq.n	800b9fa <floor+0x9a>
 800b9ba:	a327      	add	r3, pc, #156	; (adr r3, 800ba58 <floor+0xf8>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fc64 	bl	800028c <__adddf3>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f7f5 f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0eb      	beq.n	800b9a8 <floor+0x48>
 800b9d0:	2c00      	cmp	r4, #0
 800b9d2:	bfbe      	ittt	lt
 800b9d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b9d8:	fa43 f606 	asrlt.w	r6, r3, r6
 800b9dc:	19a4      	addlt	r4, r4, r6
 800b9de:	ea24 0407 	bic.w	r4, r4, r7
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	e7e0      	b.n	800b9a8 <floor+0x48>
 800b9e6:	2e33      	cmp	r6, #51	; 0x33
 800b9e8:	dd0b      	ble.n	800ba02 <floor+0xa2>
 800b9ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9ee:	d104      	bne.n	800b9fa <floor+0x9a>
 800b9f0:	ee10 2a10 	vmov	r2, s0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	f7f4 fc49 	bl	800028c <__adddf3>
 800b9fa:	ec41 0b10 	vmov	d0, r0, r1
 800b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba02:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba06:	f04f 33ff 	mov.w	r3, #4294967295
 800ba0a:	fa23 f707 	lsr.w	r7, r3, r7
 800ba0e:	4207      	tst	r7, r0
 800ba10:	d0f3      	beq.n	800b9fa <floor+0x9a>
 800ba12:	a311      	add	r3, pc, #68	; (adr r3, 800ba58 <floor+0xf8>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fc38 	bl	800028c <__adddf3>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f7f5 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d0bf      	beq.n	800b9a8 <floor+0x48>
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	da02      	bge.n	800ba32 <floor+0xd2>
 800ba2c:	2e14      	cmp	r6, #20
 800ba2e:	d103      	bne.n	800ba38 <floor+0xd8>
 800ba30:	3401      	adds	r4, #1
 800ba32:	ea25 0507 	bic.w	r5, r5, r7
 800ba36:	e7b7      	b.n	800b9a8 <floor+0x48>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba3e:	fa03 f606 	lsl.w	r6, r3, r6
 800ba42:	4435      	add	r5, r6
 800ba44:	4545      	cmp	r5, r8
 800ba46:	bf38      	it	cc
 800ba48:	18e4      	addcc	r4, r4, r3
 800ba4a:	e7f2      	b.n	800ba32 <floor+0xd2>
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	462c      	mov	r4, r5
 800ba50:	e7aa      	b.n	800b9a8 <floor+0x48>
 800ba52:	bf00      	nop
 800ba54:	f3af 8000 	nop.w
 800ba58:	8800759c 	.word	0x8800759c
 800ba5c:	7e37e43c 	.word	0x7e37e43c
 800ba60:	bff00000 	.word	0xbff00000
 800ba64:	000fffff 	.word	0x000fffff

0800ba68 <scalbn>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	ec55 4b10 	vmov	r4, r5, d0
 800ba6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba72:	4606      	mov	r6, r0
 800ba74:	462b      	mov	r3, r5
 800ba76:	b9aa      	cbnz	r2, 800baa4 <scalbn+0x3c>
 800ba78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba7c:	4323      	orrs	r3, r4
 800ba7e:	d03b      	beq.n	800baf8 <scalbn+0x90>
 800ba80:	4b31      	ldr	r3, [pc, #196]	; (800bb48 <scalbn+0xe0>)
 800ba82:	4629      	mov	r1, r5
 800ba84:	2200      	movs	r2, #0
 800ba86:	ee10 0a10 	vmov	r0, s0
 800ba8a:	f7f4 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ba8e:	4b2f      	ldr	r3, [pc, #188]	; (800bb4c <scalbn+0xe4>)
 800ba90:	429e      	cmp	r6, r3
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	da12      	bge.n	800babe <scalbn+0x56>
 800ba98:	a327      	add	r3, pc, #156	; (adr r3, 800bb38 <scalbn+0xd0>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fdab 	bl	80005f8 <__aeabi_dmul>
 800baa2:	e009      	b.n	800bab8 <scalbn+0x50>
 800baa4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800baa8:	428a      	cmp	r2, r1
 800baaa:	d10c      	bne.n	800bac6 <scalbn+0x5e>
 800baac:	ee10 2a10 	vmov	r2, s0
 800bab0:	4620      	mov	r0, r4
 800bab2:	4629      	mov	r1, r5
 800bab4:	f7f4 fbea 	bl	800028c <__adddf3>
 800bab8:	4604      	mov	r4, r0
 800baba:	460d      	mov	r5, r1
 800babc:	e01c      	b.n	800baf8 <scalbn+0x90>
 800babe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bac2:	460b      	mov	r3, r1
 800bac4:	3a36      	subs	r2, #54	; 0x36
 800bac6:	4432      	add	r2, r6
 800bac8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bacc:	428a      	cmp	r2, r1
 800bace:	dd0b      	ble.n	800bae8 <scalbn+0x80>
 800bad0:	ec45 4b11 	vmov	d1, r4, r5
 800bad4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bb40 <scalbn+0xd8>
 800bad8:	f000 f83c 	bl	800bb54 <copysign>
 800badc:	a318      	add	r3, pc, #96	; (adr r3, 800bb40 <scalbn+0xd8>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	ec51 0b10 	vmov	r0, r1, d0
 800bae6:	e7da      	b.n	800ba9e <scalbn+0x36>
 800bae8:	2a00      	cmp	r2, #0
 800baea:	dd08      	ble.n	800bafe <scalbn+0x96>
 800baec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800baf8:	ec45 4b10 	vmov	d0, r4, r5
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
 800bafe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb02:	da0d      	bge.n	800bb20 <scalbn+0xb8>
 800bb04:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb08:	429e      	cmp	r6, r3
 800bb0a:	ec45 4b11 	vmov	d1, r4, r5
 800bb0e:	dce1      	bgt.n	800bad4 <scalbn+0x6c>
 800bb10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb38 <scalbn+0xd0>
 800bb14:	f000 f81e 	bl	800bb54 <copysign>
 800bb18:	a307      	add	r3, pc, #28	; (adr r3, 800bb38 <scalbn+0xd0>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	e7e0      	b.n	800bae2 <scalbn+0x7a>
 800bb20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb24:	3236      	adds	r2, #54	; 0x36
 800bb26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	2200      	movs	r2, #0
 800bb34:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <scalbn+0xe8>)
 800bb36:	e7b2      	b.n	800ba9e <scalbn+0x36>
 800bb38:	c2f8f359 	.word	0xc2f8f359
 800bb3c:	01a56e1f 	.word	0x01a56e1f
 800bb40:	8800759c 	.word	0x8800759c
 800bb44:	7e37e43c 	.word	0x7e37e43c
 800bb48:	43500000 	.word	0x43500000
 800bb4c:	ffff3cb0 	.word	0xffff3cb0
 800bb50:	3c900000 	.word	0x3c900000

0800bb54 <copysign>:
 800bb54:	ec51 0b10 	vmov	r0, r1, d0
 800bb58:	ee11 0a90 	vmov	r0, s3
 800bb5c:	ee10 2a10 	vmov	r2, s0
 800bb60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bb64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bb68:	ea41 0300 	orr.w	r3, r1, r0
 800bb6c:	ec43 2b10 	vmov	d0, r2, r3
 800bb70:	4770      	bx	lr
	...

0800bb74 <__errno>:
 800bb74:	4b01      	ldr	r3, [pc, #4]	; (800bb7c <__errno+0x8>)
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	20000040 	.word	0x20000040

0800bb80 <__libc_init_array>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	4e0d      	ldr	r6, [pc, #52]	; (800bbb8 <__libc_init_array+0x38>)
 800bb84:	4c0d      	ldr	r4, [pc, #52]	; (800bbbc <__libc_init_array+0x3c>)
 800bb86:	1ba4      	subs	r4, r4, r6
 800bb88:	10a4      	asrs	r4, r4, #2
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	42a5      	cmp	r5, r4
 800bb8e:	d109      	bne.n	800bba4 <__libc_init_array+0x24>
 800bb90:	4e0b      	ldr	r6, [pc, #44]	; (800bbc0 <__libc_init_array+0x40>)
 800bb92:	4c0c      	ldr	r4, [pc, #48]	; (800bbc4 <__libc_init_array+0x44>)
 800bb94:	f004 fa5e 	bl	8010054 <_init>
 800bb98:	1ba4      	subs	r4, r4, r6
 800bb9a:	10a4      	asrs	r4, r4, #2
 800bb9c:	2500      	movs	r5, #0
 800bb9e:	42a5      	cmp	r5, r4
 800bba0:	d105      	bne.n	800bbae <__libc_init_array+0x2e>
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bba8:	4798      	blx	r3
 800bbaa:	3501      	adds	r5, #1
 800bbac:	e7ee      	b.n	800bb8c <__libc_init_array+0xc>
 800bbae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbb2:	4798      	blx	r3
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	e7f2      	b.n	800bb9e <__libc_init_array+0x1e>
 800bbb8:	08010600 	.word	0x08010600
 800bbbc:	08010600 	.word	0x08010600
 800bbc0:	08010600 	.word	0x08010600
 800bbc4:	08010604 	.word	0x08010604

0800bbc8 <memcpy>:
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	1e43      	subs	r3, r0, #1
 800bbcc:	440a      	add	r2, r1
 800bbce:	4291      	cmp	r1, r2
 800bbd0:	d100      	bne.n	800bbd4 <memcpy+0xc>
 800bbd2:	bd10      	pop	{r4, pc}
 800bbd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbdc:	e7f7      	b.n	800bbce <memcpy+0x6>

0800bbde <memset>:
 800bbde:	4402      	add	r2, r0
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d100      	bne.n	800bbe8 <memset+0xa>
 800bbe6:	4770      	bx	lr
 800bbe8:	f803 1b01 	strb.w	r1, [r3], #1
 800bbec:	e7f9      	b.n	800bbe2 <memset+0x4>

0800bbee <__cvt>:
 800bbee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf2:	ec55 4b10 	vmov	r4, r5, d0
 800bbf6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bbf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bbfc:	2d00      	cmp	r5, #0
 800bbfe:	460e      	mov	r6, r1
 800bc00:	4691      	mov	r9, r2
 800bc02:	4619      	mov	r1, r3
 800bc04:	bfb8      	it	lt
 800bc06:	4622      	movlt	r2, r4
 800bc08:	462b      	mov	r3, r5
 800bc0a:	f027 0720 	bic.w	r7, r7, #32
 800bc0e:	bfbb      	ittet	lt
 800bc10:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc14:	461d      	movlt	r5, r3
 800bc16:	2300      	movge	r3, #0
 800bc18:	232d      	movlt	r3, #45	; 0x2d
 800bc1a:	bfb8      	it	lt
 800bc1c:	4614      	movlt	r4, r2
 800bc1e:	2f46      	cmp	r7, #70	; 0x46
 800bc20:	700b      	strb	r3, [r1, #0]
 800bc22:	d004      	beq.n	800bc2e <__cvt+0x40>
 800bc24:	2f45      	cmp	r7, #69	; 0x45
 800bc26:	d100      	bne.n	800bc2a <__cvt+0x3c>
 800bc28:	3601      	adds	r6, #1
 800bc2a:	2102      	movs	r1, #2
 800bc2c:	e000      	b.n	800bc30 <__cvt+0x42>
 800bc2e:	2103      	movs	r1, #3
 800bc30:	ab03      	add	r3, sp, #12
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	ab02      	add	r3, sp, #8
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	4632      	mov	r2, r6
 800bc3a:	4653      	mov	r3, sl
 800bc3c:	ec45 4b10 	vmov	d0, r4, r5
 800bc40:	f001 feb2 	bl	800d9a8 <_dtoa_r>
 800bc44:	2f47      	cmp	r7, #71	; 0x47
 800bc46:	4680      	mov	r8, r0
 800bc48:	d102      	bne.n	800bc50 <__cvt+0x62>
 800bc4a:	f019 0f01 	tst.w	r9, #1
 800bc4e:	d026      	beq.n	800bc9e <__cvt+0xb0>
 800bc50:	2f46      	cmp	r7, #70	; 0x46
 800bc52:	eb08 0906 	add.w	r9, r8, r6
 800bc56:	d111      	bne.n	800bc7c <__cvt+0x8e>
 800bc58:	f898 3000 	ldrb.w	r3, [r8]
 800bc5c:	2b30      	cmp	r3, #48	; 0x30
 800bc5e:	d10a      	bne.n	800bc76 <__cvt+0x88>
 800bc60:	2200      	movs	r2, #0
 800bc62:	2300      	movs	r3, #0
 800bc64:	4620      	mov	r0, r4
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc6c:	b918      	cbnz	r0, 800bc76 <__cvt+0x88>
 800bc6e:	f1c6 0601 	rsb	r6, r6, #1
 800bc72:	f8ca 6000 	str.w	r6, [sl]
 800bc76:	f8da 3000 	ldr.w	r3, [sl]
 800bc7a:	4499      	add	r9, r3
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4620      	mov	r0, r4
 800bc82:	4629      	mov	r1, r5
 800bc84:	f7f4 ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc88:	b938      	cbnz	r0, 800bc9a <__cvt+0xac>
 800bc8a:	2230      	movs	r2, #48	; 0x30
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	454b      	cmp	r3, r9
 800bc90:	d205      	bcs.n	800bc9e <__cvt+0xb0>
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	9103      	str	r1, [sp, #12]
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e7f8      	b.n	800bc8c <__cvt+0x9e>
 800bc9a:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bca2:	eba3 0308 	sub.w	r3, r3, r8
 800bca6:	4640      	mov	r0, r8
 800bca8:	6013      	str	r3, [r2, #0]
 800bcaa:	b004      	add	sp, #16
 800bcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bcb0 <__exponent>:
 800bcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	bfba      	itte	lt
 800bcb8:	4249      	neglt	r1, r1
 800bcba:	232d      	movlt	r3, #45	; 0x2d
 800bcbc:	232b      	movge	r3, #43	; 0x2b
 800bcbe:	2909      	cmp	r1, #9
 800bcc0:	f804 2b02 	strb.w	r2, [r4], #2
 800bcc4:	7043      	strb	r3, [r0, #1]
 800bcc6:	dd20      	ble.n	800bd0a <__exponent+0x5a>
 800bcc8:	f10d 0307 	add.w	r3, sp, #7
 800bccc:	461f      	mov	r7, r3
 800bcce:	260a      	movs	r6, #10
 800bcd0:	fb91 f5f6 	sdiv	r5, r1, r6
 800bcd4:	fb06 1115 	mls	r1, r6, r5, r1
 800bcd8:	3130      	adds	r1, #48	; 0x30
 800bcda:	2d09      	cmp	r5, #9
 800bcdc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bce0:	f103 32ff 	add.w	r2, r3, #4294967295
 800bce4:	4629      	mov	r1, r5
 800bce6:	dc09      	bgt.n	800bcfc <__exponent+0x4c>
 800bce8:	3130      	adds	r1, #48	; 0x30
 800bcea:	3b02      	subs	r3, #2
 800bcec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bcf0:	42bb      	cmp	r3, r7
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	d304      	bcc.n	800bd00 <__exponent+0x50>
 800bcf6:	1a10      	subs	r0, r2, r0
 800bcf8:	b003      	add	sp, #12
 800bcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	e7e7      	b.n	800bcd0 <__exponent+0x20>
 800bd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd04:	f804 2b01 	strb.w	r2, [r4], #1
 800bd08:	e7f2      	b.n	800bcf0 <__exponent+0x40>
 800bd0a:	2330      	movs	r3, #48	; 0x30
 800bd0c:	4419      	add	r1, r3
 800bd0e:	7083      	strb	r3, [r0, #2]
 800bd10:	1d02      	adds	r2, r0, #4
 800bd12:	70c1      	strb	r1, [r0, #3]
 800bd14:	e7ef      	b.n	800bcf6 <__exponent+0x46>
	...

0800bd18 <_printf_float>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	b08d      	sub	sp, #52	; 0x34
 800bd1e:	460c      	mov	r4, r1
 800bd20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bd24:	4616      	mov	r6, r2
 800bd26:	461f      	mov	r7, r3
 800bd28:	4605      	mov	r5, r0
 800bd2a:	f003 f89b 	bl	800ee64 <_localeconv_r>
 800bd2e:	6803      	ldr	r3, [r0, #0]
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f4 fa4c 	bl	80001d0 <strlen>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd3c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd40:	9005      	str	r0, [sp, #20]
 800bd42:	3307      	adds	r3, #7
 800bd44:	f023 0307 	bic.w	r3, r3, #7
 800bd48:	f103 0208 	add.w	r2, r3, #8
 800bd4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd50:	f8d4 b000 	ldr.w	fp, [r4]
 800bd54:	f8c8 2000 	str.w	r2, [r8]
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd68:	9307      	str	r3, [sp, #28]
 800bd6a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd72:	4ba7      	ldr	r3, [pc, #668]	; (800c010 <_printf_float+0x2f8>)
 800bd74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd78:	f7f4 fed8 	bl	8000b2c <__aeabi_dcmpun>
 800bd7c:	bb70      	cbnz	r0, 800bddc <_printf_float+0xc4>
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	4ba3      	ldr	r3, [pc, #652]	; (800c010 <_printf_float+0x2f8>)
 800bd84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd88:	f7f4 feb2 	bl	8000af0 <__aeabi_dcmple>
 800bd8c:	bb30      	cbnz	r0, 800bddc <_printf_float+0xc4>
 800bd8e:	2200      	movs	r2, #0
 800bd90:	2300      	movs	r3, #0
 800bd92:	4640      	mov	r0, r8
 800bd94:	4649      	mov	r1, r9
 800bd96:	f7f4 fea1 	bl	8000adc <__aeabi_dcmplt>
 800bd9a:	b110      	cbz	r0, 800bda2 <_printf_float+0x8a>
 800bd9c:	232d      	movs	r3, #45	; 0x2d
 800bd9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda2:	4a9c      	ldr	r2, [pc, #624]	; (800c014 <_printf_float+0x2fc>)
 800bda4:	4b9c      	ldr	r3, [pc, #624]	; (800c018 <_printf_float+0x300>)
 800bda6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bdaa:	bf8c      	ite	hi
 800bdac:	4690      	movhi	r8, r2
 800bdae:	4698      	movls	r8, r3
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	f02b 0204 	bic.w	r2, fp, #4
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	6022      	str	r2, [r4, #0]
 800bdba:	f04f 0900 	mov.w	r9, #0
 800bdbe:	9700      	str	r7, [sp, #0]
 800bdc0:	4633      	mov	r3, r6
 800bdc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f000 f9e6 	bl	800c198 <_printf_common>
 800bdcc:	3001      	adds	r0, #1
 800bdce:	f040 808d 	bne.w	800beec <_printf_float+0x1d4>
 800bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd6:	b00d      	add	sp, #52	; 0x34
 800bdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bddc:	4642      	mov	r2, r8
 800bdde:	464b      	mov	r3, r9
 800bde0:	4640      	mov	r0, r8
 800bde2:	4649      	mov	r1, r9
 800bde4:	f7f4 fea2 	bl	8000b2c <__aeabi_dcmpun>
 800bde8:	b110      	cbz	r0, 800bdf0 <_printf_float+0xd8>
 800bdea:	4a8c      	ldr	r2, [pc, #560]	; (800c01c <_printf_float+0x304>)
 800bdec:	4b8c      	ldr	r3, [pc, #560]	; (800c020 <_printf_float+0x308>)
 800bdee:	e7da      	b.n	800bda6 <_printf_float+0x8e>
 800bdf0:	6861      	ldr	r1, [r4, #4]
 800bdf2:	1c4b      	adds	r3, r1, #1
 800bdf4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bdf8:	a80a      	add	r0, sp, #40	; 0x28
 800bdfa:	d13e      	bne.n	800be7a <_printf_float+0x162>
 800bdfc:	2306      	movs	r3, #6
 800bdfe:	6063      	str	r3, [r4, #4]
 800be00:	2300      	movs	r3, #0
 800be02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800be06:	ab09      	add	r3, sp, #36	; 0x24
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	ec49 8b10 	vmov	d0, r8, r9
 800be0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	f8cd a004 	str.w	sl, [sp, #4]
 800be18:	6861      	ldr	r1, [r4, #4]
 800be1a:	4628      	mov	r0, r5
 800be1c:	f7ff fee7 	bl	800bbee <__cvt>
 800be20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800be24:	2b47      	cmp	r3, #71	; 0x47
 800be26:	4680      	mov	r8, r0
 800be28:	d109      	bne.n	800be3e <_printf_float+0x126>
 800be2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2c:	1cd8      	adds	r0, r3, #3
 800be2e:	db02      	blt.n	800be36 <_printf_float+0x11e>
 800be30:	6862      	ldr	r2, [r4, #4]
 800be32:	4293      	cmp	r3, r2
 800be34:	dd47      	ble.n	800bec6 <_printf_float+0x1ae>
 800be36:	f1aa 0a02 	sub.w	sl, sl, #2
 800be3a:	fa5f fa8a 	uxtb.w	sl, sl
 800be3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800be42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be44:	d824      	bhi.n	800be90 <_printf_float+0x178>
 800be46:	3901      	subs	r1, #1
 800be48:	4652      	mov	r2, sl
 800be4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be4e:	9109      	str	r1, [sp, #36]	; 0x24
 800be50:	f7ff ff2e 	bl	800bcb0 <__exponent>
 800be54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be56:	1813      	adds	r3, r2, r0
 800be58:	2a01      	cmp	r2, #1
 800be5a:	4681      	mov	r9, r0
 800be5c:	6123      	str	r3, [r4, #16]
 800be5e:	dc02      	bgt.n	800be66 <_printf_float+0x14e>
 800be60:	6822      	ldr	r2, [r4, #0]
 800be62:	07d1      	lsls	r1, r2, #31
 800be64:	d501      	bpl.n	800be6a <_printf_float+0x152>
 800be66:	3301      	adds	r3, #1
 800be68:	6123      	str	r3, [r4, #16]
 800be6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0a5      	beq.n	800bdbe <_printf_float+0xa6>
 800be72:	232d      	movs	r3, #45	; 0x2d
 800be74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be78:	e7a1      	b.n	800bdbe <_printf_float+0xa6>
 800be7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800be7e:	f000 8177 	beq.w	800c170 <_printf_float+0x458>
 800be82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800be86:	d1bb      	bne.n	800be00 <_printf_float+0xe8>
 800be88:	2900      	cmp	r1, #0
 800be8a:	d1b9      	bne.n	800be00 <_printf_float+0xe8>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e7b6      	b.n	800bdfe <_printf_float+0xe6>
 800be90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800be94:	d119      	bne.n	800beca <_printf_float+0x1b2>
 800be96:	2900      	cmp	r1, #0
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	dd0c      	ble.n	800beb6 <_printf_float+0x19e>
 800be9c:	6121      	str	r1, [r4, #16]
 800be9e:	b913      	cbnz	r3, 800bea6 <_printf_float+0x18e>
 800bea0:	6822      	ldr	r2, [r4, #0]
 800bea2:	07d2      	lsls	r2, r2, #31
 800bea4:	d502      	bpl.n	800beac <_printf_float+0x194>
 800bea6:	3301      	adds	r3, #1
 800bea8:	440b      	add	r3, r1
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beae:	65a3      	str	r3, [r4, #88]	; 0x58
 800beb0:	f04f 0900 	mov.w	r9, #0
 800beb4:	e7d9      	b.n	800be6a <_printf_float+0x152>
 800beb6:	b913      	cbnz	r3, 800bebe <_printf_float+0x1a6>
 800beb8:	6822      	ldr	r2, [r4, #0]
 800beba:	07d0      	lsls	r0, r2, #31
 800bebc:	d501      	bpl.n	800bec2 <_printf_float+0x1aa>
 800bebe:	3302      	adds	r3, #2
 800bec0:	e7f3      	b.n	800beaa <_printf_float+0x192>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7f1      	b.n	800beaa <_printf_float+0x192>
 800bec6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800beca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bece:	4293      	cmp	r3, r2
 800bed0:	db05      	blt.n	800bede <_printf_float+0x1c6>
 800bed2:	6822      	ldr	r2, [r4, #0]
 800bed4:	6123      	str	r3, [r4, #16]
 800bed6:	07d1      	lsls	r1, r2, #31
 800bed8:	d5e8      	bpl.n	800beac <_printf_float+0x194>
 800beda:	3301      	adds	r3, #1
 800bedc:	e7e5      	b.n	800beaa <_printf_float+0x192>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	bfd4      	ite	le
 800bee2:	f1c3 0302 	rsble	r3, r3, #2
 800bee6:	2301      	movgt	r3, #1
 800bee8:	4413      	add	r3, r2
 800beea:	e7de      	b.n	800beaa <_printf_float+0x192>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	055a      	lsls	r2, r3, #21
 800bef0:	d407      	bmi.n	800bf02 <_printf_float+0x1ea>
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	4642      	mov	r2, r8
 800bef6:	4631      	mov	r1, r6
 800bef8:	4628      	mov	r0, r5
 800befa:	47b8      	blx	r7
 800befc:	3001      	adds	r0, #1
 800befe:	d12b      	bne.n	800bf58 <_printf_float+0x240>
 800bf00:	e767      	b.n	800bdd2 <_printf_float+0xba>
 800bf02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bf06:	f240 80dc 	bls.w	800c0c2 <_printf_float+0x3aa>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf12:	f7f4 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d033      	beq.n	800bf82 <_printf_float+0x26a>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4a41      	ldr	r2, [pc, #260]	; (800c024 <_printf_float+0x30c>)
 800bf1e:	4631      	mov	r1, r6
 800bf20:	4628      	mov	r0, r5
 800bf22:	47b8      	blx	r7
 800bf24:	3001      	adds	r0, #1
 800bf26:	f43f af54 	beq.w	800bdd2 <_printf_float+0xba>
 800bf2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	db02      	blt.n	800bf38 <_printf_float+0x220>
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	07d8      	lsls	r0, r3, #31
 800bf36:	d50f      	bpl.n	800bf58 <_printf_float+0x240>
 800bf38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b8      	blx	r7
 800bf42:	3001      	adds	r0, #1
 800bf44:	f43f af45 	beq.w	800bdd2 <_printf_float+0xba>
 800bf48:	f04f 0800 	mov.w	r8, #0
 800bf4c:	f104 091a 	add.w	r9, r4, #26
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	3b01      	subs	r3, #1
 800bf54:	4543      	cmp	r3, r8
 800bf56:	dc09      	bgt.n	800bf6c <_printf_float+0x254>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	079b      	lsls	r3, r3, #30
 800bf5c:	f100 8103 	bmi.w	800c166 <_printf_float+0x44e>
 800bf60:	68e0      	ldr	r0, [r4, #12]
 800bf62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf64:	4298      	cmp	r0, r3
 800bf66:	bfb8      	it	lt
 800bf68:	4618      	movlt	r0, r3
 800bf6a:	e734      	b.n	800bdd6 <_printf_float+0xbe>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	464a      	mov	r2, r9
 800bf70:	4631      	mov	r1, r6
 800bf72:	4628      	mov	r0, r5
 800bf74:	47b8      	blx	r7
 800bf76:	3001      	adds	r0, #1
 800bf78:	f43f af2b 	beq.w	800bdd2 <_printf_float+0xba>
 800bf7c:	f108 0801 	add.w	r8, r8, #1
 800bf80:	e7e6      	b.n	800bf50 <_printf_float+0x238>
 800bf82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dc2b      	bgt.n	800bfe0 <_printf_float+0x2c8>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	4a26      	ldr	r2, [pc, #152]	; (800c024 <_printf_float+0x30c>)
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b8      	blx	r7
 800bf92:	3001      	adds	r0, #1
 800bf94:	f43f af1d 	beq.w	800bdd2 <_printf_float+0xba>
 800bf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9a:	b923      	cbnz	r3, 800bfa6 <_printf_float+0x28e>
 800bf9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9e:	b913      	cbnz	r3, 800bfa6 <_printf_float+0x28e>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	07d9      	lsls	r1, r3, #31
 800bfa4:	d5d8      	bpl.n	800bf58 <_printf_float+0x240>
 800bfa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4628      	mov	r0, r5
 800bfae:	47b8      	blx	r7
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	f43f af0e 	beq.w	800bdd2 <_printf_float+0xba>
 800bfb6:	f04f 0900 	mov.w	r9, #0
 800bfba:	f104 0a1a 	add.w	sl, r4, #26
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	425b      	negs	r3, r3
 800bfc2:	454b      	cmp	r3, r9
 800bfc4:	dc01      	bgt.n	800bfca <_printf_float+0x2b2>
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	e794      	b.n	800bef4 <_printf_float+0x1dc>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4652      	mov	r2, sl
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	47b8      	blx	r7
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	f43f aefc 	beq.w	800bdd2 <_printf_float+0xba>
 800bfda:	f109 0901 	add.w	r9, r9, #1
 800bfde:	e7ee      	b.n	800bfbe <_printf_float+0x2a6>
 800bfe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfe2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	bfa8      	it	ge
 800bfe8:	461a      	movge	r2, r3
 800bfea:	2a00      	cmp	r2, #0
 800bfec:	4691      	mov	r9, r2
 800bfee:	dd07      	ble.n	800c000 <_printf_float+0x2e8>
 800bff0:	4613      	mov	r3, r2
 800bff2:	4631      	mov	r1, r6
 800bff4:	4642      	mov	r2, r8
 800bff6:	4628      	mov	r0, r5
 800bff8:	47b8      	blx	r7
 800bffa:	3001      	adds	r0, #1
 800bffc:	f43f aee9 	beq.w	800bdd2 <_printf_float+0xba>
 800c000:	f104 031a 	add.w	r3, r4, #26
 800c004:	f04f 0b00 	mov.w	fp, #0
 800c008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c00c:	9306      	str	r3, [sp, #24]
 800c00e:	e015      	b.n	800c03c <_printf_float+0x324>
 800c010:	7fefffff 	.word	0x7fefffff
 800c014:	080102e0 	.word	0x080102e0
 800c018:	080102dc 	.word	0x080102dc
 800c01c:	080102e8 	.word	0x080102e8
 800c020:	080102e4 	.word	0x080102e4
 800c024:	080102ec 	.word	0x080102ec
 800c028:	2301      	movs	r3, #1
 800c02a:	9a06      	ldr	r2, [sp, #24]
 800c02c:	4631      	mov	r1, r6
 800c02e:	4628      	mov	r0, r5
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	f43f aecd 	beq.w	800bdd2 <_printf_float+0xba>
 800c038:	f10b 0b01 	add.w	fp, fp, #1
 800c03c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c040:	ebaa 0309 	sub.w	r3, sl, r9
 800c044:	455b      	cmp	r3, fp
 800c046:	dcef      	bgt.n	800c028 <_printf_float+0x310>
 800c048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c04c:	429a      	cmp	r2, r3
 800c04e:	44d0      	add	r8, sl
 800c050:	db15      	blt.n	800c07e <_printf_float+0x366>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	07da      	lsls	r2, r3, #31
 800c056:	d412      	bmi.n	800c07e <_printf_float+0x366>
 800c058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c05a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c05c:	eba3 020a 	sub.w	r2, r3, sl
 800c060:	eba3 0a01 	sub.w	sl, r3, r1
 800c064:	4592      	cmp	sl, r2
 800c066:	bfa8      	it	ge
 800c068:	4692      	movge	sl, r2
 800c06a:	f1ba 0f00 	cmp.w	sl, #0
 800c06e:	dc0e      	bgt.n	800c08e <_printf_float+0x376>
 800c070:	f04f 0800 	mov.w	r8, #0
 800c074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c078:	f104 091a 	add.w	r9, r4, #26
 800c07c:	e019      	b.n	800c0b2 <_printf_float+0x39a>
 800c07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c082:	4631      	mov	r1, r6
 800c084:	4628      	mov	r0, r5
 800c086:	47b8      	blx	r7
 800c088:	3001      	adds	r0, #1
 800c08a:	d1e5      	bne.n	800c058 <_printf_float+0x340>
 800c08c:	e6a1      	b.n	800bdd2 <_printf_float+0xba>
 800c08e:	4653      	mov	r3, sl
 800c090:	4642      	mov	r2, r8
 800c092:	4631      	mov	r1, r6
 800c094:	4628      	mov	r0, r5
 800c096:	47b8      	blx	r7
 800c098:	3001      	adds	r0, #1
 800c09a:	d1e9      	bne.n	800c070 <_printf_float+0x358>
 800c09c:	e699      	b.n	800bdd2 <_printf_float+0xba>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	464a      	mov	r2, r9
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	47b8      	blx	r7
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	f43f ae92 	beq.w	800bdd2 <_printf_float+0xba>
 800c0ae:	f108 0801 	add.w	r8, r8, #1
 800c0b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0b6:	1a9b      	subs	r3, r3, r2
 800c0b8:	eba3 030a 	sub.w	r3, r3, sl
 800c0bc:	4543      	cmp	r3, r8
 800c0be:	dcee      	bgt.n	800c09e <_printf_float+0x386>
 800c0c0:	e74a      	b.n	800bf58 <_printf_float+0x240>
 800c0c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0c4:	2a01      	cmp	r2, #1
 800c0c6:	dc01      	bgt.n	800c0cc <_printf_float+0x3b4>
 800c0c8:	07db      	lsls	r3, r3, #31
 800c0ca:	d53a      	bpl.n	800c142 <_printf_float+0x42a>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	47b8      	blx	r7
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	f43f ae7b 	beq.w	800bdd2 <_printf_float+0xba>
 800c0dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	47b8      	blx	r7
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	f108 0801 	add.w	r8, r8, #1
 800c0ec:	f43f ae71 	beq.w	800bdd2 <_printf_float+0xba>
 800c0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f103 3aff 	add.w	sl, r3, #4294967295
 800c0f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f7f4 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c102:	b9c8      	cbnz	r0, 800c138 <_printf_float+0x420>
 800c104:	4653      	mov	r3, sl
 800c106:	4642      	mov	r2, r8
 800c108:	4631      	mov	r1, r6
 800c10a:	4628      	mov	r0, r5
 800c10c:	47b8      	blx	r7
 800c10e:	3001      	adds	r0, #1
 800c110:	d10e      	bne.n	800c130 <_printf_float+0x418>
 800c112:	e65e      	b.n	800bdd2 <_printf_float+0xba>
 800c114:	2301      	movs	r3, #1
 800c116:	4652      	mov	r2, sl
 800c118:	4631      	mov	r1, r6
 800c11a:	4628      	mov	r0, r5
 800c11c:	47b8      	blx	r7
 800c11e:	3001      	adds	r0, #1
 800c120:	f43f ae57 	beq.w	800bdd2 <_printf_float+0xba>
 800c124:	f108 0801 	add.w	r8, r8, #1
 800c128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c12a:	3b01      	subs	r3, #1
 800c12c:	4543      	cmp	r3, r8
 800c12e:	dcf1      	bgt.n	800c114 <_printf_float+0x3fc>
 800c130:	464b      	mov	r3, r9
 800c132:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c136:	e6de      	b.n	800bef6 <_printf_float+0x1de>
 800c138:	f04f 0800 	mov.w	r8, #0
 800c13c:	f104 0a1a 	add.w	sl, r4, #26
 800c140:	e7f2      	b.n	800c128 <_printf_float+0x410>
 800c142:	2301      	movs	r3, #1
 800c144:	e7df      	b.n	800c106 <_printf_float+0x3ee>
 800c146:	2301      	movs	r3, #1
 800c148:	464a      	mov	r2, r9
 800c14a:	4631      	mov	r1, r6
 800c14c:	4628      	mov	r0, r5
 800c14e:	47b8      	blx	r7
 800c150:	3001      	adds	r0, #1
 800c152:	f43f ae3e 	beq.w	800bdd2 <_printf_float+0xba>
 800c156:	f108 0801 	add.w	r8, r8, #1
 800c15a:	68e3      	ldr	r3, [r4, #12]
 800c15c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c15e:	1a9b      	subs	r3, r3, r2
 800c160:	4543      	cmp	r3, r8
 800c162:	dcf0      	bgt.n	800c146 <_printf_float+0x42e>
 800c164:	e6fc      	b.n	800bf60 <_printf_float+0x248>
 800c166:	f04f 0800 	mov.w	r8, #0
 800c16a:	f104 0919 	add.w	r9, r4, #25
 800c16e:	e7f4      	b.n	800c15a <_printf_float+0x442>
 800c170:	2900      	cmp	r1, #0
 800c172:	f43f ae8b 	beq.w	800be8c <_printf_float+0x174>
 800c176:	2300      	movs	r3, #0
 800c178:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c17c:	ab09      	add	r3, sp, #36	; 0x24
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	ec49 8b10 	vmov	d0, r8, r9
 800c184:	6022      	str	r2, [r4, #0]
 800c186:	f8cd a004 	str.w	sl, [sp, #4]
 800c18a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c18e:	4628      	mov	r0, r5
 800c190:	f7ff fd2d 	bl	800bbee <__cvt>
 800c194:	4680      	mov	r8, r0
 800c196:	e648      	b.n	800be2a <_printf_float+0x112>

0800c198 <_printf_common>:
 800c198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	4691      	mov	r9, r2
 800c19e:	461f      	mov	r7, r3
 800c1a0:	688a      	ldr	r2, [r1, #8]
 800c1a2:	690b      	ldr	r3, [r1, #16]
 800c1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	bfb8      	it	lt
 800c1ac:	4613      	movlt	r3, r2
 800c1ae:	f8c9 3000 	str.w	r3, [r9]
 800c1b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	b112      	cbz	r2, 800c1c2 <_printf_common+0x2a>
 800c1bc:	3301      	adds	r3, #1
 800c1be:	f8c9 3000 	str.w	r3, [r9]
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	0699      	lsls	r1, r3, #26
 800c1c6:	bf42      	ittt	mi
 800c1c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c1cc:	3302      	addmi	r3, #2
 800c1ce:	f8c9 3000 	strmi.w	r3, [r9]
 800c1d2:	6825      	ldr	r5, [r4, #0]
 800c1d4:	f015 0506 	ands.w	r5, r5, #6
 800c1d8:	d107      	bne.n	800c1ea <_printf_common+0x52>
 800c1da:	f104 0a19 	add.w	sl, r4, #25
 800c1de:	68e3      	ldr	r3, [r4, #12]
 800c1e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c1e4:	1a9b      	subs	r3, r3, r2
 800c1e6:	42ab      	cmp	r3, r5
 800c1e8:	dc28      	bgt.n	800c23c <_printf_common+0xa4>
 800c1ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c1ee:	6822      	ldr	r2, [r4, #0]
 800c1f0:	3300      	adds	r3, #0
 800c1f2:	bf18      	it	ne
 800c1f4:	2301      	movne	r3, #1
 800c1f6:	0692      	lsls	r2, r2, #26
 800c1f8:	d42d      	bmi.n	800c256 <_printf_common+0xbe>
 800c1fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1fe:	4639      	mov	r1, r7
 800c200:	4630      	mov	r0, r6
 800c202:	47c0      	blx	r8
 800c204:	3001      	adds	r0, #1
 800c206:	d020      	beq.n	800c24a <_printf_common+0xb2>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	68e5      	ldr	r5, [r4, #12]
 800c20c:	f8d9 2000 	ldr.w	r2, [r9]
 800c210:	f003 0306 	and.w	r3, r3, #6
 800c214:	2b04      	cmp	r3, #4
 800c216:	bf08      	it	eq
 800c218:	1aad      	subeq	r5, r5, r2
 800c21a:	68a3      	ldr	r3, [r4, #8]
 800c21c:	6922      	ldr	r2, [r4, #16]
 800c21e:	bf0c      	ite	eq
 800c220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c224:	2500      	movne	r5, #0
 800c226:	4293      	cmp	r3, r2
 800c228:	bfc4      	itt	gt
 800c22a:	1a9b      	subgt	r3, r3, r2
 800c22c:	18ed      	addgt	r5, r5, r3
 800c22e:	f04f 0900 	mov.w	r9, #0
 800c232:	341a      	adds	r4, #26
 800c234:	454d      	cmp	r5, r9
 800c236:	d11a      	bne.n	800c26e <_printf_common+0xd6>
 800c238:	2000      	movs	r0, #0
 800c23a:	e008      	b.n	800c24e <_printf_common+0xb6>
 800c23c:	2301      	movs	r3, #1
 800c23e:	4652      	mov	r2, sl
 800c240:	4639      	mov	r1, r7
 800c242:	4630      	mov	r0, r6
 800c244:	47c0      	blx	r8
 800c246:	3001      	adds	r0, #1
 800c248:	d103      	bne.n	800c252 <_printf_common+0xba>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c252:	3501      	adds	r5, #1
 800c254:	e7c3      	b.n	800c1de <_printf_common+0x46>
 800c256:	18e1      	adds	r1, r4, r3
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	2030      	movs	r0, #48	; 0x30
 800c25c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c260:	4422      	add	r2, r4
 800c262:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c266:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c26a:	3302      	adds	r3, #2
 800c26c:	e7c5      	b.n	800c1fa <_printf_common+0x62>
 800c26e:	2301      	movs	r3, #1
 800c270:	4622      	mov	r2, r4
 800c272:	4639      	mov	r1, r7
 800c274:	4630      	mov	r0, r6
 800c276:	47c0      	blx	r8
 800c278:	3001      	adds	r0, #1
 800c27a:	d0e6      	beq.n	800c24a <_printf_common+0xb2>
 800c27c:	f109 0901 	add.w	r9, r9, #1
 800c280:	e7d8      	b.n	800c234 <_printf_common+0x9c>
	...

0800c284 <_printf_i>:
 800c284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c288:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c28c:	460c      	mov	r4, r1
 800c28e:	7e09      	ldrb	r1, [r1, #24]
 800c290:	b085      	sub	sp, #20
 800c292:	296e      	cmp	r1, #110	; 0x6e
 800c294:	4617      	mov	r7, r2
 800c296:	4606      	mov	r6, r0
 800c298:	4698      	mov	r8, r3
 800c29a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c29c:	f000 80b3 	beq.w	800c406 <_printf_i+0x182>
 800c2a0:	d822      	bhi.n	800c2e8 <_printf_i+0x64>
 800c2a2:	2963      	cmp	r1, #99	; 0x63
 800c2a4:	d036      	beq.n	800c314 <_printf_i+0x90>
 800c2a6:	d80a      	bhi.n	800c2be <_printf_i+0x3a>
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	f000 80b9 	beq.w	800c420 <_printf_i+0x19c>
 800c2ae:	2958      	cmp	r1, #88	; 0x58
 800c2b0:	f000 8083 	beq.w	800c3ba <_printf_i+0x136>
 800c2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c2bc:	e032      	b.n	800c324 <_printf_i+0xa0>
 800c2be:	2964      	cmp	r1, #100	; 0x64
 800c2c0:	d001      	beq.n	800c2c6 <_printf_i+0x42>
 800c2c2:	2969      	cmp	r1, #105	; 0x69
 800c2c4:	d1f6      	bne.n	800c2b4 <_printf_i+0x30>
 800c2c6:	6820      	ldr	r0, [r4, #0]
 800c2c8:	6813      	ldr	r3, [r2, #0]
 800c2ca:	0605      	lsls	r5, r0, #24
 800c2cc:	f103 0104 	add.w	r1, r3, #4
 800c2d0:	d52a      	bpl.n	800c328 <_printf_i+0xa4>
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	6011      	str	r1, [r2, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	da03      	bge.n	800c2e2 <_printf_i+0x5e>
 800c2da:	222d      	movs	r2, #45	; 0x2d
 800c2dc:	425b      	negs	r3, r3
 800c2de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c2e2:	486f      	ldr	r0, [pc, #444]	; (800c4a0 <_printf_i+0x21c>)
 800c2e4:	220a      	movs	r2, #10
 800c2e6:	e039      	b.n	800c35c <_printf_i+0xd8>
 800c2e8:	2973      	cmp	r1, #115	; 0x73
 800c2ea:	f000 809d 	beq.w	800c428 <_printf_i+0x1a4>
 800c2ee:	d808      	bhi.n	800c302 <_printf_i+0x7e>
 800c2f0:	296f      	cmp	r1, #111	; 0x6f
 800c2f2:	d020      	beq.n	800c336 <_printf_i+0xb2>
 800c2f4:	2970      	cmp	r1, #112	; 0x70
 800c2f6:	d1dd      	bne.n	800c2b4 <_printf_i+0x30>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	f043 0320 	orr.w	r3, r3, #32
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	e003      	b.n	800c30a <_printf_i+0x86>
 800c302:	2975      	cmp	r1, #117	; 0x75
 800c304:	d017      	beq.n	800c336 <_printf_i+0xb2>
 800c306:	2978      	cmp	r1, #120	; 0x78
 800c308:	d1d4      	bne.n	800c2b4 <_printf_i+0x30>
 800c30a:	2378      	movs	r3, #120	; 0x78
 800c30c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c310:	4864      	ldr	r0, [pc, #400]	; (800c4a4 <_printf_i+0x220>)
 800c312:	e055      	b.n	800c3c0 <_printf_i+0x13c>
 800c314:	6813      	ldr	r3, [r2, #0]
 800c316:	1d19      	adds	r1, r3, #4
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6011      	str	r1, [r2, #0]
 800c31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c324:	2301      	movs	r3, #1
 800c326:	e08c      	b.n	800c442 <_printf_i+0x1be>
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6011      	str	r1, [r2, #0]
 800c32c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c330:	bf18      	it	ne
 800c332:	b21b      	sxthne	r3, r3
 800c334:	e7cf      	b.n	800c2d6 <_printf_i+0x52>
 800c336:	6813      	ldr	r3, [r2, #0]
 800c338:	6825      	ldr	r5, [r4, #0]
 800c33a:	1d18      	adds	r0, r3, #4
 800c33c:	6010      	str	r0, [r2, #0]
 800c33e:	0628      	lsls	r0, r5, #24
 800c340:	d501      	bpl.n	800c346 <_printf_i+0xc2>
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	e002      	b.n	800c34c <_printf_i+0xc8>
 800c346:	0668      	lsls	r0, r5, #25
 800c348:	d5fb      	bpl.n	800c342 <_printf_i+0xbe>
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	4854      	ldr	r0, [pc, #336]	; (800c4a0 <_printf_i+0x21c>)
 800c34e:	296f      	cmp	r1, #111	; 0x6f
 800c350:	bf14      	ite	ne
 800c352:	220a      	movne	r2, #10
 800c354:	2208      	moveq	r2, #8
 800c356:	2100      	movs	r1, #0
 800c358:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c35c:	6865      	ldr	r5, [r4, #4]
 800c35e:	60a5      	str	r5, [r4, #8]
 800c360:	2d00      	cmp	r5, #0
 800c362:	f2c0 8095 	blt.w	800c490 <_printf_i+0x20c>
 800c366:	6821      	ldr	r1, [r4, #0]
 800c368:	f021 0104 	bic.w	r1, r1, #4
 800c36c:	6021      	str	r1, [r4, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d13d      	bne.n	800c3ee <_printf_i+0x16a>
 800c372:	2d00      	cmp	r5, #0
 800c374:	f040 808e 	bne.w	800c494 <_printf_i+0x210>
 800c378:	4665      	mov	r5, ip
 800c37a:	2a08      	cmp	r2, #8
 800c37c:	d10b      	bne.n	800c396 <_printf_i+0x112>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	07db      	lsls	r3, r3, #31
 800c382:	d508      	bpl.n	800c396 <_printf_i+0x112>
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	6862      	ldr	r2, [r4, #4]
 800c388:	429a      	cmp	r2, r3
 800c38a:	bfde      	ittt	le
 800c38c:	2330      	movle	r3, #48	; 0x30
 800c38e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c392:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c396:	ebac 0305 	sub.w	r3, ip, r5
 800c39a:	6123      	str	r3, [r4, #16]
 800c39c:	f8cd 8000 	str.w	r8, [sp]
 800c3a0:	463b      	mov	r3, r7
 800c3a2:	aa03      	add	r2, sp, #12
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7ff fef6 	bl	800c198 <_printf_common>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d14d      	bne.n	800c44c <_printf_i+0x1c8>
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	b005      	add	sp, #20
 800c3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3ba:	4839      	ldr	r0, [pc, #228]	; (800c4a0 <_printf_i+0x21c>)
 800c3bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c3c0:	6813      	ldr	r3, [r2, #0]
 800c3c2:	6821      	ldr	r1, [r4, #0]
 800c3c4:	1d1d      	adds	r5, r3, #4
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6015      	str	r5, [r2, #0]
 800c3ca:	060a      	lsls	r2, r1, #24
 800c3cc:	d50b      	bpl.n	800c3e6 <_printf_i+0x162>
 800c3ce:	07ca      	lsls	r2, r1, #31
 800c3d0:	bf44      	itt	mi
 800c3d2:	f041 0120 	orrmi.w	r1, r1, #32
 800c3d6:	6021      	strmi	r1, [r4, #0]
 800c3d8:	b91b      	cbnz	r3, 800c3e2 <_printf_i+0x15e>
 800c3da:	6822      	ldr	r2, [r4, #0]
 800c3dc:	f022 0220 	bic.w	r2, r2, #32
 800c3e0:	6022      	str	r2, [r4, #0]
 800c3e2:	2210      	movs	r2, #16
 800c3e4:	e7b7      	b.n	800c356 <_printf_i+0xd2>
 800c3e6:	064d      	lsls	r5, r1, #25
 800c3e8:	bf48      	it	mi
 800c3ea:	b29b      	uxthmi	r3, r3
 800c3ec:	e7ef      	b.n	800c3ce <_printf_i+0x14a>
 800c3ee:	4665      	mov	r5, ip
 800c3f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3f4:	fb02 3311 	mls	r3, r2, r1, r3
 800c3f8:	5cc3      	ldrb	r3, [r0, r3]
 800c3fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c3fe:	460b      	mov	r3, r1
 800c400:	2900      	cmp	r1, #0
 800c402:	d1f5      	bne.n	800c3f0 <_printf_i+0x16c>
 800c404:	e7b9      	b.n	800c37a <_printf_i+0xf6>
 800c406:	6813      	ldr	r3, [r2, #0]
 800c408:	6825      	ldr	r5, [r4, #0]
 800c40a:	6961      	ldr	r1, [r4, #20]
 800c40c:	1d18      	adds	r0, r3, #4
 800c40e:	6010      	str	r0, [r2, #0]
 800c410:	0628      	lsls	r0, r5, #24
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	d501      	bpl.n	800c41a <_printf_i+0x196>
 800c416:	6019      	str	r1, [r3, #0]
 800c418:	e002      	b.n	800c420 <_printf_i+0x19c>
 800c41a:	066a      	lsls	r2, r5, #25
 800c41c:	d5fb      	bpl.n	800c416 <_printf_i+0x192>
 800c41e:	8019      	strh	r1, [r3, #0]
 800c420:	2300      	movs	r3, #0
 800c422:	6123      	str	r3, [r4, #16]
 800c424:	4665      	mov	r5, ip
 800c426:	e7b9      	b.n	800c39c <_printf_i+0x118>
 800c428:	6813      	ldr	r3, [r2, #0]
 800c42a:	1d19      	adds	r1, r3, #4
 800c42c:	6011      	str	r1, [r2, #0]
 800c42e:	681d      	ldr	r5, [r3, #0]
 800c430:	6862      	ldr	r2, [r4, #4]
 800c432:	2100      	movs	r1, #0
 800c434:	4628      	mov	r0, r5
 800c436:	f7f3 fed3 	bl	80001e0 <memchr>
 800c43a:	b108      	cbz	r0, 800c440 <_printf_i+0x1bc>
 800c43c:	1b40      	subs	r0, r0, r5
 800c43e:	6060      	str	r0, [r4, #4]
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	2300      	movs	r3, #0
 800c446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c44a:	e7a7      	b.n	800c39c <_printf_i+0x118>
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	462a      	mov	r2, r5
 800c450:	4639      	mov	r1, r7
 800c452:	4630      	mov	r0, r6
 800c454:	47c0      	blx	r8
 800c456:	3001      	adds	r0, #1
 800c458:	d0aa      	beq.n	800c3b0 <_printf_i+0x12c>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	079b      	lsls	r3, r3, #30
 800c45e:	d413      	bmi.n	800c488 <_printf_i+0x204>
 800c460:	68e0      	ldr	r0, [r4, #12]
 800c462:	9b03      	ldr	r3, [sp, #12]
 800c464:	4298      	cmp	r0, r3
 800c466:	bfb8      	it	lt
 800c468:	4618      	movlt	r0, r3
 800c46a:	e7a3      	b.n	800c3b4 <_printf_i+0x130>
 800c46c:	2301      	movs	r3, #1
 800c46e:	464a      	mov	r2, r9
 800c470:	4639      	mov	r1, r7
 800c472:	4630      	mov	r0, r6
 800c474:	47c0      	blx	r8
 800c476:	3001      	adds	r0, #1
 800c478:	d09a      	beq.n	800c3b0 <_printf_i+0x12c>
 800c47a:	3501      	adds	r5, #1
 800c47c:	68e3      	ldr	r3, [r4, #12]
 800c47e:	9a03      	ldr	r2, [sp, #12]
 800c480:	1a9b      	subs	r3, r3, r2
 800c482:	42ab      	cmp	r3, r5
 800c484:	dcf2      	bgt.n	800c46c <_printf_i+0x1e8>
 800c486:	e7eb      	b.n	800c460 <_printf_i+0x1dc>
 800c488:	2500      	movs	r5, #0
 800c48a:	f104 0919 	add.w	r9, r4, #25
 800c48e:	e7f5      	b.n	800c47c <_printf_i+0x1f8>
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1ac      	bne.n	800c3ee <_printf_i+0x16a>
 800c494:	7803      	ldrb	r3, [r0, #0]
 800c496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c49a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c49e:	e76c      	b.n	800c37a <_printf_i+0xf6>
 800c4a0:	080102ee 	.word	0x080102ee
 800c4a4:	080102ff 	.word	0x080102ff

0800c4a8 <_scanf_float>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	469a      	mov	sl, r3
 800c4ae:	688b      	ldr	r3, [r1, #8]
 800c4b0:	4616      	mov	r6, r2
 800c4b2:	1e5a      	subs	r2, r3, #1
 800c4b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c4b8:	b087      	sub	sp, #28
 800c4ba:	bf83      	ittte	hi
 800c4bc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c4c0:	189b      	addhi	r3, r3, r2
 800c4c2:	9301      	strhi	r3, [sp, #4]
 800c4c4:	2300      	movls	r3, #0
 800c4c6:	bf86      	itte	hi
 800c4c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c4cc:	608b      	strhi	r3, [r1, #8]
 800c4ce:	9301      	strls	r3, [sp, #4]
 800c4d0:	680b      	ldr	r3, [r1, #0]
 800c4d2:	4688      	mov	r8, r1
 800c4d4:	f04f 0b00 	mov.w	fp, #0
 800c4d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c4dc:	f848 3b1c 	str.w	r3, [r8], #28
 800c4e0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	4645      	mov	r5, r8
 800c4ea:	465a      	mov	r2, fp
 800c4ec:	46d9      	mov	r9, fp
 800c4ee:	f8cd b008 	str.w	fp, [sp, #8]
 800c4f2:	68a1      	ldr	r1, [r4, #8]
 800c4f4:	b181      	cbz	r1, 800c518 <_scanf_float+0x70>
 800c4f6:	6833      	ldr	r3, [r6, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b49      	cmp	r3, #73	; 0x49
 800c4fc:	d071      	beq.n	800c5e2 <_scanf_float+0x13a>
 800c4fe:	d84d      	bhi.n	800c59c <_scanf_float+0xf4>
 800c500:	2b39      	cmp	r3, #57	; 0x39
 800c502:	d840      	bhi.n	800c586 <_scanf_float+0xde>
 800c504:	2b31      	cmp	r3, #49	; 0x31
 800c506:	f080 8088 	bcs.w	800c61a <_scanf_float+0x172>
 800c50a:	2b2d      	cmp	r3, #45	; 0x2d
 800c50c:	f000 8090 	beq.w	800c630 <_scanf_float+0x188>
 800c510:	d815      	bhi.n	800c53e <_scanf_float+0x96>
 800c512:	2b2b      	cmp	r3, #43	; 0x2b
 800c514:	f000 808c 	beq.w	800c630 <_scanf_float+0x188>
 800c518:	f1b9 0f00 	cmp.w	r9, #0
 800c51c:	d003      	beq.n	800c526 <_scanf_float+0x7e>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	3a01      	subs	r2, #1
 800c528:	2a01      	cmp	r2, #1
 800c52a:	f200 80ea 	bhi.w	800c702 <_scanf_float+0x25a>
 800c52e:	4545      	cmp	r5, r8
 800c530:	f200 80dc 	bhi.w	800c6ec <_scanf_float+0x244>
 800c534:	2601      	movs	r6, #1
 800c536:	4630      	mov	r0, r6
 800c538:	b007      	add	sp, #28
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	2b2e      	cmp	r3, #46	; 0x2e
 800c540:	f000 809f 	beq.w	800c682 <_scanf_float+0x1da>
 800c544:	2b30      	cmp	r3, #48	; 0x30
 800c546:	d1e7      	bne.n	800c518 <_scanf_float+0x70>
 800c548:	6820      	ldr	r0, [r4, #0]
 800c54a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c54e:	d064      	beq.n	800c61a <_scanf_float+0x172>
 800c550:	9b01      	ldr	r3, [sp, #4]
 800c552:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c556:	6020      	str	r0, [r4, #0]
 800c558:	f109 0901 	add.w	r9, r9, #1
 800c55c:	b11b      	cbz	r3, 800c566 <_scanf_float+0xbe>
 800c55e:	3b01      	subs	r3, #1
 800c560:	3101      	adds	r1, #1
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	60a1      	str	r1, [r4, #8]
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	3b01      	subs	r3, #1
 800c56a:	60a3      	str	r3, [r4, #8]
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	3301      	adds	r3, #1
 800c570:	6123      	str	r3, [r4, #16]
 800c572:	6873      	ldr	r3, [r6, #4]
 800c574:	3b01      	subs	r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	6073      	str	r3, [r6, #4]
 800c57a:	f340 80ac 	ble.w	800c6d6 <_scanf_float+0x22e>
 800c57e:	6833      	ldr	r3, [r6, #0]
 800c580:	3301      	adds	r3, #1
 800c582:	6033      	str	r3, [r6, #0]
 800c584:	e7b5      	b.n	800c4f2 <_scanf_float+0x4a>
 800c586:	2b45      	cmp	r3, #69	; 0x45
 800c588:	f000 8085 	beq.w	800c696 <_scanf_float+0x1ee>
 800c58c:	2b46      	cmp	r3, #70	; 0x46
 800c58e:	d06a      	beq.n	800c666 <_scanf_float+0x1be>
 800c590:	2b41      	cmp	r3, #65	; 0x41
 800c592:	d1c1      	bne.n	800c518 <_scanf_float+0x70>
 800c594:	2a01      	cmp	r2, #1
 800c596:	d1bf      	bne.n	800c518 <_scanf_float+0x70>
 800c598:	2202      	movs	r2, #2
 800c59a:	e046      	b.n	800c62a <_scanf_float+0x182>
 800c59c:	2b65      	cmp	r3, #101	; 0x65
 800c59e:	d07a      	beq.n	800c696 <_scanf_float+0x1ee>
 800c5a0:	d818      	bhi.n	800c5d4 <_scanf_float+0x12c>
 800c5a2:	2b54      	cmp	r3, #84	; 0x54
 800c5a4:	d066      	beq.n	800c674 <_scanf_float+0x1cc>
 800c5a6:	d811      	bhi.n	800c5cc <_scanf_float+0x124>
 800c5a8:	2b4e      	cmp	r3, #78	; 0x4e
 800c5aa:	d1b5      	bne.n	800c518 <_scanf_float+0x70>
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	d146      	bne.n	800c63e <_scanf_float+0x196>
 800c5b0:	f1b9 0f00 	cmp.w	r9, #0
 800c5b4:	d145      	bne.n	800c642 <_scanf_float+0x19a>
 800c5b6:	6821      	ldr	r1, [r4, #0]
 800c5b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c5bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c5c0:	d13f      	bne.n	800c642 <_scanf_float+0x19a>
 800c5c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c5c6:	6021      	str	r1, [r4, #0]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	e02e      	b.n	800c62a <_scanf_float+0x182>
 800c5cc:	2b59      	cmp	r3, #89	; 0x59
 800c5ce:	d01e      	beq.n	800c60e <_scanf_float+0x166>
 800c5d0:	2b61      	cmp	r3, #97	; 0x61
 800c5d2:	e7de      	b.n	800c592 <_scanf_float+0xea>
 800c5d4:	2b6e      	cmp	r3, #110	; 0x6e
 800c5d6:	d0e9      	beq.n	800c5ac <_scanf_float+0x104>
 800c5d8:	d815      	bhi.n	800c606 <_scanf_float+0x15e>
 800c5da:	2b66      	cmp	r3, #102	; 0x66
 800c5dc:	d043      	beq.n	800c666 <_scanf_float+0x1be>
 800c5de:	2b69      	cmp	r3, #105	; 0x69
 800c5e0:	d19a      	bne.n	800c518 <_scanf_float+0x70>
 800c5e2:	f1bb 0f00 	cmp.w	fp, #0
 800c5e6:	d138      	bne.n	800c65a <_scanf_float+0x1b2>
 800c5e8:	f1b9 0f00 	cmp.w	r9, #0
 800c5ec:	d197      	bne.n	800c51e <_scanf_float+0x76>
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c5f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c5f8:	d195      	bne.n	800c526 <_scanf_float+0x7e>
 800c5fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c5fe:	6021      	str	r1, [r4, #0]
 800c600:	f04f 0b01 	mov.w	fp, #1
 800c604:	e011      	b.n	800c62a <_scanf_float+0x182>
 800c606:	2b74      	cmp	r3, #116	; 0x74
 800c608:	d034      	beq.n	800c674 <_scanf_float+0x1cc>
 800c60a:	2b79      	cmp	r3, #121	; 0x79
 800c60c:	d184      	bne.n	800c518 <_scanf_float+0x70>
 800c60e:	f1bb 0f07 	cmp.w	fp, #7
 800c612:	d181      	bne.n	800c518 <_scanf_float+0x70>
 800c614:	f04f 0b08 	mov.w	fp, #8
 800c618:	e007      	b.n	800c62a <_scanf_float+0x182>
 800c61a:	eb12 0f0b 	cmn.w	r2, fp
 800c61e:	f47f af7b 	bne.w	800c518 <_scanf_float+0x70>
 800c622:	6821      	ldr	r1, [r4, #0]
 800c624:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c628:	6021      	str	r1, [r4, #0]
 800c62a:	702b      	strb	r3, [r5, #0]
 800c62c:	3501      	adds	r5, #1
 800c62e:	e79a      	b.n	800c566 <_scanf_float+0xbe>
 800c630:	6821      	ldr	r1, [r4, #0]
 800c632:	0608      	lsls	r0, r1, #24
 800c634:	f57f af70 	bpl.w	800c518 <_scanf_float+0x70>
 800c638:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c63c:	e7f4      	b.n	800c628 <_scanf_float+0x180>
 800c63e:	2a02      	cmp	r2, #2
 800c640:	d047      	beq.n	800c6d2 <_scanf_float+0x22a>
 800c642:	f1bb 0f01 	cmp.w	fp, #1
 800c646:	d003      	beq.n	800c650 <_scanf_float+0x1a8>
 800c648:	f1bb 0f04 	cmp.w	fp, #4
 800c64c:	f47f af64 	bne.w	800c518 <_scanf_float+0x70>
 800c650:	f10b 0b01 	add.w	fp, fp, #1
 800c654:	fa5f fb8b 	uxtb.w	fp, fp
 800c658:	e7e7      	b.n	800c62a <_scanf_float+0x182>
 800c65a:	f1bb 0f03 	cmp.w	fp, #3
 800c65e:	d0f7      	beq.n	800c650 <_scanf_float+0x1a8>
 800c660:	f1bb 0f05 	cmp.w	fp, #5
 800c664:	e7f2      	b.n	800c64c <_scanf_float+0x1a4>
 800c666:	f1bb 0f02 	cmp.w	fp, #2
 800c66a:	f47f af55 	bne.w	800c518 <_scanf_float+0x70>
 800c66e:	f04f 0b03 	mov.w	fp, #3
 800c672:	e7da      	b.n	800c62a <_scanf_float+0x182>
 800c674:	f1bb 0f06 	cmp.w	fp, #6
 800c678:	f47f af4e 	bne.w	800c518 <_scanf_float+0x70>
 800c67c:	f04f 0b07 	mov.w	fp, #7
 800c680:	e7d3      	b.n	800c62a <_scanf_float+0x182>
 800c682:	6821      	ldr	r1, [r4, #0]
 800c684:	0588      	lsls	r0, r1, #22
 800c686:	f57f af47 	bpl.w	800c518 <_scanf_float+0x70>
 800c68a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c68e:	6021      	str	r1, [r4, #0]
 800c690:	f8cd 9008 	str.w	r9, [sp, #8]
 800c694:	e7c9      	b.n	800c62a <_scanf_float+0x182>
 800c696:	6821      	ldr	r1, [r4, #0]
 800c698:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c69c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c6a0:	d006      	beq.n	800c6b0 <_scanf_float+0x208>
 800c6a2:	0548      	lsls	r0, r1, #21
 800c6a4:	f57f af38 	bpl.w	800c518 <_scanf_float+0x70>
 800c6a8:	f1b9 0f00 	cmp.w	r9, #0
 800c6ac:	f43f af3b 	beq.w	800c526 <_scanf_float+0x7e>
 800c6b0:	0588      	lsls	r0, r1, #22
 800c6b2:	bf58      	it	pl
 800c6b4:	9802      	ldrpl	r0, [sp, #8]
 800c6b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c6ba:	bf58      	it	pl
 800c6bc:	eba9 0000 	subpl.w	r0, r9, r0
 800c6c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c6c4:	bf58      	it	pl
 800c6c6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800c6ca:	6021      	str	r1, [r4, #0]
 800c6cc:	f04f 0900 	mov.w	r9, #0
 800c6d0:	e7ab      	b.n	800c62a <_scanf_float+0x182>
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	e7a9      	b.n	800c62a <_scanf_float+0x182>
 800c6d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6da:	9205      	str	r2, [sp, #20]
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4638      	mov	r0, r7
 800c6e0:	4798      	blx	r3
 800c6e2:	9a05      	ldr	r2, [sp, #20]
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f43f af04 	beq.w	800c4f2 <_scanf_float+0x4a>
 800c6ea:	e715      	b.n	800c518 <_scanf_float+0x70>
 800c6ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	4798      	blx	r3
 800c6fa:	6923      	ldr	r3, [r4, #16]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	e715      	b.n	800c52e <_scanf_float+0x86>
 800c702:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c706:	2b06      	cmp	r3, #6
 800c708:	d80a      	bhi.n	800c720 <_scanf_float+0x278>
 800c70a:	f1bb 0f02 	cmp.w	fp, #2
 800c70e:	d968      	bls.n	800c7e2 <_scanf_float+0x33a>
 800c710:	f1ab 0b03 	sub.w	fp, fp, #3
 800c714:	fa5f fb8b 	uxtb.w	fp, fp
 800c718:	eba5 0b0b 	sub.w	fp, r5, fp
 800c71c:	455d      	cmp	r5, fp
 800c71e:	d14b      	bne.n	800c7b8 <_scanf_float+0x310>
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	05da      	lsls	r2, r3, #23
 800c724:	d51f      	bpl.n	800c766 <_scanf_float+0x2be>
 800c726:	055b      	lsls	r3, r3, #21
 800c728:	d468      	bmi.n	800c7fc <_scanf_float+0x354>
 800c72a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c72e:	6923      	ldr	r3, [r4, #16]
 800c730:	2965      	cmp	r1, #101	; 0x65
 800c732:	f103 33ff 	add.w	r3, r3, #4294967295
 800c736:	f105 3bff 	add.w	fp, r5, #4294967295
 800c73a:	6123      	str	r3, [r4, #16]
 800c73c:	d00d      	beq.n	800c75a <_scanf_float+0x2b2>
 800c73e:	2945      	cmp	r1, #69	; 0x45
 800c740:	d00b      	beq.n	800c75a <_scanf_float+0x2b2>
 800c742:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c746:	4632      	mov	r2, r6
 800c748:	4638      	mov	r0, r7
 800c74a:	4798      	blx	r3
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c752:	3b01      	subs	r3, #1
 800c754:	f1a5 0b02 	sub.w	fp, r5, #2
 800c758:	6123      	str	r3, [r4, #16]
 800c75a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c75e:	4632      	mov	r2, r6
 800c760:	4638      	mov	r0, r7
 800c762:	4798      	blx	r3
 800c764:	465d      	mov	r5, fp
 800c766:	6826      	ldr	r6, [r4, #0]
 800c768:	f016 0610 	ands.w	r6, r6, #16
 800c76c:	d17a      	bne.n	800c864 <_scanf_float+0x3bc>
 800c76e:	702e      	strb	r6, [r5, #0]
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c77a:	d142      	bne.n	800c802 <_scanf_float+0x35a>
 800c77c:	9b02      	ldr	r3, [sp, #8]
 800c77e:	eba9 0303 	sub.w	r3, r9, r3
 800c782:	425a      	negs	r2, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	d149      	bne.n	800c81c <_scanf_float+0x374>
 800c788:	2200      	movs	r2, #0
 800c78a:	4641      	mov	r1, r8
 800c78c:	4638      	mov	r0, r7
 800c78e:	f000 ff1f 	bl	800d5d0 <_strtod_r>
 800c792:	6825      	ldr	r5, [r4, #0]
 800c794:	f8da 3000 	ldr.w	r3, [sl]
 800c798:	f015 0f02 	tst.w	r5, #2
 800c79c:	f103 0204 	add.w	r2, r3, #4
 800c7a0:	ec59 8b10 	vmov	r8, r9, d0
 800c7a4:	f8ca 2000 	str.w	r2, [sl]
 800c7a8:	d043      	beq.n	800c832 <_scanf_float+0x38a>
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	e9c3 8900 	strd	r8, r9, [r3]
 800c7b0:	68e3      	ldr	r3, [r4, #12]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	60e3      	str	r3, [r4, #12]
 800c7b6:	e6be      	b.n	800c536 <_scanf_float+0x8e>
 800c7b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	4798      	blx	r3
 800c7c6:	6923      	ldr	r3, [r4, #16]
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	e7a6      	b.n	800c71c <_scanf_float+0x274>
 800c7ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7d2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c7d6:	4632      	mov	r2, r6
 800c7d8:	4638      	mov	r0, r7
 800c7da:	4798      	blx	r3
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	6123      	str	r3, [r4, #16]
 800c7e2:	4545      	cmp	r5, r8
 800c7e4:	d8f3      	bhi.n	800c7ce <_scanf_float+0x326>
 800c7e6:	e6a5      	b.n	800c534 <_scanf_float+0x8c>
 800c7e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	4798      	blx	r3
 800c7f6:	6923      	ldr	r3, [r4, #16]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	6123      	str	r3, [r4, #16]
 800c7fc:	4545      	cmp	r5, r8
 800c7fe:	d8f3      	bhi.n	800c7e8 <_scanf_float+0x340>
 800c800:	e698      	b.n	800c534 <_scanf_float+0x8c>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d0bf      	beq.n	800c788 <_scanf_float+0x2e0>
 800c808:	9904      	ldr	r1, [sp, #16]
 800c80a:	230a      	movs	r3, #10
 800c80c:	4632      	mov	r2, r6
 800c80e:	3101      	adds	r1, #1
 800c810:	4638      	mov	r0, r7
 800c812:	f000 ff69 	bl	800d6e8 <_strtol_r>
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	9d04      	ldr	r5, [sp, #16]
 800c81a:	1ac2      	subs	r2, r0, r3
 800c81c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c820:	429d      	cmp	r5, r3
 800c822:	bf28      	it	cs
 800c824:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c828:	490f      	ldr	r1, [pc, #60]	; (800c868 <_scanf_float+0x3c0>)
 800c82a:	4628      	mov	r0, r5
 800c82c:	f000 f8a0 	bl	800c970 <siprintf>
 800c830:	e7aa      	b.n	800c788 <_scanf_float+0x2e0>
 800c832:	f015 0504 	ands.w	r5, r5, #4
 800c836:	d1b8      	bne.n	800c7aa <_scanf_float+0x302>
 800c838:	681f      	ldr	r7, [r3, #0]
 800c83a:	ee10 2a10 	vmov	r2, s0
 800c83e:	464b      	mov	r3, r9
 800c840:	ee10 0a10 	vmov	r0, s0
 800c844:	4649      	mov	r1, r9
 800c846:	f7f4 f971 	bl	8000b2c <__aeabi_dcmpun>
 800c84a:	b128      	cbz	r0, 800c858 <_scanf_float+0x3b0>
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 f889 	bl	800c964 <nanf>
 800c852:	ed87 0a00 	vstr	s0, [r7]
 800c856:	e7ab      	b.n	800c7b0 <_scanf_float+0x308>
 800c858:	4640      	mov	r0, r8
 800c85a:	4649      	mov	r1, r9
 800c85c:	f7f4 f9c4 	bl	8000be8 <__aeabi_d2f>
 800c860:	6038      	str	r0, [r7, #0]
 800c862:	e7a5      	b.n	800c7b0 <_scanf_float+0x308>
 800c864:	2600      	movs	r6, #0
 800c866:	e666      	b.n	800c536 <_scanf_float+0x8e>
 800c868:	08010310 	.word	0x08010310

0800c86c <iprintf>:
 800c86c:	b40f      	push	{r0, r1, r2, r3}
 800c86e:	4b0a      	ldr	r3, [pc, #40]	; (800c898 <iprintf+0x2c>)
 800c870:	b513      	push	{r0, r1, r4, lr}
 800c872:	681c      	ldr	r4, [r3, #0]
 800c874:	b124      	cbz	r4, 800c880 <iprintf+0x14>
 800c876:	69a3      	ldr	r3, [r4, #24]
 800c878:	b913      	cbnz	r3, 800c880 <iprintf+0x14>
 800c87a:	4620      	mov	r0, r4
 800c87c:	f001 ff3c 	bl	800e6f8 <__sinit>
 800c880:	ab05      	add	r3, sp, #20
 800c882:	9a04      	ldr	r2, [sp, #16]
 800c884:	68a1      	ldr	r1, [r4, #8]
 800c886:	9301      	str	r3, [sp, #4]
 800c888:	4620      	mov	r0, r4
 800c88a:	f003 f9a9 	bl	800fbe0 <_vfiprintf_r>
 800c88e:	b002      	add	sp, #8
 800c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c894:	b004      	add	sp, #16
 800c896:	4770      	bx	lr
 800c898:	20000040 	.word	0x20000040

0800c89c <_puts_r>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	460e      	mov	r6, r1
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	b118      	cbz	r0, 800c8ac <_puts_r+0x10>
 800c8a4:	6983      	ldr	r3, [r0, #24]
 800c8a6:	b90b      	cbnz	r3, 800c8ac <_puts_r+0x10>
 800c8a8:	f001 ff26 	bl	800e6f8 <__sinit>
 800c8ac:	69ab      	ldr	r3, [r5, #24]
 800c8ae:	68ac      	ldr	r4, [r5, #8]
 800c8b0:	b913      	cbnz	r3, 800c8b8 <_puts_r+0x1c>
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f001 ff20 	bl	800e6f8 <__sinit>
 800c8b8:	4b23      	ldr	r3, [pc, #140]	; (800c948 <_puts_r+0xac>)
 800c8ba:	429c      	cmp	r4, r3
 800c8bc:	d117      	bne.n	800c8ee <_puts_r+0x52>
 800c8be:	686c      	ldr	r4, [r5, #4]
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	071b      	lsls	r3, r3, #28
 800c8c4:	d51d      	bpl.n	800c902 <_puts_r+0x66>
 800c8c6:	6923      	ldr	r3, [r4, #16]
 800c8c8:	b1db      	cbz	r3, 800c902 <_puts_r+0x66>
 800c8ca:	3e01      	subs	r6, #1
 800c8cc:	68a3      	ldr	r3, [r4, #8]
 800c8ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	60a3      	str	r3, [r4, #8]
 800c8d6:	b9e9      	cbnz	r1, 800c914 <_puts_r+0x78>
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da2e      	bge.n	800c93a <_puts_r+0x9e>
 800c8dc:	4622      	mov	r2, r4
 800c8de:	210a      	movs	r1, #10
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f000 ff13 	bl	800d70c <__swbuf_r>
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	d011      	beq.n	800c90e <_puts_r+0x72>
 800c8ea:	200a      	movs	r0, #10
 800c8ec:	e011      	b.n	800c912 <_puts_r+0x76>
 800c8ee:	4b17      	ldr	r3, [pc, #92]	; (800c94c <_puts_r+0xb0>)
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	d101      	bne.n	800c8f8 <_puts_r+0x5c>
 800c8f4:	68ac      	ldr	r4, [r5, #8]
 800c8f6:	e7e3      	b.n	800c8c0 <_puts_r+0x24>
 800c8f8:	4b15      	ldr	r3, [pc, #84]	; (800c950 <_puts_r+0xb4>)
 800c8fa:	429c      	cmp	r4, r3
 800c8fc:	bf08      	it	eq
 800c8fe:	68ec      	ldreq	r4, [r5, #12]
 800c900:	e7de      	b.n	800c8c0 <_puts_r+0x24>
 800c902:	4621      	mov	r1, r4
 800c904:	4628      	mov	r0, r5
 800c906:	f000 ff53 	bl	800d7b0 <__swsetup_r>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d0dd      	beq.n	800c8ca <_puts_r+0x2e>
 800c90e:	f04f 30ff 	mov.w	r0, #4294967295
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	2b00      	cmp	r3, #0
 800c916:	da04      	bge.n	800c922 <_puts_r+0x86>
 800c918:	69a2      	ldr	r2, [r4, #24]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	dc06      	bgt.n	800c92c <_puts_r+0x90>
 800c91e:	290a      	cmp	r1, #10
 800c920:	d004      	beq.n	800c92c <_puts_r+0x90>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	6022      	str	r2, [r4, #0]
 800c928:	7019      	strb	r1, [r3, #0]
 800c92a:	e7cf      	b.n	800c8cc <_puts_r+0x30>
 800c92c:	4622      	mov	r2, r4
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 feec 	bl	800d70c <__swbuf_r>
 800c934:	3001      	adds	r0, #1
 800c936:	d1c9      	bne.n	800c8cc <_puts_r+0x30>
 800c938:	e7e9      	b.n	800c90e <_puts_r+0x72>
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	200a      	movs	r0, #10
 800c93e:	1c5a      	adds	r2, r3, #1
 800c940:	6022      	str	r2, [r4, #0]
 800c942:	7018      	strb	r0, [r3, #0]
 800c944:	e7e5      	b.n	800c912 <_puts_r+0x76>
 800c946:	bf00      	nop
 800c948:	08010398 	.word	0x08010398
 800c94c:	080103b8 	.word	0x080103b8
 800c950:	08010378 	.word	0x08010378

0800c954 <puts>:
 800c954:	4b02      	ldr	r3, [pc, #8]	; (800c960 <puts+0xc>)
 800c956:	4601      	mov	r1, r0
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	f7ff bf9f 	b.w	800c89c <_puts_r>
 800c95e:	bf00      	nop
 800c960:	20000040 	.word	0x20000040

0800c964 <nanf>:
 800c964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c96c <nanf+0x8>
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	7fc00000 	.word	0x7fc00000

0800c970 <siprintf>:
 800c970:	b40e      	push	{r1, r2, r3}
 800c972:	b500      	push	{lr}
 800c974:	b09c      	sub	sp, #112	; 0x70
 800c976:	ab1d      	add	r3, sp, #116	; 0x74
 800c978:	9002      	str	r0, [sp, #8]
 800c97a:	9006      	str	r0, [sp, #24]
 800c97c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c980:	4809      	ldr	r0, [pc, #36]	; (800c9a8 <siprintf+0x38>)
 800c982:	9107      	str	r1, [sp, #28]
 800c984:	9104      	str	r1, [sp, #16]
 800c986:	4909      	ldr	r1, [pc, #36]	; (800c9ac <siprintf+0x3c>)
 800c988:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98c:	9105      	str	r1, [sp, #20]
 800c98e:	6800      	ldr	r0, [r0, #0]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	a902      	add	r1, sp, #8
 800c994:	f003 f802 	bl	800f99c <_svfiprintf_r>
 800c998:	9b02      	ldr	r3, [sp, #8]
 800c99a:	2200      	movs	r2, #0
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	b01c      	add	sp, #112	; 0x70
 800c9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a4:	b003      	add	sp, #12
 800c9a6:	4770      	bx	lr
 800c9a8:	20000040 	.word	0x20000040
 800c9ac:	ffff0208 	.word	0xffff0208

0800c9b0 <sulp>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	ec45 4b10 	vmov	d0, r4, r5
 800c9ba:	4616      	mov	r6, r2
 800c9bc:	f002 fdaa 	bl	800f514 <__ulp>
 800c9c0:	ec51 0b10 	vmov	r0, r1, d0
 800c9c4:	b17e      	cbz	r6, 800c9e6 <sulp+0x36>
 800c9c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd09      	ble.n	800c9e6 <sulp+0x36>
 800c9d2:	051b      	lsls	r3, r3, #20
 800c9d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c9d8:	2400      	movs	r4, #0
 800c9da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c9de:	4622      	mov	r2, r4
 800c9e0:	462b      	mov	r3, r5
 800c9e2:	f7f3 fe09 	bl	80005f8 <__aeabi_dmul>
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}

0800c9e8 <_strtod_l>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	461f      	mov	r7, r3
 800c9ee:	b0a1      	sub	sp, #132	; 0x84
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	4681      	mov	r9, r0
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	460e      	mov	r6, r1
 800c9f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9fa:	931c      	str	r3, [sp, #112]	; 0x70
 800c9fc:	f002 fa2f 	bl	800ee5e <__localeconv_l>
 800ca00:	4680      	mov	r8, r0
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	f7f3 fbe4 	bl	80001d0 <strlen>
 800ca08:	f04f 0a00 	mov.w	sl, #0
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	f04f 0b00 	mov.w	fp, #0
 800ca12:	961b      	str	r6, [sp, #108]	; 0x6c
 800ca14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca16:	781a      	ldrb	r2, [r3, #0]
 800ca18:	2a0d      	cmp	r2, #13
 800ca1a:	d832      	bhi.n	800ca82 <_strtod_l+0x9a>
 800ca1c:	2a09      	cmp	r2, #9
 800ca1e:	d236      	bcs.n	800ca8e <_strtod_l+0xa6>
 800ca20:	2a00      	cmp	r2, #0
 800ca22:	d03e      	beq.n	800caa2 <_strtod_l+0xba>
 800ca24:	2300      	movs	r3, #0
 800ca26:	930d      	str	r3, [sp, #52]	; 0x34
 800ca28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ca2a:	782b      	ldrb	r3, [r5, #0]
 800ca2c:	2b30      	cmp	r3, #48	; 0x30
 800ca2e:	f040 80ac 	bne.w	800cb8a <_strtod_l+0x1a2>
 800ca32:	786b      	ldrb	r3, [r5, #1]
 800ca34:	2b58      	cmp	r3, #88	; 0x58
 800ca36:	d001      	beq.n	800ca3c <_strtod_l+0x54>
 800ca38:	2b78      	cmp	r3, #120	; 0x78
 800ca3a:	d167      	bne.n	800cb0c <_strtod_l+0x124>
 800ca3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	ab1c      	add	r3, sp, #112	; 0x70
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	9702      	str	r7, [sp, #8]
 800ca46:	ab1d      	add	r3, sp, #116	; 0x74
 800ca48:	4a88      	ldr	r2, [pc, #544]	; (800cc6c <_strtod_l+0x284>)
 800ca4a:	a91b      	add	r1, sp, #108	; 0x6c
 800ca4c:	4648      	mov	r0, r9
 800ca4e:	f001 ff2c 	bl	800e8aa <__gethex>
 800ca52:	f010 0407 	ands.w	r4, r0, #7
 800ca56:	4606      	mov	r6, r0
 800ca58:	d005      	beq.n	800ca66 <_strtod_l+0x7e>
 800ca5a:	2c06      	cmp	r4, #6
 800ca5c:	d12b      	bne.n	800cab6 <_strtod_l+0xce>
 800ca5e:	3501      	adds	r5, #1
 800ca60:	2300      	movs	r3, #0
 800ca62:	951b      	str	r5, [sp, #108]	; 0x6c
 800ca64:	930d      	str	r3, [sp, #52]	; 0x34
 800ca66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f040 859a 	bne.w	800d5a2 <_strtod_l+0xbba>
 800ca6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca70:	b1e3      	cbz	r3, 800caac <_strtod_l+0xc4>
 800ca72:	4652      	mov	r2, sl
 800ca74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca78:	ec43 2b10 	vmov	d0, r2, r3
 800ca7c:	b021      	add	sp, #132	; 0x84
 800ca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca82:	2a2b      	cmp	r2, #43	; 0x2b
 800ca84:	d015      	beq.n	800cab2 <_strtod_l+0xca>
 800ca86:	2a2d      	cmp	r2, #45	; 0x2d
 800ca88:	d004      	beq.n	800ca94 <_strtod_l+0xac>
 800ca8a:	2a20      	cmp	r2, #32
 800ca8c:	d1ca      	bne.n	800ca24 <_strtod_l+0x3c>
 800ca8e:	3301      	adds	r3, #1
 800ca90:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca92:	e7bf      	b.n	800ca14 <_strtod_l+0x2c>
 800ca94:	2201      	movs	r2, #1
 800ca96:	920d      	str	r2, [sp, #52]	; 0x34
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca9c:	785b      	ldrb	r3, [r3, #1]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1c2      	bne.n	800ca28 <_strtod_l+0x40>
 800caa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caa4:	961b      	str	r6, [sp, #108]	; 0x6c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f040 8579 	bne.w	800d59e <_strtod_l+0xbb6>
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	e7e2      	b.n	800ca78 <_strtod_l+0x90>
 800cab2:	2200      	movs	r2, #0
 800cab4:	e7ef      	b.n	800ca96 <_strtod_l+0xae>
 800cab6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cab8:	b13a      	cbz	r2, 800caca <_strtod_l+0xe2>
 800caba:	2135      	movs	r1, #53	; 0x35
 800cabc:	a81e      	add	r0, sp, #120	; 0x78
 800cabe:	f002 fe21 	bl	800f704 <__copybits>
 800cac2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cac4:	4648      	mov	r0, r9
 800cac6:	f002 fa8d 	bl	800efe4 <_Bfree>
 800caca:	3c01      	subs	r4, #1
 800cacc:	2c04      	cmp	r4, #4
 800cace:	d806      	bhi.n	800cade <_strtod_l+0xf6>
 800cad0:	e8df f004 	tbb	[pc, r4]
 800cad4:	1714030a 	.word	0x1714030a
 800cad8:	0a          	.byte	0x0a
 800cad9:	00          	.byte	0x00
 800cada:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800cade:	0730      	lsls	r0, r6, #28
 800cae0:	d5c1      	bpl.n	800ca66 <_strtod_l+0x7e>
 800cae2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cae6:	e7be      	b.n	800ca66 <_strtod_l+0x7e>
 800cae8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800caec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800caee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800caf2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800caf6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cafa:	e7f0      	b.n	800cade <_strtod_l+0xf6>
 800cafc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cc70 <_strtod_l+0x288>
 800cb00:	e7ed      	b.n	800cade <_strtod_l+0xf6>
 800cb02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cb06:	f04f 3aff 	mov.w	sl, #4294967295
 800cb0a:	e7e8      	b.n	800cade <_strtod_l+0xf6>
 800cb0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	921b      	str	r2, [sp, #108]	; 0x6c
 800cb12:	785b      	ldrb	r3, [r3, #1]
 800cb14:	2b30      	cmp	r3, #48	; 0x30
 800cb16:	d0f9      	beq.n	800cb0c <_strtod_l+0x124>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d0a4      	beq.n	800ca66 <_strtod_l+0x7e>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	2500      	movs	r5, #0
 800cb20:	9306      	str	r3, [sp, #24]
 800cb22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb24:	9308      	str	r3, [sp, #32]
 800cb26:	9507      	str	r5, [sp, #28]
 800cb28:	9505      	str	r5, [sp, #20]
 800cb2a:	220a      	movs	r2, #10
 800cb2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cb2e:	7807      	ldrb	r7, [r0, #0]
 800cb30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cb34:	b2d9      	uxtb	r1, r3
 800cb36:	2909      	cmp	r1, #9
 800cb38:	d929      	bls.n	800cb8e <_strtod_l+0x1a6>
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	f8d8 1000 	ldr.w	r1, [r8]
 800cb40:	f003 f9b7 	bl	800feb2 <strncmp>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d031      	beq.n	800cbac <_strtod_l+0x1c4>
 800cb48:	2000      	movs	r0, #0
 800cb4a:	9c05      	ldr	r4, [sp, #20]
 800cb4c:	9004      	str	r0, [sp, #16]
 800cb4e:	463b      	mov	r3, r7
 800cb50:	4602      	mov	r2, r0
 800cb52:	2b65      	cmp	r3, #101	; 0x65
 800cb54:	d001      	beq.n	800cb5a <_strtod_l+0x172>
 800cb56:	2b45      	cmp	r3, #69	; 0x45
 800cb58:	d114      	bne.n	800cb84 <_strtod_l+0x19c>
 800cb5a:	b924      	cbnz	r4, 800cb66 <_strtod_l+0x17e>
 800cb5c:	b910      	cbnz	r0, 800cb64 <_strtod_l+0x17c>
 800cb5e:	9b06      	ldr	r3, [sp, #24]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d09e      	beq.n	800caa2 <_strtod_l+0xba>
 800cb64:	2400      	movs	r4, #0
 800cb66:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800cb68:	1c73      	adds	r3, r6, #1
 800cb6a:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb6c:	7873      	ldrb	r3, [r6, #1]
 800cb6e:	2b2b      	cmp	r3, #43	; 0x2b
 800cb70:	d078      	beq.n	800cc64 <_strtod_l+0x27c>
 800cb72:	2b2d      	cmp	r3, #45	; 0x2d
 800cb74:	d070      	beq.n	800cc58 <_strtod_l+0x270>
 800cb76:	f04f 0c00 	mov.w	ip, #0
 800cb7a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800cb7e:	2f09      	cmp	r7, #9
 800cb80:	d97c      	bls.n	800cc7c <_strtod_l+0x294>
 800cb82:	961b      	str	r6, [sp, #108]	; 0x6c
 800cb84:	f04f 0e00 	mov.w	lr, #0
 800cb88:	e09a      	b.n	800ccc0 <_strtod_l+0x2d8>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e7c7      	b.n	800cb1e <_strtod_l+0x136>
 800cb8e:	9905      	ldr	r1, [sp, #20]
 800cb90:	2908      	cmp	r1, #8
 800cb92:	bfdd      	ittte	le
 800cb94:	9907      	ldrle	r1, [sp, #28]
 800cb96:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb9a:	9307      	strle	r3, [sp, #28]
 800cb9c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800cba0:	9b05      	ldr	r3, [sp, #20]
 800cba2:	3001      	adds	r0, #1
 800cba4:	3301      	adds	r3, #1
 800cba6:	9305      	str	r3, [sp, #20]
 800cba8:	901b      	str	r0, [sp, #108]	; 0x6c
 800cbaa:	e7bf      	b.n	800cb2c <_strtod_l+0x144>
 800cbac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbae:	191a      	adds	r2, r3, r4
 800cbb0:	921b      	str	r2, [sp, #108]	; 0x6c
 800cbb2:	9a05      	ldr	r2, [sp, #20]
 800cbb4:	5d1b      	ldrb	r3, [r3, r4]
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	d037      	beq.n	800cc2a <_strtod_l+0x242>
 800cbba:	9c05      	ldr	r4, [sp, #20]
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cbc2:	2909      	cmp	r1, #9
 800cbc4:	d913      	bls.n	800cbee <_strtod_l+0x206>
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	9104      	str	r1, [sp, #16]
 800cbca:	e7c2      	b.n	800cb52 <_strtod_l+0x16a>
 800cbcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	921b      	str	r2, [sp, #108]	; 0x6c
 800cbd2:	785b      	ldrb	r3, [r3, #1]
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	2b30      	cmp	r3, #48	; 0x30
 800cbd8:	d0f8      	beq.n	800cbcc <_strtod_l+0x1e4>
 800cbda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cbde:	2a08      	cmp	r2, #8
 800cbe0:	f200 84e4 	bhi.w	800d5ac <_strtod_l+0xbc4>
 800cbe4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cbe6:	9208      	str	r2, [sp, #32]
 800cbe8:	4602      	mov	r2, r0
 800cbea:	2000      	movs	r0, #0
 800cbec:	4604      	mov	r4, r0
 800cbee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800cbf2:	f100 0101 	add.w	r1, r0, #1
 800cbf6:	d012      	beq.n	800cc1e <_strtod_l+0x236>
 800cbf8:	440a      	add	r2, r1
 800cbfa:	eb00 0c04 	add.w	ip, r0, r4
 800cbfe:	4621      	mov	r1, r4
 800cc00:	270a      	movs	r7, #10
 800cc02:	458c      	cmp	ip, r1
 800cc04:	d113      	bne.n	800cc2e <_strtod_l+0x246>
 800cc06:	1821      	adds	r1, r4, r0
 800cc08:	2908      	cmp	r1, #8
 800cc0a:	f104 0401 	add.w	r4, r4, #1
 800cc0e:	4404      	add	r4, r0
 800cc10:	dc19      	bgt.n	800cc46 <_strtod_l+0x25e>
 800cc12:	9b07      	ldr	r3, [sp, #28]
 800cc14:	210a      	movs	r1, #10
 800cc16:	fb01 e303 	mla	r3, r1, r3, lr
 800cc1a:	9307      	str	r3, [sp, #28]
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc20:	1c58      	adds	r0, r3, #1
 800cc22:	901b      	str	r0, [sp, #108]	; 0x6c
 800cc24:	785b      	ldrb	r3, [r3, #1]
 800cc26:	4608      	mov	r0, r1
 800cc28:	e7c9      	b.n	800cbbe <_strtod_l+0x1d6>
 800cc2a:	9805      	ldr	r0, [sp, #20]
 800cc2c:	e7d3      	b.n	800cbd6 <_strtod_l+0x1ee>
 800cc2e:	2908      	cmp	r1, #8
 800cc30:	f101 0101 	add.w	r1, r1, #1
 800cc34:	dc03      	bgt.n	800cc3e <_strtod_l+0x256>
 800cc36:	9b07      	ldr	r3, [sp, #28]
 800cc38:	437b      	muls	r3, r7
 800cc3a:	9307      	str	r3, [sp, #28]
 800cc3c:	e7e1      	b.n	800cc02 <_strtod_l+0x21a>
 800cc3e:	2910      	cmp	r1, #16
 800cc40:	bfd8      	it	le
 800cc42:	437d      	mulle	r5, r7
 800cc44:	e7dd      	b.n	800cc02 <_strtod_l+0x21a>
 800cc46:	2c10      	cmp	r4, #16
 800cc48:	bfdc      	itt	le
 800cc4a:	210a      	movle	r1, #10
 800cc4c:	fb01 e505 	mlale	r5, r1, r5, lr
 800cc50:	e7e4      	b.n	800cc1c <_strtod_l+0x234>
 800cc52:	2301      	movs	r3, #1
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	e781      	b.n	800cb5c <_strtod_l+0x174>
 800cc58:	f04f 0c01 	mov.w	ip, #1
 800cc5c:	1cb3      	adds	r3, r6, #2
 800cc5e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc60:	78b3      	ldrb	r3, [r6, #2]
 800cc62:	e78a      	b.n	800cb7a <_strtod_l+0x192>
 800cc64:	f04f 0c00 	mov.w	ip, #0
 800cc68:	e7f8      	b.n	800cc5c <_strtod_l+0x274>
 800cc6a:	bf00      	nop
 800cc6c:	08010318 	.word	0x08010318
 800cc70:	7ff00000 	.word	0x7ff00000
 800cc74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc76:	1c5f      	adds	r7, r3, #1
 800cc78:	971b      	str	r7, [sp, #108]	; 0x6c
 800cc7a:	785b      	ldrb	r3, [r3, #1]
 800cc7c:	2b30      	cmp	r3, #48	; 0x30
 800cc7e:	d0f9      	beq.n	800cc74 <_strtod_l+0x28c>
 800cc80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800cc84:	2f08      	cmp	r7, #8
 800cc86:	f63f af7d 	bhi.w	800cb84 <_strtod_l+0x19c>
 800cc8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cc8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc90:	930a      	str	r3, [sp, #40]	; 0x28
 800cc92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc94:	1c5f      	adds	r7, r3, #1
 800cc96:	971b      	str	r7, [sp, #108]	; 0x6c
 800cc98:	785b      	ldrb	r3, [r3, #1]
 800cc9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800cc9e:	f1b8 0f09 	cmp.w	r8, #9
 800cca2:	d937      	bls.n	800cd14 <_strtod_l+0x32c>
 800cca4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cca6:	1a7f      	subs	r7, r7, r1
 800cca8:	2f08      	cmp	r7, #8
 800ccaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ccae:	dc37      	bgt.n	800cd20 <_strtod_l+0x338>
 800ccb0:	45be      	cmp	lr, r7
 800ccb2:	bfa8      	it	ge
 800ccb4:	46be      	movge	lr, r7
 800ccb6:	f1bc 0f00 	cmp.w	ip, #0
 800ccba:	d001      	beq.n	800ccc0 <_strtod_l+0x2d8>
 800ccbc:	f1ce 0e00 	rsb	lr, lr, #0
 800ccc0:	2c00      	cmp	r4, #0
 800ccc2:	d151      	bne.n	800cd68 <_strtod_l+0x380>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	f47f aece 	bne.w	800ca66 <_strtod_l+0x7e>
 800ccca:	9a06      	ldr	r2, [sp, #24]
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	f47f aeca 	bne.w	800ca66 <_strtod_l+0x7e>
 800ccd2:	9a04      	ldr	r2, [sp, #16]
 800ccd4:	2a00      	cmp	r2, #0
 800ccd6:	f47f aee4 	bne.w	800caa2 <_strtod_l+0xba>
 800ccda:	2b4e      	cmp	r3, #78	; 0x4e
 800ccdc:	d027      	beq.n	800cd2e <_strtod_l+0x346>
 800ccde:	dc21      	bgt.n	800cd24 <_strtod_l+0x33c>
 800cce0:	2b49      	cmp	r3, #73	; 0x49
 800cce2:	f47f aede 	bne.w	800caa2 <_strtod_l+0xba>
 800cce6:	49a0      	ldr	r1, [pc, #640]	; (800cf68 <_strtod_l+0x580>)
 800cce8:	a81b      	add	r0, sp, #108	; 0x6c
 800ccea:	f002 f811 	bl	800ed10 <__match>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f43f aed7 	beq.w	800caa2 <_strtod_l+0xba>
 800ccf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccf6:	499d      	ldr	r1, [pc, #628]	; (800cf6c <_strtod_l+0x584>)
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	a81b      	add	r0, sp, #108	; 0x6c
 800ccfc:	931b      	str	r3, [sp, #108]	; 0x6c
 800ccfe:	f002 f807 	bl	800ed10 <__match>
 800cd02:	b910      	cbnz	r0, 800cd0a <_strtod_l+0x322>
 800cd04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd06:	3301      	adds	r3, #1
 800cd08:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800cf80 <_strtod_l+0x598>
 800cd0e:	f04f 0a00 	mov.w	sl, #0
 800cd12:	e6a8      	b.n	800ca66 <_strtod_l+0x7e>
 800cd14:	210a      	movs	r1, #10
 800cd16:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cd1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cd1e:	e7b8      	b.n	800cc92 <_strtod_l+0x2aa>
 800cd20:	46be      	mov	lr, r7
 800cd22:	e7c8      	b.n	800ccb6 <_strtod_l+0x2ce>
 800cd24:	2b69      	cmp	r3, #105	; 0x69
 800cd26:	d0de      	beq.n	800cce6 <_strtod_l+0x2fe>
 800cd28:	2b6e      	cmp	r3, #110	; 0x6e
 800cd2a:	f47f aeba 	bne.w	800caa2 <_strtod_l+0xba>
 800cd2e:	4990      	ldr	r1, [pc, #576]	; (800cf70 <_strtod_l+0x588>)
 800cd30:	a81b      	add	r0, sp, #108	; 0x6c
 800cd32:	f001 ffed 	bl	800ed10 <__match>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f43f aeb3 	beq.w	800caa2 <_strtod_l+0xba>
 800cd3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b28      	cmp	r3, #40	; 0x28
 800cd42:	d10e      	bne.n	800cd62 <_strtod_l+0x37a>
 800cd44:	aa1e      	add	r2, sp, #120	; 0x78
 800cd46:	498b      	ldr	r1, [pc, #556]	; (800cf74 <_strtod_l+0x58c>)
 800cd48:	a81b      	add	r0, sp, #108	; 0x6c
 800cd4a:	f001 fff5 	bl	800ed38 <__hexnan>
 800cd4e:	2805      	cmp	r0, #5
 800cd50:	d107      	bne.n	800cd62 <_strtod_l+0x37a>
 800cd52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cd54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800cd58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cd5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cd60:	e681      	b.n	800ca66 <_strtod_l+0x7e>
 800cd62:	f8df b224 	ldr.w	fp, [pc, #548]	; 800cf88 <_strtod_l+0x5a0>
 800cd66:	e7d2      	b.n	800cd0e <_strtod_l+0x326>
 800cd68:	ebae 0302 	sub.w	r3, lr, r2
 800cd6c:	9306      	str	r3, [sp, #24]
 800cd6e:	9b05      	ldr	r3, [sp, #20]
 800cd70:	9807      	ldr	r0, [sp, #28]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bf08      	it	eq
 800cd76:	4623      	moveq	r3, r4
 800cd78:	2c10      	cmp	r4, #16
 800cd7a:	9305      	str	r3, [sp, #20]
 800cd7c:	46a0      	mov	r8, r4
 800cd7e:	bfa8      	it	ge
 800cd80:	f04f 0810 	movge.w	r8, #16
 800cd84:	f7f3 fbbe 	bl	8000504 <__aeabi_ui2d>
 800cd88:	2c09      	cmp	r4, #9
 800cd8a:	4682      	mov	sl, r0
 800cd8c:	468b      	mov	fp, r1
 800cd8e:	dc13      	bgt.n	800cdb8 <_strtod_l+0x3d0>
 800cd90:	9b06      	ldr	r3, [sp, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f43f ae67 	beq.w	800ca66 <_strtod_l+0x7e>
 800cd98:	9b06      	ldr	r3, [sp, #24]
 800cd9a:	dd7a      	ble.n	800ce92 <_strtod_l+0x4aa>
 800cd9c:	2b16      	cmp	r3, #22
 800cd9e:	dc61      	bgt.n	800ce64 <_strtod_l+0x47c>
 800cda0:	4a75      	ldr	r2, [pc, #468]	; (800cf78 <_strtod_l+0x590>)
 800cda2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800cda6:	e9de 0100 	ldrd	r0, r1, [lr]
 800cdaa:	4652      	mov	r2, sl
 800cdac:	465b      	mov	r3, fp
 800cdae:	f7f3 fc23 	bl	80005f8 <__aeabi_dmul>
 800cdb2:	4682      	mov	sl, r0
 800cdb4:	468b      	mov	fp, r1
 800cdb6:	e656      	b.n	800ca66 <_strtod_l+0x7e>
 800cdb8:	4b6f      	ldr	r3, [pc, #444]	; (800cf78 <_strtod_l+0x590>)
 800cdba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cdbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cdc2:	f7f3 fc19 	bl	80005f8 <__aeabi_dmul>
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	4628      	mov	r0, r5
 800cdca:	460f      	mov	r7, r1
 800cdcc:	f7f3 fb9a 	bl	8000504 <__aeabi_ui2d>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	4639      	mov	r1, r7
 800cdd8:	f7f3 fa58 	bl	800028c <__adddf3>
 800cddc:	2c0f      	cmp	r4, #15
 800cdde:	4682      	mov	sl, r0
 800cde0:	468b      	mov	fp, r1
 800cde2:	ddd5      	ble.n	800cd90 <_strtod_l+0x3a8>
 800cde4:	9b06      	ldr	r3, [sp, #24]
 800cde6:	eba4 0808 	sub.w	r8, r4, r8
 800cdea:	4498      	add	r8, r3
 800cdec:	f1b8 0f00 	cmp.w	r8, #0
 800cdf0:	f340 8096 	ble.w	800cf20 <_strtod_l+0x538>
 800cdf4:	f018 030f 	ands.w	r3, r8, #15
 800cdf8:	d00a      	beq.n	800ce10 <_strtod_l+0x428>
 800cdfa:	495f      	ldr	r1, [pc, #380]	; (800cf78 <_strtod_l+0x590>)
 800cdfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce00:	4652      	mov	r2, sl
 800ce02:	465b      	mov	r3, fp
 800ce04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce08:	f7f3 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ce0c:	4682      	mov	sl, r0
 800ce0e:	468b      	mov	fp, r1
 800ce10:	f038 080f 	bics.w	r8, r8, #15
 800ce14:	d073      	beq.n	800cefe <_strtod_l+0x516>
 800ce16:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ce1a:	dd47      	ble.n	800ceac <_strtod_l+0x4c4>
 800ce1c:	2400      	movs	r4, #0
 800ce1e:	46a0      	mov	r8, r4
 800ce20:	9407      	str	r4, [sp, #28]
 800ce22:	9405      	str	r4, [sp, #20]
 800ce24:	2322      	movs	r3, #34	; 0x22
 800ce26:	f8df b158 	ldr.w	fp, [pc, #344]	; 800cf80 <_strtod_l+0x598>
 800ce2a:	f8c9 3000 	str.w	r3, [r9]
 800ce2e:	f04f 0a00 	mov.w	sl, #0
 800ce32:	9b07      	ldr	r3, [sp, #28]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f43f ae16 	beq.w	800ca66 <_strtod_l+0x7e>
 800ce3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ce3c:	4648      	mov	r0, r9
 800ce3e:	f002 f8d1 	bl	800efe4 <_Bfree>
 800ce42:	9905      	ldr	r1, [sp, #20]
 800ce44:	4648      	mov	r0, r9
 800ce46:	f002 f8cd 	bl	800efe4 <_Bfree>
 800ce4a:	4641      	mov	r1, r8
 800ce4c:	4648      	mov	r0, r9
 800ce4e:	f002 f8c9 	bl	800efe4 <_Bfree>
 800ce52:	9907      	ldr	r1, [sp, #28]
 800ce54:	4648      	mov	r0, r9
 800ce56:	f002 f8c5 	bl	800efe4 <_Bfree>
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	4648      	mov	r0, r9
 800ce5e:	f002 f8c1 	bl	800efe4 <_Bfree>
 800ce62:	e600      	b.n	800ca66 <_strtod_l+0x7e>
 800ce64:	9a06      	ldr	r2, [sp, #24]
 800ce66:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	dbba      	blt.n	800cde4 <_strtod_l+0x3fc>
 800ce6e:	4d42      	ldr	r5, [pc, #264]	; (800cf78 <_strtod_l+0x590>)
 800ce70:	f1c4 040f 	rsb	r4, r4, #15
 800ce74:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ce78:	4652      	mov	r2, sl
 800ce7a:	465b      	mov	r3, fp
 800ce7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce80:	f7f3 fbba 	bl	80005f8 <__aeabi_dmul>
 800ce84:	9b06      	ldr	r3, [sp, #24]
 800ce86:	1b1c      	subs	r4, r3, r4
 800ce88:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ce8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce90:	e78d      	b.n	800cdae <_strtod_l+0x3c6>
 800ce92:	f113 0f16 	cmn.w	r3, #22
 800ce96:	dba5      	blt.n	800cde4 <_strtod_l+0x3fc>
 800ce98:	4a37      	ldr	r2, [pc, #220]	; (800cf78 <_strtod_l+0x590>)
 800ce9a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ce9e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cea2:	4650      	mov	r0, sl
 800cea4:	4659      	mov	r1, fp
 800cea6:	f7f3 fcd1 	bl	800084c <__aeabi_ddiv>
 800ceaa:	e782      	b.n	800cdb2 <_strtod_l+0x3ca>
 800ceac:	2300      	movs	r3, #0
 800ceae:	4e33      	ldr	r6, [pc, #204]	; (800cf7c <_strtod_l+0x594>)
 800ceb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ceb4:	4650      	mov	r0, sl
 800ceb6:	4659      	mov	r1, fp
 800ceb8:	461d      	mov	r5, r3
 800ceba:	f1b8 0f01 	cmp.w	r8, #1
 800cebe:	dc21      	bgt.n	800cf04 <_strtod_l+0x51c>
 800cec0:	b10b      	cbz	r3, 800cec6 <_strtod_l+0x4de>
 800cec2:	4682      	mov	sl, r0
 800cec4:	468b      	mov	fp, r1
 800cec6:	4b2d      	ldr	r3, [pc, #180]	; (800cf7c <_strtod_l+0x594>)
 800cec8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cecc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ced0:	4652      	mov	r2, sl
 800ced2:	465b      	mov	r3, fp
 800ced4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	4b28      	ldr	r3, [pc, #160]	; (800cf80 <_strtod_l+0x598>)
 800cede:	460a      	mov	r2, r1
 800cee0:	400b      	ands	r3, r1
 800cee2:	4928      	ldr	r1, [pc, #160]	; (800cf84 <_strtod_l+0x59c>)
 800cee4:	428b      	cmp	r3, r1
 800cee6:	4682      	mov	sl, r0
 800cee8:	d898      	bhi.n	800ce1c <_strtod_l+0x434>
 800ceea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ceee:	428b      	cmp	r3, r1
 800cef0:	bf86      	itte	hi
 800cef2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cf8c <_strtod_l+0x5a4>
 800cef6:	f04f 3aff 	movhi.w	sl, #4294967295
 800cefa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cefe:	2300      	movs	r3, #0
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	e077      	b.n	800cff4 <_strtod_l+0x60c>
 800cf04:	f018 0f01 	tst.w	r8, #1
 800cf08:	d006      	beq.n	800cf18 <_strtod_l+0x530>
 800cf0a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	f7f3 fb71 	bl	80005f8 <__aeabi_dmul>
 800cf16:	2301      	movs	r3, #1
 800cf18:	3501      	adds	r5, #1
 800cf1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf1e:	e7cc      	b.n	800ceba <_strtod_l+0x4d2>
 800cf20:	d0ed      	beq.n	800cefe <_strtod_l+0x516>
 800cf22:	f1c8 0800 	rsb	r8, r8, #0
 800cf26:	f018 020f 	ands.w	r2, r8, #15
 800cf2a:	d00a      	beq.n	800cf42 <_strtod_l+0x55a>
 800cf2c:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <_strtod_l+0x590>)
 800cf2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf32:	4650      	mov	r0, sl
 800cf34:	4659      	mov	r1, fp
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	f7f3 fc87 	bl	800084c <__aeabi_ddiv>
 800cf3e:	4682      	mov	sl, r0
 800cf40:	468b      	mov	fp, r1
 800cf42:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cf46:	d0da      	beq.n	800cefe <_strtod_l+0x516>
 800cf48:	f1b8 0f1f 	cmp.w	r8, #31
 800cf4c:	dd20      	ble.n	800cf90 <_strtod_l+0x5a8>
 800cf4e:	2400      	movs	r4, #0
 800cf50:	46a0      	mov	r8, r4
 800cf52:	9407      	str	r4, [sp, #28]
 800cf54:	9405      	str	r4, [sp, #20]
 800cf56:	2322      	movs	r3, #34	; 0x22
 800cf58:	f04f 0a00 	mov.w	sl, #0
 800cf5c:	f04f 0b00 	mov.w	fp, #0
 800cf60:	f8c9 3000 	str.w	r3, [r9]
 800cf64:	e765      	b.n	800ce32 <_strtod_l+0x44a>
 800cf66:	bf00      	nop
 800cf68:	080102e1 	.word	0x080102e1
 800cf6c:	0801036b 	.word	0x0801036b
 800cf70:	080102e9 	.word	0x080102e9
 800cf74:	0801032c 	.word	0x0801032c
 800cf78:	08010410 	.word	0x08010410
 800cf7c:	080103e8 	.word	0x080103e8
 800cf80:	7ff00000 	.word	0x7ff00000
 800cf84:	7ca00000 	.word	0x7ca00000
 800cf88:	fff80000 	.word	0xfff80000
 800cf8c:	7fefffff 	.word	0x7fefffff
 800cf90:	f018 0310 	ands.w	r3, r8, #16
 800cf94:	bf18      	it	ne
 800cf96:	236a      	movne	r3, #106	; 0x6a
 800cf98:	4da0      	ldr	r5, [pc, #640]	; (800d21c <_strtod_l+0x834>)
 800cf9a:	9304      	str	r3, [sp, #16]
 800cf9c:	4650      	mov	r0, sl
 800cf9e:	4659      	mov	r1, fp
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f1b8 0f00 	cmp.w	r8, #0
 800cfa6:	f300 810a 	bgt.w	800d1be <_strtod_l+0x7d6>
 800cfaa:	b10b      	cbz	r3, 800cfb0 <_strtod_l+0x5c8>
 800cfac:	4682      	mov	sl, r0
 800cfae:	468b      	mov	fp, r1
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	b1bb      	cbz	r3, 800cfe4 <_strtod_l+0x5fc>
 800cfb4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cfb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	4659      	mov	r1, fp
 800cfc0:	dd10      	ble.n	800cfe4 <_strtod_l+0x5fc>
 800cfc2:	2b1f      	cmp	r3, #31
 800cfc4:	f340 8107 	ble.w	800d1d6 <_strtod_l+0x7ee>
 800cfc8:	2b34      	cmp	r3, #52	; 0x34
 800cfca:	bfde      	ittt	le
 800cfcc:	3b20      	suble	r3, #32
 800cfce:	f04f 32ff 	movle.w	r2, #4294967295
 800cfd2:	fa02 f303 	lslle.w	r3, r2, r3
 800cfd6:	f04f 0a00 	mov.w	sl, #0
 800cfda:	bfcc      	ite	gt
 800cfdc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cfe0:	ea03 0b01 	andle.w	fp, r3, r1
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	4650      	mov	r0, sl
 800cfea:	4659      	mov	r1, fp
 800cfec:	f7f3 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1ac      	bne.n	800cf4e <_strtod_l+0x566>
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	9a05      	ldr	r2, [sp, #20]
 800cffa:	9908      	ldr	r1, [sp, #32]
 800cffc:	4623      	mov	r3, r4
 800cffe:	4648      	mov	r0, r9
 800d000:	f002 f842 	bl	800f088 <__s2b>
 800d004:	9007      	str	r0, [sp, #28]
 800d006:	2800      	cmp	r0, #0
 800d008:	f43f af08 	beq.w	800ce1c <_strtod_l+0x434>
 800d00c:	9a06      	ldr	r2, [sp, #24]
 800d00e:	9b06      	ldr	r3, [sp, #24]
 800d010:	2a00      	cmp	r2, #0
 800d012:	f1c3 0300 	rsb	r3, r3, #0
 800d016:	bfa8      	it	ge
 800d018:	2300      	movge	r3, #0
 800d01a:	930e      	str	r3, [sp, #56]	; 0x38
 800d01c:	2400      	movs	r4, #0
 800d01e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d022:	9316      	str	r3, [sp, #88]	; 0x58
 800d024:	46a0      	mov	r8, r4
 800d026:	9b07      	ldr	r3, [sp, #28]
 800d028:	4648      	mov	r0, r9
 800d02a:	6859      	ldr	r1, [r3, #4]
 800d02c:	f001 ffa6 	bl	800ef7c <_Balloc>
 800d030:	9005      	str	r0, [sp, #20]
 800d032:	2800      	cmp	r0, #0
 800d034:	f43f aef6 	beq.w	800ce24 <_strtod_l+0x43c>
 800d038:	9b07      	ldr	r3, [sp, #28]
 800d03a:	691a      	ldr	r2, [r3, #16]
 800d03c:	3202      	adds	r2, #2
 800d03e:	f103 010c 	add.w	r1, r3, #12
 800d042:	0092      	lsls	r2, r2, #2
 800d044:	300c      	adds	r0, #12
 800d046:	f7fe fdbf 	bl	800bbc8 <memcpy>
 800d04a:	aa1e      	add	r2, sp, #120	; 0x78
 800d04c:	a91d      	add	r1, sp, #116	; 0x74
 800d04e:	ec4b ab10 	vmov	d0, sl, fp
 800d052:	4648      	mov	r0, r9
 800d054:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d058:	f002 fad2 	bl	800f600 <__d2b>
 800d05c:	901c      	str	r0, [sp, #112]	; 0x70
 800d05e:	2800      	cmp	r0, #0
 800d060:	f43f aee0 	beq.w	800ce24 <_strtod_l+0x43c>
 800d064:	2101      	movs	r1, #1
 800d066:	4648      	mov	r0, r9
 800d068:	f002 f89a 	bl	800f1a0 <__i2b>
 800d06c:	4680      	mov	r8, r0
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f aed8 	beq.w	800ce24 <_strtod_l+0x43c>
 800d074:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d076:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d078:	2e00      	cmp	r6, #0
 800d07a:	bfab      	itete	ge
 800d07c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d07e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d080:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d082:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d084:	bfac      	ite	ge
 800d086:	18f7      	addge	r7, r6, r3
 800d088:	1b9d      	sublt	r5, r3, r6
 800d08a:	9b04      	ldr	r3, [sp, #16]
 800d08c:	1af6      	subs	r6, r6, r3
 800d08e:	4416      	add	r6, r2
 800d090:	4b63      	ldr	r3, [pc, #396]	; (800d220 <_strtod_l+0x838>)
 800d092:	3e01      	subs	r6, #1
 800d094:	429e      	cmp	r6, r3
 800d096:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d09a:	f280 80af 	bge.w	800d1fc <_strtod_l+0x814>
 800d09e:	1b9b      	subs	r3, r3, r6
 800d0a0:	2b1f      	cmp	r3, #31
 800d0a2:	eba2 0203 	sub.w	r2, r2, r3
 800d0a6:	f04f 0101 	mov.w	r1, #1
 800d0aa:	f300 809b 	bgt.w	800d1e4 <_strtod_l+0x7fc>
 800d0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d0b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0b8:	18be      	adds	r6, r7, r2
 800d0ba:	9b04      	ldr	r3, [sp, #16]
 800d0bc:	42b7      	cmp	r7, r6
 800d0be:	4415      	add	r5, r2
 800d0c0:	441d      	add	r5, r3
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	bfa8      	it	ge
 800d0c6:	4633      	movge	r3, r6
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	bfa8      	it	ge
 800d0cc:	462b      	movge	r3, r5
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	bfc2      	ittt	gt
 800d0d2:	1af6      	subgt	r6, r6, r3
 800d0d4:	1aed      	subgt	r5, r5, r3
 800d0d6:	1aff      	subgt	r7, r7, r3
 800d0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0da:	b1bb      	cbz	r3, 800d10c <_strtod_l+0x724>
 800d0dc:	4641      	mov	r1, r8
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4648      	mov	r0, r9
 800d0e2:	f002 f8fd 	bl	800f2e0 <__pow5mult>
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	f43f ae9b 	beq.w	800ce24 <_strtod_l+0x43c>
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d0f2:	4648      	mov	r0, r9
 800d0f4:	f002 f85d 	bl	800f1b2 <__multiply>
 800d0f8:	900c      	str	r0, [sp, #48]	; 0x30
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	f43f ae92 	beq.w	800ce24 <_strtod_l+0x43c>
 800d100:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d102:	4648      	mov	r0, r9
 800d104:	f001 ff6e 	bl	800efe4 <_Bfree>
 800d108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d10a:	931c      	str	r3, [sp, #112]	; 0x70
 800d10c:	2e00      	cmp	r6, #0
 800d10e:	dc7a      	bgt.n	800d206 <_strtod_l+0x81e>
 800d110:	9b06      	ldr	r3, [sp, #24]
 800d112:	2b00      	cmp	r3, #0
 800d114:	dd08      	ble.n	800d128 <_strtod_l+0x740>
 800d116:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d118:	9905      	ldr	r1, [sp, #20]
 800d11a:	4648      	mov	r0, r9
 800d11c:	f002 f8e0 	bl	800f2e0 <__pow5mult>
 800d120:	9005      	str	r0, [sp, #20]
 800d122:	2800      	cmp	r0, #0
 800d124:	f43f ae7e 	beq.w	800ce24 <_strtod_l+0x43c>
 800d128:	2d00      	cmp	r5, #0
 800d12a:	dd08      	ble.n	800d13e <_strtod_l+0x756>
 800d12c:	462a      	mov	r2, r5
 800d12e:	9905      	ldr	r1, [sp, #20]
 800d130:	4648      	mov	r0, r9
 800d132:	f002 f923 	bl	800f37c <__lshift>
 800d136:	9005      	str	r0, [sp, #20]
 800d138:	2800      	cmp	r0, #0
 800d13a:	f43f ae73 	beq.w	800ce24 <_strtod_l+0x43c>
 800d13e:	2f00      	cmp	r7, #0
 800d140:	dd08      	ble.n	800d154 <_strtod_l+0x76c>
 800d142:	4641      	mov	r1, r8
 800d144:	463a      	mov	r2, r7
 800d146:	4648      	mov	r0, r9
 800d148:	f002 f918 	bl	800f37c <__lshift>
 800d14c:	4680      	mov	r8, r0
 800d14e:	2800      	cmp	r0, #0
 800d150:	f43f ae68 	beq.w	800ce24 <_strtod_l+0x43c>
 800d154:	9a05      	ldr	r2, [sp, #20]
 800d156:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d158:	4648      	mov	r0, r9
 800d15a:	f002 f97d 	bl	800f458 <__mdiff>
 800d15e:	4604      	mov	r4, r0
 800d160:	2800      	cmp	r0, #0
 800d162:	f43f ae5f 	beq.w	800ce24 <_strtod_l+0x43c>
 800d166:	68c3      	ldr	r3, [r0, #12]
 800d168:	930c      	str	r3, [sp, #48]	; 0x30
 800d16a:	2300      	movs	r3, #0
 800d16c:	60c3      	str	r3, [r0, #12]
 800d16e:	4641      	mov	r1, r8
 800d170:	f002 f958 	bl	800f424 <__mcmp>
 800d174:	2800      	cmp	r0, #0
 800d176:	da55      	bge.n	800d224 <_strtod_l+0x83c>
 800d178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d17a:	b9e3      	cbnz	r3, 800d1b6 <_strtod_l+0x7ce>
 800d17c:	f1ba 0f00 	cmp.w	sl, #0
 800d180:	d119      	bne.n	800d1b6 <_strtod_l+0x7ce>
 800d182:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d186:	b9b3      	cbnz	r3, 800d1b6 <_strtod_l+0x7ce>
 800d188:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d18c:	0d1b      	lsrs	r3, r3, #20
 800d18e:	051b      	lsls	r3, r3, #20
 800d190:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d194:	d90f      	bls.n	800d1b6 <_strtod_l+0x7ce>
 800d196:	6963      	ldr	r3, [r4, #20]
 800d198:	b913      	cbnz	r3, 800d1a0 <_strtod_l+0x7b8>
 800d19a:	6923      	ldr	r3, [r4, #16]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	dd0a      	ble.n	800d1b6 <_strtod_l+0x7ce>
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	f002 f8e9 	bl	800f37c <__lshift>
 800d1aa:	4641      	mov	r1, r8
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	f002 f939 	bl	800f424 <__mcmp>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	dc67      	bgt.n	800d286 <_strtod_l+0x89e>
 800d1b6:	9b04      	ldr	r3, [sp, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d171      	bne.n	800d2a0 <_strtod_l+0x8b8>
 800d1bc:	e63d      	b.n	800ce3a <_strtod_l+0x452>
 800d1be:	f018 0f01 	tst.w	r8, #1
 800d1c2:	d004      	beq.n	800d1ce <_strtod_l+0x7e6>
 800d1c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1c8:	f7f3 fa16 	bl	80005f8 <__aeabi_dmul>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1d2:	3508      	adds	r5, #8
 800d1d4:	e6e5      	b.n	800cfa2 <_strtod_l+0x5ba>
 800d1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1da:	fa02 f303 	lsl.w	r3, r2, r3
 800d1de:	ea03 0a0a 	and.w	sl, r3, sl
 800d1e2:	e6ff      	b.n	800cfe4 <_strtod_l+0x5fc>
 800d1e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d1e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d1ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d1f0:	36e2      	adds	r6, #226	; 0xe2
 800d1f2:	fa01 f306 	lsl.w	r3, r1, r6
 800d1f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1f8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d1fa:	e75d      	b.n	800d0b8 <_strtod_l+0x6d0>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d200:	2301      	movs	r3, #1
 800d202:	930f      	str	r3, [sp, #60]	; 0x3c
 800d204:	e758      	b.n	800d0b8 <_strtod_l+0x6d0>
 800d206:	4632      	mov	r2, r6
 800d208:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d20a:	4648      	mov	r0, r9
 800d20c:	f002 f8b6 	bl	800f37c <__lshift>
 800d210:	901c      	str	r0, [sp, #112]	; 0x70
 800d212:	2800      	cmp	r0, #0
 800d214:	f47f af7c 	bne.w	800d110 <_strtod_l+0x728>
 800d218:	e604      	b.n	800ce24 <_strtod_l+0x43c>
 800d21a:	bf00      	nop
 800d21c:	08010340 	.word	0x08010340
 800d220:	fffffc02 	.word	0xfffffc02
 800d224:	465d      	mov	r5, fp
 800d226:	f040 8086 	bne.w	800d336 <_strtod_l+0x94e>
 800d22a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d22c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d230:	b32a      	cbz	r2, 800d27e <_strtod_l+0x896>
 800d232:	4aaf      	ldr	r2, [pc, #700]	; (800d4f0 <_strtod_l+0xb08>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d153      	bne.n	800d2e0 <_strtod_l+0x8f8>
 800d238:	9b04      	ldr	r3, [sp, #16]
 800d23a:	4650      	mov	r0, sl
 800d23c:	b1d3      	cbz	r3, 800d274 <_strtod_l+0x88c>
 800d23e:	4aad      	ldr	r2, [pc, #692]	; (800d4f4 <_strtod_l+0xb0c>)
 800d240:	402a      	ands	r2, r5
 800d242:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d246:	f04f 31ff 	mov.w	r1, #4294967295
 800d24a:	d816      	bhi.n	800d27a <_strtod_l+0x892>
 800d24c:	0d12      	lsrs	r2, r2, #20
 800d24e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d252:	fa01 f303 	lsl.w	r3, r1, r3
 800d256:	4298      	cmp	r0, r3
 800d258:	d142      	bne.n	800d2e0 <_strtod_l+0x8f8>
 800d25a:	4ba7      	ldr	r3, [pc, #668]	; (800d4f8 <_strtod_l+0xb10>)
 800d25c:	429d      	cmp	r5, r3
 800d25e:	d102      	bne.n	800d266 <_strtod_l+0x87e>
 800d260:	3001      	adds	r0, #1
 800d262:	f43f addf 	beq.w	800ce24 <_strtod_l+0x43c>
 800d266:	4ba3      	ldr	r3, [pc, #652]	; (800d4f4 <_strtod_l+0xb0c>)
 800d268:	402b      	ands	r3, r5
 800d26a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d26e:	f04f 0a00 	mov.w	sl, #0
 800d272:	e7a0      	b.n	800d1b6 <_strtod_l+0x7ce>
 800d274:	f04f 33ff 	mov.w	r3, #4294967295
 800d278:	e7ed      	b.n	800d256 <_strtod_l+0x86e>
 800d27a:	460b      	mov	r3, r1
 800d27c:	e7eb      	b.n	800d256 <_strtod_l+0x86e>
 800d27e:	bb7b      	cbnz	r3, 800d2e0 <_strtod_l+0x8f8>
 800d280:	f1ba 0f00 	cmp.w	sl, #0
 800d284:	d12c      	bne.n	800d2e0 <_strtod_l+0x8f8>
 800d286:	9904      	ldr	r1, [sp, #16]
 800d288:	4a9a      	ldr	r2, [pc, #616]	; (800d4f4 <_strtod_l+0xb0c>)
 800d28a:	465b      	mov	r3, fp
 800d28c:	b1f1      	cbz	r1, 800d2cc <_strtod_l+0x8e4>
 800d28e:	ea02 010b 	and.w	r1, r2, fp
 800d292:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d296:	dc19      	bgt.n	800d2cc <_strtod_l+0x8e4>
 800d298:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d29c:	f77f ae5b 	ble.w	800cf56 <_strtod_l+0x56e>
 800d2a0:	4a96      	ldr	r2, [pc, #600]	; (800d4fc <_strtod_l+0xb14>)
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	4659      	mov	r1, fp
 800d2ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d2b0:	f7f3 f9a2 	bl	80005f8 <__aeabi_dmul>
 800d2b4:	4682      	mov	sl, r0
 800d2b6:	468b      	mov	fp, r1
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	f47f adbe 	bne.w	800ce3a <_strtod_l+0x452>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f47f adbb 	bne.w	800ce3a <_strtod_l+0x452>
 800d2c4:	2322      	movs	r3, #34	; 0x22
 800d2c6:	f8c9 3000 	str.w	r3, [r9]
 800d2ca:	e5b6      	b.n	800ce3a <_strtod_l+0x452>
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d2d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d2d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d2da:	f04f 3aff 	mov.w	sl, #4294967295
 800d2de:	e76a      	b.n	800d1b6 <_strtod_l+0x7ce>
 800d2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e2:	b193      	cbz	r3, 800d30a <_strtod_l+0x922>
 800d2e4:	422b      	tst	r3, r5
 800d2e6:	f43f af66 	beq.w	800d1b6 <_strtod_l+0x7ce>
 800d2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2ec:	9a04      	ldr	r2, [sp, #16]
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	4659      	mov	r1, fp
 800d2f2:	b173      	cbz	r3, 800d312 <_strtod_l+0x92a>
 800d2f4:	f7ff fb5c 	bl	800c9b0 <sulp>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d300:	f7f2 ffc4 	bl	800028c <__adddf3>
 800d304:	4682      	mov	sl, r0
 800d306:	468b      	mov	fp, r1
 800d308:	e755      	b.n	800d1b6 <_strtod_l+0x7ce>
 800d30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d30c:	ea13 0f0a 	tst.w	r3, sl
 800d310:	e7e9      	b.n	800d2e6 <_strtod_l+0x8fe>
 800d312:	f7ff fb4d 	bl	800c9b0 <sulp>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d31e:	f7f2 ffb3 	bl	8000288 <__aeabi_dsub>
 800d322:	2200      	movs	r2, #0
 800d324:	2300      	movs	r3, #0
 800d326:	4682      	mov	sl, r0
 800d328:	468b      	mov	fp, r1
 800d32a:	f7f3 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f47f ae11 	bne.w	800cf56 <_strtod_l+0x56e>
 800d334:	e73f      	b.n	800d1b6 <_strtod_l+0x7ce>
 800d336:	4641      	mov	r1, r8
 800d338:	4620      	mov	r0, r4
 800d33a:	f002 f9b0 	bl	800f69e <__ratio>
 800d33e:	ec57 6b10 	vmov	r6, r7, d0
 800d342:	2200      	movs	r2, #0
 800d344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d348:	ee10 0a10 	vmov	r0, s0
 800d34c:	4639      	mov	r1, r7
 800d34e:	f7f3 fbcf 	bl	8000af0 <__aeabi_dcmple>
 800d352:	2800      	cmp	r0, #0
 800d354:	d077      	beq.n	800d446 <_strtod_l+0xa5e>
 800d356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d04a      	beq.n	800d3f2 <_strtod_l+0xa0a>
 800d35c:	4b68      	ldr	r3, [pc, #416]	; (800d500 <_strtod_l+0xb18>)
 800d35e:	2200      	movs	r2, #0
 800d360:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d364:	4f66      	ldr	r7, [pc, #408]	; (800d500 <_strtod_l+0xb18>)
 800d366:	2600      	movs	r6, #0
 800d368:	4b62      	ldr	r3, [pc, #392]	; (800d4f4 <_strtod_l+0xb0c>)
 800d36a:	402b      	ands	r3, r5
 800d36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d370:	4b64      	ldr	r3, [pc, #400]	; (800d504 <_strtod_l+0xb1c>)
 800d372:	429a      	cmp	r2, r3
 800d374:	f040 80ce 	bne.w	800d514 <_strtod_l+0xb2c>
 800d378:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d37c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d380:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d384:	ec4b ab10 	vmov	d0, sl, fp
 800d388:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d38c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d390:	f002 f8c0 	bl	800f514 <__ulp>
 800d394:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d398:	ec53 2b10 	vmov	r2, r3, d0
 800d39c:	f7f3 f92c 	bl	80005f8 <__aeabi_dmul>
 800d3a0:	4652      	mov	r2, sl
 800d3a2:	465b      	mov	r3, fp
 800d3a4:	f7f2 ff72 	bl	800028c <__adddf3>
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	4952      	ldr	r1, [pc, #328]	; (800d4f4 <_strtod_l+0xb0c>)
 800d3ac:	4a56      	ldr	r2, [pc, #344]	; (800d508 <_strtod_l+0xb20>)
 800d3ae:	4019      	ands	r1, r3
 800d3b0:	4291      	cmp	r1, r2
 800d3b2:	4682      	mov	sl, r0
 800d3b4:	d95b      	bls.n	800d46e <_strtod_l+0xa86>
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d103      	bne.n	800d3c8 <_strtod_l+0x9e0>
 800d3c0:	9b08      	ldr	r3, [sp, #32]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	f43f ad2e 	beq.w	800ce24 <_strtod_l+0x43c>
 800d3c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d4f8 <_strtod_l+0xb10>
 800d3cc:	f04f 3aff 	mov.w	sl, #4294967295
 800d3d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3d2:	4648      	mov	r0, r9
 800d3d4:	f001 fe06 	bl	800efe4 <_Bfree>
 800d3d8:	9905      	ldr	r1, [sp, #20]
 800d3da:	4648      	mov	r0, r9
 800d3dc:	f001 fe02 	bl	800efe4 <_Bfree>
 800d3e0:	4641      	mov	r1, r8
 800d3e2:	4648      	mov	r0, r9
 800d3e4:	f001 fdfe 	bl	800efe4 <_Bfree>
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4648      	mov	r0, r9
 800d3ec:	f001 fdfa 	bl	800efe4 <_Bfree>
 800d3f0:	e619      	b.n	800d026 <_strtod_l+0x63e>
 800d3f2:	f1ba 0f00 	cmp.w	sl, #0
 800d3f6:	d11a      	bne.n	800d42e <_strtod_l+0xa46>
 800d3f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3fc:	b9eb      	cbnz	r3, 800d43a <_strtod_l+0xa52>
 800d3fe:	2200      	movs	r2, #0
 800d400:	4b3f      	ldr	r3, [pc, #252]	; (800d500 <_strtod_l+0xb18>)
 800d402:	4630      	mov	r0, r6
 800d404:	4639      	mov	r1, r7
 800d406:	f7f3 fb69 	bl	8000adc <__aeabi_dcmplt>
 800d40a:	b9c8      	cbnz	r0, 800d440 <_strtod_l+0xa58>
 800d40c:	4630      	mov	r0, r6
 800d40e:	4639      	mov	r1, r7
 800d410:	2200      	movs	r2, #0
 800d412:	4b3e      	ldr	r3, [pc, #248]	; (800d50c <_strtod_l+0xb24>)
 800d414:	f7f3 f8f0 	bl	80005f8 <__aeabi_dmul>
 800d418:	4606      	mov	r6, r0
 800d41a:	460f      	mov	r7, r1
 800d41c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d420:	9618      	str	r6, [sp, #96]	; 0x60
 800d422:	9319      	str	r3, [sp, #100]	; 0x64
 800d424:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d428:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d42c:	e79c      	b.n	800d368 <_strtod_l+0x980>
 800d42e:	f1ba 0f01 	cmp.w	sl, #1
 800d432:	d102      	bne.n	800d43a <_strtod_l+0xa52>
 800d434:	2d00      	cmp	r5, #0
 800d436:	f43f ad8e 	beq.w	800cf56 <_strtod_l+0x56e>
 800d43a:	2200      	movs	r2, #0
 800d43c:	4b34      	ldr	r3, [pc, #208]	; (800d510 <_strtod_l+0xb28>)
 800d43e:	e78f      	b.n	800d360 <_strtod_l+0x978>
 800d440:	2600      	movs	r6, #0
 800d442:	4f32      	ldr	r7, [pc, #200]	; (800d50c <_strtod_l+0xb24>)
 800d444:	e7ea      	b.n	800d41c <_strtod_l+0xa34>
 800d446:	4b31      	ldr	r3, [pc, #196]	; (800d50c <_strtod_l+0xb24>)
 800d448:	4630      	mov	r0, r6
 800d44a:	4639      	mov	r1, r7
 800d44c:	2200      	movs	r2, #0
 800d44e:	f7f3 f8d3 	bl	80005f8 <__aeabi_dmul>
 800d452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d454:	4606      	mov	r6, r0
 800d456:	460f      	mov	r7, r1
 800d458:	b933      	cbnz	r3, 800d468 <_strtod_l+0xa80>
 800d45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d45e:	9010      	str	r0, [sp, #64]	; 0x40
 800d460:	9311      	str	r3, [sp, #68]	; 0x44
 800d462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d466:	e7df      	b.n	800d428 <_strtod_l+0xa40>
 800d468:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d46c:	e7f9      	b.n	800d462 <_strtod_l+0xa7a>
 800d46e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d472:	9b04      	ldr	r3, [sp, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1ab      	bne.n	800d3d0 <_strtod_l+0x9e8>
 800d478:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d47c:	0d1b      	lsrs	r3, r3, #20
 800d47e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d480:	051b      	lsls	r3, r3, #20
 800d482:	429a      	cmp	r2, r3
 800d484:	465d      	mov	r5, fp
 800d486:	d1a3      	bne.n	800d3d0 <_strtod_l+0x9e8>
 800d488:	4639      	mov	r1, r7
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7f3 fb64 	bl	8000b58 <__aeabi_d2iz>
 800d490:	f7f3 f848 	bl	8000524 <__aeabi_i2d>
 800d494:	460b      	mov	r3, r1
 800d496:	4602      	mov	r2, r0
 800d498:	4639      	mov	r1, r7
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7f2 fef4 	bl	8000288 <__aeabi_dsub>
 800d4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	b933      	cbnz	r3, 800d4b6 <_strtod_l+0xace>
 800d4a8:	f1ba 0f00 	cmp.w	sl, #0
 800d4ac:	d103      	bne.n	800d4b6 <_strtod_l+0xace>
 800d4ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d4b2:	2d00      	cmp	r5, #0
 800d4b4:	d06d      	beq.n	800d592 <_strtod_l+0xbaa>
 800d4b6:	a30a      	add	r3, pc, #40	; (adr r3, 800d4e0 <_strtod_l+0xaf8>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	4630      	mov	r0, r6
 800d4be:	4639      	mov	r1, r7
 800d4c0:	f7f3 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	f47f acb8 	bne.w	800ce3a <_strtod_l+0x452>
 800d4ca:	a307      	add	r3, pc, #28	; (adr r3, 800d4e8 <_strtod_l+0xb00>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f3 fb20 	bl	8000b18 <__aeabi_dcmpgt>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f43f af79 	beq.w	800d3d0 <_strtod_l+0x9e8>
 800d4de:	e4ac      	b.n	800ce3a <_strtod_l+0x452>
 800d4e0:	94a03595 	.word	0x94a03595
 800d4e4:	3fdfffff 	.word	0x3fdfffff
 800d4e8:	35afe535 	.word	0x35afe535
 800d4ec:	3fe00000 	.word	0x3fe00000
 800d4f0:	000fffff 	.word	0x000fffff
 800d4f4:	7ff00000 	.word	0x7ff00000
 800d4f8:	7fefffff 	.word	0x7fefffff
 800d4fc:	39500000 	.word	0x39500000
 800d500:	3ff00000 	.word	0x3ff00000
 800d504:	7fe00000 	.word	0x7fe00000
 800d508:	7c9fffff 	.word	0x7c9fffff
 800d50c:	3fe00000 	.word	0x3fe00000
 800d510:	bff00000 	.word	0xbff00000
 800d514:	9b04      	ldr	r3, [sp, #16]
 800d516:	b333      	cbz	r3, 800d566 <_strtod_l+0xb7e>
 800d518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d51a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d51e:	d822      	bhi.n	800d566 <_strtod_l+0xb7e>
 800d520:	a327      	add	r3, pc, #156	; (adr r3, 800d5c0 <_strtod_l+0xbd8>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	4630      	mov	r0, r6
 800d528:	4639      	mov	r1, r7
 800d52a:	f7f3 fae1 	bl	8000af0 <__aeabi_dcmple>
 800d52e:	b1a0      	cbz	r0, 800d55a <_strtod_l+0xb72>
 800d530:	4639      	mov	r1, r7
 800d532:	4630      	mov	r0, r6
 800d534:	f7f3 fb38 	bl	8000ba8 <__aeabi_d2uiz>
 800d538:	2800      	cmp	r0, #0
 800d53a:	bf08      	it	eq
 800d53c:	2001      	moveq	r0, #1
 800d53e:	f7f2 ffe1 	bl	8000504 <__aeabi_ui2d>
 800d542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d544:	4606      	mov	r6, r0
 800d546:	460f      	mov	r7, r1
 800d548:	bb03      	cbnz	r3, 800d58c <_strtod_l+0xba4>
 800d54a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d54e:	9012      	str	r0, [sp, #72]	; 0x48
 800d550:	9313      	str	r3, [sp, #76]	; 0x4c
 800d552:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d556:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d55c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d55e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d562:	1a9b      	subs	r3, r3, r2
 800d564:	930b      	str	r3, [sp, #44]	; 0x2c
 800d566:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d56a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d56e:	f001 ffd1 	bl	800f514 <__ulp>
 800d572:	4650      	mov	r0, sl
 800d574:	ec53 2b10 	vmov	r2, r3, d0
 800d578:	4659      	mov	r1, fp
 800d57a:	f7f3 f83d 	bl	80005f8 <__aeabi_dmul>
 800d57e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d582:	f7f2 fe83 	bl	800028c <__adddf3>
 800d586:	4682      	mov	sl, r0
 800d588:	468b      	mov	fp, r1
 800d58a:	e772      	b.n	800d472 <_strtod_l+0xa8a>
 800d58c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d590:	e7df      	b.n	800d552 <_strtod_l+0xb6a>
 800d592:	a30d      	add	r3, pc, #52	; (adr r3, 800d5c8 <_strtod_l+0xbe0>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f3 faa0 	bl	8000adc <__aeabi_dcmplt>
 800d59c:	e79c      	b.n	800d4d8 <_strtod_l+0xaf0>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	930d      	str	r3, [sp, #52]	; 0x34
 800d5a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	f7ff ba61 	b.w	800ca6e <_strtod_l+0x86>
 800d5ac:	2b65      	cmp	r3, #101	; 0x65
 800d5ae:	f04f 0200 	mov.w	r2, #0
 800d5b2:	f43f ab4e 	beq.w	800cc52 <_strtod_l+0x26a>
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	4614      	mov	r4, r2
 800d5ba:	9104      	str	r1, [sp, #16]
 800d5bc:	f7ff bacb 	b.w	800cb56 <_strtod_l+0x16e>
 800d5c0:	ffc00000 	.word	0xffc00000
 800d5c4:	41dfffff 	.word	0x41dfffff
 800d5c8:	94a03595 	.word	0x94a03595
 800d5cc:	3fcfffff 	.word	0x3fcfffff

0800d5d0 <_strtod_r>:
 800d5d0:	4b05      	ldr	r3, [pc, #20]	; (800d5e8 <_strtod_r+0x18>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	b410      	push	{r4}
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	4c04      	ldr	r4, [pc, #16]	; (800d5ec <_strtod_r+0x1c>)
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	bf08      	it	eq
 800d5de:	4623      	moveq	r3, r4
 800d5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e4:	f7ff ba00 	b.w	800c9e8 <_strtod_l>
 800d5e8:	20000040 	.word	0x20000040
 800d5ec:	200000a4 	.word	0x200000a4

0800d5f0 <_strtol_l.isra.0>:
 800d5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f4:	4680      	mov	r8, r0
 800d5f6:	4689      	mov	r9, r1
 800d5f8:	4692      	mov	sl, r2
 800d5fa:	461e      	mov	r6, r3
 800d5fc:	460f      	mov	r7, r1
 800d5fe:	463d      	mov	r5, r7
 800d600:	9808      	ldr	r0, [sp, #32]
 800d602:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d606:	f001 fc27 	bl	800ee58 <__locale_ctype_ptr_l>
 800d60a:	4420      	add	r0, r4
 800d60c:	7843      	ldrb	r3, [r0, #1]
 800d60e:	f013 0308 	ands.w	r3, r3, #8
 800d612:	d132      	bne.n	800d67a <_strtol_l.isra.0+0x8a>
 800d614:	2c2d      	cmp	r4, #45	; 0x2d
 800d616:	d132      	bne.n	800d67e <_strtol_l.isra.0+0x8e>
 800d618:	787c      	ldrb	r4, [r7, #1]
 800d61a:	1cbd      	adds	r5, r7, #2
 800d61c:	2201      	movs	r2, #1
 800d61e:	2e00      	cmp	r6, #0
 800d620:	d05d      	beq.n	800d6de <_strtol_l.isra.0+0xee>
 800d622:	2e10      	cmp	r6, #16
 800d624:	d109      	bne.n	800d63a <_strtol_l.isra.0+0x4a>
 800d626:	2c30      	cmp	r4, #48	; 0x30
 800d628:	d107      	bne.n	800d63a <_strtol_l.isra.0+0x4a>
 800d62a:	782b      	ldrb	r3, [r5, #0]
 800d62c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d630:	2b58      	cmp	r3, #88	; 0x58
 800d632:	d14f      	bne.n	800d6d4 <_strtol_l.isra.0+0xe4>
 800d634:	786c      	ldrb	r4, [r5, #1]
 800d636:	2610      	movs	r6, #16
 800d638:	3502      	adds	r5, #2
 800d63a:	2a00      	cmp	r2, #0
 800d63c:	bf14      	ite	ne
 800d63e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d642:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d646:	2700      	movs	r7, #0
 800d648:	fbb1 fcf6 	udiv	ip, r1, r6
 800d64c:	4638      	mov	r0, r7
 800d64e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d652:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d656:	2b09      	cmp	r3, #9
 800d658:	d817      	bhi.n	800d68a <_strtol_l.isra.0+0x9a>
 800d65a:	461c      	mov	r4, r3
 800d65c:	42a6      	cmp	r6, r4
 800d65e:	dd23      	ble.n	800d6a8 <_strtol_l.isra.0+0xb8>
 800d660:	1c7b      	adds	r3, r7, #1
 800d662:	d007      	beq.n	800d674 <_strtol_l.isra.0+0x84>
 800d664:	4584      	cmp	ip, r0
 800d666:	d31c      	bcc.n	800d6a2 <_strtol_l.isra.0+0xb2>
 800d668:	d101      	bne.n	800d66e <_strtol_l.isra.0+0x7e>
 800d66a:	45a6      	cmp	lr, r4
 800d66c:	db19      	blt.n	800d6a2 <_strtol_l.isra.0+0xb2>
 800d66e:	fb00 4006 	mla	r0, r0, r6, r4
 800d672:	2701      	movs	r7, #1
 800d674:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d678:	e7eb      	b.n	800d652 <_strtol_l.isra.0+0x62>
 800d67a:	462f      	mov	r7, r5
 800d67c:	e7bf      	b.n	800d5fe <_strtol_l.isra.0+0xe>
 800d67e:	2c2b      	cmp	r4, #43	; 0x2b
 800d680:	bf04      	itt	eq
 800d682:	1cbd      	addeq	r5, r7, #2
 800d684:	787c      	ldrbeq	r4, [r7, #1]
 800d686:	461a      	mov	r2, r3
 800d688:	e7c9      	b.n	800d61e <_strtol_l.isra.0+0x2e>
 800d68a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d68e:	2b19      	cmp	r3, #25
 800d690:	d801      	bhi.n	800d696 <_strtol_l.isra.0+0xa6>
 800d692:	3c37      	subs	r4, #55	; 0x37
 800d694:	e7e2      	b.n	800d65c <_strtol_l.isra.0+0x6c>
 800d696:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d69a:	2b19      	cmp	r3, #25
 800d69c:	d804      	bhi.n	800d6a8 <_strtol_l.isra.0+0xb8>
 800d69e:	3c57      	subs	r4, #87	; 0x57
 800d6a0:	e7dc      	b.n	800d65c <_strtol_l.isra.0+0x6c>
 800d6a2:	f04f 37ff 	mov.w	r7, #4294967295
 800d6a6:	e7e5      	b.n	800d674 <_strtol_l.isra.0+0x84>
 800d6a8:	1c7b      	adds	r3, r7, #1
 800d6aa:	d108      	bne.n	800d6be <_strtol_l.isra.0+0xce>
 800d6ac:	2322      	movs	r3, #34	; 0x22
 800d6ae:	f8c8 3000 	str.w	r3, [r8]
 800d6b2:	4608      	mov	r0, r1
 800d6b4:	f1ba 0f00 	cmp.w	sl, #0
 800d6b8:	d107      	bne.n	800d6ca <_strtol_l.isra.0+0xda>
 800d6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6be:	b102      	cbz	r2, 800d6c2 <_strtol_l.isra.0+0xd2>
 800d6c0:	4240      	negs	r0, r0
 800d6c2:	f1ba 0f00 	cmp.w	sl, #0
 800d6c6:	d0f8      	beq.n	800d6ba <_strtol_l.isra.0+0xca>
 800d6c8:	b10f      	cbz	r7, 800d6ce <_strtol_l.isra.0+0xde>
 800d6ca:	f105 39ff 	add.w	r9, r5, #4294967295
 800d6ce:	f8ca 9000 	str.w	r9, [sl]
 800d6d2:	e7f2      	b.n	800d6ba <_strtol_l.isra.0+0xca>
 800d6d4:	2430      	movs	r4, #48	; 0x30
 800d6d6:	2e00      	cmp	r6, #0
 800d6d8:	d1af      	bne.n	800d63a <_strtol_l.isra.0+0x4a>
 800d6da:	2608      	movs	r6, #8
 800d6dc:	e7ad      	b.n	800d63a <_strtol_l.isra.0+0x4a>
 800d6de:	2c30      	cmp	r4, #48	; 0x30
 800d6e0:	d0a3      	beq.n	800d62a <_strtol_l.isra.0+0x3a>
 800d6e2:	260a      	movs	r6, #10
 800d6e4:	e7a9      	b.n	800d63a <_strtol_l.isra.0+0x4a>
	...

0800d6e8 <_strtol_r>:
 800d6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ea:	4c06      	ldr	r4, [pc, #24]	; (800d704 <_strtol_r+0x1c>)
 800d6ec:	4d06      	ldr	r5, [pc, #24]	; (800d708 <_strtol_r+0x20>)
 800d6ee:	6824      	ldr	r4, [r4, #0]
 800d6f0:	6a24      	ldr	r4, [r4, #32]
 800d6f2:	2c00      	cmp	r4, #0
 800d6f4:	bf08      	it	eq
 800d6f6:	462c      	moveq	r4, r5
 800d6f8:	9400      	str	r4, [sp, #0]
 800d6fa:	f7ff ff79 	bl	800d5f0 <_strtol_l.isra.0>
 800d6fe:	b003      	add	sp, #12
 800d700:	bd30      	pop	{r4, r5, pc}
 800d702:	bf00      	nop
 800d704:	20000040 	.word	0x20000040
 800d708:	200000a4 	.word	0x200000a4

0800d70c <__swbuf_r>:
 800d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70e:	460e      	mov	r6, r1
 800d710:	4614      	mov	r4, r2
 800d712:	4605      	mov	r5, r0
 800d714:	b118      	cbz	r0, 800d71e <__swbuf_r+0x12>
 800d716:	6983      	ldr	r3, [r0, #24]
 800d718:	b90b      	cbnz	r3, 800d71e <__swbuf_r+0x12>
 800d71a:	f000 ffed 	bl	800e6f8 <__sinit>
 800d71e:	4b21      	ldr	r3, [pc, #132]	; (800d7a4 <__swbuf_r+0x98>)
 800d720:	429c      	cmp	r4, r3
 800d722:	d12a      	bne.n	800d77a <__swbuf_r+0x6e>
 800d724:	686c      	ldr	r4, [r5, #4]
 800d726:	69a3      	ldr	r3, [r4, #24]
 800d728:	60a3      	str	r3, [r4, #8]
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	071a      	lsls	r2, r3, #28
 800d72e:	d52e      	bpl.n	800d78e <__swbuf_r+0x82>
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	b363      	cbz	r3, 800d78e <__swbuf_r+0x82>
 800d734:	6923      	ldr	r3, [r4, #16]
 800d736:	6820      	ldr	r0, [r4, #0]
 800d738:	1ac0      	subs	r0, r0, r3
 800d73a:	6963      	ldr	r3, [r4, #20]
 800d73c:	b2f6      	uxtb	r6, r6
 800d73e:	4283      	cmp	r3, r0
 800d740:	4637      	mov	r7, r6
 800d742:	dc04      	bgt.n	800d74e <__swbuf_r+0x42>
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f000 ff6c 	bl	800e624 <_fflush_r>
 800d74c:	bb28      	cbnz	r0, 800d79a <__swbuf_r+0x8e>
 800d74e:	68a3      	ldr	r3, [r4, #8]
 800d750:	3b01      	subs	r3, #1
 800d752:	60a3      	str	r3, [r4, #8]
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	1c5a      	adds	r2, r3, #1
 800d758:	6022      	str	r2, [r4, #0]
 800d75a:	701e      	strb	r6, [r3, #0]
 800d75c:	6963      	ldr	r3, [r4, #20]
 800d75e:	3001      	adds	r0, #1
 800d760:	4283      	cmp	r3, r0
 800d762:	d004      	beq.n	800d76e <__swbuf_r+0x62>
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	07db      	lsls	r3, r3, #31
 800d768:	d519      	bpl.n	800d79e <__swbuf_r+0x92>
 800d76a:	2e0a      	cmp	r6, #10
 800d76c:	d117      	bne.n	800d79e <__swbuf_r+0x92>
 800d76e:	4621      	mov	r1, r4
 800d770:	4628      	mov	r0, r5
 800d772:	f000 ff57 	bl	800e624 <_fflush_r>
 800d776:	b190      	cbz	r0, 800d79e <__swbuf_r+0x92>
 800d778:	e00f      	b.n	800d79a <__swbuf_r+0x8e>
 800d77a:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <__swbuf_r+0x9c>)
 800d77c:	429c      	cmp	r4, r3
 800d77e:	d101      	bne.n	800d784 <__swbuf_r+0x78>
 800d780:	68ac      	ldr	r4, [r5, #8]
 800d782:	e7d0      	b.n	800d726 <__swbuf_r+0x1a>
 800d784:	4b09      	ldr	r3, [pc, #36]	; (800d7ac <__swbuf_r+0xa0>)
 800d786:	429c      	cmp	r4, r3
 800d788:	bf08      	it	eq
 800d78a:	68ec      	ldreq	r4, [r5, #12]
 800d78c:	e7cb      	b.n	800d726 <__swbuf_r+0x1a>
 800d78e:	4621      	mov	r1, r4
 800d790:	4628      	mov	r0, r5
 800d792:	f000 f80d 	bl	800d7b0 <__swsetup_r>
 800d796:	2800      	cmp	r0, #0
 800d798:	d0cc      	beq.n	800d734 <__swbuf_r+0x28>
 800d79a:	f04f 37ff 	mov.w	r7, #4294967295
 800d79e:	4638      	mov	r0, r7
 800d7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	08010398 	.word	0x08010398
 800d7a8:	080103b8 	.word	0x080103b8
 800d7ac:	08010378 	.word	0x08010378

0800d7b0 <__swsetup_r>:
 800d7b0:	4b32      	ldr	r3, [pc, #200]	; (800d87c <__swsetup_r+0xcc>)
 800d7b2:	b570      	push	{r4, r5, r6, lr}
 800d7b4:	681d      	ldr	r5, [r3, #0]
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	b125      	cbz	r5, 800d7c6 <__swsetup_r+0x16>
 800d7bc:	69ab      	ldr	r3, [r5, #24]
 800d7be:	b913      	cbnz	r3, 800d7c6 <__swsetup_r+0x16>
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	f000 ff99 	bl	800e6f8 <__sinit>
 800d7c6:	4b2e      	ldr	r3, [pc, #184]	; (800d880 <__swsetup_r+0xd0>)
 800d7c8:	429c      	cmp	r4, r3
 800d7ca:	d10f      	bne.n	800d7ec <__swsetup_r+0x3c>
 800d7cc:	686c      	ldr	r4, [r5, #4]
 800d7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	0715      	lsls	r5, r2, #28
 800d7d6:	d42c      	bmi.n	800d832 <__swsetup_r+0x82>
 800d7d8:	06d0      	lsls	r0, r2, #27
 800d7da:	d411      	bmi.n	800d800 <__swsetup_r+0x50>
 800d7dc:	2209      	movs	r2, #9
 800d7de:	6032      	str	r2, [r6, #0]
 800d7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7e4:	81a3      	strh	r3, [r4, #12]
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ea:	e03e      	b.n	800d86a <__swsetup_r+0xba>
 800d7ec:	4b25      	ldr	r3, [pc, #148]	; (800d884 <__swsetup_r+0xd4>)
 800d7ee:	429c      	cmp	r4, r3
 800d7f0:	d101      	bne.n	800d7f6 <__swsetup_r+0x46>
 800d7f2:	68ac      	ldr	r4, [r5, #8]
 800d7f4:	e7eb      	b.n	800d7ce <__swsetup_r+0x1e>
 800d7f6:	4b24      	ldr	r3, [pc, #144]	; (800d888 <__swsetup_r+0xd8>)
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	bf08      	it	eq
 800d7fc:	68ec      	ldreq	r4, [r5, #12]
 800d7fe:	e7e6      	b.n	800d7ce <__swsetup_r+0x1e>
 800d800:	0751      	lsls	r1, r2, #29
 800d802:	d512      	bpl.n	800d82a <__swsetup_r+0x7a>
 800d804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d806:	b141      	cbz	r1, 800d81a <__swsetup_r+0x6a>
 800d808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d80c:	4299      	cmp	r1, r3
 800d80e:	d002      	beq.n	800d816 <__swsetup_r+0x66>
 800d810:	4630      	mov	r0, r6
 800d812:	f001 ffc1 	bl	800f798 <_free_r>
 800d816:	2300      	movs	r3, #0
 800d818:	6363      	str	r3, [r4, #52]	; 0x34
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d820:	81a3      	strh	r3, [r4, #12]
 800d822:	2300      	movs	r3, #0
 800d824:	6063      	str	r3, [r4, #4]
 800d826:	6923      	ldr	r3, [r4, #16]
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	89a3      	ldrh	r3, [r4, #12]
 800d82c:	f043 0308 	orr.w	r3, r3, #8
 800d830:	81a3      	strh	r3, [r4, #12]
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	b94b      	cbnz	r3, 800d84a <__swsetup_r+0x9a>
 800d836:	89a3      	ldrh	r3, [r4, #12]
 800d838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d83c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d840:	d003      	beq.n	800d84a <__swsetup_r+0x9a>
 800d842:	4621      	mov	r1, r4
 800d844:	4630      	mov	r0, r6
 800d846:	f001 fb3f 	bl	800eec8 <__smakebuf_r>
 800d84a:	89a2      	ldrh	r2, [r4, #12]
 800d84c:	f012 0301 	ands.w	r3, r2, #1
 800d850:	d00c      	beq.n	800d86c <__swsetup_r+0xbc>
 800d852:	2300      	movs	r3, #0
 800d854:	60a3      	str	r3, [r4, #8]
 800d856:	6963      	ldr	r3, [r4, #20]
 800d858:	425b      	negs	r3, r3
 800d85a:	61a3      	str	r3, [r4, #24]
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	b953      	cbnz	r3, 800d876 <__swsetup_r+0xc6>
 800d860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d864:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d868:	d1ba      	bne.n	800d7e0 <__swsetup_r+0x30>
 800d86a:	bd70      	pop	{r4, r5, r6, pc}
 800d86c:	0792      	lsls	r2, r2, #30
 800d86e:	bf58      	it	pl
 800d870:	6963      	ldrpl	r3, [r4, #20]
 800d872:	60a3      	str	r3, [r4, #8]
 800d874:	e7f2      	b.n	800d85c <__swsetup_r+0xac>
 800d876:	2000      	movs	r0, #0
 800d878:	e7f7      	b.n	800d86a <__swsetup_r+0xba>
 800d87a:	bf00      	nop
 800d87c:	20000040 	.word	0x20000040
 800d880:	08010398 	.word	0x08010398
 800d884:	080103b8 	.word	0x080103b8
 800d888:	08010378 	.word	0x08010378

0800d88c <quorem>:
 800d88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	6903      	ldr	r3, [r0, #16]
 800d892:	690c      	ldr	r4, [r1, #16]
 800d894:	42a3      	cmp	r3, r4
 800d896:	4680      	mov	r8, r0
 800d898:	f2c0 8082 	blt.w	800d9a0 <quorem+0x114>
 800d89c:	3c01      	subs	r4, #1
 800d89e:	f101 0714 	add.w	r7, r1, #20
 800d8a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d8a6:	f100 0614 	add.w	r6, r0, #20
 800d8aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d8ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d8b2:	eb06 030c 	add.w	r3, r6, ip
 800d8b6:	3501      	adds	r5, #1
 800d8b8:	eb07 090c 	add.w	r9, r7, ip
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	fbb0 f5f5 	udiv	r5, r0, r5
 800d8c2:	b395      	cbz	r5, 800d92a <quorem+0x9e>
 800d8c4:	f04f 0a00 	mov.w	sl, #0
 800d8c8:	4638      	mov	r0, r7
 800d8ca:	46b6      	mov	lr, r6
 800d8cc:	46d3      	mov	fp, sl
 800d8ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800d8d2:	b293      	uxth	r3, r2
 800d8d4:	fb05 a303 	mla	r3, r5, r3, sl
 800d8d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	ebab 0303 	sub.w	r3, fp, r3
 800d8e2:	0c12      	lsrs	r2, r2, #16
 800d8e4:	f8de b000 	ldr.w	fp, [lr]
 800d8e8:	fb05 a202 	mla	r2, r5, r2, sl
 800d8ec:	fa13 f38b 	uxtah	r3, r3, fp
 800d8f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d8f4:	fa1f fb82 	uxth.w	fp, r2
 800d8f8:	f8de 2000 	ldr.w	r2, [lr]
 800d8fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d904:	b29b      	uxth	r3, r3
 800d906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d90a:	4581      	cmp	r9, r0
 800d90c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d910:	f84e 3b04 	str.w	r3, [lr], #4
 800d914:	d2db      	bcs.n	800d8ce <quorem+0x42>
 800d916:	f856 300c 	ldr.w	r3, [r6, ip]
 800d91a:	b933      	cbnz	r3, 800d92a <quorem+0x9e>
 800d91c:	9b01      	ldr	r3, [sp, #4]
 800d91e:	3b04      	subs	r3, #4
 800d920:	429e      	cmp	r6, r3
 800d922:	461a      	mov	r2, r3
 800d924:	d330      	bcc.n	800d988 <quorem+0xfc>
 800d926:	f8c8 4010 	str.w	r4, [r8, #16]
 800d92a:	4640      	mov	r0, r8
 800d92c:	f001 fd7a 	bl	800f424 <__mcmp>
 800d930:	2800      	cmp	r0, #0
 800d932:	db25      	blt.n	800d980 <quorem+0xf4>
 800d934:	3501      	adds	r5, #1
 800d936:	4630      	mov	r0, r6
 800d938:	f04f 0c00 	mov.w	ip, #0
 800d93c:	f857 2b04 	ldr.w	r2, [r7], #4
 800d940:	f8d0 e000 	ldr.w	lr, [r0]
 800d944:	b293      	uxth	r3, r2
 800d946:	ebac 0303 	sub.w	r3, ip, r3
 800d94a:	0c12      	lsrs	r2, r2, #16
 800d94c:	fa13 f38e 	uxtah	r3, r3, lr
 800d950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d958:	b29b      	uxth	r3, r3
 800d95a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d95e:	45b9      	cmp	r9, r7
 800d960:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d964:	f840 3b04 	str.w	r3, [r0], #4
 800d968:	d2e8      	bcs.n	800d93c <quorem+0xb0>
 800d96a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d96e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d972:	b92a      	cbnz	r2, 800d980 <quorem+0xf4>
 800d974:	3b04      	subs	r3, #4
 800d976:	429e      	cmp	r6, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	d30b      	bcc.n	800d994 <quorem+0x108>
 800d97c:	f8c8 4010 	str.w	r4, [r8, #16]
 800d980:	4628      	mov	r0, r5
 800d982:	b003      	add	sp, #12
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	6812      	ldr	r2, [r2, #0]
 800d98a:	3b04      	subs	r3, #4
 800d98c:	2a00      	cmp	r2, #0
 800d98e:	d1ca      	bne.n	800d926 <quorem+0x9a>
 800d990:	3c01      	subs	r4, #1
 800d992:	e7c5      	b.n	800d920 <quorem+0x94>
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	3b04      	subs	r3, #4
 800d998:	2a00      	cmp	r2, #0
 800d99a:	d1ef      	bne.n	800d97c <quorem+0xf0>
 800d99c:	3c01      	subs	r4, #1
 800d99e:	e7ea      	b.n	800d976 <quorem+0xea>
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	e7ee      	b.n	800d982 <quorem+0xf6>
 800d9a4:	0000      	movs	r0, r0
	...

0800d9a8 <_dtoa_r>:
 800d9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ac:	ec57 6b10 	vmov	r6, r7, d0
 800d9b0:	b097      	sub	sp, #92	; 0x5c
 800d9b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9b4:	9106      	str	r1, [sp, #24]
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9ba:	9312      	str	r3, [sp, #72]	; 0x48
 800d9bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9c0:	e9cd 6700 	strd	r6, r7, [sp]
 800d9c4:	b93d      	cbnz	r5, 800d9d6 <_dtoa_r+0x2e>
 800d9c6:	2010      	movs	r0, #16
 800d9c8:	f001 fabe 	bl	800ef48 <malloc>
 800d9cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d9ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9d2:	6005      	str	r5, [r0, #0]
 800d9d4:	60c5      	str	r5, [r0, #12]
 800d9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9d8:	6819      	ldr	r1, [r3, #0]
 800d9da:	b151      	cbz	r1, 800d9f2 <_dtoa_r+0x4a>
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	604a      	str	r2, [r1, #4]
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4093      	lsls	r3, r2
 800d9e4:	608b      	str	r3, [r1, #8]
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f001 fafc 	bl	800efe4 <_Bfree>
 800d9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	1e3b      	subs	r3, r7, #0
 800d9f4:	bfbb      	ittet	lt
 800d9f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d9fa:	9301      	strlt	r3, [sp, #4]
 800d9fc:	2300      	movge	r3, #0
 800d9fe:	2201      	movlt	r2, #1
 800da00:	bfac      	ite	ge
 800da02:	f8c8 3000 	strge.w	r3, [r8]
 800da06:	f8c8 2000 	strlt.w	r2, [r8]
 800da0a:	4baf      	ldr	r3, [pc, #700]	; (800dcc8 <_dtoa_r+0x320>)
 800da0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da10:	ea33 0308 	bics.w	r3, r3, r8
 800da14:	d114      	bne.n	800da40 <_dtoa_r+0x98>
 800da16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da18:	f242 730f 	movw	r3, #9999	; 0x270f
 800da1c:	6013      	str	r3, [r2, #0]
 800da1e:	9b00      	ldr	r3, [sp, #0]
 800da20:	b923      	cbnz	r3, 800da2c <_dtoa_r+0x84>
 800da22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800da26:	2800      	cmp	r0, #0
 800da28:	f000 8542 	beq.w	800e4b0 <_dtoa_r+0xb08>
 800da2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800dcdc <_dtoa_r+0x334>
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 8544 	beq.w	800e4c0 <_dtoa_r+0xb18>
 800da38:	f10b 0303 	add.w	r3, fp, #3
 800da3c:	f000 bd3e 	b.w	800e4bc <_dtoa_r+0xb14>
 800da40:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da44:	2200      	movs	r2, #0
 800da46:	2300      	movs	r3, #0
 800da48:	4630      	mov	r0, r6
 800da4a:	4639      	mov	r1, r7
 800da4c:	f7f3 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 800da50:	4681      	mov	r9, r0
 800da52:	b168      	cbz	r0, 800da70 <_dtoa_r+0xc8>
 800da54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da56:	2301      	movs	r3, #1
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f000 8524 	beq.w	800e4aa <_dtoa_r+0xb02>
 800da62:	4b9a      	ldr	r3, [pc, #616]	; (800dccc <_dtoa_r+0x324>)
 800da64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da66:	f103 3bff 	add.w	fp, r3, #4294967295
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	f000 bd28 	b.w	800e4c0 <_dtoa_r+0xb18>
 800da70:	aa14      	add	r2, sp, #80	; 0x50
 800da72:	a915      	add	r1, sp, #84	; 0x54
 800da74:	ec47 6b10 	vmov	d0, r6, r7
 800da78:	4620      	mov	r0, r4
 800da7a:	f001 fdc1 	bl	800f600 <__d2b>
 800da7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800da82:	9004      	str	r0, [sp, #16]
 800da84:	2d00      	cmp	r5, #0
 800da86:	d07c      	beq.n	800db82 <_dtoa_r+0x1da>
 800da88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800da90:	46b2      	mov	sl, r6
 800da92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800da96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800da9e:	2200      	movs	r2, #0
 800daa0:	4b8b      	ldr	r3, [pc, #556]	; (800dcd0 <_dtoa_r+0x328>)
 800daa2:	4650      	mov	r0, sl
 800daa4:	4659      	mov	r1, fp
 800daa6:	f7f2 fbef 	bl	8000288 <__aeabi_dsub>
 800daaa:	a381      	add	r3, pc, #516	; (adr r3, 800dcb0 <_dtoa_r+0x308>)
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	f7f2 fda2 	bl	80005f8 <__aeabi_dmul>
 800dab4:	a380      	add	r3, pc, #512	; (adr r3, 800dcb8 <_dtoa_r+0x310>)
 800dab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daba:	f7f2 fbe7 	bl	800028c <__adddf3>
 800dabe:	4606      	mov	r6, r0
 800dac0:	4628      	mov	r0, r5
 800dac2:	460f      	mov	r7, r1
 800dac4:	f7f2 fd2e 	bl	8000524 <__aeabi_i2d>
 800dac8:	a37d      	add	r3, pc, #500	; (adr r3, 800dcc0 <_dtoa_r+0x318>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f2 fd93 	bl	80005f8 <__aeabi_dmul>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	4630      	mov	r0, r6
 800dad8:	4639      	mov	r1, r7
 800dada:	f7f2 fbd7 	bl	800028c <__adddf3>
 800dade:	4606      	mov	r6, r0
 800dae0:	460f      	mov	r7, r1
 800dae2:	f7f3 f839 	bl	8000b58 <__aeabi_d2iz>
 800dae6:	2200      	movs	r2, #0
 800dae8:	4682      	mov	sl, r0
 800daea:	2300      	movs	r3, #0
 800daec:	4630      	mov	r0, r6
 800daee:	4639      	mov	r1, r7
 800daf0:	f7f2 fff4 	bl	8000adc <__aeabi_dcmplt>
 800daf4:	b148      	cbz	r0, 800db0a <_dtoa_r+0x162>
 800daf6:	4650      	mov	r0, sl
 800daf8:	f7f2 fd14 	bl	8000524 <__aeabi_i2d>
 800dafc:	4632      	mov	r2, r6
 800dafe:	463b      	mov	r3, r7
 800db00:	f7f2 ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800db04:	b908      	cbnz	r0, 800db0a <_dtoa_r+0x162>
 800db06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db0a:	f1ba 0f16 	cmp.w	sl, #22
 800db0e:	d859      	bhi.n	800dbc4 <_dtoa_r+0x21c>
 800db10:	4970      	ldr	r1, [pc, #448]	; (800dcd4 <_dtoa_r+0x32c>)
 800db12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800db16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db1e:	f7f2 fffb 	bl	8000b18 <__aeabi_dcmpgt>
 800db22:	2800      	cmp	r0, #0
 800db24:	d050      	beq.n	800dbc8 <_dtoa_r+0x220>
 800db26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db2a:	2300      	movs	r3, #0
 800db2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800db2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db30:	1b5d      	subs	r5, r3, r5
 800db32:	f1b5 0801 	subs.w	r8, r5, #1
 800db36:	bf49      	itett	mi
 800db38:	f1c5 0301 	rsbmi	r3, r5, #1
 800db3c:	2300      	movpl	r3, #0
 800db3e:	9305      	strmi	r3, [sp, #20]
 800db40:	f04f 0800 	movmi.w	r8, #0
 800db44:	bf58      	it	pl
 800db46:	9305      	strpl	r3, [sp, #20]
 800db48:	f1ba 0f00 	cmp.w	sl, #0
 800db4c:	db3e      	blt.n	800dbcc <_dtoa_r+0x224>
 800db4e:	2300      	movs	r3, #0
 800db50:	44d0      	add	r8, sl
 800db52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800db56:	9307      	str	r3, [sp, #28]
 800db58:	9b06      	ldr	r3, [sp, #24]
 800db5a:	2b09      	cmp	r3, #9
 800db5c:	f200 8090 	bhi.w	800dc80 <_dtoa_r+0x2d8>
 800db60:	2b05      	cmp	r3, #5
 800db62:	bfc4      	itt	gt
 800db64:	3b04      	subgt	r3, #4
 800db66:	9306      	strgt	r3, [sp, #24]
 800db68:	9b06      	ldr	r3, [sp, #24]
 800db6a:	f1a3 0302 	sub.w	r3, r3, #2
 800db6e:	bfcc      	ite	gt
 800db70:	2500      	movgt	r5, #0
 800db72:	2501      	movle	r5, #1
 800db74:	2b03      	cmp	r3, #3
 800db76:	f200 808f 	bhi.w	800dc98 <_dtoa_r+0x2f0>
 800db7a:	e8df f003 	tbb	[pc, r3]
 800db7e:	7f7d      	.short	0x7f7d
 800db80:	7131      	.short	0x7131
 800db82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800db86:	441d      	add	r5, r3
 800db88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800db8c:	2820      	cmp	r0, #32
 800db8e:	dd13      	ble.n	800dbb8 <_dtoa_r+0x210>
 800db90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800db94:	9b00      	ldr	r3, [sp, #0]
 800db96:	fa08 f800 	lsl.w	r8, r8, r0
 800db9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800db9e:	fa23 f000 	lsr.w	r0, r3, r0
 800dba2:	ea48 0000 	orr.w	r0, r8, r0
 800dba6:	f7f2 fcad 	bl	8000504 <__aeabi_ui2d>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	4682      	mov	sl, r0
 800dbae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800dbb2:	3d01      	subs	r5, #1
 800dbb4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbb6:	e772      	b.n	800da9e <_dtoa_r+0xf6>
 800dbb8:	9b00      	ldr	r3, [sp, #0]
 800dbba:	f1c0 0020 	rsb	r0, r0, #32
 800dbbe:	fa03 f000 	lsl.w	r0, r3, r0
 800dbc2:	e7f0      	b.n	800dba6 <_dtoa_r+0x1fe>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e7b1      	b.n	800db2c <_dtoa_r+0x184>
 800dbc8:	900f      	str	r0, [sp, #60]	; 0x3c
 800dbca:	e7b0      	b.n	800db2e <_dtoa_r+0x186>
 800dbcc:	9b05      	ldr	r3, [sp, #20]
 800dbce:	eba3 030a 	sub.w	r3, r3, sl
 800dbd2:	9305      	str	r3, [sp, #20]
 800dbd4:	f1ca 0300 	rsb	r3, sl, #0
 800dbd8:	9307      	str	r3, [sp, #28]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	930e      	str	r3, [sp, #56]	; 0x38
 800dbde:	e7bb      	b.n	800db58 <_dtoa_r+0x1b0>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	930a      	str	r3, [sp, #40]	; 0x28
 800dbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	dd59      	ble.n	800dc9e <_dtoa_r+0x2f6>
 800dbea:	9302      	str	r3, [sp, #8]
 800dbec:	4699      	mov	r9, r3
 800dbee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	6072      	str	r2, [r6, #4]
 800dbf4:	2204      	movs	r2, #4
 800dbf6:	f102 0014 	add.w	r0, r2, #20
 800dbfa:	4298      	cmp	r0, r3
 800dbfc:	6871      	ldr	r1, [r6, #4]
 800dbfe:	d953      	bls.n	800dca8 <_dtoa_r+0x300>
 800dc00:	4620      	mov	r0, r4
 800dc02:	f001 f9bb 	bl	800ef7c <_Balloc>
 800dc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc08:	6030      	str	r0, [r6, #0]
 800dc0a:	f1b9 0f0e 	cmp.w	r9, #14
 800dc0e:	f8d3 b000 	ldr.w	fp, [r3]
 800dc12:	f200 80e6 	bhi.w	800dde2 <_dtoa_r+0x43a>
 800dc16:	2d00      	cmp	r5, #0
 800dc18:	f000 80e3 	beq.w	800dde2 <_dtoa_r+0x43a>
 800dc1c:	ed9d 7b00 	vldr	d7, [sp]
 800dc20:	f1ba 0f00 	cmp.w	sl, #0
 800dc24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800dc28:	dd74      	ble.n	800dd14 <_dtoa_r+0x36c>
 800dc2a:	4a2a      	ldr	r2, [pc, #168]	; (800dcd4 <_dtoa_r+0x32c>)
 800dc2c:	f00a 030f 	and.w	r3, sl, #15
 800dc30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dc34:	ed93 7b00 	vldr	d7, [r3]
 800dc38:	ea4f 162a 	mov.w	r6, sl, asr #4
 800dc3c:	06f0      	lsls	r0, r6, #27
 800dc3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800dc42:	d565      	bpl.n	800dd10 <_dtoa_r+0x368>
 800dc44:	4b24      	ldr	r3, [pc, #144]	; (800dcd8 <_dtoa_r+0x330>)
 800dc46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dc4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc4e:	f7f2 fdfd 	bl	800084c <__aeabi_ddiv>
 800dc52:	e9cd 0100 	strd	r0, r1, [sp]
 800dc56:	f006 060f 	and.w	r6, r6, #15
 800dc5a:	2503      	movs	r5, #3
 800dc5c:	4f1e      	ldr	r7, [pc, #120]	; (800dcd8 <_dtoa_r+0x330>)
 800dc5e:	e04c      	b.n	800dcfa <_dtoa_r+0x352>
 800dc60:	2301      	movs	r3, #1
 800dc62:	930a      	str	r3, [sp, #40]	; 0x28
 800dc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc66:	4453      	add	r3, sl
 800dc68:	f103 0901 	add.w	r9, r3, #1
 800dc6c:	9302      	str	r3, [sp, #8]
 800dc6e:	464b      	mov	r3, r9
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	bfb8      	it	lt
 800dc74:	2301      	movlt	r3, #1
 800dc76:	e7ba      	b.n	800dbee <_dtoa_r+0x246>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e7b2      	b.n	800dbe2 <_dtoa_r+0x23a>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e7f0      	b.n	800dc62 <_dtoa_r+0x2ba>
 800dc80:	2501      	movs	r5, #1
 800dc82:	2300      	movs	r3, #0
 800dc84:	9306      	str	r3, [sp, #24]
 800dc86:	950a      	str	r5, [sp, #40]	; 0x28
 800dc88:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8c:	9302      	str	r3, [sp, #8]
 800dc8e:	4699      	mov	r9, r3
 800dc90:	2200      	movs	r2, #0
 800dc92:	2312      	movs	r3, #18
 800dc94:	920b      	str	r2, [sp, #44]	; 0x2c
 800dc96:	e7aa      	b.n	800dbee <_dtoa_r+0x246>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc9c:	e7f4      	b.n	800dc88 <_dtoa_r+0x2e0>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	9302      	str	r3, [sp, #8]
 800dca2:	4699      	mov	r9, r3
 800dca4:	461a      	mov	r2, r3
 800dca6:	e7f5      	b.n	800dc94 <_dtoa_r+0x2ec>
 800dca8:	3101      	adds	r1, #1
 800dcaa:	6071      	str	r1, [r6, #4]
 800dcac:	0052      	lsls	r2, r2, #1
 800dcae:	e7a2      	b.n	800dbf6 <_dtoa_r+0x24e>
 800dcb0:	636f4361 	.word	0x636f4361
 800dcb4:	3fd287a7 	.word	0x3fd287a7
 800dcb8:	8b60c8b3 	.word	0x8b60c8b3
 800dcbc:	3fc68a28 	.word	0x3fc68a28
 800dcc0:	509f79fb 	.word	0x509f79fb
 800dcc4:	3fd34413 	.word	0x3fd34413
 800dcc8:	7ff00000 	.word	0x7ff00000
 800dccc:	080102ed 	.word	0x080102ed
 800dcd0:	3ff80000 	.word	0x3ff80000
 800dcd4:	08010410 	.word	0x08010410
 800dcd8:	080103e8 	.word	0x080103e8
 800dcdc:	08010371 	.word	0x08010371
 800dce0:	07f1      	lsls	r1, r6, #31
 800dce2:	d508      	bpl.n	800dcf6 <_dtoa_r+0x34e>
 800dce4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcec:	f7f2 fc84 	bl	80005f8 <__aeabi_dmul>
 800dcf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dcf4:	3501      	adds	r5, #1
 800dcf6:	1076      	asrs	r6, r6, #1
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	d1f0      	bne.n	800dce0 <_dtoa_r+0x338>
 800dcfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dd02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd06:	f7f2 fda1 	bl	800084c <__aeabi_ddiv>
 800dd0a:	e9cd 0100 	strd	r0, r1, [sp]
 800dd0e:	e01a      	b.n	800dd46 <_dtoa_r+0x39e>
 800dd10:	2502      	movs	r5, #2
 800dd12:	e7a3      	b.n	800dc5c <_dtoa_r+0x2b4>
 800dd14:	f000 80a0 	beq.w	800de58 <_dtoa_r+0x4b0>
 800dd18:	f1ca 0600 	rsb	r6, sl, #0
 800dd1c:	4b9f      	ldr	r3, [pc, #636]	; (800df9c <_dtoa_r+0x5f4>)
 800dd1e:	4fa0      	ldr	r7, [pc, #640]	; (800dfa0 <_dtoa_r+0x5f8>)
 800dd20:	f006 020f 	and.w	r2, r6, #15
 800dd24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dd30:	f7f2 fc62 	bl	80005f8 <__aeabi_dmul>
 800dd34:	e9cd 0100 	strd	r0, r1, [sp]
 800dd38:	1136      	asrs	r6, r6, #4
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	2502      	movs	r5, #2
 800dd3e:	2e00      	cmp	r6, #0
 800dd40:	d17f      	bne.n	800de42 <_dtoa_r+0x49a>
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1e1      	bne.n	800dd0a <_dtoa_r+0x362>
 800dd46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 8087 	beq.w	800de5c <_dtoa_r+0x4b4>
 800dd4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd52:	2200      	movs	r2, #0
 800dd54:	4b93      	ldr	r3, [pc, #588]	; (800dfa4 <_dtoa_r+0x5fc>)
 800dd56:	4630      	mov	r0, r6
 800dd58:	4639      	mov	r1, r7
 800dd5a:	f7f2 febf 	bl	8000adc <__aeabi_dcmplt>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d07c      	beq.n	800de5c <_dtoa_r+0x4b4>
 800dd62:	f1b9 0f00 	cmp.w	r9, #0
 800dd66:	d079      	beq.n	800de5c <_dtoa_r+0x4b4>
 800dd68:	9b02      	ldr	r3, [sp, #8]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dd35      	ble.n	800ddda <_dtoa_r+0x432>
 800dd6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dd72:	9308      	str	r3, [sp, #32]
 800dd74:	4639      	mov	r1, r7
 800dd76:	2200      	movs	r2, #0
 800dd78:	4b8b      	ldr	r3, [pc, #556]	; (800dfa8 <_dtoa_r+0x600>)
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f7f2 fc3c 	bl	80005f8 <__aeabi_dmul>
 800dd80:	e9cd 0100 	strd	r0, r1, [sp]
 800dd84:	9f02      	ldr	r7, [sp, #8]
 800dd86:	3501      	adds	r5, #1
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f7f2 fbcb 	bl	8000524 <__aeabi_i2d>
 800dd8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd92:	f7f2 fc31 	bl	80005f8 <__aeabi_dmul>
 800dd96:	2200      	movs	r2, #0
 800dd98:	4b84      	ldr	r3, [pc, #528]	; (800dfac <_dtoa_r+0x604>)
 800dd9a:	f7f2 fa77 	bl	800028c <__adddf3>
 800dd9e:	4605      	mov	r5, r0
 800dda0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dda4:	2f00      	cmp	r7, #0
 800dda6:	d15d      	bne.n	800de64 <_dtoa_r+0x4bc>
 800dda8:	2200      	movs	r2, #0
 800ddaa:	4b81      	ldr	r3, [pc, #516]	; (800dfb0 <_dtoa_r+0x608>)
 800ddac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddb0:	f7f2 fa6a 	bl	8000288 <__aeabi_dsub>
 800ddb4:	462a      	mov	r2, r5
 800ddb6:	4633      	mov	r3, r6
 800ddb8:	e9cd 0100 	strd	r0, r1, [sp]
 800ddbc:	f7f2 feac 	bl	8000b18 <__aeabi_dcmpgt>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	f040 8288 	bne.w	800e2d6 <_dtoa_r+0x92e>
 800ddc6:	462a      	mov	r2, r5
 800ddc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ddcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddd0:	f7f2 fe84 	bl	8000adc <__aeabi_dcmplt>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	f040 827c 	bne.w	800e2d2 <_dtoa_r+0x92a>
 800ddda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddde:	e9cd 2300 	strd	r2, r3, [sp]
 800dde2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f2c0 8150 	blt.w	800e08a <_dtoa_r+0x6e2>
 800ddea:	f1ba 0f0e 	cmp.w	sl, #14
 800ddee:	f300 814c 	bgt.w	800e08a <_dtoa_r+0x6e2>
 800ddf2:	4b6a      	ldr	r3, [pc, #424]	; (800df9c <_dtoa_r+0x5f4>)
 800ddf4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ddf8:	ed93 7b00 	vldr	d7, [r3]
 800ddfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de04:	f280 80d8 	bge.w	800dfb8 <_dtoa_r+0x610>
 800de08:	f1b9 0f00 	cmp.w	r9, #0
 800de0c:	f300 80d4 	bgt.w	800dfb8 <_dtoa_r+0x610>
 800de10:	f040 825e 	bne.w	800e2d0 <_dtoa_r+0x928>
 800de14:	2200      	movs	r2, #0
 800de16:	4b66      	ldr	r3, [pc, #408]	; (800dfb0 <_dtoa_r+0x608>)
 800de18:	ec51 0b17 	vmov	r0, r1, d7
 800de1c:	f7f2 fbec 	bl	80005f8 <__aeabi_dmul>
 800de20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de24:	f7f2 fe6e 	bl	8000b04 <__aeabi_dcmpge>
 800de28:	464f      	mov	r7, r9
 800de2a:	464e      	mov	r6, r9
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f040 8234 	bne.w	800e29a <_dtoa_r+0x8f2>
 800de32:	2331      	movs	r3, #49	; 0x31
 800de34:	f10b 0501 	add.w	r5, fp, #1
 800de38:	f88b 3000 	strb.w	r3, [fp]
 800de3c:	f10a 0a01 	add.w	sl, sl, #1
 800de40:	e22f      	b.n	800e2a2 <_dtoa_r+0x8fa>
 800de42:	07f2      	lsls	r2, r6, #31
 800de44:	d505      	bpl.n	800de52 <_dtoa_r+0x4aa>
 800de46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de4a:	f7f2 fbd5 	bl	80005f8 <__aeabi_dmul>
 800de4e:	3501      	adds	r5, #1
 800de50:	2301      	movs	r3, #1
 800de52:	1076      	asrs	r6, r6, #1
 800de54:	3708      	adds	r7, #8
 800de56:	e772      	b.n	800dd3e <_dtoa_r+0x396>
 800de58:	2502      	movs	r5, #2
 800de5a:	e774      	b.n	800dd46 <_dtoa_r+0x39e>
 800de5c:	f8cd a020 	str.w	sl, [sp, #32]
 800de60:	464f      	mov	r7, r9
 800de62:	e791      	b.n	800dd88 <_dtoa_r+0x3e0>
 800de64:	4b4d      	ldr	r3, [pc, #308]	; (800df9c <_dtoa_r+0x5f4>)
 800de66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800de6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de70:	2b00      	cmp	r3, #0
 800de72:	d047      	beq.n	800df04 <_dtoa_r+0x55c>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	2000      	movs	r0, #0
 800de7a:	494e      	ldr	r1, [pc, #312]	; (800dfb4 <_dtoa_r+0x60c>)
 800de7c:	f7f2 fce6 	bl	800084c <__aeabi_ddiv>
 800de80:	462a      	mov	r2, r5
 800de82:	4633      	mov	r3, r6
 800de84:	f7f2 fa00 	bl	8000288 <__aeabi_dsub>
 800de88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800de8c:	465d      	mov	r5, fp
 800de8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de92:	f7f2 fe61 	bl	8000b58 <__aeabi_d2iz>
 800de96:	4606      	mov	r6, r0
 800de98:	f7f2 fb44 	bl	8000524 <__aeabi_i2d>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dea4:	f7f2 f9f0 	bl	8000288 <__aeabi_dsub>
 800dea8:	3630      	adds	r6, #48	; 0x30
 800deaa:	f805 6b01 	strb.w	r6, [r5], #1
 800deae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800deb2:	e9cd 0100 	strd	r0, r1, [sp]
 800deb6:	f7f2 fe11 	bl	8000adc <__aeabi_dcmplt>
 800deba:	2800      	cmp	r0, #0
 800debc:	d163      	bne.n	800df86 <_dtoa_r+0x5de>
 800debe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dec2:	2000      	movs	r0, #0
 800dec4:	4937      	ldr	r1, [pc, #220]	; (800dfa4 <_dtoa_r+0x5fc>)
 800dec6:	f7f2 f9df 	bl	8000288 <__aeabi_dsub>
 800deca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dece:	f7f2 fe05 	bl	8000adc <__aeabi_dcmplt>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	f040 80b7 	bne.w	800e046 <_dtoa_r+0x69e>
 800ded8:	eba5 030b 	sub.w	r3, r5, fp
 800dedc:	429f      	cmp	r7, r3
 800dede:	f77f af7c 	ble.w	800ddda <_dtoa_r+0x432>
 800dee2:	2200      	movs	r2, #0
 800dee4:	4b30      	ldr	r3, [pc, #192]	; (800dfa8 <_dtoa_r+0x600>)
 800dee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800deea:	f7f2 fb85 	bl	80005f8 <__aeabi_dmul>
 800deee:	2200      	movs	r2, #0
 800def0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800def4:	4b2c      	ldr	r3, [pc, #176]	; (800dfa8 <_dtoa_r+0x600>)
 800def6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800defa:	f7f2 fb7d 	bl	80005f8 <__aeabi_dmul>
 800defe:	e9cd 0100 	strd	r0, r1, [sp]
 800df02:	e7c4      	b.n	800de8e <_dtoa_r+0x4e6>
 800df04:	462a      	mov	r2, r5
 800df06:	4633      	mov	r3, r6
 800df08:	f7f2 fb76 	bl	80005f8 <__aeabi_dmul>
 800df0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800df10:	eb0b 0507 	add.w	r5, fp, r7
 800df14:	465e      	mov	r6, fp
 800df16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df1a:	f7f2 fe1d 	bl	8000b58 <__aeabi_d2iz>
 800df1e:	4607      	mov	r7, r0
 800df20:	f7f2 fb00 	bl	8000524 <__aeabi_i2d>
 800df24:	3730      	adds	r7, #48	; 0x30
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df2e:	f7f2 f9ab 	bl	8000288 <__aeabi_dsub>
 800df32:	f806 7b01 	strb.w	r7, [r6], #1
 800df36:	42ae      	cmp	r6, r5
 800df38:	e9cd 0100 	strd	r0, r1, [sp]
 800df3c:	f04f 0200 	mov.w	r2, #0
 800df40:	d126      	bne.n	800df90 <_dtoa_r+0x5e8>
 800df42:	4b1c      	ldr	r3, [pc, #112]	; (800dfb4 <_dtoa_r+0x60c>)
 800df44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df48:	f7f2 f9a0 	bl	800028c <__adddf3>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df54:	f7f2 fde0 	bl	8000b18 <__aeabi_dcmpgt>
 800df58:	2800      	cmp	r0, #0
 800df5a:	d174      	bne.n	800e046 <_dtoa_r+0x69e>
 800df5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800df60:	2000      	movs	r0, #0
 800df62:	4914      	ldr	r1, [pc, #80]	; (800dfb4 <_dtoa_r+0x60c>)
 800df64:	f7f2 f990 	bl	8000288 <__aeabi_dsub>
 800df68:	4602      	mov	r2, r0
 800df6a:	460b      	mov	r3, r1
 800df6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df70:	f7f2 fdb4 	bl	8000adc <__aeabi_dcmplt>
 800df74:	2800      	cmp	r0, #0
 800df76:	f43f af30 	beq.w	800ddda <_dtoa_r+0x432>
 800df7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df7e:	2b30      	cmp	r3, #48	; 0x30
 800df80:	f105 32ff 	add.w	r2, r5, #4294967295
 800df84:	d002      	beq.n	800df8c <_dtoa_r+0x5e4>
 800df86:	f8dd a020 	ldr.w	sl, [sp, #32]
 800df8a:	e04a      	b.n	800e022 <_dtoa_r+0x67a>
 800df8c:	4615      	mov	r5, r2
 800df8e:	e7f4      	b.n	800df7a <_dtoa_r+0x5d2>
 800df90:	4b05      	ldr	r3, [pc, #20]	; (800dfa8 <_dtoa_r+0x600>)
 800df92:	f7f2 fb31 	bl	80005f8 <__aeabi_dmul>
 800df96:	e9cd 0100 	strd	r0, r1, [sp]
 800df9a:	e7bc      	b.n	800df16 <_dtoa_r+0x56e>
 800df9c:	08010410 	.word	0x08010410
 800dfa0:	080103e8 	.word	0x080103e8
 800dfa4:	3ff00000 	.word	0x3ff00000
 800dfa8:	40240000 	.word	0x40240000
 800dfac:	401c0000 	.word	0x401c0000
 800dfb0:	40140000 	.word	0x40140000
 800dfb4:	3fe00000 	.word	0x3fe00000
 800dfb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dfbc:	465d      	mov	r5, fp
 800dfbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	f7f2 fc41 	bl	800084c <__aeabi_ddiv>
 800dfca:	f7f2 fdc5 	bl	8000b58 <__aeabi_d2iz>
 800dfce:	4680      	mov	r8, r0
 800dfd0:	f7f2 faa8 	bl	8000524 <__aeabi_i2d>
 800dfd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfd8:	f7f2 fb0e 	bl	80005f8 <__aeabi_dmul>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	4639      	mov	r1, r7
 800dfe4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800dfe8:	f7f2 f94e 	bl	8000288 <__aeabi_dsub>
 800dfec:	f805 6b01 	strb.w	r6, [r5], #1
 800dff0:	eba5 060b 	sub.w	r6, r5, fp
 800dff4:	45b1      	cmp	r9, r6
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	d139      	bne.n	800e070 <_dtoa_r+0x6c8>
 800dffc:	f7f2 f946 	bl	800028c <__adddf3>
 800e000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e004:	4606      	mov	r6, r0
 800e006:	460f      	mov	r7, r1
 800e008:	f7f2 fd86 	bl	8000b18 <__aeabi_dcmpgt>
 800e00c:	b9c8      	cbnz	r0, 800e042 <_dtoa_r+0x69a>
 800e00e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e012:	4630      	mov	r0, r6
 800e014:	4639      	mov	r1, r7
 800e016:	f7f2 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800e01a:	b110      	cbz	r0, 800e022 <_dtoa_r+0x67a>
 800e01c:	f018 0f01 	tst.w	r8, #1
 800e020:	d10f      	bne.n	800e042 <_dtoa_r+0x69a>
 800e022:	9904      	ldr	r1, [sp, #16]
 800e024:	4620      	mov	r0, r4
 800e026:	f000 ffdd 	bl	800efe4 <_Bfree>
 800e02a:	2300      	movs	r3, #0
 800e02c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e02e:	702b      	strb	r3, [r5, #0]
 800e030:	f10a 0301 	add.w	r3, sl, #1
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 8241 	beq.w	800e4c0 <_dtoa_r+0xb18>
 800e03e:	601d      	str	r5, [r3, #0]
 800e040:	e23e      	b.n	800e4c0 <_dtoa_r+0xb18>
 800e042:	f8cd a020 	str.w	sl, [sp, #32]
 800e046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e04a:	2a39      	cmp	r2, #57	; 0x39
 800e04c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e050:	d108      	bne.n	800e064 <_dtoa_r+0x6bc>
 800e052:	459b      	cmp	fp, r3
 800e054:	d10a      	bne.n	800e06c <_dtoa_r+0x6c4>
 800e056:	9b08      	ldr	r3, [sp, #32]
 800e058:	3301      	adds	r3, #1
 800e05a:	9308      	str	r3, [sp, #32]
 800e05c:	2330      	movs	r3, #48	; 0x30
 800e05e:	f88b 3000 	strb.w	r3, [fp]
 800e062:	465b      	mov	r3, fp
 800e064:	781a      	ldrb	r2, [r3, #0]
 800e066:	3201      	adds	r2, #1
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	e78c      	b.n	800df86 <_dtoa_r+0x5de>
 800e06c:	461d      	mov	r5, r3
 800e06e:	e7ea      	b.n	800e046 <_dtoa_r+0x69e>
 800e070:	2200      	movs	r2, #0
 800e072:	4b9b      	ldr	r3, [pc, #620]	; (800e2e0 <_dtoa_r+0x938>)
 800e074:	f7f2 fac0 	bl	80005f8 <__aeabi_dmul>
 800e078:	2200      	movs	r2, #0
 800e07a:	2300      	movs	r3, #0
 800e07c:	4606      	mov	r6, r0
 800e07e:	460f      	mov	r7, r1
 800e080:	f7f2 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 800e084:	2800      	cmp	r0, #0
 800e086:	d09a      	beq.n	800dfbe <_dtoa_r+0x616>
 800e088:	e7cb      	b.n	800e022 <_dtoa_r+0x67a>
 800e08a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	f000 808b 	beq.w	800e1a8 <_dtoa_r+0x800>
 800e092:	9a06      	ldr	r2, [sp, #24]
 800e094:	2a01      	cmp	r2, #1
 800e096:	dc6e      	bgt.n	800e176 <_dtoa_r+0x7ce>
 800e098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e09a:	2a00      	cmp	r2, #0
 800e09c:	d067      	beq.n	800e16e <_dtoa_r+0x7c6>
 800e09e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e0a2:	9f07      	ldr	r7, [sp, #28]
 800e0a4:	9d05      	ldr	r5, [sp, #20]
 800e0a6:	9a05      	ldr	r2, [sp, #20]
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	441a      	add	r2, r3
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	9205      	str	r2, [sp, #20]
 800e0b0:	4498      	add	r8, r3
 800e0b2:	f001 f875 	bl	800f1a0 <__i2b>
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	2d00      	cmp	r5, #0
 800e0ba:	dd0c      	ble.n	800e0d6 <_dtoa_r+0x72e>
 800e0bc:	f1b8 0f00 	cmp.w	r8, #0
 800e0c0:	dd09      	ble.n	800e0d6 <_dtoa_r+0x72e>
 800e0c2:	4545      	cmp	r5, r8
 800e0c4:	9a05      	ldr	r2, [sp, #20]
 800e0c6:	462b      	mov	r3, r5
 800e0c8:	bfa8      	it	ge
 800e0ca:	4643      	movge	r3, r8
 800e0cc:	1ad2      	subs	r2, r2, r3
 800e0ce:	9205      	str	r2, [sp, #20]
 800e0d0:	1aed      	subs	r5, r5, r3
 800e0d2:	eba8 0803 	sub.w	r8, r8, r3
 800e0d6:	9b07      	ldr	r3, [sp, #28]
 800e0d8:	b1eb      	cbz	r3, 800e116 <_dtoa_r+0x76e>
 800e0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d067      	beq.n	800e1b0 <_dtoa_r+0x808>
 800e0e0:	b18f      	cbz	r7, 800e106 <_dtoa_r+0x75e>
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	463a      	mov	r2, r7
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f001 f8fa 	bl	800f2e0 <__pow5mult>
 800e0ec:	9a04      	ldr	r2, [sp, #16]
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	4606      	mov	r6, r0
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f001 f85d 	bl	800f1b2 <__multiply>
 800e0f8:	9904      	ldr	r1, [sp, #16]
 800e0fa:	9008      	str	r0, [sp, #32]
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f000 ff71 	bl	800efe4 <_Bfree>
 800e102:	9b08      	ldr	r3, [sp, #32]
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	9b07      	ldr	r3, [sp, #28]
 800e108:	1bda      	subs	r2, r3, r7
 800e10a:	d004      	beq.n	800e116 <_dtoa_r+0x76e>
 800e10c:	9904      	ldr	r1, [sp, #16]
 800e10e:	4620      	mov	r0, r4
 800e110:	f001 f8e6 	bl	800f2e0 <__pow5mult>
 800e114:	9004      	str	r0, [sp, #16]
 800e116:	2101      	movs	r1, #1
 800e118:	4620      	mov	r0, r4
 800e11a:	f001 f841 	bl	800f1a0 <__i2b>
 800e11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e120:	4607      	mov	r7, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 81d0 	beq.w	800e4c8 <_dtoa_r+0xb20>
 800e128:	461a      	mov	r2, r3
 800e12a:	4601      	mov	r1, r0
 800e12c:	4620      	mov	r0, r4
 800e12e:	f001 f8d7 	bl	800f2e0 <__pow5mult>
 800e132:	9b06      	ldr	r3, [sp, #24]
 800e134:	2b01      	cmp	r3, #1
 800e136:	4607      	mov	r7, r0
 800e138:	dc40      	bgt.n	800e1bc <_dtoa_r+0x814>
 800e13a:	9b00      	ldr	r3, [sp, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d139      	bne.n	800e1b4 <_dtoa_r+0x80c>
 800e140:	9b01      	ldr	r3, [sp, #4]
 800e142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e146:	2b00      	cmp	r3, #0
 800e148:	d136      	bne.n	800e1b8 <_dtoa_r+0x810>
 800e14a:	9b01      	ldr	r3, [sp, #4]
 800e14c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e150:	0d1b      	lsrs	r3, r3, #20
 800e152:	051b      	lsls	r3, r3, #20
 800e154:	b12b      	cbz	r3, 800e162 <_dtoa_r+0x7ba>
 800e156:	9b05      	ldr	r3, [sp, #20]
 800e158:	3301      	adds	r3, #1
 800e15a:	9305      	str	r3, [sp, #20]
 800e15c:	f108 0801 	add.w	r8, r8, #1
 800e160:	2301      	movs	r3, #1
 800e162:	9307      	str	r3, [sp, #28]
 800e164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e166:	2b00      	cmp	r3, #0
 800e168:	d12a      	bne.n	800e1c0 <_dtoa_r+0x818>
 800e16a:	2001      	movs	r0, #1
 800e16c:	e030      	b.n	800e1d0 <_dtoa_r+0x828>
 800e16e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e170:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e174:	e795      	b.n	800e0a2 <_dtoa_r+0x6fa>
 800e176:	9b07      	ldr	r3, [sp, #28]
 800e178:	f109 37ff 	add.w	r7, r9, #4294967295
 800e17c:	42bb      	cmp	r3, r7
 800e17e:	bfbf      	itttt	lt
 800e180:	9b07      	ldrlt	r3, [sp, #28]
 800e182:	9707      	strlt	r7, [sp, #28]
 800e184:	1afa      	sublt	r2, r7, r3
 800e186:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e188:	bfbb      	ittet	lt
 800e18a:	189b      	addlt	r3, r3, r2
 800e18c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e18e:	1bdf      	subge	r7, r3, r7
 800e190:	2700      	movlt	r7, #0
 800e192:	f1b9 0f00 	cmp.w	r9, #0
 800e196:	bfb5      	itete	lt
 800e198:	9b05      	ldrlt	r3, [sp, #20]
 800e19a:	9d05      	ldrge	r5, [sp, #20]
 800e19c:	eba3 0509 	sublt.w	r5, r3, r9
 800e1a0:	464b      	movge	r3, r9
 800e1a2:	bfb8      	it	lt
 800e1a4:	2300      	movlt	r3, #0
 800e1a6:	e77e      	b.n	800e0a6 <_dtoa_r+0x6fe>
 800e1a8:	9f07      	ldr	r7, [sp, #28]
 800e1aa:	9d05      	ldr	r5, [sp, #20]
 800e1ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e1ae:	e783      	b.n	800e0b8 <_dtoa_r+0x710>
 800e1b0:	9a07      	ldr	r2, [sp, #28]
 800e1b2:	e7ab      	b.n	800e10c <_dtoa_r+0x764>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e7d4      	b.n	800e162 <_dtoa_r+0x7ba>
 800e1b8:	9b00      	ldr	r3, [sp, #0]
 800e1ba:	e7d2      	b.n	800e162 <_dtoa_r+0x7ba>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e1c6:	6918      	ldr	r0, [r3, #16]
 800e1c8:	f000 ff9c 	bl	800f104 <__hi0bits>
 800e1cc:	f1c0 0020 	rsb	r0, r0, #32
 800e1d0:	4440      	add	r0, r8
 800e1d2:	f010 001f 	ands.w	r0, r0, #31
 800e1d6:	d047      	beq.n	800e268 <_dtoa_r+0x8c0>
 800e1d8:	f1c0 0320 	rsb	r3, r0, #32
 800e1dc:	2b04      	cmp	r3, #4
 800e1de:	dd3b      	ble.n	800e258 <_dtoa_r+0x8b0>
 800e1e0:	9b05      	ldr	r3, [sp, #20]
 800e1e2:	f1c0 001c 	rsb	r0, r0, #28
 800e1e6:	4403      	add	r3, r0
 800e1e8:	9305      	str	r3, [sp, #20]
 800e1ea:	4405      	add	r5, r0
 800e1ec:	4480      	add	r8, r0
 800e1ee:	9b05      	ldr	r3, [sp, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dd05      	ble.n	800e200 <_dtoa_r+0x858>
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	9904      	ldr	r1, [sp, #16]
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f001 f8bf 	bl	800f37c <__lshift>
 800e1fe:	9004      	str	r0, [sp, #16]
 800e200:	f1b8 0f00 	cmp.w	r8, #0
 800e204:	dd05      	ble.n	800e212 <_dtoa_r+0x86a>
 800e206:	4639      	mov	r1, r7
 800e208:	4642      	mov	r2, r8
 800e20a:	4620      	mov	r0, r4
 800e20c:	f001 f8b6 	bl	800f37c <__lshift>
 800e210:	4607      	mov	r7, r0
 800e212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e214:	b353      	cbz	r3, 800e26c <_dtoa_r+0x8c4>
 800e216:	4639      	mov	r1, r7
 800e218:	9804      	ldr	r0, [sp, #16]
 800e21a:	f001 f903 	bl	800f424 <__mcmp>
 800e21e:	2800      	cmp	r0, #0
 800e220:	da24      	bge.n	800e26c <_dtoa_r+0x8c4>
 800e222:	2300      	movs	r3, #0
 800e224:	220a      	movs	r2, #10
 800e226:	9904      	ldr	r1, [sp, #16]
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 fef2 	bl	800f012 <__multadd>
 800e22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e230:	9004      	str	r0, [sp, #16]
 800e232:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e236:	2b00      	cmp	r3, #0
 800e238:	f000 814d 	beq.w	800e4d6 <_dtoa_r+0xb2e>
 800e23c:	2300      	movs	r3, #0
 800e23e:	4631      	mov	r1, r6
 800e240:	220a      	movs	r2, #10
 800e242:	4620      	mov	r0, r4
 800e244:	f000 fee5 	bl	800f012 <__multadd>
 800e248:	9b02      	ldr	r3, [sp, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	4606      	mov	r6, r0
 800e24e:	dc4f      	bgt.n	800e2f0 <_dtoa_r+0x948>
 800e250:	9b06      	ldr	r3, [sp, #24]
 800e252:	2b02      	cmp	r3, #2
 800e254:	dd4c      	ble.n	800e2f0 <_dtoa_r+0x948>
 800e256:	e011      	b.n	800e27c <_dtoa_r+0x8d4>
 800e258:	d0c9      	beq.n	800e1ee <_dtoa_r+0x846>
 800e25a:	9a05      	ldr	r2, [sp, #20]
 800e25c:	331c      	adds	r3, #28
 800e25e:	441a      	add	r2, r3
 800e260:	9205      	str	r2, [sp, #20]
 800e262:	441d      	add	r5, r3
 800e264:	4498      	add	r8, r3
 800e266:	e7c2      	b.n	800e1ee <_dtoa_r+0x846>
 800e268:	4603      	mov	r3, r0
 800e26a:	e7f6      	b.n	800e25a <_dtoa_r+0x8b2>
 800e26c:	f1b9 0f00 	cmp.w	r9, #0
 800e270:	dc38      	bgt.n	800e2e4 <_dtoa_r+0x93c>
 800e272:	9b06      	ldr	r3, [sp, #24]
 800e274:	2b02      	cmp	r3, #2
 800e276:	dd35      	ble.n	800e2e4 <_dtoa_r+0x93c>
 800e278:	f8cd 9008 	str.w	r9, [sp, #8]
 800e27c:	9b02      	ldr	r3, [sp, #8]
 800e27e:	b963      	cbnz	r3, 800e29a <_dtoa_r+0x8f2>
 800e280:	4639      	mov	r1, r7
 800e282:	2205      	movs	r2, #5
 800e284:	4620      	mov	r0, r4
 800e286:	f000 fec4 	bl	800f012 <__multadd>
 800e28a:	4601      	mov	r1, r0
 800e28c:	4607      	mov	r7, r0
 800e28e:	9804      	ldr	r0, [sp, #16]
 800e290:	f001 f8c8 	bl	800f424 <__mcmp>
 800e294:	2800      	cmp	r0, #0
 800e296:	f73f adcc 	bgt.w	800de32 <_dtoa_r+0x48a>
 800e29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e29c:	465d      	mov	r5, fp
 800e29e:	ea6f 0a03 	mvn.w	sl, r3
 800e2a2:	f04f 0900 	mov.w	r9, #0
 800e2a6:	4639      	mov	r1, r7
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f000 fe9b 	bl	800efe4 <_Bfree>
 800e2ae:	2e00      	cmp	r6, #0
 800e2b0:	f43f aeb7 	beq.w	800e022 <_dtoa_r+0x67a>
 800e2b4:	f1b9 0f00 	cmp.w	r9, #0
 800e2b8:	d005      	beq.n	800e2c6 <_dtoa_r+0x91e>
 800e2ba:	45b1      	cmp	r9, r6
 800e2bc:	d003      	beq.n	800e2c6 <_dtoa_r+0x91e>
 800e2be:	4649      	mov	r1, r9
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f000 fe8f 	bl	800efe4 <_Bfree>
 800e2c6:	4631      	mov	r1, r6
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f000 fe8b 	bl	800efe4 <_Bfree>
 800e2ce:	e6a8      	b.n	800e022 <_dtoa_r+0x67a>
 800e2d0:	2700      	movs	r7, #0
 800e2d2:	463e      	mov	r6, r7
 800e2d4:	e7e1      	b.n	800e29a <_dtoa_r+0x8f2>
 800e2d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e2da:	463e      	mov	r6, r7
 800e2dc:	e5a9      	b.n	800de32 <_dtoa_r+0x48a>
 800e2de:	bf00      	nop
 800e2e0:	40240000 	.word	0x40240000
 800e2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f000 80fa 	beq.w	800e4e4 <_dtoa_r+0xb3c>
 800e2f0:	2d00      	cmp	r5, #0
 800e2f2:	dd05      	ble.n	800e300 <_dtoa_r+0x958>
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	462a      	mov	r2, r5
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f001 f83f 	bl	800f37c <__lshift>
 800e2fe:	4606      	mov	r6, r0
 800e300:	9b07      	ldr	r3, [sp, #28]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d04c      	beq.n	800e3a0 <_dtoa_r+0x9f8>
 800e306:	6871      	ldr	r1, [r6, #4]
 800e308:	4620      	mov	r0, r4
 800e30a:	f000 fe37 	bl	800ef7c <_Balloc>
 800e30e:	6932      	ldr	r2, [r6, #16]
 800e310:	3202      	adds	r2, #2
 800e312:	4605      	mov	r5, r0
 800e314:	0092      	lsls	r2, r2, #2
 800e316:	f106 010c 	add.w	r1, r6, #12
 800e31a:	300c      	adds	r0, #12
 800e31c:	f7fd fc54 	bl	800bbc8 <memcpy>
 800e320:	2201      	movs	r2, #1
 800e322:	4629      	mov	r1, r5
 800e324:	4620      	mov	r0, r4
 800e326:	f001 f829 	bl	800f37c <__lshift>
 800e32a:	9b00      	ldr	r3, [sp, #0]
 800e32c:	f8cd b014 	str.w	fp, [sp, #20]
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	46b1      	mov	r9, r6
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	4606      	mov	r6, r0
 800e33a:	4639      	mov	r1, r7
 800e33c:	9804      	ldr	r0, [sp, #16]
 800e33e:	f7ff faa5 	bl	800d88c <quorem>
 800e342:	4649      	mov	r1, r9
 800e344:	4605      	mov	r5, r0
 800e346:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e34a:	9804      	ldr	r0, [sp, #16]
 800e34c:	f001 f86a 	bl	800f424 <__mcmp>
 800e350:	4632      	mov	r2, r6
 800e352:	9000      	str	r0, [sp, #0]
 800e354:	4639      	mov	r1, r7
 800e356:	4620      	mov	r0, r4
 800e358:	f001 f87e 	bl	800f458 <__mdiff>
 800e35c:	68c3      	ldr	r3, [r0, #12]
 800e35e:	4602      	mov	r2, r0
 800e360:	bb03      	cbnz	r3, 800e3a4 <_dtoa_r+0x9fc>
 800e362:	4601      	mov	r1, r0
 800e364:	9008      	str	r0, [sp, #32]
 800e366:	9804      	ldr	r0, [sp, #16]
 800e368:	f001 f85c 	bl	800f424 <__mcmp>
 800e36c:	9a08      	ldr	r2, [sp, #32]
 800e36e:	4603      	mov	r3, r0
 800e370:	4611      	mov	r1, r2
 800e372:	4620      	mov	r0, r4
 800e374:	9308      	str	r3, [sp, #32]
 800e376:	f000 fe35 	bl	800efe4 <_Bfree>
 800e37a:	9b08      	ldr	r3, [sp, #32]
 800e37c:	b9a3      	cbnz	r3, 800e3a8 <_dtoa_r+0xa00>
 800e37e:	9a06      	ldr	r2, [sp, #24]
 800e380:	b992      	cbnz	r2, 800e3a8 <_dtoa_r+0xa00>
 800e382:	9a07      	ldr	r2, [sp, #28]
 800e384:	b982      	cbnz	r2, 800e3a8 <_dtoa_r+0xa00>
 800e386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e38a:	d029      	beq.n	800e3e0 <_dtoa_r+0xa38>
 800e38c:	9b00      	ldr	r3, [sp, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dd01      	ble.n	800e396 <_dtoa_r+0x9ee>
 800e392:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e396:	9b05      	ldr	r3, [sp, #20]
 800e398:	1c5d      	adds	r5, r3, #1
 800e39a:	f883 8000 	strb.w	r8, [r3]
 800e39e:	e782      	b.n	800e2a6 <_dtoa_r+0x8fe>
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	e7c2      	b.n	800e32a <_dtoa_r+0x982>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e7e3      	b.n	800e370 <_dtoa_r+0x9c8>
 800e3a8:	9a00      	ldr	r2, [sp, #0]
 800e3aa:	2a00      	cmp	r2, #0
 800e3ac:	db04      	blt.n	800e3b8 <_dtoa_r+0xa10>
 800e3ae:	d125      	bne.n	800e3fc <_dtoa_r+0xa54>
 800e3b0:	9a06      	ldr	r2, [sp, #24]
 800e3b2:	bb1a      	cbnz	r2, 800e3fc <_dtoa_r+0xa54>
 800e3b4:	9a07      	ldr	r2, [sp, #28]
 800e3b6:	bb0a      	cbnz	r2, 800e3fc <_dtoa_r+0xa54>
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	ddec      	ble.n	800e396 <_dtoa_r+0x9ee>
 800e3bc:	2201      	movs	r2, #1
 800e3be:	9904      	ldr	r1, [sp, #16]
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f000 ffdb 	bl	800f37c <__lshift>
 800e3c6:	4639      	mov	r1, r7
 800e3c8:	9004      	str	r0, [sp, #16]
 800e3ca:	f001 f82b 	bl	800f424 <__mcmp>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	dc03      	bgt.n	800e3da <_dtoa_r+0xa32>
 800e3d2:	d1e0      	bne.n	800e396 <_dtoa_r+0x9ee>
 800e3d4:	f018 0f01 	tst.w	r8, #1
 800e3d8:	d0dd      	beq.n	800e396 <_dtoa_r+0x9ee>
 800e3da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e3de:	d1d8      	bne.n	800e392 <_dtoa_r+0x9ea>
 800e3e0:	9b05      	ldr	r3, [sp, #20]
 800e3e2:	9a05      	ldr	r2, [sp, #20]
 800e3e4:	1c5d      	adds	r5, r3, #1
 800e3e6:	2339      	movs	r3, #57	; 0x39
 800e3e8:	7013      	strb	r3, [r2, #0]
 800e3ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3ee:	2b39      	cmp	r3, #57	; 0x39
 800e3f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e3f4:	d04f      	beq.n	800e496 <_dtoa_r+0xaee>
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	7013      	strb	r3, [r2, #0]
 800e3fa:	e754      	b.n	800e2a6 <_dtoa_r+0x8fe>
 800e3fc:	9a05      	ldr	r2, [sp, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f102 0501 	add.w	r5, r2, #1
 800e404:	dd06      	ble.n	800e414 <_dtoa_r+0xa6c>
 800e406:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e40a:	d0e9      	beq.n	800e3e0 <_dtoa_r+0xa38>
 800e40c:	f108 0801 	add.w	r8, r8, #1
 800e410:	9b05      	ldr	r3, [sp, #20]
 800e412:	e7c2      	b.n	800e39a <_dtoa_r+0x9f2>
 800e414:	9a02      	ldr	r2, [sp, #8]
 800e416:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e41a:	eba5 030b 	sub.w	r3, r5, fp
 800e41e:	4293      	cmp	r3, r2
 800e420:	d021      	beq.n	800e466 <_dtoa_r+0xabe>
 800e422:	2300      	movs	r3, #0
 800e424:	220a      	movs	r2, #10
 800e426:	9904      	ldr	r1, [sp, #16]
 800e428:	4620      	mov	r0, r4
 800e42a:	f000 fdf2 	bl	800f012 <__multadd>
 800e42e:	45b1      	cmp	r9, r6
 800e430:	9004      	str	r0, [sp, #16]
 800e432:	f04f 0300 	mov.w	r3, #0
 800e436:	f04f 020a 	mov.w	r2, #10
 800e43a:	4649      	mov	r1, r9
 800e43c:	4620      	mov	r0, r4
 800e43e:	d105      	bne.n	800e44c <_dtoa_r+0xaa4>
 800e440:	f000 fde7 	bl	800f012 <__multadd>
 800e444:	4681      	mov	r9, r0
 800e446:	4606      	mov	r6, r0
 800e448:	9505      	str	r5, [sp, #20]
 800e44a:	e776      	b.n	800e33a <_dtoa_r+0x992>
 800e44c:	f000 fde1 	bl	800f012 <__multadd>
 800e450:	4631      	mov	r1, r6
 800e452:	4681      	mov	r9, r0
 800e454:	2300      	movs	r3, #0
 800e456:	220a      	movs	r2, #10
 800e458:	4620      	mov	r0, r4
 800e45a:	f000 fdda 	bl	800f012 <__multadd>
 800e45e:	4606      	mov	r6, r0
 800e460:	e7f2      	b.n	800e448 <_dtoa_r+0xaa0>
 800e462:	f04f 0900 	mov.w	r9, #0
 800e466:	2201      	movs	r2, #1
 800e468:	9904      	ldr	r1, [sp, #16]
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 ff86 	bl	800f37c <__lshift>
 800e470:	4639      	mov	r1, r7
 800e472:	9004      	str	r0, [sp, #16]
 800e474:	f000 ffd6 	bl	800f424 <__mcmp>
 800e478:	2800      	cmp	r0, #0
 800e47a:	dcb6      	bgt.n	800e3ea <_dtoa_r+0xa42>
 800e47c:	d102      	bne.n	800e484 <_dtoa_r+0xadc>
 800e47e:	f018 0f01 	tst.w	r8, #1
 800e482:	d1b2      	bne.n	800e3ea <_dtoa_r+0xa42>
 800e484:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e488:	2b30      	cmp	r3, #48	; 0x30
 800e48a:	f105 32ff 	add.w	r2, r5, #4294967295
 800e48e:	f47f af0a 	bne.w	800e2a6 <_dtoa_r+0x8fe>
 800e492:	4615      	mov	r5, r2
 800e494:	e7f6      	b.n	800e484 <_dtoa_r+0xadc>
 800e496:	4593      	cmp	fp, r2
 800e498:	d105      	bne.n	800e4a6 <_dtoa_r+0xafe>
 800e49a:	2331      	movs	r3, #49	; 0x31
 800e49c:	f10a 0a01 	add.w	sl, sl, #1
 800e4a0:	f88b 3000 	strb.w	r3, [fp]
 800e4a4:	e6ff      	b.n	800e2a6 <_dtoa_r+0x8fe>
 800e4a6:	4615      	mov	r5, r2
 800e4a8:	e79f      	b.n	800e3ea <_dtoa_r+0xa42>
 800e4aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e510 <_dtoa_r+0xb68>
 800e4ae:	e007      	b.n	800e4c0 <_dtoa_r+0xb18>
 800e4b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e514 <_dtoa_r+0xb6c>
 800e4b6:	b11b      	cbz	r3, 800e4c0 <_dtoa_r+0xb18>
 800e4b8:	f10b 0308 	add.w	r3, fp, #8
 800e4bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	4658      	mov	r0, fp
 800e4c2:	b017      	add	sp, #92	; 0x5c
 800e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c8:	9b06      	ldr	r3, [sp, #24]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	f77f ae35 	ble.w	800e13a <_dtoa_r+0x792>
 800e4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4d2:	9307      	str	r3, [sp, #28]
 800e4d4:	e649      	b.n	800e16a <_dtoa_r+0x7c2>
 800e4d6:	9b02      	ldr	r3, [sp, #8]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	dc03      	bgt.n	800e4e4 <_dtoa_r+0xb3c>
 800e4dc:	9b06      	ldr	r3, [sp, #24]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	f73f aecc 	bgt.w	800e27c <_dtoa_r+0x8d4>
 800e4e4:	465d      	mov	r5, fp
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	9804      	ldr	r0, [sp, #16]
 800e4ea:	f7ff f9cf 	bl	800d88c <quorem>
 800e4ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e4f2:	f805 8b01 	strb.w	r8, [r5], #1
 800e4f6:	9a02      	ldr	r2, [sp, #8]
 800e4f8:	eba5 030b 	sub.w	r3, r5, fp
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	ddb0      	ble.n	800e462 <_dtoa_r+0xaba>
 800e500:	2300      	movs	r3, #0
 800e502:	220a      	movs	r2, #10
 800e504:	9904      	ldr	r1, [sp, #16]
 800e506:	4620      	mov	r0, r4
 800e508:	f000 fd83 	bl	800f012 <__multadd>
 800e50c:	9004      	str	r0, [sp, #16]
 800e50e:	e7ea      	b.n	800e4e6 <_dtoa_r+0xb3e>
 800e510:	080102ec 	.word	0x080102ec
 800e514:	08010368 	.word	0x08010368

0800e518 <__sflush_r>:
 800e518:	898a      	ldrh	r2, [r1, #12]
 800e51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e51e:	4605      	mov	r5, r0
 800e520:	0710      	lsls	r0, r2, #28
 800e522:	460c      	mov	r4, r1
 800e524:	d458      	bmi.n	800e5d8 <__sflush_r+0xc0>
 800e526:	684b      	ldr	r3, [r1, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	dc05      	bgt.n	800e538 <__sflush_r+0x20>
 800e52c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e52e:	2b00      	cmp	r3, #0
 800e530:	dc02      	bgt.n	800e538 <__sflush_r+0x20>
 800e532:	2000      	movs	r0, #0
 800e534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e53a:	2e00      	cmp	r6, #0
 800e53c:	d0f9      	beq.n	800e532 <__sflush_r+0x1a>
 800e53e:	2300      	movs	r3, #0
 800e540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e544:	682f      	ldr	r7, [r5, #0]
 800e546:	6a21      	ldr	r1, [r4, #32]
 800e548:	602b      	str	r3, [r5, #0]
 800e54a:	d032      	beq.n	800e5b2 <__sflush_r+0x9a>
 800e54c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	075a      	lsls	r2, r3, #29
 800e552:	d505      	bpl.n	800e560 <__sflush_r+0x48>
 800e554:	6863      	ldr	r3, [r4, #4]
 800e556:	1ac0      	subs	r0, r0, r3
 800e558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e55a:	b10b      	cbz	r3, 800e560 <__sflush_r+0x48>
 800e55c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e55e:	1ac0      	subs	r0, r0, r3
 800e560:	2300      	movs	r3, #0
 800e562:	4602      	mov	r2, r0
 800e564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e566:	6a21      	ldr	r1, [r4, #32]
 800e568:	4628      	mov	r0, r5
 800e56a:	47b0      	blx	r6
 800e56c:	1c43      	adds	r3, r0, #1
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	d106      	bne.n	800e580 <__sflush_r+0x68>
 800e572:	6829      	ldr	r1, [r5, #0]
 800e574:	291d      	cmp	r1, #29
 800e576:	d848      	bhi.n	800e60a <__sflush_r+0xf2>
 800e578:	4a29      	ldr	r2, [pc, #164]	; (800e620 <__sflush_r+0x108>)
 800e57a:	40ca      	lsrs	r2, r1
 800e57c:	07d6      	lsls	r6, r2, #31
 800e57e:	d544      	bpl.n	800e60a <__sflush_r+0xf2>
 800e580:	2200      	movs	r2, #0
 800e582:	6062      	str	r2, [r4, #4]
 800e584:	04d9      	lsls	r1, r3, #19
 800e586:	6922      	ldr	r2, [r4, #16]
 800e588:	6022      	str	r2, [r4, #0]
 800e58a:	d504      	bpl.n	800e596 <__sflush_r+0x7e>
 800e58c:	1c42      	adds	r2, r0, #1
 800e58e:	d101      	bne.n	800e594 <__sflush_r+0x7c>
 800e590:	682b      	ldr	r3, [r5, #0]
 800e592:	b903      	cbnz	r3, 800e596 <__sflush_r+0x7e>
 800e594:	6560      	str	r0, [r4, #84]	; 0x54
 800e596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e598:	602f      	str	r7, [r5, #0]
 800e59a:	2900      	cmp	r1, #0
 800e59c:	d0c9      	beq.n	800e532 <__sflush_r+0x1a>
 800e59e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5a2:	4299      	cmp	r1, r3
 800e5a4:	d002      	beq.n	800e5ac <__sflush_r+0x94>
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	f001 f8f6 	bl	800f798 <_free_r>
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	6360      	str	r0, [r4, #52]	; 0x34
 800e5b0:	e7c0      	b.n	800e534 <__sflush_r+0x1c>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b0      	blx	r6
 800e5b8:	1c41      	adds	r1, r0, #1
 800e5ba:	d1c8      	bne.n	800e54e <__sflush_r+0x36>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d0c5      	beq.n	800e54e <__sflush_r+0x36>
 800e5c2:	2b1d      	cmp	r3, #29
 800e5c4:	d001      	beq.n	800e5ca <__sflush_r+0xb2>
 800e5c6:	2b16      	cmp	r3, #22
 800e5c8:	d101      	bne.n	800e5ce <__sflush_r+0xb6>
 800e5ca:	602f      	str	r7, [r5, #0]
 800e5cc:	e7b1      	b.n	800e532 <__sflush_r+0x1a>
 800e5ce:	89a3      	ldrh	r3, [r4, #12]
 800e5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5d4:	81a3      	strh	r3, [r4, #12]
 800e5d6:	e7ad      	b.n	800e534 <__sflush_r+0x1c>
 800e5d8:	690f      	ldr	r7, [r1, #16]
 800e5da:	2f00      	cmp	r7, #0
 800e5dc:	d0a9      	beq.n	800e532 <__sflush_r+0x1a>
 800e5de:	0793      	lsls	r3, r2, #30
 800e5e0:	680e      	ldr	r6, [r1, #0]
 800e5e2:	bf08      	it	eq
 800e5e4:	694b      	ldreq	r3, [r1, #20]
 800e5e6:	600f      	str	r7, [r1, #0]
 800e5e8:	bf18      	it	ne
 800e5ea:	2300      	movne	r3, #0
 800e5ec:	eba6 0807 	sub.w	r8, r6, r7
 800e5f0:	608b      	str	r3, [r1, #8]
 800e5f2:	f1b8 0f00 	cmp.w	r8, #0
 800e5f6:	dd9c      	ble.n	800e532 <__sflush_r+0x1a>
 800e5f8:	4643      	mov	r3, r8
 800e5fa:	463a      	mov	r2, r7
 800e5fc:	6a21      	ldr	r1, [r4, #32]
 800e5fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e600:	4628      	mov	r0, r5
 800e602:	47b0      	blx	r6
 800e604:	2800      	cmp	r0, #0
 800e606:	dc06      	bgt.n	800e616 <__sflush_r+0xfe>
 800e608:	89a3      	ldrh	r3, [r4, #12]
 800e60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e60e:	81a3      	strh	r3, [r4, #12]
 800e610:	f04f 30ff 	mov.w	r0, #4294967295
 800e614:	e78e      	b.n	800e534 <__sflush_r+0x1c>
 800e616:	4407      	add	r7, r0
 800e618:	eba8 0800 	sub.w	r8, r8, r0
 800e61c:	e7e9      	b.n	800e5f2 <__sflush_r+0xda>
 800e61e:	bf00      	nop
 800e620:	20400001 	.word	0x20400001

0800e624 <_fflush_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	690b      	ldr	r3, [r1, #16]
 800e628:	4605      	mov	r5, r0
 800e62a:	460c      	mov	r4, r1
 800e62c:	b1db      	cbz	r3, 800e666 <_fflush_r+0x42>
 800e62e:	b118      	cbz	r0, 800e638 <_fflush_r+0x14>
 800e630:	6983      	ldr	r3, [r0, #24]
 800e632:	b90b      	cbnz	r3, 800e638 <_fflush_r+0x14>
 800e634:	f000 f860 	bl	800e6f8 <__sinit>
 800e638:	4b0c      	ldr	r3, [pc, #48]	; (800e66c <_fflush_r+0x48>)
 800e63a:	429c      	cmp	r4, r3
 800e63c:	d109      	bne.n	800e652 <_fflush_r+0x2e>
 800e63e:	686c      	ldr	r4, [r5, #4]
 800e640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e644:	b17b      	cbz	r3, 800e666 <_fflush_r+0x42>
 800e646:	4621      	mov	r1, r4
 800e648:	4628      	mov	r0, r5
 800e64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e64e:	f7ff bf63 	b.w	800e518 <__sflush_r>
 800e652:	4b07      	ldr	r3, [pc, #28]	; (800e670 <_fflush_r+0x4c>)
 800e654:	429c      	cmp	r4, r3
 800e656:	d101      	bne.n	800e65c <_fflush_r+0x38>
 800e658:	68ac      	ldr	r4, [r5, #8]
 800e65a:	e7f1      	b.n	800e640 <_fflush_r+0x1c>
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <_fflush_r+0x50>)
 800e65e:	429c      	cmp	r4, r3
 800e660:	bf08      	it	eq
 800e662:	68ec      	ldreq	r4, [r5, #12]
 800e664:	e7ec      	b.n	800e640 <_fflush_r+0x1c>
 800e666:	2000      	movs	r0, #0
 800e668:	bd38      	pop	{r3, r4, r5, pc}
 800e66a:	bf00      	nop
 800e66c:	08010398 	.word	0x08010398
 800e670:	080103b8 	.word	0x080103b8
 800e674:	08010378 	.word	0x08010378

0800e678 <std>:
 800e678:	2300      	movs	r3, #0
 800e67a:	b510      	push	{r4, lr}
 800e67c:	4604      	mov	r4, r0
 800e67e:	e9c0 3300 	strd	r3, r3, [r0]
 800e682:	6083      	str	r3, [r0, #8]
 800e684:	8181      	strh	r1, [r0, #12]
 800e686:	6643      	str	r3, [r0, #100]	; 0x64
 800e688:	81c2      	strh	r2, [r0, #14]
 800e68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e68e:	6183      	str	r3, [r0, #24]
 800e690:	4619      	mov	r1, r3
 800e692:	2208      	movs	r2, #8
 800e694:	305c      	adds	r0, #92	; 0x5c
 800e696:	f7fd faa2 	bl	800bbde <memset>
 800e69a:	4b05      	ldr	r3, [pc, #20]	; (800e6b0 <std+0x38>)
 800e69c:	6263      	str	r3, [r4, #36]	; 0x24
 800e69e:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <std+0x3c>)
 800e6a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6a2:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <std+0x40>)
 800e6a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6a6:	4b05      	ldr	r3, [pc, #20]	; (800e6bc <std+0x44>)
 800e6a8:	6224      	str	r4, [r4, #32]
 800e6aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e6ac:	bd10      	pop	{r4, pc}
 800e6ae:	bf00      	nop
 800e6b0:	0800fe2d 	.word	0x0800fe2d
 800e6b4:	0800fe4f 	.word	0x0800fe4f
 800e6b8:	0800fe87 	.word	0x0800fe87
 800e6bc:	0800feab 	.word	0x0800feab

0800e6c0 <_cleanup_r>:
 800e6c0:	4901      	ldr	r1, [pc, #4]	; (800e6c8 <_cleanup_r+0x8>)
 800e6c2:	f000 b885 	b.w	800e7d0 <_fwalk_reent>
 800e6c6:	bf00      	nop
 800e6c8:	0800e625 	.word	0x0800e625

0800e6cc <__sfmoreglue>:
 800e6cc:	b570      	push	{r4, r5, r6, lr}
 800e6ce:	1e4a      	subs	r2, r1, #1
 800e6d0:	2568      	movs	r5, #104	; 0x68
 800e6d2:	4355      	muls	r5, r2
 800e6d4:	460e      	mov	r6, r1
 800e6d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6da:	f001 f8ab 	bl	800f834 <_malloc_r>
 800e6de:	4604      	mov	r4, r0
 800e6e0:	b140      	cbz	r0, 800e6f4 <__sfmoreglue+0x28>
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e6e8:	300c      	adds	r0, #12
 800e6ea:	60a0      	str	r0, [r4, #8]
 800e6ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6f0:	f7fd fa75 	bl	800bbde <memset>
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}

0800e6f8 <__sinit>:
 800e6f8:	6983      	ldr	r3, [r0, #24]
 800e6fa:	b510      	push	{r4, lr}
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	bb33      	cbnz	r3, 800e74e <__sinit+0x56>
 800e700:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e704:	6503      	str	r3, [r0, #80]	; 0x50
 800e706:	4b12      	ldr	r3, [pc, #72]	; (800e750 <__sinit+0x58>)
 800e708:	4a12      	ldr	r2, [pc, #72]	; (800e754 <__sinit+0x5c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	6282      	str	r2, [r0, #40]	; 0x28
 800e70e:	4298      	cmp	r0, r3
 800e710:	bf04      	itt	eq
 800e712:	2301      	moveq	r3, #1
 800e714:	6183      	streq	r3, [r0, #24]
 800e716:	f000 f81f 	bl	800e758 <__sfp>
 800e71a:	6060      	str	r0, [r4, #4]
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 f81b 	bl	800e758 <__sfp>
 800e722:	60a0      	str	r0, [r4, #8]
 800e724:	4620      	mov	r0, r4
 800e726:	f000 f817 	bl	800e758 <__sfp>
 800e72a:	2200      	movs	r2, #0
 800e72c:	60e0      	str	r0, [r4, #12]
 800e72e:	2104      	movs	r1, #4
 800e730:	6860      	ldr	r0, [r4, #4]
 800e732:	f7ff ffa1 	bl	800e678 <std>
 800e736:	2201      	movs	r2, #1
 800e738:	2109      	movs	r1, #9
 800e73a:	68a0      	ldr	r0, [r4, #8]
 800e73c:	f7ff ff9c 	bl	800e678 <std>
 800e740:	2202      	movs	r2, #2
 800e742:	2112      	movs	r1, #18
 800e744:	68e0      	ldr	r0, [r4, #12]
 800e746:	f7ff ff97 	bl	800e678 <std>
 800e74a:	2301      	movs	r3, #1
 800e74c:	61a3      	str	r3, [r4, #24]
 800e74e:	bd10      	pop	{r4, pc}
 800e750:	080102d8 	.word	0x080102d8
 800e754:	0800e6c1 	.word	0x0800e6c1

0800e758 <__sfp>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	4b1b      	ldr	r3, [pc, #108]	; (800e7c8 <__sfp+0x70>)
 800e75c:	681e      	ldr	r6, [r3, #0]
 800e75e:	69b3      	ldr	r3, [r6, #24]
 800e760:	4607      	mov	r7, r0
 800e762:	b913      	cbnz	r3, 800e76a <__sfp+0x12>
 800e764:	4630      	mov	r0, r6
 800e766:	f7ff ffc7 	bl	800e6f8 <__sinit>
 800e76a:	3648      	adds	r6, #72	; 0x48
 800e76c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e770:	3b01      	subs	r3, #1
 800e772:	d503      	bpl.n	800e77c <__sfp+0x24>
 800e774:	6833      	ldr	r3, [r6, #0]
 800e776:	b133      	cbz	r3, 800e786 <__sfp+0x2e>
 800e778:	6836      	ldr	r6, [r6, #0]
 800e77a:	e7f7      	b.n	800e76c <__sfp+0x14>
 800e77c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e780:	b16d      	cbz	r5, 800e79e <__sfp+0x46>
 800e782:	3468      	adds	r4, #104	; 0x68
 800e784:	e7f4      	b.n	800e770 <__sfp+0x18>
 800e786:	2104      	movs	r1, #4
 800e788:	4638      	mov	r0, r7
 800e78a:	f7ff ff9f 	bl	800e6cc <__sfmoreglue>
 800e78e:	6030      	str	r0, [r6, #0]
 800e790:	2800      	cmp	r0, #0
 800e792:	d1f1      	bne.n	800e778 <__sfp+0x20>
 800e794:	230c      	movs	r3, #12
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	4604      	mov	r4, r0
 800e79a:	4620      	mov	r0, r4
 800e79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e79e:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <__sfp+0x74>)
 800e7a0:	6665      	str	r5, [r4, #100]	; 0x64
 800e7a2:	e9c4 5500 	strd	r5, r5, [r4]
 800e7a6:	60a5      	str	r5, [r4, #8]
 800e7a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e7ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e7b0:	2208      	movs	r2, #8
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7b8:	f7fd fa11 	bl	800bbde <memset>
 800e7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7c4:	e7e9      	b.n	800e79a <__sfp+0x42>
 800e7c6:	bf00      	nop
 800e7c8:	080102d8 	.word	0x080102d8
 800e7cc:	ffff0001 	.word	0xffff0001

0800e7d0 <_fwalk_reent>:
 800e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	4689      	mov	r9, r1
 800e7d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7dc:	2600      	movs	r6, #0
 800e7de:	b914      	cbnz	r4, 800e7e6 <_fwalk_reent+0x16>
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e7ea:	3f01      	subs	r7, #1
 800e7ec:	d501      	bpl.n	800e7f2 <_fwalk_reent+0x22>
 800e7ee:	6824      	ldr	r4, [r4, #0]
 800e7f0:	e7f5      	b.n	800e7de <_fwalk_reent+0xe>
 800e7f2:	89ab      	ldrh	r3, [r5, #12]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d907      	bls.n	800e808 <_fwalk_reent+0x38>
 800e7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	d003      	beq.n	800e808 <_fwalk_reent+0x38>
 800e800:	4629      	mov	r1, r5
 800e802:	4640      	mov	r0, r8
 800e804:	47c8      	blx	r9
 800e806:	4306      	orrs	r6, r0
 800e808:	3568      	adds	r5, #104	; 0x68
 800e80a:	e7ee      	b.n	800e7ea <_fwalk_reent+0x1a>

0800e80c <rshift>:
 800e80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e80e:	6906      	ldr	r6, [r0, #16]
 800e810:	114b      	asrs	r3, r1, #5
 800e812:	429e      	cmp	r6, r3
 800e814:	f100 0414 	add.w	r4, r0, #20
 800e818:	dd30      	ble.n	800e87c <rshift+0x70>
 800e81a:	f011 011f 	ands.w	r1, r1, #31
 800e81e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e822:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e826:	d108      	bne.n	800e83a <rshift+0x2e>
 800e828:	4621      	mov	r1, r4
 800e82a:	42b2      	cmp	r2, r6
 800e82c:	460b      	mov	r3, r1
 800e82e:	d211      	bcs.n	800e854 <rshift+0x48>
 800e830:	f852 3b04 	ldr.w	r3, [r2], #4
 800e834:	f841 3b04 	str.w	r3, [r1], #4
 800e838:	e7f7      	b.n	800e82a <rshift+0x1e>
 800e83a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e83e:	f1c1 0c20 	rsb	ip, r1, #32
 800e842:	40cd      	lsrs	r5, r1
 800e844:	3204      	adds	r2, #4
 800e846:	4623      	mov	r3, r4
 800e848:	42b2      	cmp	r2, r6
 800e84a:	4617      	mov	r7, r2
 800e84c:	d30c      	bcc.n	800e868 <rshift+0x5c>
 800e84e:	601d      	str	r5, [r3, #0]
 800e850:	b105      	cbz	r5, 800e854 <rshift+0x48>
 800e852:	3304      	adds	r3, #4
 800e854:	1b1a      	subs	r2, r3, r4
 800e856:	42a3      	cmp	r3, r4
 800e858:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e85c:	bf08      	it	eq
 800e85e:	2300      	moveq	r3, #0
 800e860:	6102      	str	r2, [r0, #16]
 800e862:	bf08      	it	eq
 800e864:	6143      	streq	r3, [r0, #20]
 800e866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e868:	683f      	ldr	r7, [r7, #0]
 800e86a:	fa07 f70c 	lsl.w	r7, r7, ip
 800e86e:	433d      	orrs	r5, r7
 800e870:	f843 5b04 	str.w	r5, [r3], #4
 800e874:	f852 5b04 	ldr.w	r5, [r2], #4
 800e878:	40cd      	lsrs	r5, r1
 800e87a:	e7e5      	b.n	800e848 <rshift+0x3c>
 800e87c:	4623      	mov	r3, r4
 800e87e:	e7e9      	b.n	800e854 <rshift+0x48>

0800e880 <__hexdig_fun>:
 800e880:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e884:	2b09      	cmp	r3, #9
 800e886:	d802      	bhi.n	800e88e <__hexdig_fun+0xe>
 800e888:	3820      	subs	r0, #32
 800e88a:	b2c0      	uxtb	r0, r0
 800e88c:	4770      	bx	lr
 800e88e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e892:	2b05      	cmp	r3, #5
 800e894:	d801      	bhi.n	800e89a <__hexdig_fun+0x1a>
 800e896:	3847      	subs	r0, #71	; 0x47
 800e898:	e7f7      	b.n	800e88a <__hexdig_fun+0xa>
 800e89a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e89e:	2b05      	cmp	r3, #5
 800e8a0:	d801      	bhi.n	800e8a6 <__hexdig_fun+0x26>
 800e8a2:	3827      	subs	r0, #39	; 0x27
 800e8a4:	e7f1      	b.n	800e88a <__hexdig_fun+0xa>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	4770      	bx	lr

0800e8aa <__gethex>:
 800e8aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ae:	b08b      	sub	sp, #44	; 0x2c
 800e8b0:	468a      	mov	sl, r1
 800e8b2:	9002      	str	r0, [sp, #8]
 800e8b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e8b6:	9306      	str	r3, [sp, #24]
 800e8b8:	4690      	mov	r8, r2
 800e8ba:	f000 fad0 	bl	800ee5e <__localeconv_l>
 800e8be:	6803      	ldr	r3, [r0, #0]
 800e8c0:	9303      	str	r3, [sp, #12]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7f1 fc84 	bl	80001d0 <strlen>
 800e8c8:	9b03      	ldr	r3, [sp, #12]
 800e8ca:	9001      	str	r0, [sp, #4]
 800e8cc:	4403      	add	r3, r0
 800e8ce:	f04f 0b00 	mov.w	fp, #0
 800e8d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e8d6:	9307      	str	r3, [sp, #28]
 800e8d8:	f8da 3000 	ldr.w	r3, [sl]
 800e8dc:	3302      	adds	r3, #2
 800e8de:	461f      	mov	r7, r3
 800e8e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e8e4:	2830      	cmp	r0, #48	; 0x30
 800e8e6:	d06c      	beq.n	800e9c2 <__gethex+0x118>
 800e8e8:	f7ff ffca 	bl	800e880 <__hexdig_fun>
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d16a      	bne.n	800e9c8 <__gethex+0x11e>
 800e8f2:	9a01      	ldr	r2, [sp, #4]
 800e8f4:	9903      	ldr	r1, [sp, #12]
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	f001 fadb 	bl	800feb2 <strncmp>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d166      	bne.n	800e9ce <__gethex+0x124>
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	5cf8      	ldrb	r0, [r7, r3]
 800e904:	18fe      	adds	r6, r7, r3
 800e906:	f7ff ffbb 	bl	800e880 <__hexdig_fun>
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d062      	beq.n	800e9d4 <__gethex+0x12a>
 800e90e:	4633      	mov	r3, r6
 800e910:	7818      	ldrb	r0, [r3, #0]
 800e912:	2830      	cmp	r0, #48	; 0x30
 800e914:	461f      	mov	r7, r3
 800e916:	f103 0301 	add.w	r3, r3, #1
 800e91a:	d0f9      	beq.n	800e910 <__gethex+0x66>
 800e91c:	f7ff ffb0 	bl	800e880 <__hexdig_fun>
 800e920:	fab0 f580 	clz	r5, r0
 800e924:	096d      	lsrs	r5, r5, #5
 800e926:	4634      	mov	r4, r6
 800e928:	f04f 0b01 	mov.w	fp, #1
 800e92c:	463a      	mov	r2, r7
 800e92e:	4616      	mov	r6, r2
 800e930:	3201      	adds	r2, #1
 800e932:	7830      	ldrb	r0, [r6, #0]
 800e934:	f7ff ffa4 	bl	800e880 <__hexdig_fun>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d1f8      	bne.n	800e92e <__gethex+0x84>
 800e93c:	9a01      	ldr	r2, [sp, #4]
 800e93e:	9903      	ldr	r1, [sp, #12]
 800e940:	4630      	mov	r0, r6
 800e942:	f001 fab6 	bl	800feb2 <strncmp>
 800e946:	b950      	cbnz	r0, 800e95e <__gethex+0xb4>
 800e948:	b954      	cbnz	r4, 800e960 <__gethex+0xb6>
 800e94a:	9b01      	ldr	r3, [sp, #4]
 800e94c:	18f4      	adds	r4, r6, r3
 800e94e:	4622      	mov	r2, r4
 800e950:	4616      	mov	r6, r2
 800e952:	3201      	adds	r2, #1
 800e954:	7830      	ldrb	r0, [r6, #0]
 800e956:	f7ff ff93 	bl	800e880 <__hexdig_fun>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d1f8      	bne.n	800e950 <__gethex+0xa6>
 800e95e:	b10c      	cbz	r4, 800e964 <__gethex+0xba>
 800e960:	1ba4      	subs	r4, r4, r6
 800e962:	00a4      	lsls	r4, r4, #2
 800e964:	7833      	ldrb	r3, [r6, #0]
 800e966:	2b50      	cmp	r3, #80	; 0x50
 800e968:	d001      	beq.n	800e96e <__gethex+0xc4>
 800e96a:	2b70      	cmp	r3, #112	; 0x70
 800e96c:	d140      	bne.n	800e9f0 <__gethex+0x146>
 800e96e:	7873      	ldrb	r3, [r6, #1]
 800e970:	2b2b      	cmp	r3, #43	; 0x2b
 800e972:	d031      	beq.n	800e9d8 <__gethex+0x12e>
 800e974:	2b2d      	cmp	r3, #45	; 0x2d
 800e976:	d033      	beq.n	800e9e0 <__gethex+0x136>
 800e978:	1c71      	adds	r1, r6, #1
 800e97a:	f04f 0900 	mov.w	r9, #0
 800e97e:	7808      	ldrb	r0, [r1, #0]
 800e980:	f7ff ff7e 	bl	800e880 <__hexdig_fun>
 800e984:	1e43      	subs	r3, r0, #1
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b18      	cmp	r3, #24
 800e98a:	d831      	bhi.n	800e9f0 <__gethex+0x146>
 800e98c:	f1a0 0210 	sub.w	r2, r0, #16
 800e990:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e994:	f7ff ff74 	bl	800e880 <__hexdig_fun>
 800e998:	1e43      	subs	r3, r0, #1
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	2b18      	cmp	r3, #24
 800e99e:	d922      	bls.n	800e9e6 <__gethex+0x13c>
 800e9a0:	f1b9 0f00 	cmp.w	r9, #0
 800e9a4:	d000      	beq.n	800e9a8 <__gethex+0xfe>
 800e9a6:	4252      	negs	r2, r2
 800e9a8:	4414      	add	r4, r2
 800e9aa:	f8ca 1000 	str.w	r1, [sl]
 800e9ae:	b30d      	cbz	r5, 800e9f4 <__gethex+0x14a>
 800e9b0:	f1bb 0f00 	cmp.w	fp, #0
 800e9b4:	bf0c      	ite	eq
 800e9b6:	2706      	moveq	r7, #6
 800e9b8:	2700      	movne	r7, #0
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	b00b      	add	sp, #44	; 0x2c
 800e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c2:	f10b 0b01 	add.w	fp, fp, #1
 800e9c6:	e78a      	b.n	800e8de <__gethex+0x34>
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	462c      	mov	r4, r5
 800e9cc:	e7ae      	b.n	800e92c <__gethex+0x82>
 800e9ce:	463e      	mov	r6, r7
 800e9d0:	2501      	movs	r5, #1
 800e9d2:	e7c7      	b.n	800e964 <__gethex+0xba>
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	e7fb      	b.n	800e9d0 <__gethex+0x126>
 800e9d8:	f04f 0900 	mov.w	r9, #0
 800e9dc:	1cb1      	adds	r1, r6, #2
 800e9de:	e7ce      	b.n	800e97e <__gethex+0xd4>
 800e9e0:	f04f 0901 	mov.w	r9, #1
 800e9e4:	e7fa      	b.n	800e9dc <__gethex+0x132>
 800e9e6:	230a      	movs	r3, #10
 800e9e8:	fb03 0202 	mla	r2, r3, r2, r0
 800e9ec:	3a10      	subs	r2, #16
 800e9ee:	e7cf      	b.n	800e990 <__gethex+0xe6>
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	e7da      	b.n	800e9aa <__gethex+0x100>
 800e9f4:	1bf3      	subs	r3, r6, r7
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	2b07      	cmp	r3, #7
 800e9fc:	dc49      	bgt.n	800ea92 <__gethex+0x1e8>
 800e9fe:	9802      	ldr	r0, [sp, #8]
 800ea00:	f000 fabc 	bl	800ef7c <_Balloc>
 800ea04:	9b01      	ldr	r3, [sp, #4]
 800ea06:	f100 0914 	add.w	r9, r0, #20
 800ea0a:	f04f 0b00 	mov.w	fp, #0
 800ea0e:	f1c3 0301 	rsb	r3, r3, #1
 800ea12:	4605      	mov	r5, r0
 800ea14:	f8cd 9010 	str.w	r9, [sp, #16]
 800ea18:	46da      	mov	sl, fp
 800ea1a:	9308      	str	r3, [sp, #32]
 800ea1c:	42b7      	cmp	r7, r6
 800ea1e:	d33b      	bcc.n	800ea98 <__gethex+0x1ee>
 800ea20:	9804      	ldr	r0, [sp, #16]
 800ea22:	f840 ab04 	str.w	sl, [r0], #4
 800ea26:	eba0 0009 	sub.w	r0, r0, r9
 800ea2a:	1080      	asrs	r0, r0, #2
 800ea2c:	6128      	str	r0, [r5, #16]
 800ea2e:	0147      	lsls	r7, r0, #5
 800ea30:	4650      	mov	r0, sl
 800ea32:	f000 fb67 	bl	800f104 <__hi0bits>
 800ea36:	f8d8 6000 	ldr.w	r6, [r8]
 800ea3a:	1a3f      	subs	r7, r7, r0
 800ea3c:	42b7      	cmp	r7, r6
 800ea3e:	dd64      	ble.n	800eb0a <__gethex+0x260>
 800ea40:	1bbf      	subs	r7, r7, r6
 800ea42:	4639      	mov	r1, r7
 800ea44:	4628      	mov	r0, r5
 800ea46:	f000 fe77 	bl	800f738 <__any_on>
 800ea4a:	4682      	mov	sl, r0
 800ea4c:	b178      	cbz	r0, 800ea6e <__gethex+0x1c4>
 800ea4e:	1e7b      	subs	r3, r7, #1
 800ea50:	1159      	asrs	r1, r3, #5
 800ea52:	f003 021f 	and.w	r2, r3, #31
 800ea56:	f04f 0a01 	mov.w	sl, #1
 800ea5a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ea5e:	fa0a f202 	lsl.w	r2, sl, r2
 800ea62:	420a      	tst	r2, r1
 800ea64:	d003      	beq.n	800ea6e <__gethex+0x1c4>
 800ea66:	4553      	cmp	r3, sl
 800ea68:	dc46      	bgt.n	800eaf8 <__gethex+0x24e>
 800ea6a:	f04f 0a02 	mov.w	sl, #2
 800ea6e:	4639      	mov	r1, r7
 800ea70:	4628      	mov	r0, r5
 800ea72:	f7ff fecb 	bl	800e80c <rshift>
 800ea76:	443c      	add	r4, r7
 800ea78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	da52      	bge.n	800eb26 <__gethex+0x27c>
 800ea80:	4629      	mov	r1, r5
 800ea82:	9802      	ldr	r0, [sp, #8]
 800ea84:	f000 faae 	bl	800efe4 <_Bfree>
 800ea88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	6013      	str	r3, [r2, #0]
 800ea8e:	27a3      	movs	r7, #163	; 0xa3
 800ea90:	e793      	b.n	800e9ba <__gethex+0x110>
 800ea92:	3101      	adds	r1, #1
 800ea94:	105b      	asrs	r3, r3, #1
 800ea96:	e7b0      	b.n	800e9fa <__gethex+0x150>
 800ea98:	1e73      	subs	r3, r6, #1
 800ea9a:	9305      	str	r3, [sp, #20]
 800ea9c:	9a07      	ldr	r2, [sp, #28]
 800ea9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d018      	beq.n	800ead8 <__gethex+0x22e>
 800eaa6:	f1bb 0f20 	cmp.w	fp, #32
 800eaaa:	d107      	bne.n	800eabc <__gethex+0x212>
 800eaac:	9b04      	ldr	r3, [sp, #16]
 800eaae:	f8c3 a000 	str.w	sl, [r3]
 800eab2:	3304      	adds	r3, #4
 800eab4:	f04f 0a00 	mov.w	sl, #0
 800eab8:	9304      	str	r3, [sp, #16]
 800eaba:	46d3      	mov	fp, sl
 800eabc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eac0:	f7ff fede 	bl	800e880 <__hexdig_fun>
 800eac4:	f000 000f 	and.w	r0, r0, #15
 800eac8:	fa00 f00b 	lsl.w	r0, r0, fp
 800eacc:	ea4a 0a00 	orr.w	sl, sl, r0
 800ead0:	f10b 0b04 	add.w	fp, fp, #4
 800ead4:	9b05      	ldr	r3, [sp, #20]
 800ead6:	e00d      	b.n	800eaf4 <__gethex+0x24a>
 800ead8:	9b05      	ldr	r3, [sp, #20]
 800eada:	9a08      	ldr	r2, [sp, #32]
 800eadc:	4413      	add	r3, r2
 800eade:	42bb      	cmp	r3, r7
 800eae0:	d3e1      	bcc.n	800eaa6 <__gethex+0x1fc>
 800eae2:	4618      	mov	r0, r3
 800eae4:	9a01      	ldr	r2, [sp, #4]
 800eae6:	9903      	ldr	r1, [sp, #12]
 800eae8:	9309      	str	r3, [sp, #36]	; 0x24
 800eaea:	f001 f9e2 	bl	800feb2 <strncmp>
 800eaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d1d8      	bne.n	800eaa6 <__gethex+0x1fc>
 800eaf4:	461e      	mov	r6, r3
 800eaf6:	e791      	b.n	800ea1c <__gethex+0x172>
 800eaf8:	1eb9      	subs	r1, r7, #2
 800eafa:	4628      	mov	r0, r5
 800eafc:	f000 fe1c 	bl	800f738 <__any_on>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d0b2      	beq.n	800ea6a <__gethex+0x1c0>
 800eb04:	f04f 0a03 	mov.w	sl, #3
 800eb08:	e7b1      	b.n	800ea6e <__gethex+0x1c4>
 800eb0a:	da09      	bge.n	800eb20 <__gethex+0x276>
 800eb0c:	1bf7      	subs	r7, r6, r7
 800eb0e:	4629      	mov	r1, r5
 800eb10:	463a      	mov	r2, r7
 800eb12:	9802      	ldr	r0, [sp, #8]
 800eb14:	f000 fc32 	bl	800f37c <__lshift>
 800eb18:	1be4      	subs	r4, r4, r7
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	f100 0914 	add.w	r9, r0, #20
 800eb20:	f04f 0a00 	mov.w	sl, #0
 800eb24:	e7a8      	b.n	800ea78 <__gethex+0x1ce>
 800eb26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb2a:	42a0      	cmp	r0, r4
 800eb2c:	dd6a      	ble.n	800ec04 <__gethex+0x35a>
 800eb2e:	1b04      	subs	r4, r0, r4
 800eb30:	42a6      	cmp	r6, r4
 800eb32:	dc2e      	bgt.n	800eb92 <__gethex+0x2e8>
 800eb34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d022      	beq.n	800eb82 <__gethex+0x2d8>
 800eb3c:	2b03      	cmp	r3, #3
 800eb3e:	d024      	beq.n	800eb8a <__gethex+0x2e0>
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d115      	bne.n	800eb70 <__gethex+0x2c6>
 800eb44:	42a6      	cmp	r6, r4
 800eb46:	d113      	bne.n	800eb70 <__gethex+0x2c6>
 800eb48:	2e01      	cmp	r6, #1
 800eb4a:	dc0b      	bgt.n	800eb64 <__gethex+0x2ba>
 800eb4c:	9a06      	ldr	r2, [sp, #24]
 800eb4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb52:	6013      	str	r3, [r2, #0]
 800eb54:	2301      	movs	r3, #1
 800eb56:	612b      	str	r3, [r5, #16]
 800eb58:	f8c9 3000 	str.w	r3, [r9]
 800eb5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb5e:	2762      	movs	r7, #98	; 0x62
 800eb60:	601d      	str	r5, [r3, #0]
 800eb62:	e72a      	b.n	800e9ba <__gethex+0x110>
 800eb64:	1e71      	subs	r1, r6, #1
 800eb66:	4628      	mov	r0, r5
 800eb68:	f000 fde6 	bl	800f738 <__any_on>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d1ed      	bne.n	800eb4c <__gethex+0x2a2>
 800eb70:	4629      	mov	r1, r5
 800eb72:	9802      	ldr	r0, [sp, #8]
 800eb74:	f000 fa36 	bl	800efe4 <_Bfree>
 800eb78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	2750      	movs	r7, #80	; 0x50
 800eb80:	e71b      	b.n	800e9ba <__gethex+0x110>
 800eb82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d0e1      	beq.n	800eb4c <__gethex+0x2a2>
 800eb88:	e7f2      	b.n	800eb70 <__gethex+0x2c6>
 800eb8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1dd      	bne.n	800eb4c <__gethex+0x2a2>
 800eb90:	e7ee      	b.n	800eb70 <__gethex+0x2c6>
 800eb92:	1e67      	subs	r7, r4, #1
 800eb94:	f1ba 0f00 	cmp.w	sl, #0
 800eb98:	d131      	bne.n	800ebfe <__gethex+0x354>
 800eb9a:	b127      	cbz	r7, 800eba6 <__gethex+0x2fc>
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 fdca 	bl	800f738 <__any_on>
 800eba4:	4682      	mov	sl, r0
 800eba6:	117a      	asrs	r2, r7, #5
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f007 071f 	and.w	r7, r7, #31
 800ebae:	fa03 f707 	lsl.w	r7, r3, r7
 800ebb2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	421f      	tst	r7, r3
 800ebba:	4628      	mov	r0, r5
 800ebbc:	bf18      	it	ne
 800ebbe:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebc2:	1b36      	subs	r6, r6, r4
 800ebc4:	f7ff fe22 	bl	800e80c <rshift>
 800ebc8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ebcc:	2702      	movs	r7, #2
 800ebce:	f1ba 0f00 	cmp.w	sl, #0
 800ebd2:	d048      	beq.n	800ec66 <__gethex+0x3bc>
 800ebd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d015      	beq.n	800ec08 <__gethex+0x35e>
 800ebdc:	2b03      	cmp	r3, #3
 800ebde:	d017      	beq.n	800ec10 <__gethex+0x366>
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d109      	bne.n	800ebf8 <__gethex+0x34e>
 800ebe4:	f01a 0f02 	tst.w	sl, #2
 800ebe8:	d006      	beq.n	800ebf8 <__gethex+0x34e>
 800ebea:	f8d9 3000 	ldr.w	r3, [r9]
 800ebee:	ea4a 0a03 	orr.w	sl, sl, r3
 800ebf2:	f01a 0f01 	tst.w	sl, #1
 800ebf6:	d10e      	bne.n	800ec16 <__gethex+0x36c>
 800ebf8:	f047 0710 	orr.w	r7, r7, #16
 800ebfc:	e033      	b.n	800ec66 <__gethex+0x3bc>
 800ebfe:	f04f 0a01 	mov.w	sl, #1
 800ec02:	e7d0      	b.n	800eba6 <__gethex+0x2fc>
 800ec04:	2701      	movs	r7, #1
 800ec06:	e7e2      	b.n	800ebce <__gethex+0x324>
 800ec08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec0a:	f1c3 0301 	rsb	r3, r3, #1
 800ec0e:	9315      	str	r3, [sp, #84]	; 0x54
 800ec10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d0f0      	beq.n	800ebf8 <__gethex+0x34e>
 800ec16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ec1a:	f105 0314 	add.w	r3, r5, #20
 800ec1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ec22:	eb03 010a 	add.w	r1, r3, sl
 800ec26:	f04f 0c00 	mov.w	ip, #0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec30:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec34:	d01c      	beq.n	800ec70 <__gethex+0x3c6>
 800ec36:	3201      	adds	r2, #1
 800ec38:	6002      	str	r2, [r0, #0]
 800ec3a:	2f02      	cmp	r7, #2
 800ec3c:	f105 0314 	add.w	r3, r5, #20
 800ec40:	d138      	bne.n	800ecb4 <__gethex+0x40a>
 800ec42:	f8d8 2000 	ldr.w	r2, [r8]
 800ec46:	3a01      	subs	r2, #1
 800ec48:	42b2      	cmp	r2, r6
 800ec4a:	d10a      	bne.n	800ec62 <__gethex+0x3b8>
 800ec4c:	1171      	asrs	r1, r6, #5
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f006 061f 	and.w	r6, r6, #31
 800ec54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec58:	fa02 f606 	lsl.w	r6, r2, r6
 800ec5c:	421e      	tst	r6, r3
 800ec5e:	bf18      	it	ne
 800ec60:	4617      	movne	r7, r2
 800ec62:	f047 0720 	orr.w	r7, r7, #32
 800ec66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec68:	601d      	str	r5, [r3, #0]
 800ec6a:	9b06      	ldr	r3, [sp, #24]
 800ec6c:	601c      	str	r4, [r3, #0]
 800ec6e:	e6a4      	b.n	800e9ba <__gethex+0x110>
 800ec70:	4299      	cmp	r1, r3
 800ec72:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec76:	d8d8      	bhi.n	800ec2a <__gethex+0x380>
 800ec78:	68ab      	ldr	r3, [r5, #8]
 800ec7a:	4599      	cmp	r9, r3
 800ec7c:	db12      	blt.n	800eca4 <__gethex+0x3fa>
 800ec7e:	6869      	ldr	r1, [r5, #4]
 800ec80:	9802      	ldr	r0, [sp, #8]
 800ec82:	3101      	adds	r1, #1
 800ec84:	f000 f97a 	bl	800ef7c <_Balloc>
 800ec88:	692a      	ldr	r2, [r5, #16]
 800ec8a:	3202      	adds	r2, #2
 800ec8c:	f105 010c 	add.w	r1, r5, #12
 800ec90:	4683      	mov	fp, r0
 800ec92:	0092      	lsls	r2, r2, #2
 800ec94:	300c      	adds	r0, #12
 800ec96:	f7fc ff97 	bl	800bbc8 <memcpy>
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	9802      	ldr	r0, [sp, #8]
 800ec9e:	f000 f9a1 	bl	800efe4 <_Bfree>
 800eca2:	465d      	mov	r5, fp
 800eca4:	692b      	ldr	r3, [r5, #16]
 800eca6:	1c5a      	adds	r2, r3, #1
 800eca8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ecac:	612a      	str	r2, [r5, #16]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	615a      	str	r2, [r3, #20]
 800ecb2:	e7c2      	b.n	800ec3a <__gethex+0x390>
 800ecb4:	692a      	ldr	r2, [r5, #16]
 800ecb6:	454a      	cmp	r2, r9
 800ecb8:	dd0b      	ble.n	800ecd2 <__gethex+0x428>
 800ecba:	2101      	movs	r1, #1
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f7ff fda5 	bl	800e80c <rshift>
 800ecc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecc6:	3401      	adds	r4, #1
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	f6ff aed9 	blt.w	800ea80 <__gethex+0x1d6>
 800ecce:	2701      	movs	r7, #1
 800ecd0:	e7c7      	b.n	800ec62 <__gethex+0x3b8>
 800ecd2:	f016 061f 	ands.w	r6, r6, #31
 800ecd6:	d0fa      	beq.n	800ecce <__gethex+0x424>
 800ecd8:	449a      	add	sl, r3
 800ecda:	f1c6 0620 	rsb	r6, r6, #32
 800ecde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ece2:	f000 fa0f 	bl	800f104 <__hi0bits>
 800ece6:	42b0      	cmp	r0, r6
 800ece8:	dbe7      	blt.n	800ecba <__gethex+0x410>
 800ecea:	e7f0      	b.n	800ecce <__gethex+0x424>

0800ecec <L_shift>:
 800ecec:	f1c2 0208 	rsb	r2, r2, #8
 800ecf0:	0092      	lsls	r2, r2, #2
 800ecf2:	b570      	push	{r4, r5, r6, lr}
 800ecf4:	f1c2 0620 	rsb	r6, r2, #32
 800ecf8:	6843      	ldr	r3, [r0, #4]
 800ecfa:	6804      	ldr	r4, [r0, #0]
 800ecfc:	fa03 f506 	lsl.w	r5, r3, r6
 800ed00:	432c      	orrs	r4, r5
 800ed02:	40d3      	lsrs	r3, r2
 800ed04:	6004      	str	r4, [r0, #0]
 800ed06:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed0a:	4288      	cmp	r0, r1
 800ed0c:	d3f4      	bcc.n	800ecf8 <L_shift+0xc>
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}

0800ed10 <__match>:
 800ed10:	b530      	push	{r4, r5, lr}
 800ed12:	6803      	ldr	r3, [r0, #0]
 800ed14:	3301      	adds	r3, #1
 800ed16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed1a:	b914      	cbnz	r4, 800ed22 <__match+0x12>
 800ed1c:	6003      	str	r3, [r0, #0]
 800ed1e:	2001      	movs	r0, #1
 800ed20:	bd30      	pop	{r4, r5, pc}
 800ed22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed2a:	2d19      	cmp	r5, #25
 800ed2c:	bf98      	it	ls
 800ed2e:	3220      	addls	r2, #32
 800ed30:	42a2      	cmp	r2, r4
 800ed32:	d0f0      	beq.n	800ed16 <__match+0x6>
 800ed34:	2000      	movs	r0, #0
 800ed36:	e7f3      	b.n	800ed20 <__match+0x10>

0800ed38 <__hexnan>:
 800ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3c:	680b      	ldr	r3, [r1, #0]
 800ed3e:	6801      	ldr	r1, [r0, #0]
 800ed40:	115f      	asrs	r7, r3, #5
 800ed42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ed46:	f013 031f 	ands.w	r3, r3, #31
 800ed4a:	b087      	sub	sp, #28
 800ed4c:	bf18      	it	ne
 800ed4e:	3704      	addne	r7, #4
 800ed50:	2500      	movs	r5, #0
 800ed52:	1f3e      	subs	r6, r7, #4
 800ed54:	4682      	mov	sl, r0
 800ed56:	4690      	mov	r8, r2
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	f847 5c04 	str.w	r5, [r7, #-4]
 800ed5e:	46b1      	mov	r9, r6
 800ed60:	4634      	mov	r4, r6
 800ed62:	9502      	str	r5, [sp, #8]
 800ed64:	46ab      	mov	fp, r5
 800ed66:	784a      	ldrb	r2, [r1, #1]
 800ed68:	1c4b      	adds	r3, r1, #1
 800ed6a:	9303      	str	r3, [sp, #12]
 800ed6c:	b342      	cbz	r2, 800edc0 <__hexnan+0x88>
 800ed6e:	4610      	mov	r0, r2
 800ed70:	9105      	str	r1, [sp, #20]
 800ed72:	9204      	str	r2, [sp, #16]
 800ed74:	f7ff fd84 	bl	800e880 <__hexdig_fun>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d143      	bne.n	800ee04 <__hexnan+0xcc>
 800ed7c:	9a04      	ldr	r2, [sp, #16]
 800ed7e:	9905      	ldr	r1, [sp, #20]
 800ed80:	2a20      	cmp	r2, #32
 800ed82:	d818      	bhi.n	800edb6 <__hexnan+0x7e>
 800ed84:	9b02      	ldr	r3, [sp, #8]
 800ed86:	459b      	cmp	fp, r3
 800ed88:	dd13      	ble.n	800edb2 <__hexnan+0x7a>
 800ed8a:	454c      	cmp	r4, r9
 800ed8c:	d206      	bcs.n	800ed9c <__hexnan+0x64>
 800ed8e:	2d07      	cmp	r5, #7
 800ed90:	dc04      	bgt.n	800ed9c <__hexnan+0x64>
 800ed92:	462a      	mov	r2, r5
 800ed94:	4649      	mov	r1, r9
 800ed96:	4620      	mov	r0, r4
 800ed98:	f7ff ffa8 	bl	800ecec <L_shift>
 800ed9c:	4544      	cmp	r4, r8
 800ed9e:	d944      	bls.n	800ee2a <__hexnan+0xf2>
 800eda0:	2300      	movs	r3, #0
 800eda2:	f1a4 0904 	sub.w	r9, r4, #4
 800eda6:	f844 3c04 	str.w	r3, [r4, #-4]
 800edaa:	f8cd b008 	str.w	fp, [sp, #8]
 800edae:	464c      	mov	r4, r9
 800edb0:	461d      	mov	r5, r3
 800edb2:	9903      	ldr	r1, [sp, #12]
 800edb4:	e7d7      	b.n	800ed66 <__hexnan+0x2e>
 800edb6:	2a29      	cmp	r2, #41	; 0x29
 800edb8:	d14a      	bne.n	800ee50 <__hexnan+0x118>
 800edba:	3102      	adds	r1, #2
 800edbc:	f8ca 1000 	str.w	r1, [sl]
 800edc0:	f1bb 0f00 	cmp.w	fp, #0
 800edc4:	d044      	beq.n	800ee50 <__hexnan+0x118>
 800edc6:	454c      	cmp	r4, r9
 800edc8:	d206      	bcs.n	800edd8 <__hexnan+0xa0>
 800edca:	2d07      	cmp	r5, #7
 800edcc:	dc04      	bgt.n	800edd8 <__hexnan+0xa0>
 800edce:	462a      	mov	r2, r5
 800edd0:	4649      	mov	r1, r9
 800edd2:	4620      	mov	r0, r4
 800edd4:	f7ff ff8a 	bl	800ecec <L_shift>
 800edd8:	4544      	cmp	r4, r8
 800edda:	d928      	bls.n	800ee2e <__hexnan+0xf6>
 800eddc:	4643      	mov	r3, r8
 800edde:	f854 2b04 	ldr.w	r2, [r4], #4
 800ede2:	f843 2b04 	str.w	r2, [r3], #4
 800ede6:	42a6      	cmp	r6, r4
 800ede8:	d2f9      	bcs.n	800edde <__hexnan+0xa6>
 800edea:	2200      	movs	r2, #0
 800edec:	f843 2b04 	str.w	r2, [r3], #4
 800edf0:	429e      	cmp	r6, r3
 800edf2:	d2fb      	bcs.n	800edec <__hexnan+0xb4>
 800edf4:	6833      	ldr	r3, [r6, #0]
 800edf6:	b91b      	cbnz	r3, 800ee00 <__hexnan+0xc8>
 800edf8:	4546      	cmp	r6, r8
 800edfa:	d127      	bne.n	800ee4c <__hexnan+0x114>
 800edfc:	2301      	movs	r3, #1
 800edfe:	6033      	str	r3, [r6, #0]
 800ee00:	2005      	movs	r0, #5
 800ee02:	e026      	b.n	800ee52 <__hexnan+0x11a>
 800ee04:	3501      	adds	r5, #1
 800ee06:	2d08      	cmp	r5, #8
 800ee08:	f10b 0b01 	add.w	fp, fp, #1
 800ee0c:	dd06      	ble.n	800ee1c <__hexnan+0xe4>
 800ee0e:	4544      	cmp	r4, r8
 800ee10:	d9cf      	bls.n	800edb2 <__hexnan+0x7a>
 800ee12:	2300      	movs	r3, #0
 800ee14:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee18:	2501      	movs	r5, #1
 800ee1a:	3c04      	subs	r4, #4
 800ee1c:	6822      	ldr	r2, [r4, #0]
 800ee1e:	f000 000f 	and.w	r0, r0, #15
 800ee22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ee26:	6020      	str	r0, [r4, #0]
 800ee28:	e7c3      	b.n	800edb2 <__hexnan+0x7a>
 800ee2a:	2508      	movs	r5, #8
 800ee2c:	e7c1      	b.n	800edb2 <__hexnan+0x7a>
 800ee2e:	9b01      	ldr	r3, [sp, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d0df      	beq.n	800edf4 <__hexnan+0xbc>
 800ee34:	f04f 32ff 	mov.w	r2, #4294967295
 800ee38:	f1c3 0320 	rsb	r3, r3, #32
 800ee3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ee40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ee44:	401a      	ands	r2, r3
 800ee46:	f847 2c04 	str.w	r2, [r7, #-4]
 800ee4a:	e7d3      	b.n	800edf4 <__hexnan+0xbc>
 800ee4c:	3e04      	subs	r6, #4
 800ee4e:	e7d1      	b.n	800edf4 <__hexnan+0xbc>
 800ee50:	2004      	movs	r0, #4
 800ee52:	b007      	add	sp, #28
 800ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee58 <__locale_ctype_ptr_l>:
 800ee58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ee5c:	4770      	bx	lr

0800ee5e <__localeconv_l>:
 800ee5e:	30f0      	adds	r0, #240	; 0xf0
 800ee60:	4770      	bx	lr
	...

0800ee64 <_localeconv_r>:
 800ee64:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <_localeconv_r+0x14>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	6a18      	ldr	r0, [r3, #32]
 800ee6a:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <_localeconv_r+0x18>)
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	bf08      	it	eq
 800ee70:	4618      	moveq	r0, r3
 800ee72:	30f0      	adds	r0, #240	; 0xf0
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	20000040 	.word	0x20000040
 800ee7c:	200000a4 	.word	0x200000a4

0800ee80 <__swhatbuf_r>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	460e      	mov	r6, r1
 800ee84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee88:	2900      	cmp	r1, #0
 800ee8a:	b096      	sub	sp, #88	; 0x58
 800ee8c:	4614      	mov	r4, r2
 800ee8e:	461d      	mov	r5, r3
 800ee90:	da07      	bge.n	800eea2 <__swhatbuf_r+0x22>
 800ee92:	2300      	movs	r3, #0
 800ee94:	602b      	str	r3, [r5, #0]
 800ee96:	89b3      	ldrh	r3, [r6, #12]
 800ee98:	061a      	lsls	r2, r3, #24
 800ee9a:	d410      	bmi.n	800eebe <__swhatbuf_r+0x3e>
 800ee9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eea0:	e00e      	b.n	800eec0 <__swhatbuf_r+0x40>
 800eea2:	466a      	mov	r2, sp
 800eea4:	f001 f846 	bl	800ff34 <_fstat_r>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	dbf2      	blt.n	800ee92 <__swhatbuf_r+0x12>
 800eeac:	9a01      	ldr	r2, [sp, #4]
 800eeae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eeb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eeb6:	425a      	negs	r2, r3
 800eeb8:	415a      	adcs	r2, r3
 800eeba:	602a      	str	r2, [r5, #0]
 800eebc:	e7ee      	b.n	800ee9c <__swhatbuf_r+0x1c>
 800eebe:	2340      	movs	r3, #64	; 0x40
 800eec0:	2000      	movs	r0, #0
 800eec2:	6023      	str	r3, [r4, #0]
 800eec4:	b016      	add	sp, #88	; 0x58
 800eec6:	bd70      	pop	{r4, r5, r6, pc}

0800eec8 <__smakebuf_r>:
 800eec8:	898b      	ldrh	r3, [r1, #12]
 800eeca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eecc:	079d      	lsls	r5, r3, #30
 800eece:	4606      	mov	r6, r0
 800eed0:	460c      	mov	r4, r1
 800eed2:	d507      	bpl.n	800eee4 <__smakebuf_r+0x1c>
 800eed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eed8:	6023      	str	r3, [r4, #0]
 800eeda:	6123      	str	r3, [r4, #16]
 800eedc:	2301      	movs	r3, #1
 800eede:	6163      	str	r3, [r4, #20]
 800eee0:	b002      	add	sp, #8
 800eee2:	bd70      	pop	{r4, r5, r6, pc}
 800eee4:	ab01      	add	r3, sp, #4
 800eee6:	466a      	mov	r2, sp
 800eee8:	f7ff ffca 	bl	800ee80 <__swhatbuf_r>
 800eeec:	9900      	ldr	r1, [sp, #0]
 800eeee:	4605      	mov	r5, r0
 800eef0:	4630      	mov	r0, r6
 800eef2:	f000 fc9f 	bl	800f834 <_malloc_r>
 800eef6:	b948      	cbnz	r0, 800ef0c <__smakebuf_r+0x44>
 800eef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eefc:	059a      	lsls	r2, r3, #22
 800eefe:	d4ef      	bmi.n	800eee0 <__smakebuf_r+0x18>
 800ef00:	f023 0303 	bic.w	r3, r3, #3
 800ef04:	f043 0302 	orr.w	r3, r3, #2
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	e7e3      	b.n	800eed4 <__smakebuf_r+0xc>
 800ef0c:	4b0d      	ldr	r3, [pc, #52]	; (800ef44 <__smakebuf_r+0x7c>)
 800ef0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	6020      	str	r0, [r4, #0]
 800ef14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef18:	81a3      	strh	r3, [r4, #12]
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	6163      	str	r3, [r4, #20]
 800ef1e:	9b01      	ldr	r3, [sp, #4]
 800ef20:	6120      	str	r0, [r4, #16]
 800ef22:	b15b      	cbz	r3, 800ef3c <__smakebuf_r+0x74>
 800ef24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f001 f815 	bl	800ff58 <_isatty_r>
 800ef2e:	b128      	cbz	r0, 800ef3c <__smakebuf_r+0x74>
 800ef30:	89a3      	ldrh	r3, [r4, #12]
 800ef32:	f023 0303 	bic.w	r3, r3, #3
 800ef36:	f043 0301 	orr.w	r3, r3, #1
 800ef3a:	81a3      	strh	r3, [r4, #12]
 800ef3c:	89a3      	ldrh	r3, [r4, #12]
 800ef3e:	431d      	orrs	r5, r3
 800ef40:	81a5      	strh	r5, [r4, #12]
 800ef42:	e7cd      	b.n	800eee0 <__smakebuf_r+0x18>
 800ef44:	0800e6c1 	.word	0x0800e6c1

0800ef48 <malloc>:
 800ef48:	4b02      	ldr	r3, [pc, #8]	; (800ef54 <malloc+0xc>)
 800ef4a:	4601      	mov	r1, r0
 800ef4c:	6818      	ldr	r0, [r3, #0]
 800ef4e:	f000 bc71 	b.w	800f834 <_malloc_r>
 800ef52:	bf00      	nop
 800ef54:	20000040 	.word	0x20000040

0800ef58 <__ascii_mbtowc>:
 800ef58:	b082      	sub	sp, #8
 800ef5a:	b901      	cbnz	r1, 800ef5e <__ascii_mbtowc+0x6>
 800ef5c:	a901      	add	r1, sp, #4
 800ef5e:	b142      	cbz	r2, 800ef72 <__ascii_mbtowc+0x1a>
 800ef60:	b14b      	cbz	r3, 800ef76 <__ascii_mbtowc+0x1e>
 800ef62:	7813      	ldrb	r3, [r2, #0]
 800ef64:	600b      	str	r3, [r1, #0]
 800ef66:	7812      	ldrb	r2, [r2, #0]
 800ef68:	1c10      	adds	r0, r2, #0
 800ef6a:	bf18      	it	ne
 800ef6c:	2001      	movne	r0, #1
 800ef6e:	b002      	add	sp, #8
 800ef70:	4770      	bx	lr
 800ef72:	4610      	mov	r0, r2
 800ef74:	e7fb      	b.n	800ef6e <__ascii_mbtowc+0x16>
 800ef76:	f06f 0001 	mvn.w	r0, #1
 800ef7a:	e7f8      	b.n	800ef6e <__ascii_mbtowc+0x16>

0800ef7c <_Balloc>:
 800ef7c:	b570      	push	{r4, r5, r6, lr}
 800ef7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef80:	4604      	mov	r4, r0
 800ef82:	460e      	mov	r6, r1
 800ef84:	b93d      	cbnz	r5, 800ef96 <_Balloc+0x1a>
 800ef86:	2010      	movs	r0, #16
 800ef88:	f7ff ffde 	bl	800ef48 <malloc>
 800ef8c:	6260      	str	r0, [r4, #36]	; 0x24
 800ef8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef92:	6005      	str	r5, [r0, #0]
 800ef94:	60c5      	str	r5, [r0, #12]
 800ef96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ef98:	68eb      	ldr	r3, [r5, #12]
 800ef9a:	b183      	cbz	r3, 800efbe <_Balloc+0x42>
 800ef9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800efa4:	b9b8      	cbnz	r0, 800efd6 <_Balloc+0x5a>
 800efa6:	2101      	movs	r1, #1
 800efa8:	fa01 f506 	lsl.w	r5, r1, r6
 800efac:	1d6a      	adds	r2, r5, #5
 800efae:	0092      	lsls	r2, r2, #2
 800efb0:	4620      	mov	r0, r4
 800efb2:	f000 fbe2 	bl	800f77a <_calloc_r>
 800efb6:	b160      	cbz	r0, 800efd2 <_Balloc+0x56>
 800efb8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800efbc:	e00e      	b.n	800efdc <_Balloc+0x60>
 800efbe:	2221      	movs	r2, #33	; 0x21
 800efc0:	2104      	movs	r1, #4
 800efc2:	4620      	mov	r0, r4
 800efc4:	f000 fbd9 	bl	800f77a <_calloc_r>
 800efc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efca:	60e8      	str	r0, [r5, #12]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1e4      	bne.n	800ef9c <_Balloc+0x20>
 800efd2:	2000      	movs	r0, #0
 800efd4:	bd70      	pop	{r4, r5, r6, pc}
 800efd6:	6802      	ldr	r2, [r0, #0]
 800efd8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800efdc:	2300      	movs	r3, #0
 800efde:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efe2:	e7f7      	b.n	800efd4 <_Balloc+0x58>

0800efe4 <_Bfree>:
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800efe8:	4606      	mov	r6, r0
 800efea:	460d      	mov	r5, r1
 800efec:	b93c      	cbnz	r4, 800effe <_Bfree+0x1a>
 800efee:	2010      	movs	r0, #16
 800eff0:	f7ff ffaa 	bl	800ef48 <malloc>
 800eff4:	6270      	str	r0, [r6, #36]	; 0x24
 800eff6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800effa:	6004      	str	r4, [r0, #0]
 800effc:	60c4      	str	r4, [r0, #12]
 800effe:	b13d      	cbz	r5, 800f010 <_Bfree+0x2c>
 800f000:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f002:	686a      	ldr	r2, [r5, #4]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f00a:	6029      	str	r1, [r5, #0]
 800f00c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f010:	bd70      	pop	{r4, r5, r6, pc}

0800f012 <__multadd>:
 800f012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f016:	690d      	ldr	r5, [r1, #16]
 800f018:	461f      	mov	r7, r3
 800f01a:	4606      	mov	r6, r0
 800f01c:	460c      	mov	r4, r1
 800f01e:	f101 0c14 	add.w	ip, r1, #20
 800f022:	2300      	movs	r3, #0
 800f024:	f8dc 0000 	ldr.w	r0, [ip]
 800f028:	b281      	uxth	r1, r0
 800f02a:	fb02 7101 	mla	r1, r2, r1, r7
 800f02e:	0c0f      	lsrs	r7, r1, #16
 800f030:	0c00      	lsrs	r0, r0, #16
 800f032:	fb02 7000 	mla	r0, r2, r0, r7
 800f036:	b289      	uxth	r1, r1
 800f038:	3301      	adds	r3, #1
 800f03a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f03e:	429d      	cmp	r5, r3
 800f040:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f044:	f84c 1b04 	str.w	r1, [ip], #4
 800f048:	dcec      	bgt.n	800f024 <__multadd+0x12>
 800f04a:	b1d7      	cbz	r7, 800f082 <__multadd+0x70>
 800f04c:	68a3      	ldr	r3, [r4, #8]
 800f04e:	42ab      	cmp	r3, r5
 800f050:	dc12      	bgt.n	800f078 <__multadd+0x66>
 800f052:	6861      	ldr	r1, [r4, #4]
 800f054:	4630      	mov	r0, r6
 800f056:	3101      	adds	r1, #1
 800f058:	f7ff ff90 	bl	800ef7c <_Balloc>
 800f05c:	6922      	ldr	r2, [r4, #16]
 800f05e:	3202      	adds	r2, #2
 800f060:	f104 010c 	add.w	r1, r4, #12
 800f064:	4680      	mov	r8, r0
 800f066:	0092      	lsls	r2, r2, #2
 800f068:	300c      	adds	r0, #12
 800f06a:	f7fc fdad 	bl	800bbc8 <memcpy>
 800f06e:	4621      	mov	r1, r4
 800f070:	4630      	mov	r0, r6
 800f072:	f7ff ffb7 	bl	800efe4 <_Bfree>
 800f076:	4644      	mov	r4, r8
 800f078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f07c:	3501      	adds	r5, #1
 800f07e:	615f      	str	r7, [r3, #20]
 800f080:	6125      	str	r5, [r4, #16]
 800f082:	4620      	mov	r0, r4
 800f084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f088 <__s2b>:
 800f088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f08c:	460c      	mov	r4, r1
 800f08e:	4615      	mov	r5, r2
 800f090:	461f      	mov	r7, r3
 800f092:	2209      	movs	r2, #9
 800f094:	3308      	adds	r3, #8
 800f096:	4606      	mov	r6, r0
 800f098:	fb93 f3f2 	sdiv	r3, r3, r2
 800f09c:	2100      	movs	r1, #0
 800f09e:	2201      	movs	r2, #1
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	db20      	blt.n	800f0e6 <__s2b+0x5e>
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7ff ff69 	bl	800ef7c <_Balloc>
 800f0aa:	9b08      	ldr	r3, [sp, #32]
 800f0ac:	6143      	str	r3, [r0, #20]
 800f0ae:	2d09      	cmp	r5, #9
 800f0b0:	f04f 0301 	mov.w	r3, #1
 800f0b4:	6103      	str	r3, [r0, #16]
 800f0b6:	dd19      	ble.n	800f0ec <__s2b+0x64>
 800f0b8:	f104 0809 	add.w	r8, r4, #9
 800f0bc:	46c1      	mov	r9, r8
 800f0be:	442c      	add	r4, r5
 800f0c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f0c4:	4601      	mov	r1, r0
 800f0c6:	3b30      	subs	r3, #48	; 0x30
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7ff ffa1 	bl	800f012 <__multadd>
 800f0d0:	45a1      	cmp	r9, r4
 800f0d2:	d1f5      	bne.n	800f0c0 <__s2b+0x38>
 800f0d4:	eb08 0405 	add.w	r4, r8, r5
 800f0d8:	3c08      	subs	r4, #8
 800f0da:	1b2d      	subs	r5, r5, r4
 800f0dc:	1963      	adds	r3, r4, r5
 800f0de:	42bb      	cmp	r3, r7
 800f0e0:	db07      	blt.n	800f0f2 <__s2b+0x6a>
 800f0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0e6:	0052      	lsls	r2, r2, #1
 800f0e8:	3101      	adds	r1, #1
 800f0ea:	e7d9      	b.n	800f0a0 <__s2b+0x18>
 800f0ec:	340a      	adds	r4, #10
 800f0ee:	2509      	movs	r5, #9
 800f0f0:	e7f3      	b.n	800f0da <__s2b+0x52>
 800f0f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	3b30      	subs	r3, #48	; 0x30
 800f0fa:	220a      	movs	r2, #10
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f7ff ff88 	bl	800f012 <__multadd>
 800f102:	e7eb      	b.n	800f0dc <__s2b+0x54>

0800f104 <__hi0bits>:
 800f104:	0c02      	lsrs	r2, r0, #16
 800f106:	0412      	lsls	r2, r2, #16
 800f108:	4603      	mov	r3, r0
 800f10a:	b9b2      	cbnz	r2, 800f13a <__hi0bits+0x36>
 800f10c:	0403      	lsls	r3, r0, #16
 800f10e:	2010      	movs	r0, #16
 800f110:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f114:	bf04      	itt	eq
 800f116:	021b      	lsleq	r3, r3, #8
 800f118:	3008      	addeq	r0, #8
 800f11a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f11e:	bf04      	itt	eq
 800f120:	011b      	lsleq	r3, r3, #4
 800f122:	3004      	addeq	r0, #4
 800f124:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f128:	bf04      	itt	eq
 800f12a:	009b      	lsleq	r3, r3, #2
 800f12c:	3002      	addeq	r0, #2
 800f12e:	2b00      	cmp	r3, #0
 800f130:	db06      	blt.n	800f140 <__hi0bits+0x3c>
 800f132:	005b      	lsls	r3, r3, #1
 800f134:	d503      	bpl.n	800f13e <__hi0bits+0x3a>
 800f136:	3001      	adds	r0, #1
 800f138:	4770      	bx	lr
 800f13a:	2000      	movs	r0, #0
 800f13c:	e7e8      	b.n	800f110 <__hi0bits+0xc>
 800f13e:	2020      	movs	r0, #32
 800f140:	4770      	bx	lr

0800f142 <__lo0bits>:
 800f142:	6803      	ldr	r3, [r0, #0]
 800f144:	f013 0207 	ands.w	r2, r3, #7
 800f148:	4601      	mov	r1, r0
 800f14a:	d00b      	beq.n	800f164 <__lo0bits+0x22>
 800f14c:	07da      	lsls	r2, r3, #31
 800f14e:	d423      	bmi.n	800f198 <__lo0bits+0x56>
 800f150:	0798      	lsls	r0, r3, #30
 800f152:	bf49      	itett	mi
 800f154:	085b      	lsrmi	r3, r3, #1
 800f156:	089b      	lsrpl	r3, r3, #2
 800f158:	2001      	movmi	r0, #1
 800f15a:	600b      	strmi	r3, [r1, #0]
 800f15c:	bf5c      	itt	pl
 800f15e:	600b      	strpl	r3, [r1, #0]
 800f160:	2002      	movpl	r0, #2
 800f162:	4770      	bx	lr
 800f164:	b298      	uxth	r0, r3
 800f166:	b9a8      	cbnz	r0, 800f194 <__lo0bits+0x52>
 800f168:	0c1b      	lsrs	r3, r3, #16
 800f16a:	2010      	movs	r0, #16
 800f16c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f170:	bf04      	itt	eq
 800f172:	0a1b      	lsreq	r3, r3, #8
 800f174:	3008      	addeq	r0, #8
 800f176:	071a      	lsls	r2, r3, #28
 800f178:	bf04      	itt	eq
 800f17a:	091b      	lsreq	r3, r3, #4
 800f17c:	3004      	addeq	r0, #4
 800f17e:	079a      	lsls	r2, r3, #30
 800f180:	bf04      	itt	eq
 800f182:	089b      	lsreq	r3, r3, #2
 800f184:	3002      	addeq	r0, #2
 800f186:	07da      	lsls	r2, r3, #31
 800f188:	d402      	bmi.n	800f190 <__lo0bits+0x4e>
 800f18a:	085b      	lsrs	r3, r3, #1
 800f18c:	d006      	beq.n	800f19c <__lo0bits+0x5a>
 800f18e:	3001      	adds	r0, #1
 800f190:	600b      	str	r3, [r1, #0]
 800f192:	4770      	bx	lr
 800f194:	4610      	mov	r0, r2
 800f196:	e7e9      	b.n	800f16c <__lo0bits+0x2a>
 800f198:	2000      	movs	r0, #0
 800f19a:	4770      	bx	lr
 800f19c:	2020      	movs	r0, #32
 800f19e:	4770      	bx	lr

0800f1a0 <__i2b>:
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	f7ff fee9 	bl	800ef7c <_Balloc>
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	6144      	str	r4, [r0, #20]
 800f1ae:	6102      	str	r2, [r0, #16]
 800f1b0:	bd10      	pop	{r4, pc}

0800f1b2 <__multiply>:
 800f1b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b6:	4614      	mov	r4, r2
 800f1b8:	690a      	ldr	r2, [r1, #16]
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	bfb8      	it	lt
 800f1c0:	460b      	movlt	r3, r1
 800f1c2:	4688      	mov	r8, r1
 800f1c4:	bfbc      	itt	lt
 800f1c6:	46a0      	movlt	r8, r4
 800f1c8:	461c      	movlt	r4, r3
 800f1ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f1ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f1da:	eb07 0609 	add.w	r6, r7, r9
 800f1de:	42b3      	cmp	r3, r6
 800f1e0:	bfb8      	it	lt
 800f1e2:	3101      	addlt	r1, #1
 800f1e4:	f7ff feca 	bl	800ef7c <_Balloc>
 800f1e8:	f100 0514 	add.w	r5, r0, #20
 800f1ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	4573      	cmp	r3, lr
 800f1f6:	d316      	bcc.n	800f226 <__multiply+0x74>
 800f1f8:	f104 0214 	add.w	r2, r4, #20
 800f1fc:	f108 0114 	add.w	r1, r8, #20
 800f200:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f204:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	9b00      	ldr	r3, [sp, #0]
 800f20c:	9201      	str	r2, [sp, #4]
 800f20e:	4293      	cmp	r3, r2
 800f210:	d80c      	bhi.n	800f22c <__multiply+0x7a>
 800f212:	2e00      	cmp	r6, #0
 800f214:	dd03      	ble.n	800f21e <__multiply+0x6c>
 800f216:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d05d      	beq.n	800f2da <__multiply+0x128>
 800f21e:	6106      	str	r6, [r0, #16]
 800f220:	b003      	add	sp, #12
 800f222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f226:	f843 2b04 	str.w	r2, [r3], #4
 800f22a:	e7e3      	b.n	800f1f4 <__multiply+0x42>
 800f22c:	f8b2 b000 	ldrh.w	fp, [r2]
 800f230:	f1bb 0f00 	cmp.w	fp, #0
 800f234:	d023      	beq.n	800f27e <__multiply+0xcc>
 800f236:	4689      	mov	r9, r1
 800f238:	46ac      	mov	ip, r5
 800f23a:	f04f 0800 	mov.w	r8, #0
 800f23e:	f859 4b04 	ldr.w	r4, [r9], #4
 800f242:	f8dc a000 	ldr.w	sl, [ip]
 800f246:	b2a3      	uxth	r3, r4
 800f248:	fa1f fa8a 	uxth.w	sl, sl
 800f24c:	fb0b a303 	mla	r3, fp, r3, sl
 800f250:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f254:	f8dc 4000 	ldr.w	r4, [ip]
 800f258:	4443      	add	r3, r8
 800f25a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f25e:	fb0b 840a 	mla	r4, fp, sl, r8
 800f262:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f266:	46e2      	mov	sl, ip
 800f268:	b29b      	uxth	r3, r3
 800f26a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f26e:	454f      	cmp	r7, r9
 800f270:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f274:	f84a 3b04 	str.w	r3, [sl], #4
 800f278:	d82b      	bhi.n	800f2d2 <__multiply+0x120>
 800f27a:	f8cc 8004 	str.w	r8, [ip, #4]
 800f27e:	9b01      	ldr	r3, [sp, #4]
 800f280:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f284:	3204      	adds	r2, #4
 800f286:	f1ba 0f00 	cmp.w	sl, #0
 800f28a:	d020      	beq.n	800f2ce <__multiply+0x11c>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	4689      	mov	r9, r1
 800f290:	46a8      	mov	r8, r5
 800f292:	f04f 0b00 	mov.w	fp, #0
 800f296:	f8b9 c000 	ldrh.w	ip, [r9]
 800f29a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f29e:	fb0a 440c 	mla	r4, sl, ip, r4
 800f2a2:	445c      	add	r4, fp
 800f2a4:	46c4      	mov	ip, r8
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f2ac:	f84c 3b04 	str.w	r3, [ip], #4
 800f2b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f2b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f2b8:	0c1b      	lsrs	r3, r3, #16
 800f2ba:	fb0a b303 	mla	r3, sl, r3, fp
 800f2be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f2c2:	454f      	cmp	r7, r9
 800f2c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f2c8:	d805      	bhi.n	800f2d6 <__multiply+0x124>
 800f2ca:	f8c8 3004 	str.w	r3, [r8, #4]
 800f2ce:	3504      	adds	r5, #4
 800f2d0:	e79b      	b.n	800f20a <__multiply+0x58>
 800f2d2:	46d4      	mov	ip, sl
 800f2d4:	e7b3      	b.n	800f23e <__multiply+0x8c>
 800f2d6:	46e0      	mov	r8, ip
 800f2d8:	e7dd      	b.n	800f296 <__multiply+0xe4>
 800f2da:	3e01      	subs	r6, #1
 800f2dc:	e799      	b.n	800f212 <__multiply+0x60>
	...

0800f2e0 <__pow5mult>:
 800f2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2e4:	4615      	mov	r5, r2
 800f2e6:	f012 0203 	ands.w	r2, r2, #3
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	460f      	mov	r7, r1
 800f2ee:	d007      	beq.n	800f300 <__pow5mult+0x20>
 800f2f0:	3a01      	subs	r2, #1
 800f2f2:	4c21      	ldr	r4, [pc, #132]	; (800f378 <__pow5mult+0x98>)
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f2fa:	f7ff fe8a 	bl	800f012 <__multadd>
 800f2fe:	4607      	mov	r7, r0
 800f300:	10ad      	asrs	r5, r5, #2
 800f302:	d035      	beq.n	800f370 <__pow5mult+0x90>
 800f304:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f306:	b93c      	cbnz	r4, 800f318 <__pow5mult+0x38>
 800f308:	2010      	movs	r0, #16
 800f30a:	f7ff fe1d 	bl	800ef48 <malloc>
 800f30e:	6270      	str	r0, [r6, #36]	; 0x24
 800f310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f314:	6004      	str	r4, [r0, #0]
 800f316:	60c4      	str	r4, [r0, #12]
 800f318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f31c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f320:	b94c      	cbnz	r4, 800f336 <__pow5mult+0x56>
 800f322:	f240 2171 	movw	r1, #625	; 0x271
 800f326:	4630      	mov	r0, r6
 800f328:	f7ff ff3a 	bl	800f1a0 <__i2b>
 800f32c:	2300      	movs	r3, #0
 800f32e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f332:	4604      	mov	r4, r0
 800f334:	6003      	str	r3, [r0, #0]
 800f336:	f04f 0800 	mov.w	r8, #0
 800f33a:	07eb      	lsls	r3, r5, #31
 800f33c:	d50a      	bpl.n	800f354 <__pow5mult+0x74>
 800f33e:	4639      	mov	r1, r7
 800f340:	4622      	mov	r2, r4
 800f342:	4630      	mov	r0, r6
 800f344:	f7ff ff35 	bl	800f1b2 <__multiply>
 800f348:	4639      	mov	r1, r7
 800f34a:	4681      	mov	r9, r0
 800f34c:	4630      	mov	r0, r6
 800f34e:	f7ff fe49 	bl	800efe4 <_Bfree>
 800f352:	464f      	mov	r7, r9
 800f354:	106d      	asrs	r5, r5, #1
 800f356:	d00b      	beq.n	800f370 <__pow5mult+0x90>
 800f358:	6820      	ldr	r0, [r4, #0]
 800f35a:	b938      	cbnz	r0, 800f36c <__pow5mult+0x8c>
 800f35c:	4622      	mov	r2, r4
 800f35e:	4621      	mov	r1, r4
 800f360:	4630      	mov	r0, r6
 800f362:	f7ff ff26 	bl	800f1b2 <__multiply>
 800f366:	6020      	str	r0, [r4, #0]
 800f368:	f8c0 8000 	str.w	r8, [r0]
 800f36c:	4604      	mov	r4, r0
 800f36e:	e7e4      	b.n	800f33a <__pow5mult+0x5a>
 800f370:	4638      	mov	r0, r7
 800f372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f376:	bf00      	nop
 800f378:	080104d8 	.word	0x080104d8

0800f37c <__lshift>:
 800f37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f380:	460c      	mov	r4, r1
 800f382:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f386:	6923      	ldr	r3, [r4, #16]
 800f388:	6849      	ldr	r1, [r1, #4]
 800f38a:	eb0a 0903 	add.w	r9, sl, r3
 800f38e:	68a3      	ldr	r3, [r4, #8]
 800f390:	4607      	mov	r7, r0
 800f392:	4616      	mov	r6, r2
 800f394:	f109 0501 	add.w	r5, r9, #1
 800f398:	42ab      	cmp	r3, r5
 800f39a:	db32      	blt.n	800f402 <__lshift+0x86>
 800f39c:	4638      	mov	r0, r7
 800f39e:	f7ff fded 	bl	800ef7c <_Balloc>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	f100 0114 	add.w	r1, r0, #20
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	4553      	cmp	r3, sl
 800f3ae:	db2b      	blt.n	800f408 <__lshift+0x8c>
 800f3b0:	6920      	ldr	r0, [r4, #16]
 800f3b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f3b6:	f104 0314 	add.w	r3, r4, #20
 800f3ba:	f016 021f 	ands.w	r2, r6, #31
 800f3be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f3c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f3c6:	d025      	beq.n	800f414 <__lshift+0x98>
 800f3c8:	f1c2 0e20 	rsb	lr, r2, #32
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	681e      	ldr	r6, [r3, #0]
 800f3d0:	468a      	mov	sl, r1
 800f3d2:	4096      	lsls	r6, r2
 800f3d4:	4330      	orrs	r0, r6
 800f3d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f3da:	f853 0b04 	ldr.w	r0, [r3], #4
 800f3de:	459c      	cmp	ip, r3
 800f3e0:	fa20 f00e 	lsr.w	r0, r0, lr
 800f3e4:	d814      	bhi.n	800f410 <__lshift+0x94>
 800f3e6:	6048      	str	r0, [r1, #4]
 800f3e8:	b108      	cbz	r0, 800f3ee <__lshift+0x72>
 800f3ea:	f109 0502 	add.w	r5, r9, #2
 800f3ee:	3d01      	subs	r5, #1
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f8c8 5010 	str.w	r5, [r8, #16]
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	f7ff fdf4 	bl	800efe4 <_Bfree>
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f402:	3101      	adds	r1, #1
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	e7c7      	b.n	800f398 <__lshift+0x1c>
 800f408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f40c:	3301      	adds	r3, #1
 800f40e:	e7cd      	b.n	800f3ac <__lshift+0x30>
 800f410:	4651      	mov	r1, sl
 800f412:	e7dc      	b.n	800f3ce <__lshift+0x52>
 800f414:	3904      	subs	r1, #4
 800f416:	f853 2b04 	ldr.w	r2, [r3], #4
 800f41a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f41e:	459c      	cmp	ip, r3
 800f420:	d8f9      	bhi.n	800f416 <__lshift+0x9a>
 800f422:	e7e4      	b.n	800f3ee <__lshift+0x72>

0800f424 <__mcmp>:
 800f424:	6903      	ldr	r3, [r0, #16]
 800f426:	690a      	ldr	r2, [r1, #16]
 800f428:	1a9b      	subs	r3, r3, r2
 800f42a:	b530      	push	{r4, r5, lr}
 800f42c:	d10c      	bne.n	800f448 <__mcmp+0x24>
 800f42e:	0092      	lsls	r2, r2, #2
 800f430:	3014      	adds	r0, #20
 800f432:	3114      	adds	r1, #20
 800f434:	1884      	adds	r4, r0, r2
 800f436:	4411      	add	r1, r2
 800f438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f43c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f440:	4295      	cmp	r5, r2
 800f442:	d003      	beq.n	800f44c <__mcmp+0x28>
 800f444:	d305      	bcc.n	800f452 <__mcmp+0x2e>
 800f446:	2301      	movs	r3, #1
 800f448:	4618      	mov	r0, r3
 800f44a:	bd30      	pop	{r4, r5, pc}
 800f44c:	42a0      	cmp	r0, r4
 800f44e:	d3f3      	bcc.n	800f438 <__mcmp+0x14>
 800f450:	e7fa      	b.n	800f448 <__mcmp+0x24>
 800f452:	f04f 33ff 	mov.w	r3, #4294967295
 800f456:	e7f7      	b.n	800f448 <__mcmp+0x24>

0800f458 <__mdiff>:
 800f458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f45c:	460d      	mov	r5, r1
 800f45e:	4607      	mov	r7, r0
 800f460:	4611      	mov	r1, r2
 800f462:	4628      	mov	r0, r5
 800f464:	4614      	mov	r4, r2
 800f466:	f7ff ffdd 	bl	800f424 <__mcmp>
 800f46a:	1e06      	subs	r6, r0, #0
 800f46c:	d108      	bne.n	800f480 <__mdiff+0x28>
 800f46e:	4631      	mov	r1, r6
 800f470:	4638      	mov	r0, r7
 800f472:	f7ff fd83 	bl	800ef7c <_Balloc>
 800f476:	2301      	movs	r3, #1
 800f478:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f480:	bfa4      	itt	ge
 800f482:	4623      	movge	r3, r4
 800f484:	462c      	movge	r4, r5
 800f486:	4638      	mov	r0, r7
 800f488:	6861      	ldr	r1, [r4, #4]
 800f48a:	bfa6      	itte	ge
 800f48c:	461d      	movge	r5, r3
 800f48e:	2600      	movge	r6, #0
 800f490:	2601      	movlt	r6, #1
 800f492:	f7ff fd73 	bl	800ef7c <_Balloc>
 800f496:	692b      	ldr	r3, [r5, #16]
 800f498:	60c6      	str	r6, [r0, #12]
 800f49a:	6926      	ldr	r6, [r4, #16]
 800f49c:	f105 0914 	add.w	r9, r5, #20
 800f4a0:	f104 0214 	add.w	r2, r4, #20
 800f4a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f4a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f4ac:	f100 0514 	add.w	r5, r0, #20
 800f4b0:	f04f 0e00 	mov.w	lr, #0
 800f4b4:	f852 ab04 	ldr.w	sl, [r2], #4
 800f4b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800f4bc:	fa1e f18a 	uxtah	r1, lr, sl
 800f4c0:	b2a3      	uxth	r3, r4
 800f4c2:	1ac9      	subs	r1, r1, r3
 800f4c4:	0c23      	lsrs	r3, r4, #16
 800f4c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f4ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f4ce:	b289      	uxth	r1, r1
 800f4d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f4d4:	45c8      	cmp	r8, r9
 800f4d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f4da:	4694      	mov	ip, r2
 800f4dc:	f845 3b04 	str.w	r3, [r5], #4
 800f4e0:	d8e8      	bhi.n	800f4b4 <__mdiff+0x5c>
 800f4e2:	45bc      	cmp	ip, r7
 800f4e4:	d304      	bcc.n	800f4f0 <__mdiff+0x98>
 800f4e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f4ea:	b183      	cbz	r3, 800f50e <__mdiff+0xb6>
 800f4ec:	6106      	str	r6, [r0, #16]
 800f4ee:	e7c5      	b.n	800f47c <__mdiff+0x24>
 800f4f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f4f4:	fa1e f381 	uxtah	r3, lr, r1
 800f4f8:	141a      	asrs	r2, r3, #16
 800f4fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f504:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f508:	f845 3b04 	str.w	r3, [r5], #4
 800f50c:	e7e9      	b.n	800f4e2 <__mdiff+0x8a>
 800f50e:	3e01      	subs	r6, #1
 800f510:	e7e9      	b.n	800f4e6 <__mdiff+0x8e>
	...

0800f514 <__ulp>:
 800f514:	4b12      	ldr	r3, [pc, #72]	; (800f560 <__ulp+0x4c>)
 800f516:	ee10 2a90 	vmov	r2, s1
 800f51a:	401a      	ands	r2, r3
 800f51c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f520:	2b00      	cmp	r3, #0
 800f522:	dd04      	ble.n	800f52e <__ulp+0x1a>
 800f524:	2000      	movs	r0, #0
 800f526:	4619      	mov	r1, r3
 800f528:	ec41 0b10 	vmov	d0, r0, r1
 800f52c:	4770      	bx	lr
 800f52e:	425b      	negs	r3, r3
 800f530:	151b      	asrs	r3, r3, #20
 800f532:	2b13      	cmp	r3, #19
 800f534:	f04f 0000 	mov.w	r0, #0
 800f538:	f04f 0100 	mov.w	r1, #0
 800f53c:	dc04      	bgt.n	800f548 <__ulp+0x34>
 800f53e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f542:	fa42 f103 	asr.w	r1, r2, r3
 800f546:	e7ef      	b.n	800f528 <__ulp+0x14>
 800f548:	3b14      	subs	r3, #20
 800f54a:	2b1e      	cmp	r3, #30
 800f54c:	f04f 0201 	mov.w	r2, #1
 800f550:	bfda      	itte	le
 800f552:	f1c3 031f 	rsble	r3, r3, #31
 800f556:	fa02 f303 	lslle.w	r3, r2, r3
 800f55a:	4613      	movgt	r3, r2
 800f55c:	4618      	mov	r0, r3
 800f55e:	e7e3      	b.n	800f528 <__ulp+0x14>
 800f560:	7ff00000 	.word	0x7ff00000

0800f564 <__b2d>:
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	6905      	ldr	r5, [r0, #16]
 800f568:	f100 0714 	add.w	r7, r0, #20
 800f56c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f570:	1f2e      	subs	r6, r5, #4
 800f572:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f576:	4620      	mov	r0, r4
 800f578:	f7ff fdc4 	bl	800f104 <__hi0bits>
 800f57c:	f1c0 0320 	rsb	r3, r0, #32
 800f580:	280a      	cmp	r0, #10
 800f582:	600b      	str	r3, [r1, #0]
 800f584:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f5fc <__b2d+0x98>
 800f588:	dc14      	bgt.n	800f5b4 <__b2d+0x50>
 800f58a:	f1c0 0e0b 	rsb	lr, r0, #11
 800f58e:	fa24 f10e 	lsr.w	r1, r4, lr
 800f592:	42b7      	cmp	r7, r6
 800f594:	ea41 030c 	orr.w	r3, r1, ip
 800f598:	bf34      	ite	cc
 800f59a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f59e:	2100      	movcs	r1, #0
 800f5a0:	3015      	adds	r0, #21
 800f5a2:	fa04 f000 	lsl.w	r0, r4, r0
 800f5a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f5aa:	ea40 0201 	orr.w	r2, r0, r1
 800f5ae:	ec43 2b10 	vmov	d0, r2, r3
 800f5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5b4:	42b7      	cmp	r7, r6
 800f5b6:	bf3a      	itte	cc
 800f5b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f5bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f5c0:	2100      	movcs	r1, #0
 800f5c2:	380b      	subs	r0, #11
 800f5c4:	d015      	beq.n	800f5f2 <__b2d+0x8e>
 800f5c6:	4084      	lsls	r4, r0
 800f5c8:	f1c0 0520 	rsb	r5, r0, #32
 800f5cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f5d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f5d4:	42be      	cmp	r6, r7
 800f5d6:	fa21 fc05 	lsr.w	ip, r1, r5
 800f5da:	ea44 030c 	orr.w	r3, r4, ip
 800f5de:	bf8c      	ite	hi
 800f5e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f5e4:	2400      	movls	r4, #0
 800f5e6:	fa01 f000 	lsl.w	r0, r1, r0
 800f5ea:	40ec      	lsrs	r4, r5
 800f5ec:	ea40 0204 	orr.w	r2, r0, r4
 800f5f0:	e7dd      	b.n	800f5ae <__b2d+0x4a>
 800f5f2:	ea44 030c 	orr.w	r3, r4, ip
 800f5f6:	460a      	mov	r2, r1
 800f5f8:	e7d9      	b.n	800f5ae <__b2d+0x4a>
 800f5fa:	bf00      	nop
 800f5fc:	3ff00000 	.word	0x3ff00000

0800f600 <__d2b>:
 800f600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f604:	460e      	mov	r6, r1
 800f606:	2101      	movs	r1, #1
 800f608:	ec59 8b10 	vmov	r8, r9, d0
 800f60c:	4615      	mov	r5, r2
 800f60e:	f7ff fcb5 	bl	800ef7c <_Balloc>
 800f612:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f616:	4607      	mov	r7, r0
 800f618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f61c:	bb34      	cbnz	r4, 800f66c <__d2b+0x6c>
 800f61e:	9301      	str	r3, [sp, #4]
 800f620:	f1b8 0300 	subs.w	r3, r8, #0
 800f624:	d027      	beq.n	800f676 <__d2b+0x76>
 800f626:	a802      	add	r0, sp, #8
 800f628:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f62c:	f7ff fd89 	bl	800f142 <__lo0bits>
 800f630:	9900      	ldr	r1, [sp, #0]
 800f632:	b1f0      	cbz	r0, 800f672 <__d2b+0x72>
 800f634:	9a01      	ldr	r2, [sp, #4]
 800f636:	f1c0 0320 	rsb	r3, r0, #32
 800f63a:	fa02 f303 	lsl.w	r3, r2, r3
 800f63e:	430b      	orrs	r3, r1
 800f640:	40c2      	lsrs	r2, r0
 800f642:	617b      	str	r3, [r7, #20]
 800f644:	9201      	str	r2, [sp, #4]
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	61bb      	str	r3, [r7, #24]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bf14      	ite	ne
 800f64e:	2102      	movne	r1, #2
 800f650:	2101      	moveq	r1, #1
 800f652:	6139      	str	r1, [r7, #16]
 800f654:	b1c4      	cbz	r4, 800f688 <__d2b+0x88>
 800f656:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f65a:	4404      	add	r4, r0
 800f65c:	6034      	str	r4, [r6, #0]
 800f65e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f662:	6028      	str	r0, [r5, #0]
 800f664:	4638      	mov	r0, r7
 800f666:	b003      	add	sp, #12
 800f668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f66c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f670:	e7d5      	b.n	800f61e <__d2b+0x1e>
 800f672:	6179      	str	r1, [r7, #20]
 800f674:	e7e7      	b.n	800f646 <__d2b+0x46>
 800f676:	a801      	add	r0, sp, #4
 800f678:	f7ff fd63 	bl	800f142 <__lo0bits>
 800f67c:	9b01      	ldr	r3, [sp, #4]
 800f67e:	617b      	str	r3, [r7, #20]
 800f680:	2101      	movs	r1, #1
 800f682:	6139      	str	r1, [r7, #16]
 800f684:	3020      	adds	r0, #32
 800f686:	e7e5      	b.n	800f654 <__d2b+0x54>
 800f688:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f68c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f690:	6030      	str	r0, [r6, #0]
 800f692:	6918      	ldr	r0, [r3, #16]
 800f694:	f7ff fd36 	bl	800f104 <__hi0bits>
 800f698:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f69c:	e7e1      	b.n	800f662 <__d2b+0x62>

0800f69e <__ratio>:
 800f69e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a2:	4688      	mov	r8, r1
 800f6a4:	4669      	mov	r1, sp
 800f6a6:	4681      	mov	r9, r0
 800f6a8:	f7ff ff5c 	bl	800f564 <__b2d>
 800f6ac:	a901      	add	r1, sp, #4
 800f6ae:	4640      	mov	r0, r8
 800f6b0:	ec57 6b10 	vmov	r6, r7, d0
 800f6b4:	f7ff ff56 	bl	800f564 <__b2d>
 800f6b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f6c0:	eba3 0c02 	sub.w	ip, r3, r2
 800f6c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f6c8:	1a9b      	subs	r3, r3, r2
 800f6ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f6ce:	ec5b ab10 	vmov	sl, fp, d0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	bfce      	itee	gt
 800f6d6:	463a      	movgt	r2, r7
 800f6d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6dc:	465a      	movle	r2, fp
 800f6de:	4659      	mov	r1, fp
 800f6e0:	463d      	mov	r5, r7
 800f6e2:	bfd4      	ite	le
 800f6e4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f6e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	ee10 2a10 	vmov	r2, s0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f7f1 f8a9 	bl	800084c <__aeabi_ddiv>
 800f6fa:	ec41 0b10 	vmov	d0, r0, r1
 800f6fe:	b003      	add	sp, #12
 800f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f704 <__copybits>:
 800f704:	3901      	subs	r1, #1
 800f706:	b510      	push	{r4, lr}
 800f708:	1149      	asrs	r1, r1, #5
 800f70a:	6914      	ldr	r4, [r2, #16]
 800f70c:	3101      	adds	r1, #1
 800f70e:	f102 0314 	add.w	r3, r2, #20
 800f712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f716:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f71a:	42a3      	cmp	r3, r4
 800f71c:	4602      	mov	r2, r0
 800f71e:	d303      	bcc.n	800f728 <__copybits+0x24>
 800f720:	2300      	movs	r3, #0
 800f722:	428a      	cmp	r2, r1
 800f724:	d305      	bcc.n	800f732 <__copybits+0x2e>
 800f726:	bd10      	pop	{r4, pc}
 800f728:	f853 2b04 	ldr.w	r2, [r3], #4
 800f72c:	f840 2b04 	str.w	r2, [r0], #4
 800f730:	e7f3      	b.n	800f71a <__copybits+0x16>
 800f732:	f842 3b04 	str.w	r3, [r2], #4
 800f736:	e7f4      	b.n	800f722 <__copybits+0x1e>

0800f738 <__any_on>:
 800f738:	f100 0214 	add.w	r2, r0, #20
 800f73c:	6900      	ldr	r0, [r0, #16]
 800f73e:	114b      	asrs	r3, r1, #5
 800f740:	4298      	cmp	r0, r3
 800f742:	b510      	push	{r4, lr}
 800f744:	db11      	blt.n	800f76a <__any_on+0x32>
 800f746:	dd0a      	ble.n	800f75e <__any_on+0x26>
 800f748:	f011 011f 	ands.w	r1, r1, #31
 800f74c:	d007      	beq.n	800f75e <__any_on+0x26>
 800f74e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f752:	fa24 f001 	lsr.w	r0, r4, r1
 800f756:	fa00 f101 	lsl.w	r1, r0, r1
 800f75a:	428c      	cmp	r4, r1
 800f75c:	d10b      	bne.n	800f776 <__any_on+0x3e>
 800f75e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f762:	4293      	cmp	r3, r2
 800f764:	d803      	bhi.n	800f76e <__any_on+0x36>
 800f766:	2000      	movs	r0, #0
 800f768:	bd10      	pop	{r4, pc}
 800f76a:	4603      	mov	r3, r0
 800f76c:	e7f7      	b.n	800f75e <__any_on+0x26>
 800f76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f772:	2900      	cmp	r1, #0
 800f774:	d0f5      	beq.n	800f762 <__any_on+0x2a>
 800f776:	2001      	movs	r0, #1
 800f778:	e7f6      	b.n	800f768 <__any_on+0x30>

0800f77a <_calloc_r>:
 800f77a:	b538      	push	{r3, r4, r5, lr}
 800f77c:	fb02 f401 	mul.w	r4, r2, r1
 800f780:	4621      	mov	r1, r4
 800f782:	f000 f857 	bl	800f834 <_malloc_r>
 800f786:	4605      	mov	r5, r0
 800f788:	b118      	cbz	r0, 800f792 <_calloc_r+0x18>
 800f78a:	4622      	mov	r2, r4
 800f78c:	2100      	movs	r1, #0
 800f78e:	f7fc fa26 	bl	800bbde <memset>
 800f792:	4628      	mov	r0, r5
 800f794:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f798 <_free_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4605      	mov	r5, r0
 800f79c:	2900      	cmp	r1, #0
 800f79e:	d045      	beq.n	800f82c <_free_r+0x94>
 800f7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7a4:	1f0c      	subs	r4, r1, #4
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	bfb8      	it	lt
 800f7aa:	18e4      	addlt	r4, r4, r3
 800f7ac:	f000 fc0f 	bl	800ffce <__malloc_lock>
 800f7b0:	4a1f      	ldr	r2, [pc, #124]	; (800f830 <_free_r+0x98>)
 800f7b2:	6813      	ldr	r3, [r2, #0]
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	b933      	cbnz	r3, 800f7c6 <_free_r+0x2e>
 800f7b8:	6063      	str	r3, [r4, #4]
 800f7ba:	6014      	str	r4, [r2, #0]
 800f7bc:	4628      	mov	r0, r5
 800f7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7c2:	f000 bc05 	b.w	800ffd0 <__malloc_unlock>
 800f7c6:	42a3      	cmp	r3, r4
 800f7c8:	d90c      	bls.n	800f7e4 <_free_r+0x4c>
 800f7ca:	6821      	ldr	r1, [r4, #0]
 800f7cc:	1862      	adds	r2, r4, r1
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	bf04      	itt	eq
 800f7d2:	681a      	ldreq	r2, [r3, #0]
 800f7d4:	685b      	ldreq	r3, [r3, #4]
 800f7d6:	6063      	str	r3, [r4, #4]
 800f7d8:	bf04      	itt	eq
 800f7da:	1852      	addeq	r2, r2, r1
 800f7dc:	6022      	streq	r2, [r4, #0]
 800f7de:	6004      	str	r4, [r0, #0]
 800f7e0:	e7ec      	b.n	800f7bc <_free_r+0x24>
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	685a      	ldr	r2, [r3, #4]
 800f7e6:	b10a      	cbz	r2, 800f7ec <_free_r+0x54>
 800f7e8:	42a2      	cmp	r2, r4
 800f7ea:	d9fa      	bls.n	800f7e2 <_free_r+0x4a>
 800f7ec:	6819      	ldr	r1, [r3, #0]
 800f7ee:	1858      	adds	r0, r3, r1
 800f7f0:	42a0      	cmp	r0, r4
 800f7f2:	d10b      	bne.n	800f80c <_free_r+0x74>
 800f7f4:	6820      	ldr	r0, [r4, #0]
 800f7f6:	4401      	add	r1, r0
 800f7f8:	1858      	adds	r0, r3, r1
 800f7fa:	4282      	cmp	r2, r0
 800f7fc:	6019      	str	r1, [r3, #0]
 800f7fe:	d1dd      	bne.n	800f7bc <_free_r+0x24>
 800f800:	6810      	ldr	r0, [r2, #0]
 800f802:	6852      	ldr	r2, [r2, #4]
 800f804:	605a      	str	r2, [r3, #4]
 800f806:	4401      	add	r1, r0
 800f808:	6019      	str	r1, [r3, #0]
 800f80a:	e7d7      	b.n	800f7bc <_free_r+0x24>
 800f80c:	d902      	bls.n	800f814 <_free_r+0x7c>
 800f80e:	230c      	movs	r3, #12
 800f810:	602b      	str	r3, [r5, #0]
 800f812:	e7d3      	b.n	800f7bc <_free_r+0x24>
 800f814:	6820      	ldr	r0, [r4, #0]
 800f816:	1821      	adds	r1, r4, r0
 800f818:	428a      	cmp	r2, r1
 800f81a:	bf04      	itt	eq
 800f81c:	6811      	ldreq	r1, [r2, #0]
 800f81e:	6852      	ldreq	r2, [r2, #4]
 800f820:	6062      	str	r2, [r4, #4]
 800f822:	bf04      	itt	eq
 800f824:	1809      	addeq	r1, r1, r0
 800f826:	6021      	streq	r1, [r4, #0]
 800f828:	605c      	str	r4, [r3, #4]
 800f82a:	e7c7      	b.n	800f7bc <_free_r+0x24>
 800f82c:	bd38      	pop	{r3, r4, r5, pc}
 800f82e:	bf00      	nop
 800f830:	2001cc78 	.word	0x2001cc78

0800f834 <_malloc_r>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	1ccd      	adds	r5, r1, #3
 800f838:	f025 0503 	bic.w	r5, r5, #3
 800f83c:	3508      	adds	r5, #8
 800f83e:	2d0c      	cmp	r5, #12
 800f840:	bf38      	it	cc
 800f842:	250c      	movcc	r5, #12
 800f844:	2d00      	cmp	r5, #0
 800f846:	4606      	mov	r6, r0
 800f848:	db01      	blt.n	800f84e <_malloc_r+0x1a>
 800f84a:	42a9      	cmp	r1, r5
 800f84c:	d903      	bls.n	800f856 <_malloc_r+0x22>
 800f84e:	230c      	movs	r3, #12
 800f850:	6033      	str	r3, [r6, #0]
 800f852:	2000      	movs	r0, #0
 800f854:	bd70      	pop	{r4, r5, r6, pc}
 800f856:	f000 fbba 	bl	800ffce <__malloc_lock>
 800f85a:	4a21      	ldr	r2, [pc, #132]	; (800f8e0 <_malloc_r+0xac>)
 800f85c:	6814      	ldr	r4, [r2, #0]
 800f85e:	4621      	mov	r1, r4
 800f860:	b991      	cbnz	r1, 800f888 <_malloc_r+0x54>
 800f862:	4c20      	ldr	r4, [pc, #128]	; (800f8e4 <_malloc_r+0xb0>)
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	b91b      	cbnz	r3, 800f870 <_malloc_r+0x3c>
 800f868:	4630      	mov	r0, r6
 800f86a:	f000 facf 	bl	800fe0c <_sbrk_r>
 800f86e:	6020      	str	r0, [r4, #0]
 800f870:	4629      	mov	r1, r5
 800f872:	4630      	mov	r0, r6
 800f874:	f000 faca 	bl	800fe0c <_sbrk_r>
 800f878:	1c43      	adds	r3, r0, #1
 800f87a:	d124      	bne.n	800f8c6 <_malloc_r+0x92>
 800f87c:	230c      	movs	r3, #12
 800f87e:	6033      	str	r3, [r6, #0]
 800f880:	4630      	mov	r0, r6
 800f882:	f000 fba5 	bl	800ffd0 <__malloc_unlock>
 800f886:	e7e4      	b.n	800f852 <_malloc_r+0x1e>
 800f888:	680b      	ldr	r3, [r1, #0]
 800f88a:	1b5b      	subs	r3, r3, r5
 800f88c:	d418      	bmi.n	800f8c0 <_malloc_r+0x8c>
 800f88e:	2b0b      	cmp	r3, #11
 800f890:	d90f      	bls.n	800f8b2 <_malloc_r+0x7e>
 800f892:	600b      	str	r3, [r1, #0]
 800f894:	50cd      	str	r5, [r1, r3]
 800f896:	18cc      	adds	r4, r1, r3
 800f898:	4630      	mov	r0, r6
 800f89a:	f000 fb99 	bl	800ffd0 <__malloc_unlock>
 800f89e:	f104 000b 	add.w	r0, r4, #11
 800f8a2:	1d23      	adds	r3, r4, #4
 800f8a4:	f020 0007 	bic.w	r0, r0, #7
 800f8a8:	1ac3      	subs	r3, r0, r3
 800f8aa:	d0d3      	beq.n	800f854 <_malloc_r+0x20>
 800f8ac:	425a      	negs	r2, r3
 800f8ae:	50e2      	str	r2, [r4, r3]
 800f8b0:	e7d0      	b.n	800f854 <_malloc_r+0x20>
 800f8b2:	428c      	cmp	r4, r1
 800f8b4:	684b      	ldr	r3, [r1, #4]
 800f8b6:	bf16      	itet	ne
 800f8b8:	6063      	strne	r3, [r4, #4]
 800f8ba:	6013      	streq	r3, [r2, #0]
 800f8bc:	460c      	movne	r4, r1
 800f8be:	e7eb      	b.n	800f898 <_malloc_r+0x64>
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	6849      	ldr	r1, [r1, #4]
 800f8c4:	e7cc      	b.n	800f860 <_malloc_r+0x2c>
 800f8c6:	1cc4      	adds	r4, r0, #3
 800f8c8:	f024 0403 	bic.w	r4, r4, #3
 800f8cc:	42a0      	cmp	r0, r4
 800f8ce:	d005      	beq.n	800f8dc <_malloc_r+0xa8>
 800f8d0:	1a21      	subs	r1, r4, r0
 800f8d2:	4630      	mov	r0, r6
 800f8d4:	f000 fa9a 	bl	800fe0c <_sbrk_r>
 800f8d8:	3001      	adds	r0, #1
 800f8da:	d0cf      	beq.n	800f87c <_malloc_r+0x48>
 800f8dc:	6025      	str	r5, [r4, #0]
 800f8de:	e7db      	b.n	800f898 <_malloc_r+0x64>
 800f8e0:	2001cc78 	.word	0x2001cc78
 800f8e4:	2001cc7c 	.word	0x2001cc7c

0800f8e8 <__ssputs_r>:
 800f8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ec:	688e      	ldr	r6, [r1, #8]
 800f8ee:	429e      	cmp	r6, r3
 800f8f0:	4682      	mov	sl, r0
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	4690      	mov	r8, r2
 800f8f6:	4699      	mov	r9, r3
 800f8f8:	d837      	bhi.n	800f96a <__ssputs_r+0x82>
 800f8fa:	898a      	ldrh	r2, [r1, #12]
 800f8fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f900:	d031      	beq.n	800f966 <__ssputs_r+0x7e>
 800f902:	6825      	ldr	r5, [r4, #0]
 800f904:	6909      	ldr	r1, [r1, #16]
 800f906:	1a6f      	subs	r7, r5, r1
 800f908:	6965      	ldr	r5, [r4, #20]
 800f90a:	2302      	movs	r3, #2
 800f90c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f910:	fb95 f5f3 	sdiv	r5, r5, r3
 800f914:	f109 0301 	add.w	r3, r9, #1
 800f918:	443b      	add	r3, r7
 800f91a:	429d      	cmp	r5, r3
 800f91c:	bf38      	it	cc
 800f91e:	461d      	movcc	r5, r3
 800f920:	0553      	lsls	r3, r2, #21
 800f922:	d530      	bpl.n	800f986 <__ssputs_r+0x9e>
 800f924:	4629      	mov	r1, r5
 800f926:	f7ff ff85 	bl	800f834 <_malloc_r>
 800f92a:	4606      	mov	r6, r0
 800f92c:	b950      	cbnz	r0, 800f944 <__ssputs_r+0x5c>
 800f92e:	230c      	movs	r3, #12
 800f930:	f8ca 3000 	str.w	r3, [sl]
 800f934:	89a3      	ldrh	r3, [r4, #12]
 800f936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f93a:	81a3      	strh	r3, [r4, #12]
 800f93c:	f04f 30ff 	mov.w	r0, #4294967295
 800f940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f944:	463a      	mov	r2, r7
 800f946:	6921      	ldr	r1, [r4, #16]
 800f948:	f7fc f93e 	bl	800bbc8 <memcpy>
 800f94c:	89a3      	ldrh	r3, [r4, #12]
 800f94e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f956:	81a3      	strh	r3, [r4, #12]
 800f958:	6126      	str	r6, [r4, #16]
 800f95a:	6165      	str	r5, [r4, #20]
 800f95c:	443e      	add	r6, r7
 800f95e:	1bed      	subs	r5, r5, r7
 800f960:	6026      	str	r6, [r4, #0]
 800f962:	60a5      	str	r5, [r4, #8]
 800f964:	464e      	mov	r6, r9
 800f966:	454e      	cmp	r6, r9
 800f968:	d900      	bls.n	800f96c <__ssputs_r+0x84>
 800f96a:	464e      	mov	r6, r9
 800f96c:	4632      	mov	r2, r6
 800f96e:	4641      	mov	r1, r8
 800f970:	6820      	ldr	r0, [r4, #0]
 800f972:	f000 fb13 	bl	800ff9c <memmove>
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	1b9b      	subs	r3, r3, r6
 800f97a:	60a3      	str	r3, [r4, #8]
 800f97c:	6823      	ldr	r3, [r4, #0]
 800f97e:	441e      	add	r6, r3
 800f980:	6026      	str	r6, [r4, #0]
 800f982:	2000      	movs	r0, #0
 800f984:	e7dc      	b.n	800f940 <__ssputs_r+0x58>
 800f986:	462a      	mov	r2, r5
 800f988:	f000 fb23 	bl	800ffd2 <_realloc_r>
 800f98c:	4606      	mov	r6, r0
 800f98e:	2800      	cmp	r0, #0
 800f990:	d1e2      	bne.n	800f958 <__ssputs_r+0x70>
 800f992:	6921      	ldr	r1, [r4, #16]
 800f994:	4650      	mov	r0, sl
 800f996:	f7ff feff 	bl	800f798 <_free_r>
 800f99a:	e7c8      	b.n	800f92e <__ssputs_r+0x46>

0800f99c <_svfiprintf_r>:
 800f99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a0:	461d      	mov	r5, r3
 800f9a2:	898b      	ldrh	r3, [r1, #12]
 800f9a4:	061f      	lsls	r7, r3, #24
 800f9a6:	b09d      	sub	sp, #116	; 0x74
 800f9a8:	4680      	mov	r8, r0
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	4616      	mov	r6, r2
 800f9ae:	d50f      	bpl.n	800f9d0 <_svfiprintf_r+0x34>
 800f9b0:	690b      	ldr	r3, [r1, #16]
 800f9b2:	b96b      	cbnz	r3, 800f9d0 <_svfiprintf_r+0x34>
 800f9b4:	2140      	movs	r1, #64	; 0x40
 800f9b6:	f7ff ff3d 	bl	800f834 <_malloc_r>
 800f9ba:	6020      	str	r0, [r4, #0]
 800f9bc:	6120      	str	r0, [r4, #16]
 800f9be:	b928      	cbnz	r0, 800f9cc <_svfiprintf_r+0x30>
 800f9c0:	230c      	movs	r3, #12
 800f9c2:	f8c8 3000 	str.w	r3, [r8]
 800f9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ca:	e0c8      	b.n	800fb5e <_svfiprintf_r+0x1c2>
 800f9cc:	2340      	movs	r3, #64	; 0x40
 800f9ce:	6163      	str	r3, [r4, #20]
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f9d4:	2320      	movs	r3, #32
 800f9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9da:	2330      	movs	r3, #48	; 0x30
 800f9dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9e0:	9503      	str	r5, [sp, #12]
 800f9e2:	f04f 0b01 	mov.w	fp, #1
 800f9e6:	4637      	mov	r7, r6
 800f9e8:	463d      	mov	r5, r7
 800f9ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f9ee:	b10b      	cbz	r3, 800f9f4 <_svfiprintf_r+0x58>
 800f9f0:	2b25      	cmp	r3, #37	; 0x25
 800f9f2:	d13e      	bne.n	800fa72 <_svfiprintf_r+0xd6>
 800f9f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800f9f8:	d00b      	beq.n	800fa12 <_svfiprintf_r+0x76>
 800f9fa:	4653      	mov	r3, sl
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4640      	mov	r0, r8
 800fa02:	f7ff ff71 	bl	800f8e8 <__ssputs_r>
 800fa06:	3001      	adds	r0, #1
 800fa08:	f000 80a4 	beq.w	800fb54 <_svfiprintf_r+0x1b8>
 800fa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa0e:	4453      	add	r3, sl
 800fa10:	9309      	str	r3, [sp, #36]	; 0x24
 800fa12:	783b      	ldrb	r3, [r7, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f000 809d 	beq.w	800fb54 <_svfiprintf_r+0x1b8>
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa24:	9304      	str	r3, [sp, #16]
 800fa26:	9307      	str	r3, [sp, #28]
 800fa28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa2c:	931a      	str	r3, [sp, #104]	; 0x68
 800fa2e:	462f      	mov	r7, r5
 800fa30:	2205      	movs	r2, #5
 800fa32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fa36:	4850      	ldr	r0, [pc, #320]	; (800fb78 <_svfiprintf_r+0x1dc>)
 800fa38:	f7f0 fbd2 	bl	80001e0 <memchr>
 800fa3c:	9b04      	ldr	r3, [sp, #16]
 800fa3e:	b9d0      	cbnz	r0, 800fa76 <_svfiprintf_r+0xda>
 800fa40:	06d9      	lsls	r1, r3, #27
 800fa42:	bf44      	itt	mi
 800fa44:	2220      	movmi	r2, #32
 800fa46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fa4a:	071a      	lsls	r2, r3, #28
 800fa4c:	bf44      	itt	mi
 800fa4e:	222b      	movmi	r2, #43	; 0x2b
 800fa50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fa54:	782a      	ldrb	r2, [r5, #0]
 800fa56:	2a2a      	cmp	r2, #42	; 0x2a
 800fa58:	d015      	beq.n	800fa86 <_svfiprintf_r+0xea>
 800fa5a:	9a07      	ldr	r2, [sp, #28]
 800fa5c:	462f      	mov	r7, r5
 800fa5e:	2000      	movs	r0, #0
 800fa60:	250a      	movs	r5, #10
 800fa62:	4639      	mov	r1, r7
 800fa64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa68:	3b30      	subs	r3, #48	; 0x30
 800fa6a:	2b09      	cmp	r3, #9
 800fa6c:	d94d      	bls.n	800fb0a <_svfiprintf_r+0x16e>
 800fa6e:	b1b8      	cbz	r0, 800faa0 <_svfiprintf_r+0x104>
 800fa70:	e00f      	b.n	800fa92 <_svfiprintf_r+0xf6>
 800fa72:	462f      	mov	r7, r5
 800fa74:	e7b8      	b.n	800f9e8 <_svfiprintf_r+0x4c>
 800fa76:	4a40      	ldr	r2, [pc, #256]	; (800fb78 <_svfiprintf_r+0x1dc>)
 800fa78:	1a80      	subs	r0, r0, r2
 800fa7a:	fa0b f000 	lsl.w	r0, fp, r0
 800fa7e:	4318      	orrs	r0, r3
 800fa80:	9004      	str	r0, [sp, #16]
 800fa82:	463d      	mov	r5, r7
 800fa84:	e7d3      	b.n	800fa2e <_svfiprintf_r+0x92>
 800fa86:	9a03      	ldr	r2, [sp, #12]
 800fa88:	1d11      	adds	r1, r2, #4
 800fa8a:	6812      	ldr	r2, [r2, #0]
 800fa8c:	9103      	str	r1, [sp, #12]
 800fa8e:	2a00      	cmp	r2, #0
 800fa90:	db01      	blt.n	800fa96 <_svfiprintf_r+0xfa>
 800fa92:	9207      	str	r2, [sp, #28]
 800fa94:	e004      	b.n	800faa0 <_svfiprintf_r+0x104>
 800fa96:	4252      	negs	r2, r2
 800fa98:	f043 0302 	orr.w	r3, r3, #2
 800fa9c:	9207      	str	r2, [sp, #28]
 800fa9e:	9304      	str	r3, [sp, #16]
 800faa0:	783b      	ldrb	r3, [r7, #0]
 800faa2:	2b2e      	cmp	r3, #46	; 0x2e
 800faa4:	d10c      	bne.n	800fac0 <_svfiprintf_r+0x124>
 800faa6:	787b      	ldrb	r3, [r7, #1]
 800faa8:	2b2a      	cmp	r3, #42	; 0x2a
 800faaa:	d133      	bne.n	800fb14 <_svfiprintf_r+0x178>
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	1d1a      	adds	r2, r3, #4
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	9203      	str	r2, [sp, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	bfb8      	it	lt
 800fab8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fabc:	3702      	adds	r7, #2
 800fabe:	9305      	str	r3, [sp, #20]
 800fac0:	4d2e      	ldr	r5, [pc, #184]	; (800fb7c <_svfiprintf_r+0x1e0>)
 800fac2:	7839      	ldrb	r1, [r7, #0]
 800fac4:	2203      	movs	r2, #3
 800fac6:	4628      	mov	r0, r5
 800fac8:	f7f0 fb8a 	bl	80001e0 <memchr>
 800facc:	b138      	cbz	r0, 800fade <_svfiprintf_r+0x142>
 800face:	2340      	movs	r3, #64	; 0x40
 800fad0:	1b40      	subs	r0, r0, r5
 800fad2:	fa03 f000 	lsl.w	r0, r3, r0
 800fad6:	9b04      	ldr	r3, [sp, #16]
 800fad8:	4303      	orrs	r3, r0
 800fada:	3701      	adds	r7, #1
 800fadc:	9304      	str	r3, [sp, #16]
 800fade:	7839      	ldrb	r1, [r7, #0]
 800fae0:	4827      	ldr	r0, [pc, #156]	; (800fb80 <_svfiprintf_r+0x1e4>)
 800fae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fae6:	2206      	movs	r2, #6
 800fae8:	1c7e      	adds	r6, r7, #1
 800faea:	f7f0 fb79 	bl	80001e0 <memchr>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d038      	beq.n	800fb64 <_svfiprintf_r+0x1c8>
 800faf2:	4b24      	ldr	r3, [pc, #144]	; (800fb84 <_svfiprintf_r+0x1e8>)
 800faf4:	bb13      	cbnz	r3, 800fb3c <_svfiprintf_r+0x1a0>
 800faf6:	9b03      	ldr	r3, [sp, #12]
 800faf8:	3307      	adds	r3, #7
 800fafa:	f023 0307 	bic.w	r3, r3, #7
 800fafe:	3308      	adds	r3, #8
 800fb00:	9303      	str	r3, [sp, #12]
 800fb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb04:	444b      	add	r3, r9
 800fb06:	9309      	str	r3, [sp, #36]	; 0x24
 800fb08:	e76d      	b.n	800f9e6 <_svfiprintf_r+0x4a>
 800fb0a:	fb05 3202 	mla	r2, r5, r2, r3
 800fb0e:	2001      	movs	r0, #1
 800fb10:	460f      	mov	r7, r1
 800fb12:	e7a6      	b.n	800fa62 <_svfiprintf_r+0xc6>
 800fb14:	2300      	movs	r3, #0
 800fb16:	3701      	adds	r7, #1
 800fb18:	9305      	str	r3, [sp, #20]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	250a      	movs	r5, #10
 800fb1e:	4638      	mov	r0, r7
 800fb20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb24:	3a30      	subs	r2, #48	; 0x30
 800fb26:	2a09      	cmp	r2, #9
 800fb28:	d903      	bls.n	800fb32 <_svfiprintf_r+0x196>
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d0c8      	beq.n	800fac0 <_svfiprintf_r+0x124>
 800fb2e:	9105      	str	r1, [sp, #20]
 800fb30:	e7c6      	b.n	800fac0 <_svfiprintf_r+0x124>
 800fb32:	fb05 2101 	mla	r1, r5, r1, r2
 800fb36:	2301      	movs	r3, #1
 800fb38:	4607      	mov	r7, r0
 800fb3a:	e7f0      	b.n	800fb1e <_svfiprintf_r+0x182>
 800fb3c:	ab03      	add	r3, sp, #12
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	4622      	mov	r2, r4
 800fb42:	4b11      	ldr	r3, [pc, #68]	; (800fb88 <_svfiprintf_r+0x1ec>)
 800fb44:	a904      	add	r1, sp, #16
 800fb46:	4640      	mov	r0, r8
 800fb48:	f7fc f8e6 	bl	800bd18 <_printf_float>
 800fb4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fb50:	4681      	mov	r9, r0
 800fb52:	d1d6      	bne.n	800fb02 <_svfiprintf_r+0x166>
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	065b      	lsls	r3, r3, #25
 800fb58:	f53f af35 	bmi.w	800f9c6 <_svfiprintf_r+0x2a>
 800fb5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb5e:	b01d      	add	sp, #116	; 0x74
 800fb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb64:	ab03      	add	r3, sp, #12
 800fb66:	9300      	str	r3, [sp, #0]
 800fb68:	4622      	mov	r2, r4
 800fb6a:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <_svfiprintf_r+0x1ec>)
 800fb6c:	a904      	add	r1, sp, #16
 800fb6e:	4640      	mov	r0, r8
 800fb70:	f7fc fb88 	bl	800c284 <_printf_i>
 800fb74:	e7ea      	b.n	800fb4c <_svfiprintf_r+0x1b0>
 800fb76:	bf00      	nop
 800fb78:	080104e4 	.word	0x080104e4
 800fb7c:	080104ea 	.word	0x080104ea
 800fb80:	080104ee 	.word	0x080104ee
 800fb84:	0800bd19 	.word	0x0800bd19
 800fb88:	0800f8e9 	.word	0x0800f8e9

0800fb8c <__sfputc_r>:
 800fb8c:	6893      	ldr	r3, [r2, #8]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	b410      	push	{r4}
 800fb94:	6093      	str	r3, [r2, #8]
 800fb96:	da08      	bge.n	800fbaa <__sfputc_r+0x1e>
 800fb98:	6994      	ldr	r4, [r2, #24]
 800fb9a:	42a3      	cmp	r3, r4
 800fb9c:	db01      	blt.n	800fba2 <__sfputc_r+0x16>
 800fb9e:	290a      	cmp	r1, #10
 800fba0:	d103      	bne.n	800fbaa <__sfputc_r+0x1e>
 800fba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba6:	f7fd bdb1 	b.w	800d70c <__swbuf_r>
 800fbaa:	6813      	ldr	r3, [r2, #0]
 800fbac:	1c58      	adds	r0, r3, #1
 800fbae:	6010      	str	r0, [r2, #0]
 800fbb0:	7019      	strb	r1, [r3, #0]
 800fbb2:	4608      	mov	r0, r1
 800fbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <__sfputs_r>:
 800fbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbbc:	4606      	mov	r6, r0
 800fbbe:	460f      	mov	r7, r1
 800fbc0:	4614      	mov	r4, r2
 800fbc2:	18d5      	adds	r5, r2, r3
 800fbc4:	42ac      	cmp	r4, r5
 800fbc6:	d101      	bne.n	800fbcc <__sfputs_r+0x12>
 800fbc8:	2000      	movs	r0, #0
 800fbca:	e007      	b.n	800fbdc <__sfputs_r+0x22>
 800fbcc:	463a      	mov	r2, r7
 800fbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f7ff ffda 	bl	800fb8c <__sfputc_r>
 800fbd8:	1c43      	adds	r3, r0, #1
 800fbda:	d1f3      	bne.n	800fbc4 <__sfputs_r+0xa>
 800fbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbe0 <_vfiprintf_r>:
 800fbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	b09d      	sub	sp, #116	; 0x74
 800fbe8:	4617      	mov	r7, r2
 800fbea:	461d      	mov	r5, r3
 800fbec:	4606      	mov	r6, r0
 800fbee:	b118      	cbz	r0, 800fbf8 <_vfiprintf_r+0x18>
 800fbf0:	6983      	ldr	r3, [r0, #24]
 800fbf2:	b90b      	cbnz	r3, 800fbf8 <_vfiprintf_r+0x18>
 800fbf4:	f7fe fd80 	bl	800e6f8 <__sinit>
 800fbf8:	4b7c      	ldr	r3, [pc, #496]	; (800fdec <_vfiprintf_r+0x20c>)
 800fbfa:	429c      	cmp	r4, r3
 800fbfc:	d158      	bne.n	800fcb0 <_vfiprintf_r+0xd0>
 800fbfe:	6874      	ldr	r4, [r6, #4]
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	0718      	lsls	r0, r3, #28
 800fc04:	d55e      	bpl.n	800fcc4 <_vfiprintf_r+0xe4>
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d05b      	beq.n	800fcc4 <_vfiprintf_r+0xe4>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc10:	2320      	movs	r3, #32
 800fc12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc16:	2330      	movs	r3, #48	; 0x30
 800fc18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc1c:	9503      	str	r5, [sp, #12]
 800fc1e:	f04f 0b01 	mov.w	fp, #1
 800fc22:	46b8      	mov	r8, r7
 800fc24:	4645      	mov	r5, r8
 800fc26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc2a:	b10b      	cbz	r3, 800fc30 <_vfiprintf_r+0x50>
 800fc2c:	2b25      	cmp	r3, #37	; 0x25
 800fc2e:	d154      	bne.n	800fcda <_vfiprintf_r+0xfa>
 800fc30:	ebb8 0a07 	subs.w	sl, r8, r7
 800fc34:	d00b      	beq.n	800fc4e <_vfiprintf_r+0x6e>
 800fc36:	4653      	mov	r3, sl
 800fc38:	463a      	mov	r2, r7
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f7ff ffbc 	bl	800fbba <__sfputs_r>
 800fc42:	3001      	adds	r0, #1
 800fc44:	f000 80c2 	beq.w	800fdcc <_vfiprintf_r+0x1ec>
 800fc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc4a:	4453      	add	r3, sl
 800fc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc4e:	f898 3000 	ldrb.w	r3, [r8]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 80ba 	beq.w	800fdcc <_vfiprintf_r+0x1ec>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc62:	9304      	str	r3, [sp, #16]
 800fc64:	9307      	str	r3, [sp, #28]
 800fc66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc6a:	931a      	str	r3, [sp, #104]	; 0x68
 800fc6c:	46a8      	mov	r8, r5
 800fc6e:	2205      	movs	r2, #5
 800fc70:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fc74:	485e      	ldr	r0, [pc, #376]	; (800fdf0 <_vfiprintf_r+0x210>)
 800fc76:	f7f0 fab3 	bl	80001e0 <memchr>
 800fc7a:	9b04      	ldr	r3, [sp, #16]
 800fc7c:	bb78      	cbnz	r0, 800fcde <_vfiprintf_r+0xfe>
 800fc7e:	06d9      	lsls	r1, r3, #27
 800fc80:	bf44      	itt	mi
 800fc82:	2220      	movmi	r2, #32
 800fc84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fc88:	071a      	lsls	r2, r3, #28
 800fc8a:	bf44      	itt	mi
 800fc8c:	222b      	movmi	r2, #43	; 0x2b
 800fc8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fc92:	782a      	ldrb	r2, [r5, #0]
 800fc94:	2a2a      	cmp	r2, #42	; 0x2a
 800fc96:	d02a      	beq.n	800fcee <_vfiprintf_r+0x10e>
 800fc98:	9a07      	ldr	r2, [sp, #28]
 800fc9a:	46a8      	mov	r8, r5
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	250a      	movs	r5, #10
 800fca0:	4641      	mov	r1, r8
 800fca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fca6:	3b30      	subs	r3, #48	; 0x30
 800fca8:	2b09      	cmp	r3, #9
 800fcaa:	d969      	bls.n	800fd80 <_vfiprintf_r+0x1a0>
 800fcac:	b360      	cbz	r0, 800fd08 <_vfiprintf_r+0x128>
 800fcae:	e024      	b.n	800fcfa <_vfiprintf_r+0x11a>
 800fcb0:	4b50      	ldr	r3, [pc, #320]	; (800fdf4 <_vfiprintf_r+0x214>)
 800fcb2:	429c      	cmp	r4, r3
 800fcb4:	d101      	bne.n	800fcba <_vfiprintf_r+0xda>
 800fcb6:	68b4      	ldr	r4, [r6, #8]
 800fcb8:	e7a2      	b.n	800fc00 <_vfiprintf_r+0x20>
 800fcba:	4b4f      	ldr	r3, [pc, #316]	; (800fdf8 <_vfiprintf_r+0x218>)
 800fcbc:	429c      	cmp	r4, r3
 800fcbe:	bf08      	it	eq
 800fcc0:	68f4      	ldreq	r4, [r6, #12]
 800fcc2:	e79d      	b.n	800fc00 <_vfiprintf_r+0x20>
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f7fd fd72 	bl	800d7b0 <__swsetup_r>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	d09d      	beq.n	800fc0c <_vfiprintf_r+0x2c>
 800fcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd4:	b01d      	add	sp, #116	; 0x74
 800fcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcda:	46a8      	mov	r8, r5
 800fcdc:	e7a2      	b.n	800fc24 <_vfiprintf_r+0x44>
 800fcde:	4a44      	ldr	r2, [pc, #272]	; (800fdf0 <_vfiprintf_r+0x210>)
 800fce0:	1a80      	subs	r0, r0, r2
 800fce2:	fa0b f000 	lsl.w	r0, fp, r0
 800fce6:	4318      	orrs	r0, r3
 800fce8:	9004      	str	r0, [sp, #16]
 800fcea:	4645      	mov	r5, r8
 800fcec:	e7be      	b.n	800fc6c <_vfiprintf_r+0x8c>
 800fcee:	9a03      	ldr	r2, [sp, #12]
 800fcf0:	1d11      	adds	r1, r2, #4
 800fcf2:	6812      	ldr	r2, [r2, #0]
 800fcf4:	9103      	str	r1, [sp, #12]
 800fcf6:	2a00      	cmp	r2, #0
 800fcf8:	db01      	blt.n	800fcfe <_vfiprintf_r+0x11e>
 800fcfa:	9207      	str	r2, [sp, #28]
 800fcfc:	e004      	b.n	800fd08 <_vfiprintf_r+0x128>
 800fcfe:	4252      	negs	r2, r2
 800fd00:	f043 0302 	orr.w	r3, r3, #2
 800fd04:	9207      	str	r2, [sp, #28]
 800fd06:	9304      	str	r3, [sp, #16]
 800fd08:	f898 3000 	ldrb.w	r3, [r8]
 800fd0c:	2b2e      	cmp	r3, #46	; 0x2e
 800fd0e:	d10e      	bne.n	800fd2e <_vfiprintf_r+0x14e>
 800fd10:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fd14:	2b2a      	cmp	r3, #42	; 0x2a
 800fd16:	d138      	bne.n	800fd8a <_vfiprintf_r+0x1aa>
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	1d1a      	adds	r2, r3, #4
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	9203      	str	r2, [sp, #12]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	bfb8      	it	lt
 800fd24:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd28:	f108 0802 	add.w	r8, r8, #2
 800fd2c:	9305      	str	r3, [sp, #20]
 800fd2e:	4d33      	ldr	r5, [pc, #204]	; (800fdfc <_vfiprintf_r+0x21c>)
 800fd30:	f898 1000 	ldrb.w	r1, [r8]
 800fd34:	2203      	movs	r2, #3
 800fd36:	4628      	mov	r0, r5
 800fd38:	f7f0 fa52 	bl	80001e0 <memchr>
 800fd3c:	b140      	cbz	r0, 800fd50 <_vfiprintf_r+0x170>
 800fd3e:	2340      	movs	r3, #64	; 0x40
 800fd40:	1b40      	subs	r0, r0, r5
 800fd42:	fa03 f000 	lsl.w	r0, r3, r0
 800fd46:	9b04      	ldr	r3, [sp, #16]
 800fd48:	4303      	orrs	r3, r0
 800fd4a:	f108 0801 	add.w	r8, r8, #1
 800fd4e:	9304      	str	r3, [sp, #16]
 800fd50:	f898 1000 	ldrb.w	r1, [r8]
 800fd54:	482a      	ldr	r0, [pc, #168]	; (800fe00 <_vfiprintf_r+0x220>)
 800fd56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd5a:	2206      	movs	r2, #6
 800fd5c:	f108 0701 	add.w	r7, r8, #1
 800fd60:	f7f0 fa3e 	bl	80001e0 <memchr>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d037      	beq.n	800fdd8 <_vfiprintf_r+0x1f8>
 800fd68:	4b26      	ldr	r3, [pc, #152]	; (800fe04 <_vfiprintf_r+0x224>)
 800fd6a:	bb1b      	cbnz	r3, 800fdb4 <_vfiprintf_r+0x1d4>
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	3307      	adds	r3, #7
 800fd70:	f023 0307 	bic.w	r3, r3, #7
 800fd74:	3308      	adds	r3, #8
 800fd76:	9303      	str	r3, [sp, #12]
 800fd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd7a:	444b      	add	r3, r9
 800fd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd7e:	e750      	b.n	800fc22 <_vfiprintf_r+0x42>
 800fd80:	fb05 3202 	mla	r2, r5, r2, r3
 800fd84:	2001      	movs	r0, #1
 800fd86:	4688      	mov	r8, r1
 800fd88:	e78a      	b.n	800fca0 <_vfiprintf_r+0xc0>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	f108 0801 	add.w	r8, r8, #1
 800fd90:	9305      	str	r3, [sp, #20]
 800fd92:	4619      	mov	r1, r3
 800fd94:	250a      	movs	r5, #10
 800fd96:	4640      	mov	r0, r8
 800fd98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd9c:	3a30      	subs	r2, #48	; 0x30
 800fd9e:	2a09      	cmp	r2, #9
 800fda0:	d903      	bls.n	800fdaa <_vfiprintf_r+0x1ca>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d0c3      	beq.n	800fd2e <_vfiprintf_r+0x14e>
 800fda6:	9105      	str	r1, [sp, #20]
 800fda8:	e7c1      	b.n	800fd2e <_vfiprintf_r+0x14e>
 800fdaa:	fb05 2101 	mla	r1, r5, r1, r2
 800fdae:	2301      	movs	r3, #1
 800fdb0:	4680      	mov	r8, r0
 800fdb2:	e7f0      	b.n	800fd96 <_vfiprintf_r+0x1b6>
 800fdb4:	ab03      	add	r3, sp, #12
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	4622      	mov	r2, r4
 800fdba:	4b13      	ldr	r3, [pc, #76]	; (800fe08 <_vfiprintf_r+0x228>)
 800fdbc:	a904      	add	r1, sp, #16
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f7fb ffaa 	bl	800bd18 <_printf_float>
 800fdc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fdc8:	4681      	mov	r9, r0
 800fdca:	d1d5      	bne.n	800fd78 <_vfiprintf_r+0x198>
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	065b      	lsls	r3, r3, #25
 800fdd0:	f53f af7e 	bmi.w	800fcd0 <_vfiprintf_r+0xf0>
 800fdd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdd6:	e77d      	b.n	800fcd4 <_vfiprintf_r+0xf4>
 800fdd8:	ab03      	add	r3, sp, #12
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	4622      	mov	r2, r4
 800fdde:	4b0a      	ldr	r3, [pc, #40]	; (800fe08 <_vfiprintf_r+0x228>)
 800fde0:	a904      	add	r1, sp, #16
 800fde2:	4630      	mov	r0, r6
 800fde4:	f7fc fa4e 	bl	800c284 <_printf_i>
 800fde8:	e7ec      	b.n	800fdc4 <_vfiprintf_r+0x1e4>
 800fdea:	bf00      	nop
 800fdec:	08010398 	.word	0x08010398
 800fdf0:	080104e4 	.word	0x080104e4
 800fdf4:	080103b8 	.word	0x080103b8
 800fdf8:	08010378 	.word	0x08010378
 800fdfc:	080104ea 	.word	0x080104ea
 800fe00:	080104ee 	.word	0x080104ee
 800fe04:	0800bd19 	.word	0x0800bd19
 800fe08:	0800fbbb 	.word	0x0800fbbb

0800fe0c <_sbrk_r>:
 800fe0c:	b538      	push	{r3, r4, r5, lr}
 800fe0e:	4c06      	ldr	r4, [pc, #24]	; (800fe28 <_sbrk_r+0x1c>)
 800fe10:	2300      	movs	r3, #0
 800fe12:	4605      	mov	r5, r0
 800fe14:	4608      	mov	r0, r1
 800fe16:	6023      	str	r3, [r4, #0]
 800fe18:	f7f6 fadc 	bl	80063d4 <_sbrk>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_sbrk_r+0x1a>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_sbrk_r+0x1a>
 800fe24:	602b      	str	r3, [r5, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	2001d1c0 	.word	0x2001d1c0

0800fe2c <__sread>:
 800fe2c:	b510      	push	{r4, lr}
 800fe2e:	460c      	mov	r4, r1
 800fe30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe34:	f000 f8f4 	bl	8010020 <_read_r>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	bfab      	itete	ge
 800fe3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe3e:	89a3      	ldrhlt	r3, [r4, #12]
 800fe40:	181b      	addge	r3, r3, r0
 800fe42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe46:	bfac      	ite	ge
 800fe48:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe4a:	81a3      	strhlt	r3, [r4, #12]
 800fe4c:	bd10      	pop	{r4, pc}

0800fe4e <__swrite>:
 800fe4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe52:	461f      	mov	r7, r3
 800fe54:	898b      	ldrh	r3, [r1, #12]
 800fe56:	05db      	lsls	r3, r3, #23
 800fe58:	4605      	mov	r5, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	4616      	mov	r6, r2
 800fe5e:	d505      	bpl.n	800fe6c <__swrite+0x1e>
 800fe60:	2302      	movs	r3, #2
 800fe62:	2200      	movs	r2, #0
 800fe64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe68:	f000 f886 	bl	800ff78 <_lseek_r>
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe76:	81a3      	strh	r3, [r4, #12]
 800fe78:	4632      	mov	r2, r6
 800fe7a:	463b      	mov	r3, r7
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe82:	f000 b835 	b.w	800fef0 <_write_r>

0800fe86 <__sseek>:
 800fe86:	b510      	push	{r4, lr}
 800fe88:	460c      	mov	r4, r1
 800fe8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8e:	f000 f873 	bl	800ff78 <_lseek_r>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	bf15      	itete	ne
 800fe98:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fea2:	81a3      	strheq	r3, [r4, #12]
 800fea4:	bf18      	it	ne
 800fea6:	81a3      	strhne	r3, [r4, #12]
 800fea8:	bd10      	pop	{r4, pc}

0800feaa <__sclose>:
 800feaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feae:	f000 b831 	b.w	800ff14 <_close_r>

0800feb2 <strncmp>:
 800feb2:	b510      	push	{r4, lr}
 800feb4:	b16a      	cbz	r2, 800fed2 <strncmp+0x20>
 800feb6:	3901      	subs	r1, #1
 800feb8:	1884      	adds	r4, r0, r2
 800feba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800febe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d103      	bne.n	800fece <strncmp+0x1c>
 800fec6:	42a0      	cmp	r0, r4
 800fec8:	d001      	beq.n	800fece <strncmp+0x1c>
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1f5      	bne.n	800feba <strncmp+0x8>
 800fece:	1a98      	subs	r0, r3, r2
 800fed0:	bd10      	pop	{r4, pc}
 800fed2:	4610      	mov	r0, r2
 800fed4:	e7fc      	b.n	800fed0 <strncmp+0x1e>

0800fed6 <__ascii_wctomb>:
 800fed6:	b149      	cbz	r1, 800feec <__ascii_wctomb+0x16>
 800fed8:	2aff      	cmp	r2, #255	; 0xff
 800feda:	bf85      	ittet	hi
 800fedc:	238a      	movhi	r3, #138	; 0x8a
 800fede:	6003      	strhi	r3, [r0, #0]
 800fee0:	700a      	strbls	r2, [r1, #0]
 800fee2:	f04f 30ff 	movhi.w	r0, #4294967295
 800fee6:	bf98      	it	ls
 800fee8:	2001      	movls	r0, #1
 800feea:	4770      	bx	lr
 800feec:	4608      	mov	r0, r1
 800feee:	4770      	bx	lr

0800fef0 <_write_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4c07      	ldr	r4, [pc, #28]	; (800ff10 <_write_r+0x20>)
 800fef4:	4605      	mov	r5, r0
 800fef6:	4608      	mov	r0, r1
 800fef8:	4611      	mov	r1, r2
 800fefa:	2200      	movs	r2, #0
 800fefc:	6022      	str	r2, [r4, #0]
 800fefe:	461a      	mov	r2, r3
 800ff00:	f7f6 fa17 	bl	8006332 <_write>
 800ff04:	1c43      	adds	r3, r0, #1
 800ff06:	d102      	bne.n	800ff0e <_write_r+0x1e>
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	b103      	cbz	r3, 800ff0e <_write_r+0x1e>
 800ff0c:	602b      	str	r3, [r5, #0]
 800ff0e:	bd38      	pop	{r3, r4, r5, pc}
 800ff10:	2001d1c0 	.word	0x2001d1c0

0800ff14 <_close_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4c06      	ldr	r4, [pc, #24]	; (800ff30 <_close_r+0x1c>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	6023      	str	r3, [r4, #0]
 800ff20:	f7f6 fa23 	bl	800636a <_close>
 800ff24:	1c43      	adds	r3, r0, #1
 800ff26:	d102      	bne.n	800ff2e <_close_r+0x1a>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	b103      	cbz	r3, 800ff2e <_close_r+0x1a>
 800ff2c:	602b      	str	r3, [r5, #0]
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	2001d1c0 	.word	0x2001d1c0

0800ff34 <_fstat_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4c07      	ldr	r4, [pc, #28]	; (800ff54 <_fstat_r+0x20>)
 800ff38:	2300      	movs	r3, #0
 800ff3a:	4605      	mov	r5, r0
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	4611      	mov	r1, r2
 800ff40:	6023      	str	r3, [r4, #0]
 800ff42:	f7f6 fa1e 	bl	8006382 <_fstat>
 800ff46:	1c43      	adds	r3, r0, #1
 800ff48:	d102      	bne.n	800ff50 <_fstat_r+0x1c>
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	b103      	cbz	r3, 800ff50 <_fstat_r+0x1c>
 800ff4e:	602b      	str	r3, [r5, #0]
 800ff50:	bd38      	pop	{r3, r4, r5, pc}
 800ff52:	bf00      	nop
 800ff54:	2001d1c0 	.word	0x2001d1c0

0800ff58 <_isatty_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4c06      	ldr	r4, [pc, #24]	; (800ff74 <_isatty_r+0x1c>)
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4605      	mov	r5, r0
 800ff60:	4608      	mov	r0, r1
 800ff62:	6023      	str	r3, [r4, #0]
 800ff64:	f7f6 fa1d 	bl	80063a2 <_isatty>
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	d102      	bne.n	800ff72 <_isatty_r+0x1a>
 800ff6c:	6823      	ldr	r3, [r4, #0]
 800ff6e:	b103      	cbz	r3, 800ff72 <_isatty_r+0x1a>
 800ff70:	602b      	str	r3, [r5, #0]
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	2001d1c0 	.word	0x2001d1c0

0800ff78 <_lseek_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4c07      	ldr	r4, [pc, #28]	; (800ff98 <_lseek_r+0x20>)
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	4608      	mov	r0, r1
 800ff80:	4611      	mov	r1, r2
 800ff82:	2200      	movs	r2, #0
 800ff84:	6022      	str	r2, [r4, #0]
 800ff86:	461a      	mov	r2, r3
 800ff88:	f7f6 fa16 	bl	80063b8 <_lseek>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_lseek_r+0x1e>
 800ff90:	6823      	ldr	r3, [r4, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_lseek_r+0x1e>
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	2001d1c0 	.word	0x2001d1c0

0800ff9c <memmove>:
 800ff9c:	4288      	cmp	r0, r1
 800ff9e:	b510      	push	{r4, lr}
 800ffa0:	eb01 0302 	add.w	r3, r1, r2
 800ffa4:	d807      	bhi.n	800ffb6 <memmove+0x1a>
 800ffa6:	1e42      	subs	r2, r0, #1
 800ffa8:	4299      	cmp	r1, r3
 800ffaa:	d00a      	beq.n	800ffc2 <memmove+0x26>
 800ffac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ffb4:	e7f8      	b.n	800ffa8 <memmove+0xc>
 800ffb6:	4283      	cmp	r3, r0
 800ffb8:	d9f5      	bls.n	800ffa6 <memmove+0xa>
 800ffba:	1881      	adds	r1, r0, r2
 800ffbc:	1ad2      	subs	r2, r2, r3
 800ffbe:	42d3      	cmn	r3, r2
 800ffc0:	d100      	bne.n	800ffc4 <memmove+0x28>
 800ffc2:	bd10      	pop	{r4, pc}
 800ffc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ffcc:	e7f7      	b.n	800ffbe <memmove+0x22>

0800ffce <__malloc_lock>:
 800ffce:	4770      	bx	lr

0800ffd0 <__malloc_unlock>:
 800ffd0:	4770      	bx	lr

0800ffd2 <_realloc_r>:
 800ffd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	4614      	mov	r4, r2
 800ffd8:	460e      	mov	r6, r1
 800ffda:	b921      	cbnz	r1, 800ffe6 <_realloc_r+0x14>
 800ffdc:	4611      	mov	r1, r2
 800ffde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ffe2:	f7ff bc27 	b.w	800f834 <_malloc_r>
 800ffe6:	b922      	cbnz	r2, 800fff2 <_realloc_r+0x20>
 800ffe8:	f7ff fbd6 	bl	800f798 <_free_r>
 800ffec:	4625      	mov	r5, r4
 800ffee:	4628      	mov	r0, r5
 800fff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff2:	f000 f827 	bl	8010044 <_malloc_usable_size_r>
 800fff6:	42a0      	cmp	r0, r4
 800fff8:	d20f      	bcs.n	801001a <_realloc_r+0x48>
 800fffa:	4621      	mov	r1, r4
 800fffc:	4638      	mov	r0, r7
 800fffe:	f7ff fc19 	bl	800f834 <_malloc_r>
 8010002:	4605      	mov	r5, r0
 8010004:	2800      	cmp	r0, #0
 8010006:	d0f2      	beq.n	800ffee <_realloc_r+0x1c>
 8010008:	4631      	mov	r1, r6
 801000a:	4622      	mov	r2, r4
 801000c:	f7fb fddc 	bl	800bbc8 <memcpy>
 8010010:	4631      	mov	r1, r6
 8010012:	4638      	mov	r0, r7
 8010014:	f7ff fbc0 	bl	800f798 <_free_r>
 8010018:	e7e9      	b.n	800ffee <_realloc_r+0x1c>
 801001a:	4635      	mov	r5, r6
 801001c:	e7e7      	b.n	800ffee <_realloc_r+0x1c>
	...

08010020 <_read_r>:
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	4c07      	ldr	r4, [pc, #28]	; (8010040 <_read_r+0x20>)
 8010024:	4605      	mov	r5, r0
 8010026:	4608      	mov	r0, r1
 8010028:	4611      	mov	r1, r2
 801002a:	2200      	movs	r2, #0
 801002c:	6022      	str	r2, [r4, #0]
 801002e:	461a      	mov	r2, r3
 8010030:	f7f6 f962 	bl	80062f8 <_read>
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	d102      	bne.n	801003e <_read_r+0x1e>
 8010038:	6823      	ldr	r3, [r4, #0]
 801003a:	b103      	cbz	r3, 801003e <_read_r+0x1e>
 801003c:	602b      	str	r3, [r5, #0]
 801003e:	bd38      	pop	{r3, r4, r5, pc}
 8010040:	2001d1c0 	.word	0x2001d1c0

08010044 <_malloc_usable_size_r>:
 8010044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010048:	1f18      	subs	r0, r3, #4
 801004a:	2b00      	cmp	r3, #0
 801004c:	bfbc      	itt	lt
 801004e:	580b      	ldrlt	r3, [r1, r0]
 8010050:	18c0      	addlt	r0, r0, r3
 8010052:	4770      	bx	lr

08010054 <_init>:
 8010054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010056:	bf00      	nop
 8010058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801005a:	bc08      	pop	{r3}
 801005c:	469e      	mov	lr, r3
 801005e:	4770      	bx	lr

08010060 <_fini>:
 8010060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010062:	bf00      	nop
 8010064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010066:	bc08      	pop	{r3}
 8010068:	469e      	mov	lr, r3
 801006a:	4770      	bx	lr

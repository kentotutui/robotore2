
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08010db0  08010db0  00020db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011700  08011700  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08011700  08011700  00021700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011708  08011708  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011708  08011708  00021708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801170c  0801170c  0002170c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08011710  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a8d0  20000210  08011920  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001aae0  08011920  0003aae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022cb5  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004944  00000000  00000000  00052ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b0  00000000  00000000  00057840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c0  00000000  00000000  000591f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001734e  00000000  00000000  0007f43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb56f  00000000  00000000  00096788  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161cf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008014  00000000  00000000  00161d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010d94 	.word	0x08010d94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010d94 	.word	0x08010d94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc53 	bl	800184c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fbc8 	bl	8009880 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fbc4 	bl	8009880 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001a694 	.word	0x2001a694
 8001110:	2001a654 	.word	0x2001a654
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <updateEncoderCnt+0x178>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <updateEncoderCnt+0x17c>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <updateEncoderCnt+0x180>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <updateEncoderCnt+0x184>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <updateEncoderCnt+0x188>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <updateEncoderCnt+0x17c>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <updateEncoderCnt+0x188>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <updateEncoderCnt+0x18c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <updateEncoderCnt+0x184>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <updateEncoderCnt+0x18c>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <updateEncoderCnt+0x17c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <updateEncoderCnt+0x184>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <updateEncoderCnt+0x170>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <updateEncoderCnt+0x190>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <updateEncoderCnt+0x194>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <updateEncoderCnt+0x190>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <updateEncoderCnt+0x194>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	distance_30mm += distance_1ms;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <updateEncoderCnt+0x198>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <updateEncoderCnt+0x190>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <updateEncoderCnt+0x198>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <updateEncoderCnt+0x19c>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <updateEncoderCnt+0x190>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <updateEncoderCnt+0x19c>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <updateEncoderCnt+0x190>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <updateEncoderCnt+0x190>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <updateEncoderCnt+0x190>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <updateEncoderCnt+0x1ac>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <updateEncoderCnt+0x190>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <updateEncoderCnt+0x1ac>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001262:	ed93 7a00 	vldr	s14, [r3]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <updateEncoderCnt+0x190>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001272:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateEncoderCnt+0x178>)
 8001278:	f242 7210 	movw	r2, #10000	; 0x2710
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <updateEncoderCnt+0x180>)
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001286:	bf00      	nop
 8001288:	bd98      	pop	{r3, r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	bec93a2d 	.word	0xbec93a2d
 8001294:	3f8c463a 	.word	0x3f8c463a
 8001298:	40000400 	.word	0x40000400
 800129c:	20000244 	.word	0x20000244
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000246 	.word	0x20000246
 80012a8:	20000248 	.word	0x20000248
 80012ac:	2000024a 	.word	0x2000024a
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	20000250 	.word	0x20000250
 80012b8:	20000254 	.word	0x20000254
 80012bc:	20000258 	.word	0x20000258
 80012c0:	2000025c 	.word	0x2000025c
 80012c4:	20000260 	.word	0x20000260
 80012c8:	20000264 	.word	0x20000264
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <getEncoderCnt+0x2c>)
 80012e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <getEncoderCnt+0x30>)
 80012ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	801a      	strh	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000244 	.word	0x20000244
 8001304:	20000246 	.word	0x20000246

08001308 <getTotalDistance>:

float getTotalDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return total_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getTotalDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getGoalJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <getSideLineJudgeDistance+0x18>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
}
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000264 	.word	0x20000264

0800135c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <setTotalDistance+0x1c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	2000025c 	.word	0x2000025c

0800137c <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <getCrossLineIgnoreDistance+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000268 	.word	0x20000268

08001398 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	total_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearTotalDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearGoalJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearSideLineJudgeDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearCrossLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <clearSideLineIgnoreDistance+0x18>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000026c 	.word	0x2000026c

08001424 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <getDistance10mm+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000250 	.word	0x20000250

08001440 <clearDistance10mm>:

void clearDistance10mm(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <clearDistance10mm+0x18>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000250 	.word	0x20000250

0800145c <getDistance30mm>:

float getDistance30mm(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return distance_30mm;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <getDistance30mm+0x18>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000254 	.word	0x20000254

08001478 <clearDistance30mm>:

void clearDistance30mm(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	distance_30mm = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <clearDistance30mm+0x18>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000254 	.word	0x20000254
 8001494:	00000000 	.word	0x00000000

08001498 <getspeedcount>:

float getspeedcount(void){
 8001498:	b598      	push	{r3, r4, r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <getspeedcount+0x60>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	db16      	blt.n	80014de <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <getspeedcount+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	a30d      	add	r3, pc, #52	; (adr r3, 80014f0 <getspeedcount+0x58>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe fee4 	bl	800028c <__adddf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fb8c 	bl	8000be8 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <getspeedcount+0x64>)
 80014d4:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <getspeedcount+0x60>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <getspeedcount+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	bd98      	pop	{r3, r4, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fb99999 	.word	0x3fb99999
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000270 	.word	0x20000270

08001500 <clearspeedcount>:

void clearspeedcount(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <clearspeedcount+0x14>)
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <clearspeedcount+0x18>)
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000270 	.word	0x20000270
 8001518:	3dcccccd 	.word	0x3dcccccd

0800151c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FLASH_Unlock+0x1c>)
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Unlock+0x20>)
 8001524:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <FLASH_Unlock+0x1c>)
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <FLASH_Unlock+0x24>)
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	45670123 	.word	0x45670123
 8001540:	cdef89ab 	.word	0xcdef89ab

08001544 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <FLASH_Lock+0x1c>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <FLASH_Lock+0x1c>)
 800154e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001552:	6113      	str	r3, [r2, #16]

}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001568:	bf00      	nop
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <FLASH_WaitBusy+0x1c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <FLASH_WaitBusy+0x6>
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800158e:	f006 f9af 	bl	80078f0 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 fa65 	bl	8007a80 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015b6:	f006 f9bd 	bl	8007934 <HAL_FLASH_Lock>
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80015d0:	f7ff ffa4 	bl	800151c <FLASH_Unlock>

	FLASH_WaitBusy();
 80015d4:	f7ff ffc6 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80015f6:	f7ff ffb5 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <FLASH_Write_Word_F+0x50>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001606:	f7ff ff9d 	bl	8001544 <FLASH_Lock>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800161e:	f001 ffad 	bl	800357c <IMU_init>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f005 f8cb 	bl	80067c4 <HAL_Delay>

	return who_i_am;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <updateIMUValue>:

void updateIMUValue(){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800163e:	f001 ffc1 	bl	80035c4 <read_gyro_data>
	zg_ = zg;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <updateIMUValue+0x188>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <updateIMUValue+0x18c>)
 800164a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <updateIMUValue+0x188>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <updateIMUValue+0x190>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <updateIMUValue+0x18c>)
 8001692:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <updateIMUValue+0x18c>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <updateIMUValue+0x194>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <updateIMUValue+0x18c>)
 80016b8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <updateIMUValue+0x18c>)
 80016bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <updateIMUValue+0x190>)
 80016c2:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <updateIMUValue+0x18c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a332      	add	r3, pc, #200	; (adr r3, 80017a8 <updateIMUValue+0x170>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	a330      	add	r3, pc, #192	; (adr r3, 80017b0 <updateIMUValue+0x178>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <updateIMUValue+0x198>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4602      	mov	r2, r0
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <updateIMUValue+0x19c>)
 800171a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <updateIMUValue+0x1a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <updateIMUValue+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	a320      	add	r3, pc, #128	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <updateIMUValue+0x1a0>)
 800175a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <updateIMUValue+0x1a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a310      	add	r3, pc, #64	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <updateIMUValue+0x1a4>)
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	66666666 	.word	0x66666666
 80017ac:	40306666 	.word	0x40306666
 80017b0:	54411744 	.word	0x54411744
 80017b4:	400921fb 	.word	0x400921fb
 80017b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017bc:	3f50624d 	.word	0x3f50624d
 80017c0:	2001a7bc 	.word	0x2001a7bc
 80017c4:	2001a6d4 	.word	0x2001a6d4
 80017c8:	20000278 	.word	0x20000278
 80017cc:	20000274 	.word	0x20000274
 80017d0:	40668000 	.word	0x40668000
 80017d4:	2001a6e4 	.word	0x2001a6e4
 80017d8:	2001a6dc 	.word	0x2001a6dc
 80017dc:	2001a6e0 	.word	0x2001a6e0

080017e0 <IMU_average>:

void IMU_average(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	float average = 0;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= 1000; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	e015      	b.n	800181e <IMU_average+0x3e>
		average = average+zg;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <IMU_average+0x60>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ed97 7a01 	vldr	s14, [r7, #4]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f004 ffd9 	bl	80067c4 <HAL_Delay>
		setLED2('A');
 8001812:	2041      	movs	r0, #65	; 0x41
 8001814:	f000 f920 	bl	8001a58 <setLED2>
	for(int i = 0; i <= 1000; i++){
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	dde5      	ble.n	80017f2 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001844 <IMU_average+0x64>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <IMU_average+0x68>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2001a7bc 	.word	0x2001a7bc
 8001844:	447a0000 	.word	0x447a0000
 8001848:	20000274 	.word	0x20000274

0800184c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <getTheta10mm+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2001a6dc 	.word	0x2001a6dc

08001868 <clearTheta10mm>:

void clearTheta10mm()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <clearTheta10mm+0x18>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2001a6dc 	.word	0x2001a6dc

08001884 <getaddTheta>:

float getaddTheta()
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return add_theta;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <getaddTheta+0x18>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
}
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	2001a6e0 	.word	0x2001a6e0

080018a0 <clearaddTheta>:

void clearaddTheta()
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	add_theta = 0;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <clearaddTheta+0x18>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2001a6e0 	.word	0x2001a6e0

080018bc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b52      	cmp	r3, #82	; 0x52
 80018ca:	d112      	bne.n	80018f2 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4860      	ldr	r0, [pc, #384]	; (8001a54 <setLED+0x198>)
 80018d4:	f006 fba8 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	485d      	ldr	r0, [pc, #372]	; (8001a54 <setLED+0x198>)
 80018e0:	f006 fba2 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	485a      	ldr	r0, [pc, #360]	; (8001a54 <setLED+0x198>)
 80018ec:	f006 fb9c 	bl	8008028 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80018f0:	e0ab      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'G'){
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b47      	cmp	r3, #71	; 0x47
 80018f6:	d112      	bne.n	800191e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4855      	ldr	r0, [pc, #340]	; (8001a54 <setLED+0x198>)
 8001900:	f006 fb92 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	4852      	ldr	r0, [pc, #328]	; (8001a54 <setLED+0x198>)
 800190c:	f006 fb8c 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	484f      	ldr	r0, [pc, #316]	; (8001a54 <setLED+0x198>)
 8001918:	f006 fb86 	bl	8008028 <HAL_GPIO_WritePin>
}
 800191c:	e095      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'B'){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b42      	cmp	r3, #66	; 0x42
 8001922:	d112      	bne.n	800194a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <setLED+0x198>)
 800192c:	f006 fb7c 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4847      	ldr	r0, [pc, #284]	; (8001a54 <setLED+0x198>)
 8001938:	f006 fb76 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	4844      	ldr	r0, [pc, #272]	; (8001a54 <setLED+0x198>)
 8001944:	f006 fb70 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001948:	e07f      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'M'){
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b4d      	cmp	r3, #77	; 0x4d
 800194e:	d112      	bne.n	8001976 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	483f      	ldr	r0, [pc, #252]	; (8001a54 <setLED+0x198>)
 8001958:	f006 fb66 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	483c      	ldr	r0, [pc, #240]	; (8001a54 <setLED+0x198>)
 8001964:	f006 fb60 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	4839      	ldr	r0, [pc, #228]	; (8001a54 <setLED+0x198>)
 8001970:	f006 fb5a 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001974:	e069      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'Y'){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b59      	cmp	r3, #89	; 0x59
 800197a:	d112      	bne.n	80019a2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001982:	4834      	ldr	r0, [pc, #208]	; (8001a54 <setLED+0x198>)
 8001984:	f006 fb50 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198e:	4831      	ldr	r0, [pc, #196]	; (8001a54 <setLED+0x198>)
 8001990:	f006 fb4a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <setLED+0x198>)
 800199c:	f006 fb44 	bl	8008028 <HAL_GPIO_WritePin>
}
 80019a0:	e053      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'C'){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b43      	cmp	r3, #67	; 0x43
 80019a6:	d112      	bne.n	80019ce <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4829      	ldr	r0, [pc, #164]	; (8001a54 <setLED+0x198>)
 80019b0:	f006 fb3a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ba:	4826      	ldr	r0, [pc, #152]	; (8001a54 <setLED+0x198>)
 80019bc:	f006 fb34 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	4823      	ldr	r0, [pc, #140]	; (8001a54 <setLED+0x198>)
 80019c8:	f006 fb2e 	bl	8008028 <HAL_GPIO_WritePin>
}
 80019cc:	e03d      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'W'){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b57      	cmp	r3, #87	; 0x57
 80019d2:	d112      	bne.n	80019fa <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <setLED+0x198>)
 80019dc:	f006 fb24 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <setLED+0x198>)
 80019e8:	f006 fb1e 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <setLED+0x198>)
 80019f4:	f006 fb18 	bl	8008028 <HAL_GPIO_WritePin>
}
 80019f8:	e027      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'N'){
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b4e      	cmp	r3, #78	; 0x4e
 80019fe:	d112      	bne.n	8001a26 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <setLED+0x198>)
 8001a08:	f006 fb0e 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <setLED+0x198>)
 8001a14:	f006 fb08 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <setLED+0x198>)
 8001a20:	f006 fb02 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001a24:	e011      	b.n	8001a4a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <setLED+0x198>)
 8001a2e:	f006 fafb 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <setLED+0x198>)
 8001a3a:	f006 faf5 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <setLED+0x198>)
 8001a46:	f006 faef 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020800 	.word	0x40020800

08001a58 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b52      	cmp	r3, #82	; 0x52
 8001a66:	d124      	bne.n	8001ab2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6e:	48c5      	ldr	r0, [pc, #788]	; (8001d84 <setLED2+0x32c>)
 8001a70:	f006 fada 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	48c3      	ldr	r0, [pc, #780]	; (8001d88 <setLED2+0x330>)
 8001a7c:	f006 fad4 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	48c0      	ldr	r0, [pc, #768]	; (8001d88 <setLED2+0x330>)
 8001a88:	f006 face 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	48bd      	ldr	r0, [pc, #756]	; (8001d88 <setLED2+0x330>)
 8001a94:	f006 fac8 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9e:	48ba      	ldr	r0, [pc, #744]	; (8001d88 <setLED2+0x330>)
 8001aa0:	f006 fac2 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aaa:	48b7      	ldr	r0, [pc, #732]	; (8001d88 <setLED2+0x330>)
 8001aac:	f006 fabc 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001ab0:	e163      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'G'){
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b47      	cmp	r3, #71	; 0x47
 8001ab6:	d124      	bne.n	8001b02 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abe:	48b1      	ldr	r0, [pc, #708]	; (8001d84 <setLED2+0x32c>)
 8001ac0:	f006 fab2 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	48af      	ldr	r0, [pc, #700]	; (8001d88 <setLED2+0x330>)
 8001acc:	f006 faac 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	48ac      	ldr	r0, [pc, #688]	; (8001d88 <setLED2+0x330>)
 8001ad8:	f006 faa6 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae2:	48a9      	ldr	r0, [pc, #676]	; (8001d88 <setLED2+0x330>)
 8001ae4:	f006 faa0 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aee:	48a6      	ldr	r0, [pc, #664]	; (8001d88 <setLED2+0x330>)
 8001af0:	f006 fa9a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	48a3      	ldr	r0, [pc, #652]	; (8001d88 <setLED2+0x330>)
 8001afc:	f006 fa94 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001b00:	e13b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'B'){
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b42      	cmp	r3, #66	; 0x42
 8001b06:	d124      	bne.n	8001b52 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0e:	489d      	ldr	r0, [pc, #628]	; (8001d84 <setLED2+0x32c>)
 8001b10:	f006 fa8a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	489b      	ldr	r0, [pc, #620]	; (8001d88 <setLED2+0x330>)
 8001b1c:	f006 fa84 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	4898      	ldr	r0, [pc, #608]	; (8001d88 <setLED2+0x330>)
 8001b28:	f006 fa7e 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b32:	4895      	ldr	r0, [pc, #596]	; (8001d88 <setLED2+0x330>)
 8001b34:	f006 fa78 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	4892      	ldr	r0, [pc, #584]	; (8001d88 <setLED2+0x330>)
 8001b40:	f006 fa72 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4a:	488f      	ldr	r0, [pc, #572]	; (8001d88 <setLED2+0x330>)
 8001b4c:	f006 fa6c 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001b50:	e113      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'W'){
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b57      	cmp	r3, #87	; 0x57
 8001b56:	d124      	bne.n	8001ba2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5e:	4889      	ldr	r0, [pc, #548]	; (8001d84 <setLED2+0x32c>)
 8001b60:	f006 fa62 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6a:	4887      	ldr	r0, [pc, #540]	; (8001d88 <setLED2+0x330>)
 8001b6c:	f006 fa5c 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4884      	ldr	r0, [pc, #528]	; (8001d88 <setLED2+0x330>)
 8001b78:	f006 fa56 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b82:	4881      	ldr	r0, [pc, #516]	; (8001d88 <setLED2+0x330>)
 8001b84:	f006 fa50 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8e:	487e      	ldr	r0, [pc, #504]	; (8001d88 <setLED2+0x330>)
 8001b90:	f006 fa4a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9a:	487b      	ldr	r0, [pc, #492]	; (8001d88 <setLED2+0x330>)
 8001b9c:	f006 fa44 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001ba0:	e0eb      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'Y'){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b59      	cmp	r3, #89	; 0x59
 8001ba6:	d124      	bne.n	8001bf2 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4875      	ldr	r0, [pc, #468]	; (8001d84 <setLED2+0x32c>)
 8001bb0:	f006 fa3a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4873      	ldr	r0, [pc, #460]	; (8001d88 <setLED2+0x330>)
 8001bbc:	f006 fa34 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc6:	4870      	ldr	r0, [pc, #448]	; (8001d88 <setLED2+0x330>)
 8001bc8:	f006 fa2e 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	486d      	ldr	r0, [pc, #436]	; (8001d88 <setLED2+0x330>)
 8001bd4:	f006 fa28 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bde:	486a      	ldr	r0, [pc, #424]	; (8001d88 <setLED2+0x330>)
 8001be0:	f006 fa22 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bea:	4867      	ldr	r0, [pc, #412]	; (8001d88 <setLED2+0x330>)
 8001bec:	f006 fa1c 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001bf0:	e0c3      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'X'){
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b58      	cmp	r3, #88	; 0x58
 8001bf6:	d124      	bne.n	8001c42 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfe:	4861      	ldr	r0, [pc, #388]	; (8001d84 <setLED2+0x32c>)
 8001c00:	f006 fa12 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0a:	485f      	ldr	r0, [pc, #380]	; (8001d88 <setLED2+0x330>)
 8001c0c:	f006 fa0c 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <setLED2+0x330>)
 8001c18:	f006 fa06 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4859      	ldr	r0, [pc, #356]	; (8001d88 <setLED2+0x330>)
 8001c24:	f006 fa00 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2e:	4856      	ldr	r0, [pc, #344]	; (8001d88 <setLED2+0x330>)
 8001c30:	f006 f9fa 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <setLED2+0x330>)
 8001c3c:	f006 f9f4 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001c40:	e09b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'V'){
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b56      	cmp	r3, #86	; 0x56
 8001c46:	d124      	bne.n	8001c92 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c4e:	484d      	ldr	r0, [pc, #308]	; (8001d84 <setLED2+0x32c>)
 8001c50:	f006 f9ea 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	484b      	ldr	r0, [pc, #300]	; (8001d88 <setLED2+0x330>)
 8001c5c:	f006 f9e4 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	4848      	ldr	r0, [pc, #288]	; (8001d88 <setLED2+0x330>)
 8001c68:	f006 f9de 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <setLED2+0x330>)
 8001c74:	f006 f9d8 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	4842      	ldr	r0, [pc, #264]	; (8001d88 <setLED2+0x330>)
 8001c80:	f006 f9d2 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c8a:	483f      	ldr	r0, [pc, #252]	; (8001d88 <setLED2+0x330>)
 8001c8c:	f006 f9cc 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001c90:	e073      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'T'){
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b54      	cmp	r3, #84	; 0x54
 8001c96:	d124      	bne.n	8001ce2 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <setLED2+0x32c>)
 8001ca0:	f006 f9c2 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	4837      	ldr	r0, [pc, #220]	; (8001d88 <setLED2+0x330>)
 8001cac:	f006 f9bc 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <setLED2+0x330>)
 8001cb8:	f006 f9b6 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	4831      	ldr	r0, [pc, #196]	; (8001d88 <setLED2+0x330>)
 8001cc4:	f006 f9b0 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cce:	482e      	ldr	r0, [pc, #184]	; (8001d88 <setLED2+0x330>)
 8001cd0:	f006 f9aa 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cda:	482b      	ldr	r0, [pc, #172]	; (8001d88 <setLED2+0x330>)
 8001cdc:	f006 f9a4 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001ce0:	e04b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'A'){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b41      	cmp	r3, #65	; 0x41
 8001ce6:	d124      	bne.n	8001d32 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <setLED2+0x32c>)
 8001cf0:	f006 f99a 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <setLED2+0x330>)
 8001cfc:	f006 f994 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <setLED2+0x330>)
 8001d08:	f006 f98e 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d12:	481d      	ldr	r0, [pc, #116]	; (8001d88 <setLED2+0x330>)
 8001d14:	f006 f988 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1e:	481a      	ldr	r0, [pc, #104]	; (8001d88 <setLED2+0x330>)
 8001d20:	f006 f982 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2a:	4817      	ldr	r0, [pc, #92]	; (8001d88 <setLED2+0x330>)
 8001d2c:	f006 f97c 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001d30:	e023      	b.n	8001d7a <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <setLED2+0x32c>)
 8001d3a:	f006 f975 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <setLED2+0x330>)
 8001d46:	f006 f96f 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <setLED2+0x330>)
 8001d52:	f006 f969 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5c:	480a      	ldr	r0, [pc, #40]	; (8001d88 <setLED2+0x330>)
 8001d5e:	f006 f963 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <setLED2+0x330>)
 8001d6a:	f006 f95d 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <setLED2+0x330>)
 8001d76:	f006 f957 	bl	8008028 <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	00000000 	.word	0x00000000

08001d90 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001d98:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <calculateLineFollowingTermFlip+0x2d8>)
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	4bb3      	ldr	r3, [pc, #716]	; (800206c <calculateLineFollowingTermFlip+0x2dc>)
 8001d9e:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001da6:	4bb2      	ldr	r3, [pc, #712]	; (8002070 <calculateLineFollowingTermFlip+0x2e0>)
 8001da8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	f040 8140 	bne.w	8002032 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dba:	4baf      	ldr	r3, [pc, #700]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001dc2:	4bac      	ldr	r3, [pc, #688]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001dc8:	4bac      	ldr	r3, [pc, #688]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fba8 	bl	8000524 <__aeabi_i2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4ba9      	ldr	r3, [pc, #676]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	4625      	mov	r5, r4
 8001de4:	461c      	mov	r4, r3
 8001de6:	4ba5      	ldr	r3, [pc, #660]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb99 	bl	8000524 <__aeabi_i2d>
 8001df2:	a393      	add	r3, pc, #588	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa42 	bl	800028c <__adddf3>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4625      	mov	r5, r4
 8001e0e:	461c      	mov	r4, r3
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb84 	bl	8000524 <__aeabi_i2d>
 8001e1c:	a38a      	add	r3, pc, #552	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fbe9 	bl	80005f8 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fa2d 	bl	800028c <__adddf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4625      	mov	r5, r4
 8001e38:	461c      	mov	r4, r3
 8001e3a:	4b90      	ldr	r3, [pc, #576]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	a382      	add	r3, pc, #520	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbd4 	bl	80005f8 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa18 	bl	800028c <__adddf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4625      	mov	r5, r4
 8001e62:	461c      	mov	r4, r3
 8001e64:	4b85      	ldr	r3, [pc, #532]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb5a 	bl	8000524 <__aeabi_i2d>
 8001e70:	a379      	add	r3, pc, #484	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbbf 	bl	80005f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa03 	bl	800028c <__adddf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4625      	mov	r5, r4
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe f9f3 	bl	800028c <__adddf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001eb4:	f7fe fcca 	bl	800084c <__aeabi_ddiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4625      	mov	r5, r4
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	4b6e      	ldr	r3, [pc, #440]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_i2d>
 8001ecc:	4680      	mov	r8, r0
 8001ece:	4689      	mov	r9, r1
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ed2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb24 	bl	8000524 <__aeabi_i2d>
 8001edc:	a35e      	add	r3, pc, #376	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb89 	bl	80005f8 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe f9cd 	bl	800028c <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	4699      	mov	r9, r3
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001efc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb0f 	bl	8000524 <__aeabi_i2d>
 8001f06:	a352      	add	r3, pc, #328	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe f9b8 	bl	800028c <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	4b55      	ldr	r3, [pc, #340]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fafa 	bl	8000524 <__aeabi_i2d>
 8001f30:	a345      	add	r3, pc, #276	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb5f 	bl	80005f8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4649      	mov	r1, r9
 8001f42:	f7fe f9a3 	bl	800028c <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4b4b      	ldr	r3, [pc, #300]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fae5 	bl	8000524 <__aeabi_i2d>
 8001f5a:	a339      	add	r3, pc, #228	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb4a 	bl	80005f8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe f98e 	bl	800028c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4690      	mov	r8, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fad0 	bl	8000524 <__aeabi_i2d>
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4640      	mov	r0, r8
 8001f94:	4649      	mov	r1, r9
 8001f96:	f7fe f979 	bl	800028c <__adddf3>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001fa8:	f7fe fc50 	bl	800084c <__aeabi_ddiv>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe f968 	bl	8000288 <__aeabi_dsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	f7fe fe12 	bl	8000be8 <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fe2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	ee17 0a90 	vmov	r0, s15
 8001ff2:	f7fe faa9 	bl	8000548 <__aeabi_f2d>
 8001ff6:	a31a      	add	r3, pc, #104	; (adr r3, 8002060 <calculateLineFollowingTermFlip+0x2d0>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fc26 	bl	800084c <__aeabi_ddiv>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f7fe fdee 	bl	8000be8 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <calculateLineFollowingTermFlip+0x2fc>)
 8002028:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6013      	str	r3, [r2, #0]
	}
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	9999999a 	.word	0x9999999a
 8002044:	3ff99999 	.word	0x3ff99999
 8002048:	33333333 	.word	0x33333333
 800204c:	3ff73333 	.word	0x3ff73333
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	3ff4cccc 	.word	0x3ff4cccc
 8002058:	66666666 	.word	0x66666666
 800205c:	3ff26666 	.word	0x3ff26666
 8002060:	d2f1a9fc 	.word	0xd2f1a9fc
 8002064:	3f50624d 	.word	0x3f50624d
 8002068:	40733333 	.word	0x40733333
 800206c:	3ccccccd 	.word	0x3ccccccd
 8002070:	2000027a 	.word	0x2000027a
 8002074:	2000027b 	.word	0x2000027b
 8002078:	20000288 	.word	0x20000288
 800207c:	2001a600 	.word	0x2001a600
 8002080:	3ffc0000 	.word	0x3ffc0000
 8002084:	40180000 	.word	0x40180000
 8002088:	20000284 	.word	0x20000284
 800208c:	2000027c 	.word	0x2000027c

08002090 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <lineTraceFlip+0x150>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8097 	bne.w	80021d0 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 80020a2:	f001 fb3d 	bl	8003720 <getVelocityControlTerm>
 80020a6:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <lineTraceFlip+0x154>)
 80020ac:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 80020ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	db02      	blt.n	80020c6 <lineTraceFlip+0x36>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e010      	b.n	80020e8 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 80020c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d805      	bhi.n	80020e8 <lineTraceFlip+0x58>
 80020dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e0:	eef1 7a67 	vneg.f32	s15, s15
 80020e4:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <lineTraceFlip+0x158>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80021ec <lineTraceFlip+0x15c>
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	db0d      	blt.n	8002126 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <lineTraceFlip+0x158>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80021ec <lineTraceFlip+0x15c>
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	edc7 7a04 	vstr	s15, [r7, #16]
 8002124:	e01a      	b.n	800215c <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <lineTraceFlip+0x158>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80021f0 <lineTraceFlip+0x160>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d80c      	bhi.n	800215c <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <lineTraceFlip+0x158>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ed97 7a05 	vldr	s14, [r7, #20]
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021f0 <lineTraceFlip+0x160>
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 800215c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002160:	edd7 7a04 	vldr	s15, [r7, #16]
 8002164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002168:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <lineTraceFlip+0x158>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	edd7 7a04 	vldr	s15, [r7, #16]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <lineTraceFlip+0x158>)
 800217c:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <lineTraceFlip+0x158>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ed97 7a05 	vldr	s14, [r7, #20]
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <lineTraceFlip+0x158>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed97 7a05 	vldr	s14, [r7, #20]
 800219c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a0:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <lineTraceFlip+0x164>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 80021aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b2:	ee17 3a90 	vmov	r3, s15
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c0:	ee17 2a90 	vmov	r2, s15
 80021c4:	b212      	sxth	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 ffa1 	bl	8005110 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021ce:	e003      	b.n	80021d8 <lineTraceFlip+0x148>
		setMotor(0, 0);
 80021d0:	2100      	movs	r1, #0
 80021d2:	2000      	movs	r0, #0
 80021d4:	f002 ff9c 	bl	8005110 <setMotor>
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000027a 	.word	0x2000027a
 80021e4:	44b264cd 	.word	0x44b264cd
 80021e8:	2000027c 	.word	0x2000027c
 80021ec:	44d1e000 	.word	0x44d1e000
 80021f0:	c4d1e000 	.word	0xc4d1e000
 80021f4:	2001a6e8 	.word	0x2001a6e8

080021f8 <startLineTrace>:

void startLineTrace()
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <startLineTrace+0x1c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <startLineTrace+0x20>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000027a 	.word	0x2000027a
 8002218:	2000027b 	.word	0x2000027b

0800221c <stopLineTrace>:

void stopLineTrace()
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <stopLineTrace+0x1c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <stopLineTrace+0x20>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2000027a 	.word	0x2000027a
 800223c:	2000027c 	.word	0x2000027c

08002240 <checkCourseOut>:

void checkCourseOut(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <checkCourseOut+0xb4>)
 8002248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224c:	461a      	mov	r2, r3
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <checkCourseOut+0xb4>)
 8002250:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002254:	4413      	add	r3, r2
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <checkCourseOut+0xb4>)
 8002258:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <checkCourseOut+0xb4>)
 8002260:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002264:	4413      	add	r3, r2
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <checkCourseOut+0xb4>)
 8002268:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800226c:	4413      	add	r3, r2
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <checkCourseOut+0xb4>)
 8002270:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002274:	4413      	add	r3, r2
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <checkCourseOut+0xb4>)
 8002278:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800227c:	4413      	add	r3, r2
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <checkCourseOut+0xb4>)
 8002280:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002284:	4413      	add	r3, r2
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <checkCourseOut+0xb4>)
 8002288:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800228c:	4413      	add	r3, r2
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <checkCourseOut+0xb4>)
 8002290:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002294:	4413      	add	r3, r2
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <checkCourseOut+0xb4>)
 8002298:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800229c:	4413      	add	r3, r2
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <checkCourseOut+0xb4>)
 80022a0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <checkCourseOut+0xb8>)
 80022a8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ac:	1052      	asrs	r2, r2, #1
 80022ae:	17db      	asrs	r3, r3, #31
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022ba:	d906      	bls.n	80022ca <checkCourseOut+0x8a>
		dark_cnt++;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <checkCourseOut+0xbc>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <checkCourseOut+0xbc>)
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	e002      	b.n	80022d0 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <checkCourseOut+0xbc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <checkCourseOut+0xbc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b13      	cmp	r3, #19
 80022d6:	d903      	bls.n	80022e0 <checkCourseOut+0xa0>
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <checkCourseOut+0xc0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 80022de:	e002      	b.n	80022e6 <checkCourseOut+0xa6>
	else dark_flag = false;
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <checkCourseOut+0xc0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2001a600 	.word	0x2001a600
 80022f8:	2aaaaaab 	.word	0x2aaaaaab
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000280 	.word	0x20000280

08002304 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return dark_flag;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <getCouseOutFlag+0x14>)
 800230a:	781b      	ldrb	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000280 	.word	0x20000280

0800231c <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002320:	2202      	movs	r2, #2
 8002322:	4905      	ldr	r1, [pc, #20]	; (8002338 <initADC+0x1c>)
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <initADC+0x20>)
 8002326:	f004 fab3 	bl	8006890 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800232a:	220c      	movs	r2, #12
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <initADC+0x24>)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <initADC+0x28>)
 8002330:	f004 faae 	bl	8006890 <HAL_ADC_Start_DMA>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200002a8 	.word	0x200002a8
 800233c:	2001a73c 	.word	0x2001a73c
 8002340:	20000290 	.word	0x20000290
 8002344:	2001a6ec 	.word	0x2001a6ec

08002348 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800234c:	4bc9      	ldr	r3, [pc, #804]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002358:	4bc7      	ldr	r3, [pc, #796]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800235a:	edd3 7a01 	vldr	s15, [r3, #4]
 800235e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002362:	4bc6      	ldr	r3, [pc, #792]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002364:	ed93 7a01 	vldr	s14, [r3, #4]
 8002368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002374:	4bc3      	ldr	r3, [pc, #780]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	b219      	sxth	r1, r3
 8002384:	4bc0      	ldr	r3, [pc, #768]	; (8002688 <storeAnalogSensorBuffer+0x340>)
 8002386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800238a:	4bba      	ldr	r3, [pc, #744]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002396:	4bb8      	ldr	r3, [pc, #736]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023a0:	4bb6      	ldr	r3, [pc, #728]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023aa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	4bb4      	ldr	r3, [pc, #720]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	b219      	sxth	r1, r3
 80023c2:	4bb2      	ldr	r3, [pc, #712]	; (800268c <storeAnalogSensorBuffer+0x344>)
 80023c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023c8:	4baa      	ldr	r3, [pc, #680]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d4:	4ba8      	ldr	r3, [pc, #672]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80023d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023de:	4ba7      	ldr	r3, [pc, #668]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f0:	4ba4      	ldr	r3, [pc, #656]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fa:	ee17 3a90 	vmov	r3, s15
 80023fe:	b219      	sxth	r1, r3
 8002400:	4ba3      	ldr	r3, [pc, #652]	; (8002690 <storeAnalogSensorBuffer+0x348>)
 8002402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002406:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002408:	88db      	ldrh	r3, [r3, #6]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	4b99      	ldr	r3, [pc, #612]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002414:	edd3 7a03 	vldr	s15, [r3, #12]
 8002418:	ee77 6a67 	vsub.f32	s13, s14, s15
 800241c:	4b97      	ldr	r3, [pc, #604]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800241e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002426:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	b219      	sxth	r1, r3
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <storeAnalogSensorBuffer+0x34c>)
 8002440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002444:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002446:	891b      	ldrh	r3, [r3, #8]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002452:	edd3 7a04 	vldr	s15, [r3, #16]
 8002456:	ee77 6a67 	vsub.f32	s13, s14, s15
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800245c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002464:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	4b85      	ldr	r3, [pc, #532]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	b219      	sxth	r1, r3
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <storeAnalogSensorBuffer+0x350>)
 800247e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002484:	895b      	ldrh	r3, [r3, #10]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002490:	edd3 7a05 	vldr	s15, [r3, #20]
 8002494:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002498:	4b78      	ldr	r3, [pc, #480]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800249a:	ed93 7a05 	vldr	s14, [r3, #20]
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 3a90 	vmov	r3, s15
 80024b8:	b219      	sxth	r1, r3
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <storeAnalogSensorBuffer+0x354>)
 80024bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80024c2:	899b      	ldrh	r3, [r3, #12]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80024ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b69      	ldr	r3, [pc, #420]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80024d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f2:	ee17 3a90 	vmov	r3, s15
 80024f6:	b219      	sxth	r1, r3
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <storeAnalogSensorBuffer+0x358>)
 80024fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002500:	89db      	ldrh	r3, [r3, #14]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800250c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002510:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002516:	ed93 7a07 	vldr	s14, [r3, #28]
 800251a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
 8002534:	b219      	sxth	r1, r3
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <storeAnalogSensorBuffer+0x35c>)
 8002538:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800253e:	8a1b      	ldrh	r3, [r3, #16]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800254a:	edd3 7a08 	vldr	s15, [r3, #32]
 800254e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002554:	ed93 7a08 	vldr	s14, [r3, #32]
 8002558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	b219      	sxth	r1, r3
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <storeAnalogSensorBuffer+0x360>)
 8002576:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800257c:	8a5b      	ldrh	r3, [r3, #18]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002588:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800258c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002592:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 3a90 	vmov	r3, s15
 80025b0:	b219      	sxth	r1, r3
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <storeAnalogSensorBuffer+0x364>)
 80025b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025ba:	8a9b      	ldrh	r3, [r3, #20]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80025c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80025d0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	b219      	sxth	r1, r3
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <storeAnalogSensorBuffer+0x368>)
 80025f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025f8:	8adb      	ldrh	r3, [r3, #22]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002604:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002608:	ee77 6a67 	vsub.f32	s13, s14, s15
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800260e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002616:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	b219      	sxth	r1, r3
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <storeAnalogSensorBuffer+0x36c>)
 8002630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <storeAnalogSensorBuffer+0x370>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <storeAnalogSensorBuffer+0x374>)
 8002642:	edd3 7a01 	vldr	s15, [r3, #4]
 8002646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <storeAnalogSensorBuffer+0x378>)
 800264c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b219      	sxth	r1, r3
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <storeAnalogSensorBuffer+0x37c>)
 800266e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002672:	e029      	b.n	80026c8 <storeAnalogSensorBuffer+0x380>
 8002674:	20000290 	.word	0x20000290
 8002678:	2001a5c0 	.word	0x2001a5c0
 800267c:	2001a624 	.word	0x2001a624
 8002680:	447a0000 	.word	0x447a0000
 8002684:	20000030 	.word	0x20000030
 8002688:	200002c0 	.word	0x200002c0
 800268c:	200002ac 	.word	0x200002ac
 8002690:	200002d4 	.word	0x200002d4
 8002694:	200002e8 	.word	0x200002e8
 8002698:	200002fc 	.word	0x200002fc
 800269c:	20000310 	.word	0x20000310
 80026a0:	20000324 	.word	0x20000324
 80026a4:	20000338 	.word	0x20000338
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	20000360 	.word	0x20000360
 80026b0:	20000374 	.word	0x20000374
 80026b4:	20000388 	.word	0x20000388
 80026b8:	200002a8 	.word	0x200002a8
 80026bc:	2001a5b8 	.word	0x2001a5b8
 80026c0:	2001a5f8 	.word	0x2001a5f8
 80026c4:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <storeAnalogSensorBuffer+0x3d4>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <storeAnalogSensorBuffer+0x3d8>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <storeAnalogSensorBuffer+0x3dc>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002728 <storeAnalogSensorBuffer+0x3e0>
 80026ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fa:	ee17 3a90 	vmov	r3, s15
 80026fe:	b219      	sxth	r1, r3
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <storeAnalogSensorBuffer+0x3e8>)
 8002702:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	200002a8 	.word	0x200002a8
 8002720:	2001a5b8 	.word	0x2001a5b8
 8002724:	2001a5f8 	.word	0x2001a5f8
 8002728:	447a0000 	.word	0x447a0000
 800272c:	20000030 	.word	0x20000030
 8002730:	200003b0 	.word	0x200003b0

08002734 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800273a:	4bc9      	ldr	r3, [pc, #804]	; (8002a60 <updateAnalogSensor+0x32c>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002746:	4bc7      	ldr	r3, [pc, #796]	; (8002a64 <updateAnalogSensor+0x330>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002750:	4bc5      	ldr	r3, [pc, #788]	; (8002a68 <updateAnalogSensor+0x334>)
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a6c <updateAnalogSensor+0x338>
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 3a90 	vmov	r3, s15
 800276a:	b21a      	sxth	r2, r3
 800276c:	4bc0      	ldr	r3, [pc, #768]	; (8002a70 <updateAnalogSensor+0x33c>)
 800276e:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002770:	4bbb      	ldr	r3, [pc, #748]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277c:	4bb9      	ldr	r3, [pc, #740]	; (8002a64 <updateAnalogSensor+0x330>)
 800277e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002782:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002786:	4bb8      	ldr	r3, [pc, #736]	; (8002a68 <updateAnalogSensor+0x334>)
 8002788:	ed93 7a01 	vldr	s14, [r3, #4]
 800278c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002790:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a6c <updateAnalogSensor+0x338>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	4bb3      	ldr	r3, [pc, #716]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027a4:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80027a6:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	4bac      	ldr	r3, [pc, #688]	; (8002a64 <updateAnalogSensor+0x330>)
 80027b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027bc:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <updateAnalogSensor+0x334>)
 80027be:	ed93 7a02 	vldr	s14, [r3, #8]
 80027c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a6c <updateAnalogSensor+0x338>
 80027ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	ee17 3a90 	vmov	r3, s15
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4ba5      	ldr	r3, [pc, #660]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027da:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027de:	88db      	ldrh	r3, [r3, #6]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <updateAnalogSensor+0x330>)
 80027ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027f2:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <updateAnalogSensor+0x334>)
 80027f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fc:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a6c <updateAnalogSensor+0x338>
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002808:	ee17 3a90 	vmov	r3, s15
 800280c:	b21a      	sxth	r2, r3
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002810:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002812:	4b93      	ldr	r3, [pc, #588]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002814:	891b      	ldrh	r3, [r3, #8]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	4b91      	ldr	r3, [pc, #580]	; (8002a64 <updateAnalogSensor+0x330>)
 8002820:	edd3 7a04 	vldr	s15, [r3, #16]
 8002824:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <updateAnalogSensor+0x334>)
 800282a:	ed93 7a04 	vldr	s14, [r3, #16]
 800282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002832:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a6c <updateAnalogSensor+0x338>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b8a      	ldr	r3, [pc, #552]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002846:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002848:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <updateAnalogSensor+0x32c>)
 800284a:	895b      	ldrh	r3, [r3, #10]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <updateAnalogSensor+0x330>)
 8002856:	edd3 7a05 	vldr	s15, [r3, #20]
 800285a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <updateAnalogSensor+0x334>)
 8002860:	ed93 7a05 	vldr	s14, [r3, #20]
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a6c <updateAnalogSensor+0x338>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002874:	ee17 3a90 	vmov	r3, s15
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <updateAnalogSensor+0x33c>)
 800287c:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002880:	899b      	ldrh	r3, [r3, #12]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288a:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <updateAnalogSensor+0x330>)
 800288c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002890:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002894:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <updateAnalogSensor+0x334>)
 8002896:	ed93 7a06 	vldr	s14, [r3, #24]
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a6c <updateAnalogSensor+0x338>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	ee17 3a90 	vmov	r3, s15
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028b2:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028b6:	89db      	ldrh	r3, [r3, #14]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <updateAnalogSensor+0x330>)
 80028c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80028c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <updateAnalogSensor+0x334>)
 80028cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a6c <updateAnalogSensor+0x338>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028e8:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028ec:	8a1b      	ldrh	r3, [r3, #16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <updateAnalogSensor+0x330>)
 80028f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80028fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <updateAnalogSensor+0x334>)
 8002902:	ed93 7a08 	vldr	s14, [r3, #32]
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a6c <updateAnalogSensor+0x338>
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002916:	ee17 3a90 	vmov	r3, s15
 800291a:	b21a      	sxth	r2, r3
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <updateAnalogSensor+0x33c>)
 800291e:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002922:	8a5b      	ldrh	r3, [r3, #18]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <updateAnalogSensor+0x330>)
 800292e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <updateAnalogSensor+0x334>)
 8002938:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002940:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a6c <updateAnalogSensor+0x338>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002954:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002958:	8a9b      	ldrh	r3, [r3, #20]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <updateAnalogSensor+0x330>)
 8002964:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002968:	ee77 6a67 	vsub.f32	s13, s14, s15
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <updateAnalogSensor+0x334>)
 800296e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002976:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a6c <updateAnalogSensor+0x338>
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800297e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002982:	ee17 3a90 	vmov	r3, s15
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <updateAnalogSensor+0x33c>)
 800298a:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <updateAnalogSensor+0x32c>)
 800298e:	8adb      	ldrh	r3, [r3, #22]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <updateAnalogSensor+0x330>)
 800299a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800299e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <updateAnalogSensor+0x334>)
 80029a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80029a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a6c <updateAnalogSensor+0x338>
 80029b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b8:	ee17 3a90 	vmov	r3, s15
 80029bc:	b21a      	sxth	r2, r3
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <updateAnalogSensor+0x33c>)
 80029c0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <updateAnalogSensor+0x340>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <updateAnalogSensor+0x340>)
 80029cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <updateAnalogSensor+0x340>)
 80029d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <updateAnalogSensor+0x340>)
 80029dc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <updateAnalogSensor+0x340>)
 80029e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <updateAnalogSensor+0x340>)
 80029ec:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <updateAnalogSensor+0x340>)
 80029f4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <updateAnalogSensor+0x340>)
 80029fc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a04:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a0c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <updateAnalogSensor+0x344>)
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	1092      	asrs	r2, r2, #2
 8002a1a:	17db      	asrs	r3, r3, #31
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <updateAnalogSensor+0x348>)
 8002a22:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a36:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a3e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a4e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a56:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	e012      	b.n	8002a84 <updateAnalogSensor+0x350>
 8002a5e:	bf00      	nop
 8002a60:	20000290 	.word	0x20000290
 8002a64:	2001a5c0 	.word	0x2001a5c0
 8002a68:	2001a624 	.word	0x2001a624
 8002a6c:	447a0000 	.word	0x447a0000
 8002a70:	2001a600 	.word	0x2001a600
 8002a74:	2000039c 	.word	0x2000039c
 8002a78:	66666667 	.word	0x66666667
 8002a7c:	2001a5a4 	.word	0x2001a5a4
 8002a80:	200003b0 	.word	0x200003b0
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a86:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a8e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a96:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <updateAnalogSensor+0x3d4>)
 8002a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa2:	1092      	asrs	r2, r2, #2
 8002aa4:	17db      	asrs	r3, r3, #31
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <updateAnalogSensor+0x3d8>)
 8002aac:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e01a      	b.n	8002aea <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac0:	db05      	blt.n	8002ace <updateAnalogSensor+0x39a>
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc04      	bgt.n	8002ae4 <updateAnalogSensor+0x3b0>
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	dde1      	ble.n	8002ab4 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <updateAnalogSensor+0x3e0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]

}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200003b0 	.word	0x200003b0
 8002b08:	66666667 	.word	0x66666667
 8002b0c:	2001a61c 	.word	0x2001a61c
 8002b10:	2001a600 	.word	0x2001a600
 8002b14:	20000030 	.word	0x20000030

08002b18 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a0      	sub	sp, #128	; 0x80
 8002b1c:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b22:	2230      	movs	r2, #48	; 0x30
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f009 fef7 	bl	800c91a <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	2230      	movs	r2, #48	; 0x30
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 fef0 	bl	800c91a <memset>
 8002b3a:	4bd8      	ldr	r3, [pc, #864]	; (8002e9c <sensorCalibration+0x384>)
 8002b3c:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b44:	e026      	b.n	8002b94 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b4a:	4ad5      	ldr	r2, [pc, #852]	; (8002ea0 <sensorCalibration+0x388>)
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b56:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b5a:	4ad2      	ldr	r2, [pc, #840]	; (8002ea4 <sensorCalibration+0x38c>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	4ad1      	ldr	r2, [pc, #836]	; (8002ea8 <sensorCalibration+0x390>)
 8002b62:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b40      	subs	r3, #64	; 0x40
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b82:	4413      	add	r3, r2
 8002b84:	3b70      	subs	r3, #112	; 0x70
 8002b86:	4ac8      	ldr	r2, [pc, #800]	; (8002ea8 <sensorCalibration+0x390>)
 8002b88:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b8a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b94:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b98:	2b0b      	cmp	r3, #11
 8002b9a:	d9d4      	bls.n	8002b46 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002ba2:	e013      	b.n	8002bcc <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002ba4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ba8:	4ac0      	ldr	r2, [pc, #768]	; (8002eac <sensorCalibration+0x394>)
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002bb4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bb8:	4abd      	ldr	r2, [pc, #756]	; (8002eb0 <sensorCalibration+0x398>)
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4aba      	ldr	r2, [pc, #744]	; (8002ea8 <sensorCalibration+0x390>)
 8002bc0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002bcc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d9e7      	bls.n	8002ba4 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002bd4:	e0f5      	b.n	8002dc2 <sensorCalibration+0x2aa>

		setLED2('X');
 8002bd6:	2058      	movs	r0, #88	; 0x58
 8002bd8:	f7fe ff3e 	bl	8001a58 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002be2:	e06e      	b.n	8002cc2 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002be4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002be8:	4ab2      	ldr	r2, [pc, #712]	; (8002eb4 <sensorCalibration+0x39c>)
 8002bea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bf2:	ee07 2a90 	vmov	s15, r2
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c00:	4413      	add	r3, r2
 8002c02:	3b40      	subs	r3, #64	; 0x40
 8002c04:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002c08:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c0c:	4aa9      	ldr	r2, [pc, #676]	; (8002eb4 <sensorCalibration+0x39c>)
 8002c0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c16:	ee07 2a90 	vmov	s15, r2
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c24:	4413      	add	r3, r2
 8002c26:	3b70      	subs	r3, #112	; 0x70
 8002c28:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c2c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c36:	4413      	add	r3, r2
 8002c38:	3b40      	subs	r3, #64	; 0x40
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c42:	4a97      	ldr	r2, [pc, #604]	; (8002ea0 <sensorCalibration+0x388>)
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	dd0d      	ble.n	8002c72 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002c56:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c5a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c64:	440a      	add	r2, r1
 8002c66:	3a40      	subs	r2, #64	; 0x40
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	498d      	ldr	r1, [pc, #564]	; (8002ea0 <sensorCalibration+0x388>)
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c72:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b70      	subs	r3, #112	; 0x70
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c88:	4a86      	ldr	r2, [pc, #536]	; (8002ea4 <sensorCalibration+0x38c>)
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d50d      	bpl.n	8002cb8 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002c9c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002ca0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002caa:	440a      	add	r2, r1
 8002cac:	3a70      	subs	r2, #112	; 0x70
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	497c      	ldr	r1, [pc, #496]	; (8002ea4 <sensorCalibration+0x38c>)
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002cc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cc6:	2b0b      	cmp	r3, #11
 8002cc8:	d98c      	bls.n	8002be4 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002cd0:	e073      	b.n	8002dba <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cd2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cd6:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cdc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ce0:	ee07 2a90 	vmov	s15, r2
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b78      	subs	r3, #120	; 0x78
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cfa:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d04:	ee07 2a90 	vmov	s15, r2
 8002d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d12:	4413      	add	r3, r2
 8002d14:	3b80      	subs	r3, #128	; 0x80
 8002d16:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002d1a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d24:	4413      	add	r3, r2
 8002d26:	3b78      	subs	r3, #120	; 0x78
 8002d28:	ed93 7a00 	vldr	s14, [r3]
 8002d2c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <sensorCalibration+0x394>)
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dd10      	ble.n	8002d66 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002d44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d48:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d4e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d52:	ee07 2a90 	vmov	s15, r2
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	4a54      	ldr	r2, [pc, #336]	; (8002eac <sensorCalibration+0x394>)
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	edc3 7a00 	vstr	s15, [r3]
 8002d64:	e024      	b.n	8002db0 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d66:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d70:	4413      	add	r3, r2
 8002d72:	3b80      	subs	r3, #128	; 0x80
 8002d74:	ed93 7a00 	vldr	s14, [r3]
 8002d78:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <sensorCalibration+0x398>)
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d50f      	bpl.n	8002db0 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002d90:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d9a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d9e:	ee07 2a90 	vmov	s15, r2
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <sensorCalibration+0x398>)
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002db0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002dba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d987      	bls.n	8002cd2 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002dc2:	204c      	movs	r0, #76	; 0x4c
 8002dc4:	f003 fb7e 	bl	80064c4 <getSwitchStatus>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f43f af03 	beq.w	8002bd6 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002dd6:	e01b      	b.n	8002e10 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002dd8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <sensorCalibration+0x388>)
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <sensorCalibration+0x38c>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <sensorCalibration+0x3a4>)
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002e10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	d9df      	bls.n	8002dd8 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e1e:	e010      	b.n	8002e42 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002e20:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e28:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <sensorCalibration+0x38c>)
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	440a      	add	r2, r1
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <sensorCalibration+0x3a8>)
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e38:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e46:	2b0b      	cmp	r3, #11
 8002e48:	d9ea      	bls.n	8002e20 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e50:	e01b      	b.n	8002e8a <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <sensorCalibration+0x394>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <sensorCalibration+0x398>)
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <sensorCalibration+0x3ac>)
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e80:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e8a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d9df      	bls.n	8002e52 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e98:	e027      	b.n	8002eea <sensorCalibration+0x3d2>
 8002e9a:	bf00      	nop
 8002e9c:	447a0000 	.word	0x447a0000
 8002ea0:	2001a784 	.word	0x2001a784
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	44bb8000 	.word	0x44bb8000
 8002eac:	2001a734 	.word	0x2001a734
 8002eb0:	2001a7b4 	.word	0x2001a7b4
 8002eb4:	20000290 	.word	0x20000290
 8002eb8:	200002a8 	.word	0x200002a8
 8002ebc:	2001a624 	.word	0x2001a624
 8002ec0:	2001a5c0 	.word	0x2001a5c0
 8002ec4:	2001a5f8 	.word	0x2001a5f8
		side_offset_values[i] = side_min_values[i];
 8002ec8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002ecc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ed0:	490a      	ldr	r1, [pc, #40]	; (8002efc <sensorCalibration+0x3e4>)
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	440a      	add	r2, r1
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <sensorCalibration+0x3e8>)
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ee0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002eea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d9ea      	bls.n	8002ec8 <sensorCalibration+0x3b0>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	3780      	adds	r7, #128	; 0x80
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2001a7b4 	.word	0x2001a7b4
 8002f00:	2001a5b8 	.word	0x2001a5b8

08002f04 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <initLog+0x60>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <initLog+0x64>)
 8002f0e:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <initLog+0x68>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <initLog+0x6c>)
 8002f16:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <initLog+0x70>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <initLog+0x74>)
 8002f1e:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <initLog+0x78>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <initLog+0x7c>)
 8002f26:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <initLog+0x80>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <initLog+0x84>)
 8002f2e:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <initLog+0x60>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <initLog+0x88>)
 8002f36:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <initLog+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <initLog+0x8c>)
 8002f3e:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <initLog+0x70>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <initLog+0x90>)
 8002f46:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <initLog+0x78>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <initLog+0x94>)
 8002f4e:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <initLog+0x80>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <initLog+0x98>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	08010e04 	.word	0x08010e04
 8002f68:	2001a5a0 	.word	0x2001a5a0
 8002f6c:	08010e08 	.word	0x08010e08
 8002f70:	2001a5f4 	.word	0x2001a5f4
 8002f74:	08010e0c 	.word	0x08010e0c
 8002f78:	2001a5b0 	.word	0x2001a5b0
 8002f7c:	08010e10 	.word	0x08010e10
 8002f80:	2001a59c 	.word	0x2001a59c
 8002f84:	08010e14 	.word	0x08010e14
 8002f88:	2001a5ac 	.word	0x2001a5ac
 8002f8c:	2001a5a8 	.word	0x2001a5a8
 8002f90:	2001a5b4 	.word	0x2001a5b4
 8002f94:	2001a620 	.word	0x2001a620
 8002f98:	2001a618 	.word	0x2001a618
 8002f9c:	2001a5f0 	.word	0x2001a5f0

08002fa0 <saveDistance>:

void saveDistance(float distance){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <saveDistance+0x2c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fb06 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <saveDistance+0x2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <saveDistance+0x2c>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2001a5a0 	.word	0x2001a5a0

08002fd0 <saveTheta>:

void saveTheta(float theta){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <saveTheta+0x2c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe faee 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <saveTheta+0x2c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <saveTheta+0x2c>)
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2001a5f4 	.word	0x2001a5f4

08003000 <saveCross>:

void saveCross(float cross){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <saveCross+0x2c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fad6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <saveCross+0x2c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3304      	adds	r3, #4
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <saveCross+0x2c>)
 8003020:	6013      	str	r3, [r2, #0]
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2001a5b0 	.word	0x2001a5b0

08003030 <saveSide>:

void saveSide(float side){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <saveSide+0x2c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fabe 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <saveSide+0x2c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3304      	adds	r3, #4
 800304e:	4a03      	ldr	r2, [pc, #12]	; (800305c <saveSide+0x2c>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2001a59c 	.word	0x2001a59c

08003060 <saveDebug>:

void saveDebug(float value){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <saveDebug+0x2c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe faa6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <saveDebug+0x2c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4a03      	ldr	r2, [pc, #12]	; (800308c <saveDebug+0x2c>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2001a5ac 	.word	0x2001a5ac

08003090 <ereaseLog>:


void ereaseLog(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003094:	2007      	movs	r0, #7
 8003096:	f7fe fa75 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 800309a:	2008      	movs	r0, #8
 800309c:	f7fe fa72 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 80030a0:	2009      	movs	r0, #9
 80030a2:	f7fe fa6f 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7fe fa6c 	bl	8001584 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80030ac:	200b      	movs	r0, #11
 80030ae:	f7fe fa69 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <ereaseLog+0x50>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <ereaseLog+0x54>)
 80030b8:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <ereaseLog+0x58>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <ereaseLog+0x5c>)
 80030c0:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <ereaseLog+0x60>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <ereaseLog+0x64>)
 80030c8:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <ereaseLog+0x68>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <ereaseLog+0x6c>)
 80030d0:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <ereaseLog+0x70>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <ereaseLog+0x74>)
 80030d8:	6013      	str	r3, [r2, #0]
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08010e04 	.word	0x08010e04
 80030e4:	2001a5a0 	.word	0x2001a5a0
 80030e8:	08010e08 	.word	0x08010e08
 80030ec:	2001a5f4 	.word	0x2001a5f4
 80030f0:	08010e0c 	.word	0x08010e0c
 80030f4:	2001a5b0 	.word	0x2001a5b0
 80030f8:	08010e10 	.word	0x08010e10
 80030fc:	2001a59c 	.word	0x2001a59c
 8003100:	08010e14 	.word	0x08010e14
 8003104:	2001a5ac 	.word	0x2001a5ac

08003108 <ereaseDebugLog>:

void ereaseDebugLog(){
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 800310c:	200b      	movs	r0, #11
 800310e:	f7fe fa39 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <ereaseDebugLog+0x18>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <ereaseDebugLog+0x1c>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	08010e14 	.word	0x08010e14
 8003124:	2001a5ac 	.word	0x2001a5ac

08003128 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <getDistanceLogSize+0x14>)
 800312e:	881b      	ldrh	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20016e44 	.word	0x20016e44

08003140 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <getCrossLogSize+0x14>)
 8003146:	881b      	ldrh	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20016e48 	.word	0x20016e48

08003158 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	return log_side_cnt;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <getSideLogSize+0x14>)
 800315e:	881b      	ldrh	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20016e4a 	.word	0x20016e4a

08003170 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <getDebugLogSize+0x14>)
 8003176:	881b      	ldrh	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20016e4c 	.word	0x20016e4c

08003188 <loadDistance>:


void loadDistance(){
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <loadDistance+0x6c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <loadDistance+0x70>)
 8003198:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <loadDistance+0x74>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <loadDistance+0x70>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4915      	ldr	r1, [pc, #84]	; (8003200 <loadDistance+0x78>)
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <loadDistance+0x78>)
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eef4 7a67 	vcmp.f32	s15, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d60e      	bvs.n	80031e6 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <loadDistance+0x74>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <loadDistance+0x74>)
 80031d2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <loadDistance+0x70>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <loadDistance+0x70>)
 80031dc:	6013      	str	r3, [r2, #0]
		i++;
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	3301      	adds	r3, #1
 80031e2:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 80031e4:	e7dc      	b.n	80031a0 <loadDistance+0x18>
			break;
 80031e6:	bf00      	nop
	}
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	08010e04 	.word	0x08010e04
 80031f8:	2001a5a8 	.word	0x2001a5a8
 80031fc:	20016e44 	.word	0x20016e44
 8003200:	2000c264 	.word	0x2000c264

08003204 <loadTheta>:

void loadTheta(){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <loadTheta+0x6c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <loadTheta+0x70>)
 8003214:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <loadTheta+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <loadTheta+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4915      	ldr	r1, [pc, #84]	; (800327c <loadTheta+0x78>)
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <loadTheta+0x78>)
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eef4 7a67 	vcmp.f32	s15, s15
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d60e      	bvs.n	8003262 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <loadTheta+0x74>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <loadTheta+0x74>)
 800324e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <loadTheta+0x70>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <loadTheta+0x70>)
 8003258:	6013      	str	r3, [r2, #0]
		i++;
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	3301      	adds	r3, #1
 800325e:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003260:	e7dc      	b.n	800321c <loadTheta+0x18>
			break;
 8003262:	bf00      	nop
	}
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	08010e08 	.word	0x08010e08
 8003274:	2001a5b4 	.word	0x2001a5b4
 8003278:	20016e46 	.word	0x20016e46
 800327c:	20011854 	.word	0x20011854

08003280 <loadCross>:

void loadCross(){
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <loadCross+0x6c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <loadCross+0x70>)
 8003290:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <loadCross+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <loadCross+0x70>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4915      	ldr	r1, [pc, #84]	; (80032f8 <loadCross+0x78>)
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <loadCross+0x78>)
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eef4 7a67 	vcmp.f32	s15, s15
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	d60e      	bvs.n	80032de <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <loadCross+0x74>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <loadCross+0x74>)
 80032ca:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <loadCross+0x70>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <loadCross+0x70>)
 80032d4:	6013      	str	r3, [r2, #0]
		i++;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	3301      	adds	r3, #1
 80032da:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 80032dc:	e7dc      	b.n	8003298 <loadCross+0x18>
			break;
 80032de:	bf00      	nop
	}
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	08010e0c 	.word	0x08010e0c
 80032f0:	2001a620 	.word	0x2001a620
 80032f4:	20016e48 	.word	0x20016e48
 80032f8:	200003c4 	.word	0x200003c4

080032fc <loadSide>:

void loadSide(){
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <loadSide+0x6c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <loadSide+0x70>)
 800330c:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <loadSide+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <loadSide+0x70>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4915      	ldr	r1, [pc, #84]	; (8003374 <loadSide+0x78>)
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <loadSide+0x78>)
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef4 7a67 	vcmp.f32	s15, s15
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d60e      	bvs.n	800335a <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <loadSide+0x74>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <loadSide+0x74>)
 8003346:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <loadSide+0x70>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <loadSide+0x70>)
 8003350:	6013      	str	r3, [r2, #0]
		i++;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	3301      	adds	r3, #1
 8003356:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003358:	e7dc      	b.n	8003314 <loadSide+0x18>
			break;
 800335a:	bf00      	nop
	}
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	08010e10 	.word	0x08010e10
 800336c:	2001a618 	.word	0x2001a618
 8003370:	20016e4a 	.word	0x20016e4a
 8003374:	20000554 	.word	0x20000554

08003378 <loadDebug>:

void loadDebug(){
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <loadDebug+0x6c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <loadDebug+0x70>)
 8003388:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <loadDebug+0x74>)
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <loadDebug+0x70>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4915      	ldr	r1, [pc, #84]	; (80033f0 <loadDebug+0x78>)
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <loadDebug+0x78>)
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eef4 7a67 	vcmp.f32	s15, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d60e      	bvs.n	80033d6 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <loadDebug+0x74>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <loadDebug+0x74>)
 80033c2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <loadDebug+0x70>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <loadDebug+0x70>)
 80033cc:	6013      	str	r3, [r2, #0]
		i++;
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	3301      	adds	r3, #1
 80033d2:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80033d4:	e7dc      	b.n	8003390 <loadDebug+0x18>
			break;
 80033d6:	bf00      	nop
	}
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	08010e14 	.word	0x08010e14
 80033e8:	2001a5f0 	.word	0x2001a5f0
 80033ec:	20016e4c 	.word	0x20016e4c
 80033f0:	200006e4 	.word	0x200006e4

080033f4 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	return log_distance;
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <getDistanceArrayPointer+0x10>)
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	2000c264 	.word	0x2000c264

08003408 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	return log_theta;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <getThetaArrayPointer+0x10>)
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	20011854 	.word	0x20011854

0800341c <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <getDistanceLog+0x28>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	ee07 3a90 	vmov	s15, r3
}
 8003434:	eeb0 0a67 	vmov.f32	s0, s15
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000c264 	.word	0x2000c264

08003448 <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <getCrossLog+0x28>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
}
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200003c4 	.word	0x200003c4

08003474 <getSideLog>:

float getSideLog(uint16_t idx){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <getSideLog+0x28>)
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000554 	.word	0x20000554

080034a0 <getDebugLog>:

float getDebugLog(uint16_t idx){
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <getDebugLog+0x28>)
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	ee07 3a90 	vmov	s15, r3
}
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	200006e4 	.word	0x200006e4

080034cc <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80034e0:	2200      	movs	r2, #0
 80034e2:	2104      	movs	r1, #4
 80034e4:	480d      	ldr	r0, [pc, #52]	; (800351c <read_byte+0x50>)
 80034e6:	f004 fd9f 	bl	8008028 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80034ea:	f107 010f 	add.w	r1, r7, #15
 80034ee:	2364      	movs	r3, #100	; 0x64
 80034f0:	2201      	movs	r2, #1
 80034f2:	480b      	ldr	r0, [pc, #44]	; (8003520 <read_byte+0x54>)
 80034f4:	f005 fb8a 	bl	8008c0c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80034f8:	f107 010e 	add.w	r1, r7, #14
 80034fc:	2364      	movs	r3, #100	; 0x64
 80034fe:	2201      	movs	r2, #1
 8003500:	4807      	ldr	r0, [pc, #28]	; (8003520 <read_byte+0x54>)
 8003502:	f005 fcb7 	bl	8008e74 <HAL_SPI_Receive>
		CS_SET;
 8003506:	2201      	movs	r2, #1
 8003508:	2104      	movs	r1, #4
 800350a:	4804      	ldr	r0, [pc, #16]	; (800351c <read_byte+0x50>)
 800350c:	f004 fd8c 	bl	8008028 <HAL_GPIO_WritePin>

	return val;
 8003510:	7bbb      	ldrb	r3, [r7, #14]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020c00 	.word	0x40020c00
 8003520:	2001a888 	.word	0x2001a888

08003524 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	460a      	mov	r2, r1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	4613      	mov	r3, r2
 8003532:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	b2db      	uxtb	r3, r3
 800353c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800353e:	2200      	movs	r2, #0
 8003540:	2104      	movs	r1, #4
 8003542:	480c      	ldr	r0, [pc, #48]	; (8003574 <write_byte+0x50>)
 8003544:	f004 fd70 	bl	8008028 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003548:	f107 010f 	add.w	r1, r7, #15
 800354c:	2364      	movs	r3, #100	; 0x64
 800354e:	2201      	movs	r2, #1
 8003550:	4809      	ldr	r0, [pc, #36]	; (8003578 <write_byte+0x54>)
 8003552:	f005 fb5b 	bl	8008c0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003556:	1db9      	adds	r1, r7, #6
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	2201      	movs	r2, #1
 800355c:	4806      	ldr	r0, [pc, #24]	; (8003578 <write_byte+0x54>)
 800355e:	f005 fc89 	bl	8008e74 <HAL_SPI_Receive>
	CS_SET;
 8003562:	2201      	movs	r2, #1
 8003564:	2104      	movs	r1, #4
 8003566:	4803      	ldr	r0, [pc, #12]	; (8003574 <write_byte+0x50>)
 8003568:	f004 fd5e 	bl	8008028 <HAL_GPIO_WritePin>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40020c00 	.word	0x40020c00
 8003578:	2001a888 	.word	0x2001a888

0800357c <IMU_init>:

uint8_t IMU_init() {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 8003586:	2075      	movs	r0, #117	; 0x75
 8003588:	f7ff ffa0 	bl	80034cc <read_byte>
 800358c:	4603      	mov	r3, r0
 800358e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003590:	79bb      	ldrb	r3, [r7, #6]
 8003592:	2b70      	cmp	r3, #112	; 0x70
 8003594:	d110      	bne.n	80035b8 <IMU_init+0x3c>
		ret = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800359a:	2100      	movs	r1, #0
 800359c:	206b      	movs	r0, #107	; 0x6b
 800359e:	f7ff ffc1 	bl	8003524 <write_byte>
		HAL_Delay(100);
 80035a2:	2064      	movs	r0, #100	; 0x64
 80035a4:	f003 f90e 	bl	80067c4 <HAL_Delay>
		write_byte(0x1A, 0x00);
 80035a8:	2100      	movs	r1, #0
 80035aa:	201a      	movs	r0, #26
 80035ac:	f7ff ffba 	bl	8003524 <write_byte>
		write_byte(0x1B, 0x18);
 80035b0:	2118      	movs	r1, #24
 80035b2:	201b      	movs	r0, #27
 80035b4:	f7ff ffb6 	bl	8003524 <write_byte>
	}
	return ret;
 80035b8:	79fb      	ldrb	r3, [r7, #7]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <read_gyro_data>:

void read_gyro_data() {
 80035c4:	b598      	push	{r3, r4, r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80035c8:	2047      	movs	r0, #71	; 0x47
 80035ca:	f7ff ff7f 	bl	80034cc <read_byte>
 80035ce:	4603      	mov	r3, r0
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	b21c      	sxth	r4, r3
 80035d4:	2048      	movs	r0, #72	; 0x48
 80035d6:	f7ff ff79 	bl	80034cc <read_byte>
 80035da:	4603      	mov	r3, r0
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4323      	orrs	r3, r4
 80035e0:	b21a      	sxth	r2, r3
 80035e2:	4b02      	ldr	r3, [pc, #8]	; (80035ec <read_gyro_data+0x28>)
 80035e4:	801a      	strh	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	bd98      	pop	{r3, r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2001a7bc 	.word	0x2001a7bc

080035f0 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <calculateVelocityControlFlip+0x108>)
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	4b40      	ldr	r3, [pc, #256]	; (80036fc <calculateVelocityControlFlip+0x10c>)
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800360a:	f000 f8d9 	bl	80037c0 <getCurrentVelocity>
 800360e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003612:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <calculateVelocityControlFlip+0x110>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d163      	bne.n	80036e2 <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <calculateVelocityControlFlip+0x114>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d106      	bne.n	8003630 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <calculateVelocityControlFlip+0x118>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <calculateVelocityControlFlip+0x114>)
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003630:	f000 f894 	bl	800375c <setvariablespeed>
 8003634:	eeb0 7a40 	vmov.f32	s14, s0
 8003638:	edd7 7a03 	vldr	s15, [r7, #12]
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003644:	ed97 7a07 	vldr	s14, [r7, #28]
 8003648:	edd7 7a04 	vldr	s15, [r7, #16]
 800364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003650:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003654:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <calculateVelocityControlFlip+0x118>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff75 	bl	8000548 <__aeabi_f2d>
 800365e:	4604      	mov	r4, r0
 8003660:	460d      	mov	r5, r1
 8003662:	ed97 7a06 	vldr	s14, [r7, #24]
 8003666:	edd7 7a04 	vldr	s15, [r7, #16]
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	ee17 0a90 	vmov	r0, s15
 8003672:	f7fc ff69 	bl	8000548 <__aeabi_f2d>
 8003676:	a31e      	add	r3, pc, #120	; (adr r3, 80036f0 <calculateVelocityControlFlip+0x100>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f7fc ffbc 	bl	80005f8 <__aeabi_dmul>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4620      	mov	r0, r4
 8003686:	4629      	mov	r1, r5
 8003688:	f7fc fe00 	bl	800028c <__adddf3>
 800368c:	4603      	mov	r3, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4618      	mov	r0, r3
 8003692:	4621      	mov	r1, r4
 8003694:	f7fd faa8 	bl	8000be8 <__aeabi_d2f>
 8003698:	4602      	mov	r2, r0
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <calculateVelocityControlFlip+0x118>)
 800369c:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <calculateVelocityControlFlip+0x118>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <calculateVelocityControlFlip+0x11c>)
 80036ae:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <calculateVelocityControlFlip+0x120>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <calculateVelocityControlFlip+0x118>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <calculateVelocityControlFlip+0x124>)
 80036be:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <calculateVelocityControlFlip+0x118>)
 80036c2:	ed93 7a00 	vldr	s14, [r3]
 80036c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <calculateVelocityControlFlip+0x128>)
 80036d8:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80036dc:	4a0f      	ldr	r2, [pc, #60]	; (800371c <calculateVelocityControlFlip+0x12c>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6013      	str	r3, [r2, #0]

	}

}
 80036e2:	bf00      	nop
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w
 80036f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036f4:	3f50624d 	.word	0x3f50624d
 80036f8:	44bb8000 	.word	0x44bb8000
 80036fc:	469c4000 	.word	0x469c4000
 8003700:	20016e4e 	.word	0x20016e4e
 8003704:	20016e4f 	.word	0x20016e4f
 8003708:	20016e5c 	.word	0x20016e5c
 800370c:	2001a7c8 	.word	0x2001a7c8
 8003710:	2001a7d8 	.word	0x2001a7d8
 8003714:	2001a7d0 	.word	0x2001a7d0
 8003718:	20016e50 	.word	0x20016e50
 800371c:	20016e60 	.word	0x20016e60

08003720 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <getVelocityControlTerm+0x18>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	ee07 3a90 	vmov	s15, r3
}
 800372c:	eeb0 0a67 	vmov.f32	s0, s15
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	20016e50 	.word	0x20016e50

0800373c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <setTargetVelocity+0x1c>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	20016e54 	.word	0x20016e54

0800375c <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003760:	f7fd fe9a 	bl	8001498 <getspeedcount>
 8003764:	eeb0 7a40 	vmov.f32	s14, s0
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <setvariablespeed+0x5c>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	db04      	blt.n	8003782 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <setvariablespeed+0x5c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <setvariablespeed+0x60>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e012      	b.n	80037a8 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003782:	f7fd fe89 	bl	8001498 <getspeedcount>
 8003786:	eeb0 7a40 	vmov.f32	s14, s0
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <setvariablespeed+0x5c>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d506      	bpl.n	80037a8 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 800379a:	f7fd fe7d 	bl	8001498 <getspeedcount>
 800379e:	eef0 7a40 	vmov.f32	s15, s0
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <setvariablespeed+0x60>)
 80037a4:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <setvariablespeed+0x60>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	ee07 3a90 	vmov	s15, r3
}
 80037b0:	eeb0 0a67 	vmov.f32	s0, s15
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20016e54 	.word	0x20016e54
 80037bc:	20016e58 	.word	0x20016e58

080037c0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	80fb      	strh	r3, [r7, #6]
 80037ca:	2300      	movs	r3, #0
 80037cc:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	1dbb      	adds	r3, r7, #6
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fd7d 	bl	80012d4 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	461a      	mov	r2, r3
 80037e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	0fda      	lsrs	r2, r3, #31
 80037e8:	4413      	add	r3, r2
 80037ea:	105b      	asrs	r3, r3, #1
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f4:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fc fea5 	bl	8000548 <__aeabi_f2d>
 80037fe:	a30d      	add	r3, pc, #52	; (adr r3, 8003834 <getCurrentVelocity+0x74>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fef8 	bl	80005f8 <__aeabi_dmul>
 8003808:	4603      	mov	r3, r0
 800380a:	460c      	mov	r4, r1
 800380c:	4618      	mov	r0, r3
 800380e:	4621      	mov	r1, r4
 8003810:	f7fd f9ea 	bl	8000be8 <__aeabi_d2f>
 8003814:	4603      	mov	r3, r0
 8003816:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <getCurrentVelocity+0x70>)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	ee07 3a90 	vmov	s15, r3
}
 8003824:	eeb0 0a67 	vmov.f32	s0, s15
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	2001a7cc 	.word	0x2001a7cc
 8003834:	2df331e5 	.word	0x2df331e5
 8003838:	3f878fcc 	.word	0x3f878fcc

0800383c <getTargetVelocity>:

float getTargetVelocity()
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	return target_velocity;
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <getTargetVelocity+0x18>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	ee07 3a90 	vmov	s15, r3
}
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	20016e54 	.word	0x20016e54

08003858 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <startVelocityControl+0x1c>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <startVelocityControl+0x20>)
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20016e4e 	.word	0x20016e4e
 8003878:	20016e4f 	.word	0x20016e4f

0800387c <stopVelocityControl>:

void stopVelocityControl(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <stopVelocityControl+0x14>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20016e4e 	.word	0x20016e4e

08003894 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <setClearFlagOfVelocityControlI+0x14>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	20016e4f 	.word	0x20016e4f

080038ac <CreateXYcoordinates>:

static float Output_velocity;
static float Output_angularvelocity;

void CreateXYcoordinates()
{
 80038ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038b0:	b08a      	sub	sp, #40	; 0x28
 80038b2:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80038b4:	f7ff fd9e 	bl	80033f4 <getDistanceArrayPointer>
 80038b8:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80038ba:	f7ff fda5 	bl	8003408 <getThetaArrayPointer>
 80038be:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 80038d2:	f7ff fc29 	bl	8003128 <getDistanceLogSize>
 80038d6:	4603      	mov	r3, r0
 80038d8:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 80038da:	2300      	movs	r3, #0
 80038dc:	82fb      	strh	r3, [r7, #22]
 80038de:	e095      	b.n	8003a0c <CreateXYcoordinates+0x160>
		temp_distance = p_distance[i];
 80038e0:	8afb      	ldrh	r3, [r7, #22]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 80038ec:	8afb      	ldrh	r3, [r7, #22]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 80038f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d101      	bne.n	800390a <CreateXYcoordinates+0x5e>
 8003906:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <CreateXYcoordinates+0x174>)
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 800390a:	6a38      	ldr	r0, [r7, #32]
 800390c:	f7fc fe1c 	bl	8000548 <__aeabi_f2d>
 8003910:	4604      	mov	r4, r0
 8003912:	460d      	mov	r5, r1
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fc fe17 	bl	8000548 <__aeabi_f2d>
 800391a:	4680      	mov	r8, r0
 800391c:	4689      	mov	r9, r1
 800391e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003922:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003926:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800392a:	edd7 7a06 	vldr	s15, [r7, #24]
 800392e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003932:	ee17 0a90 	vmov	r0, s15
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	ec43 2b10 	vmov	d0, r2, r3
 8003942:	f007 f9d1 	bl	800ace8 <cos>
 8003946:	ec53 2b10 	vmov	r2, r3, d0
 800394a:	4640      	mov	r0, r8
 800394c:	4649      	mov	r1, r9
 800394e:	f7fc fe53 	bl	80005f8 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fc fc97 	bl	800028c <__adddf3>
 800395e:	4603      	mov	r3, r0
 8003960:	460c      	mov	r4, r1
 8003962:	4618      	mov	r0, r3
 8003964:	4621      	mov	r1, r4
 8003966:	f7fd f93f 	bl	8000be8 <__aeabi_d2f>
 800396a:	4603      	mov	r3, r0
 800396c:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 800396e:	69f8      	ldr	r0, [r7, #28]
 8003970:	f7fc fdea 	bl	8000548 <__aeabi_f2d>
 8003974:	4604      	mov	r4, r0
 8003976:	460d      	mov	r5, r1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fc fde5 	bl	8000548 <__aeabi_f2d>
 800397e:	4680      	mov	r8, r0
 8003980:	4689      	mov	r9, r1
 8003982:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003986:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800398a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800398e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	ee17 0a90 	vmov	r0, s15
 800399a:	f7fc fdd5 	bl	8000548 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	ec43 2b10 	vmov	d0, r2, r3
 80039a6:	f007 f9e3 	bl	800ad70 <sin>
 80039aa:	ec53 2b10 	vmov	r2, r3, d0
 80039ae:	4640      	mov	r0, r8
 80039b0:	4649      	mov	r1, r9
 80039b2:	f7fc fe21 	bl	80005f8 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4620      	mov	r0, r4
 80039bc:	4629      	mov	r1, r5
 80039be:	f7fc fc65 	bl	800028c <__adddf3>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	4618      	mov	r0, r3
 80039c8:	4621      	mov	r1, r4
 80039ca:	f7fd f90d 	bl	8000be8 <__aeabi_d2f>
 80039ce:	4603      	mov	r3, r0
 80039d0:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 80039d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80039d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 80039e2:	8afb      	ldrh	r3, [r7, #22]
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <CreateXYcoordinates+0x178>)
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 80039ee:	8afb      	ldrh	r3, [r7, #22]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <CreateXYcoordinates+0x17c>)
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	601a      	str	r2, [r3, #0]
		Theta_table[i] = th;
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <CreateXYcoordinates+0x180>)
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < log_size; i++){
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	82fb      	strh	r3, [r7, #22]
 8003a0c:	8afa      	ldrh	r2, [r7, #22]
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f4ff af65 	bcc.w	80038e0 <CreateXYcoordinates+0x34>

	}
}
 8003a16:	bf00      	nop
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a20:	3727c5ac 	.word	0x3727c5ac
 8003a24:	20016e64 	.word	0x20016e64
 8003a28:	20017634 	.word	0x20017634
 8003a2c:	20017e04 	.word	0x20017e04

08003a30 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003a42:	f7fd fcef 	bl	8001424 <getDistance10mm>
 8003a46:	ed87 0a00 	vstr	s0, [r7]
	float now_X_theta = getTheta10mm();
 8003a4a:	f7fd feff 	bl	800184c <getTheta10mm>
 8003a4e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_X_theta == 0) now_X_theta = 0.00001;
 8003a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	d101      	bne.n	8003a64 <CurrentXcoordinates+0x34>
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <CurrentXcoordinates+0x9c>)
 8003a62:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cosf(pre_th + now_X_theta/2);
 8003a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <CurrentXcoordinates+0xa0>)
 8003a72:	edd3 7a00 	vldr	s15, [r3]
 8003a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7e:	f007 f9bf 	bl	800ae00 <cosf>
 8003a82:	eeb0 7a40 	vmov.f32	s14, s0
 8003a86:	edd7 7a00 	vldr	s15, [r7]
 8003a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <CurrentXcoordinates+0xa4>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a98:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_X_theta;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <CurrentXcoordinates+0xa0>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aaa:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <CurrentXcoordinates+0xa4>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003ab4:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <CurrentXcoordinates+0xa0>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]

	return x;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	ee07 3a90 	vmov	s15, r3
}
 8003ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	3727c5ac 	.word	0x3727c5ac
 8003ad0:	200185ec 	.word	0x200185ec
 8003ad4:	200185f0 	.word	0x200185f0

08003ad8 <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003aea:	f7fd fc9b 	bl	8001424 <getDistance10mm>
 8003aee:	ed87 0a00 	vstr	s0, [r7]
	float now_Y_theta = getTheta10mm();
 8003af2:	f7fd feab 	bl	800184c <getTheta10mm>
 8003af6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_Y_theta == 0) now_Y_theta = 0.00001;
 8003afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003afe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d101      	bne.n	8003b0c <CurrentYcoordinates+0x34>
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <CurrentYcoordinates+0x9c>)
 8003b0a:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sinf(pre_th + now_Y_theta/2);
 8003b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <CurrentYcoordinates+0xa0>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	f007 f9ab 	bl	800ae80 <sinf>
 8003b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b2e:	edd7 7a00 	vldr	s15, [r7]
 8003b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <CurrentYcoordinates+0xa4>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_Y_theta;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <CurrentYcoordinates+0xa0>)
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b52:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <CurrentYcoordinates+0xa4>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003b5c:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <CurrentYcoordinates+0xa0>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]

	return y;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	ee07 3a90 	vmov	s15, r3
}
 8003b68:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	3727c5ac 	.word	0x3727c5ac
 8003b78:	200185f4 	.word	0x200185f4
 8003b7c:	200185f8 	.word	0x200185f8

08003b80 <updateTargetpoint>:

void updateTargetpoint()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	if(getTargetUpdateflag() == true){
 8003b84:	f002 f874 	bl	8005c70 <getTargetUpdateflag>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d039      	beq.n	8003c02 <updateTargetpoint+0x82>
		}else if(getDistance30mm() >= 30){
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
			targetpoint_table_idx++;
			clearDistance30mm();
		}*/
		if(getDistance30mm() >= 30){
 8003b8e:	f7fd fc65 	bl	800145c <getDistance30mm>
 8003b92:	eeb0 7a40 	vmov.f32	s14, s0
 8003b96:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8003b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	db07      	blt.n	8003bb4 <updateTargetpoint+0x34>
			//ref_XYdistance += getDistanceLog(targetpoint_table_idx);
			targetpoint_table_idx++;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <updateTargetpoint+0x88>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <updateTargetpoint+0x88>)
 8003bae:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003bb0:	f7fd fc62 	bl	8001478 <clearDistance30mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize()){
 8003bb4:	f7ff fab8 	bl	8003128 <getDistanceLogSize>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <updateTargetpoint+0x88>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d806      	bhi.n	8003bd2 <updateTargetpoint+0x52>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 8003bc4:	f7ff fab0 	bl	8003128 <getDistanceLogSize>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <updateTargetpoint+0x88>)
 8003bd0:	801a      	strh	r2, [r3, #0]
		}
		target_X_coordinate = X_table[targetpoint_table_idx];
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <updateTargetpoint+0x88>)
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <updateTargetpoint+0x8c>)
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <updateTargetpoint+0x90>)
 8003be0:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[targetpoint_table_idx];
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <updateTargetpoint+0x88>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <updateTargetpoint+0x94>)
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <updateTargetpoint+0x98>)
 8003bf0:	6013      	str	r3, [r2, #0]
		target_Theta = Theta_table[targetpoint_table_idx];
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <updateTargetpoint+0x88>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <updateTargetpoint+0x9c>)
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <updateTargetpoint+0xa0>)
 8003c00:	6013      	str	r3, [r2, #0]
	}
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2001a7e0 	.word	0x2001a7e0
 8003c0c:	20016e64 	.word	0x20016e64
 8003c10:	200185d4 	.word	0x200185d4
 8003c14:	20017634 	.word	0x20017634
 8003c18:	200185d8 	.word	0x200185d8
 8003c1c:	20017e04 	.word	0x20017e04
 8003c20:	200185dc 	.word	0x200185dc

08003c24 <Error_XY_Debug>:

	return Y_e;
}*/

void Error_XY_Debug(const float now_X, const float now_Y, const float now_Theta)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003c32:	ed87 1a01 	vstr	s2, [r7, #4]
	float X_e;
	float Y_e;
	float Theta_e;
	float sin_theta = sinf(now_Theta);
 8003c36:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c3a:	f007 f921 	bl	800ae80 <sinf>
 8003c3e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_theta = cosf(now_Theta);
 8003c42:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c46:	f007 f8db 	bl	800ae00 <cosf>
 8003c4a:	ed87 0a08 	vstr	s0, [r7, #32]

	X_e = (target_X_coordinate - now_X) * cos_theta + (target_Y_coordinate - now_Y) * sin_theta;
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <Error_XY_Debug+0xc4>)
 8003c50:	ed93 7a00 	vldr	s14, [r3]
 8003c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c64:	4b21      	ldr	r3, [pc, #132]	; (8003cec <Error_XY_Debug+0xc8>)
 8003c66:	edd3 6a00 	vldr	s13, [r3]
 8003c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
	Y_e = -(target_X_coordinate - now_X) * sin_theta + (target_Y_coordinate - now_Y) * cos_theta;
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <Error_XY_Debug+0xc4>)
 8003c84:	ed93 7a00 	vldr	s14, [r3]
 8003c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c90:	eeb1 7a67 	vneg.f32	s14, s15
 8003c94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <Error_XY_Debug+0xc8>)
 8003c9e:	edd3 6a00 	vldr	s13, [r3]
 8003ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ca6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003caa:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb6:	edc7 7a06 	vstr	s15, [r7, #24]
	Theta_e = target_Theta - now_Theta;
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <Error_XY_Debug+0xcc>)
 8003cbc:	ed93 7a00 	vldr	s14, [r3]
 8003cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc8:	edc7 7a05 	vstr	s15, [r7, #20]

	now_error_x = X_e;
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <Error_XY_Debug+0xd0>)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	6013      	str	r3, [r2, #0]
	now_error_y = Y_e;
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <Error_XY_Debug+0xd4>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6013      	str	r3, [r2, #0]
	now_error_theta = Theta_e;
 8003cd8:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <Error_XY_Debug+0xd8>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6013      	str	r3, [r2, #0]

	//saveDebug(X_e);
	//saveDebug(Y_e);
	//saveDebug(Theta_e);
}
 8003cde:	bf00      	nop
 8003ce0:	3728      	adds	r7, #40	; 0x28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200185d4 	.word	0x200185d4
 8003cec:	200185d8 	.word	0x200185d8
 8003cf0:	200185dc 	.word	0x200185dc
 8003cf4:	200185e0 	.word	0x200185e0
 8003cf8:	200185e4 	.word	0x200185e4
 8003cfc:	200185e8 	.word	0x200185e8

08003d00 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003d08:	1d39      	adds	r1, r7, #4
 8003d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4803      	ldr	r0, [pc, #12]	; (8003d20 <__io_putchar+0x20>)
 8003d12:	f006 fb88 	bl	800a426 <HAL_UART_Transmit>
	return ch;
 8003d16:	687b      	ldr	r3, [r7, #4]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2001a8e0 	.word	0x2001a8e0

08003d24 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d121      	bne.n	8003d7a <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003d3e:	6013      	str	r3, [r2, #0]
      timer2++;
 8003d40:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d48:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003d4a:	f7fd f9e9 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003d4e:	f7fd fc73 	bl	8001638 <updateIMUValue>
      updateAnalogSensor();
 8003d52:	f7fe fcef 	bl	8002734 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003d56:	f7fe f81b 	bl	8001d90 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003d5a:	f7ff fc49 	bl	80035f0 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003d5e:	f7fd f913 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003d62:	f7fe f995 	bl	8002090 <lineTraceFlip>
      runningFlip();
 8003d66:	f001 fc41 	bl	80055ec <runningFlip>
      motorCtrlFlip();
 8003d6a:	f001 f95b 	bl	8005024 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003d6e:	f001 f9bd 	bl	80050ec <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003d72:	f001 fa29 	bl	80051c8 <updateSideSensorStatus>

      checkCourseOut();
 8003d76:	f7fe fa63 	bl	8002240 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d106      	bne.n	8003d92 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003d8c:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003d8e:	f7fe fadb 	bl	8002348 <storeAnalogSensorBuffer>

   }
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40001000 	.word	0x40001000
 8003da0:	2001a7e4 	.word	0x2001a7e4
 8003da4:	2001a82c 	.word	0x2001a82c
 8003da8:	40001400 	.word	0x40001400
 8003dac:	2001aa04 	.word	0x2001aa04

08003db0 <init>:

void init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	  initADC();
 8003db4:	f7fe fab2 	bl	800231c <initADC>
	  initEncoder();
 8003db8:	f7fd f994 	bl	80010e4 <initEncoder>
	  initLog();
 8003dbc:	f7ff f8a2 	bl	8002f04 <initLog>
	  initGyro();
 8003dc0:	f7fd fc2a 	bl	8001618 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003dc4:	4809      	ldr	r0, [pc, #36]	; (8003dec <init+0x3c>)
 8003dc6:	f005 fc3c 	bl	8009642 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8003dca:	4809      	ldr	r0, [pc, #36]	; (8003df0 <init+0x40>)
 8003dcc:	f005 fc39 	bl	8009642 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003dd0:	f001 f910 	bl	8004ff4 <initMotor>

	  setLED('R');
 8003dd4:	2052      	movs	r0, #82	; 0x52
 8003dd6:	f7fd fd71 	bl	80018bc <setLED>

	  sensorCalibration();
 8003dda:	f7fe fe9d 	bl	8002b18 <sensorCalibration>

	  HAL_Delay(1000);
 8003dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de2:	f002 fcef 	bl	80067c4 <HAL_Delay>

}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	2001a980 	.word	0x2001a980
 8003df0:	2001aa68 	.word	0x2001aa68

08003df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b090      	sub	sp, #64	; 0x40
 8003dfa:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dfc:	f002 fc70 	bl	80066e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e00:	f000 fba6 	bl	8004550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e04:	f001 f834 	bl	8004e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e08:	f001 f80a 	bl	8004e20 <MX_DMA_Init>
  MX_TIM1_Init();
 8003e0c:	f000 fdba 	bl	8004984 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003e10:	f000 fe3a 	bl	8004a88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003e14:	f000 fe8c 	bl	8004b30 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003e18:	f000 ff48 	bl	8004cac <MX_TIM8_Init>
  MX_ADC1_Init();
 8003e1c:	f000 fc02 	bl	8004624 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003e20:	f000 fd4c 	bl	80048bc <MX_I2C1_Init>
  MX_SPI3_Init();
 8003e24:	f000 fd78 	bl	8004918 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003e28:	f000 ffd0 	bl	8004dcc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003e2c:	f000 fed4 	bl	8004bd8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003e30:	f000 ff08 	bl	8004c44 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003e34:	f000 fc56 	bl	80046e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003e38:	f7ff ffba 	bl	8003db0 <init>

  bool running_flag = false;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003e40:	204c      	movs	r0, #76	; 0x4c
 8003e42:	f002 fb3f 	bl	80064c4 <getSwitchStatus>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d109      	bne.n	8003e60 <main+0x6c>
 8003e4c:	4bb4      	ldr	r3, [pc, #720]	; (8004120 <main+0x32c>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <main+0x6c>
		  timer = 0;
 8003e54:	4bb3      	ldr	r3, [pc, #716]	; (8004124 <main+0x330>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003e5a:	4bb1      	ldr	r3, [pc, #708]	; (8004120 <main+0x32c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003e60:	204c      	movs	r0, #76	; 0x4c
 8003e62:	f002 fb2f 	bl	80064c4 <getSwitchStatus>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10a      	bne.n	8003e82 <main+0x8e>
 8003e6c:	4bad      	ldr	r3, [pc, #692]	; (8004124 <main+0x330>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b14      	cmp	r3, #20
 8003e72:	d906      	bls.n	8003e82 <main+0x8e>
 8003e74:	4baa      	ldr	r3, [pc, #680]	; (8004120 <main+0x32c>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <main+0x8e>
		  sw = 2;
 8003e7c:	4ba8      	ldr	r3, [pc, #672]	; (8004120 <main+0x32c>)
 8003e7e:	2202      	movs	r2, #2
 8003e80:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8003e82:	4ba8      	ldr	r3, [pc, #672]	; (8004124 <main+0x330>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b28      	cmp	r3, #40	; 0x28
 8003e88:	d906      	bls.n	8003e98 <main+0xa4>
 8003e8a:	4ba5      	ldr	r3, [pc, #660]	; (8004120 <main+0x32c>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d102      	bne.n	8003e98 <main+0xa4>
		  sw = 0;
 8003e92:	4ba3      	ldr	r3, [pc, #652]	; (8004120 <main+0x32c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8003e98:	204c      	movs	r0, #76	; 0x4c
 8003e9a:	f002 fb13 	bl	80064c4 <getSwitchStatus>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10c      	bne.n	8003ebe <main+0xca>
 8003ea4:	4b9e      	ldr	r3, [pc, #632]	; (8004120 <main+0x32c>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d108      	bne.n	8003ebe <main+0xca>
		  //mode_selector++;
		  soiya++;
 8003eac:	4b9e      	ldr	r3, [pc, #632]	; (8004128 <main+0x334>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	4b9c      	ldr	r3, [pc, #624]	; (8004128 <main+0x334>)
 8003eb6:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8003eb8:	4b99      	ldr	r3, [pc, #612]	; (8004120 <main+0x32c>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8003ebe:	2052      	movs	r0, #82	; 0x52
 8003ec0:	f002 fb00 	bl	80064c4 <getSwitchStatus>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d109      	bne.n	8003ede <main+0xea>
 8003eca:	4b98      	ldr	r3, [pc, #608]	; (800412c <main+0x338>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <main+0xea>
	  	  timer = 0;
 8003ed2:	4b94      	ldr	r3, [pc, #592]	; (8004124 <main+0x330>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003ed8:	4b94      	ldr	r3, [pc, #592]	; (800412c <main+0x338>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003ede:	2052      	movs	r0, #82	; 0x52
 8003ee0:	f002 faf0 	bl	80064c4 <getSwitchStatus>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10a      	bne.n	8003f00 <main+0x10c>
 8003eea:	4b8e      	ldr	r3, [pc, #568]	; (8004124 <main+0x330>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b14      	cmp	r3, #20
 8003ef0:	d906      	bls.n	8003f00 <main+0x10c>
 8003ef2:	4b8e      	ldr	r3, [pc, #568]	; (800412c <main+0x338>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <main+0x10c>
	  	  sw2 = 2;
 8003efa:	4b8c      	ldr	r3, [pc, #560]	; (800412c <main+0x338>)
 8003efc:	2202      	movs	r2, #2
 8003efe:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <main+0x330>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b28      	cmp	r3, #40	; 0x28
 8003f06:	d906      	bls.n	8003f16 <main+0x122>
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <main+0x338>)
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d102      	bne.n	8003f16 <main+0x122>
	  	  sw2 = 0;
 8003f10:	4b86      	ldr	r3, [pc, #536]	; (800412c <main+0x338>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003f16:	2052      	movs	r0, #82	; 0x52
 8003f18:	f002 fad4 	bl	80064c4 <getSwitchStatus>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10c      	bne.n	8003f3c <main+0x148>
 8003f22:	4b82      	ldr	r3, [pc, #520]	; (800412c <main+0x338>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d108      	bne.n	8003f3c <main+0x148>
	  	  cnt++;
 8003f2a:	4b81      	ldr	r3, [pc, #516]	; (8004130 <main+0x33c>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <main+0x33c>)
 8003f34:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003f36:	4b7d      	ldr	r3, [pc, #500]	; (800412c <main+0x338>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003f3c:	4b7c      	ldr	r3, [pc, #496]	; (8004130 <main+0x33c>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d902      	bls.n	8003f4a <main+0x156>
		  cnt = 0;
 8003f44:	4b7a      	ldr	r3, [pc, #488]	; (8004130 <main+0x33c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003f4a:	4b79      	ldr	r3, [pc, #484]	; (8004130 <main+0x33c>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <main+0x176>
		  HAL_Delay(1000);
 8003f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f56:	f002 fc35 	bl	80067c4 <HAL_Delay>
		  running_flag = true;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
		  timer2 = 0;
 8003f5e:	4b75      	ldr	r3, [pc, #468]	; (8004134 <main+0x340>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003f64:	4b72      	ldr	r3, [pc, #456]	; (8004130 <main+0x33c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <main+0x18a>
		  stopLineTrace();
 8003f76:	f7fe f951 	bl	800221c <stopLineTrace>
		  stopVelocityControl();
 8003f7a:	f7ff fc7f 	bl	800387c <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8003f7e:	f001 fe6b 	bl	8005c58 <getgoalStatus>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <main+0x1a4>
		  running_flag = false;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	75fb      	strb	r3, [r7, #23]
		  cnt = 0;
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <main+0x33c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f001 f8fa 	bl	800518c <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 8003f98:	4b63      	ldr	r3, [pc, #396]	; (8004128 <main+0x334>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b0d      	cmp	r3, #13
 8003f9e:	d902      	bls.n	8003fa6 <main+0x1b2>
		  soiya = 0;
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <main+0x334>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8003fa6:	4b60      	ldr	r3, [pc, #384]	; (8004128 <main+0x334>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	2b0d      	cmp	r3, #13
 8003fac:	f200 82a9 	bhi.w	8004502 <main+0x70e>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <main+0x1c4>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	0800401d 	.word	0x0800401d
 8003fc0:	08004053 	.word	0x08004053
 8003fc4:	08004097 	.word	0x08004097
 8003fc8:	080040db 	.word	0x080040db
 8003fcc:	08004151 	.word	0x08004151
 8003fd0:	080041a5 	.word	0x080041a5
 8003fd4:	080041f9 	.word	0x080041f9
 8003fd8:	0800424d 	.word	0x0800424d
 8003fdc:	080042a1 	.word	0x080042a1
 8003fe0:	080042f5 	.word	0x080042f5
 8003fe4:	08004349 	.word	0x08004349
 8003fe8:	0800439d 	.word	0x0800439d
 8003fec:	080043f1 	.word	0x080043f1

			  case 0:
				  setLED('W');
 8003ff0:	2057      	movs	r0, #87	; 0x57
 8003ff2:	f7fd fc63 	bl	80018bc <setLED>
				  setLED2('R');
 8003ff6:	2052      	movs	r0, #82	; 0x52
 8003ff8:	f7fd fd2e 	bl	8001a58 <setLED2>
				  printf("0\r\n");
 8003ffc:	484e      	ldr	r0, [pc, #312]	; (8004138 <main+0x344>)
 8003ffe:	f009 fb47 	bl	800d690 <puts>

				  if(running_flag == true){
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 827e 	beq.w	8004506 <main+0x712>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 800400a:	2002      	movs	r0, #2
 800400c:	f001 f906 	bl	800521c <setRunMode>
						  runningInit();
 8004010:	f001 fbf0 	bl	80057f4 <runningInit>
						  soiya = 13;
 8004014:	4b44      	ldr	r3, [pc, #272]	; (8004128 <main+0x334>)
 8004016:	220d      	movs	r2, #13
 8004018:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 800401a:	e274      	b.n	8004506 <main+0x712>

			  case 1:
				  setLED('G');
 800401c:	2047      	movs	r0, #71	; 0x47
 800401e:	f7fd fc4d 	bl	80018bc <setLED>
				  setLED2('G');
 8004022:	2047      	movs	r0, #71	; 0x47
 8004024:	f7fd fd18 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 826d 	beq.w	800450a <main+0x716>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8004030:	f7fd fa66 	bl	8001500 <clearspeedcount>

					      //setVelocityRange(0, 0);
						  setTargetVelocity(0.0);
 8004034:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800413c <main+0x348>
 8004038:	f7ff fb80 	bl	800373c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 800403c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004040:	f001 f8a4 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 8004044:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004048:	f002 fbbc 	bl	80067c4 <HAL_Delay>

						  running();
 800404c:	f001 f9ce 	bl	80053ec <running>
				  }

				  break;
 8004050:	e25b      	b.n	800450a <main+0x716>

			  case 2:
				  setLED('Y');
 8004052:	2059      	movs	r0, #89	; 0x59
 8004054:	f7fd fc32 	bl	80018bc <setLED>
				  setLED2('R');
 8004058:	2052      	movs	r0, #82	; 0x52
 800405a:	f7fd fcfd 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8254 	beq.w	800450e <main+0x71a>
						  //startLineTrace();

					      clearspeedcount();
 8004066:	f7fd fa4b 	bl	8001500 <clearspeedcount>

					      IMU_average();
 800406a:	f7fd fbb9 	bl	80017e0 <IMU_average>

					      setRunMode(1);
 800406e:	2001      	movs	r0, #1
 8004070:	f001 f8d4 	bl	800521c <setRunMode>

					      setVelocityRange(1.5, 1.5);
 8004074:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004078:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800407c:	f001 fe04 	bl	8005c88 <setVelocityRange>

						  setsuctionMotor(500);
 8004080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004084:	f001 f882 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1000);
 8004088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408c:	f002 fb9a 	bl	80067c4 <HAL_Delay>

						  running();
 8004090:	f001 f9ac 	bl	80053ec <running>
				  }

				  break;
 8004094:	e23b      	b.n	800450e <main+0x71a>

			  case 3:
				  setLED('Y');
 8004096:	2059      	movs	r0, #89	; 0x59
 8004098:	f7fd fc10 	bl	80018bc <setLED>
				  setLED2('G');
 800409c:	2047      	movs	r0, #71	; 0x47
 800409e:	f7fd fcdb 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8234 	beq.w	8004512 <main+0x71e>
						  //startLineTrace();

						  clearspeedcount();
 80040aa:	f7fd fa29 	bl	8001500 <clearspeedcount>

						  IMU_average();
 80040ae:	f7fd fb97 	bl	80017e0 <IMU_average>

						  setRunMode(1);
 80040b2:	2001      	movs	r0, #1
 80040b4:	f001 f8b2 	bl	800521c <setRunMode>

						  setVelocityRange(2.2, 2.2);
 80040b8:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004140 <main+0x34c>
 80040bc:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004140 <main+0x34c>
 80040c0:	f001 fde2 	bl	8005c88 <setVelocityRange>

						  setsuctionMotor(500);
 80040c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040c8:	f001 f860 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1000);
 80040cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d0:	f002 fb78 	bl	80067c4 <HAL_Delay>

						  running();
 80040d4:	f001 f98a 	bl	80053ec <running>
				  }

				  break;
 80040d8:	e21b      	b.n	8004512 <main+0x71e>

			  case 4:
				  setLED('C');
 80040da:	2043      	movs	r0, #67	; 0x43
 80040dc:	f7fd fbee 	bl	80018bc <setLED>
				  setLED2('R');
 80040e0:	2052      	movs	r0, #82	; 0x52
 80040e2:	f7fd fcb9 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8214 	beq.w	8004516 <main+0x722>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80040ee:	f7fd fa07 	bl	8001500 <clearspeedcount>

						  IMU_average();
 80040f2:	f7fd fb75 	bl	80017e0 <IMU_average>

						  setRunMode(5);
 80040f6:	2005      	movs	r0, #5
 80040f8:	f001 f890 	bl	800521c <setRunMode>

						  setVelocityRange(1.5, 1.5);
 80040fc:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004100:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004104:	f001 fdc0 	bl	8005c88 <setVelocityRange>

						  setsuctionMotor(500);
 8004108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800410c:	f001 f83e 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 8004110:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004114:	f002 fb56 	bl	80067c4 <HAL_Delay>

						  running();
 8004118:	f001 f968 	bl	80053ec <running>
				  }

				  break;
 800411c:	e1fb      	b.n	8004516 <main+0x722>
 800411e:	bf00      	nop
 8004120:	2001aa00 	.word	0x2001aa00
 8004124:	2001a7e4 	.word	0x2001a7e4
 8004128:	200185fe 	.word	0x200185fe
 800412c:	200185fc 	.word	0x200185fc
 8004130:	2001a884 	.word	0x2001a884
 8004134:	2001a82c 	.word	0x2001a82c
 8004138:	08010db0 	.word	0x08010db0
 800413c:	00000000 	.word	0x00000000
 8004140:	400ccccd 	.word	0x400ccccd
 8004144:	40133333 	.word	0x40133333
 8004148:	40266666 	.word	0x40266666
 800414c:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 8004150:	2043      	movs	r0, #67	; 0x43
 8004152:	f7fd fbb3 	bl	80018bc <setLED>
				  setLED2('G');
 8004156:	2047      	movs	r0, #71	; 0x47
 8004158:	f7fd fc7e 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 81db 	beq.w	800451a <main+0x726>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004164:	f7fd f9cc 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004168:	2002      	movs	r0, #2
 800416a:	f001 f857 	bl	800521c <setRunMode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 800416e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004172:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004176:	f001 fd87 	bl	8005c88 <setVelocityRange>
						  setAccDec(7, 3);
 800417a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800417e:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004182:	f001 fd99 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004186:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 800414c <main+0x358>
 800418a:	f001 fdad 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 800418e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004192:	f000 fffb 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 8004196:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800419a:	f002 fb13 	bl	80067c4 <HAL_Delay>

						  running();
 800419e:	f001 f925 	bl	80053ec <running>
				  }

				  break;
 80041a2:	e1ba      	b.n	800451a <main+0x726>

			  case 6:
				  setLED('C');
 80041a4:	2043      	movs	r0, #67	; 0x43
 80041a6:	f7fd fb89 	bl	80018bc <setLED>
				  setLED2('B');
 80041aa:	2042      	movs	r0, #66	; 0x42
 80041ac:	f7fd fc54 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 81b3 	beq.w	800451e <main+0x72a>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80041b8:	f7fd f9a2 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80041bc:	2002      	movs	r0, #2
 80041be:	f001 f82d 	bl	800521c <setRunMode>

						  setVelocityRange(2.0, 6.0);
 80041c2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80041c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80041ca:	f001 fd5d 	bl	8005c88 <setVelocityRange>
						  setAccDec(8, 5);
 80041ce:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80041d2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80041d6:	f001 fd6f 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80041da:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 800414c <main+0x358>
 80041de:	f001 fd83 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 80041e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041e6:	f000 ffd1 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 80041ea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80041ee:	f002 fae9 	bl	80067c4 <HAL_Delay>

						  running();
 80041f2:	f001 f8fb 	bl	80053ec <running>
				  }

				  break;
 80041f6:	e192      	b.n	800451e <main+0x72a>

			  case 7:
				  setLED('C');
 80041f8:	2043      	movs	r0, #67	; 0x43
 80041fa:	f7fd fb5f 	bl	80018bc <setLED>
				  setLED2('W');
 80041fe:	2057      	movs	r0, #87	; 0x57
 8004200:	f7fd fc2a 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 818b 	beq.w	8004522 <main+0x72e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800420c:	f7fd f978 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004210:	2002      	movs	r0, #2
 8004212:	f001 f803 	bl	800521c <setRunMode>

						  setVelocityRange(2.5, 6.0);
 8004216:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800421a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800421e:	f001 fd33 	bl	8005c88 <setVelocityRange>
						  setAccDec(8, 5);
 8004222:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004226:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800422a:	f001 fd45 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800422e:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 800414c <main+0x358>
 8004232:	f001 fd59 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 8004236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800423a:	f000 ffa7 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 800423e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004242:	f002 fabf 	bl	80067c4 <HAL_Delay>

						  running();
 8004246:	f001 f8d1 	bl	80053ec <running>
				  }

				  break;
 800424a:	e16a      	b.n	8004522 <main+0x72e>

			  case 8:
				  setLED('C');
 800424c:	2043      	movs	r0, #67	; 0x43
 800424e:	f7fd fb35 	bl	80018bc <setLED>
				  setLED2('Y');
 8004252:	2059      	movs	r0, #89	; 0x59
 8004254:	f7fd fc00 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8163 	beq.w	8004526 <main+0x732>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004260:	f7fd f94e 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 8004264:	2003      	movs	r0, #3
 8004266:	f000 ffd9 	bl	800521c <setRunMode>

						  setVelocityRange(2.3, 6.5);
 800426a:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 800426e:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 8004144 <main+0x350>
 8004272:	f001 fd09 	bl	8005c88 <setVelocityRange>
						  setAccDec(7, 4);
 8004276:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800427a:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800427e:	f001 fd1b 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004282:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 800414c <main+0x358>
 8004286:	f001 fd2f 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 800428a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800428e:	f000 ff7d 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 8004292:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004296:	f002 fa95 	bl	80067c4 <HAL_Delay>

						  running();
 800429a:	f001 f8a7 	bl	80053ec <running>
				  }

			  	  break;
 800429e:	e142      	b.n	8004526 <main+0x732>

			  case 9:
				  setLED('C');
 80042a0:	2043      	movs	r0, #67	; 0x43
 80042a2:	f7fd fb0b 	bl	80018bc <setLED>
				  setLED2('X');
 80042a6:	2058      	movs	r0, #88	; 0x58
 80042a8:	f7fd fbd6 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 813b 	beq.w	800452a <main+0x736>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80042b4:	f7fd f924 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80042b8:	2003      	movs	r0, #3
 80042ba:	f000 ffaf 	bl	800521c <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80042be:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80042c2:	ed1f 0a60 	vldr	s0, [pc, #-384]	; 8004144 <main+0x350>
 80042c6:	f001 fcdf 	bl	8005c88 <setVelocityRange>
						  setAccDec(8, 6);
 80042ca:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80042ce:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80042d2:	f001 fcf1 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80042d6:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 800414c <main+0x358>
 80042da:	f001 fd05 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 80042de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042e2:	f000 ff53 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1500);
 80042e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042ea:	f002 fa6b 	bl	80067c4 <HAL_Delay>

						  running();
 80042ee:	f001 f87d 	bl	80053ec <running>
				  }

				  break;
 80042f2:	e11a      	b.n	800452a <main+0x736>

			  case 10:
				  setLED('C');
 80042f4:	2043      	movs	r0, #67	; 0x43
 80042f6:	f7fd fae1 	bl	80018bc <setLED>
				  setLED2('V');
 80042fa:	2056      	movs	r0, #86	; 0x56
 80042fc:	f7fd fbac 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8113 	beq.w	800452e <main+0x73a>
						  //startLineTrace();

						  clearspeedcount();
 8004308:	f7fd f8fa 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 800430c:	2002      	movs	r0, #2
 800430e:	f000 ff85 	bl	800521c <setRunMode>

						  setVelocityRange(2.5, 7.5);
 8004312:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8004316:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800431a:	f001 fcb5 	bl	8005c88 <setVelocityRange>
						  setAccDec(7, 4);
 800431e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004322:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004326:	f001 fcc7 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800432a:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 800414c <main+0x358>
 800432e:	f001 fcdb 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 8004332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004336:	f000 ff29 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1000);
 800433a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800433e:	f002 fa41 	bl	80067c4 <HAL_Delay>

						  running();
 8004342:	f001 f853 	bl	80053ec <running>
				  }

				  break;
 8004346:	e0f2      	b.n	800452e <main+0x73a>


			  case 11:
				  setLED('C');
 8004348:	2043      	movs	r0, #67	; 0x43
 800434a:	f7fd fab7 	bl	80018bc <setLED>
				  setLED2('T');
 800434e:	2054      	movs	r0, #84	; 0x54
 8004350:	f7fd fb82 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80eb 	beq.w	8004532 <main+0x73e>
						  //startLineTrace();

						  clearspeedcount();
 800435c:	f7fd f8d0 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 8004360:	2003      	movs	r0, #3
 8004362:	f000 ff5b 	bl	800521c <setRunMode>

						  setVelocityRange(2.5, 8.5);
 8004366:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 800436a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800436e:	f001 fc8b 	bl	8005c88 <setVelocityRange>
						  setAccDec(10, 5);
 8004372:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004376:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800437a:	f001 fc9d 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800437e:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 800414c <main+0x358>
 8004382:	f001 fcb1 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 8004386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800438a:	f000 feff 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1000);
 800438e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004392:	f002 fa17 	bl	80067c4 <HAL_Delay>

						  running();
 8004396:	f001 f829 	bl	80053ec <running>
				  }

				  break;
 800439a:	e0ca      	b.n	8004532 <main+0x73e>

			  case 12:
				  setLED('C');
 800439c:	2043      	movs	r0, #67	; 0x43
 800439e:	f7fd fa8d 	bl	80018bc <setLED>
				  setLED2('A');
 80043a2:	2041      	movs	r0, #65	; 0x41
 80043a4:	f7fd fb58 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80c3 	beq.w	8004536 <main+0x742>
						  //startLineTrace();

						  clearspeedcount();
 80043b0:	f7fd f8a6 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80043b4:	2002      	movs	r0, #2
 80043b6:	f000 ff31 	bl	800521c <setRunMode>

						  setVelocityRange(2.6, 10.0);
 80043ba:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80043be:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 8004148 <main+0x354>
 80043c2:	f001 fc61 	bl	8005c88 <setVelocityRange>
						  setAccDec(7, 4);
 80043c6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80043ca:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80043ce:	f001 fc73 	bl	8005cb8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80043d2:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 800414c <main+0x358>
 80043d6:	f001 fc87 	bl	8005ce8 <setStraightRadius>

						  setsuctionMotor(500);
 80043da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043de:	f000 fed5 	bl	800518c <setsuctionMotor>

						  HAL_Delay(1000);
 80043e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e6:	f002 f9ed 	bl	80067c4 <HAL_Delay>

						  running();
 80043ea:	f000 ffff 	bl	80053ec <running>
				  }

				  break;
 80043ee:	e0a2      	b.n	8004536 <main+0x742>

			  case 13:
				  setLED('M');
 80043f0:	204d      	movs	r0, #77	; 0x4d
 80043f2:	f7fd fa63 	bl	80018bc <setLED>
				  setLED2('A');
 80043f6:	2041      	movs	r0, #65	; 0x41
 80043f8:	f7fd fb2e 	bl	8001a58 <setLED2>
				  printf("6\r\n");
 80043fc:	4850      	ldr	r0, [pc, #320]	; (8004540 <main+0x74c>)
 80043fe:	f009 f947 	bl	800d690 <puts>

				  if(running_flag == true){
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8098 	beq.w	800453a <main+0x746>
					  loadDistance();
 800440a:	f7fe febd 	bl	8003188 <loadDistance>
					  loadTheta();
 800440e:	f7fe fef9 	bl	8003204 <loadTheta>
					  loadCross();
 8004412:	f7fe ff35 	bl	8003280 <loadCross>
					  loadSide();
 8004416:	f7fe ff71 	bl	80032fc <loadSide>
					  loadDebug();
 800441a:	f7fe ffad 	bl	8003378 <loadDebug>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 800441e:	4849      	ldr	r0, [pc, #292]	; (8004544 <main+0x750>)
 8004420:	f009 f936 	bl	800d690 <puts>
					  uint16_t size = getDebugLogSize();
 8004424:	f7fe fea4 	bl	8003170 <getDebugLogSize>
 8004428:	4603      	mov	r3, r0
 800442a:	827b      	strh	r3, [r7, #18]
					  /*
					  for(uint16_t i = 0; i < size; i = i+9){
						 printf("%f, %f, %f, %f, %f, %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5), getDebugLog(i + 6), getDebugLog(i + 7), getDebugLog(i + 8));
					  }*/

					  for(uint16_t i = 0; i < size; i = i+6){
 800442c:	2300      	movs	r3, #0
 800442e:	82bb      	strh	r3, [r7, #20]
 8004430:	e05f      	b.n	80044f2 <main+0x6fe>
						 printf("%f, %f, %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5));
 8004432:	8abb      	ldrh	r3, [r7, #20]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff f833 	bl	80034a0 <getDebugLog>
 800443a:	ee10 3a10 	vmov	r3, s0
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc f882 	bl	8000548 <__aeabi_f2d>
 8004444:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004448:	8abb      	ldrh	r3, [r7, #20]
 800444a:	3301      	adds	r3, #1
 800444c:	b29b      	uxth	r3, r3
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f826 	bl	80034a0 <getDebugLog>
 8004454:	ee10 3a10 	vmov	r3, s0
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f875 	bl	8000548 <__aeabi_f2d>
 800445e:	4604      	mov	r4, r0
 8004460:	460d      	mov	r5, r1
 8004462:	8abb      	ldrh	r3, [r7, #20]
 8004464:	3302      	adds	r3, #2
 8004466:	b29b      	uxth	r3, r3
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f819 	bl	80034a0 <getDebugLog>
 800446e:	ee10 3a10 	vmov	r3, s0
 8004472:	4618      	mov	r0, r3
 8004474:	f7fc f868 	bl	8000548 <__aeabi_f2d>
 8004478:	4680      	mov	r8, r0
 800447a:	4689      	mov	r9, r1
 800447c:	8abb      	ldrh	r3, [r7, #20]
 800447e:	3303      	adds	r3, #3
 8004480:	b29b      	uxth	r3, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f80c 	bl	80034a0 <getDebugLog>
 8004488:	ee10 3a10 	vmov	r3, s0
 800448c:	4618      	mov	r0, r3
 800448e:	f7fc f85b 	bl	8000548 <__aeabi_f2d>
 8004492:	4682      	mov	sl, r0
 8004494:	468b      	mov	fp, r1
 8004496:	8abb      	ldrh	r3, [r7, #20]
 8004498:	3304      	adds	r3, #4
 800449a:	b29b      	uxth	r3, r3
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe ffff 	bl	80034a0 <getDebugLog>
 80044a2:	ee10 3a10 	vmov	r3, s0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc f84e 	bl	8000548 <__aeabi_f2d>
 80044ac:	e9c7 0100 	strd	r0, r1, [r7]
 80044b0:	8abb      	ldrh	r3, [r7, #20]
 80044b2:	3305      	adds	r3, #5
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fff2 	bl	80034a0 <getDebugLog>
 80044bc:	ee10 3a10 	vmov	r3, s0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fc f841 	bl	8000548 <__aeabi_f2d>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044ce:	ed97 7b00 	vldr	d7, [r7]
 80044d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80044d6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80044da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80044de:	e9cd 4500 	strd	r4, r5, [sp]
 80044e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e6:	4818      	ldr	r0, [pc, #96]	; (8004548 <main+0x754>)
 80044e8:	f009 f85e 	bl	800d5a8 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+6){
 80044ec:	8abb      	ldrh	r3, [r7, #20]
 80044ee:	3306      	adds	r3, #6
 80044f0:	82bb      	strh	r3, [r7, #20]
 80044f2:	8aba      	ldrh	r2, [r7, #20]
 80044f4:	8a7b      	ldrh	r3, [r7, #18]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d39b      	bcc.n	8004432 <main+0x63e>
					  /*
					  for(uint16_t i = 0; i < size; i = i+1){
						 printf("%f\r\n", getDebugLog(i));
					  }*/

					  printf("9999, 9999\r\n");
 80044fa:	4814      	ldr	r0, [pc, #80]	; (800454c <main+0x758>)
 80044fc:	f009 f8c8 	bl	800d690 <puts>
				  }

				  break;
 8004500:	e01b      	b.n	800453a <main+0x746>

			  default:
				  break;
 8004502:	bf00      	nop
 8004504:	e49c      	b.n	8003e40 <main+0x4c>
				  break;
 8004506:	bf00      	nop
 8004508:	e49a      	b.n	8003e40 <main+0x4c>
				  break;
 800450a:	bf00      	nop
 800450c:	e498      	b.n	8003e40 <main+0x4c>
				  break;
 800450e:	bf00      	nop
 8004510:	e496      	b.n	8003e40 <main+0x4c>
				  break;
 8004512:	bf00      	nop
 8004514:	e494      	b.n	8003e40 <main+0x4c>
				  break;
 8004516:	bf00      	nop
 8004518:	e492      	b.n	8003e40 <main+0x4c>
				  break;
 800451a:	bf00      	nop
 800451c:	e490      	b.n	8003e40 <main+0x4c>
				  break;
 800451e:	bf00      	nop
 8004520:	e48e      	b.n	8003e40 <main+0x4c>
				  break;
 8004522:	bf00      	nop
 8004524:	e48c      	b.n	8003e40 <main+0x4c>
			  	  break;
 8004526:	bf00      	nop
 8004528:	e48a      	b.n	8003e40 <main+0x4c>
				  break;
 800452a:	bf00      	nop
 800452c:	e488      	b.n	8003e40 <main+0x4c>
				  break;
 800452e:	bf00      	nop
 8004530:	e486      	b.n	8003e40 <main+0x4c>
				  break;
 8004532:	bf00      	nop
 8004534:	e484      	b.n	8003e40 <main+0x4c>
				  break;
 8004536:	bf00      	nop
 8004538:	e482      	b.n	8003e40 <main+0x4c>
				  break;
 800453a:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 800453c:	e480      	b.n	8003e40 <main+0x4c>
 800453e:	bf00      	nop
 8004540:	08010db4 	.word	0x08010db4
 8004544:	08010db8 	.word	0x08010db8
 8004548:	08010ddc 	.word	0x08010ddc
 800454c:	08010df8 	.word	0x08010df8

08004550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b094      	sub	sp, #80	; 0x50
 8004554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004556:	f107 0320 	add.w	r3, r7, #32
 800455a:	2230      	movs	r2, #48	; 0x30
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f008 f9db 	bl	800c91a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <SystemClock_Config+0xcc>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	4a27      	ldr	r2, [pc, #156]	; (800461c <SystemClock_Config+0xcc>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	6413      	str	r3, [r2, #64]	; 0x40
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <SystemClock_Config+0xcc>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004590:	2300      	movs	r3, #0
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <SystemClock_Config+0xd0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <SystemClock_Config+0xd0>)
 800459a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <SystemClock_Config+0xd0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80045ac:	2302      	movs	r3, #2
 80045ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045b0:	2301      	movs	r3, #1
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045b4:	2310      	movs	r3, #16
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045b8:	2302      	movs	r3, #2
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80045bc:	2300      	movs	r3, #0
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80045c0:	2308      	movs	r3, #8
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80045c4:	23a8      	movs	r3, #168	; 0xa8
 80045c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045c8:	2302      	movs	r3, #2
 80045ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045cc:	2304      	movs	r3, #4
 80045ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045d0:	f107 0320 	add.w	r3, r7, #32
 80045d4:	4618      	mov	r0, r3
 80045d6:	f003 fe79 	bl	80082cc <HAL_RCC_OscConfig>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80045e0:	f000 fd04 	bl	8004fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045e4:	230f      	movs	r3, #15
 80045e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045e8:	2302      	movs	r3, #2
 80045ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	2105      	movs	r1, #5
 8004602:	4618      	mov	r0, r3
 8004604:	f004 f8d2 	bl	80087ac <HAL_RCC_ClockConfig>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800460e:	f000 fced 	bl	8004fec <Error_Handler>
  }
}
 8004612:	bf00      	nop
 8004614:	3750      	adds	r7, #80	; 0x50
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000

08004624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800462a:	463b      	mov	r3, r7
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <MX_ADC1_Init+0xb8>)
 800463a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800463c:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <MX_ADC1_Init+0xb4>)
 800463e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <MX_ADC1_Init+0xb4>)
 800464c:	2201      	movs	r2, #1
 800464e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004652:	2201      	movs	r2, #1
 8004654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004660:	2200      	movs	r2, #0
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004664:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <MX_ADC1_Init+0xbc>)
 8004668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <MX_ADC1_Init+0xb4>)
 800466c:	2200      	movs	r2, #0
 800466e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004672:	2202      	movs	r2, #2
 8004674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800467e:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004680:	2201      	movs	r2, #1
 8004682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004684:	4814      	ldr	r0, [pc, #80]	; (80046d8 <MX_ADC1_Init+0xb4>)
 8004686:	f002 f8bf 	bl	8006808 <HAL_ADC_Init>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004690:	f000 fcac 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004694:	230c      	movs	r3, #12
 8004696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004698:	2301      	movs	r3, #1
 800469a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800469c:	2307      	movs	r3, #7
 800469e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046a0:	463b      	mov	r3, r7
 80046a2:	4619      	mov	r1, r3
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <MX_ADC1_Init+0xb4>)
 80046a6:	f002 fa03 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80046b0:	f000 fc9c 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80046b4:	230d      	movs	r3, #13
 80046b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80046b8:	2302      	movs	r3, #2
 80046ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046bc:	463b      	mov	r3, r7
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	; (80046d8 <MX_ADC1_Init+0xb4>)
 80046c2:	f002 f9f5 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80046cc:	f000 fc8e 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	2001a73c 	.word	0x2001a73c
 80046dc:	40012000 	.word	0x40012000
 80046e0:	0f000001 	.word	0x0f000001

080046e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046ea:	463b      	mov	r3, r7
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80046f6:	4b6e      	ldr	r3, [pc, #440]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 80046f8:	4a6e      	ldr	r2, [pc, #440]	; (80048b4 <MX_ADC2_Init+0x1d0>)
 80046fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046fc:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 80046fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004702:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004704:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800470a:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800470c:	2201      	movs	r2, #1
 800470e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004710:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004712:	2201      	movs	r2, #1
 8004714:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004716:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800471e:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004720:	2200      	movs	r2, #0
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004724:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004726:	4a64      	ldr	r2, [pc, #400]	; (80048b8 <MX_ADC2_Init+0x1d4>)
 8004728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800472a:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800472c:	2200      	movs	r2, #0
 800472e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8004730:	4b5f      	ldr	r3, [pc, #380]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004732:	220c      	movs	r2, #12
 8004734:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004736:	4b5e      	ldr	r3, [pc, #376]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800473e:	4b5c      	ldr	r3, [pc, #368]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004740:	2201      	movs	r2, #1
 8004742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004744:	485a      	ldr	r0, [pc, #360]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004746:	f002 f85f 	bl	8006808 <HAL_ADC_Init>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004750:	f000 fc4c 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004754:	2300      	movs	r3, #0
 8004756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004758:	2301      	movs	r3, #1
 800475a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800475c:	2307      	movs	r3, #7
 800475e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004760:	463b      	mov	r3, r7
 8004762:	4619      	mov	r1, r3
 8004764:	4852      	ldr	r0, [pc, #328]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004766:	f002 f9a3 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004770:	f000 fc3c 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004774:	2301      	movs	r3, #1
 8004776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004778:	2302      	movs	r3, #2
 800477a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800477c:	463b      	mov	r3, r7
 800477e:	4619      	mov	r1, r3
 8004780:	484b      	ldr	r0, [pc, #300]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004782:	f002 f995 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800478c:	f000 fc2e 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004790:	2302      	movs	r3, #2
 8004792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004794:	2303      	movs	r3, #3
 8004796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004798:	463b      	mov	r3, r7
 800479a:	4619      	mov	r1, r3
 800479c:	4844      	ldr	r0, [pc, #272]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800479e:	f002 f987 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80047a8:	f000 fc20 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80047ac:	2303      	movs	r3, #3
 80047ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80047b0:	2304      	movs	r3, #4
 80047b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047b4:	463b      	mov	r3, r7
 80047b6:	4619      	mov	r1, r3
 80047b8:	483d      	ldr	r0, [pc, #244]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 80047ba:	f002 f979 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80047c4:	f000 fc12 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80047c8:	2304      	movs	r3, #4
 80047ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80047cc:	2305      	movs	r3, #5
 80047ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047d0:	463b      	mov	r3, r7
 80047d2:	4619      	mov	r1, r3
 80047d4:	4836      	ldr	r0, [pc, #216]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 80047d6:	f002 f96b 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80047e0:	f000 fc04 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80047e4:	2305      	movs	r3, #5
 80047e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80047e8:	2306      	movs	r3, #6
 80047ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047ec:	463b      	mov	r3, r7
 80047ee:	4619      	mov	r1, r3
 80047f0:	482f      	ldr	r0, [pc, #188]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 80047f2:	f002 f95d 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80047fc:	f000 fbf6 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004800:	2306      	movs	r3, #6
 8004802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004804:	2307      	movs	r3, #7
 8004806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004808:	463b      	mov	r3, r7
 800480a:	4619      	mov	r1, r3
 800480c:	4828      	ldr	r0, [pc, #160]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800480e:	f002 f94f 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004818:	f000 fbe8 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800481c:	2307      	movs	r3, #7
 800481e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004820:	2308      	movs	r3, #8
 8004822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004824:	463b      	mov	r3, r7
 8004826:	4619      	mov	r1, r3
 8004828:	4821      	ldr	r0, [pc, #132]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800482a:	f002 f941 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004834:	f000 fbda 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004838:	2308      	movs	r3, #8
 800483a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800483c:	2309      	movs	r3, #9
 800483e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004840:	463b      	mov	r3, r7
 8004842:	4619      	mov	r1, r3
 8004844:	481a      	ldr	r0, [pc, #104]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004846:	f002 f933 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004850:	f000 fbcc 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004854:	2309      	movs	r3, #9
 8004856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004858:	230a      	movs	r3, #10
 800485a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800485c:	463b      	mov	r3, r7
 800485e:	4619      	mov	r1, r3
 8004860:	4813      	ldr	r0, [pc, #76]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 8004862:	f002 f925 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800486c:	f000 fbbe 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004870:	230e      	movs	r3, #14
 8004872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004874:	230b      	movs	r3, #11
 8004876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004878:	463b      	mov	r3, r7
 800487a:	4619      	mov	r1, r3
 800487c:	480c      	ldr	r0, [pc, #48]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800487e:	f002 f917 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004888:	f000 fbb0 	bl	8004fec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800488c:	230f      	movs	r3, #15
 800488e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004890:	230c      	movs	r3, #12
 8004892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004894:	463b      	mov	r3, r7
 8004896:	4619      	mov	r1, r3
 8004898:	4805      	ldr	r0, [pc, #20]	; (80048b0 <MX_ADC2_Init+0x1cc>)
 800489a:	f002 f909 	bl	8006ab0 <HAL_ADC_ConfigChannel>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80048a4:	f000 fba2 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	2001a6ec 	.word	0x2001a6ec
 80048b4:	40012100 	.word	0x40012100
 80048b8:	0f000001 	.word	0x0f000001

080048bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <MX_I2C1_Init+0x50>)
 80048c2:	4a13      	ldr	r2, [pc, #76]	; (8004910 <MX_I2C1_Init+0x54>)
 80048c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <MX_I2C1_Init+0x50>)
 80048c8:	4a12      	ldr	r2, [pc, #72]	; (8004914 <MX_I2C1_Init+0x58>)
 80048ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <MX_I2C1_Init+0x50>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <MX_I2C1_Init+0x50>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <MX_I2C1_Init+0x50>)
 80048da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <MX_I2C1_Init+0x50>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <MX_I2C1_Init+0x50>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <MX_I2C1_Init+0x50>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <MX_I2C1_Init+0x50>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048f8:	4804      	ldr	r0, [pc, #16]	; (800490c <MX_I2C1_Init+0x50>)
 80048fa:	f003 fbaf 	bl	800805c <HAL_I2C_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004904:	f000 fb72 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}
 800490c:	2001a830 	.word	0x2001a830
 8004910:	40005400 	.word	0x40005400
 8004914:	000186a0 	.word	0x000186a0

08004918 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <MX_SPI3_Init+0x64>)
 800491e:	4a18      	ldr	r2, [pc, #96]	; (8004980 <MX_SPI3_Init+0x68>)
 8004920:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004922:	4b16      	ldr	r3, [pc, #88]	; (800497c <MX_SPI3_Init+0x64>)
 8004924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004928:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <MX_SPI3_Init+0x64>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <MX_SPI3_Init+0x64>)
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <MX_SPI3_Init+0x64>)
 8004938:	2200      	movs	r2, #0
 800493a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <MX_SPI3_Init+0x64>)
 800493e:	2200      	movs	r2, #0
 8004940:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <MX_SPI3_Init+0x64>)
 8004944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004948:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <MX_SPI3_Init+0x64>)
 800494c:	2228      	movs	r2, #40	; 0x28
 800494e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <MX_SPI3_Init+0x64>)
 8004952:	2200      	movs	r2, #0
 8004954:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <MX_SPI3_Init+0x64>)
 8004958:	2200      	movs	r2, #0
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <MX_SPI3_Init+0x64>)
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <MX_SPI3_Init+0x64>)
 8004964:	220a      	movs	r2, #10
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004968:	4804      	ldr	r0, [pc, #16]	; (800497c <MX_SPI3_Init+0x64>)
 800496a:	f004 f8eb 	bl	8008b44 <HAL_SPI_Init>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004974:	f000 fb3a 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2001a888 	.word	0x2001a888
 8004980:	40003c00 	.word	0x40003c00

08004984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b092      	sub	sp, #72	; 0x48
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
 80049a4:	615a      	str	r2, [r3, #20]
 80049a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	2220      	movs	r2, #32
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f007 ffb3 	bl	800c91a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049b6:	4a33      	ldr	r2, [pc, #204]	; (8004a84 <MX_TIM1_Init+0x100>)
 80049b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049bc:	2200      	movs	r2, #0
 80049be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c0:	4b2f      	ldr	r3, [pc, #188]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049c8:	f240 3247 	movw	r2, #839	; 0x347
 80049cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049d4:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049e0:	4827      	ldr	r0, [pc, #156]	; (8004a80 <MX_TIM1_Init+0xfc>)
 80049e2:	f004 fe52 	bl	800968a <HAL_TIM_PWM_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80049ec:	f000 fafe 	bl	8004fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049f0:	2300      	movs	r3, #0
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049fc:	4619      	mov	r1, r3
 80049fe:	4820      	ldr	r0, [pc, #128]	; (8004a80 <MX_TIM1_Init+0xfc>)
 8004a00:	f005 fbe2 	bl	800a1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004a0a:	f000 faef 	bl	8004fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a0e:	2360      	movs	r3, #96	; 0x60
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a16:	2300      	movs	r3, #0
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a22:	2300      	movs	r3, #0
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4814      	ldr	r0, [pc, #80]	; (8004a80 <MX_TIM1_Init+0xfc>)
 8004a30:	f005 f866 	bl	8009b00 <HAL_TIM_PWM_ConfigChannel>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004a3a:	f000 fad7 	bl	8004fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4807      	ldr	r0, [pc, #28]	; (8004a80 <MX_TIM1_Init+0xfc>)
 8004a62:	f005 fc2d 	bl	800a2c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004a6c:	f000 fabe 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004a70:	4803      	ldr	r0, [pc, #12]	; (8004a80 <MX_TIM1_Init+0xfc>)
 8004a72:	f001 fc29 	bl	80062c8 <HAL_TIM_MspPostInit>

}
 8004a76:	bf00      	nop
 8004a78:	3748      	adds	r7, #72	; 0x48
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2001a9c0 	.word	0x2001a9c0
 8004a84:	40010000 	.word	0x40010000

08004a88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08c      	sub	sp, #48	; 0x30
 8004a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004a8e:	f107 030c 	add.w	r3, r7, #12
 8004a92:	2224      	movs	r2, #36	; 0x24
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f007 ff3f 	bl	800c91a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a9c:	1d3b      	adds	r3, r7, #4
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004aa4:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004aa6:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <MX_TIM3_Init+0xa4>)
 8004aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	4619      	mov	r1, r3
 8004af4:	480c      	ldr	r0, [pc, #48]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004af6:	f004 fe31 	bl	800975c <HAL_TIM_Encoder_Init>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004b00:	f000 fa74 	bl	8004fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b04:	2300      	movs	r3, #0
 8004b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4805      	ldr	r0, [pc, #20]	; (8004b28 <MX_TIM3_Init+0xa0>)
 8004b12:	f005 fb59 	bl	800a1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004b1c:	f000 fa66 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b20:	bf00      	nop
 8004b22:	3730      	adds	r7, #48	; 0x30
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	2001a694 	.word	0x2001a694
 8004b2c:	40000400 	.word	0x40000400

08004b30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b36:	f107 030c 	add.w	r3, r7, #12
 8004b3a:	2224      	movs	r2, #36	; 0x24
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f007 feeb 	bl	800c91a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b4e:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <MX_TIM4_Init+0xa4>)
 8004b50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004b52:	4b1f      	ldr	r3, [pc, #124]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004b9e:	f004 fddd 	bl	800975c <HAL_TIM_Encoder_Init>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004ba8:	f000 fa20 	bl	8004fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bac:	2300      	movs	r3, #0
 8004bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4805      	ldr	r0, [pc, #20]	; (8004bd0 <MX_TIM4_Init+0xa0>)
 8004bba:	f005 fb05 	bl	800a1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004bc4:	f000 fa12 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004bc8:	bf00      	nop
 8004bca:	3730      	adds	r7, #48	; 0x30
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	2001a654 	.word	0x2001a654
 8004bd4:	40000800 	.word	0x40000800

08004bd8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bde:	463b      	mov	r3, r7
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <MX_TIM6_Init+0x68>)
 8004bea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004bee:	2253      	movs	r2, #83	; 0x53
 8004bf0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004bf8:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c06:	480d      	ldr	r0, [pc, #52]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004c08:	f004 fcf0 	bl	80095ec <HAL_TIM_Base_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004c12:	f000 f9eb 	bl	8004fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c16:	2300      	movs	r3, #0
 8004c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004c1e:	463b      	mov	r3, r7
 8004c20:	4619      	mov	r1, r3
 8004c22:	4806      	ldr	r0, [pc, #24]	; (8004c3c <MX_TIM6_Init+0x64>)
 8004c24:	f005 fad0 	bl	800a1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004c2e:	f000 f9dd 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2001a980 	.word	0x2001a980
 8004c40:	40001000 	.word	0x40001000

08004c44 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <MX_TIM7_Init+0x64>)
 8004c56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c5a:	2253      	movs	r2, #83	; 0x53
 8004c5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c66:	2263      	movs	r2, #99	; 0x63
 8004c68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c70:	480c      	ldr	r0, [pc, #48]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c72:	f004 fcbb 	bl	80095ec <HAL_TIM_Base_Init>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004c7c:	f000 f9b6 	bl	8004fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c80:	2300      	movs	r3, #0
 8004c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c88:	463b      	mov	r3, r7
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <MX_TIM7_Init+0x60>)
 8004c8e:	f005 fa9b 	bl	800a1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004c98:	f000 f9a8 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	2001aa68 	.word	0x2001aa68
 8004ca8:	40001400 	.word	0x40001400

08004cac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b092      	sub	sp, #72	; 0x48
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	611a      	str	r2, [r3, #16]
 8004ccc:	615a      	str	r2, [r3, #20]
 8004cce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f007 fe1f 	bl	800c91a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004cdc:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004cde:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <MX_TIM8_Init+0x11c>)
 8004ce0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004ce2:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004cee:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004cf0:	f240 628f 	movw	r2, #1679	; 0x68f
 8004cf4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004d08:	482e      	ldr	r0, [pc, #184]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004d0a:	f004 fcbe 	bl	800968a <HAL_TIM_PWM_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004d14:	f000 f96a 	bl	8004fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d24:	4619      	mov	r1, r3
 8004d26:	4827      	ldr	r0, [pc, #156]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004d28:	f005 fa4e 	bl	800a1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004d32:	f000 f95b 	bl	8004fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d36:	2360      	movs	r3, #96	; 0x60
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d42:	2300      	movs	r3, #0
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d56:	2200      	movs	r2, #0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	481a      	ldr	r0, [pc, #104]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004d5c:	f004 fed0 	bl	8009b00 <HAL_TIM_PWM_ConfigChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004d66:	f000 f941 	bl	8004fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d6e:	2208      	movs	r2, #8
 8004d70:	4619      	mov	r1, r3
 8004d72:	4814      	ldr	r0, [pc, #80]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004d74:	f004 fec4 	bl	8009b00 <HAL_TIM_PWM_ConfigChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004d7e:	f000 f935 	bl	8004fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4807      	ldr	r0, [pc, #28]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004da6:	f005 fa8b 	bl	800a2c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004db0:	f000 f91c 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004db4:	4803      	ldr	r0, [pc, #12]	; (8004dc4 <MX_TIM8_Init+0x118>)
 8004db6:	f001 fa87 	bl	80062c8 <HAL_TIM_MspPostInit>

}
 8004dba:	bf00      	nop
 8004dbc:	3748      	adds	r7, #72	; 0x48
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2001a7e8 	.word	0x2001a7e8
 8004dc8:	40010400 	.word	0x40010400

08004dcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004dd2:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <MX_USART1_UART_Init+0x50>)
 8004dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004dd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004df0:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004df2:	220c      	movs	r2, #12
 8004df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e02:	4805      	ldr	r0, [pc, #20]	; (8004e18 <MX_USART1_UART_Init+0x4c>)
 8004e04:	f005 fac2 	bl	800a38c <HAL_UART_Init>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e0e:	f000 f8ed 	bl	8004fec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2001a8e0 	.word	0x2001a8e0
 8004e1c:	40011000 	.word	0x40011000

08004e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <MX_DMA_Init+0x4c>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <MX_DMA_Init+0x4c>)
 8004e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e34:	6313      	str	r3, [r2, #48]	; 0x30
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <MX_DMA_Init+0x4c>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004e42:	2200      	movs	r2, #0
 8004e44:	2100      	movs	r1, #0
 8004e46:	2038      	movs	r0, #56	; 0x38
 8004e48:	f002 f9ad 	bl	80071a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004e4c:	2038      	movs	r0, #56	; 0x38
 8004e4e:	f002 f9c6 	bl	80071de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2100      	movs	r1, #0
 8004e56:	203a      	movs	r0, #58	; 0x3a
 8004e58:	f002 f9a5 	bl	80071a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004e5c:	203a      	movs	r0, #58	; 0x3a
 8004e5e:	f002 f9be 	bl	80071de <HAL_NVIC_EnableIRQ>

}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800

08004e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e76:	f107 0314 	add.w	r3, r7, #20
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	609a      	str	r2, [r3, #8]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a52      	ldr	r2, [pc, #328]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b50      	ldr	r3, [pc, #320]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	4a4b      	ldr	r2, [pc, #300]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb2:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	4a44      	ldr	r2, [pc, #272]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ece:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	4b3e      	ldr	r3, [pc, #248]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	4a3d      	ldr	r2, [pc, #244]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	4a36      	ldr	r2, [pc, #216]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	6313      	str	r3, [r2, #48]	; 0x30
 8004f06:	4b34      	ldr	r3, [pc, #208]	; (8004fd8 <MX_GPIO_Init+0x168>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004f12:	2200      	movs	r2, #0
 8004f14:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004f18:	4830      	ldr	r0, [pc, #192]	; (8004fdc <MX_GPIO_Init+0x16c>)
 8004f1a:	f003 f885 	bl	8008028 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004f24:	482e      	ldr	r0, [pc, #184]	; (8004fe0 <MX_GPIO_Init+0x170>)
 8004f26:	f003 f87f 	bl	8008028 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f30:	482c      	ldr	r0, [pc, #176]	; (8004fe4 <MX_GPIO_Init+0x174>)
 8004f32:	f003 f879 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2104      	movs	r1, #4
 8004f3a:	482b      	ldr	r0, [pc, #172]	; (8004fe8 <MX_GPIO_Init+0x178>)
 8004f3c:	f003 f874 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004f40:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004f44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f46:	2301      	movs	r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f52:	f107 0314 	add.w	r3, r7, #20
 8004f56:	4619      	mov	r1, r3
 8004f58:	4820      	ldr	r0, [pc, #128]	; (8004fdc <MX_GPIO_Init+0x16c>)
 8004f5a:	f002 feb3 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004f5e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8004f62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f64:	2301      	movs	r3, #1
 8004f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f70:	f107 0314 	add.w	r3, r7, #20
 8004f74:	4619      	mov	r1, r3
 8004f76:	481a      	ldr	r0, [pc, #104]	; (8004fe0 <MX_GPIO_Init+0x170>)
 8004f78:	f002 fea4 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004f7c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4814      	ldr	r0, [pc, #80]	; (8004fe4 <MX_GPIO_Init+0x174>)
 8004f92:	f002 fe97 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4619      	mov	r1, r3
 8004fae:	480d      	ldr	r0, [pc, #52]	; (8004fe4 <MX_GPIO_Init+0x174>)
 8004fb0:	f002 fe88 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4807      	ldr	r0, [pc, #28]	; (8004fe8 <MX_GPIO_Init+0x178>)
 8004fcc:	f002 fe7a 	bl	8007cc4 <HAL_GPIO_Init>

}
 8004fd0:	bf00      	nop
 8004fd2:	3728      	adds	r7, #40	; 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40020800 	.word	0x40020800
 8004fe0:	40020400 	.word	0x40020400
 8004fe4:	40020000 	.word	0x40020000
 8004fe8:	40020c00 	.word	0x40020c00

08004fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ff0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ff2:	e7fe      	b.n	8004ff2 <Error_Handler+0x6>

08004ff4 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4808      	ldr	r0, [pc, #32]	; (800501c <initMotor+0x28>)
 8004ffc:	f004 fb70 	bl	80096e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8005000:	2108      	movs	r1, #8
 8005002:	4806      	ldr	r0, [pc, #24]	; (800501c <initMotor+0x28>)
 8005004:	f004 fb6c 	bl	80096e0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005008:	210c      	movs	r1, #12
 800500a:	4805      	ldr	r0, [pc, #20]	; (8005020 <initMotor+0x2c>)
 800500c:	f004 fb68 	bl	80096e0 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8005010:	2064      	movs	r0, #100	; 0x64
 8005012:	f001 fbd7 	bl	80067c4 <HAL_Delay>
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	2001a7e8 	.word	0x2001a7e8
 8005020:	2001a9c0 	.word	0x2001a9c0

08005024 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <motorCtrlFlip+0xb0>)
 800502c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005030:	2b00      	cmp	r3, #0
 8005032:	db0d      	blt.n	8005050 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8005034:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <motorCtrlFlip+0xb0>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <motorCtrlFlip+0xb4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005042:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	4824      	ldr	r0, [pc, #144]	; (80050dc <motorCtrlFlip+0xb8>)
 800504a:	f002 ffed 	bl	8008028 <HAL_GPIO_WritePin>
 800504e:	e010      	b.n	8005072 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <motorCtrlFlip+0xb0>)
 8005052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005056:	b29b      	uxth	r3, r3
 8005058:	425b      	negs	r3, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800505e:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <motorCtrlFlip+0xb4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005066:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8005068:	2201      	movs	r2, #1
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	481b      	ldr	r0, [pc, #108]	; (80050dc <motorCtrlFlip+0xb8>)
 800506e:	f002 ffdb 	bl	8008028 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <motorCtrlFlip+0xbc>)
 8005074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005078:	2b00      	cmp	r3, #0
 800507a:	db0e      	blt.n	800509a <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 800507c:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <motorCtrlFlip+0xbc>)
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <motorCtrlFlip+0xb4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005092:	4812      	ldr	r0, [pc, #72]	; (80050dc <motorCtrlFlip+0xb8>)
 8005094:	f002 ffc8 	bl	8008028 <HAL_GPIO_WritePin>
 8005098:	e011      	b.n	80050be <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <motorCtrlFlip+0xbc>)
 800509c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	425b      	negs	r3, r3
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <motorCtrlFlip+0xb4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80050b0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80050b2:	2201      	movs	r2, #1
 80050b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050b8:	4808      	ldr	r0, [pc, #32]	; (80050dc <motorCtrlFlip+0xb8>)
 80050ba:	f002 ffb5 	bl	8008028 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <motorCtrlFlip+0xc0>)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <motorCtrlFlip+0xc4>)
 80050c6:	88bb      	ldrh	r3, [r7, #4]
 80050c8:	8013      	strh	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20018600 	.word	0x20018600
 80050d8:	2001a7e8 	.word	0x2001a7e8
 80050dc:	40020800 	.word	0x40020800
 80050e0:	20018602 	.word	0x20018602
 80050e4:	2001aaac 	.word	0x2001aaac
 80050e8:	2001aaaa 	.word	0x2001aaaa

080050ec <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <suctionmotorCtrlFlip+0x1c>)
 80050f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <suctionmotorCtrlFlip+0x20>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20018604 	.word	0x20018604
 800510c:	2001a9c0 	.word	0x2001a9c0

08005110 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	460a      	mov	r2, r1
 800511a:	80fb      	strh	r3, [r7, #6]
 800511c:	4613      	mov	r3, r2
 800511e:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8005120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005124:	f240 628e 	movw	r2, #1678	; 0x68e
 8005128:	4293      	cmp	r3, r2
 800512a:	dd03      	ble.n	8005134 <setMotor+0x24>
 800512c:	f240 638f 	movw	r3, #1679	; 0x68f
 8005130:	80fb      	strh	r3, [r7, #6]
 8005132:	e007      	b.n	8005144 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8005134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005138:	4a11      	ldr	r2, [pc, #68]	; (8005180 <setMotor+0x70>)
 800513a:	4293      	cmp	r3, r2
 800513c:	da02      	bge.n	8005144 <setMotor+0x34>
 800513e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005142:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8005144:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005148:	f240 628e 	movw	r2, #1678	; 0x68e
 800514c:	4293      	cmp	r3, r2
 800514e:	dd03      	ble.n	8005158 <setMotor+0x48>
 8005150:	f240 638f 	movw	r3, #1679	; 0x68f
 8005154:	80bb      	strh	r3, [r7, #4]
 8005156:	e007      	b.n	8005168 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8005158:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <setMotor+0x70>)
 800515e:	4293      	cmp	r3, r2
 8005160:	da02      	bge.n	8005168 <setMotor+0x58>
 8005162:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005166:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8005168:	4a06      	ldr	r2, [pc, #24]	; (8005184 <setMotor+0x74>)
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 800516e:	4a06      	ldr	r2, [pc, #24]	; (8005188 <setMotor+0x78>)
 8005170:	88bb      	ldrh	r3, [r7, #4]
 8005172:	8013      	strh	r3, [r2, #0]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	fffff972 	.word	0xfffff972
 8005184:	20018600 	.word	0x20018600
 8005188:	20018602 	.word	0x20018602

0800518c <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8005196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfb8      	it	lt
 800519e:	425b      	neglt	r3, r3
 80051a0:	b21a      	sxth	r2, r3
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <setsuctionMotor+0x38>)
 80051a4:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 80051a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051aa:	f240 3246 	movw	r2, #838	; 0x346
 80051ae:	4293      	cmp	r3, r2
 80051b0:	dd02      	ble.n	80051b8 <setsuctionMotor+0x2c>
 80051b2:	f240 3347 	movw	r3, #839	; 0x347
 80051b6:	80fb      	strh	r3, [r7, #6]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	20018604 	.word	0x20018604

080051c8 <updateSideSensorStatus>:
static float debug_now_X;
static float debug_now_Y;
static float debug_now_Theta;
static int16_t V_motor;

void updateSideSensorStatus(){
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <updateSideSensorStatus+0x44>)
 80051ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051d6:	dc03      	bgt.n	80051e0 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <updateSideSensorStatus+0x48>)
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e002      	b.n	80051e6 <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <updateSideSensorStatus+0x48>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <updateSideSensorStatus+0x4c>)
 80051e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051f0:	dc03      	bgt.n	80051fa <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <updateSideSensorStatus+0x50>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 80051f8:	e002      	b.n	8005200 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <updateSideSensorStatus+0x50>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	2001a61c 	.word	0x2001a61c
 8005210:	2001a554 	.word	0x2001a554
 8005214:	2001a5a4 	.word	0x2001a5a4
 8005218:	2001a555 	.word	0x2001a555

0800521c <setRunMode>:

void setRunMode(uint16_t num){
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
	mode = num;
 8005226:	4a04      	ldr	r2, [pc, #16]	; (8005238 <setRunMode+0x1c>)
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	8013      	strh	r3, [r2, #0]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	2001aab4 	.word	0x2001aab4

0800523c <isCrossLine>:

bool isCrossLine()
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8005242:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <isCrossLine+0x88>)
 8005244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005250:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <isCrossLine+0x88>)
 8005256:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005262:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8005266:	edd7 7a01 	vldr	s15, [r7, #4]
 800526a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80052c8 <isCrossLine+0x8c>
 800526e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	d50f      	bpl.n	8005298 <isCrossLine+0x5c>
 8005278:	edd7 7a00 	vldr	s15, [r7]
 800527c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80052c8 <isCrossLine+0x8c>
 8005280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	d506      	bpl.n	8005298 <isCrossLine+0x5c>
		cnt++;
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <isCrossLine+0x90>)
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	3301      	adds	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <isCrossLine+0x90>)
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	e002      	b.n	800529e <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <isCrossLine+0x90>)
 800529a:	2200      	movs	r2, #0
 800529c:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <isCrossLine+0x90>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d903      	bls.n	80052ae <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <isCrossLine+0x94>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e002      	b.n	80052b4 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <isCrossLine+0x94>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <isCrossLine+0x94>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	2001a600 	.word	0x2001a600
 80052c8:	442f0000 	.word	0x442f0000
 80052cc:	2001a580 	.word	0x2001a580
 80052d0:	2001a582 	.word	0x2001a582
 80052d4:	00000000 	.word	0x00000000

080052d8 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	ed2d 8b02 	vpush	{d8}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 80052e2:	2300      	movs	r3, #0
 80052e4:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 80052e6:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <isContinuousCurvature+0xc8>)
 80052e8:	ed93 8a00 	vldr	s16, [r3]
 80052ec:	f7fc faae 	bl	800184c <getTheta10mm>
 80052f0:	eef0 7a40 	vmov.f32	s15, s0
 80052f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80052f8:	eef0 7ae7 	vabs.f32	s15, s15
 80052fc:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005300:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <isContinuousCurvature+0xcc>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d006      	beq.n	8005316 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005308:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <isContinuousCurvature+0xcc>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <isContinuousCurvature+0xd0>)
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	f7fb f916 	bl	8000548 <__aeabi_f2d>
 800531c:	a31e      	add	r3, pc, #120	; (adr r3, 8005398 <isContinuousCurvature+0xc0>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f7fb fbe5 	bl	8000af0 <__aeabi_dcmple>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <isContinuousCurvature+0x6a>
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <isContinuousCurvature+0xd0>)
 800532e:	edd3 7a00 	vldr	s15, [r3]
 8005332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <isContinuousCurvature+0xd0>)
 800533c:	edc3 7a00 	vstr	s15, [r3]
 8005340:	e003      	b.n	800534a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8005342:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <isContinuousCurvature+0xd0>)
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 800534a:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <isContinuousCurvature+0xd0>)
 800534c:	edd3 7a00 	vldr	s15, [r3]
 8005350:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80053ac <isContinuousCurvature+0xd4>
 8005354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535c:	db01      	blt.n	8005362 <isContinuousCurvature+0x8a>
 800535e:	2301      	movs	r3, #1
 8005360:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <isContinuousCurvature+0xd0>)
 8005364:	edd3 7a00 	vldr	s15, [r3]
 8005368:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80053b0 <isContinuousCurvature+0xd8>
 800536c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	db02      	blt.n	800537c <isContinuousCurvature+0xa4>
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <isContinuousCurvature+0xd0>)
 8005378:	4a0e      	ldr	r2, [pc, #56]	; (80053b4 <isContinuousCurvature+0xdc>)
 800537a:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 800537c:	f7fc fa66 	bl	800184c <getTheta10mm>
 8005380:	eef0 7a40 	vmov.f32	s15, s0
 8005384:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <isContinuousCurvature+0xc8>)
 8005386:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 800538a:	79fb      	ldrb	r3, [r7, #7]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	ecbd 8b02 	vpop	{d8}
 8005396:	bd80      	pop	{r7, pc}
 8005398:	47ae147b 	.word	0x47ae147b
 800539c:	3f947ae1 	.word	0x3f947ae1
 80053a0:	2001a584 	.word	0x2001a584
 80053a4:	2001a558 	.word	0x2001a558
 80053a8:	2001a588 	.word	0x2001a588
 80053ac:	42200000 	.word	0x42200000
 80053b0:	447a0000 	.word	0x447a0000
 80053b4:	447a0000 	.word	0x447a0000

080053b8 <isTargetDistance>:

bool isTargetDistance(float target){
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 80053c6:	f7fc f82d 	bl	8001424 <getDistance10mm>
 80053ca:	eeb0 7a40 	vmov.f32	s14, s0
 80053ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80053d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053da:	d801      	bhi.n	80053e0 <isTargetDistance+0x28>
		ret = true;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <running>:

void running(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	80fb      	strh	r3, [r7, #6]

	runningInit();
 80053f6:	f000 f9fd 	bl	80057f4 <runningInit>
	startLineTrace();
 80053fa:	f7fc fefd 	bl	80021f8 <startLineTrace>
	startVelocityControl();
 80053fe:	f7fe fa2b 	bl	8003858 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8005402:	4b73      	ldr	r3, [pc, #460]	; (80055d0 <running+0x1e4>)
 8005404:	edd3 7a00 	vldr	s15, [r3]
 8005408:	eeb0 0a67 	vmov.f32	s0, s15
 800540c:	f7fe f996 	bl	800373c <setTargetVelocity>

	while(goal_flag == false){
 8005410:	e0d2      	b.n	80055b8 <running+0x1cc>
		switch(pattern){
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	2b14      	cmp	r3, #20
 8005416:	f200 80c2 	bhi.w	800559e <running+0x1b2>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <running+0x34>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005475 	.word	0x08005475
 8005424:	0800559f 	.word	0x0800559f
 8005428:	0800559f 	.word	0x0800559f
 800542c:	0800559f 	.word	0x0800559f
 8005430:	0800559f 	.word	0x0800559f
 8005434:	080054c3 	.word	0x080054c3
 8005438:	0800559f 	.word	0x0800559f
 800543c:	0800559f 	.word	0x0800559f
 8005440:	0800559f 	.word	0x0800559f
 8005444:	0800559f 	.word	0x0800559f
 8005448:	080054d7 	.word	0x080054d7
 800544c:	0800559f 	.word	0x0800559f
 8005450:	0800559f 	.word	0x0800559f
 8005454:	0800559f 	.word	0x0800559f
 8005458:	0800559f 	.word	0x0800559f
 800545c:	0800559f 	.word	0x0800559f
 8005460:	0800559f 	.word	0x0800559f
 8005464:	0800559f 	.word	0x0800559f
 8005468:	0800559f 	.word	0x0800559f
 800546c:	0800559f 	.word	0x0800559f
 8005470:	08005573 	.word	0x08005573

				  case 0:
					  if(getSideSensorStatusR() == true){
 8005474:	f000 fc54 	bl	8005d20 <getSideSensorStatusR>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 808c 	beq.w	8005598 <running+0x1ac>
						  start_goal_line_cnt++;
 8005480:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <running+0x1e8>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b52      	ldr	r3, [pc, #328]	; (80055d4 <running+0x1e8>)
 800548a:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 800548c:	4b52      	ldr	r3, [pc, #328]	; (80055d8 <running+0x1ec>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d102      	bne.n	800549a <running+0xae>
 8005494:	f000 fa6c 	bl	8005970 <startLogging>
 8005498:	e00c      	b.n	80054b4 <running+0xc8>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <running+0x1ec>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d003      	beq.n	80054aa <running+0xbe>
 80054a2:	4b4d      	ldr	r3, [pc, #308]	; (80055d8 <running+0x1ec>)
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d102      	bne.n	80054b0 <running+0xc4>
 80054aa:	f000 fa95 	bl	80059d8 <startVelocityUpdate>
 80054ae:	e001      	b.n	80054b4 <running+0xc8>
						  else startTargetUpdate();
 80054b0:	f000 fa7a 	bl	80059a8 <startTargetUpdate>

						  clearGoalJudgeDistance();
 80054b4:	f7fb ff7e 	bl	80013b4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 80054b8:	f7fb ff8a 	bl	80013d0 <clearSideLineJudgeDistance>
						  pattern = 5;
 80054bc:	2305      	movs	r3, #5
 80054be:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 80054c0:	e06a      	b.n	8005598 <running+0x1ac>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 80054c2:	f000 fc2d 	bl	8005d20 <getSideSensorStatusR>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f083 0301 	eor.w	r3, r3, #1
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <running+0xea>
 80054d2:	230a      	movs	r3, #10
 80054d4:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 80054d6:	f000 fc17 	bl	8005d08 <getSideSensorStatusL>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <running+0xfe>
						  goal_judge_flag = false;
 80054e0:	4b3e      	ldr	r3, [pc, #248]	; (80055dc <running+0x1f0>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 80054e6:	f7fb ff65 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 80054ea:	4b3c      	ldr	r3, [pc, #240]	; (80055dc <running+0x1f0>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d015      	beq.n	8005524 <running+0x138>
 80054f8:	f000 fc12 	bl	8005d20 <getSideSensorStatusR>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <running+0x138>
 8005502:	f7fb ff0f 	bl	8001324 <getGoalJudgeDistance>
 8005506:	eeb0 7a40 	vmov.f32	s14, s0
 800550a:	eddf 7a35 	vldr	s15, [pc, #212]	; 80055e0 <running+0x1f4>
 800550e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005516:	db05      	blt.n	8005524 <running+0x138>
						  goal_judge_flag = true;
 8005518:	4b30      	ldr	r3, [pc, #192]	; (80055dc <running+0x1f0>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800551e:	f7fb ff49 	bl	80013b4 <clearGoalJudgeDistance>
 8005522:	e019      	b.n	8005558 <running+0x16c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8005524:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <running+0x1f0>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <running+0x16c>
 800552c:	f7fb fefa 	bl	8001324 <getGoalJudgeDistance>
 8005530:	eeb0 7a40 	vmov.f32	s14, s0
 8005534:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80055e0 <running+0x1f4>
 8005538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	db0a      	blt.n	8005558 <running+0x16c>
						  start_goal_line_cnt++;
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <running+0x1e8>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <running+0x1e8>)
 800554c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <running+0x1f0>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005554:	f7fb ff2e 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <running+0x1e8>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d91d      	bls.n	800559c <running+0x1b0>
						  stopLogging();
 8005560:	f000 fa16 	bl	8005990 <stopLogging>
						  stopVelocityUpdate();
 8005564:	f000 fa5a 	bl	8005a1c <stopVelocityUpdate>
						  stopTargetUpdate();
 8005568:	f000 fa2a 	bl	80059c0 <stopTargetUpdate>
						  pattern = 20;
 800556c:	2314      	movs	r3, #20
 800556e:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8005570:	e014      	b.n	800559c <running+0x1b0>

				  case 20:

					  setTargetVelocity(1.0);
 8005572:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005576:	f7fe f8e1 	bl	800373c <setTargetVelocity>
					  HAL_Delay(100);
 800557a:	2064      	movs	r0, #100	; 0x64
 800557c:	f001 f922 	bl	80067c4 <HAL_Delay>
					  setTargetVelocity(0);
 8005580:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80055e4 <running+0x1f8>
 8005584:	f7fe f8da 	bl	800373c <setTargetVelocity>
					  HAL_Delay(500);
 8005588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800558c:	f001 f91a 	bl	80067c4 <HAL_Delay>

					  goal_flag = true;
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <running+0x1fc>)
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]

					  break;
 8005596:	e002      	b.n	800559e <running+0x1b2>
					  break;
 8005598:	bf00      	nop
 800559a:	e000      	b.n	800559e <running+0x1b2>
					  break;
 800559c:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 800559e:	f7fc feb1 	bl	8002304 <getCouseOutFlag>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <running+0x1cc>
		{
			stopLogging();
 80055a8:	f000 f9f2 	bl	8005990 <stopLogging>
			stopVelocityUpdate();
 80055ac:	f000 fa36 	bl	8005a1c <stopVelocityUpdate>
			stopTargetUpdate();
 80055b0:	f000 fa06 	bl	80059c0 <stopTargetUpdate>
		    pattern = 20;
 80055b4:	2314      	movs	r3, #20
 80055b6:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <running+0x1fc>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f47f af25 	bne.w	8005412 <running+0x26>
	    }
	}
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	2001a560 	.word	0x2001a560
 80055d4:	2001a548 	.word	0x2001a548
 80055d8:	2001aab4 	.word	0x2001aab4
 80055dc:	2001a557 	.word	0x2001a557
 80055e0:	428c0000 	.word	0x428c0000
 80055e4:	00000000 	.word	0x00000000
 80055e8:	2001a556 	.word	0x2001a556

080055ec <runningFlip>:

void runningFlip()
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	if(run_flag == true){
 80055f0:	4b76      	ldr	r3, [pc, #472]	; (80057cc <runningFlip+0x1e0>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80e7 	beq.w	80057c8 <runningFlip+0x1dc>
		setLED('G');
 80055fa:	2047      	movs	r0, #71	; 0x47
 80055fc:	f7fc f95e 	bl	80018bc <setLED>
		updateTargetVelocity();//速度の更新
 8005600:	f000 fa18 	bl	8005a34 <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 8005604:	f7fe fabc 	bl	8003b80 <updateTargetpoint>

		if(isTargetDistance(30) == true){
 8005608:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800560c:	f7ff fed4 	bl	80053b8 <isTargetDistance>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <runningFlip+0x46>
			saveLog();
 8005616:	f000 f931 	bl	800587c <saveLog>

			if(isContinuousCurvature() == true){
 800561a:	f7ff fe5d 	bl	80052d8 <isContinuousCurvature>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8005624:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <runningFlip+0x1e4>)
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 800562a:	f7fb ff09 	bl	8001440 <clearDistance10mm>
			clearTheta10mm();
 800562e:	f7fc f91b 	bl	8001868 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8005632:	f7ff fe03 	bl	800523c <isCrossLine>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d026      	beq.n	800568a <runningFlip+0x9e>
 800563c:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <runningFlip+0x1e8>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01f      	beq.n	800568a <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 800564a:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <runningFlip+0x1e8>)
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005650:	4b5f      	ldr	r3, [pc, #380]	; (80057d0 <runningFlip+0x1e4>)
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005656:	f7fb fec9 	bl	80013ec <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 800565a:	f7fb fed5 	bl	8001408 <clearSideLineIgnoreDistance>

			if(mode == 1){
 800565e:	4b5e      	ldr	r3, [pc, #376]	; (80057d8 <runningFlip+0x1ec>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d10b      	bne.n	800567e <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 8005666:	4b5d      	ldr	r3, [pc, #372]	; (80057dc <runningFlip+0x1f0>)
 8005668:	2200      	movs	r2, #0
 800566a:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 800566c:	f7fb fe4c 	bl	8001308 <getTotalDistance>
 8005670:	eef0 7a40 	vmov.f32	s15, s0
 8005674:	eeb0 0a67 	vmov.f32	s0, s15
 8005678:	f7fd fcc2 	bl	8003000 <saveCross>
			if(mode == 1){
 800567c:	e017      	b.n	80056ae <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 800567e:	4b57      	ldr	r3, [pc, #348]	; (80057dc <runningFlip+0x1f0>)
 8005680:	2200      	movs	r2, #0
 8005682:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8005684:	f000 fa3c 	bl	8005b00 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 8005688:	e011      	b.n	80056ae <runningFlip+0xc2>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 800568a:	4b52      	ldr	r3, [pc, #328]	; (80057d4 <runningFlip+0x1e8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <runningFlip+0xc2>
 8005692:	f7fb fe73 	bl	800137c <getCrossLineIgnoreDistance>
 8005696:	eeb0 7a40 	vmov.f32	s14, s0
 800569a:	eddf 7a51 	vldr	s15, [pc, #324]	; 80057e0 <runningFlip+0x1f4>
 800569e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a6:	db02      	blt.n	80056ae <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 80056a8:	4b4a      	ldr	r3, [pc, #296]	; (80057d4 <runningFlip+0x1e8>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 80056ae:	f000 fb37 	bl	8005d20 <getSideSensorStatusR>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <runningFlip+0xd6>
			side_line_judge_flag = false;
 80056b8:	4b4a      	ldr	r3, [pc, #296]	; (80057e4 <runningFlip+0x1f8>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80056be:	f7fb fe87 	bl	80013d0 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 80056c2:	4b48      	ldr	r3, [pc, #288]	; (80057e4 <runningFlip+0x1f8>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f083 0301 	eor.w	r3, r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <runningFlip+0x110>
 80056d0:	f000 fb1a 	bl	8005d08 <getSideSensorStatusL>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <runningFlip+0x110>
 80056da:	f7fb fe31 	bl	8001340 <getSideLineJudgeDistance>
 80056de:	eeb0 7a40 	vmov.f32	s14, s0
 80056e2:	eddf 7a41 	vldr	s15, [pc, #260]	; 80057e8 <runningFlip+0x1fc>
 80056e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	db05      	blt.n	80056fc <runningFlip+0x110>
			side_line_judge_flag = true;
 80056f0:	4b3c      	ldr	r3, [pc, #240]	; (80057e4 <runningFlip+0x1f8>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80056f6:	f7fb fe6b 	bl	80013d0 <clearSideLineJudgeDistance>
 80056fa:	e02f      	b.n	800575c <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 80056fc:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <runningFlip+0x1f8>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02b      	beq.n	800575c <runningFlip+0x170>
 8005704:	f7fb fe1c 	bl	8001340 <getSideLineJudgeDistance>
 8005708:	eeb0 7a40 	vmov.f32	s14, s0
 800570c:	eddf 7a36 	vldr	s15, [pc, #216]	; 80057e8 <runningFlip+0x1fc>
 8005710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	db20      	blt.n	800575c <runningFlip+0x170>
			clearSideLineJudgeDistance();
 800571a:	f7fb fe59 	bl	80013d0 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 800571e:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <runningFlip+0x1f8>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8005724:	4b2a      	ldr	r3, [pc, #168]	; (80057d0 <runningFlip+0x1e4>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <runningFlip+0x170>
				continuous_curve_flag = false;
 800572c:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <runningFlip+0x1e4>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <runningFlip+0x200>)
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8005738:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <runningFlip+0x1ec>)
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10b      	bne.n	8005758 <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 8005740:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <runningFlip+0x204>)
 8005742:	2200      	movs	r2, #0
 8005744:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8005746:	f7fb fddf 	bl	8001308 <getTotalDistance>
 800574a:	eef0 7a40 	vmov.f32	s15, s0
 800574e:	eeb0 0a67 	vmov.f32	s0, s15
 8005752:	f7fd fc6d 	bl	8003030 <saveSide>
 8005756:	e001      	b.n	800575c <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8005758:	f000 fa28 	bl	8005bac <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 800575c:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <runningFlip+0x1f0>)
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <runningFlip+0x1f0>)
 8005766:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8005768:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <runningFlip+0x204>)
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <runningFlip+0x204>)
 8005772:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8005774:	4b19      	ldr	r3, [pc, #100]	; (80057dc <runningFlip+0x1f0>)
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	f242 720f 	movw	r2, #9999	; 0x270f
 800577c:	4293      	cmp	r3, r2
 800577e:	d903      	bls.n	8005788 <runningFlip+0x19c>
 8005780:	4b16      	ldr	r3, [pc, #88]	; (80057dc <runningFlip+0x1f0>)
 8005782:	f242 7210 	movw	r2, #10000	; 0x2710
 8005786:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 8005788:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <runningFlip+0x204>)
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005790:	4293      	cmp	r3, r2
 8005792:	d903      	bls.n	800579c <runningFlip+0x1b0>
 8005794:	4b16      	ldr	r3, [pc, #88]	; (80057f0 <runningFlip+0x204>)
 8005796:	f242 7210 	movw	r2, #10000	; 0x2710
 800579a:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <runningFlip+0x204>)
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	2b96      	cmp	r3, #150	; 0x96
 80057a2:	d803      	bhi.n	80057ac <runningFlip+0x1c0>
 80057a4:	2047      	movs	r0, #71	; 0x47
 80057a6:	f7fc f957 	bl	8001a58 <setLED2>
 80057aa:	e002      	b.n	80057b2 <runningFlip+0x1c6>
	    else setLED2('N');
 80057ac:	204e      	movs	r0, #78	; 0x4e
 80057ae:	f7fc f953 	bl	8001a58 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <runningFlip+0x204>)
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	2b96      	cmp	r3, #150	; 0x96
 80057b8:	d803      	bhi.n	80057c2 <runningFlip+0x1d6>
 80057ba:	2042      	movs	r0, #66	; 0x42
 80057bc:	f7fc f87e 	bl	80018bc <setLED>
	    else setLED('G');
	}
}
 80057c0:	e002      	b.n	80057c8 <runningFlip+0x1dc>
	    else setLED('G');
 80057c2:	2047      	movs	r0, #71	; 0x47
 80057c4:	f7fc f87a 	bl	80018bc <setLED>
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2001a55a 	.word	0x2001a55a
 80057d0:	2001a559 	.word	0x2001a559
 80057d4:	2001a552 	.word	0x2001a552
 80057d8:	2001aab4 	.word	0x2001aab4
 80057dc:	2001a54e 	.word	0x2001a54e
 80057e0:	42480000 	.word	0x42480000
 80057e4:	2001a553 	.word	0x2001a553
 80057e8:	42700000 	.word	0x42700000
 80057ec:	2001a558 	.word	0x2001a558
 80057f0:	2001a550 	.word	0x2001a550

080057f4 <runningInit>:

void runningInit()
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
	if(mode == 1){
 80057f8:	4b18      	ldr	r3, [pc, #96]	; (800585c <runningInit+0x68>)
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d105      	bne.n	800580c <runningInit+0x18>
		setLED('W');
 8005800:	2057      	movs	r0, #87	; 0x57
 8005802:	f7fc f85b 	bl	80018bc <setLED>
		ereaseLog();
 8005806:	f7fd fc43 	bl	8003090 <ereaseLog>
 800580a:	e00b      	b.n	8005824 <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 800580c:	f7fd fc7c 	bl	8003108 <ereaseDebugLog>
		loadDistance();
 8005810:	f7fd fcba 	bl	8003188 <loadDistance>
		loadTheta();
 8005814:	f7fd fcf6 	bl	8003204 <loadTheta>
		loadCross();
 8005818:	f7fd fd32 	bl	8003280 <loadCross>
		loadSide();
 800581c:	f7fd fd6e 	bl	80032fc <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 8005820:	f7fe f844 	bl	80038ac <CreateXYcoordinates>
	}

	clearCrossLineIgnoreDistance();
 8005824:	f7fb fde2 	bl	80013ec <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005828:	f7fb fdee 	bl	8001408 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <runningInit+0x6c>)
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <runningInit+0x70>)
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <runningInit+0x74>)
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <runningInit+0x78>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <runningInit+0x7c>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <runningInit+0x80>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <runningInit+0x84>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	2001aab4 	.word	0x2001aab4
 8005860:	2001a548 	.word	0x2001a548
 8005864:	2001a552 	.word	0x2001a552
 8005868:	2001a553 	.word	0x2001a553
 800586c:	2001a557 	.word	0x2001a557
 8005870:	2001a558 	.word	0x2001a558
 8005874:	2001a559 	.word	0x2001a559
 8005878:	2001a55a 	.word	0x2001a55a

0800587c <saveLog>:

void saveLog(){
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 8005880:	4b35      	ldr	r3, [pc, #212]	; (8005958 <saveLog+0xdc>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8005888:	f7fb fdcc 	bl	8001424 <getDistance10mm>
 800588c:	eef0 7a40 	vmov.f32	s15, s0
 8005890:	eeb0 0a67 	vmov.f32	s0, s15
 8005894:	f7fd fb84 	bl	8002fa0 <saveDistance>
		saveTheta(getTheta10mm());
 8005898:	f7fb ffd8 	bl	800184c <getTheta10mm>
 800589c:	eef0 7a40 	vmov.f32	s15, s0
 80058a0:	eeb0 0a67 	vmov.f32	s0, s15
 80058a4:	f7fd fb94 	bl	8002fd0 <saveTheta>
		saveDebug(debug_now_X);//現在のx座標
		saveDebug(debug_now_Y);//現在のy座標
		saveDebug(debug_now_Theta);//現在の車体角速度
		Error_XY_Debug(debug_now_X, debug_now_Y, debug_now_Theta);//誤差の計算関数
	}
}
 80058a8:	e053      	b.n	8005952 <saveLog+0xd6>
	else if(velocity_update_flag == true){
 80058aa:	4b2c      	ldr	r3, [pc, #176]	; (800595c <saveLog+0xe0>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <saveLog+0x58>
		saveDebug(getTargetVelocity());
 80058b2:	f7fd ffc3 	bl	800383c <getTargetVelocity>
 80058b6:	eef0 7a40 	vmov.f32	s15, s0
 80058ba:	eeb0 0a67 	vmov.f32	s0, s15
 80058be:	f7fd fbcf 	bl	8003060 <saveDebug>
		saveDebug(getCurrentVelocity());
 80058c2:	f7fd ff7d 	bl	80037c0 <getCurrentVelocity>
 80058c6:	eef0 7a40 	vmov.f32	s15, s0
 80058ca:	eeb0 0a67 	vmov.f32	s0, s15
 80058ce:	f7fd fbc7 	bl	8003060 <saveDebug>
}
 80058d2:	e03e      	b.n	8005952 <saveLog+0xd6>
	else if(target_update_flag == true){
 80058d4:	4b22      	ldr	r3, [pc, #136]	; (8005960 <saveLog+0xe4>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03a      	beq.n	8005952 <saveLog+0xd6>
		debug_now_X = CurrentXcoordinates();
 80058dc:	f7fe f8a8 	bl	8003a30 <CurrentXcoordinates>
 80058e0:	eef0 7a40 	vmov.f32	s15, s0
 80058e4:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <saveLog+0xe8>)
 80058e6:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Y = CurrentYcoordinates();
 80058ea:	f7fe f8f5 	bl	8003ad8 <CurrentYcoordinates>
 80058ee:	eef0 7a40 	vmov.f32	s15, s0
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <saveLog+0xec>)
 80058f4:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Theta = getaddTheta();
 80058f8:	f7fb ffc4 	bl	8001884 <getaddTheta>
 80058fc:	eef0 7a40 	vmov.f32	s15, s0
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <saveLog+0xf0>)
 8005902:	edc3 7a00 	vstr	s15, [r3]
		saveDebug(debug_now_X);//現在のx座標
 8005906:	4b17      	ldr	r3, [pc, #92]	; (8005964 <saveLog+0xe8>)
 8005908:	edd3 7a00 	vldr	s15, [r3]
 800590c:	eeb0 0a67 	vmov.f32	s0, s15
 8005910:	f7fd fba6 	bl	8003060 <saveDebug>
		saveDebug(debug_now_Y);//現在のy座標
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <saveLog+0xec>)
 8005916:	edd3 7a00 	vldr	s15, [r3]
 800591a:	eeb0 0a67 	vmov.f32	s0, s15
 800591e:	f7fd fb9f 	bl	8003060 <saveDebug>
		saveDebug(debug_now_Theta);//現在の車体角速度
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <saveLog+0xf0>)
 8005924:	edd3 7a00 	vldr	s15, [r3]
 8005928:	eeb0 0a67 	vmov.f32	s0, s15
 800592c:	f7fd fb98 	bl	8003060 <saveDebug>
		Error_XY_Debug(debug_now_X, debug_now_Y, debug_now_Theta);//誤差の計算関数
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <saveLog+0xe8>)
 8005932:	edd3 7a00 	vldr	s15, [r3]
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <saveLog+0xec>)
 8005938:	ed93 7a00 	vldr	s14, [r3]
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <saveLog+0xf0>)
 800593e:	edd3 6a00 	vldr	s13, [r3]
 8005942:	eeb0 1a66 	vmov.f32	s2, s13
 8005946:	eef0 0a47 	vmov.f32	s1, s14
 800594a:	eeb0 0a67 	vmov.f32	s0, s15
 800594e:	f7fe f969 	bl	8003c24 <Error_XY_Debug>
}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2001a55b 	.word	0x2001a55b
 800595c:	2001a55d 	.word	0x2001a55d
 8005960:	2001a55c 	.word	0x2001a55c
 8005964:	2001a574 	.word	0x2001a574
 8005968:	2001a578 	.word	0x2001a578
 800596c:	2001a57c 	.word	0x2001a57c

08005970 <startLogging>:

void startLogging(){
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005974:	f7fb fd64 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 8005978:	f7fb ff76 	bl	8001868 <clearTheta10mm>
	clearTotalDistance();
 800597c:	f7fb fd0c 	bl	8001398 <clearTotalDistance>
	logging_flag = true;
 8005980:	4b02      	ldr	r3, [pc, #8]	; (800598c <startLogging+0x1c>)
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	2001a55b 	.word	0x2001a55b

08005990 <stopLogging>:

void stopLogging()
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
	logging_flag = false;
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <stopLogging+0x14>)
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	2001a55b 	.word	0x2001a55b

080059a8 <startTargetUpdate>:

void startTargetUpdate()
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
	clearaddTheta();
 80059ac:	f7fb ff78 	bl	80018a0 <clearaddTheta>
	target_update_flag = true;
 80059b0:	4b02      	ldr	r3, [pc, #8]	; (80059bc <startTargetUpdate+0x14>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
}
 80059b6:	bf00      	nop
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	2001a55c 	.word	0x2001a55c

080059c0 <stopTargetUpdate>:

void stopTargetUpdate()
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
	target_update_flag = false;
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <stopTargetUpdate+0x14>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	2001a55c 	.word	0x2001a55c

080059d8 <startVelocityUpdate>:

void startVelocityUpdate(){
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80059dc:	f7fb fd30 	bl	8001440 <clearDistance10mm>
	clearTotalDistance();
 80059e0:	f7fb fcda 	bl	8001398 <clearTotalDistance>
	velocity_table_idx = 0;
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <startVelocityUpdate+0x30>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <startVelocityUpdate+0x34>)
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <startVelocityUpdate+0x38>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <startVelocityUpdate+0x3c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <startVelocityUpdate+0x40>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	801a      	strh	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	2001aab6 	.word	0x2001aab6
 8005a0c:	2001aab0 	.word	0x2001aab0
 8005a10:	2001a55d 	.word	0x2001a55d
 8005a14:	2001a54a 	.word	0x2001a54a
 8005a18:	2001a54c 	.word	0x2001a54c

08005a1c <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <stopVelocityUpdate+0x14>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
}
 8005a26:	bf00      	nop
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	2001a55d 	.word	0x2001a55d

08005a34 <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005a38:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <updateTargetVelocity+0xb8>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d053      	beq.n	8005ae8 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 8005a40:	f7fb fc62 	bl	8001308 <getTotalDistance>
 8005a44:	eeb0 7a40 	vmov.f32	s14, s0
 8005a48:	4b29      	ldr	r3, [pc, #164]	; (8005af0 <updateTargetVelocity+0xbc>)
 8005a4a:	edd3 7a00 	vldr	s15, [r3]
 8005a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a56:	db14      	blt.n	8005a82 <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005a58:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fd fcdd 	bl	800341c <getDistanceLog>
 8005a62:	eeb0 7a40 	vmov.f32	s14, s0
 8005a66:	4b22      	ldr	r3, [pc, #136]	; (8005af0 <updateTargetVelocity+0xbc>)
 8005a68:	edd3 7a00 	vldr	s15, [r3]
 8005a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a70:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <updateTargetVelocity+0xbc>)
 8005a72:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005a76:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005a80:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005a82:	f7fd fb51 	bl	8003128 <getDistanceLogSize>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d806      	bhi.n	8005aa0 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005a92:	f7fd fb49 	bl	8003128 <getDistanceLogSize>
 8005a96:	4603      	mov	r3, r0
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005a9e:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <updateTargetVelocity+0xc4>)
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	edd3 7a00 	vldr	s15, [r3]
 8005aae:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab2:	f7fd fe43 	bl	800373c <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <updateTargetVelocity+0xc4>)
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	ed93 7a00 	vldr	s14, [r3]
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <updateTargetVelocity+0xc8>)
 8005ac6:	edd3 7a00 	vldr	s15, [r3]
 8005aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	d501      	bpl.n	8005ad8 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8005ad4:	f7fd fede 	bl	8003894 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <updateTargetVelocity+0xc0>)
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <updateTargetVelocity+0xc4>)
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a05      	ldr	r2, [pc, #20]	; (8005afc <updateTargetVelocity+0xc8>)
 8005ae6:	6013      	str	r3, [r2, #0]
	}
}
 8005ae8:	bf00      	nop
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	2001a55d 	.word	0x2001a55d
 8005af0:	2001aab0 	.word	0x2001aab0
 8005af4:	2001aab6 	.word	0x2001aab6
 8005af8:	20018608 	.word	0x20018608
 8005afc:	2001a58c 	.word	0x2001a58c

08005b00 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005b06:	e03f      	b.n	8005b88 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005b08:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd fc9b 	bl	8003448 <getCrossLog>
 8005b12:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005b16:	f7fb fbf7 	bl	8001308 <getTotalDistance>
 8005b1a:	eeb0 7a40 	vmov.f32	s14, s0
 8005b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b26:	eef0 7ae7 	vabs.f32	s15, s15
 8005b2a:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005b2e:	edd7 7a00 	vldr	s15, [r7]
 8005b32:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005ba4 <correctionTotalDistanceFromCrossLine+0xa4>
 8005b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	d80d      	bhi.n	8005b5c <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005b46:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b4a:	f7fb fc07 	bl	800135c <setTotalDistance>
			cross_line_idx++;
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b58:	801a      	strh	r2, [r3, #0]
			break;
 8005b5a:	e01d      	b.n	8005b98 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b66:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005b68:	f7fd faea 	bl	8003140 <getCrossLogSize>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d807      	bhi.n	8005b88 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005b78:	f7fd fae2 	bl	8003140 <getCrossLogSize>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b84:	801a      	strh	r2, [r3, #0]
			break;
 8005b86:	e007      	b.n	8005b98 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005b88:	f7fd fada 	bl	8003140 <getCrossLogSize>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d2b7      	bcs.n	8005b08 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	2001a54a 	.word	0x2001a54a
 8005ba4:	437a0000 	.word	0x437a0000
 8005ba8:	2001a54e 	.word	0x2001a54e

08005bac <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005bb2:	e03f      	b.n	8005c34 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd fc5b 	bl	8003474 <getSideLog>
 8005bbe:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005bc2:	f7fb fba1 	bl	8001308 <getTotalDistance>
 8005bc6:	eeb0 7a40 	vmov.f32	s14, s0
 8005bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bd2:	eef0 7ae7 	vabs.f32	s15, s15
 8005bd6:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005bda:	edd7 7a00 	vldr	s15, [r7]
 8005bde:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c50 <correctionTotalDistanceFromSideLine+0xa4>
 8005be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	d80d      	bhi.n	8005c08 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <correctionTotalDistanceFromSideLine+0xa8>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005bf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bf6:	f7fb fbb1 	bl	800135c <setTotalDistance>
			side_line_idx++;
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c04:	801a      	strh	r2, [r3, #0]
			break;
 8005c06:	e01d      	b.n	8005c44 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c12:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005c14:	f7fd faa0 	bl	8003158 <getSideLogSize>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d807      	bhi.n	8005c34 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005c24:	f7fd fa98 	bl	8003158 <getSideLogSize>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c30:	801a      	strh	r2, [r3, #0]
			break;
 8005c32:	e007      	b.n	8005c44 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005c34:	f7fd fa90 	bl	8003158 <getSideLogSize>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d2b7      	bcs.n	8005bb4 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2001a54c 	.word	0x2001a54c
 8005c50:	437a0000 	.word	0x437a0000
 8005c54:	2001a550 	.word	0x2001a550

08005c58 <getgoalStatus>:
		th = th + temp_theta;
	}
}
*/
bool getgoalStatus()
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
	return goal_flag;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <getgoalStatus+0x14>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	2001a556 	.word	0x2001a556

08005c70 <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
	return target_update_flag;
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <getTargetUpdateflag+0x14>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	2001a55c 	.word	0x2001a55c

08005c88 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c92:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005c96:	4a06      	ldr	r2, [pc, #24]	; (8005cb0 <setVelocityRange+0x28>)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005c9c:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <setVelocityRange+0x2c>)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6013      	str	r3, [r2, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	2001a560 	.word	0x2001a560
 8005cb4:	2001a564 	.word	0x2001a564

08005cb8 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005cc2:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005cc6:	4a06      	ldr	r2, [pc, #24]	; (8005ce0 <setAccDec+0x28>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005ccc:	4a05      	ldr	r2, [pc, #20]	; (8005ce4 <setAccDec+0x2c>)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6013      	str	r3, [r2, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	2001a568 	.word	0x2001a568
 8005ce4:	2001a56c 	.word	0x2001a56c

08005ce8 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005cf2:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <setStraightRadius+0x1c>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	2001a570 	.word	0x2001a570

08005d08 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <getSideSensorStatusL+0x14>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2001a554 	.word	0x2001a554

08005d20 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <getSideSensorStatusR+0x14>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2001a555 	.word	0x2001a555

08005d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <HAL_MspInit+0x4c>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	4a0f      	ldr	r2, [pc, #60]	; (8005d84 <HAL_MspInit+0x4c>)
 8005d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <HAL_MspInit+0x4c>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <HAL_MspInit+0x4c>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <HAL_MspInit+0x4c>)
 8005d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6413      	str	r3, [r2, #64]	; 0x40
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <HAL_MspInit+0x4c>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800

08005d88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08e      	sub	sp, #56	; 0x38
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a79      	ldr	r2, [pc, #484]	; (8005f8c <HAL_ADC_MspInit+0x204>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d158      	bne.n	8005e5c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	4b78      	ldr	r3, [pc, #480]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	4a77      	ldr	r2, [pc, #476]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dba:	4b75      	ldr	r3, [pc, #468]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	4b71      	ldr	r3, [pc, #452]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	4a70      	ldr	r2, [pc, #448]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005dd0:	f043 0304 	orr.w	r3, r3, #4
 8005dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dd6:	4b6e      	ldr	r3, [pc, #440]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005de2:	230e      	movs	r3, #14
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005de6:	2303      	movs	r3, #3
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df2:	4619      	mov	r1, r3
 8005df4:	4867      	ldr	r0, [pc, #412]	; (8005f94 <HAL_ADC_MspInit+0x20c>)
 8005df6:	f001 ff65 	bl	8007cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005dfa:	4b67      	ldr	r3, [pc, #412]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005dfc:	4a67      	ldr	r2, [pc, #412]	; (8005f9c <HAL_ADC_MspInit+0x214>)
 8005dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005e00:	4b65      	ldr	r3, [pc, #404]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e06:	4b64      	ldr	r3, [pc, #400]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e0c:	4b62      	ldr	r3, [pc, #392]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e12:	4b61      	ldr	r3, [pc, #388]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e1a:	4b5f      	ldr	r3, [pc, #380]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e22:	4b5d      	ldr	r3, [pc, #372]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e32:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e38:	4b57      	ldr	r3, [pc, #348]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e3e:	4856      	ldr	r0, [pc, #344]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e40:	f001 f9e8 	bl	8007214 <HAL_DMA_Init>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005e4a:	f7ff f8cf 	bl	8004fec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a51      	ldr	r2, [pc, #324]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
 8005e54:	4a50      	ldr	r2, [pc, #320]	; (8005f98 <HAL_ADC_MspInit+0x210>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005e5a:	e092      	b.n	8005f82 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a4f      	ldr	r2, [pc, #316]	; (8005fa0 <HAL_ADC_MspInit+0x218>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f040 808d 	bne.w	8005f82 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	4b48      	ldr	r3, [pc, #288]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	4a47      	ldr	r2, [pc, #284]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e76:	6453      	str	r3, [r2, #68]	; 0x44
 8005e78:	4b45      	ldr	r3, [pc, #276]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	4a40      	ldr	r2, [pc, #256]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6313      	str	r3, [r2, #48]	; 0x30
 8005e94:	4b3e      	ldr	r3, [pc, #248]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	4b3a      	ldr	r3, [pc, #232]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	4a39      	ldr	r2, [pc, #228]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005eaa:	f043 0304 	orr.w	r3, r3, #4
 8005eae:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb0:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	4a32      	ldr	r2, [pc, #200]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005ec6:	f043 0302 	orr.w	r3, r3, #2
 8005eca:	6313      	str	r3, [r2, #48]	; 0x30
 8005ecc:	4b30      	ldr	r3, [pc, #192]	; (8005f90 <HAL_ADC_MspInit+0x208>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005ed8:	23ff      	movs	r3, #255	; 0xff
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005edc:	2303      	movs	r3, #3
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee8:	4619      	mov	r1, r3
 8005eea:	482e      	ldr	r0, [pc, #184]	; (8005fa4 <HAL_ADC_MspInit+0x21c>)
 8005eec:	f001 feea 	bl	8007cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ef0:	2330      	movs	r3, #48	; 0x30
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f00:	4619      	mov	r1, r3
 8005f02:	4824      	ldr	r0, [pc, #144]	; (8005f94 <HAL_ADC_MspInit+0x20c>)
 8005f04:	f001 fede 	bl	8007cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4823      	ldr	r0, [pc, #140]	; (8005fa8 <HAL_ADC_MspInit+0x220>)
 8005f1c:	f001 fed2 	bl	8007cc4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005f20:	4b22      	ldr	r3, [pc, #136]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f22:	4a23      	ldr	r2, [pc, #140]	; (8005fb0 <HAL_ADC_MspInit+0x228>)
 8005f24:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005f26:	4b21      	ldr	r3, [pc, #132]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f2c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f2e:	4b1f      	ldr	r3, [pc, #124]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f40:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f42:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f48:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f4a:	4b18      	ldr	r3, [pc, #96]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f50:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f58:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005f5a:	4b14      	ldr	r3, [pc, #80]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f60:	4b12      	ldr	r3, [pc, #72]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005f66:	4811      	ldr	r0, [pc, #68]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f68:	f001 f954 	bl	8007214 <HAL_DMA_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005f72:	f7ff f83b 	bl	8004fec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <HAL_ADC_MspInit+0x224>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005f82:	bf00      	nop
 8005f84:	3738      	adds	r7, #56	; 0x38
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40012000 	.word	0x40012000
 8005f90:	40023800 	.word	0x40023800
 8005f94:	40020800 	.word	0x40020800
 8005f98:	2001a920 	.word	0x2001a920
 8005f9c:	40026410 	.word	0x40026410
 8005fa0:	40012100 	.word	0x40012100
 8005fa4:	40020000 	.word	0x40020000
 8005fa8:	40020400 	.word	0x40020400
 8005fac:	2001aa08 	.word	0x2001aa08
 8005fb0:	40026440 	.word	0x40026440

08005fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
 8005fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <HAL_I2C_MspInit+0x84>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d12c      	bne.n	8006030 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	4b18      	ldr	r3, [pc, #96]	; (800603c <HAL_I2C_MspInit+0x88>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_I2C_MspInit+0x88>)
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe6:	4b15      	ldr	r3, [pc, #84]	; (800603c <HAL_I2C_MspInit+0x88>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ff8:	2312      	movs	r3, #18
 8005ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006004:	2304      	movs	r3, #4
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4619      	mov	r1, r3
 800600e:	480c      	ldr	r0, [pc, #48]	; (8006040 <HAL_I2C_MspInit+0x8c>)
 8006010:	f001 fe58 	bl	8007cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_I2C_MspInit+0x88>)
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_I2C_MspInit+0x88>)
 800601e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006022:	6413      	str	r3, [r2, #64]	; 0x40
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_I2C_MspInit+0x88>)
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006030:	bf00      	nop
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40005400 	.word	0x40005400
 800603c:	40023800 	.word	0x40023800
 8006040:	40020400 	.word	0x40020400

08006044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	; 0x28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800604c:	f107 0314 	add.w	r3, r7, #20
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_SPI_MspInit+0x84>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d12c      	bne.n	80060c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	4b18      	ldr	r3, [pc, #96]	; (80060cc <HAL_SPI_MspInit+0x88>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_SPI_MspInit+0x88>)
 8006070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006074:	6413      	str	r3, [r2, #64]	; 0x40
 8006076:	4b15      	ldr	r3, [pc, #84]	; (80060cc <HAL_SPI_MspInit+0x88>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <HAL_SPI_MspInit+0x88>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	4a10      	ldr	r2, [pc, #64]	; (80060cc <HAL_SPI_MspInit+0x88>)
 800608c:	f043 0304 	orr.w	r3, r3, #4
 8006090:	6313      	str	r3, [r2, #48]	; 0x30
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_SPI_MspInit+0x88>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800609e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80060a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a4:	2302      	movs	r3, #2
 80060a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ac:	2303      	movs	r3, #3
 80060ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80060b0:	2306      	movs	r3, #6
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	4619      	mov	r1, r3
 80060ba:	4805      	ldr	r0, [pc, #20]	; (80060d0 <HAL_SPI_MspInit+0x8c>)
 80060bc:	f001 fe02 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80060c0:	bf00      	nop
 80060c2:	3728      	adds	r7, #40	; 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40003c00 	.word	0x40003c00
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020800 	.word	0x40020800

080060d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a15      	ldr	r2, [pc, #84]	; (8006138 <HAL_TIM_PWM_MspInit+0x64>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d10e      	bne.n	8006104 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <HAL_TIM_PWM_MspInit+0x68>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	4a13      	ldr	r2, [pc, #76]	; (800613c <HAL_TIM_PWM_MspInit+0x68>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6453      	str	r3, [r2, #68]	; 0x44
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_TIM_PWM_MspInit+0x68>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006102:	e012      	b.n	800612a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <HAL_TIM_PWM_MspInit+0x6c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10d      	bne.n	800612a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <HAL_TIM_PWM_MspInit+0x68>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	4a09      	ldr	r2, [pc, #36]	; (800613c <HAL_TIM_PWM_MspInit+0x68>)
 8006118:	f043 0302 	orr.w	r3, r3, #2
 800611c:	6453      	str	r3, [r2, #68]	; 0x44
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <HAL_TIM_PWM_MspInit+0x68>)
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	68bb      	ldr	r3, [r7, #8]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40023800 	.word	0x40023800
 8006140:	40010400 	.word	0x40010400

08006144 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800614c:	f107 031c 	add.w	r3, r7, #28
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a32      	ldr	r2, [pc, #200]	; (800622c <HAL_TIM_Encoder_MspInit+0xe8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d12c      	bne.n	80061c0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	4b31      	ldr	r3, [pc, #196]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	4a30      	ldr	r2, [pc, #192]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	6413      	str	r3, [r2, #64]	; 0x40
 8006176:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	4b2a      	ldr	r3, [pc, #168]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	4a29      	ldr	r2, [pc, #164]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 800618c:	f043 0302 	orr.w	r3, r3, #2
 8006190:	6313      	str	r3, [r2, #48]	; 0x30
 8006192:	4b27      	ldr	r3, [pc, #156]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800619e:	2330      	movs	r3, #48	; 0x30
 80061a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a2:	2302      	movs	r3, #2
 80061a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061aa:	2300      	movs	r3, #0
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80061ae:	2302      	movs	r3, #2
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061b2:	f107 031c 	add.w	r3, r7, #28
 80061b6:	4619      	mov	r1, r3
 80061b8:	481e      	ldr	r0, [pc, #120]	; (8006234 <HAL_TIM_Encoder_MspInit+0xf0>)
 80061ba:	f001 fd83 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80061be:	e030      	b.n	8006222 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <HAL_TIM_Encoder_MspInit+0xf4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d12b      	bne.n	8006222 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	4b18      	ldr	r3, [pc, #96]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	4a17      	ldr	r2, [pc, #92]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 80061d4:	f043 0304 	orr.w	r3, r3, #4
 80061d8:	6413      	str	r3, [r2, #64]	; 0x40
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	4b11      	ldr	r3, [pc, #68]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	4a10      	ldr	r2, [pc, #64]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 80061f0:	f043 0302 	orr.w	r3, r3, #2
 80061f4:	6313      	str	r3, [r2, #48]	; 0x30
 80061f6:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <HAL_TIM_Encoder_MspInit+0xec>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006202:	23c0      	movs	r3, #192	; 0xc0
 8006204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	2302      	movs	r3, #2
 8006208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620a:	2300      	movs	r3, #0
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620e:	2300      	movs	r3, #0
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006212:	2302      	movs	r3, #2
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006216:	f107 031c 	add.w	r3, r7, #28
 800621a:	4619      	mov	r1, r3
 800621c:	4805      	ldr	r0, [pc, #20]	; (8006234 <HAL_TIM_Encoder_MspInit+0xf0>)
 800621e:	f001 fd51 	bl	8007cc4 <HAL_GPIO_Init>
}
 8006222:	bf00      	nop
 8006224:	3730      	adds	r7, #48	; 0x30
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40000400 	.word	0x40000400
 8006230:	40023800 	.word	0x40023800
 8006234:	40020400 	.word	0x40020400
 8006238:	40000800 	.word	0x40000800

0800623c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <HAL_TIM_Base_MspInit+0x80>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d116      	bne.n	800627c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <HAL_TIM_Base_MspInit+0x84>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	4a1a      	ldr	r2, [pc, #104]	; (80062c0 <HAL_TIM_Base_MspInit+0x84>)
 8006258:	f043 0310 	orr.w	r3, r3, #16
 800625c:	6413      	str	r3, [r2, #64]	; 0x40
 800625e:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <HAL_TIM_Base_MspInit+0x84>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800626a:	2200      	movs	r2, #0
 800626c:	2101      	movs	r1, #1
 800626e:	2036      	movs	r0, #54	; 0x36
 8006270:	f000 ff99 	bl	80071a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006274:	2036      	movs	r0, #54	; 0x36
 8006276:	f000 ffb2 	bl	80071de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800627a:	e01a      	b.n	80062b2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <HAL_TIM_Base_MspInit+0x88>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d115      	bne.n	80062b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <HAL_TIM_Base_MspInit+0x84>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a0c      	ldr	r2, [pc, #48]	; (80062c0 <HAL_TIM_Base_MspInit+0x84>)
 8006290:	f043 0320 	orr.w	r3, r3, #32
 8006294:	6413      	str	r3, [r2, #64]	; 0x40
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_TIM_Base_MspInit+0x84>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	2037      	movs	r0, #55	; 0x37
 80062a8:	f000 ff7d 	bl	80071a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80062ac:	2037      	movs	r0, #55	; 0x37
 80062ae:	f000 ff96 	bl	80071de <HAL_NVIC_EnableIRQ>
}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40001000 	.word	0x40001000
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40001400 	.word	0x40001400

080062c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_TIM_MspPostInit+0xb4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d11f      	bne.n	800632a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <HAL_TIM_MspPostInit+0xb8>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	4a23      	ldr	r2, [pc, #140]	; (8006380 <HAL_TIM_MspPostInit+0xb8>)
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	6313      	str	r3, [r2, #48]	; 0x30
 80062fa:	4b21      	ldr	r3, [pc, #132]	; (8006380 <HAL_TIM_MspPostInit+0xb8>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800630a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800630c:	2302      	movs	r3, #2
 800630e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006310:	2300      	movs	r3, #0
 8006312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006314:	2300      	movs	r3, #0
 8006316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006318:	2301      	movs	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	4619      	mov	r1, r3
 8006322:	4818      	ldr	r0, [pc, #96]	; (8006384 <HAL_TIM_MspPostInit+0xbc>)
 8006324:	f001 fcce 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006328:	e023      	b.n	8006372 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a16      	ldr	r2, [pc, #88]	; (8006388 <HAL_TIM_MspPostInit+0xc0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d11e      	bne.n	8006372 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	4b11      	ldr	r3, [pc, #68]	; (8006380 <HAL_TIM_MspPostInit+0xb8>)
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	4a10      	ldr	r2, [pc, #64]	; (8006380 <HAL_TIM_MspPostInit+0xb8>)
 800633e:	f043 0304 	orr.w	r3, r3, #4
 8006342:	6313      	str	r3, [r2, #48]	; 0x30
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <HAL_TIM_MspPostInit+0xb8>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8006350:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006356:	2302      	movs	r3, #2
 8006358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006362:	2303      	movs	r3, #3
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006366:	f107 0314 	add.w	r3, r7, #20
 800636a:	4619      	mov	r1, r3
 800636c:	4807      	ldr	r0, [pc, #28]	; (800638c <HAL_TIM_MspPostInit+0xc4>)
 800636e:	f001 fca9 	bl	8007cc4 <HAL_GPIO_Init>
}
 8006372:	bf00      	nop
 8006374:	3728      	adds	r7, #40	; 0x28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40023800 	.word	0x40023800
 8006384:	40020000 	.word	0x40020000
 8006388:	40010400 	.word	0x40010400
 800638c:	40020800 	.word	0x40020800

08006390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a19      	ldr	r2, [pc, #100]	; (8006414 <HAL_UART_MspInit+0x84>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12c      	bne.n	800640c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_UART_MspInit+0x88>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_UART_MspInit+0x88>)
 80063bc:	f043 0310 	orr.w	r3, r3, #16
 80063c0:	6453      	str	r3, [r2, #68]	; 0x44
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <HAL_UART_MspInit+0x88>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <HAL_UART_MspInit+0x88>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4a10      	ldr	r2, [pc, #64]	; (8006418 <HAL_UART_MspInit+0x88>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	6313      	str	r3, [r2, #48]	; 0x30
 80063de:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <HAL_UART_MspInit+0x88>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80063ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80063ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f0:	2302      	movs	r3, #2
 80063f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f8:	2303      	movs	r3, #3
 80063fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80063fc:	2307      	movs	r3, #7
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006400:	f107 0314 	add.w	r3, r7, #20
 8006404:	4619      	mov	r1, r3
 8006406:	4805      	ldr	r0, [pc, #20]	; (800641c <HAL_UART_MspInit+0x8c>)
 8006408:	f001 fc5c 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800640c:	bf00      	nop
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40011000 	.word	0x40011000
 8006418:	40023800 	.word	0x40023800
 800641c:	40020000 	.word	0x40020000

08006420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006424:	e7fe      	b.n	8006424 <NMI_Handler+0x4>

08006426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006426:	b480      	push	{r7}
 8006428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800642a:	e7fe      	b.n	800642a <HardFault_Handler+0x4>

0800642c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006430:	e7fe      	b.n	8006430 <MemManage_Handler+0x4>

08006432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006432:	b480      	push	{r7}
 8006434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006436:	e7fe      	b.n	8006436 <BusFault_Handler+0x4>

08006438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800643c:	e7fe      	b.n	800643c <UsageFault_Handler+0x4>

0800643e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800643e:	b480      	push	{r7}
 8006440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006442:	bf00      	nop
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006450:	bf00      	nop
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800645a:	b480      	push	{r7}
 800645c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800646c:	f000 f98a 	bl	8006784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}

08006474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006478:	4802      	ldr	r0, [pc, #8]	; (8006484 <TIM6_DAC_IRQHandler+0x10>)
 800647a:	f003 fa38 	bl	80098ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800647e:	bf00      	nop
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2001a980 	.word	0x2001a980

08006488 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800648c:	4802      	ldr	r0, [pc, #8]	; (8006498 <TIM7_IRQHandler+0x10>)
 800648e:	f003 fa2e 	bl	80098ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2001aa68 	.word	0x2001aa68

0800649c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80064a0:	4802      	ldr	r0, [pc, #8]	; (80064ac <DMA2_Stream0_IRQHandler+0x10>)
 80064a2:	f000 ffbd 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80064a6:	bf00      	nop
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	2001a920 	.word	0x2001a920

080064b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80064b4:	4802      	ldr	r0, [pc, #8]	; (80064c0 <DMA2_Stream2_IRQHandler+0x10>)
 80064b6:	f000 ffb3 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	2001aa08 	.word	0x2001aa08

080064c4 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	2b52      	cmp	r3, #82	; 0x52
 80064d6:	d10a      	bne.n	80064ee <getSwitchStatus+0x2a>
 80064d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064dc:	480d      	ldr	r0, [pc, #52]	; (8006514 <getSwitchStatus+0x50>)
 80064de:	f001 fd8b 	bl	8007ff8 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <getSwitchStatus+0x2a>
		ret = 1;
 80064e8:	2301      	movs	r3, #1
 80064ea:	81fb      	strh	r3, [r7, #14]
 80064ec:	e00c      	b.n	8006508 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	2b4c      	cmp	r3, #76	; 0x4c
 80064f2:	d109      	bne.n	8006508 <getSwitchStatus+0x44>
 80064f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064f8:	4806      	ldr	r0, [pc, #24]	; (8006514 <getSwitchStatus+0x50>)
 80064fa:	f001 fd7d 	bl	8007ff8 <HAL_GPIO_ReadPin>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <getSwitchStatus+0x44>
		ret = 1;
 8006504:	2301      	movs	r3, #1
 8006506:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8006508:	89fb      	ldrh	r3, [r7, #14]

}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40020000 	.word	0x40020000

08006518 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e00a      	b.n	8006540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800652a:	f3af 8000 	nop.w
 800652e:	4601      	mov	r1, r0
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	60ba      	str	r2, [r7, #8]
 8006536:	b2ca      	uxtb	r2, r1
 8006538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	3301      	adds	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	dbf0      	blt.n	800652a <_read+0x12>
	}

return len;
 8006548:	687b      	ldr	r3, [r7, #4]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e009      	b.n	8006578 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	60ba      	str	r2, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fd fbc7 	bl	8003d00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	3301      	adds	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	dbf1      	blt.n	8006564 <_write+0x12>
	}
	return len;
 8006580:	687b      	ldr	r3, [r7, #4]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <_close>:

int _close(int file)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
	return -1;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b2:	605a      	str	r2, [r3, #4]
	return 0;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <_isatty>:

int _isatty(int file)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
	return 1;
 80065ca:	2301      	movs	r3, #1
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	return 0;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065fc:	4a14      	ldr	r2, [pc, #80]	; (8006650 <_sbrk+0x5c>)
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <_sbrk+0x60>)
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <_sbrk+0x64>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <_sbrk+0x64>)
 8006612:	4a12      	ldr	r2, [pc, #72]	; (800665c <_sbrk+0x68>)
 8006614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <_sbrk+0x64>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d207      	bcs.n	8006634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006624:	f006 f944 	bl	800c8b0 <__errno>
 8006628:	4602      	mov	r2, r0
 800662a:	230c      	movs	r3, #12
 800662c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	e009      	b.n	8006648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <_sbrk+0x64>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <_sbrk+0x64>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	4a05      	ldr	r2, [pc, #20]	; (8006658 <_sbrk+0x64>)
 8006644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20020000 	.word	0x20020000
 8006654:	00000400 	.word	0x00000400
 8006658:	2001a590 	.word	0x2001a590
 800665c:	2001aae0 	.word	0x2001aae0

08006660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006664:	4b08      	ldr	r3, [pc, #32]	; (8006688 <SystemInit+0x28>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666a:	4a07      	ldr	r2, [pc, #28]	; (8006688 <SystemInit+0x28>)
 800666c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <SystemInit+0x28>)
 8006676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800667a:	609a      	str	r2, [r3, #8]
#endif
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	e000ed00 	.word	0xe000ed00

0800668c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800668c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006690:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006692:	e003      	b.n	800669c <LoopCopyDataInit>

08006694 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006696:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006698:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800669a:	3104      	adds	r1, #4

0800669c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800669c:	480b      	ldr	r0, [pc, #44]	; (80066cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80066a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80066a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80066a4:	d3f6      	bcc.n	8006694 <CopyDataInit>
  ldr  r2, =_sbss
 80066a6:	4a0b      	ldr	r2, [pc, #44]	; (80066d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80066a8:	e002      	b.n	80066b0 <LoopFillZerobss>

080066aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80066aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80066ac:	f842 3b04 	str.w	r3, [r2], #4

080066b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80066b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80066b4:	d3f9      	bcc.n	80066aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80066b6:	f7ff ffd3 	bl	8006660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066ba:	f006 f8ff 	bl	800c8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066be:	f7fd fb99 	bl	8003df4 <main>
  bx  lr    
 80066c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80066c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80066c8:	08011710 	.word	0x08011710
  ldr  r0, =_sdata
 80066cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80066d0:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80066d4:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80066d8:	2001aae0 	.word	0x2001aae0

080066dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066dc:	e7fe      	b.n	80066dc <ADC_IRQHandler>
	...

080066e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066e4:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <HAL_Init+0x40>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a0d      	ldr	r2, [pc, #52]	; (8006720 <HAL_Init+0x40>)
 80066ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_Init+0x40>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <HAL_Init+0x40>)
 80066f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066fc:	4b08      	ldr	r3, [pc, #32]	; (8006720 <HAL_Init+0x40>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a07      	ldr	r2, [pc, #28]	; (8006720 <HAL_Init+0x40>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006708:	2003      	movs	r0, #3
 800670a:	f000 fd41 	bl	8007190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800670e:	2000      	movs	r0, #0
 8006710:	f000 f808 	bl	8006724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006714:	f7ff fb10 	bl	8005d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40023c00 	.word	0x40023c00

08006724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_InitTick+0x54>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <HAL_InitTick+0x58>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	4619      	mov	r1, r3
 8006736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800673a:	fbb3 f3f1 	udiv	r3, r3, r1
 800673e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fd59 	bl	80071fa <HAL_SYSTICK_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e00e      	b.n	8006770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d80a      	bhi.n	800676e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006758:	2200      	movs	r2, #0
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	f000 fd21 	bl	80071a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006764:	4a06      	ldr	r2, [pc, #24]	; (8006780 <HAL_InitTick+0x5c>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e000      	b.n	8006770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000034 	.word	0x20000034
 800677c:	2000003c 	.word	0x2000003c
 8006780:	20000038 	.word	0x20000038

08006784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_IncTick+0x20>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <HAL_IncTick+0x24>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4413      	add	r3, r2
 8006794:	4a04      	ldr	r2, [pc, #16]	; (80067a8 <HAL_IncTick+0x24>)
 8006796:	6013      	str	r3, [r2, #0]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	2000003c 	.word	0x2000003c
 80067a8:	2001aab8 	.word	0x2001aab8

080067ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  return uwTick;
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <HAL_GetTick+0x14>)
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	2001aab8 	.word	0x2001aab8

080067c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067cc:	f7ff ffee 	bl	80067ac <HAL_GetTick>
 80067d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d005      	beq.n	80067ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <HAL_Delay+0x40>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067ea:	bf00      	nop
 80067ec:	f7ff ffde 	bl	80067ac <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d8f7      	bhi.n	80067ec <HAL_Delay+0x28>
  {
  }
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	2000003c 	.word	0x2000003c

08006808 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e033      	b.n	8006886 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff faae 	bl	8005d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	d118      	bne.n	8006878 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800684e:	f023 0302 	bic.w	r3, r3, #2
 8006852:	f043 0202 	orr.w	r2, r3, #2
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa4a 	bl	8006cf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
 8006876:	e001      	b.n	800687c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_ADC_Start_DMA+0x1e>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0cc      	b.n	8006a48 <HAL_ADC_Start_DMA+0x1b8>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d018      	beq.n	80068f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80068d4:	4b5e      	ldr	r3, [pc, #376]	; (8006a50 <HAL_ADC_Start_DMA+0x1c0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a5e      	ldr	r2, [pc, #376]	; (8006a54 <HAL_ADC_Start_DMA+0x1c4>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	0c9a      	lsrs	r2, r3, #18
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80068e8:	e002      	b.n	80068f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f9      	bne.n	80068ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	f040 80a0 	bne.w	8006a46 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006930:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006944:	d106      	bne.n	8006954 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f023 0206 	bic.w	r2, r3, #6
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
 8006952:	e002      	b.n	800695a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006962:	4b3d      	ldr	r3, [pc, #244]	; (8006a58 <HAL_ADC_Start_DMA+0x1c8>)
 8006964:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <HAL_ADC_Start_DMA+0x1cc>)
 800696c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	4a3b      	ldr	r2, [pc, #236]	; (8006a60 <HAL_ADC_Start_DMA+0x1d0>)
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	4a3a      	ldr	r2, [pc, #232]	; (8006a64 <HAL_ADC_Start_DMA+0x1d4>)
 800697c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006986:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006996:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	334c      	adds	r3, #76	; 0x4c
 80069b2:	4619      	mov	r1, r3
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f000 fcda 	bl	8007370 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d12a      	bne.n	8006a1e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <HAL_ADC_Start_DMA+0x1d8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d015      	beq.n	80069fe <HAL_ADC_Start_DMA+0x16e>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <HAL_ADC_Start_DMA+0x1dc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d105      	bne.n	80069e8 <HAL_ADC_Start_DMA+0x158>
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_ADC_Start_DMA+0x1c8>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <HAL_ADC_Start_DMA+0x1e0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d129      	bne.n	8006a46 <HAL_ADC_Start_DMA+0x1b6>
 80069f2:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_ADC_Start_DMA+0x1c8>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2b0f      	cmp	r3, #15
 80069fc:	d823      	bhi.n	8006a46 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11c      	bne.n	8006a46 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a1a:	609a      	str	r2, [r3, #8]
 8006a1c:	e013      	b.n	8006a46 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <HAL_ADC_Start_DMA+0x1d8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10e      	bne.n	8006a46 <HAL_ADC_Start_DMA+0x1b6>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a44:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000034 	.word	0x20000034
 8006a54:	431bde83 	.word	0x431bde83
 8006a58:	40012300 	.word	0x40012300
 8006a5c:	08006eed 	.word	0x08006eed
 8006a60:	08006fa7 	.word	0x08006fa7
 8006a64:	08006fc3 	.word	0x08006fc3
 8006a68:	40012000 	.word	0x40012000
 8006a6c:	40012100 	.word	0x40012100
 8006a70:	40012200 	.word	0x40012200

08006a74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_ADC_ConfigChannel+0x1c>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e105      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x228>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	d925      	bls.n	8006b28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68d9      	ldr	r1, [r3, #12]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4613      	mov	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4413      	add	r3, r2
 8006af0:	3b1e      	subs	r3, #30
 8006af2:	2207      	movs	r2, #7
 8006af4:	fa02 f303 	lsl.w	r3, r2, r3
 8006af8:	43da      	mvns	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	400a      	ands	r2, r1
 8006b00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68d9      	ldr	r1, [r3, #12]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4618      	mov	r0, r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	4403      	add	r3, r0
 8006b1a:	3b1e      	subs	r3, #30
 8006b1c:	409a      	lsls	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	e022      	b.n	8006b6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6919      	ldr	r1, [r3, #16]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	4613      	mov	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	2207      	movs	r2, #7
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43da      	mvns	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	400a      	ands	r2, r1
 8006b4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6919      	ldr	r1, [r3, #16]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	4403      	add	r3, r0
 8006b64:	409a      	lsls	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b06      	cmp	r3, #6
 8006b74:	d824      	bhi.n	8006bc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	3b05      	subs	r3, #5
 8006b88:	221f      	movs	r2, #31
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43da      	mvns	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	400a      	ands	r2, r1
 8006b96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	3b05      	subs	r3, #5
 8006bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8006bbe:	e04c      	b.n	8006c5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	d824      	bhi.n	8006c12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3b23      	subs	r3, #35	; 0x23
 8006bda:	221f      	movs	r2, #31
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	43da      	mvns	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	400a      	ands	r2, r1
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	3b23      	subs	r3, #35	; 0x23
 8006c04:	fa00 f203 	lsl.w	r2, r0, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c10:	e023      	b.n	8006c5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	3b41      	subs	r3, #65	; 0x41
 8006c24:	221f      	movs	r2, #31
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	400a      	ands	r2, r1
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4618      	mov	r0, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3b41      	subs	r3, #65	; 0x41
 8006c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c5a:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <HAL_ADC_ConfigChannel+0x234>)
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <HAL_ADC_ConfigChannel+0x238>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d109      	bne.n	8006c7c <HAL_ADC_ConfigChannel+0x1cc>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b12      	cmp	r3, #18
 8006c6e:	d105      	bne.n	8006c7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <HAL_ADC_ConfigChannel+0x238>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d123      	bne.n	8006cce <HAL_ADC_ConfigChannel+0x21e>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d003      	beq.n	8006c96 <HAL_ADC_ConfigChannel+0x1e6>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b11      	cmp	r3, #17
 8006c94:	d11b      	bne.n	8006cce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d111      	bne.n	8006cce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006caa:	4b10      	ldr	r3, [pc, #64]	; (8006cec <HAL_ADC_ConfigChannel+0x23c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a10      	ldr	r2, [pc, #64]	; (8006cf0 <HAL_ADC_ConfigChannel+0x240>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	0c9a      	lsrs	r2, r3, #18
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006cc0:	e002      	b.n	8006cc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f9      	bne.n	8006cc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40012300 	.word	0x40012300
 8006ce8:	40012000 	.word	0x40012000
 8006cec:	20000034 	.word	0x20000034
 8006cf0:	431bde83 	.word	0x431bde83

08006cf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cfc:	4b79      	ldr	r3, [pc, #484]	; (8006ee4 <ADC_Init+0x1f0>)
 8006cfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	021a      	lsls	r2, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	4a58      	ldr	r2, [pc, #352]	; (8006ee8 <ADC_Init+0x1f4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d022      	beq.n	8006dd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6899      	ldr	r1, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6899      	ldr	r1, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	e00f      	b.n	8006df2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006df0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0202 	bic.w	r2, r2, #2
 8006e00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6899      	ldr	r1, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7e1b      	ldrb	r3, [r3, #24]
 8006e0c:	005a      	lsls	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01b      	beq.n	8006e58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6859      	ldr	r1, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	035a      	lsls	r2, r3, #13
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	e007      	b.n	8006e68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	051a      	lsls	r2, r3, #20
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6899      	ldr	r1, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eaa:	025a      	lsls	r2, r3, #9
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6899      	ldr	r1, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	029a      	lsls	r2, r3, #10
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40012300 	.word	0x40012300
 8006ee8:	0f000001 	.word	0x0f000001

08006eec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d13c      	bne.n	8006f80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d12b      	bne.n	8006f78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d127      	bne.n	8006f78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d006      	beq.n	8006f44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d119      	bne.n	8006f78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0220 	bic.w	r2, r2, #32
 8006f52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	f043 0201 	orr.w	r2, r3, #1
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fd7b 	bl	8006a74 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f7e:	e00e      	b.n	8006f9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fd85 	bl	8006a9c <HAL_ADC_ErrorCallback>
}
 8006f92:	e004      	b.n	8006f9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff fd67 	bl	8006a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2240      	movs	r2, #64	; 0x40
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	f043 0204 	orr.w	r2, r3, #4
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fd5a 	bl	8006a9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <__NVIC_SetPriorityGrouping+0x44>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800700c:	4013      	ands	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800701c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <__NVIC_SetPriorityGrouping+0x44>)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	60d3      	str	r3, [r2, #12]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800703c:	4b04      	ldr	r3, [pc, #16]	; (8007050 <__NVIC_GetPriorityGrouping+0x18>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	f003 0307 	and.w	r3, r3, #7
}
 8007046:	4618      	mov	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	e000ed00 	.word	0xe000ed00

08007054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800705e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007062:	2b00      	cmp	r3, #0
 8007064:	db0b      	blt.n	800707e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	f003 021f 	and.w	r2, r3, #31
 800706c:	4907      	ldr	r1, [pc, #28]	; (800708c <__NVIC_EnableIRQ+0x38>)
 800706e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	2001      	movs	r0, #1
 8007076:	fa00 f202 	lsl.w	r2, r0, r2
 800707a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	e000e100 	.word	0xe000e100

08007090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800709c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	db0a      	blt.n	80070ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	490c      	ldr	r1, [pc, #48]	; (80070dc <__NVIC_SetPriority+0x4c>)
 80070aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ae:	0112      	lsls	r2, r2, #4
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	440b      	add	r3, r1
 80070b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070b8:	e00a      	b.n	80070d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	4908      	ldr	r1, [pc, #32]	; (80070e0 <__NVIC_SetPriority+0x50>)
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	3b04      	subs	r3, #4
 80070c8:	0112      	lsls	r2, r2, #4
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	440b      	add	r3, r1
 80070ce:	761a      	strb	r2, [r3, #24]
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	e000e100 	.word	0xe000e100
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b089      	sub	sp, #36	; 0x24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f1c3 0307 	rsb	r3, r3, #7
 80070fe:	2b04      	cmp	r3, #4
 8007100:	bf28      	it	cs
 8007102:	2304      	movcs	r3, #4
 8007104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	3304      	adds	r3, #4
 800710a:	2b06      	cmp	r3, #6
 800710c:	d902      	bls.n	8007114 <NVIC_EncodePriority+0x30>
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3b03      	subs	r3, #3
 8007112:	e000      	b.n	8007116 <NVIC_EncodePriority+0x32>
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	43da      	mvns	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	401a      	ands	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800712c:	f04f 31ff 	mov.w	r1, #4294967295
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	fa01 f303 	lsl.w	r3, r1, r3
 8007136:	43d9      	mvns	r1, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800713c:	4313      	orrs	r3, r2
         );
}
 800713e:	4618      	mov	r0, r3
 8007140:	3724      	adds	r7, #36	; 0x24
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
	...

0800714c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3b01      	subs	r3, #1
 8007158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800715c:	d301      	bcc.n	8007162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800715e:	2301      	movs	r3, #1
 8007160:	e00f      	b.n	8007182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007162:	4a0a      	ldr	r2, [pc, #40]	; (800718c <SysTick_Config+0x40>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3b01      	subs	r3, #1
 8007168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800716a:	210f      	movs	r1, #15
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	f7ff ff8e 	bl	8007090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <SysTick_Config+0x40>)
 8007176:	2200      	movs	r2, #0
 8007178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <SysTick_Config+0x40>)
 800717c:	2207      	movs	r2, #7
 800717e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	e000e010 	.word	0xe000e010

08007190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff29 	bl	8006ff0 <__NVIC_SetPriorityGrouping>
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	4603      	mov	r3, r0
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071b8:	f7ff ff3e 	bl	8007038 <__NVIC_GetPriorityGrouping>
 80071bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	f7ff ff8e 	bl	80070e4 <NVIC_EncodePriority>
 80071c8:	4602      	mov	r2, r0
 80071ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff ff5d 	bl	8007090 <__NVIC_SetPriority>
}
 80071d6:	bf00      	nop
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	4603      	mov	r3, r0
 80071e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ff31 	bl	8007054 <__NVIC_EnableIRQ>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff ffa2 	bl	800714c <SysTick_Config>
 8007208:	4603      	mov	r3, r0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007220:	f7ff fac4 	bl	80067ac <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e099      	b.n	8007364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0201 	bic.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007250:	e00f      	b.n	8007272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007252:	f7ff faab 	bl	80067ac <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b05      	cmp	r3, #5
 800725e:	d908      	bls.n	8007272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2203      	movs	r2, #3
 800726a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e078      	b.n	8007364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e8      	bne.n	8007252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4b38      	ldr	r3, [pc, #224]	; (800736c <HAL_DMA_Init+0x158>)
 800728c:	4013      	ands	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800729e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d107      	bne.n	80072dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	4313      	orrs	r3, r2
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0307 	bic.w	r3, r3, #7
 80072f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	2b04      	cmp	r3, #4
 8007304:	d117      	bne.n	8007336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fa6f 	bl	80077fc <DMA_CheckFifoParam>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2240      	movs	r2, #64	; 0x40
 8007328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007332:	2301      	movs	r3, #1
 8007334:	e016      	b.n	8007364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa26 	bl	8007790 <DMA_CalcBaseAndBitshift>
 8007344:	4603      	mov	r3, r0
 8007346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734c:	223f      	movs	r2, #63	; 0x3f
 800734e:	409a      	lsls	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	f010803f 	.word	0xf010803f

08007370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_DMA_Start_IT+0x26>
 8007392:	2302      	movs	r3, #2
 8007394:	e040      	b.n	8007418 <HAL_DMA_Start_IT+0xa8>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d12f      	bne.n	800740a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f9b8 	bl	8007734 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c8:	223f      	movs	r2, #63	; 0x3f
 80073ca:	409a      	lsls	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0216 	orr.w	r2, r2, #22
 80073de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0208 	orr.w	r2, r2, #8
 80073f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e005      	b.n	8007416 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007412:	2302      	movs	r3, #2
 8007414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800742c:	4b92      	ldr	r3, [pc, #584]	; (8007678 <HAL_DMA_IRQHandler+0x258>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a92      	ldr	r2, [pc, #584]	; (800767c <HAL_DMA_IRQHandler+0x25c>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	0a9b      	lsrs	r3, r3, #10
 8007438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	2208      	movs	r2, #8
 800744c:	409a      	lsls	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01a      	beq.n	800748c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d013      	beq.n	800748c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0204 	bic.w	r2, r2, #4
 8007472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007478:	2208      	movs	r2, #8
 800747a:	409a      	lsls	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	f043 0201 	orr.w	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007490:	2201      	movs	r2, #1
 8007492:	409a      	lsls	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d012      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ae:	2201      	movs	r2, #1
 80074b0:	409a      	lsls	r2, r3
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	f043 0202 	orr.w	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c6:	2204      	movs	r2, #4
 80074c8:	409a      	lsls	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4013      	ands	r3, r2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d012      	beq.n	80074f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e4:	2204      	movs	r2, #4
 80074e6:	409a      	lsls	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f0:	f043 0204 	orr.w	r2, r3, #4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fc:	2210      	movs	r2, #16
 80074fe:	409a      	lsls	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4013      	ands	r3, r2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d043      	beq.n	8007590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d03c      	beq.n	8007590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751a:	2210      	movs	r2, #16
 800751c:	409a      	lsls	r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d018      	beq.n	8007562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d108      	bne.n	8007550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d024      	beq.n	8007590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
 800754e:	e01f      	b.n	8007590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01b      	beq.n	8007590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
 8007560:	e016      	b.n	8007590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756c:	2b00      	cmp	r3, #0
 800756e:	d107      	bne.n	8007580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0208 	bic.w	r2, r2, #8
 800757e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007594:	2220      	movs	r2, #32
 8007596:	409a      	lsls	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 808e 	beq.w	80076be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8086 	beq.w	80076be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b6:	2220      	movs	r2, #32
 80075b8:	409a      	lsls	r2, r3
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b05      	cmp	r3, #5
 80075c8:	d136      	bne.n	8007638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0216 	bic.w	r2, r2, #22
 80075d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <HAL_DMA_IRQHandler+0x1da>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0208 	bic.w	r2, r2, #8
 8007608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760e:	223f      	movs	r2, #63	; 0x3f
 8007610:	409a      	lsls	r2, r3
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762a:	2b00      	cmp	r3, #0
 800762c:	d07d      	beq.n	800772a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
        }
        return;
 8007636:	e078      	b.n	800772a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01c      	beq.n	8007680 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d108      	bne.n	8007666 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007658:	2b00      	cmp	r3, #0
 800765a:	d030      	beq.n	80076be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
 8007664:	e02b      	b.n	80076be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d027      	beq.n	80076be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
 8007676:	e022      	b.n	80076be <HAL_DMA_IRQHandler+0x29e>
 8007678:	20000034 	.word	0x20000034
 800767c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0210 	bic.w	r2, r2, #16
 800769c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d032      	beq.n	800772c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d022      	beq.n	8007718 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2205      	movs	r2, #5
 80076d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d307      	bcc.n	8007706 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1f2      	bne.n	80076ea <HAL_DMA_IRQHandler+0x2ca>
 8007704:	e000      	b.n	8007708 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007706:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
 8007728:	e000      	b.n	800772c <HAL_DMA_IRQHandler+0x30c>
        return;
 800772a:	bf00      	nop
    }
  }
}
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop

08007734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007750:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d108      	bne.n	8007774 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007772:	e007      	b.n	8007784 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	3b10      	subs	r3, #16
 80077a0:	4a14      	ldr	r2, [pc, #80]	; (80077f4 <DMA_CalcBaseAndBitshift+0x64>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	091b      	lsrs	r3, r3, #4
 80077a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077aa:	4a13      	ldr	r2, [pc, #76]	; (80077f8 <DMA_CalcBaseAndBitshift+0x68>)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d909      	bls.n	80077d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	659a      	str	r2, [r3, #88]	; 0x58
 80077d0:	e007      	b.n	80077e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	aaaaaaab 	.word	0xaaaaaaab
 80077f8:	08010e30 	.word	0x08010e30

080077fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d11f      	bne.n	8007856 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b03      	cmp	r3, #3
 800781a:	d855      	bhi.n	80078c8 <DMA_CheckFifoParam+0xcc>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <DMA_CheckFifoParam+0x28>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007835 	.word	0x08007835
 8007828:	08007847 	.word	0x08007847
 800782c:	08007835 	.word	0x08007835
 8007830:	080078c9 	.word	0x080078c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d045      	beq.n	80078cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007844:	e042      	b.n	80078cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800784e:	d13f      	bne.n	80078d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007854:	e03c      	b.n	80078d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785e:	d121      	bne.n	80078a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d836      	bhi.n	80078d4 <DMA_CheckFifoParam+0xd8>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <DMA_CheckFifoParam+0x70>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	0800787d 	.word	0x0800787d
 8007870:	08007883 	.word	0x08007883
 8007874:	0800787d 	.word	0x0800787d
 8007878:	08007895 	.word	0x08007895
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
      break;
 8007880:	e02f      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d024      	beq.n	80078d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007892:	e021      	b.n	80078d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800789c:	d11e      	bne.n	80078dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078a2:	e01b      	b.n	80078dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d902      	bls.n	80078b0 <DMA_CheckFifoParam+0xb4>
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d003      	beq.n	80078b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078ae:	e018      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
      break;
 80078b4:	e015      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
      break;
 80078c6:	e00b      	b.n	80078e0 <DMA_CheckFifoParam+0xe4>
      break;
 80078c8:	bf00      	nop
 80078ca:	e00a      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      break;
 80078cc:	bf00      	nop
 80078ce:	e008      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      break;
 80078d0:	bf00      	nop
 80078d2:	e006      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      break;
 80078d4:	bf00      	nop
 80078d6:	e004      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      break;
 80078d8:	bf00      	nop
 80078da:	e002      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80078dc:	bf00      	nop
 80078de:	e000      	b.n	80078e2 <DMA_CheckFifoParam+0xe6>
      break;
 80078e0:	bf00      	nop
    }
  } 
  
  return status; 
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <HAL_FLASH_Unlock+0x38>)
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da0b      	bge.n	800791a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <HAL_FLASH_Unlock+0x38>)
 8007904:	4a09      	ldr	r2, [pc, #36]	; (800792c <HAL_FLASH_Unlock+0x3c>)
 8007906:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007908:	4b07      	ldr	r3, [pc, #28]	; (8007928 <HAL_FLASH_Unlock+0x38>)
 800790a:	4a09      	ldr	r2, [pc, #36]	; (8007930 <HAL_FLASH_Unlock+0x40>)
 800790c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_FLASH_Unlock+0x38>)
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	da01      	bge.n	800791a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800791a:	79fb      	ldrb	r3, [r7, #7]
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40023c00 	.word	0x40023c00
 800792c:	45670123 	.word	0x45670123
 8007930:	cdef89ab 	.word	0xcdef89ab

08007934 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <HAL_FLASH_Lock+0x1c>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	4a04      	ldr	r2, [pc, #16]	; (8007950 <HAL_FLASH_Lock+0x1c>)
 800793e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007942:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40023c00 	.word	0x40023c00

08007954 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007960:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <FLASH_WaitForLastOperation+0x78>)
 8007962:	2200      	movs	r2, #0
 8007964:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007966:	f7fe ff21 	bl	80067ac <HAL_GetTick>
 800796a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800796c:	e010      	b.n	8007990 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d00c      	beq.n	8007990 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <FLASH_WaitForLastOperation+0x38>
 800797c:	f7fe ff16 	bl	80067ac <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d201      	bcs.n	8007990 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e019      	b.n	80079c4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <FLASH_WaitForLastOperation+0x7c>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e8      	bne.n	800796e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800799c:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <FLASH_WaitForLastOperation+0x7c>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <FLASH_WaitForLastOperation+0x7c>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <FLASH_WaitForLastOperation+0x7c>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80079ba:	f000 f80b 	bl	80079d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
  
}  
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	2001aabc 	.word	0x2001aabc
 80079d0:	40023c00 	.word	0x40023c00

080079d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80079d8:	4b27      	ldr	r3, [pc, #156]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80079e4:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f043 0310 	orr.w	r3, r3, #16
 80079ec:	4a23      	ldr	r2, [pc, #140]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 80079ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80079f0:	4b21      	ldr	r3, [pc, #132]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 80079f2:	2210      	movs	r2, #16
 80079f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80079f6:	4b20      	ldr	r3, [pc, #128]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007a02:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f043 0308 	orr.w	r3, r3, #8
 8007a0a:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007a0e:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a10:	2220      	movs	r2, #32
 8007a12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007a14:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d008      	beq.n	8007a32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007a20:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	f043 0304 	orr.w	r3, r3, #4
 8007a28:	4a14      	ldr	r2, [pc, #80]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a2e:	2240      	movs	r2, #64	; 0x40
 8007a30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	f043 0302 	orr.w	r3, r3, #2
 8007a46:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a4c:	2280      	movs	r2, #128	; 0x80
 8007a4e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007a50:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007a5c:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <FLASH_SetErrorCode+0xa8>)
 8007a66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007a68:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <FLASH_SetErrorCode+0xa4>)
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	60da      	str	r2, [r3, #12]
  }
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	40023c00 	.word	0x40023c00
 8007a7c:	2001aabc 	.word	0x2001aabc

08007a80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a92:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <HAL_FLASHEx_Erase+0xd8>)
 8007a94:	7e1b      	ldrb	r3, [r3, #24]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_FLASHEx_Erase+0x1e>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e058      	b.n	8007b50 <HAL_FLASHEx_Erase+0xd0>
 8007a9e:	4b2e      	ldr	r3, [pc, #184]	; (8007b58 <HAL_FLASHEx_Erase+0xd8>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007aa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007aa8:	f7ff ff54 	bl	8007954 <FLASH_WaitForLastOperation>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d148      	bne.n	8007b48 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d115      	bne.n	8007af2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f000 f844 	bl	8007b60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ad8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007adc:	f7ff ff3a 	bl	8007954 <FLASH_WaitForLastOperation>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <HAL_FLASHEx_Erase+0xdc>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <HAL_FLASHEx_Erase+0xdc>)
 8007aea:	f023 0304 	bic.w	r3, r3, #4
 8007aee:	6113      	str	r3, [r2, #16]
 8007af0:	e028      	b.n	8007b44 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	60bb      	str	r3, [r7, #8]
 8007af8:	e01c      	b.n	8007b34 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	4619      	mov	r1, r3
 8007b02:	68b8      	ldr	r0, [r7, #8]
 8007b04:	f000 f850 	bl	8007ba8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b0c:	f7ff ff22 	bl	8007954 <FLASH_WaitForLastOperation>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007b14:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <HAL_FLASHEx_Erase+0xdc>)
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <HAL_FLASHEx_Erase+0xdc>)
 8007b1a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007b1e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	601a      	str	r2, [r3, #0]
          break;
 8007b2c:	e00a      	b.n	8007b44 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	3301      	adds	r3, #1
 8007b32:	60bb      	str	r3, [r7, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d3da      	bcc.n	8007afa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007b44:	f000 f878 	bl	8007c38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b48:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <HAL_FLASHEx_Erase+0xd8>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	761a      	strb	r2, [r3, #24]

  return status;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	2001aabc 	.word	0x2001aabc
 8007b5c:	40023c00 	.word	0x40023c00

08007b60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	6039      	str	r1, [r7, #0]
 8007b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <FLASH_MassErase+0x44>)
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <FLASH_MassErase+0x44>)
 8007b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <FLASH_MassErase+0x44>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <FLASH_MassErase+0x44>)
 8007b7e:	f043 0304 	orr.w	r3, r3, #4
 8007b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <FLASH_MassErase+0x44>)
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	4a05      	ldr	r2, [pc, #20]	; (8007ba4 <FLASH_MassErase+0x44>)
 8007b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b94:	6113      	str	r3, [r2, #16]
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40023c00 	.word	0x40023c00

08007ba8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e010      	b.n	8007be6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d103      	bne.n	8007bd2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	e009      	b.n	8007be6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d103      	bne.n	8007be0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e002      	b.n	8007be6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007be6:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	490f      	ldr	r1, [pc, #60]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	4a0c      	ldr	r2, [pc, #48]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007c04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007c16:	f043 0302 	orr.w	r3, r3, #2
 8007c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	4a04      	ldr	r2, [pc, #16]	; (8007c34 <FLASH_Erase_Sector+0x8c>)
 8007c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c26:	6113      	str	r3, [r2, #16]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	40023c00 	.word	0x40023c00

08007c38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007c3c:	4b20      	ldr	r3, [pc, #128]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d017      	beq.n	8007c78 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c52:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a16      	ldr	r2, [pc, #88]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c6a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c6c:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a13      	ldr	r2, [pc, #76]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c76:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007c78:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d017      	beq.n	8007cb4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a0d      	ldr	r2, [pc, #52]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c8e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a07      	ldr	r2, [pc, #28]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ca6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a04      	ldr	r2, [pc, #16]	; (8007cc0 <FLASH_FlushCaches+0x88>)
 8007cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cb2:	6013      	str	r3, [r2, #0]
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40023c00 	.word	0x40023c00

08007cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b089      	sub	sp, #36	; 0x24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	e16b      	b.n	8007fb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	f040 815a 	bne.w	8007fb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d00b      	beq.n	8007d1e <HAL_GPIO_Init+0x5a>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d007      	beq.n	8007d1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d12:	2b11      	cmp	r3, #17
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b12      	cmp	r3, #18
 8007d1c:	d130      	bne.n	8007d80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2203      	movs	r2, #3
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d54:	2201      	movs	r2, #1
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 0201 	and.w	r2, r3, #1
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43db      	mvns	r3, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4013      	ands	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d003      	beq.n	8007dc0 <HAL_GPIO_Init+0xfc>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b12      	cmp	r3, #18
 8007dbe:	d123      	bne.n	8007e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	08da      	lsrs	r2, r3, #3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3208      	adds	r2, #8
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	220f      	movs	r2, #15
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4013      	ands	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	08da      	lsrs	r2, r3, #3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3208      	adds	r2, #8
 8007e02:	69b9      	ldr	r1, [r7, #24]
 8007e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	2203      	movs	r2, #3
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f003 0203 	and.w	r2, r3, #3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80b4 	beq.w	8007fb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	4b5f      	ldr	r3, [pc, #380]	; (8007fcc <HAL_GPIO_Init+0x308>)
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	4a5e      	ldr	r2, [pc, #376]	; (8007fcc <HAL_GPIO_Init+0x308>)
 8007e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e58:	6453      	str	r3, [r2, #68]	; 0x44
 8007e5a:	4b5c      	ldr	r3, [pc, #368]	; (8007fcc <HAL_GPIO_Init+0x308>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e66:	4a5a      	ldr	r2, [pc, #360]	; (8007fd0 <HAL_GPIO_Init+0x30c>)
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	089b      	lsrs	r3, r3, #2
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a51      	ldr	r2, [pc, #324]	; (8007fd4 <HAL_GPIO_Init+0x310>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d02b      	beq.n	8007eea <HAL_GPIO_Init+0x226>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a50      	ldr	r2, [pc, #320]	; (8007fd8 <HAL_GPIO_Init+0x314>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d025      	beq.n	8007ee6 <HAL_GPIO_Init+0x222>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a4f      	ldr	r2, [pc, #316]	; (8007fdc <HAL_GPIO_Init+0x318>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01f      	beq.n	8007ee2 <HAL_GPIO_Init+0x21e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a4e      	ldr	r2, [pc, #312]	; (8007fe0 <HAL_GPIO_Init+0x31c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d019      	beq.n	8007ede <HAL_GPIO_Init+0x21a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a4d      	ldr	r2, [pc, #308]	; (8007fe4 <HAL_GPIO_Init+0x320>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <HAL_GPIO_Init+0x216>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a4c      	ldr	r2, [pc, #304]	; (8007fe8 <HAL_GPIO_Init+0x324>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00d      	beq.n	8007ed6 <HAL_GPIO_Init+0x212>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a4b      	ldr	r2, [pc, #300]	; (8007fec <HAL_GPIO_Init+0x328>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d007      	beq.n	8007ed2 <HAL_GPIO_Init+0x20e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a4a      	ldr	r2, [pc, #296]	; (8007ff0 <HAL_GPIO_Init+0x32c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d101      	bne.n	8007ece <HAL_GPIO_Init+0x20a>
 8007eca:	2307      	movs	r3, #7
 8007ecc:	e00e      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007ece:	2308      	movs	r3, #8
 8007ed0:	e00c      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007ed2:	2306      	movs	r3, #6
 8007ed4:	e00a      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007ed6:	2305      	movs	r3, #5
 8007ed8:	e008      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007eda:	2304      	movs	r3, #4
 8007edc:	e006      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e004      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e002      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <HAL_GPIO_Init+0x228>
 8007eea:	2300      	movs	r3, #0
 8007eec:	69fa      	ldr	r2, [r7, #28]
 8007eee:	f002 0203 	and.w	r2, r2, #3
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	4093      	lsls	r3, r2
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007efc:	4934      	ldr	r1, [pc, #208]	; (8007fd0 <HAL_GPIO_Init+0x30c>)
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	089b      	lsrs	r3, r3, #2
 8007f02:	3302      	adds	r3, #2
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f0a:	4b3a      	ldr	r3, [pc, #232]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	43db      	mvns	r3, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4013      	ands	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f2e:	4a31      	ldr	r2, [pc, #196]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f34:	4b2f      	ldr	r3, [pc, #188]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	4013      	ands	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f58:	4a26      	ldr	r2, [pc, #152]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f5e:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	43db      	mvns	r3, r3
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f82:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	43db      	mvns	r3, r3
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	4013      	ands	r3, r2
 8007f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fac:	4a11      	ldr	r2, [pc, #68]	; (8007ff4 <HAL_GPIO_Init+0x330>)
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	61fb      	str	r3, [r7, #28]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	f67f ae90 	bls.w	8007ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	3724      	adds	r7, #36	; 0x24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	40013800 	.word	0x40013800
 8007fd4:	40020000 	.word	0x40020000
 8007fd8:	40020400 	.word	0x40020400
 8007fdc:	40020800 	.word	0x40020800
 8007fe0:	40020c00 	.word	0x40020c00
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	40021400 	.word	0x40021400
 8007fec:	40021800 	.word	0x40021800
 8007ff0:	40021c00 	.word	0x40021c00
 8007ff4:	40013c00 	.word	0x40013c00

08007ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e001      	b.n	800801a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
 8008034:	4613      	mov	r3, r2
 8008036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008038:	787b      	ldrb	r3, [r7, #1]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008044:	e003      	b.n	800804e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	041a      	lsls	r2, r3, #16
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
	...

0800805c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e11f      	b.n	80082ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d106      	bne.n	8008088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fd ff96 	bl	8005fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	; 0x24
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80080c0:	f000 fd18 	bl	8008af4 <HAL_RCC_GetPCLK1Freq>
 80080c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4a7b      	ldr	r2, [pc, #492]	; (80082b8 <HAL_I2C_Init+0x25c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d807      	bhi.n	80080e0 <HAL_I2C_Init+0x84>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a7a      	ldr	r2, [pc, #488]	; (80082bc <HAL_I2C_Init+0x260>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bf94      	ite	ls
 80080d8:	2301      	movls	r3, #1
 80080da:	2300      	movhi	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	e006      	b.n	80080ee <HAL_I2C_Init+0x92>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a77      	ldr	r2, [pc, #476]	; (80082c0 <HAL_I2C_Init+0x264>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	bf94      	ite	ls
 80080e8:	2301      	movls	r3, #1
 80080ea:	2300      	movhi	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e0db      	b.n	80082ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a72      	ldr	r2, [pc, #456]	; (80082c4 <HAL_I2C_Init+0x268>)
 80080fa:	fba2 2303 	umull	r2, r3, r2, r3
 80080fe:	0c9b      	lsrs	r3, r3, #18
 8008100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4a64      	ldr	r2, [pc, #400]	; (80082b8 <HAL_I2C_Init+0x25c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d802      	bhi.n	8008130 <HAL_I2C_Init+0xd4>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3301      	adds	r3, #1
 800812e:	e009      	b.n	8008144 <HAL_I2C_Init+0xe8>
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008136:	fb02 f303 	mul.w	r3, r2, r3
 800813a:	4a63      	ldr	r2, [pc, #396]	; (80082c8 <HAL_I2C_Init+0x26c>)
 800813c:	fba2 2303 	umull	r2, r3, r2, r3
 8008140:	099b      	lsrs	r3, r3, #6
 8008142:	3301      	adds	r3, #1
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	430b      	orrs	r3, r1
 800814a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	4956      	ldr	r1, [pc, #344]	; (80082b8 <HAL_I2C_Init+0x25c>)
 8008160:	428b      	cmp	r3, r1
 8008162:	d80d      	bhi.n	8008180 <HAL_I2C_Init+0x124>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	1e59      	subs	r1, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008172:	3301      	adds	r3, #1
 8008174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008178:	2b04      	cmp	r3, #4
 800817a:	bf38      	it	cc
 800817c:	2304      	movcc	r3, #4
 800817e:	e04f      	b.n	8008220 <HAL_I2C_Init+0x1c4>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d111      	bne.n	80081ac <HAL_I2C_Init+0x150>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	1e58      	subs	r0, r3, #1
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6859      	ldr	r1, [r3, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	440b      	add	r3, r1
 8008196:	fbb0 f3f3 	udiv	r3, r0, r3
 800819a:	3301      	adds	r3, #1
 800819c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bf0c      	ite	eq
 80081a4:	2301      	moveq	r3, #1
 80081a6:	2300      	movne	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	e012      	b.n	80081d2 <HAL_I2C_Init+0x176>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	1e58      	subs	r0, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6859      	ldr	r1, [r3, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	0099      	lsls	r1, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	fbb0 f3f3 	udiv	r3, r0, r3
 80081c2:	3301      	adds	r3, #1
 80081c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bf0c      	ite	eq
 80081cc:	2301      	moveq	r3, #1
 80081ce:	2300      	movne	r3, #0
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <HAL_I2C_Init+0x17e>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e022      	b.n	8008220 <HAL_I2C_Init+0x1c4>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10e      	bne.n	8008200 <HAL_I2C_Init+0x1a4>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	1e58      	subs	r0, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	440b      	add	r3, r1
 80081f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80081f4:	3301      	adds	r3, #1
 80081f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fe:	e00f      	b.n	8008220 <HAL_I2C_Init+0x1c4>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	1e58      	subs	r0, r3, #1
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6859      	ldr	r1, [r3, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	0099      	lsls	r1, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	fbb0 f3f3 	udiv	r3, r0, r3
 8008216:	3301      	adds	r3, #1
 8008218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800821c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	6809      	ldr	r1, [r1, #0]
 8008224:	4313      	orrs	r3, r2
 8008226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69da      	ldr	r2, [r3, #28]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800824e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6911      	ldr	r1, [r2, #16]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68d2      	ldr	r2, [r2, #12]
 800825a:	4311      	orrs	r1, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	430b      	orrs	r3, r1
 8008262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695a      	ldr	r2, [r3, #20]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	000186a0 	.word	0x000186a0
 80082bc:	001e847f 	.word	0x001e847f
 80082c0:	003d08ff 	.word	0x003d08ff
 80082c4:	431bde83 	.word	0x431bde83
 80082c8:	10624dd3 	.word	0x10624dd3

080082cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e25b      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d075      	beq.n	80083d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082ea:	4ba3      	ldr	r3, [pc, #652]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d00c      	beq.n	8008310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082f6:	4ba0      	ldr	r3, [pc, #640]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d112      	bne.n	8008328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008302:	4b9d      	ldr	r3, [pc, #628]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800830e:	d10b      	bne.n	8008328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008310:	4b99      	ldr	r3, [pc, #612]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d05b      	beq.n	80083d4 <HAL_RCC_OscConfig+0x108>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d157      	bne.n	80083d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e236      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008330:	d106      	bne.n	8008340 <HAL_RCC_OscConfig+0x74>
 8008332:	4b91      	ldr	r3, [pc, #580]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a90      	ldr	r2, [pc, #576]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	e01d      	b.n	800837c <HAL_RCC_OscConfig+0xb0>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008348:	d10c      	bne.n	8008364 <HAL_RCC_OscConfig+0x98>
 800834a:	4b8b      	ldr	r3, [pc, #556]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a8a      	ldr	r2, [pc, #552]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4b88      	ldr	r3, [pc, #544]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a87      	ldr	r2, [pc, #540]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800835c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	e00b      	b.n	800837c <HAL_RCC_OscConfig+0xb0>
 8008364:	4b84      	ldr	r3, [pc, #528]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a83      	ldr	r2, [pc, #524]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800836a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	4b81      	ldr	r3, [pc, #516]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a80      	ldr	r2, [pc, #512]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800837a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008384:	f7fe fa12 	bl	80067ac <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800838c:	f7fe fa0e 	bl	80067ac <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	; 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e1fb      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839e:	4b76      	ldr	r3, [pc, #472]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0xc0>
 80083aa:	e014      	b.n	80083d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ac:	f7fe f9fe 	bl	80067ac <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083b4:	f7fe f9fa 	bl	80067ac <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	; 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e1e7      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083c6:	4b6c      	ldr	r3, [pc, #432]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f0      	bne.n	80083b4 <HAL_RCC_OscConfig+0xe8>
 80083d2:	e000      	b.n	80083d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d063      	beq.n	80084aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083e2:	4b65      	ldr	r3, [pc, #404]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 030c 	and.w	r3, r3, #12
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083ee:	4b62      	ldr	r3, [pc, #392]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d11c      	bne.n	8008434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083fa:	4b5f      	ldr	r3, [pc, #380]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d116      	bne.n	8008434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008406:	4b5c      	ldr	r3, [pc, #368]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_RCC_OscConfig+0x152>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d001      	beq.n	800841e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e1bb      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841e:	4b56      	ldr	r3, [pc, #344]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4952      	ldr	r1, [pc, #328]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800842e:	4313      	orrs	r3, r2
 8008430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008432:	e03a      	b.n	80084aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d020      	beq.n	800847e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800843c:	4b4f      	ldr	r3, [pc, #316]	; (800857c <HAL_RCC_OscConfig+0x2b0>)
 800843e:	2201      	movs	r2, #1
 8008440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008442:	f7fe f9b3 	bl	80067ac <HAL_GetTick>
 8008446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008448:	e008      	b.n	800845c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800844a:	f7fe f9af 	bl	80067ac <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e19c      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800845c:	4b46      	ldr	r3, [pc, #280]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0f0      	beq.n	800844a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008468:	4b43      	ldr	r3, [pc, #268]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	4940      	ldr	r1, [pc, #256]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008478:	4313      	orrs	r3, r2
 800847a:	600b      	str	r3, [r1, #0]
 800847c:	e015      	b.n	80084aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800847e:	4b3f      	ldr	r3, [pc, #252]	; (800857c <HAL_RCC_OscConfig+0x2b0>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008484:	f7fe f992 	bl	80067ac <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800848c:	f7fe f98e 	bl	80067ac <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e17b      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800849e:	4b36      	ldr	r3, [pc, #216]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f0      	bne.n	800848c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d030      	beq.n	8008518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d016      	beq.n	80084ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084be:	4b30      	ldr	r3, [pc, #192]	; (8008580 <HAL_RCC_OscConfig+0x2b4>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c4:	f7fe f972 	bl	80067ac <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084cc:	f7fe f96e 	bl	80067ac <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e15b      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084de:	4b26      	ldr	r3, [pc, #152]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 80084e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f0      	beq.n	80084cc <HAL_RCC_OscConfig+0x200>
 80084ea:	e015      	b.n	8008518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084ec:	4b24      	ldr	r3, [pc, #144]	; (8008580 <HAL_RCC_OscConfig+0x2b4>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084f2:	f7fe f95b 	bl	80067ac <HAL_GetTick>
 80084f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084f8:	e008      	b.n	800850c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084fa:	f7fe f957 	bl	80067ac <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e144      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800850e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f0      	bne.n	80084fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80a0 	beq.w	8008666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008526:	2300      	movs	r3, #0
 8008528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10f      	bne.n	8008556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008536:	2300      	movs	r3, #0
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	4a0e      	ldr	r2, [pc, #56]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008544:	6413      	str	r3, [r2, #64]	; 0x40
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <HAL_RCC_OscConfig+0x2ac>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008552:	2301      	movs	r3, #1
 8008554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <HAL_RCC_OscConfig+0x2b8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855e:	2b00      	cmp	r3, #0
 8008560:	d121      	bne.n	80085a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <HAL_RCC_OscConfig+0x2b8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a07      	ldr	r2, [pc, #28]	; (8008584 <HAL_RCC_OscConfig+0x2b8>)
 8008568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800856e:	f7fe f91d 	bl	80067ac <HAL_GetTick>
 8008572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008574:	e011      	b.n	800859a <HAL_RCC_OscConfig+0x2ce>
 8008576:	bf00      	nop
 8008578:	40023800 	.word	0x40023800
 800857c:	42470000 	.word	0x42470000
 8008580:	42470e80 	.word	0x42470e80
 8008584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008588:	f7fe f910 	bl	80067ac <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e0fd      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800859a:	4b81      	ldr	r3, [pc, #516]	; (80087a0 <HAL_RCC_OscConfig+0x4d4>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0f0      	beq.n	8008588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d106      	bne.n	80085bc <HAL_RCC_OscConfig+0x2f0>
 80085ae:	4b7d      	ldr	r3, [pc, #500]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	4a7c      	ldr	r2, [pc, #496]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	6713      	str	r3, [r2, #112]	; 0x70
 80085ba:	e01c      	b.n	80085f6 <HAL_RCC_OscConfig+0x32a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d10c      	bne.n	80085de <HAL_RCC_OscConfig+0x312>
 80085c4:	4b77      	ldr	r3, [pc, #476]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c8:	4a76      	ldr	r2, [pc, #472]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085ca:	f043 0304 	orr.w	r3, r3, #4
 80085ce:	6713      	str	r3, [r2, #112]	; 0x70
 80085d0:	4b74      	ldr	r3, [pc, #464]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	4a73      	ldr	r2, [pc, #460]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	6713      	str	r3, [r2, #112]	; 0x70
 80085dc:	e00b      	b.n	80085f6 <HAL_RCC_OscConfig+0x32a>
 80085de:	4b71      	ldr	r3, [pc, #452]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e2:	4a70      	ldr	r2, [pc, #448]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	6713      	str	r3, [r2, #112]	; 0x70
 80085ea:	4b6e      	ldr	r3, [pc, #440]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ee:	4a6d      	ldr	r2, [pc, #436]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80085f0:	f023 0304 	bic.w	r3, r3, #4
 80085f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d015      	beq.n	800862a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085fe:	f7fe f8d5 	bl	80067ac <HAL_GetTick>
 8008602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008604:	e00a      	b.n	800861c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008606:	f7fe f8d1 	bl	80067ac <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	f241 3288 	movw	r2, #5000	; 0x1388
 8008614:	4293      	cmp	r3, r2
 8008616:	d901      	bls.n	800861c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e0bc      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861c:	4b61      	ldr	r3, [pc, #388]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0ee      	beq.n	8008606 <HAL_RCC_OscConfig+0x33a>
 8008628:	e014      	b.n	8008654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800862a:	f7fe f8bf 	bl	80067ac <HAL_GetTick>
 800862e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008630:	e00a      	b.n	8008648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008632:	f7fe f8bb 	bl	80067ac <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008640:	4293      	cmp	r3, r2
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e0a6      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008648:	4b56      	ldr	r3, [pc, #344]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 800864a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1ee      	bne.n	8008632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d105      	bne.n	8008666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800865a:	4b52      	ldr	r3, [pc, #328]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	4a51      	ldr	r2, [pc, #324]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 8008660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8092 	beq.w	8008794 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008670:	4b4c      	ldr	r3, [pc, #304]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 030c 	and.w	r3, r3, #12
 8008678:	2b08      	cmp	r3, #8
 800867a:	d05c      	beq.n	8008736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d141      	bne.n	8008708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008684:	4b48      	ldr	r3, [pc, #288]	; (80087a8 <HAL_RCC_OscConfig+0x4dc>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868a:	f7fe f88f 	bl	80067ac <HAL_GetTick>
 800868e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008690:	e008      	b.n	80086a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008692:	f7fe f88b 	bl	80067ac <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d901      	bls.n	80086a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e078      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a4:	4b3f      	ldr	r3, [pc, #252]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1f0      	bne.n	8008692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69da      	ldr	r2, [r3, #28]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	019b      	lsls	r3, r3, #6
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	3b01      	subs	r3, #1
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	061b      	lsls	r3, r3, #24
 80086d4:	4933      	ldr	r1, [pc, #204]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086da:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <HAL_RCC_OscConfig+0x4dc>)
 80086dc:	2201      	movs	r2, #1
 80086de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e0:	f7fe f864 	bl	80067ac <HAL_GetTick>
 80086e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e8:	f7fe f860 	bl	80067ac <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e04d      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086fa:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f0      	beq.n	80086e8 <HAL_RCC_OscConfig+0x41c>
 8008706:	e045      	b.n	8008794 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008708:	4b27      	ldr	r3, [pc, #156]	; (80087a8 <HAL_RCC_OscConfig+0x4dc>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800870e:	f7fe f84d 	bl	80067ac <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008716:	f7fe f849 	bl	80067ac <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e036      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008728:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1f0      	bne.n	8008716 <HAL_RCC_OscConfig+0x44a>
 8008734:	e02e      	b.n	8008794 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e029      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008742:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <HAL_RCC_OscConfig+0x4d8>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	429a      	cmp	r2, r3
 8008754:	d11c      	bne.n	8008790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008760:	429a      	cmp	r2, r3
 8008762:	d115      	bne.n	8008790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800876a:	4013      	ands	r3, r2
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008770:	4293      	cmp	r3, r2
 8008772:	d10d      	bne.n	8008790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800877e:	429a      	cmp	r2, r3
 8008780:	d106      	bne.n	8008790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800878c:	429a      	cmp	r2, r3
 800878e:	d001      	beq.n	8008794 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40007000 	.word	0x40007000
 80087a4:	40023800 	.word	0x40023800
 80087a8:	42470060 	.word	0x42470060

080087ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e0cc      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087c0:	4b68      	ldr	r3, [pc, #416]	; (8008964 <HAL_RCC_ClockConfig+0x1b8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d90c      	bls.n	80087e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ce:	4b65      	ldr	r3, [pc, #404]	; (8008964 <HAL_RCC_ClockConfig+0x1b8>)
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d6:	4b63      	ldr	r3, [pc, #396]	; (8008964 <HAL_RCC_ClockConfig+0x1b8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d001      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0b8      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d020      	beq.n	8008836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008800:	4b59      	ldr	r3, [pc, #356]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4a58      	ldr	r2, [pc, #352]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800880a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008818:	4b53      	ldr	r3, [pc, #332]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	4a52      	ldr	r2, [pc, #328]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800881e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008824:	4b50      	ldr	r3, [pc, #320]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	494d      	ldr	r1, [pc, #308]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008832:	4313      	orrs	r3, r2
 8008834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d044      	beq.n	80088cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d107      	bne.n	800885a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800884a:	4b47      	ldr	r3, [pc, #284]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d119      	bne.n	800888a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e07f      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d003      	beq.n	800886a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008866:	2b03      	cmp	r3, #3
 8008868:	d107      	bne.n	800887a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800886a:	4b3f      	ldr	r3, [pc, #252]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e06f      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800887a:	4b3b      	ldr	r3, [pc, #236]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e067      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800888a:	4b37      	ldr	r3, [pc, #220]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f023 0203 	bic.w	r2, r3, #3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4934      	ldr	r1, [pc, #208]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008898:	4313      	orrs	r3, r2
 800889a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800889c:	f7fd ff86 	bl	80067ac <HAL_GetTick>
 80088a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088a2:	e00a      	b.n	80088ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088a4:	f7fd ff82 	bl	80067ac <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e04f      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ba:	4b2b      	ldr	r3, [pc, #172]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 020c 	and.w	r2, r3, #12
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d1eb      	bne.n	80088a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088cc:	4b25      	ldr	r3, [pc, #148]	; (8008964 <HAL_RCC_ClockConfig+0x1b8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d20c      	bcs.n	80088f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <HAL_RCC_ClockConfig+0x1b8>)
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e2:	4b20      	ldr	r3, [pc, #128]	; (8008964 <HAL_RCC_ClockConfig+0x1b8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e032      	b.n	800895a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008900:	4b19      	ldr	r3, [pc, #100]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	4916      	ldr	r1, [pc, #88]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800890e:	4313      	orrs	r3, r2
 8008910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0308 	and.w	r3, r3, #8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800891e:	4b12      	ldr	r3, [pc, #72]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	490e      	ldr	r1, [pc, #56]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	4313      	orrs	r3, r2
 8008930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008932:	f000 f821 	bl	8008978 <HAL_RCC_GetSysClockFreq>
 8008936:	4601      	mov	r1, r0
 8008938:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	4a0a      	ldr	r2, [pc, #40]	; (800896c <HAL_RCC_ClockConfig+0x1c0>)
 8008944:	5cd3      	ldrb	r3, [r2, r3]
 8008946:	fa21 f303 	lsr.w	r3, r1, r3
 800894a:	4a09      	ldr	r2, [pc, #36]	; (8008970 <HAL_RCC_ClockConfig+0x1c4>)
 800894c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <HAL_RCC_ClockConfig+0x1c8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fee6 	bl	8006724 <HAL_InitTick>

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	40023c00 	.word	0x40023c00
 8008968:	40023800 	.word	0x40023800
 800896c:	08010e18 	.word	0x08010e18
 8008970:	20000034 	.word	0x20000034
 8008974:	20000038 	.word	0x20000038

08008978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	2300      	movs	r3, #0
 8008988:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800898e:	4b50      	ldr	r3, [pc, #320]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 030c 	and.w	r3, r3, #12
 8008996:	2b04      	cmp	r3, #4
 8008998:	d007      	beq.n	80089aa <HAL_RCC_GetSysClockFreq+0x32>
 800899a:	2b08      	cmp	r3, #8
 800899c:	d008      	beq.n	80089b0 <HAL_RCC_GetSysClockFreq+0x38>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f040 808d 	bne.w	8008abe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089a4:	4b4b      	ldr	r3, [pc, #300]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80089a6:	60bb      	str	r3, [r7, #8]
       break;
 80089a8:	e08c      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089aa:	4b4b      	ldr	r3, [pc, #300]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089ac:	60bb      	str	r3, [r7, #8]
      break;
 80089ae:	e089      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089b0:	4b47      	ldr	r3, [pc, #284]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089ba:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d023      	beq.n	8008a0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089c6:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	099b      	lsrs	r3, r3, #6
 80089cc:	f04f 0400 	mov.w	r4, #0
 80089d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	ea03 0501 	and.w	r5, r3, r1
 80089dc:	ea04 0602 	and.w	r6, r4, r2
 80089e0:	4a3d      	ldr	r2, [pc, #244]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089e2:	fb02 f106 	mul.w	r1, r2, r6
 80089e6:	2200      	movs	r2, #0
 80089e8:	fb02 f205 	mul.w	r2, r2, r5
 80089ec:	440a      	add	r2, r1
 80089ee:	493a      	ldr	r1, [pc, #232]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089f0:	fba5 0101 	umull	r0, r1, r5, r1
 80089f4:	1853      	adds	r3, r2, r1
 80089f6:	4619      	mov	r1, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f04f 0400 	mov.w	r4, #0
 80089fe:	461a      	mov	r2, r3
 8008a00:	4623      	mov	r3, r4
 8008a02:	f7f8 f941 	bl	8000c88 <__aeabi_uldivmod>
 8008a06:	4603      	mov	r3, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e049      	b.n	8008aa2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a0e:	4b30      	ldr	r3, [pc, #192]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	099b      	lsrs	r3, r3, #6
 8008a14:	f04f 0400 	mov.w	r4, #0
 8008a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	ea03 0501 	and.w	r5, r3, r1
 8008a24:	ea04 0602 	and.w	r6, r4, r2
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	f04f 0400 	mov.w	r4, #0
 8008a34:	0154      	lsls	r4, r2, #5
 8008a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008a3a:	014b      	lsls	r3, r1, #5
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4622      	mov	r2, r4
 8008a40:	1b49      	subs	r1, r1, r5
 8008a42:	eb62 0206 	sbc.w	r2, r2, r6
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	f04f 0400 	mov.w	r4, #0
 8008a4e:	0194      	lsls	r4, r2, #6
 8008a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008a54:	018b      	lsls	r3, r1, #6
 8008a56:	1a5b      	subs	r3, r3, r1
 8008a58:	eb64 0402 	sbc.w	r4, r4, r2
 8008a5c:	f04f 0100 	mov.w	r1, #0
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	00e2      	lsls	r2, r4, #3
 8008a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008a6a:	00d9      	lsls	r1, r3, #3
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4614      	mov	r4, r2
 8008a70:	195b      	adds	r3, r3, r5
 8008a72:	eb44 0406 	adc.w	r4, r4, r6
 8008a76:	f04f 0100 	mov.w	r1, #0
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	02a2      	lsls	r2, r4, #10
 8008a80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a84:	0299      	lsls	r1, r3, #10
 8008a86:	460b      	mov	r3, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f04f 0400 	mov.w	r4, #0
 8008a94:	461a      	mov	r2, r3
 8008a96:	4623      	mov	r3, r4
 8008a98:	f7f8 f8f6 	bl	8000c88 <__aeabi_uldivmod>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	0c1b      	lsrs	r3, r3, #16
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	3301      	adds	r3, #1
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aba:	60bb      	str	r3, [r7, #8]
      break;
 8008abc:	e002      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008ac0:	60bb      	str	r3, [r7, #8]
      break;
 8008ac2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	40023800 	.word	0x40023800
 8008ad4:	00f42400 	.word	0x00f42400
 8008ad8:	00bebc20 	.word	0x00bebc20

08008adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ae0:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000034 	.word	0x20000034

08008af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008af8:	f7ff fff0 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008afc:	4601      	mov	r1, r0
 8008afe:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	0a9b      	lsrs	r3, r3, #10
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	4a03      	ldr	r2, [pc, #12]	; (8008b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b0a:	5cd3      	ldrb	r3, [r2, r3]
 8008b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	40023800 	.word	0x40023800
 8008b18:	08010e28 	.word	0x08010e28

08008b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b20:	f7ff ffdc 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b24:	4601      	mov	r1, r0
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	0b5b      	lsrs	r3, r3, #13
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	4a03      	ldr	r2, [pc, #12]	; (8008b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b32:	5cd3      	ldrb	r3, [r2, r3]
 8008b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	08010e28 	.word	0x08010e28

08008b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e056      	b.n	8008c04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d106      	bne.n	8008b76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7fd fa67 	bl	8006044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	ea42 0103 	orr.w	r1, r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	0c1b      	lsrs	r3, r3, #16
 8008bd4:	f003 0104 	and.w	r1, r3, #4
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69da      	ldr	r2, [r3, #28]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <HAL_SPI_Transmit+0x22>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e11e      	b.n	8008e6c <HAL_SPI_Transmit+0x260>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c36:	f7fd fdb9 	bl	80067ac <HAL_GetTick>
 8008c3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d002      	beq.n	8008c52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c50:	e103      	b.n	8008e5a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <HAL_SPI_Transmit+0x52>
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c62:	e0fa      	b.n	8008e5a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2203      	movs	r2, #3
 8008c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	88fa      	ldrh	r2, [r7, #6]
 8008c82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008caa:	d107      	bne.n	8008cbc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b40      	cmp	r3, #64	; 0x40
 8008cc8:	d007      	beq.n	8008cda <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce2:	d14b      	bne.n	8008d7c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_SPI_Transmit+0xe6>
 8008cec:	8afb      	ldrh	r3, [r7, #22]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d13e      	bne.n	8008d70 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	881a      	ldrh	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	1c9a      	adds	r2, r3, #2
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d16:	e02b      	b.n	8008d70 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d112      	bne.n	8008d4c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	881a      	ldrh	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d36:	1c9a      	adds	r2, r3, #2
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d4a:	e011      	b.n	8008d70 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d4c:	f7fd fd2e 	bl	80067ac <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d803      	bhi.n	8008d64 <HAL_SPI_Transmit+0x158>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d102      	bne.n	8008d6a <HAL_SPI_Transmit+0x15e>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d6e:	e074      	b.n	8008e5a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1ce      	bne.n	8008d18 <HAL_SPI_Transmit+0x10c>
 8008d7a:	e04c      	b.n	8008e16 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <HAL_SPI_Transmit+0x17e>
 8008d84:	8afb      	ldrh	r3, [r7, #22]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d140      	bne.n	8008e0c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	330c      	adds	r3, #12
 8008d94:	7812      	ldrb	r2, [r2, #0]
 8008d96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	3b01      	subs	r3, #1
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008db0:	e02c      	b.n	8008e0c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d113      	bne.n	8008de8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3b01      	subs	r3, #1
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008de6:	e011      	b.n	8008e0c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008de8:	f7fd fce0 	bl	80067ac <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d803      	bhi.n	8008e00 <HAL_SPI_Transmit+0x1f4>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d102      	bne.n	8008e06 <HAL_SPI_Transmit+0x1fa>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e0a:	e026      	b.n	8008e5a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1cd      	bne.n	8008db2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fba4 	bl	8009568 <SPI_EndRxTxTransaction>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e34:	2300      	movs	r3, #0
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	77fb      	strb	r3, [r7, #31]
 8008e56:	e000      	b.n	8008e5a <HAL_SPI_Transmit+0x24e>
  }

error:
 8008e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3720      	adds	r7, #32
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e90:	d112      	bne.n	8008eb8 <HAL_SPI_Receive+0x44>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10e      	bne.n	8008eb8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 f8e9 	bl	8009086 <HAL_SPI_TransmitReceive>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	e0e2      	b.n	800907e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_SPI_Receive+0x52>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e0db      	b.n	800907e <HAL_SPI_Receive+0x20a>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ece:	f7fd fc6d 	bl	80067ac <HAL_GetTick>
 8008ed2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d002      	beq.n	8008ee6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ee4:	e0c2      	b.n	800906c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <HAL_SPI_Receive+0x7e>
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ef6:	e0b9      	b.n	800906c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2204      	movs	r2, #4
 8008efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	88fa      	ldrh	r2, [r7, #6]
 8008f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f3e:	d107      	bne.n	8008f50 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5a:	2b40      	cmp	r3, #64	; 0x40
 8008f5c:	d007      	beq.n	8008f6e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d162      	bne.n	800903c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008f76:	e02e      	b.n	8008fd6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d115      	bne.n	8008fb2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f103 020c 	add.w	r2, r3, #12
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	b2d2      	uxtb	r2, r2
 8008f96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fb0:	e011      	b.n	8008fd6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fb2:	f7fd fbfb 	bl	80067ac <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d803      	bhi.n	8008fca <HAL_SPI_Receive+0x156>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d102      	bne.n	8008fd0 <HAL_SPI_Receive+0x15c>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008fd4:	e04a      	b.n	800906c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1cb      	bne.n	8008f78 <HAL_SPI_Receive+0x104>
 8008fe0:	e031      	b.n	8009046 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d113      	bne.n	8009018 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009016:	e011      	b.n	800903c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009018:	f7fd fbc8 	bl	80067ac <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d803      	bhi.n	8009030 <HAL_SPI_Receive+0x1bc>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902e:	d102      	bne.n	8009036 <HAL_SPI_Receive+0x1c2>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	75fb      	strb	r3, [r7, #23]
          goto error;
 800903a:	e017      	b.n	800906c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009040:	b29b      	uxth	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1cd      	bne.n	8008fe2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f000 fa27 	bl	800949e <SPI_EndRxTransaction>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
 8009068:	e000      	b.n	800906c <HAL_SPI_Receive+0x1f8>
  }

error :
 800906a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b08c      	sub	sp, #48	; 0x30
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009094:	2301      	movs	r3, #1
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_SPI_TransmitReceive+0x26>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e18a      	b.n	80093c2 <HAL_SPI_TransmitReceive+0x33c>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090b4:	f7fd fb7a 	bl	80067ac <HAL_GetTick>
 80090b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80090ca:	887b      	ldrh	r3, [r7, #2]
 80090cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80090ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d00f      	beq.n	80090f6 <HAL_SPI_TransmitReceive+0x70>
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090dc:	d107      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x68>
 80090e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d003      	beq.n	80090f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80090ee:	2302      	movs	r3, #2
 80090f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80090f4:	e15b      	b.n	80093ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_SPI_TransmitReceive+0x82>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <HAL_SPI_TransmitReceive+0x82>
 8009102:	887b      	ldrh	r3, [r7, #2]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d103      	bne.n	8009110 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800910e:	e14e      	b.n	80093ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b04      	cmp	r3, #4
 800911a:	d003      	beq.n	8009124 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2205      	movs	r2, #5
 8009120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	887a      	ldrh	r2, [r7, #2]
 8009134:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	887a      	ldrh	r2, [r7, #2]
 800913a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	887a      	ldrh	r2, [r7, #2]
 8009146:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	887a      	ldrh	r2, [r7, #2]
 800914c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009164:	2b40      	cmp	r3, #64	; 0x40
 8009166:	d007      	beq.n	8009178 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009176:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009180:	d178      	bne.n	8009274 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <HAL_SPI_TransmitReceive+0x10a>
 800918a:	8b7b      	ldrh	r3, [r7, #26]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d166      	bne.n	800925e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	881a      	ldrh	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	1c9a      	adds	r2, r3, #2
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b4:	e053      	b.n	800925e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d11b      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x176>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d016      	beq.n	80091fc <HAL_SPI_TransmitReceive+0x176>
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d113      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d8:	881a      	ldrh	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e4:	1c9a      	adds	r2, r3, #2
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b01      	cmp	r3, #1
 8009208:	d119      	bne.n	800923e <HAL_SPI_TransmitReceive+0x1b8>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d014      	beq.n	800923e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	b292      	uxth	r2, r2
 8009220:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009226:	1c9a      	adds	r2, r3, #2
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800923a:	2301      	movs	r3, #1
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800923e:	f7fd fab5 	bl	80067ac <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800924a:	429a      	cmp	r2, r3
 800924c:	d807      	bhi.n	800925e <HAL_SPI_TransmitReceive+0x1d8>
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d003      	beq.n	800925e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800925c:	e0a7      	b.n	80093ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1a6      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x130>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1a1      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x130>
 8009272:	e07c      	b.n	800936e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_SPI_TransmitReceive+0x1fc>
 800927c:	8b7b      	ldrh	r3, [r7, #26]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d16b      	bne.n	800935a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092a8:	e057      	b.n	800935a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d11c      	bne.n	80092f2 <HAL_SPI_TransmitReceive+0x26c>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d017      	beq.n	80092f2 <HAL_SPI_TransmitReceive+0x26c>
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d114      	bne.n	80092f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	330c      	adds	r3, #12
 80092d2:	7812      	ldrb	r2, [r2, #0]
 80092d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d119      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x2ae>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009304:	b29b      	uxth	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d014      	beq.n	8009334 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009326:	b29b      	uxth	r3, r3
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009330:	2301      	movs	r3, #1
 8009332:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009334:	f7fd fa3a 	bl	80067ac <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009340:	429a      	cmp	r2, r3
 8009342:	d803      	bhi.n	800934c <HAL_SPI_TransmitReceive+0x2c6>
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d102      	bne.n	8009352 <HAL_SPI_TransmitReceive+0x2cc>
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009358:	e029      	b.n	80093ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1a2      	bne.n	80092aa <HAL_SPI_TransmitReceive+0x224>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d19d      	bne.n	80092aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800936e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 f8f8 	bl	8009568 <SPI_EndRxTxTransaction>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d006      	beq.n	800938c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2220      	movs	r2, #32
 8009388:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800938a:	e010      	b.n	80093ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10b      	bne.n	80093ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009394:	2300      	movs	r3, #0
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	e000      	b.n	80093ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80093ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80093be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3730      	adds	r7, #48	; 0x30
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	4613      	mov	r3, r2
 80093d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093da:	e04c      	b.n	8009476 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e2:	d048      	beq.n	8009476 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80093e4:	f7fd f9e2 	bl	80067ac <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d902      	bls.n	80093fa <SPI_WaitFlagStateUntilTimeout+0x30>
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d13d      	bne.n	8009476 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009408:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009412:	d111      	bne.n	8009438 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941c:	d004      	beq.n	8009428 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009426:	d107      	bne.n	8009438 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009436:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009440:	d10f      	bne.n	8009462 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009460:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e00f      	b.n	8009496 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4013      	ands	r3, r2
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	429a      	cmp	r2, r3
 8009484:	bf0c      	ite	eq
 8009486:	2301      	moveq	r3, #1
 8009488:	2300      	movne	r3, #0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	461a      	mov	r2, r3
 800948e:	79fb      	ldrb	r3, [r7, #7]
 8009490:	429a      	cmp	r2, r3
 8009492:	d1a3      	bne.n	80093dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af02      	add	r7, sp, #8
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094b2:	d111      	bne.n	80094d8 <SPI_EndRxTransaction+0x3a>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094bc:	d004      	beq.n	80094c8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094c6:	d107      	bne.n	80094d8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094d6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e0:	d12a      	bne.n	8009538 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ea:	d012      	beq.n	8009512 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2200      	movs	r2, #0
 80094f4:	2180      	movs	r1, #128	; 0x80
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff ff67 	bl	80093ca <SPI_WaitFlagStateUntilTimeout>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d02d      	beq.n	800955e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009506:	f043 0220 	orr.w	r2, r3, #32
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e026      	b.n	8009560 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2200      	movs	r2, #0
 800951a:	2101      	movs	r1, #1
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f7ff ff54 	bl	80093ca <SPI_WaitFlagStateUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01a      	beq.n	800955e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952c:	f043 0220 	orr.w	r2, r3, #32
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e013      	b.n	8009560 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	2101      	movs	r1, #1
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff ff41 	bl	80093ca <SPI_WaitFlagStateUntilTimeout>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009552:	f043 0220 	orr.w	r2, r3, #32
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e000      	b.n	8009560 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009574:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <SPI_EndRxTxTransaction+0x7c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1b      	ldr	r2, [pc, #108]	; (80095e8 <SPI_EndRxTxTransaction+0x80>)
 800957a:	fba2 2303 	umull	r2, r3, r2, r3
 800957e:	0d5b      	lsrs	r3, r3, #21
 8009580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009584:	fb02 f303 	mul.w	r3, r2, r3
 8009588:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009592:	d112      	bne.n	80095ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	2180      	movs	r1, #128	; 0x80
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff ff13 	bl	80093ca <SPI_WaitFlagStateUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d016      	beq.n	80095d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ae:	f043 0220 	orr.w	r2, r3, #32
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e00f      	b.n	80095da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b80      	cmp	r3, #128	; 0x80
 80095d2:	d0f2      	beq.n	80095ba <SPI_EndRxTxTransaction+0x52>
 80095d4:	e000      	b.n	80095d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80095d6:	bf00      	nop
  }

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000034 	.word	0x20000034
 80095e8:	165e9f81 	.word	0x165e9f81

080095ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e01d      	b.n	800963a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fc fe12 	bl	800623c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3304      	adds	r3, #4
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f000 fb56 	bl	8009cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0201 	orr.w	r2, r2, #1
 8009658:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b06      	cmp	r3, #6
 800966a:	d007      	beq.n	800967c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e01d      	b.n	80096d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d106      	bne.n	80096b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7fc fd0f 	bl	80060d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2202      	movs	r2, #2
 80096ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f000 fb07 	bl	8009cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2201      	movs	r2, #1
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fd42 	bl	800a17c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a15      	ldr	r2, [pc, #84]	; (8009754 <HAL_TIM_PWM_Start+0x74>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_TIM_PWM_Start+0x2c>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a14      	ldr	r2, [pc, #80]	; (8009758 <HAL_TIM_PWM_Start+0x78>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d101      	bne.n	8009710 <HAL_TIM_PWM_Start+0x30>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <HAL_TIM_PWM_Start+0x32>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d007      	beq.n	8009726 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 0307 	and.w	r3, r3, #7
 8009730:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b06      	cmp	r3, #6
 8009736:	d007      	beq.n	8009748 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0201 	orr.w	r2, r2, #1
 8009746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400

0800975c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e083      	b.n	8009878 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d106      	bne.n	800978a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fc fcdd 	bl	8006144 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2202      	movs	r2, #2
 800978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097a0:	f023 0307 	bic.w	r3, r3, #7
 80097a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f000 fa93 	bl	8009cdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	4313      	orrs	r3, r2
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80097fc:	f023 030c 	bic.w	r3, r3, #12
 8009800:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800980c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	4313      	orrs	r3, r2
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	4313      	orrs	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	011a      	lsls	r2, r3, #4
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	031b      	lsls	r3, r3, #12
 800982c:	4313      	orrs	r3, r2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800983a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009842:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	4313      	orrs	r3, r2
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <HAL_TIM_Encoder_Start+0x16>
 8009890:	2b04      	cmp	r3, #4
 8009892:	d008      	beq.n	80098a6 <HAL_TIM_Encoder_Start+0x26>
 8009894:	e00f      	b.n	80098b6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2201      	movs	r2, #1
 800989c:	2100      	movs	r1, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fc6c 	bl	800a17c <TIM_CCxChannelCmd>
      break;
 80098a4:	e016      	b.n	80098d4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2201      	movs	r2, #1
 80098ac:	2104      	movs	r1, #4
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fc64 	bl	800a17c <TIM_CCxChannelCmd>
      break;
 80098b4:	e00e      	b.n	80098d4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2201      	movs	r2, #1
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fc5c 	bl	800a17c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2201      	movs	r2, #1
 80098ca:	2104      	movs	r1, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fc55 	bl	800a17c <TIM_CCxChannelCmd>
      break;
 80098d2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b02      	cmp	r3, #2
 8009902:	d122      	bne.n	800994a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b02      	cmp	r3, #2
 8009910:	d11b      	bne.n	800994a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f06f 0202 	mvn.w	r2, #2
 800991a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	f003 0303 	and.w	r3, r3, #3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f9b5 	bl	8009ca0 <HAL_TIM_IC_CaptureCallback>
 8009936:	e005      	b.n	8009944 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f9a7 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9b8 	bl	8009cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b04      	cmp	r3, #4
 8009956:	d122      	bne.n	800999e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b04      	cmp	r3, #4
 8009964:	d11b      	bne.n	800999e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f06f 0204 	mvn.w	r2, #4
 800996e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f98b 	bl	8009ca0 <HAL_TIM_IC_CaptureCallback>
 800998a:	e005      	b.n	8009998 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f97d 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f98e 	bl	8009cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d122      	bne.n	80099f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	d11b      	bne.n	80099f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f06f 0208 	mvn.w	r2, #8
 80099c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2204      	movs	r2, #4
 80099c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f961 	bl	8009ca0 <HAL_TIM_IC_CaptureCallback>
 80099de:	e005      	b.n	80099ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f953 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f964 	bl	8009cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f003 0310 	and.w	r3, r3, #16
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d122      	bne.n	8009a46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b10      	cmp	r3, #16
 8009a0c:	d11b      	bne.n	8009a46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f06f 0210 	mvn.w	r2, #16
 8009a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2208      	movs	r2, #8
 8009a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f937 	bl	8009ca0 <HAL_TIM_IC_CaptureCallback>
 8009a32:	e005      	b.n	8009a40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f929 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f93a 	bl	8009cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d10e      	bne.n	8009a72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d107      	bne.n	8009a72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f06f 0201 	mvn.w	r2, #1
 8009a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7fa f959 	bl	8003d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7c:	2b80      	cmp	r3, #128	; 0x80
 8009a7e:	d10e      	bne.n	8009a9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d107      	bne.n	8009a9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fc6d 	bl	800a378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa8:	2b40      	cmp	r3, #64	; 0x40
 8009aaa:	d10e      	bne.n	8009aca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d107      	bne.n	8009aca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f8ff 	bl	8009cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d10e      	bne.n	8009af6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d107      	bne.n	8009af6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f06f 0220 	mvn.w	r2, #32
 8009aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc37 	bl	800a364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e0b4      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2202      	movs	r2, #2
 8009b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b0c      	cmp	r3, #12
 8009b2e:	f200 809f 	bhi.w	8009c70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b6d 	.word	0x08009b6d
 8009b3c:	08009c71 	.word	0x08009c71
 8009b40:	08009c71 	.word	0x08009c71
 8009b44:	08009c71 	.word	0x08009c71
 8009b48:	08009bad 	.word	0x08009bad
 8009b4c:	08009c71 	.word	0x08009c71
 8009b50:	08009c71 	.word	0x08009c71
 8009b54:	08009c71 	.word	0x08009c71
 8009b58:	08009bef 	.word	0x08009bef
 8009b5c:	08009c71 	.word	0x08009c71
 8009b60:	08009c71 	.word	0x08009c71
 8009b64:	08009c71 	.word	0x08009c71
 8009b68:	08009c2f 	.word	0x08009c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f952 	bl	8009e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0208 	orr.w	r2, r2, #8
 8009b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0204 	bic.w	r2, r2, #4
 8009b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6999      	ldr	r1, [r3, #24]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	691a      	ldr	r2, [r3, #16]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	619a      	str	r2, [r3, #24]
      break;
 8009baa:	e062      	b.n	8009c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f9a2 	bl	8009efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6999      	ldr	r1, [r3, #24]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	021a      	lsls	r2, r3, #8
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	619a      	str	r2, [r3, #24]
      break;
 8009bec:	e041      	b.n	8009c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68b9      	ldr	r1, [r7, #8]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 f9f7 	bl	8009fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69da      	ldr	r2, [r3, #28]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0208 	orr.w	r2, r2, #8
 8009c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0204 	bic.w	r2, r2, #4
 8009c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69d9      	ldr	r1, [r3, #28]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	691a      	ldr	r2, [r3, #16]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	61da      	str	r2, [r3, #28]
      break;
 8009c2c:	e021      	b.n	8009c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fa4b 	bl	800a0d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69da      	ldr	r2, [r3, #28]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69da      	ldr	r2, [r3, #28]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69d9      	ldr	r1, [r3, #28]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	021a      	lsls	r2, r3, #8
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	61da      	str	r2, [r3, #28]
      break;
 8009c6e:	e000      	b.n	8009c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009c70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a40      	ldr	r2, [pc, #256]	; (8009df0 <TIM_Base_SetConfig+0x114>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d013      	beq.n	8009d1c <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfa:	d00f      	beq.n	8009d1c <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a3d      	ldr	r2, [pc, #244]	; (8009df4 <TIM_Base_SetConfig+0x118>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00b      	beq.n	8009d1c <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a3c      	ldr	r2, [pc, #240]	; (8009df8 <TIM_Base_SetConfig+0x11c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d007      	beq.n	8009d1c <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a3b      	ldr	r2, [pc, #236]	; (8009dfc <TIM_Base_SetConfig+0x120>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a3a      	ldr	r2, [pc, #232]	; (8009e00 <TIM_Base_SetConfig+0x124>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d108      	bne.n	8009d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2f      	ldr	r2, [pc, #188]	; (8009df0 <TIM_Base_SetConfig+0x114>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d02b      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3c:	d027      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2c      	ldr	r2, [pc, #176]	; (8009df4 <TIM_Base_SetConfig+0x118>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d023      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2b      	ldr	r2, [pc, #172]	; (8009df8 <TIM_Base_SetConfig+0x11c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d01f      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2a      	ldr	r2, [pc, #168]	; (8009dfc <TIM_Base_SetConfig+0x120>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d01b      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a29      	ldr	r2, [pc, #164]	; (8009e00 <TIM_Base_SetConfig+0x124>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d017      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a28      	ldr	r2, [pc, #160]	; (8009e04 <TIM_Base_SetConfig+0x128>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d013      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a27      	ldr	r2, [pc, #156]	; (8009e08 <TIM_Base_SetConfig+0x12c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00f      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a26      	ldr	r2, [pc, #152]	; (8009e0c <TIM_Base_SetConfig+0x130>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00b      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a25      	ldr	r2, [pc, #148]	; (8009e10 <TIM_Base_SetConfig+0x134>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d007      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a24      	ldr	r2, [pc, #144]	; (8009e14 <TIM_Base_SetConfig+0x138>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d003      	beq.n	8009d8e <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a23      	ldr	r2, [pc, #140]	; (8009e18 <TIM_Base_SetConfig+0x13c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d108      	bne.n	8009da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a0a      	ldr	r2, [pc, #40]	; (8009df0 <TIM_Base_SetConfig+0x114>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d003      	beq.n	8009dd4 <TIM_Base_SetConfig+0xf8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a0c      	ldr	r2, [pc, #48]	; (8009e00 <TIM_Base_SetConfig+0x124>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d103      	bne.n	8009ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	615a      	str	r2, [r3, #20]
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	40010000 	.word	0x40010000
 8009df4:	40000400 	.word	0x40000400
 8009df8:	40000800 	.word	0x40000800
 8009dfc:	40000c00 	.word	0x40000c00
 8009e00:	40010400 	.word	0x40010400
 8009e04:	40014000 	.word	0x40014000
 8009e08:	40014400 	.word	0x40014400
 8009e0c:	40014800 	.word	0x40014800
 8009e10:	40001800 	.word	0x40001800
 8009e14:	40001c00 	.word	0x40001c00
 8009e18:	40002000 	.word	0x40002000

08009e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	f023 0201 	bic.w	r2, r3, #1
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f023 0303 	bic.w	r3, r3, #3
 8009e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f023 0302 	bic.w	r3, r3, #2
 8009e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a20      	ldr	r2, [pc, #128]	; (8009ef4 <TIM_OC1_SetConfig+0xd8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d003      	beq.n	8009e80 <TIM_OC1_SetConfig+0x64>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <TIM_OC1_SetConfig+0xdc>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d10c      	bne.n	8009e9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f023 0308 	bic.w	r3, r3, #8
 8009e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f023 0304 	bic.w	r3, r3, #4
 8009e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a15      	ldr	r2, [pc, #84]	; (8009ef4 <TIM_OC1_SetConfig+0xd8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d003      	beq.n	8009eaa <TIM_OC1_SetConfig+0x8e>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a14      	ldr	r2, [pc, #80]	; (8009ef8 <TIM_OC1_SetConfig+0xdc>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d111      	bne.n	8009ece <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	621a      	str	r2, [r3, #32]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40010000 	.word	0x40010000
 8009ef8:	40010400 	.word	0x40010400

08009efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	f023 0210 	bic.w	r2, r3, #16
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f023 0320 	bic.w	r3, r3, #32
 8009f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a22      	ldr	r2, [pc, #136]	; (8009fe0 <TIM_OC2_SetConfig+0xe4>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_OC2_SetConfig+0x68>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a21      	ldr	r2, [pc, #132]	; (8009fe4 <TIM_OC2_SetConfig+0xe8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d10d      	bne.n	8009f80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a17      	ldr	r2, [pc, #92]	; (8009fe0 <TIM_OC2_SetConfig+0xe4>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d003      	beq.n	8009f90 <TIM_OC2_SetConfig+0x94>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a16      	ldr	r2, [pc, #88]	; (8009fe4 <TIM_OC2_SetConfig+0xe8>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d113      	bne.n	8009fb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	40010000 	.word	0x40010000
 8009fe4:	40010400 	.word	0x40010400

08009fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0303 	bic.w	r3, r3, #3
 800a01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a21      	ldr	r2, [pc, #132]	; (800a0c8 <TIM_OC3_SetConfig+0xe0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_OC3_SetConfig+0x66>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a20      	ldr	r2, [pc, #128]	; (800a0cc <TIM_OC3_SetConfig+0xe4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d10d      	bne.n	800a06a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <TIM_OC3_SetConfig+0xe0>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d003      	beq.n	800a07a <TIM_OC3_SetConfig+0x92>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a15      	ldr	r2, [pc, #84]	; (800a0cc <TIM_OC3_SetConfig+0xe4>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d113      	bne.n	800a0a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	621a      	str	r2, [r3, #32]
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	40010000 	.word	0x40010000
 800a0cc:	40010400 	.word	0x40010400

0800a0d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a11a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	031b      	lsls	r3, r3, #12
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	4313      	orrs	r3, r2
 800a126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a12      	ldr	r2, [pc, #72]	; (800a174 <TIM_OC4_SetConfig+0xa4>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d003      	beq.n	800a138 <TIM_OC4_SetConfig+0x68>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a11      	ldr	r2, [pc, #68]	; (800a178 <TIM_OC4_SetConfig+0xa8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d109      	bne.n	800a14c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a13e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	019b      	lsls	r3, r3, #6
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	40010000 	.word	0x40010000
 800a178:	40010400 	.word	0x40010400

0800a17c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f003 031f 	and.w	r3, r3, #31
 800a18e:	2201      	movs	r2, #1
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a1a      	ldr	r2, [r3, #32]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	43db      	mvns	r3, r3
 800a19e:	401a      	ands	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a1a      	ldr	r2, [r3, #32]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f003 031f 	and.w	r3, r3, #31
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	621a      	str	r2, [r3, #32]
}
 800a1ba:	bf00      	nop
 800a1bc:	371c      	adds	r7, #28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
	...

0800a1c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e05a      	b.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a21      	ldr	r2, [pc, #132]	; (800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d022      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a22c:	d01d      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a1d      	ldr	r2, [pc, #116]	; (800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d018      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d013      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a1a      	ldr	r2, [pc, #104]	; (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00e      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a18      	ldr	r2, [pc, #96]	; (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d009      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a17      	ldr	r2, [pc, #92]	; (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d004      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a15      	ldr	r2, [pc, #84]	; (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d10c      	bne.n	800a284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	40010000 	.word	0x40010000
 800a2a8:	40000400 	.word	0x40000400
 800a2ac:	40000800 	.word	0x40000800
 800a2b0:	40000c00 	.word	0x40000c00
 800a2b4:	40010400 	.word	0x40010400
 800a2b8:	40014000 	.word	0x40014000
 800a2bc:	40001800 	.word	0x40001800

0800a2c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d101      	bne.n	800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a2d8:	2302      	movs	r3, #2
 800a2da:	e03d      	b.n	800a358 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4313      	orrs	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	4313      	orrs	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e03f      	b.n	800a41e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7fb ffec 	bl	8006390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2224      	movs	r2, #36	; 0x24
 800a3bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68da      	ldr	r2, [r3, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f90b 	bl	800a5ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	695a      	ldr	r2, [r3, #20]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b088      	sub	sp, #32
 800a42a:	af02      	add	r7, sp, #8
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	603b      	str	r3, [r7, #0]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b20      	cmp	r3, #32
 800a444:	f040 8083 	bne.w	800a54e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_UART_Transmit+0x2e>
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e07b      	b.n	800a550 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d101      	bne.n	800a466 <HAL_UART_Transmit+0x40>
 800a462:	2302      	movs	r3, #2
 800a464:	e074      	b.n	800a550 <HAL_UART_Transmit+0x12a>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2221      	movs	r2, #33	; 0x21
 800a478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a47c:	f7fc f996 	bl	80067ac <HAL_GetTick>
 800a480:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	88fa      	ldrh	r2, [r7, #6]
 800a486:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a496:	e042      	b.n	800a51e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ae:	d122      	bne.n	800a4f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2180      	movs	r1, #128	; 0x80
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f84c 	bl	800a558 <UART_WaitOnFlagUntilTimeout>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e042      	b.n	800a550 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	3302      	adds	r3, #2
 800a4ea:	60bb      	str	r3, [r7, #8]
 800a4ec:	e017      	b.n	800a51e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	60bb      	str	r3, [r7, #8]
 800a4f4:	e013      	b.n	800a51e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2180      	movs	r1, #128	; 0x80
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 f829 	bl	800a558 <UART_WaitOnFlagUntilTimeout>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e01f      	b.n	800a550 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	60ba      	str	r2, [r7, #8]
 800a516:	781a      	ldrb	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a522:	b29b      	uxth	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1b7      	bne.n	800a498 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2200      	movs	r2, #0
 800a530:	2140      	movs	r1, #64	; 0x40
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 f810 	bl	800a558 <UART_WaitOnFlagUntilTimeout>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e006      	b.n	800a550 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2220      	movs	r2, #32
 800a546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e000      	b.n	800a550 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a54e:	2302      	movs	r3, #2
  }
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	4613      	mov	r3, r2
 800a566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a568:	e02c      	b.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a570:	d028      	beq.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d007      	beq.n	800a588 <UART_WaitOnFlagUntilTimeout+0x30>
 800a578:	f7fc f918 	bl	80067ac <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	d21d      	bcs.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a596:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	695a      	ldr	r2, [r3, #20]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0201 	bic.w	r2, r2, #1
 800a5a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e00f      	b.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2301      	moveq	r3, #1
 800a5d6:	2300      	movne	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	461a      	mov	r2, r3
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d0c3      	beq.n	800a56a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68da      	ldr	r2, [r3, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	4313      	orrs	r3, r2
 800a622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a62e:	f023 030c 	bic.w	r3, r3, #12
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	68f9      	ldr	r1, [r7, #12]
 800a638:	430b      	orrs	r3, r1
 800a63a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65a:	f040 818b 	bne.w	800a974 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4ac1      	ldr	r2, [pc, #772]	; (800a968 <UART_SetConfig+0x37c>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d005      	beq.n	800a674 <UART_SetConfig+0x88>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4abf      	ldr	r2, [pc, #764]	; (800a96c <UART_SetConfig+0x380>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	f040 80bd 	bne.w	800a7ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a674:	f7fe fa52 	bl	8008b1c <HAL_RCC_GetPCLK2Freq>
 800a678:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	461d      	mov	r5, r3
 800a67e:	f04f 0600 	mov.w	r6, #0
 800a682:	46a8      	mov	r8, r5
 800a684:	46b1      	mov	r9, r6
 800a686:	eb18 0308 	adds.w	r3, r8, r8
 800a68a:	eb49 0409 	adc.w	r4, r9, r9
 800a68e:	4698      	mov	r8, r3
 800a690:	46a1      	mov	r9, r4
 800a692:	eb18 0805 	adds.w	r8, r8, r5
 800a696:	eb49 0906 	adc.w	r9, r9, r6
 800a69a:	f04f 0100 	mov.w	r1, #0
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a6a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a6aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a6ae:	4688      	mov	r8, r1
 800a6b0:	4691      	mov	r9, r2
 800a6b2:	eb18 0005 	adds.w	r0, r8, r5
 800a6b6:	eb49 0106 	adc.w	r1, r9, r6
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	461d      	mov	r5, r3
 800a6c0:	f04f 0600 	mov.w	r6, #0
 800a6c4:	196b      	adds	r3, r5, r5
 800a6c6:	eb46 0406 	adc.w	r4, r6, r6
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	f7f6 fadb 	bl	8000c88 <__aeabi_uldivmod>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4ba5      	ldr	r3, [pc, #660]	; (800a970 <UART_SetConfig+0x384>)
 800a6da:	fba3 2302 	umull	r2, r3, r3, r2
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	461d      	mov	r5, r3
 800a6e8:	f04f 0600 	mov.w	r6, #0
 800a6ec:	46a9      	mov	r9, r5
 800a6ee:	46b2      	mov	sl, r6
 800a6f0:	eb19 0309 	adds.w	r3, r9, r9
 800a6f4:	eb4a 040a 	adc.w	r4, sl, sl
 800a6f8:	4699      	mov	r9, r3
 800a6fa:	46a2      	mov	sl, r4
 800a6fc:	eb19 0905 	adds.w	r9, r9, r5
 800a700:	eb4a 0a06 	adc.w	sl, sl, r6
 800a704:	f04f 0100 	mov.w	r1, #0
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a718:	4689      	mov	r9, r1
 800a71a:	4692      	mov	sl, r2
 800a71c:	eb19 0005 	adds.w	r0, r9, r5
 800a720:	eb4a 0106 	adc.w	r1, sl, r6
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	461d      	mov	r5, r3
 800a72a:	f04f 0600 	mov.w	r6, #0
 800a72e:	196b      	adds	r3, r5, r5
 800a730:	eb46 0406 	adc.w	r4, r6, r6
 800a734:	461a      	mov	r2, r3
 800a736:	4623      	mov	r3, r4
 800a738:	f7f6 faa6 	bl	8000c88 <__aeabi_uldivmod>
 800a73c:	4603      	mov	r3, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	461a      	mov	r2, r3
 800a742:	4b8b      	ldr	r3, [pc, #556]	; (800a970 <UART_SetConfig+0x384>)
 800a744:	fba3 1302 	umull	r1, r3, r3, r2
 800a748:	095b      	lsrs	r3, r3, #5
 800a74a:	2164      	movs	r1, #100	; 0x64
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	3332      	adds	r3, #50	; 0x32
 800a756:	4a86      	ldr	r2, [pc, #536]	; (800a970 <UART_SetConfig+0x384>)
 800a758:	fba2 2303 	umull	r2, r3, r2, r3
 800a75c:	095b      	lsrs	r3, r3, #5
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a764:	4498      	add	r8, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	461d      	mov	r5, r3
 800a76a:	f04f 0600 	mov.w	r6, #0
 800a76e:	46a9      	mov	r9, r5
 800a770:	46b2      	mov	sl, r6
 800a772:	eb19 0309 	adds.w	r3, r9, r9
 800a776:	eb4a 040a 	adc.w	r4, sl, sl
 800a77a:	4699      	mov	r9, r3
 800a77c:	46a2      	mov	sl, r4
 800a77e:	eb19 0905 	adds.w	r9, r9, r5
 800a782:	eb4a 0a06 	adc.w	sl, sl, r6
 800a786:	f04f 0100 	mov.w	r1, #0
 800a78a:	f04f 0200 	mov.w	r2, #0
 800a78e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a792:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a796:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a79a:	4689      	mov	r9, r1
 800a79c:	4692      	mov	sl, r2
 800a79e:	eb19 0005 	adds.w	r0, r9, r5
 800a7a2:	eb4a 0106 	adc.w	r1, sl, r6
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	461d      	mov	r5, r3
 800a7ac:	f04f 0600 	mov.w	r6, #0
 800a7b0:	196b      	adds	r3, r5, r5
 800a7b2:	eb46 0406 	adc.w	r4, r6, r6
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	f7f6 fa65 	bl	8000c88 <__aeabi_uldivmod>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4b6a      	ldr	r3, [pc, #424]	; (800a970 <UART_SetConfig+0x384>)
 800a7c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a7ca:	095b      	lsrs	r3, r3, #5
 800a7cc:	2164      	movs	r1, #100	; 0x64
 800a7ce:	fb01 f303 	mul.w	r3, r1, r3
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	3332      	adds	r3, #50	; 0x32
 800a7d8:	4a65      	ldr	r2, [pc, #404]	; (800a970 <UART_SetConfig+0x384>)
 800a7da:	fba2 2303 	umull	r2, r3, r2, r3
 800a7de:	095b      	lsrs	r3, r3, #5
 800a7e0:	f003 0207 	and.w	r2, r3, #7
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4442      	add	r2, r8
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	e26f      	b.n	800acce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7ee:	f7fe f981 	bl	8008af4 <HAL_RCC_GetPCLK1Freq>
 800a7f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	461d      	mov	r5, r3
 800a7f8:	f04f 0600 	mov.w	r6, #0
 800a7fc:	46a8      	mov	r8, r5
 800a7fe:	46b1      	mov	r9, r6
 800a800:	eb18 0308 	adds.w	r3, r8, r8
 800a804:	eb49 0409 	adc.w	r4, r9, r9
 800a808:	4698      	mov	r8, r3
 800a80a:	46a1      	mov	r9, r4
 800a80c:	eb18 0805 	adds.w	r8, r8, r5
 800a810:	eb49 0906 	adc.w	r9, r9, r6
 800a814:	f04f 0100 	mov.w	r1, #0
 800a818:	f04f 0200 	mov.w	r2, #0
 800a81c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a820:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a824:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a828:	4688      	mov	r8, r1
 800a82a:	4691      	mov	r9, r2
 800a82c:	eb18 0005 	adds.w	r0, r8, r5
 800a830:	eb49 0106 	adc.w	r1, r9, r6
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	461d      	mov	r5, r3
 800a83a:	f04f 0600 	mov.w	r6, #0
 800a83e:	196b      	adds	r3, r5, r5
 800a840:	eb46 0406 	adc.w	r4, r6, r6
 800a844:	461a      	mov	r2, r3
 800a846:	4623      	mov	r3, r4
 800a848:	f7f6 fa1e 	bl	8000c88 <__aeabi_uldivmod>
 800a84c:	4603      	mov	r3, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	461a      	mov	r2, r3
 800a852:	4b47      	ldr	r3, [pc, #284]	; (800a970 <UART_SetConfig+0x384>)
 800a854:	fba3 2302 	umull	r2, r3, r3, r2
 800a858:	095b      	lsrs	r3, r3, #5
 800a85a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	461d      	mov	r5, r3
 800a862:	f04f 0600 	mov.w	r6, #0
 800a866:	46a9      	mov	r9, r5
 800a868:	46b2      	mov	sl, r6
 800a86a:	eb19 0309 	adds.w	r3, r9, r9
 800a86e:	eb4a 040a 	adc.w	r4, sl, sl
 800a872:	4699      	mov	r9, r3
 800a874:	46a2      	mov	sl, r4
 800a876:	eb19 0905 	adds.w	r9, r9, r5
 800a87a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a87e:	f04f 0100 	mov.w	r1, #0
 800a882:	f04f 0200 	mov.w	r2, #0
 800a886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a88a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a88e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a892:	4689      	mov	r9, r1
 800a894:	4692      	mov	sl, r2
 800a896:	eb19 0005 	adds.w	r0, r9, r5
 800a89a:	eb4a 0106 	adc.w	r1, sl, r6
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	461d      	mov	r5, r3
 800a8a4:	f04f 0600 	mov.w	r6, #0
 800a8a8:	196b      	adds	r3, r5, r5
 800a8aa:	eb46 0406 	adc.w	r4, r6, r6
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	f7f6 f9e9 	bl	8000c88 <__aeabi_uldivmod>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	4b2c      	ldr	r3, [pc, #176]	; (800a970 <UART_SetConfig+0x384>)
 800a8be:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	2164      	movs	r1, #100	; 0x64
 800a8c6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	3332      	adds	r3, #50	; 0x32
 800a8d0:	4a27      	ldr	r2, [pc, #156]	; (800a970 <UART_SetConfig+0x384>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	095b      	lsrs	r3, r3, #5
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8de:	4498      	add	r8, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	461d      	mov	r5, r3
 800a8e4:	f04f 0600 	mov.w	r6, #0
 800a8e8:	46a9      	mov	r9, r5
 800a8ea:	46b2      	mov	sl, r6
 800a8ec:	eb19 0309 	adds.w	r3, r9, r9
 800a8f0:	eb4a 040a 	adc.w	r4, sl, sl
 800a8f4:	4699      	mov	r9, r3
 800a8f6:	46a2      	mov	sl, r4
 800a8f8:	eb19 0905 	adds.w	r9, r9, r5
 800a8fc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a900:	f04f 0100 	mov.w	r1, #0
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a90c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a914:	4689      	mov	r9, r1
 800a916:	4692      	mov	sl, r2
 800a918:	eb19 0005 	adds.w	r0, r9, r5
 800a91c:	eb4a 0106 	adc.w	r1, sl, r6
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	461d      	mov	r5, r3
 800a926:	f04f 0600 	mov.w	r6, #0
 800a92a:	196b      	adds	r3, r5, r5
 800a92c:	eb46 0406 	adc.w	r4, r6, r6
 800a930:	461a      	mov	r2, r3
 800a932:	4623      	mov	r3, r4
 800a934:	f7f6 f9a8 	bl	8000c88 <__aeabi_uldivmod>
 800a938:	4603      	mov	r3, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <UART_SetConfig+0x384>)
 800a940:	fba3 1302 	umull	r1, r3, r3, r2
 800a944:	095b      	lsrs	r3, r3, #5
 800a946:	2164      	movs	r1, #100	; 0x64
 800a948:	fb01 f303 	mul.w	r3, r1, r3
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	3332      	adds	r3, #50	; 0x32
 800a952:	4a07      	ldr	r2, [pc, #28]	; (800a970 <UART_SetConfig+0x384>)
 800a954:	fba2 2303 	umull	r2, r3, r2, r3
 800a958:	095b      	lsrs	r3, r3, #5
 800a95a:	f003 0207 	and.w	r2, r3, #7
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4442      	add	r2, r8
 800a964:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a966:	e1b2      	b.n	800acce <UART_SetConfig+0x6e2>
 800a968:	40011000 	.word	0x40011000
 800a96c:	40011400 	.word	0x40011400
 800a970:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4ad7      	ldr	r2, [pc, #860]	; (800acd8 <UART_SetConfig+0x6ec>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d005      	beq.n	800a98a <UART_SetConfig+0x39e>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4ad6      	ldr	r2, [pc, #856]	; (800acdc <UART_SetConfig+0x6f0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	f040 80d1 	bne.w	800ab2c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a98a:	f7fe f8c7 	bl	8008b1c <HAL_RCC_GetPCLK2Freq>
 800a98e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	469a      	mov	sl, r3
 800a994:	f04f 0b00 	mov.w	fp, #0
 800a998:	46d0      	mov	r8, sl
 800a99a:	46d9      	mov	r9, fp
 800a99c:	eb18 0308 	adds.w	r3, r8, r8
 800a9a0:	eb49 0409 	adc.w	r4, r9, r9
 800a9a4:	4698      	mov	r8, r3
 800a9a6:	46a1      	mov	r9, r4
 800a9a8:	eb18 080a 	adds.w	r8, r8, sl
 800a9ac:	eb49 090b 	adc.w	r9, r9, fp
 800a9b0:	f04f 0100 	mov.w	r1, #0
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a9bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a9c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a9c4:	4688      	mov	r8, r1
 800a9c6:	4691      	mov	r9, r2
 800a9c8:	eb1a 0508 	adds.w	r5, sl, r8
 800a9cc:	eb4b 0609 	adc.w	r6, fp, r9
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f04f 0200 	mov.w	r2, #0
 800a9da:	f04f 0300 	mov.w	r3, #0
 800a9de:	f04f 0400 	mov.w	r4, #0
 800a9e2:	0094      	lsls	r4, r2, #2
 800a9e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9e8:	008b      	lsls	r3, r1, #2
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	f7f6 f949 	bl	8000c88 <__aeabi_uldivmod>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4bb8      	ldr	r3, [pc, #736]	; (800ace0 <UART_SetConfig+0x6f4>)
 800a9fe:	fba3 2302 	umull	r2, r3, r3, r2
 800aa02:	095b      	lsrs	r3, r3, #5
 800aa04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	469b      	mov	fp, r3
 800aa0c:	f04f 0c00 	mov.w	ip, #0
 800aa10:	46d9      	mov	r9, fp
 800aa12:	46e2      	mov	sl, ip
 800aa14:	eb19 0309 	adds.w	r3, r9, r9
 800aa18:	eb4a 040a 	adc.w	r4, sl, sl
 800aa1c:	4699      	mov	r9, r3
 800aa1e:	46a2      	mov	sl, r4
 800aa20:	eb19 090b 	adds.w	r9, r9, fp
 800aa24:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa28:	f04f 0100 	mov.w	r1, #0
 800aa2c:	f04f 0200 	mov.w	r2, #0
 800aa30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa3c:	4689      	mov	r9, r1
 800aa3e:	4692      	mov	sl, r2
 800aa40:	eb1b 0509 	adds.w	r5, fp, r9
 800aa44:	eb4c 060a 	adc.w	r6, ip, sl
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f04f 0200 	mov.w	r2, #0
 800aa52:	f04f 0300 	mov.w	r3, #0
 800aa56:	f04f 0400 	mov.w	r4, #0
 800aa5a:	0094      	lsls	r4, r2, #2
 800aa5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa60:	008b      	lsls	r3, r1, #2
 800aa62:	461a      	mov	r2, r3
 800aa64:	4623      	mov	r3, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	4631      	mov	r1, r6
 800aa6a:	f7f6 f90d 	bl	8000c88 <__aeabi_uldivmod>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	460c      	mov	r4, r1
 800aa72:	461a      	mov	r2, r3
 800aa74:	4b9a      	ldr	r3, [pc, #616]	; (800ace0 <UART_SetConfig+0x6f4>)
 800aa76:	fba3 1302 	umull	r1, r3, r3, r2
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	2164      	movs	r1, #100	; 0x64
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	3332      	adds	r3, #50	; 0x32
 800aa88:	4a95      	ldr	r2, [pc, #596]	; (800ace0 <UART_SetConfig+0x6f4>)
 800aa8a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8e:	095b      	lsrs	r3, r3, #5
 800aa90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa94:	4498      	add	r8, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	469b      	mov	fp, r3
 800aa9a:	f04f 0c00 	mov.w	ip, #0
 800aa9e:	46d9      	mov	r9, fp
 800aaa0:	46e2      	mov	sl, ip
 800aaa2:	eb19 0309 	adds.w	r3, r9, r9
 800aaa6:	eb4a 040a 	adc.w	r4, sl, sl
 800aaaa:	4699      	mov	r9, r3
 800aaac:	46a2      	mov	sl, r4
 800aaae:	eb19 090b 	adds.w	r9, r9, fp
 800aab2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aab6:	f04f 0100 	mov.w	r1, #0
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aac2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aac6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aaca:	4689      	mov	r9, r1
 800aacc:	4692      	mov	sl, r2
 800aace:	eb1b 0509 	adds.w	r5, fp, r9
 800aad2:	eb4c 060a 	adc.w	r6, ip, sl
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4619      	mov	r1, r3
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	f04f 0400 	mov.w	r4, #0
 800aae8:	0094      	lsls	r4, r2, #2
 800aaea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aaee:	008b      	lsls	r3, r1, #2
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4623      	mov	r3, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	f7f6 f8c6 	bl	8000c88 <__aeabi_uldivmod>
 800aafc:	4603      	mov	r3, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	461a      	mov	r2, r3
 800ab02:	4b77      	ldr	r3, [pc, #476]	; (800ace0 <UART_SetConfig+0x6f4>)
 800ab04:	fba3 1302 	umull	r1, r3, r3, r2
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	2164      	movs	r1, #100	; 0x64
 800ab0c:	fb01 f303 	mul.w	r3, r1, r3
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	3332      	adds	r3, #50	; 0x32
 800ab16:	4a72      	ldr	r2, [pc, #456]	; (800ace0 <UART_SetConfig+0x6f4>)
 800ab18:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1c:	095b      	lsrs	r3, r3, #5
 800ab1e:	f003 020f 	and.w	r2, r3, #15
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4442      	add	r2, r8
 800ab28:	609a      	str	r2, [r3, #8]
 800ab2a:	e0d0      	b.n	800acce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab2c:	f7fd ffe2 	bl	8008af4 <HAL_RCC_GetPCLK1Freq>
 800ab30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	469a      	mov	sl, r3
 800ab36:	f04f 0b00 	mov.w	fp, #0
 800ab3a:	46d0      	mov	r8, sl
 800ab3c:	46d9      	mov	r9, fp
 800ab3e:	eb18 0308 	adds.w	r3, r8, r8
 800ab42:	eb49 0409 	adc.w	r4, r9, r9
 800ab46:	4698      	mov	r8, r3
 800ab48:	46a1      	mov	r9, r4
 800ab4a:	eb18 080a 	adds.w	r8, r8, sl
 800ab4e:	eb49 090b 	adc.w	r9, r9, fp
 800ab52:	f04f 0100 	mov.w	r1, #0
 800ab56:	f04f 0200 	mov.w	r2, #0
 800ab5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ab5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ab62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ab66:	4688      	mov	r8, r1
 800ab68:	4691      	mov	r9, r2
 800ab6a:	eb1a 0508 	adds.w	r5, sl, r8
 800ab6e:	eb4b 0609 	adc.w	r6, fp, r9
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	4619      	mov	r1, r3
 800ab78:	f04f 0200 	mov.w	r2, #0
 800ab7c:	f04f 0300 	mov.w	r3, #0
 800ab80:	f04f 0400 	mov.w	r4, #0
 800ab84:	0094      	lsls	r4, r2, #2
 800ab86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab8a:	008b      	lsls	r3, r1, #2
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	4623      	mov	r3, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	4631      	mov	r1, r6
 800ab94:	f7f6 f878 	bl	8000c88 <__aeabi_uldivmod>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4b50      	ldr	r3, [pc, #320]	; (800ace0 <UART_SetConfig+0x6f4>)
 800aba0:	fba3 2302 	umull	r2, r3, r3, r2
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	469b      	mov	fp, r3
 800abae:	f04f 0c00 	mov.w	ip, #0
 800abb2:	46d9      	mov	r9, fp
 800abb4:	46e2      	mov	sl, ip
 800abb6:	eb19 0309 	adds.w	r3, r9, r9
 800abba:	eb4a 040a 	adc.w	r4, sl, sl
 800abbe:	4699      	mov	r9, r3
 800abc0:	46a2      	mov	sl, r4
 800abc2:	eb19 090b 	adds.w	r9, r9, fp
 800abc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800abca:	f04f 0100 	mov.w	r1, #0
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abde:	4689      	mov	r9, r1
 800abe0:	4692      	mov	sl, r2
 800abe2:	eb1b 0509 	adds.w	r5, fp, r9
 800abe6:	eb4c 060a 	adc.w	r6, ip, sl
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	4619      	mov	r1, r3
 800abf0:	f04f 0200 	mov.w	r2, #0
 800abf4:	f04f 0300 	mov.w	r3, #0
 800abf8:	f04f 0400 	mov.w	r4, #0
 800abfc:	0094      	lsls	r4, r2, #2
 800abfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac02:	008b      	lsls	r3, r1, #2
 800ac04:	461a      	mov	r2, r3
 800ac06:	4623      	mov	r3, r4
 800ac08:	4628      	mov	r0, r5
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	f7f6 f83c 	bl	8000c88 <__aeabi_uldivmod>
 800ac10:	4603      	mov	r3, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b32      	ldr	r3, [pc, #200]	; (800ace0 <UART_SetConfig+0x6f4>)
 800ac18:	fba3 1302 	umull	r1, r3, r3, r2
 800ac1c:	095b      	lsrs	r3, r3, #5
 800ac1e:	2164      	movs	r1, #100	; 0x64
 800ac20:	fb01 f303 	mul.w	r3, r1, r3
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	3332      	adds	r3, #50	; 0x32
 800ac2a:	4a2d      	ldr	r2, [pc, #180]	; (800ace0 <UART_SetConfig+0x6f4>)
 800ac2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac30:	095b      	lsrs	r3, r3, #5
 800ac32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac36:	4498      	add	r8, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	469b      	mov	fp, r3
 800ac3c:	f04f 0c00 	mov.w	ip, #0
 800ac40:	46d9      	mov	r9, fp
 800ac42:	46e2      	mov	sl, ip
 800ac44:	eb19 0309 	adds.w	r3, r9, r9
 800ac48:	eb4a 040a 	adc.w	r4, sl, sl
 800ac4c:	4699      	mov	r9, r3
 800ac4e:	46a2      	mov	sl, r4
 800ac50:	eb19 090b 	adds.w	r9, r9, fp
 800ac54:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac58:	f04f 0100 	mov.w	r1, #0
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	4692      	mov	sl, r2
 800ac70:	eb1b 0509 	adds.w	r5, fp, r9
 800ac74:	eb4c 060a 	adc.w	r6, ip, sl
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	f04f 0300 	mov.w	r3, #0
 800ac86:	f04f 0400 	mov.w	r4, #0
 800ac8a:	0094      	lsls	r4, r2, #2
 800ac8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac90:	008b      	lsls	r3, r1, #2
 800ac92:	461a      	mov	r2, r3
 800ac94:	4623      	mov	r3, r4
 800ac96:	4628      	mov	r0, r5
 800ac98:	4631      	mov	r1, r6
 800ac9a:	f7f5 fff5 	bl	8000c88 <__aeabi_uldivmod>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	460c      	mov	r4, r1
 800aca2:	461a      	mov	r2, r3
 800aca4:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <UART_SetConfig+0x6f4>)
 800aca6:	fba3 1302 	umull	r1, r3, r3, r2
 800acaa:	095b      	lsrs	r3, r3, #5
 800acac:	2164      	movs	r1, #100	; 0x64
 800acae:	fb01 f303 	mul.w	r3, r1, r3
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	3332      	adds	r3, #50	; 0x32
 800acb8:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <UART_SetConfig+0x6f4>)
 800acba:	fba2 2303 	umull	r2, r3, r2, r3
 800acbe:	095b      	lsrs	r3, r3, #5
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4442      	add	r2, r8
 800acca:	609a      	str	r2, [r3, #8]
}
 800accc:	e7ff      	b.n	800acce <UART_SetConfig+0x6e2>
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	40011000 	.word	0x40011000
 800acdc:	40011400 	.word	0x40011400
 800ace0:	51eb851f 	.word	0x51eb851f
 800ace4:	00000000 	.word	0x00000000

0800ace8 <cos>:
 800ace8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acea:	ec51 0b10 	vmov	r0, r1, d0
 800acee:	4a1e      	ldr	r2, [pc, #120]	; (800ad68 <cos+0x80>)
 800acf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acf4:	4293      	cmp	r3, r2
 800acf6:	dc06      	bgt.n	800ad06 <cos+0x1e>
 800acf8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ad60 <cos+0x78>
 800acfc:	f000 fc24 	bl	800b548 <__kernel_cos>
 800ad00:	ec51 0b10 	vmov	r0, r1, d0
 800ad04:	e007      	b.n	800ad16 <cos+0x2e>
 800ad06:	4a19      	ldr	r2, [pc, #100]	; (800ad6c <cos+0x84>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	dd09      	ble.n	800ad20 <cos+0x38>
 800ad0c:	ee10 2a10 	vmov	r2, s0
 800ad10:	460b      	mov	r3, r1
 800ad12:	f7f5 fab9 	bl	8000288 <__aeabi_dsub>
 800ad16:	ec41 0b10 	vmov	d0, r0, r1
 800ad1a:	b005      	add	sp, #20
 800ad1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad20:	4668      	mov	r0, sp
 800ad22:	f000 f8f1 	bl	800af08 <__ieee754_rem_pio2>
 800ad26:	f000 0003 	and.w	r0, r0, #3
 800ad2a:	2801      	cmp	r0, #1
 800ad2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad30:	ed9d 0b00 	vldr	d0, [sp]
 800ad34:	d007      	beq.n	800ad46 <cos+0x5e>
 800ad36:	2802      	cmp	r0, #2
 800ad38:	d00e      	beq.n	800ad58 <cos+0x70>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d0de      	beq.n	800acfc <cos+0x14>
 800ad3e:	2001      	movs	r0, #1
 800ad40:	f001 f80a 	bl	800bd58 <__kernel_sin>
 800ad44:	e7dc      	b.n	800ad00 <cos+0x18>
 800ad46:	f001 f807 	bl	800bd58 <__kernel_sin>
 800ad4a:	ec53 2b10 	vmov	r2, r3, d0
 800ad4e:	ee10 0a10 	vmov	r0, s0
 800ad52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad56:	e7de      	b.n	800ad16 <cos+0x2e>
 800ad58:	f000 fbf6 	bl	800b548 <__kernel_cos>
 800ad5c:	e7f5      	b.n	800ad4a <cos+0x62>
 800ad5e:	bf00      	nop
	...
 800ad68:	3fe921fb 	.word	0x3fe921fb
 800ad6c:	7fefffff 	.word	0x7fefffff

0800ad70 <sin>:
 800ad70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad72:	ec51 0b10 	vmov	r0, r1, d0
 800ad76:	4a20      	ldr	r2, [pc, #128]	; (800adf8 <sin+0x88>)
 800ad78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	dc07      	bgt.n	800ad90 <sin+0x20>
 800ad80:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800adf0 <sin+0x80>
 800ad84:	2000      	movs	r0, #0
 800ad86:	f000 ffe7 	bl	800bd58 <__kernel_sin>
 800ad8a:	ec51 0b10 	vmov	r0, r1, d0
 800ad8e:	e007      	b.n	800ada0 <sin+0x30>
 800ad90:	4a1a      	ldr	r2, [pc, #104]	; (800adfc <sin+0x8c>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	dd09      	ble.n	800adaa <sin+0x3a>
 800ad96:	ee10 2a10 	vmov	r2, s0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	f7f5 fa74 	bl	8000288 <__aeabi_dsub>
 800ada0:	ec41 0b10 	vmov	d0, r0, r1
 800ada4:	b005      	add	sp, #20
 800ada6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adaa:	4668      	mov	r0, sp
 800adac:	f000 f8ac 	bl	800af08 <__ieee754_rem_pio2>
 800adb0:	f000 0003 	and.w	r0, r0, #3
 800adb4:	2801      	cmp	r0, #1
 800adb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800adba:	ed9d 0b00 	vldr	d0, [sp]
 800adbe:	d004      	beq.n	800adca <sin+0x5a>
 800adc0:	2802      	cmp	r0, #2
 800adc2:	d005      	beq.n	800add0 <sin+0x60>
 800adc4:	b970      	cbnz	r0, 800ade4 <sin+0x74>
 800adc6:	2001      	movs	r0, #1
 800adc8:	e7dd      	b.n	800ad86 <sin+0x16>
 800adca:	f000 fbbd 	bl	800b548 <__kernel_cos>
 800adce:	e7dc      	b.n	800ad8a <sin+0x1a>
 800add0:	2001      	movs	r0, #1
 800add2:	f000 ffc1 	bl	800bd58 <__kernel_sin>
 800add6:	ec53 2b10 	vmov	r2, r3, d0
 800adda:	ee10 0a10 	vmov	r0, s0
 800adde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ade2:	e7dd      	b.n	800ada0 <sin+0x30>
 800ade4:	f000 fbb0 	bl	800b548 <__kernel_cos>
 800ade8:	e7f5      	b.n	800add6 <sin+0x66>
 800adea:	bf00      	nop
 800adec:	f3af 8000 	nop.w
	...
 800adf8:	3fe921fb 	.word	0x3fe921fb
 800adfc:	7fefffff 	.word	0x7fefffff

0800ae00 <cosf>:
 800ae00:	ee10 3a10 	vmov	r3, s0
 800ae04:	b507      	push	{r0, r1, r2, lr}
 800ae06:	4a1c      	ldr	r2, [pc, #112]	; (800ae78 <cosf+0x78>)
 800ae08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	dc04      	bgt.n	800ae1a <cosf+0x1a>
 800ae10:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800ae7c <cosf+0x7c>
 800ae14:	f001 f85a 	bl	800becc <__kernel_cosf>
 800ae18:	e004      	b.n	800ae24 <cosf+0x24>
 800ae1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae1e:	db04      	blt.n	800ae2a <cosf+0x2a>
 800ae20:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ae24:	b003      	add	sp, #12
 800ae26:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae2a:	4668      	mov	r0, sp
 800ae2c:	f000 fa5e 	bl	800b2ec <__ieee754_rem_pio2f>
 800ae30:	f000 0003 	and.w	r0, r0, #3
 800ae34:	2801      	cmp	r0, #1
 800ae36:	d007      	beq.n	800ae48 <cosf+0x48>
 800ae38:	2802      	cmp	r0, #2
 800ae3a:	d00e      	beq.n	800ae5a <cosf+0x5a>
 800ae3c:	b9a0      	cbnz	r0, 800ae68 <cosf+0x68>
 800ae3e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae42:	ed9d 0a00 	vldr	s0, [sp]
 800ae46:	e7e5      	b.n	800ae14 <cosf+0x14>
 800ae48:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae4c:	ed9d 0a00 	vldr	s0, [sp]
 800ae50:	f001 fb1c 	bl	800c48c <__kernel_sinf>
 800ae54:	eeb1 0a40 	vneg.f32	s0, s0
 800ae58:	e7e4      	b.n	800ae24 <cosf+0x24>
 800ae5a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae5e:	ed9d 0a00 	vldr	s0, [sp]
 800ae62:	f001 f833 	bl	800becc <__kernel_cosf>
 800ae66:	e7f5      	b.n	800ae54 <cosf+0x54>
 800ae68:	2001      	movs	r0, #1
 800ae6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae6e:	ed9d 0a00 	vldr	s0, [sp]
 800ae72:	f001 fb0b 	bl	800c48c <__kernel_sinf>
 800ae76:	e7d5      	b.n	800ae24 <cosf+0x24>
 800ae78:	3f490fd8 	.word	0x3f490fd8
 800ae7c:	00000000 	.word	0x00000000

0800ae80 <sinf>:
 800ae80:	ee10 3a10 	vmov	r3, s0
 800ae84:	b507      	push	{r0, r1, r2, lr}
 800ae86:	4a1d      	ldr	r2, [pc, #116]	; (800aefc <sinf+0x7c>)
 800ae88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	dc05      	bgt.n	800ae9c <sinf+0x1c>
 800ae90:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800af00 <sinf+0x80>
 800ae94:	2000      	movs	r0, #0
 800ae96:	f001 faf9 	bl	800c48c <__kernel_sinf>
 800ae9a:	e004      	b.n	800aea6 <sinf+0x26>
 800ae9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aea0:	db04      	blt.n	800aeac <sinf+0x2c>
 800aea2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aea6:	b003      	add	sp, #12
 800aea8:	f85d fb04 	ldr.w	pc, [sp], #4
 800aeac:	4668      	mov	r0, sp
 800aeae:	f000 fa1d 	bl	800b2ec <__ieee754_rem_pio2f>
 800aeb2:	f000 0003 	and.w	r0, r0, #3
 800aeb6:	2801      	cmp	r0, #1
 800aeb8:	d008      	beq.n	800aecc <sinf+0x4c>
 800aeba:	2802      	cmp	r0, #2
 800aebc:	d00d      	beq.n	800aeda <sinf+0x5a>
 800aebe:	b9b0      	cbnz	r0, 800aeee <sinf+0x6e>
 800aec0:	2001      	movs	r0, #1
 800aec2:	eddd 0a01 	vldr	s1, [sp, #4]
 800aec6:	ed9d 0a00 	vldr	s0, [sp]
 800aeca:	e7e4      	b.n	800ae96 <sinf+0x16>
 800aecc:	eddd 0a01 	vldr	s1, [sp, #4]
 800aed0:	ed9d 0a00 	vldr	s0, [sp]
 800aed4:	f000 fffa 	bl	800becc <__kernel_cosf>
 800aed8:	e7e5      	b.n	800aea6 <sinf+0x26>
 800aeda:	2001      	movs	r0, #1
 800aedc:	eddd 0a01 	vldr	s1, [sp, #4]
 800aee0:	ed9d 0a00 	vldr	s0, [sp]
 800aee4:	f001 fad2 	bl	800c48c <__kernel_sinf>
 800aee8:	eeb1 0a40 	vneg.f32	s0, s0
 800aeec:	e7db      	b.n	800aea6 <sinf+0x26>
 800aeee:	eddd 0a01 	vldr	s1, [sp, #4]
 800aef2:	ed9d 0a00 	vldr	s0, [sp]
 800aef6:	f000 ffe9 	bl	800becc <__kernel_cosf>
 800aefa:	e7f5      	b.n	800aee8 <sinf+0x68>
 800aefc:	3f490fd8 	.word	0x3f490fd8
	...

0800af08 <__ieee754_rem_pio2>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	ec57 6b10 	vmov	r6, r7, d0
 800af10:	4bc3      	ldr	r3, [pc, #780]	; (800b220 <__ieee754_rem_pio2+0x318>)
 800af12:	b08d      	sub	sp, #52	; 0x34
 800af14:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800af18:	4598      	cmp	r8, r3
 800af1a:	4604      	mov	r4, r0
 800af1c:	9704      	str	r7, [sp, #16]
 800af1e:	dc07      	bgt.n	800af30 <__ieee754_rem_pio2+0x28>
 800af20:	2200      	movs	r2, #0
 800af22:	2300      	movs	r3, #0
 800af24:	ed84 0b00 	vstr	d0, [r4]
 800af28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800af2c:	2500      	movs	r5, #0
 800af2e:	e027      	b.n	800af80 <__ieee754_rem_pio2+0x78>
 800af30:	4bbc      	ldr	r3, [pc, #752]	; (800b224 <__ieee754_rem_pio2+0x31c>)
 800af32:	4598      	cmp	r8, r3
 800af34:	dc75      	bgt.n	800b022 <__ieee754_rem_pio2+0x11a>
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	4dbb      	ldr	r5, [pc, #748]	; (800b228 <__ieee754_rem_pio2+0x320>)
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	ee10 0a10 	vmov	r0, s0
 800af40:	a3a9      	add	r3, pc, #676	; (adr r3, 800b1e8 <__ieee754_rem_pio2+0x2e0>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	4639      	mov	r1, r7
 800af48:	dd36      	ble.n	800afb8 <__ieee754_rem_pio2+0xb0>
 800af4a:	f7f5 f99d 	bl	8000288 <__aeabi_dsub>
 800af4e:	45a8      	cmp	r8, r5
 800af50:	4606      	mov	r6, r0
 800af52:	460f      	mov	r7, r1
 800af54:	d018      	beq.n	800af88 <__ieee754_rem_pio2+0x80>
 800af56:	a3a6      	add	r3, pc, #664	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x2e8>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 f994 	bl	8000288 <__aeabi_dsub>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	e9c4 2300 	strd	r2, r3, [r4]
 800af68:	4630      	mov	r0, r6
 800af6a:	4639      	mov	r1, r7
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	a39f      	add	r3, pc, #636	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x2e8>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 f987 	bl	8000288 <__aeabi_dsub>
 800af7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af7e:	2501      	movs	r5, #1
 800af80:	4628      	mov	r0, r5
 800af82:	b00d      	add	sp, #52	; 0x34
 800af84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af88:	a39b      	add	r3, pc, #620	; (adr r3, 800b1f8 <__ieee754_rem_pio2+0x2f0>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 f97b 	bl	8000288 <__aeabi_dsub>
 800af92:	a39b      	add	r3, pc, #620	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2f8>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	4606      	mov	r6, r0
 800af9a:	460f      	mov	r7, r1
 800af9c:	f7f5 f974 	bl	8000288 <__aeabi_dsub>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	e9c4 2300 	strd	r2, r3, [r4]
 800afa8:	4630      	mov	r0, r6
 800afaa:	4639      	mov	r1, r7
 800afac:	f7f5 f96c 	bl	8000288 <__aeabi_dsub>
 800afb0:	a393      	add	r3, pc, #588	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2f8>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	e7de      	b.n	800af76 <__ieee754_rem_pio2+0x6e>
 800afb8:	f7f5 f968 	bl	800028c <__adddf3>
 800afbc:	45a8      	cmp	r8, r5
 800afbe:	4606      	mov	r6, r0
 800afc0:	460f      	mov	r7, r1
 800afc2:	d016      	beq.n	800aff2 <__ieee754_rem_pio2+0xea>
 800afc4:	a38a      	add	r3, pc, #552	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x2e8>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f95f 	bl	800028c <__adddf3>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	e9c4 2300 	strd	r2, r3, [r4]
 800afd6:	4630      	mov	r0, r6
 800afd8:	4639      	mov	r1, r7
 800afda:	f7f5 f955 	bl	8000288 <__aeabi_dsub>
 800afde:	a384      	add	r3, pc, #528	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x2e8>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 f952 	bl	800028c <__adddf3>
 800afe8:	f04f 35ff 	mov.w	r5, #4294967295
 800afec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aff0:	e7c6      	b.n	800af80 <__ieee754_rem_pio2+0x78>
 800aff2:	a381      	add	r3, pc, #516	; (adr r3, 800b1f8 <__ieee754_rem_pio2+0x2f0>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 f948 	bl	800028c <__adddf3>
 800affc:	a380      	add	r3, pc, #512	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2f8>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	4606      	mov	r6, r0
 800b004:	460f      	mov	r7, r1
 800b006:	f7f5 f941 	bl	800028c <__adddf3>
 800b00a:	4602      	mov	r2, r0
 800b00c:	460b      	mov	r3, r1
 800b00e:	e9c4 2300 	strd	r2, r3, [r4]
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 f937 	bl	8000288 <__aeabi_dsub>
 800b01a:	a379      	add	r3, pc, #484	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2f8>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	e7e0      	b.n	800afe4 <__ieee754_rem_pio2+0xdc>
 800b022:	4b82      	ldr	r3, [pc, #520]	; (800b22c <__ieee754_rem_pio2+0x324>)
 800b024:	4598      	cmp	r8, r3
 800b026:	f300 80d0 	bgt.w	800b1ca <__ieee754_rem_pio2+0x2c2>
 800b02a:	f001 fa77 	bl	800c51c <fabs>
 800b02e:	ec57 6b10 	vmov	r6, r7, d0
 800b032:	ee10 0a10 	vmov	r0, s0
 800b036:	a374      	add	r3, pc, #464	; (adr r3, 800b208 <__ieee754_rem_pio2+0x300>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	4639      	mov	r1, r7
 800b03e:	f7f5 fadb 	bl	80005f8 <__aeabi_dmul>
 800b042:	2200      	movs	r2, #0
 800b044:	4b7a      	ldr	r3, [pc, #488]	; (800b230 <__ieee754_rem_pio2+0x328>)
 800b046:	f7f5 f921 	bl	800028c <__adddf3>
 800b04a:	f7f5 fd85 	bl	8000b58 <__aeabi_d2iz>
 800b04e:	4605      	mov	r5, r0
 800b050:	f7f5 fa68 	bl	8000524 <__aeabi_i2d>
 800b054:	a364      	add	r3, pc, #400	; (adr r3, 800b1e8 <__ieee754_rem_pio2+0x2e0>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b05e:	f7f5 facb 	bl	80005f8 <__aeabi_dmul>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 f90d 	bl	8000288 <__aeabi_dsub>
 800b06e:	a360      	add	r3, pc, #384	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x2e8>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	4682      	mov	sl, r0
 800b076:	468b      	mov	fp, r1
 800b078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b07c:	f7f5 fabc 	bl	80005f8 <__aeabi_dmul>
 800b080:	2d1f      	cmp	r5, #31
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	dc0c      	bgt.n	800b0a2 <__ieee754_rem_pio2+0x19a>
 800b088:	1e6a      	subs	r2, r5, #1
 800b08a:	4b6a      	ldr	r3, [pc, #424]	; (800b234 <__ieee754_rem_pio2+0x32c>)
 800b08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b090:	4543      	cmp	r3, r8
 800b092:	d006      	beq.n	800b0a2 <__ieee754_rem_pio2+0x19a>
 800b094:	4632      	mov	r2, r6
 800b096:	463b      	mov	r3, r7
 800b098:	4650      	mov	r0, sl
 800b09a:	4659      	mov	r1, fp
 800b09c:	f7f5 f8f4 	bl	8000288 <__aeabi_dsub>
 800b0a0:	e00e      	b.n	800b0c0 <__ieee754_rem_pio2+0x1b8>
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	f7f5 f8ed 	bl	8000288 <__aeabi_dsub>
 800b0ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	9a05      	ldr	r2, [sp, #20]
 800b0b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	dc02      	bgt.n	800b0c6 <__ieee754_rem_pio2+0x1be>
 800b0c0:	e9c4 0100 	strd	r0, r1, [r4]
 800b0c4:	e039      	b.n	800b13a <__ieee754_rem_pio2+0x232>
 800b0c6:	a34c      	add	r3, pc, #304	; (adr r3, 800b1f8 <__ieee754_rem_pio2+0x2f0>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4650      	mov	r0, sl
 800b0de:	4659      	mov	r1, fp
 800b0e0:	f7f5 f8d2 	bl	8000288 <__aeabi_dsub>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	4689      	mov	r9, r1
 800b0ec:	4650      	mov	r0, sl
 800b0ee:	4659      	mov	r1, fp
 800b0f0:	f7f5 f8ca 	bl	8000288 <__aeabi_dsub>
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	463b      	mov	r3, r7
 800b0f8:	f7f5 f8c6 	bl	8000288 <__aeabi_dsub>
 800b0fc:	a340      	add	r3, pc, #256	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2f8>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10a:	f7f5 fa75 	bl	80005f8 <__aeabi_dmul>
 800b10e:	4632      	mov	r2, r6
 800b110:	463b      	mov	r3, r7
 800b112:	f7f5 f8b9 	bl	8000288 <__aeabi_dsub>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 f8b1 	bl	8000288 <__aeabi_dsub>
 800b126:	9a05      	ldr	r2, [sp, #20]
 800b128:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2b31      	cmp	r3, #49	; 0x31
 800b130:	dc20      	bgt.n	800b174 <__ieee754_rem_pio2+0x26c>
 800b132:	e9c4 0100 	strd	r0, r1, [r4]
 800b136:	46c2      	mov	sl, r8
 800b138:	46cb      	mov	fp, r9
 800b13a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b13e:	4650      	mov	r0, sl
 800b140:	4642      	mov	r2, r8
 800b142:	464b      	mov	r3, r9
 800b144:	4659      	mov	r1, fp
 800b146:	f7f5 f89f 	bl	8000288 <__aeabi_dsub>
 800b14a:	463b      	mov	r3, r7
 800b14c:	4632      	mov	r2, r6
 800b14e:	f7f5 f89b 	bl	8000288 <__aeabi_dsub>
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b15a:	f6bf af11 	bge.w	800af80 <__ieee754_rem_pio2+0x78>
 800b15e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b162:	6063      	str	r3, [r4, #4]
 800b164:	f8c4 8000 	str.w	r8, [r4]
 800b168:	60a0      	str	r0, [r4, #8]
 800b16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b16e:	60e3      	str	r3, [r4, #12]
 800b170:	426d      	negs	r5, r5
 800b172:	e705      	b.n	800af80 <__ieee754_rem_pio2+0x78>
 800b174:	a326      	add	r3, pc, #152	; (adr r3, 800b210 <__ieee754_rem_pio2+0x308>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b17e:	f7f5 fa3b 	bl	80005f8 <__aeabi_dmul>
 800b182:	4606      	mov	r6, r0
 800b184:	460f      	mov	r7, r1
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4640      	mov	r0, r8
 800b18c:	4649      	mov	r1, r9
 800b18e:	f7f5 f87b 	bl	8000288 <__aeabi_dsub>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	4682      	mov	sl, r0
 800b198:	468b      	mov	fp, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 f873 	bl	8000288 <__aeabi_dsub>
 800b1a2:	4632      	mov	r2, r6
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	f7f5 f86f 	bl	8000288 <__aeabi_dsub>
 800b1aa:	a31b      	add	r3, pc, #108	; (adr r3, 800b218 <__ieee754_rem_pio2+0x310>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b8:	f7f5 fa1e 	bl	80005f8 <__aeabi_dmul>
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	f7f5 f862 	bl	8000288 <__aeabi_dsub>
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	460f      	mov	r7, r1
 800b1c8:	e764      	b.n	800b094 <__ieee754_rem_pio2+0x18c>
 800b1ca:	4b1b      	ldr	r3, [pc, #108]	; (800b238 <__ieee754_rem_pio2+0x330>)
 800b1cc:	4598      	cmp	r8, r3
 800b1ce:	dd35      	ble.n	800b23c <__ieee754_rem_pio2+0x334>
 800b1d0:	ee10 2a10 	vmov	r2, s0
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f5 f855 	bl	8000288 <__aeabi_dsub>
 800b1de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1e2:	e9c4 0100 	strd	r0, r1, [r4]
 800b1e6:	e6a1      	b.n	800af2c <__ieee754_rem_pio2+0x24>
 800b1e8:	54400000 	.word	0x54400000
 800b1ec:	3ff921fb 	.word	0x3ff921fb
 800b1f0:	1a626331 	.word	0x1a626331
 800b1f4:	3dd0b461 	.word	0x3dd0b461
 800b1f8:	1a600000 	.word	0x1a600000
 800b1fc:	3dd0b461 	.word	0x3dd0b461
 800b200:	2e037073 	.word	0x2e037073
 800b204:	3ba3198a 	.word	0x3ba3198a
 800b208:	6dc9c883 	.word	0x6dc9c883
 800b20c:	3fe45f30 	.word	0x3fe45f30
 800b210:	2e000000 	.word	0x2e000000
 800b214:	3ba3198a 	.word	0x3ba3198a
 800b218:	252049c1 	.word	0x252049c1
 800b21c:	397b839a 	.word	0x397b839a
 800b220:	3fe921fb 	.word	0x3fe921fb
 800b224:	4002d97b 	.word	0x4002d97b
 800b228:	3ff921fb 	.word	0x3ff921fb
 800b22c:	413921fb 	.word	0x413921fb
 800b230:	3fe00000 	.word	0x3fe00000
 800b234:	08010e38 	.word	0x08010e38
 800b238:	7fefffff 	.word	0x7fefffff
 800b23c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b240:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b244:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b248:	4630      	mov	r0, r6
 800b24a:	460f      	mov	r7, r1
 800b24c:	f7f5 fc84 	bl	8000b58 <__aeabi_d2iz>
 800b250:	f7f5 f968 	bl	8000524 <__aeabi_i2d>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b260:	f7f5 f812 	bl	8000288 <__aeabi_dsub>
 800b264:	2200      	movs	r2, #0
 800b266:	4b1f      	ldr	r3, [pc, #124]	; (800b2e4 <__ieee754_rem_pio2+0x3dc>)
 800b268:	f7f5 f9c6 	bl	80005f8 <__aeabi_dmul>
 800b26c:	460f      	mov	r7, r1
 800b26e:	4606      	mov	r6, r0
 800b270:	f7f5 fc72 	bl	8000b58 <__aeabi_d2iz>
 800b274:	f7f5 f956 	bl	8000524 <__aeabi_i2d>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b284:	f7f5 f800 	bl	8000288 <__aeabi_dsub>
 800b288:	2200      	movs	r2, #0
 800b28a:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <__ieee754_rem_pio2+0x3dc>)
 800b28c:	f7f5 f9b4 	bl	80005f8 <__aeabi_dmul>
 800b290:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b294:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b298:	f04f 0803 	mov.w	r8, #3
 800b29c:	2600      	movs	r6, #0
 800b29e:	2700      	movs	r7, #0
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b2a8:	f108 3aff 	add.w	sl, r8, #4294967295
 800b2ac:	f7f5 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2b0:	b9b0      	cbnz	r0, 800b2e0 <__ieee754_rem_pio2+0x3d8>
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <__ieee754_rem_pio2+0x3e0>)
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	462a      	mov	r2, r5
 800b2bc:	4643      	mov	r3, r8
 800b2be:	4621      	mov	r1, r4
 800b2c0:	a806      	add	r0, sp, #24
 800b2c2:	f000 fa09 	bl	800b6d8 <__kernel_rem_pio2>
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	f6bf ae58 	bge.w	800af80 <__ieee754_rem_pio2+0x78>
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2d6:	6063      	str	r3, [r4, #4]
 800b2d8:	68e3      	ldr	r3, [r4, #12]
 800b2da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2de:	e746      	b.n	800b16e <__ieee754_rem_pio2+0x266>
 800b2e0:	46d0      	mov	r8, sl
 800b2e2:	e7dd      	b.n	800b2a0 <__ieee754_rem_pio2+0x398>
 800b2e4:	41700000 	.word	0x41700000
 800b2e8:	08010eb8 	.word	0x08010eb8

0800b2ec <__ieee754_rem_pio2f>:
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	ee10 6a10 	vmov	r6, s0
 800b2f2:	4b86      	ldr	r3, [pc, #536]	; (800b50c <__ieee754_rem_pio2f+0x220>)
 800b2f4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	dc05      	bgt.n	800b30c <__ieee754_rem_pio2f+0x20>
 800b300:	2300      	movs	r3, #0
 800b302:	ed85 0a00 	vstr	s0, [r5]
 800b306:	6043      	str	r3, [r0, #4]
 800b308:	2000      	movs	r0, #0
 800b30a:	e020      	b.n	800b34e <__ieee754_rem_pio2f+0x62>
 800b30c:	4b80      	ldr	r3, [pc, #512]	; (800b510 <__ieee754_rem_pio2f+0x224>)
 800b30e:	429c      	cmp	r4, r3
 800b310:	dc38      	bgt.n	800b384 <__ieee754_rem_pio2f+0x98>
 800b312:	2e00      	cmp	r6, #0
 800b314:	f024 040f 	bic.w	r4, r4, #15
 800b318:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b514 <__ieee754_rem_pio2f+0x228>
 800b31c:	4b7e      	ldr	r3, [pc, #504]	; (800b518 <__ieee754_rem_pio2f+0x22c>)
 800b31e:	dd18      	ble.n	800b352 <__ieee754_rem_pio2f+0x66>
 800b320:	429c      	cmp	r4, r3
 800b322:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b326:	bf09      	itett	eq
 800b328:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b51c <__ieee754_rem_pio2f+0x230>
 800b32c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b520 <__ieee754_rem_pio2f+0x234>
 800b330:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b334:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b524 <__ieee754_rem_pio2f+0x238>
 800b338:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b33c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b340:	edc0 6a00 	vstr	s13, [r0]
 800b344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b348:	edc0 7a01 	vstr	s15, [r0, #4]
 800b34c:	2001      	movs	r0, #1
 800b34e:	b007      	add	sp, #28
 800b350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b352:	429c      	cmp	r4, r3
 800b354:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b358:	bf09      	itett	eq
 800b35a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b51c <__ieee754_rem_pio2f+0x230>
 800b35e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b520 <__ieee754_rem_pio2f+0x234>
 800b362:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b366:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b524 <__ieee754_rem_pio2f+0x238>
 800b36a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b36e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b372:	edc0 6a00 	vstr	s13, [r0]
 800b376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b37a:	edc0 7a01 	vstr	s15, [r0, #4]
 800b37e:	f04f 30ff 	mov.w	r0, #4294967295
 800b382:	e7e4      	b.n	800b34e <__ieee754_rem_pio2f+0x62>
 800b384:	4b68      	ldr	r3, [pc, #416]	; (800b528 <__ieee754_rem_pio2f+0x23c>)
 800b386:	429c      	cmp	r4, r3
 800b388:	dc71      	bgt.n	800b46e <__ieee754_rem_pio2f+0x182>
 800b38a:	f001 f9cb 	bl	800c724 <fabsf>
 800b38e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b52c <__ieee754_rem_pio2f+0x240>
 800b392:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b396:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b39e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b3a2:	ee17 0a90 	vmov	r0, s15
 800b3a6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b514 <__ieee754_rem_pio2f+0x228>
 800b3aa:	eeb1 7a46 	vneg.f32	s14, s12
 800b3ae:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b3b2:	281f      	cmp	r0, #31
 800b3b4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b520 <__ieee754_rem_pio2f+0x234>
 800b3b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b3bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b3c0:	ee16 3a90 	vmov	r3, s13
 800b3c4:	dc1c      	bgt.n	800b400 <__ieee754_rem_pio2f+0x114>
 800b3c6:	1e47      	subs	r7, r0, #1
 800b3c8:	4959      	ldr	r1, [pc, #356]	; (800b530 <__ieee754_rem_pio2f+0x244>)
 800b3ca:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b3ce:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b3d2:	428a      	cmp	r2, r1
 800b3d4:	d014      	beq.n	800b400 <__ieee754_rem_pio2f+0x114>
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	ed95 7a00 	vldr	s14, [r5]
 800b3dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3e6:	ed85 0a01 	vstr	s0, [r5, #4]
 800b3ea:	dab0      	bge.n	800b34e <__ieee754_rem_pio2f+0x62>
 800b3ec:	eeb1 7a47 	vneg.f32	s14, s14
 800b3f0:	eeb1 0a40 	vneg.f32	s0, s0
 800b3f4:	ed85 7a00 	vstr	s14, [r5]
 800b3f8:	ed85 0a01 	vstr	s0, [r5, #4]
 800b3fc:	4240      	negs	r0, r0
 800b3fe:	e7a6      	b.n	800b34e <__ieee754_rem_pio2f+0x62>
 800b400:	15e4      	asrs	r4, r4, #23
 800b402:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b406:	1aa2      	subs	r2, r4, r2
 800b408:	2a08      	cmp	r2, #8
 800b40a:	dde4      	ble.n	800b3d6 <__ieee754_rem_pio2f+0xea>
 800b40c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b51c <__ieee754_rem_pio2f+0x230>
 800b410:	eef0 6a40 	vmov.f32	s13, s0
 800b414:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b418:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b41c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b420:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b524 <__ieee754_rem_pio2f+0x238>
 800b424:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800b428:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b42c:	eef0 7a40 	vmov.f32	s15, s0
 800b430:	ee15 3a90 	vmov	r3, s11
 800b434:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b438:	1aa4      	subs	r4, r4, r2
 800b43a:	2c19      	cmp	r4, #25
 800b43c:	dc04      	bgt.n	800b448 <__ieee754_rem_pio2f+0x15c>
 800b43e:	edc5 5a00 	vstr	s11, [r5]
 800b442:	eeb0 0a66 	vmov.f32	s0, s13
 800b446:	e7c7      	b.n	800b3d8 <__ieee754_rem_pio2f+0xec>
 800b448:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b534 <__ieee754_rem_pio2f+0x248>
 800b44c:	eeb0 0a66 	vmov.f32	s0, s13
 800b450:	eea7 0a25 	vfma.f32	s0, s14, s11
 800b454:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b458:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b45c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b538 <__ieee754_rem_pio2f+0x24c>
 800b460:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800b464:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b468:	ed85 7a00 	vstr	s14, [r5]
 800b46c:	e7b4      	b.n	800b3d8 <__ieee754_rem_pio2f+0xec>
 800b46e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b472:	db06      	blt.n	800b482 <__ieee754_rem_pio2f+0x196>
 800b474:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b478:	edc0 7a01 	vstr	s15, [r0, #4]
 800b47c:	edc0 7a00 	vstr	s15, [r0]
 800b480:	e742      	b.n	800b308 <__ieee754_rem_pio2f+0x1c>
 800b482:	15e2      	asrs	r2, r4, #23
 800b484:	3a86      	subs	r2, #134	; 0x86
 800b486:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800b48a:	ee07 3a90 	vmov	s15, r3
 800b48e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b492:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b53c <__ieee754_rem_pio2f+0x250>
 800b496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b49a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b49e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b4a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b4b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c2:	edcd 7a05 	vstr	s15, [sp, #20]
 800b4c6:	d11e      	bne.n	800b506 <__ieee754_rem_pio2f+0x21a>
 800b4c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	bf0c      	ite	eq
 800b4d2:	2301      	moveq	r3, #1
 800b4d4:	2302      	movne	r3, #2
 800b4d6:	491a      	ldr	r1, [pc, #104]	; (800b540 <__ieee754_rem_pio2f+0x254>)
 800b4d8:	9101      	str	r1, [sp, #4]
 800b4da:	2102      	movs	r1, #2
 800b4dc:	9100      	str	r1, [sp, #0]
 800b4de:	a803      	add	r0, sp, #12
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f000 fd51 	bl	800bf88 <__kernel_rem_pio2f>
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	f6bf af31 	bge.w	800b34e <__ieee754_rem_pio2f+0x62>
 800b4ec:	edd5 7a00 	vldr	s15, [r5]
 800b4f0:	eef1 7a67 	vneg.f32	s15, s15
 800b4f4:	edc5 7a00 	vstr	s15, [r5]
 800b4f8:	edd5 7a01 	vldr	s15, [r5, #4]
 800b4fc:	eef1 7a67 	vneg.f32	s15, s15
 800b500:	edc5 7a01 	vstr	s15, [r5, #4]
 800b504:	e77a      	b.n	800b3fc <__ieee754_rem_pio2f+0x110>
 800b506:	2303      	movs	r3, #3
 800b508:	e7e5      	b.n	800b4d6 <__ieee754_rem_pio2f+0x1ea>
 800b50a:	bf00      	nop
 800b50c:	3f490fd8 	.word	0x3f490fd8
 800b510:	4016cbe3 	.word	0x4016cbe3
 800b514:	3fc90f80 	.word	0x3fc90f80
 800b518:	3fc90fd0 	.word	0x3fc90fd0
 800b51c:	37354400 	.word	0x37354400
 800b520:	37354443 	.word	0x37354443
 800b524:	2e85a308 	.word	0x2e85a308
 800b528:	43490f80 	.word	0x43490f80
 800b52c:	3f22f984 	.word	0x3f22f984
 800b530:	08010fc0 	.word	0x08010fc0
 800b534:	2e85a300 	.word	0x2e85a300
 800b538:	248d3132 	.word	0x248d3132
 800b53c:	43800000 	.word	0x43800000
 800b540:	08011040 	.word	0x08011040
 800b544:	00000000 	.word	0x00000000

0800b548 <__kernel_cos>:
 800b548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	ec59 8b10 	vmov	r8, r9, d0
 800b550:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b554:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b558:	ed2d 8b02 	vpush	{d8}
 800b55c:	eeb0 8a41 	vmov.f32	s16, s2
 800b560:	eef0 8a61 	vmov.f32	s17, s3
 800b564:	da07      	bge.n	800b576 <__kernel_cos+0x2e>
 800b566:	ee10 0a10 	vmov	r0, s0
 800b56a:	4649      	mov	r1, r9
 800b56c:	f7f5 faf4 	bl	8000b58 <__aeabi_d2iz>
 800b570:	2800      	cmp	r0, #0
 800b572:	f000 8089 	beq.w	800b688 <__kernel_cos+0x140>
 800b576:	4642      	mov	r2, r8
 800b578:	464b      	mov	r3, r9
 800b57a:	4640      	mov	r0, r8
 800b57c:	4649      	mov	r1, r9
 800b57e:	f7f5 f83b 	bl	80005f8 <__aeabi_dmul>
 800b582:	2200      	movs	r2, #0
 800b584:	4b4e      	ldr	r3, [pc, #312]	; (800b6c0 <__kernel_cos+0x178>)
 800b586:	4604      	mov	r4, r0
 800b588:	460d      	mov	r5, r1
 800b58a:	f7f5 f835 	bl	80005f8 <__aeabi_dmul>
 800b58e:	a340      	add	r3, pc, #256	; (adr r3, 800b690 <__kernel_cos+0x148>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	4682      	mov	sl, r0
 800b596:	468b      	mov	fp, r1
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f5 f82c 	bl	80005f8 <__aeabi_dmul>
 800b5a0:	a33d      	add	r3, pc, #244	; (adr r3, 800b698 <__kernel_cos+0x150>)
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	f7f4 fe71 	bl	800028c <__adddf3>
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	f7f5 f823 	bl	80005f8 <__aeabi_dmul>
 800b5b2:	a33b      	add	r3, pc, #236	; (adr r3, 800b6a0 <__kernel_cos+0x158>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f4 fe66 	bl	8000288 <__aeabi_dsub>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f5 f81a 	bl	80005f8 <__aeabi_dmul>
 800b5c4:	a338      	add	r3, pc, #224	; (adr r3, 800b6a8 <__kernel_cos+0x160>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 fe5f 	bl	800028c <__adddf3>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	f7f5 f811 	bl	80005f8 <__aeabi_dmul>
 800b5d6:	a336      	add	r3, pc, #216	; (adr r3, 800b6b0 <__kernel_cos+0x168>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe54 	bl	8000288 <__aeabi_dsub>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	a333      	add	r3, pc, #204	; (adr r3, 800b6b8 <__kernel_cos+0x170>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f4 fe4d 	bl	800028c <__adddf3>
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	f7f4 ffff 	bl	80005f8 <__aeabi_dmul>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	f7f4 fffb 	bl	80005f8 <__aeabi_dmul>
 800b602:	ec53 2b18 	vmov	r2, r3, d8
 800b606:	4604      	mov	r4, r0
 800b608:	460d      	mov	r5, r1
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f4 fff3 	bl	80005f8 <__aeabi_dmul>
 800b612:	460b      	mov	r3, r1
 800b614:	4602      	mov	r2, r0
 800b616:	4629      	mov	r1, r5
 800b618:	4620      	mov	r0, r4
 800b61a:	f7f4 fe35 	bl	8000288 <__aeabi_dsub>
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <__kernel_cos+0x17c>)
 800b620:	429e      	cmp	r6, r3
 800b622:	4680      	mov	r8, r0
 800b624:	4689      	mov	r9, r1
 800b626:	dc11      	bgt.n	800b64c <__kernel_cos+0x104>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4650      	mov	r0, sl
 800b62e:	4659      	mov	r1, fp
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	460b      	mov	r3, r1
 800b636:	4924      	ldr	r1, [pc, #144]	; (800b6c8 <__kernel_cos+0x180>)
 800b638:	4602      	mov	r2, r0
 800b63a:	2000      	movs	r0, #0
 800b63c:	f7f4 fe24 	bl	8000288 <__aeabi_dsub>
 800b640:	ecbd 8b02 	vpop	{d8}
 800b644:	ec41 0b10 	vmov	d0, r0, r1
 800b648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64c:	4b1f      	ldr	r3, [pc, #124]	; (800b6cc <__kernel_cos+0x184>)
 800b64e:	491e      	ldr	r1, [pc, #120]	; (800b6c8 <__kernel_cos+0x180>)
 800b650:	429e      	cmp	r6, r3
 800b652:	bfcc      	ite	gt
 800b654:	4d1e      	ldrgt	r5, [pc, #120]	; (800b6d0 <__kernel_cos+0x188>)
 800b656:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b65a:	2400      	movs	r4, #0
 800b65c:	4622      	mov	r2, r4
 800b65e:	462b      	mov	r3, r5
 800b660:	2000      	movs	r0, #0
 800b662:	f7f4 fe11 	bl	8000288 <__aeabi_dsub>
 800b666:	4622      	mov	r2, r4
 800b668:	4606      	mov	r6, r0
 800b66a:	460f      	mov	r7, r1
 800b66c:	462b      	mov	r3, r5
 800b66e:	4650      	mov	r0, sl
 800b670:	4659      	mov	r1, fp
 800b672:	f7f4 fe09 	bl	8000288 <__aeabi_dsub>
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	f7f4 fe05 	bl	8000288 <__aeabi_dsub>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	e7d9      	b.n	800b63c <__kernel_cos+0xf4>
 800b688:	2000      	movs	r0, #0
 800b68a:	490f      	ldr	r1, [pc, #60]	; (800b6c8 <__kernel_cos+0x180>)
 800b68c:	e7d8      	b.n	800b640 <__kernel_cos+0xf8>
 800b68e:	bf00      	nop
 800b690:	be8838d4 	.word	0xbe8838d4
 800b694:	bda8fae9 	.word	0xbda8fae9
 800b698:	bdb4b1c4 	.word	0xbdb4b1c4
 800b69c:	3e21ee9e 	.word	0x3e21ee9e
 800b6a0:	809c52ad 	.word	0x809c52ad
 800b6a4:	3e927e4f 	.word	0x3e927e4f
 800b6a8:	19cb1590 	.word	0x19cb1590
 800b6ac:	3efa01a0 	.word	0x3efa01a0
 800b6b0:	16c15177 	.word	0x16c15177
 800b6b4:	3f56c16c 	.word	0x3f56c16c
 800b6b8:	5555554c 	.word	0x5555554c
 800b6bc:	3fa55555 	.word	0x3fa55555
 800b6c0:	3fe00000 	.word	0x3fe00000
 800b6c4:	3fd33332 	.word	0x3fd33332
 800b6c8:	3ff00000 	.word	0x3ff00000
 800b6cc:	3fe90000 	.word	0x3fe90000
 800b6d0:	3fd20000 	.word	0x3fd20000
 800b6d4:	00000000 	.word	0x00000000

0800b6d8 <__kernel_rem_pio2>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	ed2d 8b02 	vpush	{d8}
 800b6e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b6e4:	1ed4      	subs	r4, r2, #3
 800b6e6:	9308      	str	r3, [sp, #32]
 800b6e8:	9101      	str	r1, [sp, #4]
 800b6ea:	4bc5      	ldr	r3, [pc, #788]	; (800ba00 <__kernel_rem_pio2+0x328>)
 800b6ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b6ee:	9009      	str	r0, [sp, #36]	; 0x24
 800b6f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	9b08      	ldr	r3, [sp, #32]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	9307      	str	r3, [sp, #28]
 800b6fc:	2318      	movs	r3, #24
 800b6fe:	fb94 f4f3 	sdiv	r4, r4, r3
 800b702:	f06f 0317 	mvn.w	r3, #23
 800b706:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b70a:	fb04 3303 	mla	r3, r4, r3, r3
 800b70e:	eb03 0a02 	add.w	sl, r3, r2
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	9a07      	ldr	r2, [sp, #28]
 800b716:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b9f0 <__kernel_rem_pio2+0x318>
 800b71a:	eb03 0802 	add.w	r8, r3, r2
 800b71e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b720:	1aa7      	subs	r7, r4, r2
 800b722:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b726:	ae22      	add	r6, sp, #136	; 0x88
 800b728:	2500      	movs	r5, #0
 800b72a:	4545      	cmp	r5, r8
 800b72c:	dd13      	ble.n	800b756 <__kernel_rem_pio2+0x7e>
 800b72e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b9f0 <__kernel_rem_pio2+0x318>
 800b732:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b736:	2600      	movs	r6, #0
 800b738:	9b04      	ldr	r3, [sp, #16]
 800b73a:	429e      	cmp	r6, r3
 800b73c:	dc32      	bgt.n	800b7a4 <__kernel_rem_pio2+0xcc>
 800b73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b740:	9302      	str	r3, [sp, #8]
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	199d      	adds	r5, r3, r6
 800b746:	ab22      	add	r3, sp, #136	; 0x88
 800b748:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b74c:	9306      	str	r3, [sp, #24]
 800b74e:	ec59 8b18 	vmov	r8, r9, d8
 800b752:	2700      	movs	r7, #0
 800b754:	e01f      	b.n	800b796 <__kernel_rem_pio2+0xbe>
 800b756:	42ef      	cmn	r7, r5
 800b758:	d407      	bmi.n	800b76a <__kernel_rem_pio2+0x92>
 800b75a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b75e:	f7f4 fee1 	bl	8000524 <__aeabi_i2d>
 800b762:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b766:	3501      	adds	r5, #1
 800b768:	e7df      	b.n	800b72a <__kernel_rem_pio2+0x52>
 800b76a:	ec51 0b18 	vmov	r0, r1, d8
 800b76e:	e7f8      	b.n	800b762 <__kernel_rem_pio2+0x8a>
 800b770:	9906      	ldr	r1, [sp, #24]
 800b772:	9d02      	ldr	r5, [sp, #8]
 800b774:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b778:	9106      	str	r1, [sp, #24]
 800b77a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b77e:	9502      	str	r5, [sp, #8]
 800b780:	f7f4 ff3a 	bl	80005f8 <__aeabi_dmul>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4640      	mov	r0, r8
 800b78a:	4649      	mov	r1, r9
 800b78c:	f7f4 fd7e 	bl	800028c <__adddf3>
 800b790:	3701      	adds	r7, #1
 800b792:	4680      	mov	r8, r0
 800b794:	4689      	mov	r9, r1
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	429f      	cmp	r7, r3
 800b79a:	dde9      	ble.n	800b770 <__kernel_rem_pio2+0x98>
 800b79c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b7a0:	3601      	adds	r6, #1
 800b7a2:	e7c9      	b.n	800b738 <__kernel_rem_pio2+0x60>
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	aa0e      	add	r2, sp, #56	; 0x38
 800b7a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b7ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b7b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b7b4:	9c04      	ldr	r4, [sp, #16]
 800b7b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7b8:	ab9a      	add	r3, sp, #616	; 0x268
 800b7ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b7be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b7ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b7ce:	ab9a      	add	r3, sp, #616	; 0x268
 800b7d0:	445b      	add	r3, fp
 800b7d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	1b63      	subs	r3, r4, r5
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dc78      	bgt.n	800b8d0 <__kernel_rem_pio2+0x1f8>
 800b7de:	4650      	mov	r0, sl
 800b7e0:	ec49 8b10 	vmov	d0, r8, r9
 800b7e4:	f000 ff28 	bl	800c638 <scalbn>
 800b7e8:	ec57 6b10 	vmov	r6, r7, d0
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b7f2:	ee10 0a10 	vmov	r0, s0
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fefe 	bl	80005f8 <__aeabi_dmul>
 800b7fc:	ec41 0b10 	vmov	d0, r0, r1
 800b800:	f000 fe96 	bl	800c530 <floor>
 800b804:	2200      	movs	r2, #0
 800b806:	ec51 0b10 	vmov	r0, r1, d0
 800b80a:	4b7e      	ldr	r3, [pc, #504]	; (800ba04 <__kernel_rem_pio2+0x32c>)
 800b80c:	f7f4 fef4 	bl	80005f8 <__aeabi_dmul>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f4 fd36 	bl	8000288 <__aeabi_dsub>
 800b81c:	460f      	mov	r7, r1
 800b81e:	4606      	mov	r6, r0
 800b820:	f7f5 f99a 	bl	8000b58 <__aeabi_d2iz>
 800b824:	9006      	str	r0, [sp, #24]
 800b826:	f7f4 fe7d 	bl	8000524 <__aeabi_i2d>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 fd29 	bl	8000288 <__aeabi_dsub>
 800b836:	f1ba 0f00 	cmp.w	sl, #0
 800b83a:	4606      	mov	r6, r0
 800b83c:	460f      	mov	r7, r1
 800b83e:	dd6c      	ble.n	800b91a <__kernel_rem_pio2+0x242>
 800b840:	1e62      	subs	r2, r4, #1
 800b842:	ab0e      	add	r3, sp, #56	; 0x38
 800b844:	f1ca 0118 	rsb	r1, sl, #24
 800b848:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b84c:	9d06      	ldr	r5, [sp, #24]
 800b84e:	fa40 f301 	asr.w	r3, r0, r1
 800b852:	441d      	add	r5, r3
 800b854:	408b      	lsls	r3, r1
 800b856:	1ac0      	subs	r0, r0, r3
 800b858:	ab0e      	add	r3, sp, #56	; 0x38
 800b85a:	9506      	str	r5, [sp, #24]
 800b85c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b860:	f1ca 0317 	rsb	r3, sl, #23
 800b864:	fa40 f303 	asr.w	r3, r0, r3
 800b868:	9302      	str	r3, [sp, #8]
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd62      	ble.n	800b936 <__kernel_rem_pio2+0x25e>
 800b870:	9b06      	ldr	r3, [sp, #24]
 800b872:	2200      	movs	r2, #0
 800b874:	3301      	adds	r3, #1
 800b876:	9306      	str	r3, [sp, #24]
 800b878:	4615      	mov	r5, r2
 800b87a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b87e:	4294      	cmp	r4, r2
 800b880:	f300 8095 	bgt.w	800b9ae <__kernel_rem_pio2+0x2d6>
 800b884:	f1ba 0f00 	cmp.w	sl, #0
 800b888:	dd07      	ble.n	800b89a <__kernel_rem_pio2+0x1c2>
 800b88a:	f1ba 0f01 	cmp.w	sl, #1
 800b88e:	f000 80a2 	beq.w	800b9d6 <__kernel_rem_pio2+0x2fe>
 800b892:	f1ba 0f02 	cmp.w	sl, #2
 800b896:	f000 80c1 	beq.w	800ba1c <__kernel_rem_pio2+0x344>
 800b89a:	9b02      	ldr	r3, [sp, #8]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d14a      	bne.n	800b936 <__kernel_rem_pio2+0x25e>
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	463b      	mov	r3, r7
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	4958      	ldr	r1, [pc, #352]	; (800ba08 <__kernel_rem_pio2+0x330>)
 800b8a8:	f7f4 fcee 	bl	8000288 <__aeabi_dsub>
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	460f      	mov	r7, r1
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d040      	beq.n	800b936 <__kernel_rem_pio2+0x25e>
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b9f8 <__kernel_rem_pio2+0x320>
 800b8ba:	f000 febd 	bl	800c638 <scalbn>
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	ec53 2b10 	vmov	r2, r3, d0
 800b8c6:	f7f4 fcdf 	bl	8000288 <__aeabi_dsub>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	e032      	b.n	800b936 <__kernel_rem_pio2+0x25e>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4b4e      	ldr	r3, [pc, #312]	; (800ba0c <__kernel_rem_pio2+0x334>)
 800b8d4:	4640      	mov	r0, r8
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	f7f4 fe8e 	bl	80005f8 <__aeabi_dmul>
 800b8dc:	f7f5 f93c 	bl	8000b58 <__aeabi_d2iz>
 800b8e0:	f7f4 fe20 	bl	8000524 <__aeabi_i2d>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4b4a      	ldr	r3, [pc, #296]	; (800ba10 <__kernel_rem_pio2+0x338>)
 800b8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	f7f4 fcc6 	bl	8000288 <__aeabi_dsub>
 800b8fc:	f7f5 f92c 	bl	8000b58 <__aeabi_d2iz>
 800b900:	ab0e      	add	r3, sp, #56	; 0x38
 800b902:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b906:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	f7f4 fcbd 	bl	800028c <__adddf3>
 800b912:	3501      	adds	r5, #1
 800b914:	4680      	mov	r8, r0
 800b916:	4689      	mov	r9, r1
 800b918:	e75e      	b.n	800b7d8 <__kernel_rem_pio2+0x100>
 800b91a:	d105      	bne.n	800b928 <__kernel_rem_pio2+0x250>
 800b91c:	1e63      	subs	r3, r4, #1
 800b91e:	aa0e      	add	r2, sp, #56	; 0x38
 800b920:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b924:	15c3      	asrs	r3, r0, #23
 800b926:	e79f      	b.n	800b868 <__kernel_rem_pio2+0x190>
 800b928:	2200      	movs	r2, #0
 800b92a:	4b3a      	ldr	r3, [pc, #232]	; (800ba14 <__kernel_rem_pio2+0x33c>)
 800b92c:	f7f5 f8ea 	bl	8000b04 <__aeabi_dcmpge>
 800b930:	2800      	cmp	r0, #0
 800b932:	d139      	bne.n	800b9a8 <__kernel_rem_pio2+0x2d0>
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	4630      	mov	r0, r6
 800b93c:	4639      	mov	r1, r7
 800b93e:	f7f5 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b942:	2800      	cmp	r0, #0
 800b944:	f000 80c7 	beq.w	800bad6 <__kernel_rem_pio2+0x3fe>
 800b948:	1e65      	subs	r5, r4, #1
 800b94a:	462b      	mov	r3, r5
 800b94c:	2200      	movs	r2, #0
 800b94e:	9904      	ldr	r1, [sp, #16]
 800b950:	428b      	cmp	r3, r1
 800b952:	da6a      	bge.n	800ba2a <__kernel_rem_pio2+0x352>
 800b954:	2a00      	cmp	r2, #0
 800b956:	f000 8088 	beq.w	800ba6a <__kernel_rem_pio2+0x392>
 800b95a:	ab0e      	add	r3, sp, #56	; 0x38
 800b95c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b960:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 80b4 	beq.w	800bad2 <__kernel_rem_pio2+0x3fa>
 800b96a:	4650      	mov	r0, sl
 800b96c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b9f8 <__kernel_rem_pio2+0x320>
 800b970:	f000 fe62 	bl	800c638 <scalbn>
 800b974:	00ec      	lsls	r4, r5, #3
 800b976:	ab72      	add	r3, sp, #456	; 0x1c8
 800b978:	191e      	adds	r6, r3, r4
 800b97a:	ec59 8b10 	vmov	r8, r9, d0
 800b97e:	f106 0a08 	add.w	sl, r6, #8
 800b982:	462f      	mov	r7, r5
 800b984:	2f00      	cmp	r7, #0
 800b986:	f280 80df 	bge.w	800bb48 <__kernel_rem_pio2+0x470>
 800b98a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b9f0 <__kernel_rem_pio2+0x318>
 800b98e:	f04f 0a00 	mov.w	sl, #0
 800b992:	eba5 030a 	sub.w	r3, r5, sl
 800b996:	2b00      	cmp	r3, #0
 800b998:	f2c0 810a 	blt.w	800bbb0 <__kernel_rem_pio2+0x4d8>
 800b99c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ba18 <__kernel_rem_pio2+0x340>
 800b9a0:	ec59 8b18 	vmov	r8, r9, d8
 800b9a4:	2700      	movs	r7, #0
 800b9a6:	e0f5      	b.n	800bb94 <__kernel_rem_pio2+0x4bc>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	9302      	str	r3, [sp, #8]
 800b9ac:	e760      	b.n	800b870 <__kernel_rem_pio2+0x198>
 800b9ae:	ab0e      	add	r3, sp, #56	; 0x38
 800b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b4:	b94d      	cbnz	r5, 800b9ca <__kernel_rem_pio2+0x2f2>
 800b9b6:	b12b      	cbz	r3, 800b9c4 <__kernel_rem_pio2+0x2ec>
 800b9b8:	a80e      	add	r0, sp, #56	; 0x38
 800b9ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b9be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	461d      	mov	r5, r3
 800b9c8:	e759      	b.n	800b87e <__kernel_rem_pio2+0x1a6>
 800b9ca:	a80e      	add	r0, sp, #56	; 0x38
 800b9cc:	1acb      	subs	r3, r1, r3
 800b9ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	e7f6      	b.n	800b9c4 <__kernel_rem_pio2+0x2ec>
 800b9d6:	1e62      	subs	r2, r4, #1
 800b9d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b9e2:	a90e      	add	r1, sp, #56	; 0x38
 800b9e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b9e8:	e757      	b.n	800b89a <__kernel_rem_pio2+0x1c2>
 800b9ea:	bf00      	nop
 800b9ec:	f3af 8000 	nop.w
	...
 800b9fc:	3ff00000 	.word	0x3ff00000
 800ba00:	08011398 	.word	0x08011398
 800ba04:	40200000 	.word	0x40200000
 800ba08:	3ff00000 	.word	0x3ff00000
 800ba0c:	3e700000 	.word	0x3e700000
 800ba10:	41700000 	.word	0x41700000
 800ba14:	3fe00000 	.word	0x3fe00000
 800ba18:	08011358 	.word	0x08011358
 800ba1c:	1e62      	subs	r2, r4, #1
 800ba1e:	ab0e      	add	r3, sp, #56	; 0x38
 800ba20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba28:	e7db      	b.n	800b9e2 <__kernel_rem_pio2+0x30a>
 800ba2a:	a90e      	add	r1, sp, #56	; 0x38
 800ba2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	430a      	orrs	r2, r1
 800ba34:	e78b      	b.n	800b94e <__kernel_rem_pio2+0x276>
 800ba36:	3301      	adds	r3, #1
 800ba38:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ba3c:	2900      	cmp	r1, #0
 800ba3e:	d0fa      	beq.n	800ba36 <__kernel_rem_pio2+0x35e>
 800ba40:	9a08      	ldr	r2, [sp, #32]
 800ba42:	4422      	add	r2, r4
 800ba44:	00d2      	lsls	r2, r2, #3
 800ba46:	a922      	add	r1, sp, #136	; 0x88
 800ba48:	18e3      	adds	r3, r4, r3
 800ba4a:	9206      	str	r2, [sp, #24]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	9302      	str	r3, [sp, #8]
 800ba50:	f10b 0108 	add.w	r1, fp, #8
 800ba54:	f102 0308 	add.w	r3, r2, #8
 800ba58:	1c66      	adds	r6, r4, #1
 800ba5a:	910a      	str	r1, [sp, #40]	; 0x28
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	42b3      	cmp	r3, r6
 800ba64:	da04      	bge.n	800ba70 <__kernel_rem_pio2+0x398>
 800ba66:	461c      	mov	r4, r3
 800ba68:	e6a6      	b.n	800b7b8 <__kernel_rem_pio2+0xe0>
 800ba6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7e3      	b.n	800ba38 <__kernel_rem_pio2+0x360>
 800ba70:	9b06      	ldr	r3, [sp, #24]
 800ba72:	18ef      	adds	r7, r5, r3
 800ba74:	ab22      	add	r3, sp, #136	; 0x88
 800ba76:	441f      	add	r7, r3
 800ba78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ba7e:	f7f4 fd51 	bl	8000524 <__aeabi_i2d>
 800ba82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba84:	461c      	mov	r4, r3
 800ba86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba88:	e9c7 0100 	strd	r0, r1, [r7]
 800ba8c:	eb03 0b05 	add.w	fp, r3, r5
 800ba90:	2700      	movs	r7, #0
 800ba92:	f04f 0800 	mov.w	r8, #0
 800ba96:	f04f 0900 	mov.w	r9, #0
 800ba9a:	9b07      	ldr	r3, [sp, #28]
 800ba9c:	429f      	cmp	r7, r3
 800ba9e:	dd08      	ble.n	800bab2 <__kernel_rem_pio2+0x3da>
 800baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa2:	aa72      	add	r2, sp, #456	; 0x1c8
 800baa4:	18eb      	adds	r3, r5, r3
 800baa6:	4413      	add	r3, r2
 800baa8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800baac:	3601      	adds	r6, #1
 800baae:	3508      	adds	r5, #8
 800bab0:	e7d6      	b.n	800ba60 <__kernel_rem_pio2+0x388>
 800bab2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bab6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800baba:	f7f4 fd9d 	bl	80005f8 <__aeabi_dmul>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4640      	mov	r0, r8
 800bac4:	4649      	mov	r1, r9
 800bac6:	f7f4 fbe1 	bl	800028c <__adddf3>
 800baca:	3701      	adds	r7, #1
 800bacc:	4680      	mov	r8, r0
 800bace:	4689      	mov	r9, r1
 800bad0:	e7e3      	b.n	800ba9a <__kernel_rem_pio2+0x3c2>
 800bad2:	3d01      	subs	r5, #1
 800bad4:	e741      	b.n	800b95a <__kernel_rem_pio2+0x282>
 800bad6:	f1ca 0000 	rsb	r0, sl, #0
 800bada:	ec47 6b10 	vmov	d0, r6, r7
 800bade:	f000 fdab 	bl	800c638 <scalbn>
 800bae2:	ec57 6b10 	vmov	r6, r7, d0
 800bae6:	2200      	movs	r2, #0
 800bae8:	4b99      	ldr	r3, [pc, #612]	; (800bd50 <__kernel_rem_pio2+0x678>)
 800baea:	ee10 0a10 	vmov	r0, s0
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f5 f808 	bl	8000b04 <__aeabi_dcmpge>
 800baf4:	b1f8      	cbz	r0, 800bb36 <__kernel_rem_pio2+0x45e>
 800baf6:	2200      	movs	r2, #0
 800baf8:	4b96      	ldr	r3, [pc, #600]	; (800bd54 <__kernel_rem_pio2+0x67c>)
 800bafa:	4630      	mov	r0, r6
 800bafc:	4639      	mov	r1, r7
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	f7f5 f829 	bl	8000b58 <__aeabi_d2iz>
 800bb06:	4680      	mov	r8, r0
 800bb08:	f7f4 fd0c 	bl	8000524 <__aeabi_i2d>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4b90      	ldr	r3, [pc, #576]	; (800bd50 <__kernel_rem_pio2+0x678>)
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	460b      	mov	r3, r1
 800bb16:	4602      	mov	r2, r0
 800bb18:	4639      	mov	r1, r7
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7f4 fbb4 	bl	8000288 <__aeabi_dsub>
 800bb20:	f7f5 f81a 	bl	8000b58 <__aeabi_d2iz>
 800bb24:	1c65      	adds	r5, r4, #1
 800bb26:	ab0e      	add	r3, sp, #56	; 0x38
 800bb28:	f10a 0a18 	add.w	sl, sl, #24
 800bb2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb30:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bb34:	e719      	b.n	800b96a <__kernel_rem_pio2+0x292>
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f5 f80d 	bl	8000b58 <__aeabi_d2iz>
 800bb3e:	ab0e      	add	r3, sp, #56	; 0x38
 800bb40:	4625      	mov	r5, r4
 800bb42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb46:	e710      	b.n	800b96a <__kernel_rem_pio2+0x292>
 800bb48:	ab0e      	add	r3, sp, #56	; 0x38
 800bb4a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bb4e:	f7f4 fce9 	bl	8000524 <__aeabi_i2d>
 800bb52:	4642      	mov	r2, r8
 800bb54:	464b      	mov	r3, r9
 800bb56:	f7f4 fd4f 	bl	80005f8 <__aeabi_dmul>
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bb60:	4b7c      	ldr	r3, [pc, #496]	; (800bd54 <__kernel_rem_pio2+0x67c>)
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fd47 	bl	80005f8 <__aeabi_dmul>
 800bb6a:	3f01      	subs	r7, #1
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	4689      	mov	r9, r1
 800bb70:	e708      	b.n	800b984 <__kernel_rem_pio2+0x2ac>
 800bb72:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bb7e:	f7f4 fd3b 	bl	80005f8 <__aeabi_dmul>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4640      	mov	r0, r8
 800bb88:	4649      	mov	r1, r9
 800bb8a:	f7f4 fb7f 	bl	800028c <__adddf3>
 800bb8e:	3701      	adds	r7, #1
 800bb90:	4680      	mov	r8, r0
 800bb92:	4689      	mov	r9, r1
 800bb94:	9b04      	ldr	r3, [sp, #16]
 800bb96:	429f      	cmp	r7, r3
 800bb98:	dc01      	bgt.n	800bb9e <__kernel_rem_pio2+0x4c6>
 800bb9a:	45ba      	cmp	sl, r7
 800bb9c:	dae9      	bge.n	800bb72 <__kernel_rem_pio2+0x49a>
 800bb9e:	ab4a      	add	r3, sp, #296	; 0x128
 800bba0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bba4:	e9c3 8900 	strd	r8, r9, [r3]
 800bba8:	f10a 0a01 	add.w	sl, sl, #1
 800bbac:	3e08      	subs	r6, #8
 800bbae:	e6f0      	b.n	800b992 <__kernel_rem_pio2+0x2ba>
 800bbb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d85b      	bhi.n	800bc6e <__kernel_rem_pio2+0x596>
 800bbb6:	e8df f003 	tbb	[pc, r3]
 800bbba:	264a      	.short	0x264a
 800bbbc:	0226      	.short	0x0226
 800bbbe:	ab9a      	add	r3, sp, #616	; 0x268
 800bbc0:	441c      	add	r4, r3
 800bbc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bbc6:	46a2      	mov	sl, r4
 800bbc8:	46ab      	mov	fp, r5
 800bbca:	f1bb 0f00 	cmp.w	fp, #0
 800bbce:	dc6c      	bgt.n	800bcaa <__kernel_rem_pio2+0x5d2>
 800bbd0:	46a2      	mov	sl, r4
 800bbd2:	46ab      	mov	fp, r5
 800bbd4:	f1bb 0f01 	cmp.w	fp, #1
 800bbd8:	f300 8086 	bgt.w	800bce8 <__kernel_rem_pio2+0x610>
 800bbdc:	2000      	movs	r0, #0
 800bbde:	2100      	movs	r1, #0
 800bbe0:	2d01      	cmp	r5, #1
 800bbe2:	f300 80a0 	bgt.w	800bd26 <__kernel_rem_pio2+0x64e>
 800bbe6:	9b02      	ldr	r3, [sp, #8]
 800bbe8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bbec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 809e 	bne.w	800bd32 <__kernel_rem_pio2+0x65a>
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	e9c3 7800 	strd	r7, r8, [r3]
 800bbfc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bc00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bc04:	e033      	b.n	800bc6e <__kernel_rem_pio2+0x596>
 800bc06:	3408      	adds	r4, #8
 800bc08:	ab4a      	add	r3, sp, #296	; 0x128
 800bc0a:	441c      	add	r4, r3
 800bc0c:	462e      	mov	r6, r5
 800bc0e:	2000      	movs	r0, #0
 800bc10:	2100      	movs	r1, #0
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	da3a      	bge.n	800bc8c <__kernel_rem_pio2+0x5b4>
 800bc16:	9b02      	ldr	r3, [sp, #8]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d03d      	beq.n	800bc98 <__kernel_rem_pio2+0x5c0>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc22:	9c01      	ldr	r4, [sp, #4]
 800bc24:	e9c4 2300 	strd	r2, r3, [r4]
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bc30:	f7f4 fb2a 	bl	8000288 <__aeabi_dsub>
 800bc34:	ae4c      	add	r6, sp, #304	; 0x130
 800bc36:	2401      	movs	r4, #1
 800bc38:	42a5      	cmp	r5, r4
 800bc3a:	da30      	bge.n	800bc9e <__kernel_rem_pio2+0x5c6>
 800bc3c:	9b02      	ldr	r3, [sp, #8]
 800bc3e:	b113      	cbz	r3, 800bc46 <__kernel_rem_pio2+0x56e>
 800bc40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc44:	4619      	mov	r1, r3
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bc4c:	e00f      	b.n	800bc6e <__kernel_rem_pio2+0x596>
 800bc4e:	ab9a      	add	r3, sp, #616	; 0x268
 800bc50:	441c      	add	r4, r3
 800bc52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bc56:	2000      	movs	r0, #0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	2d00      	cmp	r5, #0
 800bc5c:	da10      	bge.n	800bc80 <__kernel_rem_pio2+0x5a8>
 800bc5e:	9b02      	ldr	r3, [sp, #8]
 800bc60:	b113      	cbz	r3, 800bc68 <__kernel_rem_pio2+0x590>
 800bc62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc66:	4619      	mov	r1, r3
 800bc68:	9b01      	ldr	r3, [sp, #4]
 800bc6a:	e9c3 0100 	strd	r0, r1, [r3]
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	f003 0007 	and.w	r0, r3, #7
 800bc74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bc78:	ecbd 8b02 	vpop	{d8}
 800bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc80:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc84:	f7f4 fb02 	bl	800028c <__adddf3>
 800bc88:	3d01      	subs	r5, #1
 800bc8a:	e7e6      	b.n	800bc5a <__kernel_rem_pio2+0x582>
 800bc8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc90:	f7f4 fafc 	bl	800028c <__adddf3>
 800bc94:	3e01      	subs	r6, #1
 800bc96:	e7bc      	b.n	800bc12 <__kernel_rem_pio2+0x53a>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	e7c1      	b.n	800bc22 <__kernel_rem_pio2+0x54a>
 800bc9e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bca2:	f7f4 faf3 	bl	800028c <__adddf3>
 800bca6:	3401      	adds	r4, #1
 800bca8:	e7c6      	b.n	800bc38 <__kernel_rem_pio2+0x560>
 800bcaa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bcae:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	ec53 2b17 	vmov	r2, r3, d7
 800bcb8:	4649      	mov	r1, r9
 800bcba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bcbe:	f7f4 fae5 	bl	800028c <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	4640      	mov	r0, r8
 800bccc:	4649      	mov	r1, r9
 800bcce:	f7f4 fadb 	bl	8000288 <__aeabi_dsub>
 800bcd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd6:	f7f4 fad9 	bl	800028c <__adddf3>
 800bcda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcde:	e9ca 0100 	strd	r0, r1, [sl]
 800bce2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bce6:	e770      	b.n	800bbca <__kernel_rem_pio2+0x4f2>
 800bce8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bcec:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	ec53 2b17 	vmov	r2, r3, d7
 800bcf6:	4639      	mov	r1, r7
 800bcf8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bcfc:	f7f4 fac6 	bl	800028c <__adddf3>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f7f4 fabc 	bl	8000288 <__aeabi_dsub>
 800bd10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd14:	f7f4 faba 	bl	800028c <__adddf3>
 800bd18:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd1c:	e9ca 0100 	strd	r0, r1, [sl]
 800bd20:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bd24:	e756      	b.n	800bbd4 <__kernel_rem_pio2+0x4fc>
 800bd26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd2a:	f7f4 faaf 	bl	800028c <__adddf3>
 800bd2e:	3d01      	subs	r5, #1
 800bd30:	e756      	b.n	800bbe0 <__kernel_rem_pio2+0x508>
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	9a01      	ldr	r2, [sp, #4]
 800bd36:	601f      	str	r7, [r3, #0]
 800bd38:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bd3c:	605c      	str	r4, [r3, #4]
 800bd3e:	609d      	str	r5, [r3, #8]
 800bd40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd44:	60d3      	str	r3, [r2, #12]
 800bd46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd4a:	6110      	str	r0, [r2, #16]
 800bd4c:	6153      	str	r3, [r2, #20]
 800bd4e:	e78e      	b.n	800bc6e <__kernel_rem_pio2+0x596>
 800bd50:	41700000 	.word	0x41700000
 800bd54:	3e700000 	.word	0x3e700000

0800bd58 <__kernel_sin>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	ec55 4b10 	vmov	r4, r5, d0
 800bd60:	b085      	sub	sp, #20
 800bd62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd66:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bd6a:	ed8d 1b00 	vstr	d1, [sp]
 800bd6e:	9002      	str	r0, [sp, #8]
 800bd70:	da06      	bge.n	800bd80 <__kernel_sin+0x28>
 800bd72:	ee10 0a10 	vmov	r0, s0
 800bd76:	4629      	mov	r1, r5
 800bd78:	f7f4 feee 	bl	8000b58 <__aeabi_d2iz>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d051      	beq.n	800be24 <__kernel_sin+0xcc>
 800bd80:	4622      	mov	r2, r4
 800bd82:	462b      	mov	r3, r5
 800bd84:	4620      	mov	r0, r4
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7f4 fc36 	bl	80005f8 <__aeabi_dmul>
 800bd8c:	4682      	mov	sl, r0
 800bd8e:	468b      	mov	fp, r1
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	4620      	mov	r0, r4
 800bd96:	4629      	mov	r1, r5
 800bd98:	f7f4 fc2e 	bl	80005f8 <__aeabi_dmul>
 800bd9c:	a341      	add	r3, pc, #260	; (adr r3, 800bea4 <__kernel_sin+0x14c>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	4680      	mov	r8, r0
 800bda4:	4689      	mov	r9, r1
 800bda6:	4650      	mov	r0, sl
 800bda8:	4659      	mov	r1, fp
 800bdaa:	f7f4 fc25 	bl	80005f8 <__aeabi_dmul>
 800bdae:	a33f      	add	r3, pc, #252	; (adr r3, 800beac <__kernel_sin+0x154>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 fa68 	bl	8000288 <__aeabi_dsub>
 800bdb8:	4652      	mov	r2, sl
 800bdba:	465b      	mov	r3, fp
 800bdbc:	f7f4 fc1c 	bl	80005f8 <__aeabi_dmul>
 800bdc0:	a33c      	add	r3, pc, #240	; (adr r3, 800beb4 <__kernel_sin+0x15c>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fa61 	bl	800028c <__adddf3>
 800bdca:	4652      	mov	r2, sl
 800bdcc:	465b      	mov	r3, fp
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	a33a      	add	r3, pc, #232	; (adr r3, 800bebc <__kernel_sin+0x164>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa56 	bl	8000288 <__aeabi_dsub>
 800bddc:	4652      	mov	r2, sl
 800bdde:	465b      	mov	r3, fp
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	a337      	add	r3, pc, #220	; (adr r3, 800bec4 <__kernel_sin+0x16c>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fa4f 	bl	800028c <__adddf3>
 800bdee:	9b02      	ldr	r3, [sp, #8]
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	460f      	mov	r7, r1
 800bdf4:	b9db      	cbnz	r3, 800be2e <__kernel_sin+0xd6>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	4659      	mov	r1, fp
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	a325      	add	r3, pc, #148	; (adr r3, 800be98 <__kernel_sin+0x140>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 fa3e 	bl	8000288 <__aeabi_dsub>
 800be0c:	4642      	mov	r2, r8
 800be0e:	464b      	mov	r3, r9
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4620      	mov	r0, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 fa36 	bl	800028c <__adddf3>
 800be20:	4604      	mov	r4, r0
 800be22:	460d      	mov	r5, r1
 800be24:	ec45 4b10 	vmov	d0, r4, r5
 800be28:	b005      	add	sp, #20
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2e:	2200      	movs	r2, #0
 800be30:	4b1b      	ldr	r3, [pc, #108]	; (800bea0 <__kernel_sin+0x148>)
 800be32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be36:	f7f4 fbdf 	bl	80005f8 <__aeabi_dmul>
 800be3a:	4632      	mov	r2, r6
 800be3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be40:	463b      	mov	r3, r7
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fbd7 	bl	80005f8 <__aeabi_dmul>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be52:	f7f4 fa19 	bl	8000288 <__aeabi_dsub>
 800be56:	4652      	mov	r2, sl
 800be58:	465b      	mov	r3, fp
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be62:	f7f4 fa11 	bl	8000288 <__aeabi_dsub>
 800be66:	a30c      	add	r3, pc, #48	; (adr r3, 800be98 <__kernel_sin+0x140>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	4606      	mov	r6, r0
 800be6e:	460f      	mov	r7, r1
 800be70:	4640      	mov	r0, r8
 800be72:	4649      	mov	r1, r9
 800be74:	f7f4 fbc0 	bl	80005f8 <__aeabi_dmul>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4630      	mov	r0, r6
 800be7e:	4639      	mov	r1, r7
 800be80:	f7f4 fa04 	bl	800028c <__adddf3>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4620      	mov	r0, r4
 800be8a:	4629      	mov	r1, r5
 800be8c:	f7f4 f9fc 	bl	8000288 <__aeabi_dsub>
 800be90:	e7c6      	b.n	800be20 <__kernel_sin+0xc8>
 800be92:	bf00      	nop
 800be94:	f3af 8000 	nop.w
 800be98:	55555549 	.word	0x55555549
 800be9c:	3fc55555 	.word	0x3fc55555
 800bea0:	3fe00000 	.word	0x3fe00000
 800bea4:	5acfd57c 	.word	0x5acfd57c
 800bea8:	3de5d93a 	.word	0x3de5d93a
 800beac:	8a2b9ceb 	.word	0x8a2b9ceb
 800beb0:	3e5ae5e6 	.word	0x3e5ae5e6
 800beb4:	57b1fe7d 	.word	0x57b1fe7d
 800beb8:	3ec71de3 	.word	0x3ec71de3
 800bebc:	19c161d5 	.word	0x19c161d5
 800bec0:	3f2a01a0 	.word	0x3f2a01a0
 800bec4:	1110f8a6 	.word	0x1110f8a6
 800bec8:	3f811111 	.word	0x3f811111

0800becc <__kernel_cosf>:
 800becc:	ee10 3a10 	vmov	r3, s0
 800bed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bed4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bedc:	da05      	bge.n	800beea <__kernel_cosf+0x1e>
 800bede:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bee2:	ee17 2a90 	vmov	r2, s15
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	d03b      	beq.n	800bf62 <__kernel_cosf+0x96>
 800beea:	ee20 6a00 	vmul.f32	s12, s0, s0
 800beee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bef2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bf68 <__kernel_cosf+0x9c>
 800bef6:	4a1d      	ldr	r2, [pc, #116]	; (800bf6c <__kernel_cosf+0xa0>)
 800bef8:	ee66 7a07 	vmul.f32	s15, s12, s14
 800befc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bf70 <__kernel_cosf+0xa4>
 800bf00:	eea6 7a25 	vfma.f32	s14, s12, s11
 800bf04:	4293      	cmp	r3, r2
 800bf06:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800bf74 <__kernel_cosf+0xa8>
 800bf0a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bf0e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800bf78 <__kernel_cosf+0xac>
 800bf12:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bf16:	eddf 5a19 	vldr	s11, [pc, #100]	; 800bf7c <__kernel_cosf+0xb0>
 800bf1a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bf1e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800bf80 <__kernel_cosf+0xb4>
 800bf22:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bf26:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bf2a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bf2e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800bf32:	dc04      	bgt.n	800bf3e <__kernel_cosf+0x72>
 800bf34:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800bf38:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800bf3c:	4770      	bx	lr
 800bf3e:	4a11      	ldr	r2, [pc, #68]	; (800bf84 <__kernel_cosf+0xb8>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	bfda      	itte	le
 800bf44:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bf48:	ee07 3a10 	vmovle	s14, r3
 800bf4c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800bf50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf54:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800bf58:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bf5c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf60:	4770      	bx	lr
 800bf62:	eeb0 0a66 	vmov.f32	s0, s13
 800bf66:	4770      	bx	lr
 800bf68:	ad47d74e 	.word	0xad47d74e
 800bf6c:	3e999999 	.word	0x3e999999
 800bf70:	310f74f6 	.word	0x310f74f6
 800bf74:	b493f27c 	.word	0xb493f27c
 800bf78:	37d00d01 	.word	0x37d00d01
 800bf7c:	bab60b61 	.word	0xbab60b61
 800bf80:	3d2aaaab 	.word	0x3d2aaaab
 800bf84:	3f480000 	.word	0x3f480000

0800bf88 <__kernel_rem_pio2f>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	ed2d 8b04 	vpush	{d8-d9}
 800bf90:	b0d7      	sub	sp, #348	; 0x15c
 800bf92:	469b      	mov	fp, r3
 800bf94:	460e      	mov	r6, r1
 800bf96:	4bbe      	ldr	r3, [pc, #760]	; (800c290 <__kernel_rem_pio2f+0x308>)
 800bf98:	9964      	ldr	r1, [sp, #400]	; 0x190
 800bf9a:	9002      	str	r0, [sp, #8]
 800bf9c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800bfa0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800bfa2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800bfa6:	1ed1      	subs	r1, r2, #3
 800bfa8:	2308      	movs	r3, #8
 800bfaa:	fb91 f1f3 	sdiv	r1, r1, r3
 800bfae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800bfb2:	f10b 3aff 	add.w	sl, fp, #4294967295
 800bfb6:	1c4c      	adds	r4, r1, #1
 800bfb8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800bfbc:	eba1 050a 	sub.w	r5, r1, sl
 800bfc0:	aa1a      	add	r2, sp, #104	; 0x68
 800bfc2:	eb09 070a 	add.w	r7, r9, sl
 800bfc6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800bfca:	4696      	mov	lr, r2
 800bfcc:	2300      	movs	r3, #0
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	dd0f      	ble.n	800bff2 <__kernel_rem_pio2f+0x6a>
 800bfd2:	af42      	add	r7, sp, #264	; 0x108
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	454a      	cmp	r2, r9
 800bfd8:	dc27      	bgt.n	800c02a <__kernel_rem_pio2f+0xa2>
 800bfda:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800bfde:	eb0b 0302 	add.w	r3, fp, r2
 800bfe2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800bfe6:	9d02      	ldr	r5, [sp, #8]
 800bfe8:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800bfec:	f04f 0c00 	mov.w	ip, #0
 800bff0:	e015      	b.n	800c01e <__kernel_rem_pio2f+0x96>
 800bff2:	42dd      	cmn	r5, r3
 800bff4:	bf5d      	ittte	pl
 800bff6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800bffa:	ee07 2a90 	vmovpl	s15, r2
 800bffe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c002:	eef0 7a47 	vmovmi.f32	s15, s14
 800c006:	ecee 7a01 	vstmia	lr!, {s15}
 800c00a:	3301      	adds	r3, #1
 800c00c:	e7df      	b.n	800bfce <__kernel_rem_pio2f+0x46>
 800c00e:	ecf5 6a01 	vldmia	r5!, {s13}
 800c012:	ed33 7a01 	vldmdb	r3!, {s14}
 800c016:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c01a:	f10c 0c01 	add.w	ip, ip, #1
 800c01e:	45d4      	cmp	ip, sl
 800c020:	ddf5      	ble.n	800c00e <__kernel_rem_pio2f+0x86>
 800c022:	ece7 7a01 	vstmia	r7!, {s15}
 800c026:	3201      	adds	r2, #1
 800c028:	e7d5      	b.n	800bfd6 <__kernel_rem_pio2f+0x4e>
 800c02a:	ab06      	add	r3, sp, #24
 800c02c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c29c <__kernel_rem_pio2f+0x314>
 800c036:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c298 <__kernel_rem_pio2f+0x310>
 800c03a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c03e:	9303      	str	r3, [sp, #12]
 800c040:	464d      	mov	r5, r9
 800c042:	ab56      	add	r3, sp, #344	; 0x158
 800c044:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c048:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c04c:	3f01      	subs	r7, #1
 800c04e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c052:	00bf      	lsls	r7, r7, #2
 800c054:	ab56      	add	r3, sp, #344	; 0x158
 800c056:	19da      	adds	r2, r3, r7
 800c058:	3a4c      	subs	r2, #76	; 0x4c
 800c05a:	2300      	movs	r3, #0
 800c05c:	1ae9      	subs	r1, r5, r3
 800c05e:	2900      	cmp	r1, #0
 800c060:	dc4c      	bgt.n	800c0fc <__kernel_rem_pio2f+0x174>
 800c062:	4620      	mov	r0, r4
 800c064:	f000 fba8 	bl	800c7b8 <scalbnf>
 800c068:	eeb0 8a40 	vmov.f32	s16, s0
 800c06c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c070:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c074:	f000 fb5e 	bl	800c734 <floorf>
 800c078:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c07c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c080:	2c00      	cmp	r4, #0
 800c082:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c086:	edcd 7a01 	vstr	s15, [sp, #4]
 800c08a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c08e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c092:	dd48      	ble.n	800c126 <__kernel_rem_pio2f+0x19e>
 800c094:	1e69      	subs	r1, r5, #1
 800c096:	ab06      	add	r3, sp, #24
 800c098:	f1c4 0008 	rsb	r0, r4, #8
 800c09c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c0a0:	9a01      	ldr	r2, [sp, #4]
 800c0a2:	fa4c f300 	asr.w	r3, ip, r0
 800c0a6:	441a      	add	r2, r3
 800c0a8:	4083      	lsls	r3, r0
 800c0aa:	9201      	str	r2, [sp, #4]
 800c0ac:	ebac 0203 	sub.w	r2, ip, r3
 800c0b0:	ab06      	add	r3, sp, #24
 800c0b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c0b6:	f1c4 0307 	rsb	r3, r4, #7
 800c0ba:	fa42 f803 	asr.w	r8, r2, r3
 800c0be:	f1b8 0f00 	cmp.w	r8, #0
 800c0c2:	dd41      	ble.n	800c148 <__kernel_rem_pio2f+0x1c0>
 800c0c4:	9b01      	ldr	r3, [sp, #4]
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	4601      	mov	r1, r0
 800c0ce:	4285      	cmp	r5, r0
 800c0d0:	dc6d      	bgt.n	800c1ae <__kernel_rem_pio2f+0x226>
 800c0d2:	2c00      	cmp	r4, #0
 800c0d4:	dd04      	ble.n	800c0e0 <__kernel_rem_pio2f+0x158>
 800c0d6:	2c01      	cmp	r4, #1
 800c0d8:	d07e      	beq.n	800c1d8 <__kernel_rem_pio2f+0x250>
 800c0da:	2c02      	cmp	r4, #2
 800c0dc:	f000 8086 	beq.w	800c1ec <__kernel_rem_pio2f+0x264>
 800c0e0:	f1b8 0f02 	cmp.w	r8, #2
 800c0e4:	d130      	bne.n	800c148 <__kernel_rem_pio2f+0x1c0>
 800c0e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c0ea:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c0ee:	b359      	cbz	r1, 800c148 <__kernel_rem_pio2f+0x1c0>
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f000 fb61 	bl	800c7b8 <scalbnf>
 800c0f6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c0fa:	e025      	b.n	800c148 <__kernel_rem_pio2f+0x1c0>
 800c0fc:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c100:	a806      	add	r0, sp, #24
 800c102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c10a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c10e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c112:	ee10 1a10 	vmov	r1, s0
 800c116:	ed32 0a01 	vldmdb	r2!, {s0}
 800c11a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c11e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c122:	3301      	adds	r3, #1
 800c124:	e79a      	b.n	800c05c <__kernel_rem_pio2f+0xd4>
 800c126:	d106      	bne.n	800c136 <__kernel_rem_pio2f+0x1ae>
 800c128:	1e6b      	subs	r3, r5, #1
 800c12a:	aa06      	add	r2, sp, #24
 800c12c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c130:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c134:	e7c3      	b.n	800c0be <__kernel_rem_pio2f+0x136>
 800c136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c13a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c142:	da31      	bge.n	800c1a8 <__kernel_rem_pio2f+0x220>
 800c144:	f04f 0800 	mov.w	r8, #0
 800c148:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	f040 80a8 	bne.w	800c2a4 <__kernel_rem_pio2f+0x31c>
 800c154:	1e6b      	subs	r3, r5, #1
 800c156:	4618      	mov	r0, r3
 800c158:	2200      	movs	r2, #0
 800c15a:	4548      	cmp	r0, r9
 800c15c:	da4d      	bge.n	800c1fa <__kernel_rem_pio2f+0x272>
 800c15e:	2a00      	cmp	r2, #0
 800c160:	f000 8087 	beq.w	800c272 <__kernel_rem_pio2f+0x2ea>
 800c164:	aa06      	add	r2, sp, #24
 800c166:	3c08      	subs	r4, #8
 800c168:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c16c:	2900      	cmp	r1, #0
 800c16e:	f000 808d 	beq.w	800c28c <__kernel_rem_pio2f+0x304>
 800c172:	4620      	mov	r0, r4
 800c174:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c178:	9302      	str	r3, [sp, #8]
 800c17a:	f000 fb1d 	bl	800c7b8 <scalbnf>
 800c17e:	9b02      	ldr	r3, [sp, #8]
 800c180:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c29c <__kernel_rem_pio2f+0x314>
 800c184:	0099      	lsls	r1, r3, #2
 800c186:	aa42      	add	r2, sp, #264	; 0x108
 800c188:	1850      	adds	r0, r2, r1
 800c18a:	1d05      	adds	r5, r0, #4
 800c18c:	461c      	mov	r4, r3
 800c18e:	2c00      	cmp	r4, #0
 800c190:	f280 80b8 	bge.w	800c304 <__kernel_rem_pio2f+0x37c>
 800c194:	2500      	movs	r5, #0
 800c196:	1b5c      	subs	r4, r3, r5
 800c198:	2c00      	cmp	r4, #0
 800c19a:	f2c0 80d8 	blt.w	800c34e <__kernel_rem_pio2f+0x3c6>
 800c19e:	4f3d      	ldr	r7, [pc, #244]	; (800c294 <__kernel_rem_pio2f+0x30c>)
 800c1a0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800c1a4:	2400      	movs	r4, #0
 800c1a6:	e0c6      	b.n	800c336 <__kernel_rem_pio2f+0x3ae>
 800c1a8:	f04f 0802 	mov.w	r8, #2
 800c1ac:	e78a      	b.n	800c0c4 <__kernel_rem_pio2f+0x13c>
 800c1ae:	ab06      	add	r3, sp, #24
 800c1b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c1b4:	b949      	cbnz	r1, 800c1ca <__kernel_rem_pio2f+0x242>
 800c1b6:	b12b      	cbz	r3, 800c1c4 <__kernel_rem_pio2f+0x23c>
 800c1b8:	aa06      	add	r2, sp, #24
 800c1ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c1be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	e781      	b.n	800c0ce <__kernel_rem_pio2f+0x146>
 800c1ca:	aa06      	add	r2, sp, #24
 800c1cc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c1d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	e7f5      	b.n	800c1c4 <__kernel_rem_pio2f+0x23c>
 800c1d8:	1e68      	subs	r0, r5, #1
 800c1da:	ab06      	add	r3, sp, #24
 800c1dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1e4:	aa06      	add	r2, sp, #24
 800c1e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c1ea:	e779      	b.n	800c0e0 <__kernel_rem_pio2f+0x158>
 800c1ec:	1e68      	subs	r0, r5, #1
 800c1ee:	ab06      	add	r3, sp, #24
 800c1f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c1f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1f8:	e7f4      	b.n	800c1e4 <__kernel_rem_pio2f+0x25c>
 800c1fa:	a906      	add	r1, sp, #24
 800c1fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c200:	3801      	subs	r0, #1
 800c202:	430a      	orrs	r2, r1
 800c204:	e7a9      	b.n	800c15a <__kernel_rem_pio2f+0x1d2>
 800c206:	f10c 0c01 	add.w	ip, ip, #1
 800c20a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c20e:	2a00      	cmp	r2, #0
 800c210:	d0f9      	beq.n	800c206 <__kernel_rem_pio2f+0x27e>
 800c212:	eb0b 0305 	add.w	r3, fp, r5
 800c216:	aa1a      	add	r2, sp, #104	; 0x68
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	1898      	adds	r0, r3, r2
 800c21c:	3004      	adds	r0, #4
 800c21e:	1c69      	adds	r1, r5, #1
 800c220:	3704      	adds	r7, #4
 800c222:	2200      	movs	r2, #0
 800c224:	4465      	add	r5, ip
 800c226:	9005      	str	r0, [sp, #20]
 800c228:	428d      	cmp	r5, r1
 800c22a:	f6ff af0a 	blt.w	800c042 <__kernel_rem_pio2f+0xba>
 800c22e:	a81a      	add	r0, sp, #104	; 0x68
 800c230:	eb02 0c03 	add.w	ip, r2, r3
 800c234:	4484      	add	ip, r0
 800c236:	9803      	ldr	r0, [sp, #12]
 800c238:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c23c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c240:	9001      	str	r0, [sp, #4]
 800c242:	ee07 0a90 	vmov	s15, r0
 800c246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c24a:	9805      	ldr	r0, [sp, #20]
 800c24c:	edcc 7a00 	vstr	s15, [ip]
 800c250:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800c254:	eb00 0802 	add.w	r8, r0, r2
 800c258:	f04f 0c00 	mov.w	ip, #0
 800c25c:	45d4      	cmp	ip, sl
 800c25e:	dd0c      	ble.n	800c27a <__kernel_rem_pio2f+0x2f2>
 800c260:	eb02 0c07 	add.w	ip, r2, r7
 800c264:	a842      	add	r0, sp, #264	; 0x108
 800c266:	4484      	add	ip, r0
 800c268:	edcc 7a01 	vstr	s15, [ip, #4]
 800c26c:	3101      	adds	r1, #1
 800c26e:	3204      	adds	r2, #4
 800c270:	e7da      	b.n	800c228 <__kernel_rem_pio2f+0x2a0>
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	f04f 0c01 	mov.w	ip, #1
 800c278:	e7c7      	b.n	800c20a <__kernel_rem_pio2f+0x282>
 800c27a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c27e:	ed38 7a01 	vldmdb	r8!, {s14}
 800c282:	f10c 0c01 	add.w	ip, ip, #1
 800c286:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c28a:	e7e7      	b.n	800c25c <__kernel_rem_pio2f+0x2d4>
 800c28c:	3b01      	subs	r3, #1
 800c28e:	e769      	b.n	800c164 <__kernel_rem_pio2f+0x1dc>
 800c290:	080113d4 	.word	0x080113d4
 800c294:	080113a8 	.word	0x080113a8
 800c298:	43800000 	.word	0x43800000
 800c29c:	3b800000 	.word	0x3b800000
 800c2a0:	00000000 	.word	0x00000000
 800c2a4:	4260      	negs	r0, r4
 800c2a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c2aa:	f000 fa85 	bl	800c7b8 <scalbnf>
 800c2ae:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c298 <__kernel_rem_pio2f+0x310>
 800c2b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ba:	db1a      	blt.n	800c2f2 <__kernel_rem_pio2f+0x36a>
 800c2bc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c29c <__kernel_rem_pio2f+0x314>
 800c2c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c2c4:	aa06      	add	r2, sp, #24
 800c2c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2ca:	a906      	add	r1, sp, #24
 800c2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2d0:	3408      	adds	r4, #8
 800c2d2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c2de:	ee10 3a10 	vmov	r3, s0
 800c2e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c2e6:	1c6b      	adds	r3, r5, #1
 800c2e8:	ee17 2a90 	vmov	r2, s15
 800c2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c2f0:	e73f      	b.n	800c172 <__kernel_rem_pio2f+0x1ea>
 800c2f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c2f6:	aa06      	add	r2, sp, #24
 800c2f8:	ee10 3a10 	vmov	r3, s0
 800c2fc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c300:	462b      	mov	r3, r5
 800c302:	e736      	b.n	800c172 <__kernel_rem_pio2f+0x1ea>
 800c304:	aa06      	add	r2, sp, #24
 800c306:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c30a:	9202      	str	r2, [sp, #8]
 800c30c:	ee07 2a90 	vmov	s15, r2
 800c310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c314:	3c01      	subs	r4, #1
 800c316:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c31a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c31e:	ed65 7a01 	vstmdb	r5!, {s15}
 800c322:	e734      	b.n	800c18e <__kernel_rem_pio2f+0x206>
 800c324:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c328:	ecf7 6a01 	vldmia	r7!, {s13}
 800c32c:	ed9c 7a00 	vldr	s14, [ip]
 800c330:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c334:	3401      	adds	r4, #1
 800c336:	454c      	cmp	r4, r9
 800c338:	dc01      	bgt.n	800c33e <__kernel_rem_pio2f+0x3b6>
 800c33a:	42a5      	cmp	r5, r4
 800c33c:	daf2      	bge.n	800c324 <__kernel_rem_pio2f+0x39c>
 800c33e:	aa56      	add	r2, sp, #344	; 0x158
 800c340:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c344:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c348:	3501      	adds	r5, #1
 800c34a:	3804      	subs	r0, #4
 800c34c:	e723      	b.n	800c196 <__kernel_rem_pio2f+0x20e>
 800c34e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c350:	2a03      	cmp	r2, #3
 800c352:	d84d      	bhi.n	800c3f0 <__kernel_rem_pio2f+0x468>
 800c354:	e8df f002 	tbb	[pc, r2]
 800c358:	021f1f3e 	.word	0x021f1f3e
 800c35c:	aa56      	add	r2, sp, #344	; 0x158
 800c35e:	4411      	add	r1, r2
 800c360:	399c      	subs	r1, #156	; 0x9c
 800c362:	4608      	mov	r0, r1
 800c364:	461c      	mov	r4, r3
 800c366:	2c00      	cmp	r4, #0
 800c368:	dc5f      	bgt.n	800c42a <__kernel_rem_pio2f+0x4a2>
 800c36a:	4608      	mov	r0, r1
 800c36c:	461c      	mov	r4, r3
 800c36e:	2c01      	cmp	r4, #1
 800c370:	dc6b      	bgt.n	800c44a <__kernel_rem_pio2f+0x4c2>
 800c372:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800c376:	2b01      	cmp	r3, #1
 800c378:	dc77      	bgt.n	800c46a <__kernel_rem_pio2f+0x4e2>
 800c37a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c37e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c382:	f1b8 0f00 	cmp.w	r8, #0
 800c386:	d176      	bne.n	800c476 <__kernel_rem_pio2f+0x4ee>
 800c388:	edc6 6a00 	vstr	s13, [r6]
 800c38c:	ed86 7a01 	vstr	s14, [r6, #4]
 800c390:	edc6 7a02 	vstr	s15, [r6, #8]
 800c394:	e02c      	b.n	800c3f0 <__kernel_rem_pio2f+0x468>
 800c396:	aa56      	add	r2, sp, #344	; 0x158
 800c398:	4411      	add	r1, r2
 800c39a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800c39e:	399c      	subs	r1, #156	; 0x9c
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	da32      	bge.n	800c40c <__kernel_rem_pio2f+0x484>
 800c3a6:	f1b8 0f00 	cmp.w	r8, #0
 800c3aa:	d035      	beq.n	800c418 <__kernel_rem_pio2f+0x490>
 800c3ac:	eef1 7a47 	vneg.f32	s15, s14
 800c3b0:	edc6 7a00 	vstr	s15, [r6]
 800c3b4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c3b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3bc:	a82f      	add	r0, sp, #188	; 0xbc
 800c3be:	2101      	movs	r1, #1
 800c3c0:	428b      	cmp	r3, r1
 800c3c2:	da2c      	bge.n	800c41e <__kernel_rem_pio2f+0x496>
 800c3c4:	f1b8 0f00 	cmp.w	r8, #0
 800c3c8:	d001      	beq.n	800c3ce <__kernel_rem_pio2f+0x446>
 800c3ca:	eef1 7a67 	vneg.f32	s15, s15
 800c3ce:	edc6 7a01 	vstr	s15, [r6, #4]
 800c3d2:	e00d      	b.n	800c3f0 <__kernel_rem_pio2f+0x468>
 800c3d4:	aa56      	add	r2, sp, #344	; 0x158
 800c3d6:	4411      	add	r1, r2
 800c3d8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c2a0 <__kernel_rem_pio2f+0x318>
 800c3dc:	399c      	subs	r1, #156	; 0x9c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	da0e      	bge.n	800c400 <__kernel_rem_pio2f+0x478>
 800c3e2:	f1b8 0f00 	cmp.w	r8, #0
 800c3e6:	d001      	beq.n	800c3ec <__kernel_rem_pio2f+0x464>
 800c3e8:	eef1 7a67 	vneg.f32	s15, s15
 800c3ec:	edc6 7a00 	vstr	s15, [r6]
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	f003 0007 	and.w	r0, r3, #7
 800c3f6:	b057      	add	sp, #348	; 0x15c
 800c3f8:	ecbd 8b04 	vpop	{d8-d9}
 800c3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c400:	ed31 7a01 	vldmdb	r1!, {s14}
 800c404:	3b01      	subs	r3, #1
 800c406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c40a:	e7e8      	b.n	800c3de <__kernel_rem_pio2f+0x456>
 800c40c:	ed71 7a01 	vldmdb	r1!, {s15}
 800c410:	3801      	subs	r0, #1
 800c412:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c416:	e7c4      	b.n	800c3a2 <__kernel_rem_pio2f+0x41a>
 800c418:	eef0 7a47 	vmov.f32	s15, s14
 800c41c:	e7c8      	b.n	800c3b0 <__kernel_rem_pio2f+0x428>
 800c41e:	ecb0 7a01 	vldmia	r0!, {s14}
 800c422:	3101      	adds	r1, #1
 800c424:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c428:	e7ca      	b.n	800c3c0 <__kernel_rem_pio2f+0x438>
 800c42a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c42e:	ed70 6a01 	vldmdb	r0!, {s13}
 800c432:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c436:	3c01      	subs	r4, #1
 800c438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c43c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c444:	edc0 7a00 	vstr	s15, [r0]
 800c448:	e78d      	b.n	800c366 <__kernel_rem_pio2f+0x3de>
 800c44a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c44e:	ed70 6a01 	vldmdb	r0!, {s13}
 800c452:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c456:	3c01      	subs	r4, #1
 800c458:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c45c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c464:	edc0 7a00 	vstr	s15, [r0]
 800c468:	e781      	b.n	800c36e <__kernel_rem_pio2f+0x3e6>
 800c46a:	ed31 7a01 	vldmdb	r1!, {s14}
 800c46e:	3b01      	subs	r3, #1
 800c470:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c474:	e77f      	b.n	800c376 <__kernel_rem_pio2f+0x3ee>
 800c476:	eef1 6a66 	vneg.f32	s13, s13
 800c47a:	eeb1 7a47 	vneg.f32	s14, s14
 800c47e:	edc6 6a00 	vstr	s13, [r6]
 800c482:	ed86 7a01 	vstr	s14, [r6, #4]
 800c486:	eef1 7a67 	vneg.f32	s15, s15
 800c48a:	e781      	b.n	800c390 <__kernel_rem_pio2f+0x408>

0800c48c <__kernel_sinf>:
 800c48c:	ee10 3a10 	vmov	r3, s0
 800c490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c494:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c498:	da04      	bge.n	800c4a4 <__kernel_sinf+0x18>
 800c49a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c49e:	ee17 3a90 	vmov	r3, s15
 800c4a2:	b35b      	cbz	r3, 800c4fc <__kernel_sinf+0x70>
 800c4a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c4a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c500 <__kernel_sinf+0x74>
 800c4ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c504 <__kernel_sinf+0x78>
 800c4b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c4b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c508 <__kernel_sinf+0x7c>
 800c4b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c4bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c50c <__kernel_sinf+0x80>
 800c4c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c4c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c510 <__kernel_sinf+0x84>
 800c4c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c4cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c4d0:	b930      	cbnz	r0, 800c4e0 <__kernel_sinf+0x54>
 800c4d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c514 <__kernel_sinf+0x88>
 800c4d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c4da:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c4de:	4770      	bx	lr
 800c4e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c4e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c4e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c4ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c4f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c518 <__kernel_sinf+0x8c>
 800c4f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c4f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	2f2ec9d3 	.word	0x2f2ec9d3
 800c504:	b2d72f34 	.word	0xb2d72f34
 800c508:	3638ef1b 	.word	0x3638ef1b
 800c50c:	b9500d01 	.word	0xb9500d01
 800c510:	3c088889 	.word	0x3c088889
 800c514:	be2aaaab 	.word	0xbe2aaaab
 800c518:	3e2aaaab 	.word	0x3e2aaaab

0800c51c <fabs>:
 800c51c:	ec51 0b10 	vmov	r0, r1, d0
 800c520:	ee10 2a10 	vmov	r2, s0
 800c524:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c528:	ec43 2b10 	vmov	d0, r2, r3
 800c52c:	4770      	bx	lr
	...

0800c530 <floor>:
 800c530:	ec51 0b10 	vmov	r0, r1, d0
 800c534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c538:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c53c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c540:	2e13      	cmp	r6, #19
 800c542:	460c      	mov	r4, r1
 800c544:	ee10 5a10 	vmov	r5, s0
 800c548:	4680      	mov	r8, r0
 800c54a:	dc34      	bgt.n	800c5b6 <floor+0x86>
 800c54c:	2e00      	cmp	r6, #0
 800c54e:	da16      	bge.n	800c57e <floor+0x4e>
 800c550:	a335      	add	r3, pc, #212	; (adr r3, 800c628 <floor+0xf8>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f3 fe99 	bl	800028c <__adddf3>
 800c55a:	2200      	movs	r2, #0
 800c55c:	2300      	movs	r3, #0
 800c55e:	f7f4 fadb 	bl	8000b18 <__aeabi_dcmpgt>
 800c562:	b148      	cbz	r0, 800c578 <floor+0x48>
 800c564:	2c00      	cmp	r4, #0
 800c566:	da59      	bge.n	800c61c <floor+0xec>
 800c568:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c56c:	4a30      	ldr	r2, [pc, #192]	; (800c630 <floor+0x100>)
 800c56e:	432b      	orrs	r3, r5
 800c570:	2500      	movs	r5, #0
 800c572:	42ab      	cmp	r3, r5
 800c574:	bf18      	it	ne
 800c576:	4614      	movne	r4, r2
 800c578:	4621      	mov	r1, r4
 800c57a:	4628      	mov	r0, r5
 800c57c:	e025      	b.n	800c5ca <floor+0x9a>
 800c57e:	4f2d      	ldr	r7, [pc, #180]	; (800c634 <floor+0x104>)
 800c580:	4137      	asrs	r7, r6
 800c582:	ea01 0307 	and.w	r3, r1, r7
 800c586:	4303      	orrs	r3, r0
 800c588:	d01f      	beq.n	800c5ca <floor+0x9a>
 800c58a:	a327      	add	r3, pc, #156	; (adr r3, 800c628 <floor+0xf8>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe7c 	bl	800028c <__adddf3>
 800c594:	2200      	movs	r2, #0
 800c596:	2300      	movs	r3, #0
 800c598:	f7f4 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d0eb      	beq.n	800c578 <floor+0x48>
 800c5a0:	2c00      	cmp	r4, #0
 800c5a2:	bfbe      	ittt	lt
 800c5a4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c5a8:	fa43 f606 	asrlt.w	r6, r3, r6
 800c5ac:	19a4      	addlt	r4, r4, r6
 800c5ae:	ea24 0407 	bic.w	r4, r4, r7
 800c5b2:	2500      	movs	r5, #0
 800c5b4:	e7e0      	b.n	800c578 <floor+0x48>
 800c5b6:	2e33      	cmp	r6, #51	; 0x33
 800c5b8:	dd0b      	ble.n	800c5d2 <floor+0xa2>
 800c5ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5be:	d104      	bne.n	800c5ca <floor+0x9a>
 800c5c0:	ee10 2a10 	vmov	r2, s0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	f7f3 fe61 	bl	800028c <__adddf3>
 800c5ca:	ec41 0b10 	vmov	d0, r0, r1
 800c5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5da:	fa23 f707 	lsr.w	r7, r3, r7
 800c5de:	4207      	tst	r7, r0
 800c5e0:	d0f3      	beq.n	800c5ca <floor+0x9a>
 800c5e2:	a311      	add	r3, pc, #68	; (adr r3, 800c628 <floor+0xf8>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7f3 fe50 	bl	800028c <__adddf3>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f7f4 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d0bf      	beq.n	800c578 <floor+0x48>
 800c5f8:	2c00      	cmp	r4, #0
 800c5fa:	da02      	bge.n	800c602 <floor+0xd2>
 800c5fc:	2e14      	cmp	r6, #20
 800c5fe:	d103      	bne.n	800c608 <floor+0xd8>
 800c600:	3401      	adds	r4, #1
 800c602:	ea25 0507 	bic.w	r5, r5, r7
 800c606:	e7b7      	b.n	800c578 <floor+0x48>
 800c608:	2301      	movs	r3, #1
 800c60a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c60e:	fa03 f606 	lsl.w	r6, r3, r6
 800c612:	4435      	add	r5, r6
 800c614:	4545      	cmp	r5, r8
 800c616:	bf38      	it	cc
 800c618:	18e4      	addcc	r4, r4, r3
 800c61a:	e7f2      	b.n	800c602 <floor+0xd2>
 800c61c:	2500      	movs	r5, #0
 800c61e:	462c      	mov	r4, r5
 800c620:	e7aa      	b.n	800c578 <floor+0x48>
 800c622:	bf00      	nop
 800c624:	f3af 8000 	nop.w
 800c628:	8800759c 	.word	0x8800759c
 800c62c:	7e37e43c 	.word	0x7e37e43c
 800c630:	bff00000 	.word	0xbff00000
 800c634:	000fffff 	.word	0x000fffff

0800c638 <scalbn>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	ec55 4b10 	vmov	r4, r5, d0
 800c63e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c642:	4606      	mov	r6, r0
 800c644:	462b      	mov	r3, r5
 800c646:	b9aa      	cbnz	r2, 800c674 <scalbn+0x3c>
 800c648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c64c:	4323      	orrs	r3, r4
 800c64e:	d03b      	beq.n	800c6c8 <scalbn+0x90>
 800c650:	4b31      	ldr	r3, [pc, #196]	; (800c718 <scalbn+0xe0>)
 800c652:	4629      	mov	r1, r5
 800c654:	2200      	movs	r2, #0
 800c656:	ee10 0a10 	vmov	r0, s0
 800c65a:	f7f3 ffcd 	bl	80005f8 <__aeabi_dmul>
 800c65e:	4b2f      	ldr	r3, [pc, #188]	; (800c71c <scalbn+0xe4>)
 800c660:	429e      	cmp	r6, r3
 800c662:	4604      	mov	r4, r0
 800c664:	460d      	mov	r5, r1
 800c666:	da12      	bge.n	800c68e <scalbn+0x56>
 800c668:	a327      	add	r3, pc, #156	; (adr r3, 800c708 <scalbn+0xd0>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	f7f3 ffc3 	bl	80005f8 <__aeabi_dmul>
 800c672:	e009      	b.n	800c688 <scalbn+0x50>
 800c674:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c678:	428a      	cmp	r2, r1
 800c67a:	d10c      	bne.n	800c696 <scalbn+0x5e>
 800c67c:	ee10 2a10 	vmov	r2, s0
 800c680:	4620      	mov	r0, r4
 800c682:	4629      	mov	r1, r5
 800c684:	f7f3 fe02 	bl	800028c <__adddf3>
 800c688:	4604      	mov	r4, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	e01c      	b.n	800c6c8 <scalbn+0x90>
 800c68e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c692:	460b      	mov	r3, r1
 800c694:	3a36      	subs	r2, #54	; 0x36
 800c696:	4432      	add	r2, r6
 800c698:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c69c:	428a      	cmp	r2, r1
 800c69e:	dd0b      	ble.n	800c6b8 <scalbn+0x80>
 800c6a0:	ec45 4b11 	vmov	d1, r4, r5
 800c6a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c710 <scalbn+0xd8>
 800c6a8:	f000 f8e6 	bl	800c878 <copysign>
 800c6ac:	a318      	add	r3, pc, #96	; (adr r3, 800c710 <scalbn+0xd8>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	ec51 0b10 	vmov	r0, r1, d0
 800c6b6:	e7da      	b.n	800c66e <scalbn+0x36>
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	dd08      	ble.n	800c6ce <scalbn+0x96>
 800c6bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6c8:	ec45 4b10 	vmov	d0, r4, r5
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6d2:	da0d      	bge.n	800c6f0 <scalbn+0xb8>
 800c6d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6d8:	429e      	cmp	r6, r3
 800c6da:	ec45 4b11 	vmov	d1, r4, r5
 800c6de:	dce1      	bgt.n	800c6a4 <scalbn+0x6c>
 800c6e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c708 <scalbn+0xd0>
 800c6e4:	f000 f8c8 	bl	800c878 <copysign>
 800c6e8:	a307      	add	r3, pc, #28	; (adr r3, 800c708 <scalbn+0xd0>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	e7e0      	b.n	800c6b2 <scalbn+0x7a>
 800c6f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6f4:	3236      	adds	r2, #54	; 0x36
 800c6f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6fe:	4620      	mov	r0, r4
 800c700:	4629      	mov	r1, r5
 800c702:	2200      	movs	r2, #0
 800c704:	4b06      	ldr	r3, [pc, #24]	; (800c720 <scalbn+0xe8>)
 800c706:	e7b2      	b.n	800c66e <scalbn+0x36>
 800c708:	c2f8f359 	.word	0xc2f8f359
 800c70c:	01a56e1f 	.word	0x01a56e1f
 800c710:	8800759c 	.word	0x8800759c
 800c714:	7e37e43c 	.word	0x7e37e43c
 800c718:	43500000 	.word	0x43500000
 800c71c:	ffff3cb0 	.word	0xffff3cb0
 800c720:	3c900000 	.word	0x3c900000

0800c724 <fabsf>:
 800c724:	ee10 3a10 	vmov	r3, s0
 800c728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c72c:	ee00 3a10 	vmov	s0, r3
 800c730:	4770      	bx	lr
	...

0800c734 <floorf>:
 800c734:	ee10 3a10 	vmov	r3, s0
 800c738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c73c:	0dca      	lsrs	r2, r1, #23
 800c73e:	3a7f      	subs	r2, #127	; 0x7f
 800c740:	2a16      	cmp	r2, #22
 800c742:	dc2a      	bgt.n	800c79a <floorf+0x66>
 800c744:	2a00      	cmp	r2, #0
 800c746:	da11      	bge.n	800c76c <floorf+0x38>
 800c748:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c7ac <floorf+0x78>
 800c74c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c758:	dd05      	ble.n	800c766 <floorf+0x32>
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	da23      	bge.n	800c7a6 <floorf+0x72>
 800c75e:	4a14      	ldr	r2, [pc, #80]	; (800c7b0 <floorf+0x7c>)
 800c760:	2900      	cmp	r1, #0
 800c762:	bf18      	it	ne
 800c764:	4613      	movne	r3, r2
 800c766:	ee00 3a10 	vmov	s0, r3
 800c76a:	4770      	bx	lr
 800c76c:	4911      	ldr	r1, [pc, #68]	; (800c7b4 <floorf+0x80>)
 800c76e:	4111      	asrs	r1, r2
 800c770:	420b      	tst	r3, r1
 800c772:	d0fa      	beq.n	800c76a <floorf+0x36>
 800c774:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c7ac <floorf+0x78>
 800c778:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c77c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c784:	ddef      	ble.n	800c766 <floorf+0x32>
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfbe      	ittt	lt
 800c78a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c78e:	fa40 f202 	asrlt.w	r2, r0, r2
 800c792:	189b      	addlt	r3, r3, r2
 800c794:	ea23 0301 	bic.w	r3, r3, r1
 800c798:	e7e5      	b.n	800c766 <floorf+0x32>
 800c79a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c79e:	d3e4      	bcc.n	800c76a <floorf+0x36>
 800c7a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7a4:	4770      	bx	lr
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e7dd      	b.n	800c766 <floorf+0x32>
 800c7aa:	bf00      	nop
 800c7ac:	7149f2ca 	.word	0x7149f2ca
 800c7b0:	bf800000 	.word	0xbf800000
 800c7b4:	007fffff 	.word	0x007fffff

0800c7b8 <scalbnf>:
 800c7b8:	b508      	push	{r3, lr}
 800c7ba:	ee10 2a10 	vmov	r2, s0
 800c7be:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c7c2:	ed2d 8b02 	vpush	{d8}
 800c7c6:	eef0 0a40 	vmov.f32	s1, s0
 800c7ca:	d004      	beq.n	800c7d6 <scalbnf+0x1e>
 800c7cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c7d0:	d306      	bcc.n	800c7e0 <scalbnf+0x28>
 800c7d2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c7d6:	ecbd 8b02 	vpop	{d8}
 800c7da:	eeb0 0a60 	vmov.f32	s0, s1
 800c7de:	bd08      	pop	{r3, pc}
 800c7e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7e4:	d21c      	bcs.n	800c820 <scalbnf+0x68>
 800c7e6:	4b1f      	ldr	r3, [pc, #124]	; (800c864 <scalbnf+0xac>)
 800c7e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c868 <scalbnf+0xb0>
 800c7ec:	4298      	cmp	r0, r3
 800c7ee:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c7f2:	db10      	blt.n	800c816 <scalbnf+0x5e>
 800c7f4:	ee10 2a90 	vmov	r2, s1
 800c7f8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c7fc:	3b19      	subs	r3, #25
 800c7fe:	4403      	add	r3, r0
 800c800:	2bfe      	cmp	r3, #254	; 0xfe
 800c802:	dd0f      	ble.n	800c824 <scalbnf+0x6c>
 800c804:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c86c <scalbnf+0xb4>
 800c808:	eeb0 0a48 	vmov.f32	s0, s16
 800c80c:	f000 f843 	bl	800c896 <copysignf>
 800c810:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c814:	e7df      	b.n	800c7d6 <scalbnf+0x1e>
 800c816:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c870 <scalbnf+0xb8>
 800c81a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c81e:	e7da      	b.n	800c7d6 <scalbnf+0x1e>
 800c820:	0ddb      	lsrs	r3, r3, #23
 800c822:	e7ec      	b.n	800c7fe <scalbnf+0x46>
 800c824:	2b00      	cmp	r3, #0
 800c826:	dd06      	ble.n	800c836 <scalbnf+0x7e>
 800c828:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c82c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c830:	ee00 3a90 	vmov	s1, r3
 800c834:	e7cf      	b.n	800c7d6 <scalbnf+0x1e>
 800c836:	f113 0f16 	cmn.w	r3, #22
 800c83a:	da06      	bge.n	800c84a <scalbnf+0x92>
 800c83c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c840:	4298      	cmp	r0, r3
 800c842:	dcdf      	bgt.n	800c804 <scalbnf+0x4c>
 800c844:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800c870 <scalbnf+0xb8>
 800c848:	e7de      	b.n	800c808 <scalbnf+0x50>
 800c84a:	3319      	adds	r3, #25
 800c84c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c850:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c854:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c874 <scalbnf+0xbc>
 800c858:	ee07 3a10 	vmov	s14, r3
 800c85c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800c860:	e7b9      	b.n	800c7d6 <scalbnf+0x1e>
 800c862:	bf00      	nop
 800c864:	ffff3cb0 	.word	0xffff3cb0
 800c868:	4c000000 	.word	0x4c000000
 800c86c:	7149f2ca 	.word	0x7149f2ca
 800c870:	0da24260 	.word	0x0da24260
 800c874:	33000000 	.word	0x33000000

0800c878 <copysign>:
 800c878:	ec51 0b10 	vmov	r0, r1, d0
 800c87c:	ee11 0a90 	vmov	r0, s3
 800c880:	ee10 2a10 	vmov	r2, s0
 800c884:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c88c:	ea41 0300 	orr.w	r3, r1, r0
 800c890:	ec43 2b10 	vmov	d0, r2, r3
 800c894:	4770      	bx	lr

0800c896 <copysignf>:
 800c896:	ee10 3a10 	vmov	r3, s0
 800c89a:	ee10 2a90 	vmov	r2, s1
 800c89e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	ee00 3a10 	vmov	s0, r3
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <__errno>:
 800c8b0:	4b01      	ldr	r3, [pc, #4]	; (800c8b8 <__errno+0x8>)
 800c8b2:	6818      	ldr	r0, [r3, #0]
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	20000040 	.word	0x20000040

0800c8bc <__libc_init_array>:
 800c8bc:	b570      	push	{r4, r5, r6, lr}
 800c8be:	4e0d      	ldr	r6, [pc, #52]	; (800c8f4 <__libc_init_array+0x38>)
 800c8c0:	4c0d      	ldr	r4, [pc, #52]	; (800c8f8 <__libc_init_array+0x3c>)
 800c8c2:	1ba4      	subs	r4, r4, r6
 800c8c4:	10a4      	asrs	r4, r4, #2
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	42a5      	cmp	r5, r4
 800c8ca:	d109      	bne.n	800c8e0 <__libc_init_array+0x24>
 800c8cc:	4e0b      	ldr	r6, [pc, #44]	; (800c8fc <__libc_init_array+0x40>)
 800c8ce:	4c0c      	ldr	r4, [pc, #48]	; (800c900 <__libc_init_array+0x44>)
 800c8d0:	f004 fa60 	bl	8010d94 <_init>
 800c8d4:	1ba4      	subs	r4, r4, r6
 800c8d6:	10a4      	asrs	r4, r4, #2
 800c8d8:	2500      	movs	r5, #0
 800c8da:	42a5      	cmp	r5, r4
 800c8dc:	d105      	bne.n	800c8ea <__libc_init_array+0x2e>
 800c8de:	bd70      	pop	{r4, r5, r6, pc}
 800c8e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8e4:	4798      	blx	r3
 800c8e6:	3501      	adds	r5, #1
 800c8e8:	e7ee      	b.n	800c8c8 <__libc_init_array+0xc>
 800c8ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8ee:	4798      	blx	r3
 800c8f0:	3501      	adds	r5, #1
 800c8f2:	e7f2      	b.n	800c8da <__libc_init_array+0x1e>
 800c8f4:	08011708 	.word	0x08011708
 800c8f8:	08011708 	.word	0x08011708
 800c8fc:	08011708 	.word	0x08011708
 800c900:	0801170c 	.word	0x0801170c

0800c904 <memcpy>:
 800c904:	b510      	push	{r4, lr}
 800c906:	1e43      	subs	r3, r0, #1
 800c908:	440a      	add	r2, r1
 800c90a:	4291      	cmp	r1, r2
 800c90c:	d100      	bne.n	800c910 <memcpy+0xc>
 800c90e:	bd10      	pop	{r4, pc}
 800c910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c918:	e7f7      	b.n	800c90a <memcpy+0x6>

0800c91a <memset>:
 800c91a:	4402      	add	r2, r0
 800c91c:	4603      	mov	r3, r0
 800c91e:	4293      	cmp	r3, r2
 800c920:	d100      	bne.n	800c924 <memset+0xa>
 800c922:	4770      	bx	lr
 800c924:	f803 1b01 	strb.w	r1, [r3], #1
 800c928:	e7f9      	b.n	800c91e <memset+0x4>

0800c92a <__cvt>:
 800c92a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c92e:	ec55 4b10 	vmov	r4, r5, d0
 800c932:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c934:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c938:	2d00      	cmp	r5, #0
 800c93a:	460e      	mov	r6, r1
 800c93c:	4691      	mov	r9, r2
 800c93e:	4619      	mov	r1, r3
 800c940:	bfb8      	it	lt
 800c942:	4622      	movlt	r2, r4
 800c944:	462b      	mov	r3, r5
 800c946:	f027 0720 	bic.w	r7, r7, #32
 800c94a:	bfbb      	ittet	lt
 800c94c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c950:	461d      	movlt	r5, r3
 800c952:	2300      	movge	r3, #0
 800c954:	232d      	movlt	r3, #45	; 0x2d
 800c956:	bfb8      	it	lt
 800c958:	4614      	movlt	r4, r2
 800c95a:	2f46      	cmp	r7, #70	; 0x46
 800c95c:	700b      	strb	r3, [r1, #0]
 800c95e:	d004      	beq.n	800c96a <__cvt+0x40>
 800c960:	2f45      	cmp	r7, #69	; 0x45
 800c962:	d100      	bne.n	800c966 <__cvt+0x3c>
 800c964:	3601      	adds	r6, #1
 800c966:	2102      	movs	r1, #2
 800c968:	e000      	b.n	800c96c <__cvt+0x42>
 800c96a:	2103      	movs	r1, #3
 800c96c:	ab03      	add	r3, sp, #12
 800c96e:	9301      	str	r3, [sp, #4]
 800c970:	ab02      	add	r3, sp, #8
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	4632      	mov	r2, r6
 800c976:	4653      	mov	r3, sl
 800c978:	ec45 4b10 	vmov	d0, r4, r5
 800c97c:	f001 feb4 	bl	800e6e8 <_dtoa_r>
 800c980:	2f47      	cmp	r7, #71	; 0x47
 800c982:	4680      	mov	r8, r0
 800c984:	d102      	bne.n	800c98c <__cvt+0x62>
 800c986:	f019 0f01 	tst.w	r9, #1
 800c98a:	d026      	beq.n	800c9da <__cvt+0xb0>
 800c98c:	2f46      	cmp	r7, #70	; 0x46
 800c98e:	eb08 0906 	add.w	r9, r8, r6
 800c992:	d111      	bne.n	800c9b8 <__cvt+0x8e>
 800c994:	f898 3000 	ldrb.w	r3, [r8]
 800c998:	2b30      	cmp	r3, #48	; 0x30
 800c99a:	d10a      	bne.n	800c9b2 <__cvt+0x88>
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f7f4 f890 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9a8:	b918      	cbnz	r0, 800c9b2 <__cvt+0x88>
 800c9aa:	f1c6 0601 	rsb	r6, r6, #1
 800c9ae:	f8ca 6000 	str.w	r6, [sl]
 800c9b2:	f8da 3000 	ldr.w	r3, [sl]
 800c9b6:	4499      	add	r9, r3
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4620      	mov	r0, r4
 800c9be:	4629      	mov	r1, r5
 800c9c0:	f7f4 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9c4:	b938      	cbnz	r0, 800c9d6 <__cvt+0xac>
 800c9c6:	2230      	movs	r2, #48	; 0x30
 800c9c8:	9b03      	ldr	r3, [sp, #12]
 800c9ca:	454b      	cmp	r3, r9
 800c9cc:	d205      	bcs.n	800c9da <__cvt+0xb0>
 800c9ce:	1c59      	adds	r1, r3, #1
 800c9d0:	9103      	str	r1, [sp, #12]
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	e7f8      	b.n	800c9c8 <__cvt+0x9e>
 800c9d6:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9da:	9b03      	ldr	r3, [sp, #12]
 800c9dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9de:	eba3 0308 	sub.w	r3, r3, r8
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	b004      	add	sp, #16
 800c9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c9ec <__exponent>:
 800c9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ee:	2900      	cmp	r1, #0
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	bfba      	itte	lt
 800c9f4:	4249      	neglt	r1, r1
 800c9f6:	232d      	movlt	r3, #45	; 0x2d
 800c9f8:	232b      	movge	r3, #43	; 0x2b
 800c9fa:	2909      	cmp	r1, #9
 800c9fc:	f804 2b02 	strb.w	r2, [r4], #2
 800ca00:	7043      	strb	r3, [r0, #1]
 800ca02:	dd20      	ble.n	800ca46 <__exponent+0x5a>
 800ca04:	f10d 0307 	add.w	r3, sp, #7
 800ca08:	461f      	mov	r7, r3
 800ca0a:	260a      	movs	r6, #10
 800ca0c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ca10:	fb06 1115 	mls	r1, r6, r5, r1
 800ca14:	3130      	adds	r1, #48	; 0x30
 800ca16:	2d09      	cmp	r5, #9
 800ca18:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca1c:	f103 32ff 	add.w	r2, r3, #4294967295
 800ca20:	4629      	mov	r1, r5
 800ca22:	dc09      	bgt.n	800ca38 <__exponent+0x4c>
 800ca24:	3130      	adds	r1, #48	; 0x30
 800ca26:	3b02      	subs	r3, #2
 800ca28:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca2c:	42bb      	cmp	r3, r7
 800ca2e:	4622      	mov	r2, r4
 800ca30:	d304      	bcc.n	800ca3c <__exponent+0x50>
 800ca32:	1a10      	subs	r0, r2, r0
 800ca34:	b003      	add	sp, #12
 800ca36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca38:	4613      	mov	r3, r2
 800ca3a:	e7e7      	b.n	800ca0c <__exponent+0x20>
 800ca3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca40:	f804 2b01 	strb.w	r2, [r4], #1
 800ca44:	e7f2      	b.n	800ca2c <__exponent+0x40>
 800ca46:	2330      	movs	r3, #48	; 0x30
 800ca48:	4419      	add	r1, r3
 800ca4a:	7083      	strb	r3, [r0, #2]
 800ca4c:	1d02      	adds	r2, r0, #4
 800ca4e:	70c1      	strb	r1, [r0, #3]
 800ca50:	e7ef      	b.n	800ca32 <__exponent+0x46>
	...

0800ca54 <_printf_float>:
 800ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca58:	b08d      	sub	sp, #52	; 0x34
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ca60:	4616      	mov	r6, r2
 800ca62:	461f      	mov	r7, r3
 800ca64:	4605      	mov	r5, r0
 800ca66:	f003 f89d 	bl	800fba4 <_localeconv_r>
 800ca6a:	6803      	ldr	r3, [r0, #0]
 800ca6c:	9304      	str	r3, [sp, #16]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7f3 fbae 	bl	80001d0 <strlen>
 800ca74:	2300      	movs	r3, #0
 800ca76:	930a      	str	r3, [sp, #40]	; 0x28
 800ca78:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7c:	9005      	str	r0, [sp, #20]
 800ca7e:	3307      	adds	r3, #7
 800ca80:	f023 0307 	bic.w	r3, r3, #7
 800ca84:	f103 0208 	add.w	r2, r3, #8
 800ca88:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ca8c:	f8d4 b000 	ldr.w	fp, [r4]
 800ca90:	f8c8 2000 	str.w	r2, [r8]
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800caa0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800caa4:	9307      	str	r3, [sp, #28]
 800caa6:	f8cd 8018 	str.w	r8, [sp, #24]
 800caaa:	f04f 32ff 	mov.w	r2, #4294967295
 800caae:	4ba7      	ldr	r3, [pc, #668]	; (800cd4c <_printf_float+0x2f8>)
 800cab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cab4:	f7f4 f83a 	bl	8000b2c <__aeabi_dcmpun>
 800cab8:	bb70      	cbnz	r0, 800cb18 <_printf_float+0xc4>
 800caba:	f04f 32ff 	mov.w	r2, #4294967295
 800cabe:	4ba3      	ldr	r3, [pc, #652]	; (800cd4c <_printf_float+0x2f8>)
 800cac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cac4:	f7f4 f814 	bl	8000af0 <__aeabi_dcmple>
 800cac8:	bb30      	cbnz	r0, 800cb18 <_printf_float+0xc4>
 800caca:	2200      	movs	r2, #0
 800cacc:	2300      	movs	r3, #0
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f4 f803 	bl	8000adc <__aeabi_dcmplt>
 800cad6:	b110      	cbz	r0, 800cade <_printf_float+0x8a>
 800cad8:	232d      	movs	r3, #45	; 0x2d
 800cada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cade:	4a9c      	ldr	r2, [pc, #624]	; (800cd50 <_printf_float+0x2fc>)
 800cae0:	4b9c      	ldr	r3, [pc, #624]	; (800cd54 <_printf_float+0x300>)
 800cae2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cae6:	bf8c      	ite	hi
 800cae8:	4690      	movhi	r8, r2
 800caea:	4698      	movls	r8, r3
 800caec:	2303      	movs	r3, #3
 800caee:	f02b 0204 	bic.w	r2, fp, #4
 800caf2:	6123      	str	r3, [r4, #16]
 800caf4:	6022      	str	r2, [r4, #0]
 800caf6:	f04f 0900 	mov.w	r9, #0
 800cafa:	9700      	str	r7, [sp, #0]
 800cafc:	4633      	mov	r3, r6
 800cafe:	aa0b      	add	r2, sp, #44	; 0x2c
 800cb00:	4621      	mov	r1, r4
 800cb02:	4628      	mov	r0, r5
 800cb04:	f000 f9e6 	bl	800ced4 <_printf_common>
 800cb08:	3001      	adds	r0, #1
 800cb0a:	f040 808d 	bne.w	800cc28 <_printf_float+0x1d4>
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	b00d      	add	sp, #52	; 0x34
 800cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb18:	4642      	mov	r2, r8
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	4640      	mov	r0, r8
 800cb1e:	4649      	mov	r1, r9
 800cb20:	f7f4 f804 	bl	8000b2c <__aeabi_dcmpun>
 800cb24:	b110      	cbz	r0, 800cb2c <_printf_float+0xd8>
 800cb26:	4a8c      	ldr	r2, [pc, #560]	; (800cd58 <_printf_float+0x304>)
 800cb28:	4b8c      	ldr	r3, [pc, #560]	; (800cd5c <_printf_float+0x308>)
 800cb2a:	e7da      	b.n	800cae2 <_printf_float+0x8e>
 800cb2c:	6861      	ldr	r1, [r4, #4]
 800cb2e:	1c4b      	adds	r3, r1, #1
 800cb30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cb34:	a80a      	add	r0, sp, #40	; 0x28
 800cb36:	d13e      	bne.n	800cbb6 <_printf_float+0x162>
 800cb38:	2306      	movs	r3, #6
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cb42:	ab09      	add	r3, sp, #36	; 0x24
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	ec49 8b10 	vmov	d0, r8, r9
 800cb4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb4e:	6022      	str	r2, [r4, #0]
 800cb50:	f8cd a004 	str.w	sl, [sp, #4]
 800cb54:	6861      	ldr	r1, [r4, #4]
 800cb56:	4628      	mov	r0, r5
 800cb58:	f7ff fee7 	bl	800c92a <__cvt>
 800cb5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cb60:	2b47      	cmp	r3, #71	; 0x47
 800cb62:	4680      	mov	r8, r0
 800cb64:	d109      	bne.n	800cb7a <_printf_float+0x126>
 800cb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb68:	1cd8      	adds	r0, r3, #3
 800cb6a:	db02      	blt.n	800cb72 <_printf_float+0x11e>
 800cb6c:	6862      	ldr	r2, [r4, #4]
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	dd47      	ble.n	800cc02 <_printf_float+0x1ae>
 800cb72:	f1aa 0a02 	sub.w	sl, sl, #2
 800cb76:	fa5f fa8a 	uxtb.w	sl, sl
 800cb7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb80:	d824      	bhi.n	800cbcc <_printf_float+0x178>
 800cb82:	3901      	subs	r1, #1
 800cb84:	4652      	mov	r2, sl
 800cb86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb8a:	9109      	str	r1, [sp, #36]	; 0x24
 800cb8c:	f7ff ff2e 	bl	800c9ec <__exponent>
 800cb90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb92:	1813      	adds	r3, r2, r0
 800cb94:	2a01      	cmp	r2, #1
 800cb96:	4681      	mov	r9, r0
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	dc02      	bgt.n	800cba2 <_printf_float+0x14e>
 800cb9c:	6822      	ldr	r2, [r4, #0]
 800cb9e:	07d1      	lsls	r1, r2, #31
 800cba0:	d501      	bpl.n	800cba6 <_printf_float+0x152>
 800cba2:	3301      	adds	r3, #1
 800cba4:	6123      	str	r3, [r4, #16]
 800cba6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0a5      	beq.n	800cafa <_printf_float+0xa6>
 800cbae:	232d      	movs	r3, #45	; 0x2d
 800cbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb4:	e7a1      	b.n	800cafa <_printf_float+0xa6>
 800cbb6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800cbba:	f000 8177 	beq.w	800ceac <_printf_float+0x458>
 800cbbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cbc2:	d1bb      	bne.n	800cb3c <_printf_float+0xe8>
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	d1b9      	bne.n	800cb3c <_printf_float+0xe8>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e7b6      	b.n	800cb3a <_printf_float+0xe6>
 800cbcc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cbd0:	d119      	bne.n	800cc06 <_printf_float+0x1b2>
 800cbd2:	2900      	cmp	r1, #0
 800cbd4:	6863      	ldr	r3, [r4, #4]
 800cbd6:	dd0c      	ble.n	800cbf2 <_printf_float+0x19e>
 800cbd8:	6121      	str	r1, [r4, #16]
 800cbda:	b913      	cbnz	r3, 800cbe2 <_printf_float+0x18e>
 800cbdc:	6822      	ldr	r2, [r4, #0]
 800cbde:	07d2      	lsls	r2, r2, #31
 800cbe0:	d502      	bpl.n	800cbe8 <_printf_float+0x194>
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	440b      	add	r3, r1
 800cbe6:	6123      	str	r3, [r4, #16]
 800cbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbea:	65a3      	str	r3, [r4, #88]	; 0x58
 800cbec:	f04f 0900 	mov.w	r9, #0
 800cbf0:	e7d9      	b.n	800cba6 <_printf_float+0x152>
 800cbf2:	b913      	cbnz	r3, 800cbfa <_printf_float+0x1a6>
 800cbf4:	6822      	ldr	r2, [r4, #0]
 800cbf6:	07d0      	lsls	r0, r2, #31
 800cbf8:	d501      	bpl.n	800cbfe <_printf_float+0x1aa>
 800cbfa:	3302      	adds	r3, #2
 800cbfc:	e7f3      	b.n	800cbe6 <_printf_float+0x192>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e7f1      	b.n	800cbe6 <_printf_float+0x192>
 800cc02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cc06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	db05      	blt.n	800cc1a <_printf_float+0x1c6>
 800cc0e:	6822      	ldr	r2, [r4, #0]
 800cc10:	6123      	str	r3, [r4, #16]
 800cc12:	07d1      	lsls	r1, r2, #31
 800cc14:	d5e8      	bpl.n	800cbe8 <_printf_float+0x194>
 800cc16:	3301      	adds	r3, #1
 800cc18:	e7e5      	b.n	800cbe6 <_printf_float+0x192>
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	bfd4      	ite	le
 800cc1e:	f1c3 0302 	rsble	r3, r3, #2
 800cc22:	2301      	movgt	r3, #1
 800cc24:	4413      	add	r3, r2
 800cc26:	e7de      	b.n	800cbe6 <_printf_float+0x192>
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	055a      	lsls	r2, r3, #21
 800cc2c:	d407      	bmi.n	800cc3e <_printf_float+0x1ea>
 800cc2e:	6923      	ldr	r3, [r4, #16]
 800cc30:	4642      	mov	r2, r8
 800cc32:	4631      	mov	r1, r6
 800cc34:	4628      	mov	r0, r5
 800cc36:	47b8      	blx	r7
 800cc38:	3001      	adds	r0, #1
 800cc3a:	d12b      	bne.n	800cc94 <_printf_float+0x240>
 800cc3c:	e767      	b.n	800cb0e <_printf_float+0xba>
 800cc3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cc42:	f240 80dc 	bls.w	800cdfe <_printf_float+0x3aa>
 800cc46:	2200      	movs	r2, #0
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc4e:	f7f3 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d033      	beq.n	800ccbe <_printf_float+0x26a>
 800cc56:	2301      	movs	r3, #1
 800cc58:	4a41      	ldr	r2, [pc, #260]	; (800cd60 <_printf_float+0x30c>)
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b8      	blx	r7
 800cc60:	3001      	adds	r0, #1
 800cc62:	f43f af54 	beq.w	800cb0e <_printf_float+0xba>
 800cc66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	db02      	blt.n	800cc74 <_printf_float+0x220>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	07d8      	lsls	r0, r3, #31
 800cc72:	d50f      	bpl.n	800cc94 <_printf_float+0x240>
 800cc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47b8      	blx	r7
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f43f af45 	beq.w	800cb0e <_printf_float+0xba>
 800cc84:	f04f 0800 	mov.w	r8, #0
 800cc88:	f104 091a 	add.w	r9, r4, #26
 800cc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4543      	cmp	r3, r8
 800cc92:	dc09      	bgt.n	800cca8 <_printf_float+0x254>
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	079b      	lsls	r3, r3, #30
 800cc98:	f100 8103 	bmi.w	800cea2 <_printf_float+0x44e>
 800cc9c:	68e0      	ldr	r0, [r4, #12]
 800cc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca0:	4298      	cmp	r0, r3
 800cca2:	bfb8      	it	lt
 800cca4:	4618      	movlt	r0, r3
 800cca6:	e734      	b.n	800cb12 <_printf_float+0xbe>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	464a      	mov	r2, r9
 800ccac:	4631      	mov	r1, r6
 800ccae:	4628      	mov	r0, r5
 800ccb0:	47b8      	blx	r7
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	f43f af2b 	beq.w	800cb0e <_printf_float+0xba>
 800ccb8:	f108 0801 	add.w	r8, r8, #1
 800ccbc:	e7e6      	b.n	800cc8c <_printf_float+0x238>
 800ccbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	dc2b      	bgt.n	800cd1c <_printf_float+0x2c8>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	4a26      	ldr	r2, [pc, #152]	; (800cd60 <_printf_float+0x30c>)
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f43f af1d 	beq.w	800cb0e <_printf_float+0xba>
 800ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd6:	b923      	cbnz	r3, 800cce2 <_printf_float+0x28e>
 800ccd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccda:	b913      	cbnz	r3, 800cce2 <_printf_float+0x28e>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	07d9      	lsls	r1, r3, #31
 800cce0:	d5d8      	bpl.n	800cc94 <_printf_float+0x240>
 800cce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cce6:	4631      	mov	r1, r6
 800cce8:	4628      	mov	r0, r5
 800ccea:	47b8      	blx	r7
 800ccec:	3001      	adds	r0, #1
 800ccee:	f43f af0e 	beq.w	800cb0e <_printf_float+0xba>
 800ccf2:	f04f 0900 	mov.w	r9, #0
 800ccf6:	f104 0a1a 	add.w	sl, r4, #26
 800ccfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfc:	425b      	negs	r3, r3
 800ccfe:	454b      	cmp	r3, r9
 800cd00:	dc01      	bgt.n	800cd06 <_printf_float+0x2b2>
 800cd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd04:	e794      	b.n	800cc30 <_printf_float+0x1dc>
 800cd06:	2301      	movs	r3, #1
 800cd08:	4652      	mov	r2, sl
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	47b8      	blx	r7
 800cd10:	3001      	adds	r0, #1
 800cd12:	f43f aefc 	beq.w	800cb0e <_printf_float+0xba>
 800cd16:	f109 0901 	add.w	r9, r9, #1
 800cd1a:	e7ee      	b.n	800ccfa <_printf_float+0x2a6>
 800cd1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd20:	429a      	cmp	r2, r3
 800cd22:	bfa8      	it	ge
 800cd24:	461a      	movge	r2, r3
 800cd26:	2a00      	cmp	r2, #0
 800cd28:	4691      	mov	r9, r2
 800cd2a:	dd07      	ble.n	800cd3c <_printf_float+0x2e8>
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	4631      	mov	r1, r6
 800cd30:	4642      	mov	r2, r8
 800cd32:	4628      	mov	r0, r5
 800cd34:	47b8      	blx	r7
 800cd36:	3001      	adds	r0, #1
 800cd38:	f43f aee9 	beq.w	800cb0e <_printf_float+0xba>
 800cd3c:	f104 031a 	add.w	r3, r4, #26
 800cd40:	f04f 0b00 	mov.w	fp, #0
 800cd44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd48:	9306      	str	r3, [sp, #24]
 800cd4a:	e015      	b.n	800cd78 <_printf_float+0x324>
 800cd4c:	7fefffff 	.word	0x7fefffff
 800cd50:	080113e8 	.word	0x080113e8
 800cd54:	080113e4 	.word	0x080113e4
 800cd58:	080113f0 	.word	0x080113f0
 800cd5c:	080113ec 	.word	0x080113ec
 800cd60:	080113f4 	.word	0x080113f4
 800cd64:	2301      	movs	r3, #1
 800cd66:	9a06      	ldr	r2, [sp, #24]
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	47b8      	blx	r7
 800cd6e:	3001      	adds	r0, #1
 800cd70:	f43f aecd 	beq.w	800cb0e <_printf_float+0xba>
 800cd74:	f10b 0b01 	add.w	fp, fp, #1
 800cd78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cd7c:	ebaa 0309 	sub.w	r3, sl, r9
 800cd80:	455b      	cmp	r3, fp
 800cd82:	dcef      	bgt.n	800cd64 <_printf_float+0x310>
 800cd84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	44d0      	add	r8, sl
 800cd8c:	db15      	blt.n	800cdba <_printf_float+0x366>
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	07da      	lsls	r2, r3, #31
 800cd92:	d412      	bmi.n	800cdba <_printf_float+0x366>
 800cd94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd98:	eba3 020a 	sub.w	r2, r3, sl
 800cd9c:	eba3 0a01 	sub.w	sl, r3, r1
 800cda0:	4592      	cmp	sl, r2
 800cda2:	bfa8      	it	ge
 800cda4:	4692      	movge	sl, r2
 800cda6:	f1ba 0f00 	cmp.w	sl, #0
 800cdaa:	dc0e      	bgt.n	800cdca <_printf_float+0x376>
 800cdac:	f04f 0800 	mov.w	r8, #0
 800cdb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdb4:	f104 091a 	add.w	r9, r4, #26
 800cdb8:	e019      	b.n	800cdee <_printf_float+0x39a>
 800cdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b8      	blx	r7
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d1e5      	bne.n	800cd94 <_printf_float+0x340>
 800cdc8:	e6a1      	b.n	800cb0e <_printf_float+0xba>
 800cdca:	4653      	mov	r3, sl
 800cdcc:	4642      	mov	r2, r8
 800cdce:	4631      	mov	r1, r6
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	47b8      	blx	r7
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d1e9      	bne.n	800cdac <_printf_float+0x358>
 800cdd8:	e699      	b.n	800cb0e <_printf_float+0xba>
 800cdda:	2301      	movs	r3, #1
 800cddc:	464a      	mov	r2, r9
 800cdde:	4631      	mov	r1, r6
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b8      	blx	r7
 800cde4:	3001      	adds	r0, #1
 800cde6:	f43f ae92 	beq.w	800cb0e <_printf_float+0xba>
 800cdea:	f108 0801 	add.w	r8, r8, #1
 800cdee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdf2:	1a9b      	subs	r3, r3, r2
 800cdf4:	eba3 030a 	sub.w	r3, r3, sl
 800cdf8:	4543      	cmp	r3, r8
 800cdfa:	dcee      	bgt.n	800cdda <_printf_float+0x386>
 800cdfc:	e74a      	b.n	800cc94 <_printf_float+0x240>
 800cdfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce00:	2a01      	cmp	r2, #1
 800ce02:	dc01      	bgt.n	800ce08 <_printf_float+0x3b4>
 800ce04:	07db      	lsls	r3, r3, #31
 800ce06:	d53a      	bpl.n	800ce7e <_printf_float+0x42a>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	4642      	mov	r2, r8
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4628      	mov	r0, r5
 800ce10:	47b8      	blx	r7
 800ce12:	3001      	adds	r0, #1
 800ce14:	f43f ae7b 	beq.w	800cb0e <_printf_float+0xba>
 800ce18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b8      	blx	r7
 800ce22:	3001      	adds	r0, #1
 800ce24:	f108 0801 	add.w	r8, r8, #1
 800ce28:	f43f ae71 	beq.w	800cb0e <_printf_float+0xba>
 800ce2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f103 3aff 	add.w	sl, r3, #4294967295
 800ce34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f7f3 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce3e:	b9c8      	cbnz	r0, 800ce74 <_printf_float+0x420>
 800ce40:	4653      	mov	r3, sl
 800ce42:	4642      	mov	r2, r8
 800ce44:	4631      	mov	r1, r6
 800ce46:	4628      	mov	r0, r5
 800ce48:	47b8      	blx	r7
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	d10e      	bne.n	800ce6c <_printf_float+0x418>
 800ce4e:	e65e      	b.n	800cb0e <_printf_float+0xba>
 800ce50:	2301      	movs	r3, #1
 800ce52:	4652      	mov	r2, sl
 800ce54:	4631      	mov	r1, r6
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b8      	blx	r7
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	f43f ae57 	beq.w	800cb0e <_printf_float+0xba>
 800ce60:	f108 0801 	add.w	r8, r8, #1
 800ce64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce66:	3b01      	subs	r3, #1
 800ce68:	4543      	cmp	r3, r8
 800ce6a:	dcf1      	bgt.n	800ce50 <_printf_float+0x3fc>
 800ce6c:	464b      	mov	r3, r9
 800ce6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce72:	e6de      	b.n	800cc32 <_printf_float+0x1de>
 800ce74:	f04f 0800 	mov.w	r8, #0
 800ce78:	f104 0a1a 	add.w	sl, r4, #26
 800ce7c:	e7f2      	b.n	800ce64 <_printf_float+0x410>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e7df      	b.n	800ce42 <_printf_float+0x3ee>
 800ce82:	2301      	movs	r3, #1
 800ce84:	464a      	mov	r2, r9
 800ce86:	4631      	mov	r1, r6
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b8      	blx	r7
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	f43f ae3e 	beq.w	800cb0e <_printf_float+0xba>
 800ce92:	f108 0801 	add.w	r8, r8, #1
 800ce96:	68e3      	ldr	r3, [r4, #12]
 800ce98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce9a:	1a9b      	subs	r3, r3, r2
 800ce9c:	4543      	cmp	r3, r8
 800ce9e:	dcf0      	bgt.n	800ce82 <_printf_float+0x42e>
 800cea0:	e6fc      	b.n	800cc9c <_printf_float+0x248>
 800cea2:	f04f 0800 	mov.w	r8, #0
 800cea6:	f104 0919 	add.w	r9, r4, #25
 800ceaa:	e7f4      	b.n	800ce96 <_printf_float+0x442>
 800ceac:	2900      	cmp	r1, #0
 800ceae:	f43f ae8b 	beq.w	800cbc8 <_printf_float+0x174>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ceb8:	ab09      	add	r3, sp, #36	; 0x24
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	ec49 8b10 	vmov	d0, r8, r9
 800cec0:	6022      	str	r2, [r4, #0]
 800cec2:	f8cd a004 	str.w	sl, [sp, #4]
 800cec6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ceca:	4628      	mov	r0, r5
 800cecc:	f7ff fd2d 	bl	800c92a <__cvt>
 800ced0:	4680      	mov	r8, r0
 800ced2:	e648      	b.n	800cb66 <_printf_float+0x112>

0800ced4 <_printf_common>:
 800ced4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced8:	4691      	mov	r9, r2
 800ceda:	461f      	mov	r7, r3
 800cedc:	688a      	ldr	r2, [r1, #8]
 800cede:	690b      	ldr	r3, [r1, #16]
 800cee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cee4:	4293      	cmp	r3, r2
 800cee6:	bfb8      	it	lt
 800cee8:	4613      	movlt	r3, r2
 800ceea:	f8c9 3000 	str.w	r3, [r9]
 800ceee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cef2:	4606      	mov	r6, r0
 800cef4:	460c      	mov	r4, r1
 800cef6:	b112      	cbz	r2, 800cefe <_printf_common+0x2a>
 800cef8:	3301      	adds	r3, #1
 800cefa:	f8c9 3000 	str.w	r3, [r9]
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	0699      	lsls	r1, r3, #26
 800cf02:	bf42      	ittt	mi
 800cf04:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cf08:	3302      	addmi	r3, #2
 800cf0a:	f8c9 3000 	strmi.w	r3, [r9]
 800cf0e:	6825      	ldr	r5, [r4, #0]
 800cf10:	f015 0506 	ands.w	r5, r5, #6
 800cf14:	d107      	bne.n	800cf26 <_printf_common+0x52>
 800cf16:	f104 0a19 	add.w	sl, r4, #25
 800cf1a:	68e3      	ldr	r3, [r4, #12]
 800cf1c:	f8d9 2000 	ldr.w	r2, [r9]
 800cf20:	1a9b      	subs	r3, r3, r2
 800cf22:	42ab      	cmp	r3, r5
 800cf24:	dc28      	bgt.n	800cf78 <_printf_common+0xa4>
 800cf26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf2a:	6822      	ldr	r2, [r4, #0]
 800cf2c:	3300      	adds	r3, #0
 800cf2e:	bf18      	it	ne
 800cf30:	2301      	movne	r3, #1
 800cf32:	0692      	lsls	r2, r2, #26
 800cf34:	d42d      	bmi.n	800cf92 <_printf_common+0xbe>
 800cf36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	47c0      	blx	r8
 800cf40:	3001      	adds	r0, #1
 800cf42:	d020      	beq.n	800cf86 <_printf_common+0xb2>
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	68e5      	ldr	r5, [r4, #12]
 800cf48:	f8d9 2000 	ldr.w	r2, [r9]
 800cf4c:	f003 0306 	and.w	r3, r3, #6
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	bf08      	it	eq
 800cf54:	1aad      	subeq	r5, r5, r2
 800cf56:	68a3      	ldr	r3, [r4, #8]
 800cf58:	6922      	ldr	r2, [r4, #16]
 800cf5a:	bf0c      	ite	eq
 800cf5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf60:	2500      	movne	r5, #0
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bfc4      	itt	gt
 800cf66:	1a9b      	subgt	r3, r3, r2
 800cf68:	18ed      	addgt	r5, r5, r3
 800cf6a:	f04f 0900 	mov.w	r9, #0
 800cf6e:	341a      	adds	r4, #26
 800cf70:	454d      	cmp	r5, r9
 800cf72:	d11a      	bne.n	800cfaa <_printf_common+0xd6>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e008      	b.n	800cf8a <_printf_common+0xb6>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	4652      	mov	r2, sl
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	4630      	mov	r0, r6
 800cf80:	47c0      	blx	r8
 800cf82:	3001      	adds	r0, #1
 800cf84:	d103      	bne.n	800cf8e <_printf_common+0xba>
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8e:	3501      	adds	r5, #1
 800cf90:	e7c3      	b.n	800cf1a <_printf_common+0x46>
 800cf92:	18e1      	adds	r1, r4, r3
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	2030      	movs	r0, #48	; 0x30
 800cf98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf9c:	4422      	add	r2, r4
 800cf9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfa6:	3302      	adds	r3, #2
 800cfa8:	e7c5      	b.n	800cf36 <_printf_common+0x62>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4622      	mov	r2, r4
 800cfae:	4639      	mov	r1, r7
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	47c0      	blx	r8
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	d0e6      	beq.n	800cf86 <_printf_common+0xb2>
 800cfb8:	f109 0901 	add.w	r9, r9, #1
 800cfbc:	e7d8      	b.n	800cf70 <_printf_common+0x9c>
	...

0800cfc0 <_printf_i>:
 800cfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cfc8:	460c      	mov	r4, r1
 800cfca:	7e09      	ldrb	r1, [r1, #24]
 800cfcc:	b085      	sub	sp, #20
 800cfce:	296e      	cmp	r1, #110	; 0x6e
 800cfd0:	4617      	mov	r7, r2
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	4698      	mov	r8, r3
 800cfd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfd8:	f000 80b3 	beq.w	800d142 <_printf_i+0x182>
 800cfdc:	d822      	bhi.n	800d024 <_printf_i+0x64>
 800cfde:	2963      	cmp	r1, #99	; 0x63
 800cfe0:	d036      	beq.n	800d050 <_printf_i+0x90>
 800cfe2:	d80a      	bhi.n	800cffa <_printf_i+0x3a>
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	f000 80b9 	beq.w	800d15c <_printf_i+0x19c>
 800cfea:	2958      	cmp	r1, #88	; 0x58
 800cfec:	f000 8083 	beq.w	800d0f6 <_printf_i+0x136>
 800cff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cff8:	e032      	b.n	800d060 <_printf_i+0xa0>
 800cffa:	2964      	cmp	r1, #100	; 0x64
 800cffc:	d001      	beq.n	800d002 <_printf_i+0x42>
 800cffe:	2969      	cmp	r1, #105	; 0x69
 800d000:	d1f6      	bne.n	800cff0 <_printf_i+0x30>
 800d002:	6820      	ldr	r0, [r4, #0]
 800d004:	6813      	ldr	r3, [r2, #0]
 800d006:	0605      	lsls	r5, r0, #24
 800d008:	f103 0104 	add.w	r1, r3, #4
 800d00c:	d52a      	bpl.n	800d064 <_printf_i+0xa4>
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6011      	str	r1, [r2, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	da03      	bge.n	800d01e <_printf_i+0x5e>
 800d016:	222d      	movs	r2, #45	; 0x2d
 800d018:	425b      	negs	r3, r3
 800d01a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d01e:	486f      	ldr	r0, [pc, #444]	; (800d1dc <_printf_i+0x21c>)
 800d020:	220a      	movs	r2, #10
 800d022:	e039      	b.n	800d098 <_printf_i+0xd8>
 800d024:	2973      	cmp	r1, #115	; 0x73
 800d026:	f000 809d 	beq.w	800d164 <_printf_i+0x1a4>
 800d02a:	d808      	bhi.n	800d03e <_printf_i+0x7e>
 800d02c:	296f      	cmp	r1, #111	; 0x6f
 800d02e:	d020      	beq.n	800d072 <_printf_i+0xb2>
 800d030:	2970      	cmp	r1, #112	; 0x70
 800d032:	d1dd      	bne.n	800cff0 <_printf_i+0x30>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	f043 0320 	orr.w	r3, r3, #32
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	e003      	b.n	800d046 <_printf_i+0x86>
 800d03e:	2975      	cmp	r1, #117	; 0x75
 800d040:	d017      	beq.n	800d072 <_printf_i+0xb2>
 800d042:	2978      	cmp	r1, #120	; 0x78
 800d044:	d1d4      	bne.n	800cff0 <_printf_i+0x30>
 800d046:	2378      	movs	r3, #120	; 0x78
 800d048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d04c:	4864      	ldr	r0, [pc, #400]	; (800d1e0 <_printf_i+0x220>)
 800d04e:	e055      	b.n	800d0fc <_printf_i+0x13c>
 800d050:	6813      	ldr	r3, [r2, #0]
 800d052:	1d19      	adds	r1, r3, #4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6011      	str	r1, [r2, #0]
 800d058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d060:	2301      	movs	r3, #1
 800d062:	e08c      	b.n	800d17e <_printf_i+0x1be>
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6011      	str	r1, [r2, #0]
 800d068:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d06c:	bf18      	it	ne
 800d06e:	b21b      	sxthne	r3, r3
 800d070:	e7cf      	b.n	800d012 <_printf_i+0x52>
 800d072:	6813      	ldr	r3, [r2, #0]
 800d074:	6825      	ldr	r5, [r4, #0]
 800d076:	1d18      	adds	r0, r3, #4
 800d078:	6010      	str	r0, [r2, #0]
 800d07a:	0628      	lsls	r0, r5, #24
 800d07c:	d501      	bpl.n	800d082 <_printf_i+0xc2>
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	e002      	b.n	800d088 <_printf_i+0xc8>
 800d082:	0668      	lsls	r0, r5, #25
 800d084:	d5fb      	bpl.n	800d07e <_printf_i+0xbe>
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	4854      	ldr	r0, [pc, #336]	; (800d1dc <_printf_i+0x21c>)
 800d08a:	296f      	cmp	r1, #111	; 0x6f
 800d08c:	bf14      	ite	ne
 800d08e:	220a      	movne	r2, #10
 800d090:	2208      	moveq	r2, #8
 800d092:	2100      	movs	r1, #0
 800d094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d098:	6865      	ldr	r5, [r4, #4]
 800d09a:	60a5      	str	r5, [r4, #8]
 800d09c:	2d00      	cmp	r5, #0
 800d09e:	f2c0 8095 	blt.w	800d1cc <_printf_i+0x20c>
 800d0a2:	6821      	ldr	r1, [r4, #0]
 800d0a4:	f021 0104 	bic.w	r1, r1, #4
 800d0a8:	6021      	str	r1, [r4, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d13d      	bne.n	800d12a <_printf_i+0x16a>
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	f040 808e 	bne.w	800d1d0 <_printf_i+0x210>
 800d0b4:	4665      	mov	r5, ip
 800d0b6:	2a08      	cmp	r2, #8
 800d0b8:	d10b      	bne.n	800d0d2 <_printf_i+0x112>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	07db      	lsls	r3, r3, #31
 800d0be:	d508      	bpl.n	800d0d2 <_printf_i+0x112>
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	6862      	ldr	r2, [r4, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	bfde      	ittt	le
 800d0c8:	2330      	movle	r3, #48	; 0x30
 800d0ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0d2:	ebac 0305 	sub.w	r3, ip, r5
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	f8cd 8000 	str.w	r8, [sp]
 800d0dc:	463b      	mov	r3, r7
 800d0de:	aa03      	add	r2, sp, #12
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f7ff fef6 	bl	800ced4 <_printf_common>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d14d      	bne.n	800d188 <_printf_i+0x1c8>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	b005      	add	sp, #20
 800d0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0f6:	4839      	ldr	r0, [pc, #228]	; (800d1dc <_printf_i+0x21c>)
 800d0f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d0fc:	6813      	ldr	r3, [r2, #0]
 800d0fe:	6821      	ldr	r1, [r4, #0]
 800d100:	1d1d      	adds	r5, r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6015      	str	r5, [r2, #0]
 800d106:	060a      	lsls	r2, r1, #24
 800d108:	d50b      	bpl.n	800d122 <_printf_i+0x162>
 800d10a:	07ca      	lsls	r2, r1, #31
 800d10c:	bf44      	itt	mi
 800d10e:	f041 0120 	orrmi.w	r1, r1, #32
 800d112:	6021      	strmi	r1, [r4, #0]
 800d114:	b91b      	cbnz	r3, 800d11e <_printf_i+0x15e>
 800d116:	6822      	ldr	r2, [r4, #0]
 800d118:	f022 0220 	bic.w	r2, r2, #32
 800d11c:	6022      	str	r2, [r4, #0]
 800d11e:	2210      	movs	r2, #16
 800d120:	e7b7      	b.n	800d092 <_printf_i+0xd2>
 800d122:	064d      	lsls	r5, r1, #25
 800d124:	bf48      	it	mi
 800d126:	b29b      	uxthmi	r3, r3
 800d128:	e7ef      	b.n	800d10a <_printf_i+0x14a>
 800d12a:	4665      	mov	r5, ip
 800d12c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d130:	fb02 3311 	mls	r3, r2, r1, r3
 800d134:	5cc3      	ldrb	r3, [r0, r3]
 800d136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d13a:	460b      	mov	r3, r1
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d1f5      	bne.n	800d12c <_printf_i+0x16c>
 800d140:	e7b9      	b.n	800d0b6 <_printf_i+0xf6>
 800d142:	6813      	ldr	r3, [r2, #0]
 800d144:	6825      	ldr	r5, [r4, #0]
 800d146:	6961      	ldr	r1, [r4, #20]
 800d148:	1d18      	adds	r0, r3, #4
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	0628      	lsls	r0, r5, #24
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	d501      	bpl.n	800d156 <_printf_i+0x196>
 800d152:	6019      	str	r1, [r3, #0]
 800d154:	e002      	b.n	800d15c <_printf_i+0x19c>
 800d156:	066a      	lsls	r2, r5, #25
 800d158:	d5fb      	bpl.n	800d152 <_printf_i+0x192>
 800d15a:	8019      	strh	r1, [r3, #0]
 800d15c:	2300      	movs	r3, #0
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	4665      	mov	r5, ip
 800d162:	e7b9      	b.n	800d0d8 <_printf_i+0x118>
 800d164:	6813      	ldr	r3, [r2, #0]
 800d166:	1d19      	adds	r1, r3, #4
 800d168:	6011      	str	r1, [r2, #0]
 800d16a:	681d      	ldr	r5, [r3, #0]
 800d16c:	6862      	ldr	r2, [r4, #4]
 800d16e:	2100      	movs	r1, #0
 800d170:	4628      	mov	r0, r5
 800d172:	f7f3 f835 	bl	80001e0 <memchr>
 800d176:	b108      	cbz	r0, 800d17c <_printf_i+0x1bc>
 800d178:	1b40      	subs	r0, r0, r5
 800d17a:	6060      	str	r0, [r4, #4]
 800d17c:	6863      	ldr	r3, [r4, #4]
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	2300      	movs	r3, #0
 800d182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d186:	e7a7      	b.n	800d0d8 <_printf_i+0x118>
 800d188:	6923      	ldr	r3, [r4, #16]
 800d18a:	462a      	mov	r2, r5
 800d18c:	4639      	mov	r1, r7
 800d18e:	4630      	mov	r0, r6
 800d190:	47c0      	blx	r8
 800d192:	3001      	adds	r0, #1
 800d194:	d0aa      	beq.n	800d0ec <_printf_i+0x12c>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	079b      	lsls	r3, r3, #30
 800d19a:	d413      	bmi.n	800d1c4 <_printf_i+0x204>
 800d19c:	68e0      	ldr	r0, [r4, #12]
 800d19e:	9b03      	ldr	r3, [sp, #12]
 800d1a0:	4298      	cmp	r0, r3
 800d1a2:	bfb8      	it	lt
 800d1a4:	4618      	movlt	r0, r3
 800d1a6:	e7a3      	b.n	800d0f0 <_printf_i+0x130>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	464a      	mov	r2, r9
 800d1ac:	4639      	mov	r1, r7
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	47c0      	blx	r8
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d09a      	beq.n	800d0ec <_printf_i+0x12c>
 800d1b6:	3501      	adds	r5, #1
 800d1b8:	68e3      	ldr	r3, [r4, #12]
 800d1ba:	9a03      	ldr	r2, [sp, #12]
 800d1bc:	1a9b      	subs	r3, r3, r2
 800d1be:	42ab      	cmp	r3, r5
 800d1c0:	dcf2      	bgt.n	800d1a8 <_printf_i+0x1e8>
 800d1c2:	e7eb      	b.n	800d19c <_printf_i+0x1dc>
 800d1c4:	2500      	movs	r5, #0
 800d1c6:	f104 0919 	add.w	r9, r4, #25
 800d1ca:	e7f5      	b.n	800d1b8 <_printf_i+0x1f8>
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1ac      	bne.n	800d12a <_printf_i+0x16a>
 800d1d0:	7803      	ldrb	r3, [r0, #0]
 800d1d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1da:	e76c      	b.n	800d0b6 <_printf_i+0xf6>
 800d1dc:	080113f6 	.word	0x080113f6
 800d1e0:	08011407 	.word	0x08011407

0800d1e4 <_scanf_float>:
 800d1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e8:	469a      	mov	sl, r3
 800d1ea:	688b      	ldr	r3, [r1, #8]
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	1e5a      	subs	r2, r3, #1
 800d1f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d1f4:	b087      	sub	sp, #28
 800d1f6:	bf83      	ittte	hi
 800d1f8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d1fc:	189b      	addhi	r3, r3, r2
 800d1fe:	9301      	strhi	r3, [sp, #4]
 800d200:	2300      	movls	r3, #0
 800d202:	bf86      	itte	hi
 800d204:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d208:	608b      	strhi	r3, [r1, #8]
 800d20a:	9301      	strls	r3, [sp, #4]
 800d20c:	680b      	ldr	r3, [r1, #0]
 800d20e:	4688      	mov	r8, r1
 800d210:	f04f 0b00 	mov.w	fp, #0
 800d214:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d218:	f848 3b1c 	str.w	r3, [r8], #28
 800d21c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d220:	4607      	mov	r7, r0
 800d222:	460c      	mov	r4, r1
 800d224:	4645      	mov	r5, r8
 800d226:	465a      	mov	r2, fp
 800d228:	46d9      	mov	r9, fp
 800d22a:	f8cd b008 	str.w	fp, [sp, #8]
 800d22e:	68a1      	ldr	r1, [r4, #8]
 800d230:	b181      	cbz	r1, 800d254 <_scanf_float+0x70>
 800d232:	6833      	ldr	r3, [r6, #0]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b49      	cmp	r3, #73	; 0x49
 800d238:	d071      	beq.n	800d31e <_scanf_float+0x13a>
 800d23a:	d84d      	bhi.n	800d2d8 <_scanf_float+0xf4>
 800d23c:	2b39      	cmp	r3, #57	; 0x39
 800d23e:	d840      	bhi.n	800d2c2 <_scanf_float+0xde>
 800d240:	2b31      	cmp	r3, #49	; 0x31
 800d242:	f080 8088 	bcs.w	800d356 <_scanf_float+0x172>
 800d246:	2b2d      	cmp	r3, #45	; 0x2d
 800d248:	f000 8090 	beq.w	800d36c <_scanf_float+0x188>
 800d24c:	d815      	bhi.n	800d27a <_scanf_float+0x96>
 800d24e:	2b2b      	cmp	r3, #43	; 0x2b
 800d250:	f000 808c 	beq.w	800d36c <_scanf_float+0x188>
 800d254:	f1b9 0f00 	cmp.w	r9, #0
 800d258:	d003      	beq.n	800d262 <_scanf_float+0x7e>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	3a01      	subs	r2, #1
 800d264:	2a01      	cmp	r2, #1
 800d266:	f200 80ea 	bhi.w	800d43e <_scanf_float+0x25a>
 800d26a:	4545      	cmp	r5, r8
 800d26c:	f200 80dc 	bhi.w	800d428 <_scanf_float+0x244>
 800d270:	2601      	movs	r6, #1
 800d272:	4630      	mov	r0, r6
 800d274:	b007      	add	sp, #28
 800d276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27a:	2b2e      	cmp	r3, #46	; 0x2e
 800d27c:	f000 809f 	beq.w	800d3be <_scanf_float+0x1da>
 800d280:	2b30      	cmp	r3, #48	; 0x30
 800d282:	d1e7      	bne.n	800d254 <_scanf_float+0x70>
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d28a:	d064      	beq.n	800d356 <_scanf_float+0x172>
 800d28c:	9b01      	ldr	r3, [sp, #4]
 800d28e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d292:	6020      	str	r0, [r4, #0]
 800d294:	f109 0901 	add.w	r9, r9, #1
 800d298:	b11b      	cbz	r3, 800d2a2 <_scanf_float+0xbe>
 800d29a:	3b01      	subs	r3, #1
 800d29c:	3101      	adds	r1, #1
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	60a1      	str	r1, [r4, #8]
 800d2a2:	68a3      	ldr	r3, [r4, #8]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	60a3      	str	r3, [r4, #8]
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	6123      	str	r3, [r4, #16]
 800d2ae:	6873      	ldr	r3, [r6, #4]
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	6073      	str	r3, [r6, #4]
 800d2b6:	f340 80ac 	ble.w	800d412 <_scanf_float+0x22e>
 800d2ba:	6833      	ldr	r3, [r6, #0]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	6033      	str	r3, [r6, #0]
 800d2c0:	e7b5      	b.n	800d22e <_scanf_float+0x4a>
 800d2c2:	2b45      	cmp	r3, #69	; 0x45
 800d2c4:	f000 8085 	beq.w	800d3d2 <_scanf_float+0x1ee>
 800d2c8:	2b46      	cmp	r3, #70	; 0x46
 800d2ca:	d06a      	beq.n	800d3a2 <_scanf_float+0x1be>
 800d2cc:	2b41      	cmp	r3, #65	; 0x41
 800d2ce:	d1c1      	bne.n	800d254 <_scanf_float+0x70>
 800d2d0:	2a01      	cmp	r2, #1
 800d2d2:	d1bf      	bne.n	800d254 <_scanf_float+0x70>
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	e046      	b.n	800d366 <_scanf_float+0x182>
 800d2d8:	2b65      	cmp	r3, #101	; 0x65
 800d2da:	d07a      	beq.n	800d3d2 <_scanf_float+0x1ee>
 800d2dc:	d818      	bhi.n	800d310 <_scanf_float+0x12c>
 800d2de:	2b54      	cmp	r3, #84	; 0x54
 800d2e0:	d066      	beq.n	800d3b0 <_scanf_float+0x1cc>
 800d2e2:	d811      	bhi.n	800d308 <_scanf_float+0x124>
 800d2e4:	2b4e      	cmp	r3, #78	; 0x4e
 800d2e6:	d1b5      	bne.n	800d254 <_scanf_float+0x70>
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	d146      	bne.n	800d37a <_scanf_float+0x196>
 800d2ec:	f1b9 0f00 	cmp.w	r9, #0
 800d2f0:	d145      	bne.n	800d37e <_scanf_float+0x19a>
 800d2f2:	6821      	ldr	r1, [r4, #0]
 800d2f4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d2f8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d2fc:	d13f      	bne.n	800d37e <_scanf_float+0x19a>
 800d2fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d302:	6021      	str	r1, [r4, #0]
 800d304:	2201      	movs	r2, #1
 800d306:	e02e      	b.n	800d366 <_scanf_float+0x182>
 800d308:	2b59      	cmp	r3, #89	; 0x59
 800d30a:	d01e      	beq.n	800d34a <_scanf_float+0x166>
 800d30c:	2b61      	cmp	r3, #97	; 0x61
 800d30e:	e7de      	b.n	800d2ce <_scanf_float+0xea>
 800d310:	2b6e      	cmp	r3, #110	; 0x6e
 800d312:	d0e9      	beq.n	800d2e8 <_scanf_float+0x104>
 800d314:	d815      	bhi.n	800d342 <_scanf_float+0x15e>
 800d316:	2b66      	cmp	r3, #102	; 0x66
 800d318:	d043      	beq.n	800d3a2 <_scanf_float+0x1be>
 800d31a:	2b69      	cmp	r3, #105	; 0x69
 800d31c:	d19a      	bne.n	800d254 <_scanf_float+0x70>
 800d31e:	f1bb 0f00 	cmp.w	fp, #0
 800d322:	d138      	bne.n	800d396 <_scanf_float+0x1b2>
 800d324:	f1b9 0f00 	cmp.w	r9, #0
 800d328:	d197      	bne.n	800d25a <_scanf_float+0x76>
 800d32a:	6821      	ldr	r1, [r4, #0]
 800d32c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d330:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d334:	d195      	bne.n	800d262 <_scanf_float+0x7e>
 800d336:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d33a:	6021      	str	r1, [r4, #0]
 800d33c:	f04f 0b01 	mov.w	fp, #1
 800d340:	e011      	b.n	800d366 <_scanf_float+0x182>
 800d342:	2b74      	cmp	r3, #116	; 0x74
 800d344:	d034      	beq.n	800d3b0 <_scanf_float+0x1cc>
 800d346:	2b79      	cmp	r3, #121	; 0x79
 800d348:	d184      	bne.n	800d254 <_scanf_float+0x70>
 800d34a:	f1bb 0f07 	cmp.w	fp, #7
 800d34e:	d181      	bne.n	800d254 <_scanf_float+0x70>
 800d350:	f04f 0b08 	mov.w	fp, #8
 800d354:	e007      	b.n	800d366 <_scanf_float+0x182>
 800d356:	eb12 0f0b 	cmn.w	r2, fp
 800d35a:	f47f af7b 	bne.w	800d254 <_scanf_float+0x70>
 800d35e:	6821      	ldr	r1, [r4, #0]
 800d360:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d364:	6021      	str	r1, [r4, #0]
 800d366:	702b      	strb	r3, [r5, #0]
 800d368:	3501      	adds	r5, #1
 800d36a:	e79a      	b.n	800d2a2 <_scanf_float+0xbe>
 800d36c:	6821      	ldr	r1, [r4, #0]
 800d36e:	0608      	lsls	r0, r1, #24
 800d370:	f57f af70 	bpl.w	800d254 <_scanf_float+0x70>
 800d374:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d378:	e7f4      	b.n	800d364 <_scanf_float+0x180>
 800d37a:	2a02      	cmp	r2, #2
 800d37c:	d047      	beq.n	800d40e <_scanf_float+0x22a>
 800d37e:	f1bb 0f01 	cmp.w	fp, #1
 800d382:	d003      	beq.n	800d38c <_scanf_float+0x1a8>
 800d384:	f1bb 0f04 	cmp.w	fp, #4
 800d388:	f47f af64 	bne.w	800d254 <_scanf_float+0x70>
 800d38c:	f10b 0b01 	add.w	fp, fp, #1
 800d390:	fa5f fb8b 	uxtb.w	fp, fp
 800d394:	e7e7      	b.n	800d366 <_scanf_float+0x182>
 800d396:	f1bb 0f03 	cmp.w	fp, #3
 800d39a:	d0f7      	beq.n	800d38c <_scanf_float+0x1a8>
 800d39c:	f1bb 0f05 	cmp.w	fp, #5
 800d3a0:	e7f2      	b.n	800d388 <_scanf_float+0x1a4>
 800d3a2:	f1bb 0f02 	cmp.w	fp, #2
 800d3a6:	f47f af55 	bne.w	800d254 <_scanf_float+0x70>
 800d3aa:	f04f 0b03 	mov.w	fp, #3
 800d3ae:	e7da      	b.n	800d366 <_scanf_float+0x182>
 800d3b0:	f1bb 0f06 	cmp.w	fp, #6
 800d3b4:	f47f af4e 	bne.w	800d254 <_scanf_float+0x70>
 800d3b8:	f04f 0b07 	mov.w	fp, #7
 800d3bc:	e7d3      	b.n	800d366 <_scanf_float+0x182>
 800d3be:	6821      	ldr	r1, [r4, #0]
 800d3c0:	0588      	lsls	r0, r1, #22
 800d3c2:	f57f af47 	bpl.w	800d254 <_scanf_float+0x70>
 800d3c6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d3ca:	6021      	str	r1, [r4, #0]
 800d3cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3d0:	e7c9      	b.n	800d366 <_scanf_float+0x182>
 800d3d2:	6821      	ldr	r1, [r4, #0]
 800d3d4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d3d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d3dc:	d006      	beq.n	800d3ec <_scanf_float+0x208>
 800d3de:	0548      	lsls	r0, r1, #21
 800d3e0:	f57f af38 	bpl.w	800d254 <_scanf_float+0x70>
 800d3e4:	f1b9 0f00 	cmp.w	r9, #0
 800d3e8:	f43f af3b 	beq.w	800d262 <_scanf_float+0x7e>
 800d3ec:	0588      	lsls	r0, r1, #22
 800d3ee:	bf58      	it	pl
 800d3f0:	9802      	ldrpl	r0, [sp, #8]
 800d3f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d3f6:	bf58      	it	pl
 800d3f8:	eba9 0000 	subpl.w	r0, r9, r0
 800d3fc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d400:	bf58      	it	pl
 800d402:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d406:	6021      	str	r1, [r4, #0]
 800d408:	f04f 0900 	mov.w	r9, #0
 800d40c:	e7ab      	b.n	800d366 <_scanf_float+0x182>
 800d40e:	2203      	movs	r2, #3
 800d410:	e7a9      	b.n	800d366 <_scanf_float+0x182>
 800d412:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d416:	9205      	str	r2, [sp, #20]
 800d418:	4631      	mov	r1, r6
 800d41a:	4638      	mov	r0, r7
 800d41c:	4798      	blx	r3
 800d41e:	9a05      	ldr	r2, [sp, #20]
 800d420:	2800      	cmp	r0, #0
 800d422:	f43f af04 	beq.w	800d22e <_scanf_float+0x4a>
 800d426:	e715      	b.n	800d254 <_scanf_float+0x70>
 800d428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d42c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d430:	4632      	mov	r2, r6
 800d432:	4638      	mov	r0, r7
 800d434:	4798      	blx	r3
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	3b01      	subs	r3, #1
 800d43a:	6123      	str	r3, [r4, #16]
 800d43c:	e715      	b.n	800d26a <_scanf_float+0x86>
 800d43e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d442:	2b06      	cmp	r3, #6
 800d444:	d80a      	bhi.n	800d45c <_scanf_float+0x278>
 800d446:	f1bb 0f02 	cmp.w	fp, #2
 800d44a:	d968      	bls.n	800d51e <_scanf_float+0x33a>
 800d44c:	f1ab 0b03 	sub.w	fp, fp, #3
 800d450:	fa5f fb8b 	uxtb.w	fp, fp
 800d454:	eba5 0b0b 	sub.w	fp, r5, fp
 800d458:	455d      	cmp	r5, fp
 800d45a:	d14b      	bne.n	800d4f4 <_scanf_float+0x310>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	05da      	lsls	r2, r3, #23
 800d460:	d51f      	bpl.n	800d4a2 <_scanf_float+0x2be>
 800d462:	055b      	lsls	r3, r3, #21
 800d464:	d468      	bmi.n	800d538 <_scanf_float+0x354>
 800d466:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	2965      	cmp	r1, #101	; 0x65
 800d46e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d472:	f105 3bff 	add.w	fp, r5, #4294967295
 800d476:	6123      	str	r3, [r4, #16]
 800d478:	d00d      	beq.n	800d496 <_scanf_float+0x2b2>
 800d47a:	2945      	cmp	r1, #69	; 0x45
 800d47c:	d00b      	beq.n	800d496 <_scanf_float+0x2b2>
 800d47e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d482:	4632      	mov	r2, r6
 800d484:	4638      	mov	r0, r7
 800d486:	4798      	blx	r3
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d48e:	3b01      	subs	r3, #1
 800d490:	f1a5 0b02 	sub.w	fp, r5, #2
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d49a:	4632      	mov	r2, r6
 800d49c:	4638      	mov	r0, r7
 800d49e:	4798      	blx	r3
 800d4a0:	465d      	mov	r5, fp
 800d4a2:	6826      	ldr	r6, [r4, #0]
 800d4a4:	f016 0610 	ands.w	r6, r6, #16
 800d4a8:	d17a      	bne.n	800d5a0 <_scanf_float+0x3bc>
 800d4aa:	702e      	strb	r6, [r5, #0]
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4b6:	d142      	bne.n	800d53e <_scanf_float+0x35a>
 800d4b8:	9b02      	ldr	r3, [sp, #8]
 800d4ba:	eba9 0303 	sub.w	r3, r9, r3
 800d4be:	425a      	negs	r2, r3
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d149      	bne.n	800d558 <_scanf_float+0x374>
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	4641      	mov	r1, r8
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	f000 ff21 	bl	800e310 <_strtod_r>
 800d4ce:	6825      	ldr	r5, [r4, #0]
 800d4d0:	f8da 3000 	ldr.w	r3, [sl]
 800d4d4:	f015 0f02 	tst.w	r5, #2
 800d4d8:	f103 0204 	add.w	r2, r3, #4
 800d4dc:	ec59 8b10 	vmov	r8, r9, d0
 800d4e0:	f8ca 2000 	str.w	r2, [sl]
 800d4e4:	d043      	beq.n	800d56e <_scanf_float+0x38a>
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	e9c3 8900 	strd	r8, r9, [r3]
 800d4ec:	68e3      	ldr	r3, [r4, #12]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	60e3      	str	r3, [r4, #12]
 800d4f2:	e6be      	b.n	800d272 <_scanf_float+0x8e>
 800d4f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d4fc:	4632      	mov	r2, r6
 800d4fe:	4638      	mov	r0, r7
 800d500:	4798      	blx	r3
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	3b01      	subs	r3, #1
 800d506:	6123      	str	r3, [r4, #16]
 800d508:	e7a6      	b.n	800d458 <_scanf_float+0x274>
 800d50a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d50e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d512:	4632      	mov	r2, r6
 800d514:	4638      	mov	r0, r7
 800d516:	4798      	blx	r3
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	4545      	cmp	r5, r8
 800d520:	d8f3      	bhi.n	800d50a <_scanf_float+0x326>
 800d522:	e6a5      	b.n	800d270 <_scanf_float+0x8c>
 800d524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d528:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d52c:	4632      	mov	r2, r6
 800d52e:	4638      	mov	r0, r7
 800d530:	4798      	blx	r3
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	3b01      	subs	r3, #1
 800d536:	6123      	str	r3, [r4, #16]
 800d538:	4545      	cmp	r5, r8
 800d53a:	d8f3      	bhi.n	800d524 <_scanf_float+0x340>
 800d53c:	e698      	b.n	800d270 <_scanf_float+0x8c>
 800d53e:	9b03      	ldr	r3, [sp, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0bf      	beq.n	800d4c4 <_scanf_float+0x2e0>
 800d544:	9904      	ldr	r1, [sp, #16]
 800d546:	230a      	movs	r3, #10
 800d548:	4632      	mov	r2, r6
 800d54a:	3101      	adds	r1, #1
 800d54c:	4638      	mov	r0, r7
 800d54e:	f000 ff6b 	bl	800e428 <_strtol_r>
 800d552:	9b03      	ldr	r3, [sp, #12]
 800d554:	9d04      	ldr	r5, [sp, #16]
 800d556:	1ac2      	subs	r2, r0, r3
 800d558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d55c:	429d      	cmp	r5, r3
 800d55e:	bf28      	it	cs
 800d560:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d564:	490f      	ldr	r1, [pc, #60]	; (800d5a4 <_scanf_float+0x3c0>)
 800d566:	4628      	mov	r0, r5
 800d568:	f000 f8a0 	bl	800d6ac <siprintf>
 800d56c:	e7aa      	b.n	800d4c4 <_scanf_float+0x2e0>
 800d56e:	f015 0504 	ands.w	r5, r5, #4
 800d572:	d1b8      	bne.n	800d4e6 <_scanf_float+0x302>
 800d574:	681f      	ldr	r7, [r3, #0]
 800d576:	ee10 2a10 	vmov	r2, s0
 800d57a:	464b      	mov	r3, r9
 800d57c:	ee10 0a10 	vmov	r0, s0
 800d580:	4649      	mov	r1, r9
 800d582:	f7f3 fad3 	bl	8000b2c <__aeabi_dcmpun>
 800d586:	b128      	cbz	r0, 800d594 <_scanf_float+0x3b0>
 800d588:	4628      	mov	r0, r5
 800d58a:	f000 f889 	bl	800d6a0 <nanf>
 800d58e:	ed87 0a00 	vstr	s0, [r7]
 800d592:	e7ab      	b.n	800d4ec <_scanf_float+0x308>
 800d594:	4640      	mov	r0, r8
 800d596:	4649      	mov	r1, r9
 800d598:	f7f3 fb26 	bl	8000be8 <__aeabi_d2f>
 800d59c:	6038      	str	r0, [r7, #0]
 800d59e:	e7a5      	b.n	800d4ec <_scanf_float+0x308>
 800d5a0:	2600      	movs	r6, #0
 800d5a2:	e666      	b.n	800d272 <_scanf_float+0x8e>
 800d5a4:	08011418 	.word	0x08011418

0800d5a8 <iprintf>:
 800d5a8:	b40f      	push	{r0, r1, r2, r3}
 800d5aa:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <iprintf+0x2c>)
 800d5ac:	b513      	push	{r0, r1, r4, lr}
 800d5ae:	681c      	ldr	r4, [r3, #0]
 800d5b0:	b124      	cbz	r4, 800d5bc <iprintf+0x14>
 800d5b2:	69a3      	ldr	r3, [r4, #24]
 800d5b4:	b913      	cbnz	r3, 800d5bc <iprintf+0x14>
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f001 ff3e 	bl	800f438 <__sinit>
 800d5bc:	ab05      	add	r3, sp, #20
 800d5be:	9a04      	ldr	r2, [sp, #16]
 800d5c0:	68a1      	ldr	r1, [r4, #8]
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f003 f9ab 	bl	8010920 <_vfiprintf_r>
 800d5ca:	b002      	add	sp, #8
 800d5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5d0:	b004      	add	sp, #16
 800d5d2:	4770      	bx	lr
 800d5d4:	20000040 	.word	0x20000040

0800d5d8 <_puts_r>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	460e      	mov	r6, r1
 800d5dc:	4605      	mov	r5, r0
 800d5de:	b118      	cbz	r0, 800d5e8 <_puts_r+0x10>
 800d5e0:	6983      	ldr	r3, [r0, #24]
 800d5e2:	b90b      	cbnz	r3, 800d5e8 <_puts_r+0x10>
 800d5e4:	f001 ff28 	bl	800f438 <__sinit>
 800d5e8:	69ab      	ldr	r3, [r5, #24]
 800d5ea:	68ac      	ldr	r4, [r5, #8]
 800d5ec:	b913      	cbnz	r3, 800d5f4 <_puts_r+0x1c>
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f001 ff22 	bl	800f438 <__sinit>
 800d5f4:	4b23      	ldr	r3, [pc, #140]	; (800d684 <_puts_r+0xac>)
 800d5f6:	429c      	cmp	r4, r3
 800d5f8:	d117      	bne.n	800d62a <_puts_r+0x52>
 800d5fa:	686c      	ldr	r4, [r5, #4]
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	071b      	lsls	r3, r3, #28
 800d600:	d51d      	bpl.n	800d63e <_puts_r+0x66>
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	b1db      	cbz	r3, 800d63e <_puts_r+0x66>
 800d606:	3e01      	subs	r6, #1
 800d608:	68a3      	ldr	r3, [r4, #8]
 800d60a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d60e:	3b01      	subs	r3, #1
 800d610:	60a3      	str	r3, [r4, #8]
 800d612:	b9e9      	cbnz	r1, 800d650 <_puts_r+0x78>
 800d614:	2b00      	cmp	r3, #0
 800d616:	da2e      	bge.n	800d676 <_puts_r+0x9e>
 800d618:	4622      	mov	r2, r4
 800d61a:	210a      	movs	r1, #10
 800d61c:	4628      	mov	r0, r5
 800d61e:	f000 ff15 	bl	800e44c <__swbuf_r>
 800d622:	3001      	adds	r0, #1
 800d624:	d011      	beq.n	800d64a <_puts_r+0x72>
 800d626:	200a      	movs	r0, #10
 800d628:	e011      	b.n	800d64e <_puts_r+0x76>
 800d62a:	4b17      	ldr	r3, [pc, #92]	; (800d688 <_puts_r+0xb0>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	d101      	bne.n	800d634 <_puts_r+0x5c>
 800d630:	68ac      	ldr	r4, [r5, #8]
 800d632:	e7e3      	b.n	800d5fc <_puts_r+0x24>
 800d634:	4b15      	ldr	r3, [pc, #84]	; (800d68c <_puts_r+0xb4>)
 800d636:	429c      	cmp	r4, r3
 800d638:	bf08      	it	eq
 800d63a:	68ec      	ldreq	r4, [r5, #12]
 800d63c:	e7de      	b.n	800d5fc <_puts_r+0x24>
 800d63e:	4621      	mov	r1, r4
 800d640:	4628      	mov	r0, r5
 800d642:	f000 ff55 	bl	800e4f0 <__swsetup_r>
 800d646:	2800      	cmp	r0, #0
 800d648:	d0dd      	beq.n	800d606 <_puts_r+0x2e>
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	2b00      	cmp	r3, #0
 800d652:	da04      	bge.n	800d65e <_puts_r+0x86>
 800d654:	69a2      	ldr	r2, [r4, #24]
 800d656:	429a      	cmp	r2, r3
 800d658:	dc06      	bgt.n	800d668 <_puts_r+0x90>
 800d65a:	290a      	cmp	r1, #10
 800d65c:	d004      	beq.n	800d668 <_puts_r+0x90>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	6022      	str	r2, [r4, #0]
 800d664:	7019      	strb	r1, [r3, #0]
 800d666:	e7cf      	b.n	800d608 <_puts_r+0x30>
 800d668:	4622      	mov	r2, r4
 800d66a:	4628      	mov	r0, r5
 800d66c:	f000 feee 	bl	800e44c <__swbuf_r>
 800d670:	3001      	adds	r0, #1
 800d672:	d1c9      	bne.n	800d608 <_puts_r+0x30>
 800d674:	e7e9      	b.n	800d64a <_puts_r+0x72>
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	200a      	movs	r0, #10
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	6022      	str	r2, [r4, #0]
 800d67e:	7018      	strb	r0, [r3, #0]
 800d680:	e7e5      	b.n	800d64e <_puts_r+0x76>
 800d682:	bf00      	nop
 800d684:	080114a0 	.word	0x080114a0
 800d688:	080114c0 	.word	0x080114c0
 800d68c:	08011480 	.word	0x08011480

0800d690 <puts>:
 800d690:	4b02      	ldr	r3, [pc, #8]	; (800d69c <puts+0xc>)
 800d692:	4601      	mov	r1, r0
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	f7ff bf9f 	b.w	800d5d8 <_puts_r>
 800d69a:	bf00      	nop
 800d69c:	20000040 	.word	0x20000040

0800d6a0 <nanf>:
 800d6a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d6a8 <nanf+0x8>
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	7fc00000 	.word	0x7fc00000

0800d6ac <siprintf>:
 800d6ac:	b40e      	push	{r1, r2, r3}
 800d6ae:	b500      	push	{lr}
 800d6b0:	b09c      	sub	sp, #112	; 0x70
 800d6b2:	ab1d      	add	r3, sp, #116	; 0x74
 800d6b4:	9002      	str	r0, [sp, #8]
 800d6b6:	9006      	str	r0, [sp, #24]
 800d6b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6bc:	4809      	ldr	r0, [pc, #36]	; (800d6e4 <siprintf+0x38>)
 800d6be:	9107      	str	r1, [sp, #28]
 800d6c0:	9104      	str	r1, [sp, #16]
 800d6c2:	4909      	ldr	r1, [pc, #36]	; (800d6e8 <siprintf+0x3c>)
 800d6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6c8:	9105      	str	r1, [sp, #20]
 800d6ca:	6800      	ldr	r0, [r0, #0]
 800d6cc:	9301      	str	r3, [sp, #4]
 800d6ce:	a902      	add	r1, sp, #8
 800d6d0:	f003 f804 	bl	80106dc <_svfiprintf_r>
 800d6d4:	9b02      	ldr	r3, [sp, #8]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
 800d6da:	b01c      	add	sp, #112	; 0x70
 800d6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6e0:	b003      	add	sp, #12
 800d6e2:	4770      	bx	lr
 800d6e4:	20000040 	.word	0x20000040
 800d6e8:	ffff0208 	.word	0xffff0208

0800d6ec <sulp>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	460d      	mov	r5, r1
 800d6f2:	ec45 4b10 	vmov	d0, r4, r5
 800d6f6:	4616      	mov	r6, r2
 800d6f8:	f002 fdac 	bl	8010254 <__ulp>
 800d6fc:	ec51 0b10 	vmov	r0, r1, d0
 800d700:	b17e      	cbz	r6, 800d722 <sulp+0x36>
 800d702:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d706:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	dd09      	ble.n	800d722 <sulp+0x36>
 800d70e:	051b      	lsls	r3, r3, #20
 800d710:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d714:	2400      	movs	r4, #0
 800d716:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d71a:	4622      	mov	r2, r4
 800d71c:	462b      	mov	r3, r5
 800d71e:	f7f2 ff6b 	bl	80005f8 <__aeabi_dmul>
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	0000      	movs	r0, r0
	...

0800d728 <_strtod_l>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	461f      	mov	r7, r3
 800d72e:	b0a1      	sub	sp, #132	; 0x84
 800d730:	2300      	movs	r3, #0
 800d732:	4681      	mov	r9, r0
 800d734:	4638      	mov	r0, r7
 800d736:	460e      	mov	r6, r1
 800d738:	9217      	str	r2, [sp, #92]	; 0x5c
 800d73a:	931c      	str	r3, [sp, #112]	; 0x70
 800d73c:	f002 fa2f 	bl	800fb9e <__localeconv_l>
 800d740:	4680      	mov	r8, r0
 800d742:	6800      	ldr	r0, [r0, #0]
 800d744:	f7f2 fd44 	bl	80001d0 <strlen>
 800d748:	f04f 0a00 	mov.w	sl, #0
 800d74c:	4604      	mov	r4, r0
 800d74e:	f04f 0b00 	mov.w	fp, #0
 800d752:	961b      	str	r6, [sp, #108]	; 0x6c
 800d754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d756:	781a      	ldrb	r2, [r3, #0]
 800d758:	2a0d      	cmp	r2, #13
 800d75a:	d832      	bhi.n	800d7c2 <_strtod_l+0x9a>
 800d75c:	2a09      	cmp	r2, #9
 800d75e:	d236      	bcs.n	800d7ce <_strtod_l+0xa6>
 800d760:	2a00      	cmp	r2, #0
 800d762:	d03e      	beq.n	800d7e2 <_strtod_l+0xba>
 800d764:	2300      	movs	r3, #0
 800d766:	930d      	str	r3, [sp, #52]	; 0x34
 800d768:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d76a:	782b      	ldrb	r3, [r5, #0]
 800d76c:	2b30      	cmp	r3, #48	; 0x30
 800d76e:	f040 80ac 	bne.w	800d8ca <_strtod_l+0x1a2>
 800d772:	786b      	ldrb	r3, [r5, #1]
 800d774:	2b58      	cmp	r3, #88	; 0x58
 800d776:	d001      	beq.n	800d77c <_strtod_l+0x54>
 800d778:	2b78      	cmp	r3, #120	; 0x78
 800d77a:	d167      	bne.n	800d84c <_strtod_l+0x124>
 800d77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	ab1c      	add	r3, sp, #112	; 0x70
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	9702      	str	r7, [sp, #8]
 800d786:	ab1d      	add	r3, sp, #116	; 0x74
 800d788:	4a88      	ldr	r2, [pc, #544]	; (800d9ac <_strtod_l+0x284>)
 800d78a:	a91b      	add	r1, sp, #108	; 0x6c
 800d78c:	4648      	mov	r0, r9
 800d78e:	f001 ff2c 	bl	800f5ea <__gethex>
 800d792:	f010 0407 	ands.w	r4, r0, #7
 800d796:	4606      	mov	r6, r0
 800d798:	d005      	beq.n	800d7a6 <_strtod_l+0x7e>
 800d79a:	2c06      	cmp	r4, #6
 800d79c:	d12b      	bne.n	800d7f6 <_strtod_l+0xce>
 800d79e:	3501      	adds	r5, #1
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	951b      	str	r5, [sp, #108]	; 0x6c
 800d7a4:	930d      	str	r3, [sp, #52]	; 0x34
 800d7a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f040 859a 	bne.w	800e2e2 <_strtod_l+0xbba>
 800d7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7b0:	b1e3      	cbz	r3, 800d7ec <_strtod_l+0xc4>
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d7b8:	ec43 2b10 	vmov	d0, r2, r3
 800d7bc:	b021      	add	sp, #132	; 0x84
 800d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c2:	2a2b      	cmp	r2, #43	; 0x2b
 800d7c4:	d015      	beq.n	800d7f2 <_strtod_l+0xca>
 800d7c6:	2a2d      	cmp	r2, #45	; 0x2d
 800d7c8:	d004      	beq.n	800d7d4 <_strtod_l+0xac>
 800d7ca:	2a20      	cmp	r2, #32
 800d7cc:	d1ca      	bne.n	800d764 <_strtod_l+0x3c>
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7d2:	e7bf      	b.n	800d754 <_strtod_l+0x2c>
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	920d      	str	r2, [sp, #52]	; 0x34
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	921b      	str	r2, [sp, #108]	; 0x6c
 800d7dc:	785b      	ldrb	r3, [r3, #1]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1c2      	bne.n	800d768 <_strtod_l+0x40>
 800d7e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7e4:	961b      	str	r6, [sp, #108]	; 0x6c
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f040 8579 	bne.w	800e2de <_strtod_l+0xbb6>
 800d7ec:	4652      	mov	r2, sl
 800d7ee:	465b      	mov	r3, fp
 800d7f0:	e7e2      	b.n	800d7b8 <_strtod_l+0x90>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	e7ef      	b.n	800d7d6 <_strtod_l+0xae>
 800d7f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d7f8:	b13a      	cbz	r2, 800d80a <_strtod_l+0xe2>
 800d7fa:	2135      	movs	r1, #53	; 0x35
 800d7fc:	a81e      	add	r0, sp, #120	; 0x78
 800d7fe:	f002 fe21 	bl	8010444 <__copybits>
 800d802:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d804:	4648      	mov	r0, r9
 800d806:	f002 fa8d 	bl	800fd24 <_Bfree>
 800d80a:	3c01      	subs	r4, #1
 800d80c:	2c04      	cmp	r4, #4
 800d80e:	d806      	bhi.n	800d81e <_strtod_l+0xf6>
 800d810:	e8df f004 	tbb	[pc, r4]
 800d814:	1714030a 	.word	0x1714030a
 800d818:	0a          	.byte	0x0a
 800d819:	00          	.byte	0x00
 800d81a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d81e:	0730      	lsls	r0, r6, #28
 800d820:	d5c1      	bpl.n	800d7a6 <_strtod_l+0x7e>
 800d822:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d826:	e7be      	b.n	800d7a6 <_strtod_l+0x7e>
 800d828:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d82c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d82e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d832:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d836:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d83a:	e7f0      	b.n	800d81e <_strtod_l+0xf6>
 800d83c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d9b0 <_strtod_l+0x288>
 800d840:	e7ed      	b.n	800d81e <_strtod_l+0xf6>
 800d842:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d846:	f04f 3aff 	mov.w	sl, #4294967295
 800d84a:	e7e8      	b.n	800d81e <_strtod_l+0xf6>
 800d84c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d84e:	1c5a      	adds	r2, r3, #1
 800d850:	921b      	str	r2, [sp, #108]	; 0x6c
 800d852:	785b      	ldrb	r3, [r3, #1]
 800d854:	2b30      	cmp	r3, #48	; 0x30
 800d856:	d0f9      	beq.n	800d84c <_strtod_l+0x124>
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d0a4      	beq.n	800d7a6 <_strtod_l+0x7e>
 800d85c:	2301      	movs	r3, #1
 800d85e:	2500      	movs	r5, #0
 800d860:	9306      	str	r3, [sp, #24]
 800d862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d864:	9308      	str	r3, [sp, #32]
 800d866:	9507      	str	r5, [sp, #28]
 800d868:	9505      	str	r5, [sp, #20]
 800d86a:	220a      	movs	r2, #10
 800d86c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d86e:	7807      	ldrb	r7, [r0, #0]
 800d870:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d874:	b2d9      	uxtb	r1, r3
 800d876:	2909      	cmp	r1, #9
 800d878:	d929      	bls.n	800d8ce <_strtod_l+0x1a6>
 800d87a:	4622      	mov	r2, r4
 800d87c:	f8d8 1000 	ldr.w	r1, [r8]
 800d880:	f003 f9b7 	bl	8010bf2 <strncmp>
 800d884:	2800      	cmp	r0, #0
 800d886:	d031      	beq.n	800d8ec <_strtod_l+0x1c4>
 800d888:	2000      	movs	r0, #0
 800d88a:	9c05      	ldr	r4, [sp, #20]
 800d88c:	9004      	str	r0, [sp, #16]
 800d88e:	463b      	mov	r3, r7
 800d890:	4602      	mov	r2, r0
 800d892:	2b65      	cmp	r3, #101	; 0x65
 800d894:	d001      	beq.n	800d89a <_strtod_l+0x172>
 800d896:	2b45      	cmp	r3, #69	; 0x45
 800d898:	d114      	bne.n	800d8c4 <_strtod_l+0x19c>
 800d89a:	b924      	cbnz	r4, 800d8a6 <_strtod_l+0x17e>
 800d89c:	b910      	cbnz	r0, 800d8a4 <_strtod_l+0x17c>
 800d89e:	9b06      	ldr	r3, [sp, #24]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d09e      	beq.n	800d7e2 <_strtod_l+0xba>
 800d8a4:	2400      	movs	r4, #0
 800d8a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d8a8:	1c73      	adds	r3, r6, #1
 800d8aa:	931b      	str	r3, [sp, #108]	; 0x6c
 800d8ac:	7873      	ldrb	r3, [r6, #1]
 800d8ae:	2b2b      	cmp	r3, #43	; 0x2b
 800d8b0:	d078      	beq.n	800d9a4 <_strtod_l+0x27c>
 800d8b2:	2b2d      	cmp	r3, #45	; 0x2d
 800d8b4:	d070      	beq.n	800d998 <_strtod_l+0x270>
 800d8b6:	f04f 0c00 	mov.w	ip, #0
 800d8ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d8be:	2f09      	cmp	r7, #9
 800d8c0:	d97c      	bls.n	800d9bc <_strtod_l+0x294>
 800d8c2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d8c4:	f04f 0e00 	mov.w	lr, #0
 800d8c8:	e09a      	b.n	800da00 <_strtod_l+0x2d8>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e7c7      	b.n	800d85e <_strtod_l+0x136>
 800d8ce:	9905      	ldr	r1, [sp, #20]
 800d8d0:	2908      	cmp	r1, #8
 800d8d2:	bfdd      	ittte	le
 800d8d4:	9907      	ldrle	r1, [sp, #28]
 800d8d6:	fb02 3301 	mlale	r3, r2, r1, r3
 800d8da:	9307      	strle	r3, [sp, #28]
 800d8dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d8e0:	9b05      	ldr	r3, [sp, #20]
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	901b      	str	r0, [sp, #108]	; 0x6c
 800d8ea:	e7bf      	b.n	800d86c <_strtod_l+0x144>
 800d8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8ee:	191a      	adds	r2, r3, r4
 800d8f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d8f2:	9a05      	ldr	r2, [sp, #20]
 800d8f4:	5d1b      	ldrb	r3, [r3, r4]
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	d037      	beq.n	800d96a <_strtod_l+0x242>
 800d8fa:	9c05      	ldr	r4, [sp, #20]
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d902:	2909      	cmp	r1, #9
 800d904:	d913      	bls.n	800d92e <_strtod_l+0x206>
 800d906:	2101      	movs	r1, #1
 800d908:	9104      	str	r1, [sp, #16]
 800d90a:	e7c2      	b.n	800d892 <_strtod_l+0x16a>
 800d90c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	921b      	str	r2, [sp, #108]	; 0x6c
 800d912:	785b      	ldrb	r3, [r3, #1]
 800d914:	3001      	adds	r0, #1
 800d916:	2b30      	cmp	r3, #48	; 0x30
 800d918:	d0f8      	beq.n	800d90c <_strtod_l+0x1e4>
 800d91a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d91e:	2a08      	cmp	r2, #8
 800d920:	f200 84e4 	bhi.w	800e2ec <_strtod_l+0xbc4>
 800d924:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d926:	9208      	str	r2, [sp, #32]
 800d928:	4602      	mov	r2, r0
 800d92a:	2000      	movs	r0, #0
 800d92c:	4604      	mov	r4, r0
 800d92e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d932:	f100 0101 	add.w	r1, r0, #1
 800d936:	d012      	beq.n	800d95e <_strtod_l+0x236>
 800d938:	440a      	add	r2, r1
 800d93a:	eb00 0c04 	add.w	ip, r0, r4
 800d93e:	4621      	mov	r1, r4
 800d940:	270a      	movs	r7, #10
 800d942:	458c      	cmp	ip, r1
 800d944:	d113      	bne.n	800d96e <_strtod_l+0x246>
 800d946:	1821      	adds	r1, r4, r0
 800d948:	2908      	cmp	r1, #8
 800d94a:	f104 0401 	add.w	r4, r4, #1
 800d94e:	4404      	add	r4, r0
 800d950:	dc19      	bgt.n	800d986 <_strtod_l+0x25e>
 800d952:	9b07      	ldr	r3, [sp, #28]
 800d954:	210a      	movs	r1, #10
 800d956:	fb01 e303 	mla	r3, r1, r3, lr
 800d95a:	9307      	str	r3, [sp, #28]
 800d95c:	2100      	movs	r1, #0
 800d95e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d960:	1c58      	adds	r0, r3, #1
 800d962:	901b      	str	r0, [sp, #108]	; 0x6c
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	4608      	mov	r0, r1
 800d968:	e7c9      	b.n	800d8fe <_strtod_l+0x1d6>
 800d96a:	9805      	ldr	r0, [sp, #20]
 800d96c:	e7d3      	b.n	800d916 <_strtod_l+0x1ee>
 800d96e:	2908      	cmp	r1, #8
 800d970:	f101 0101 	add.w	r1, r1, #1
 800d974:	dc03      	bgt.n	800d97e <_strtod_l+0x256>
 800d976:	9b07      	ldr	r3, [sp, #28]
 800d978:	437b      	muls	r3, r7
 800d97a:	9307      	str	r3, [sp, #28]
 800d97c:	e7e1      	b.n	800d942 <_strtod_l+0x21a>
 800d97e:	2910      	cmp	r1, #16
 800d980:	bfd8      	it	le
 800d982:	437d      	mulle	r5, r7
 800d984:	e7dd      	b.n	800d942 <_strtod_l+0x21a>
 800d986:	2c10      	cmp	r4, #16
 800d988:	bfdc      	itt	le
 800d98a:	210a      	movle	r1, #10
 800d98c:	fb01 e505 	mlale	r5, r1, r5, lr
 800d990:	e7e4      	b.n	800d95c <_strtod_l+0x234>
 800d992:	2301      	movs	r3, #1
 800d994:	9304      	str	r3, [sp, #16]
 800d996:	e781      	b.n	800d89c <_strtod_l+0x174>
 800d998:	f04f 0c01 	mov.w	ip, #1
 800d99c:	1cb3      	adds	r3, r6, #2
 800d99e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d9a0:	78b3      	ldrb	r3, [r6, #2]
 800d9a2:	e78a      	b.n	800d8ba <_strtod_l+0x192>
 800d9a4:	f04f 0c00 	mov.w	ip, #0
 800d9a8:	e7f8      	b.n	800d99c <_strtod_l+0x274>
 800d9aa:	bf00      	nop
 800d9ac:	08011420 	.word	0x08011420
 800d9b0:	7ff00000 	.word	0x7ff00000
 800d9b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9b6:	1c5f      	adds	r7, r3, #1
 800d9b8:	971b      	str	r7, [sp, #108]	; 0x6c
 800d9ba:	785b      	ldrb	r3, [r3, #1]
 800d9bc:	2b30      	cmp	r3, #48	; 0x30
 800d9be:	d0f9      	beq.n	800d9b4 <_strtod_l+0x28c>
 800d9c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d9c4:	2f08      	cmp	r7, #8
 800d9c6:	f63f af7d 	bhi.w	800d8c4 <_strtod_l+0x19c>
 800d9ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d9ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9d0:	930a      	str	r3, [sp, #40]	; 0x28
 800d9d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9d4:	1c5f      	adds	r7, r3, #1
 800d9d6:	971b      	str	r7, [sp, #108]	; 0x6c
 800d9d8:	785b      	ldrb	r3, [r3, #1]
 800d9da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d9de:	f1b8 0f09 	cmp.w	r8, #9
 800d9e2:	d937      	bls.n	800da54 <_strtod_l+0x32c>
 800d9e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9e6:	1a7f      	subs	r7, r7, r1
 800d9e8:	2f08      	cmp	r7, #8
 800d9ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d9ee:	dc37      	bgt.n	800da60 <_strtod_l+0x338>
 800d9f0:	45be      	cmp	lr, r7
 800d9f2:	bfa8      	it	ge
 800d9f4:	46be      	movge	lr, r7
 800d9f6:	f1bc 0f00 	cmp.w	ip, #0
 800d9fa:	d001      	beq.n	800da00 <_strtod_l+0x2d8>
 800d9fc:	f1ce 0e00 	rsb	lr, lr, #0
 800da00:	2c00      	cmp	r4, #0
 800da02:	d151      	bne.n	800daa8 <_strtod_l+0x380>
 800da04:	2800      	cmp	r0, #0
 800da06:	f47f aece 	bne.w	800d7a6 <_strtod_l+0x7e>
 800da0a:	9a06      	ldr	r2, [sp, #24]
 800da0c:	2a00      	cmp	r2, #0
 800da0e:	f47f aeca 	bne.w	800d7a6 <_strtod_l+0x7e>
 800da12:	9a04      	ldr	r2, [sp, #16]
 800da14:	2a00      	cmp	r2, #0
 800da16:	f47f aee4 	bne.w	800d7e2 <_strtod_l+0xba>
 800da1a:	2b4e      	cmp	r3, #78	; 0x4e
 800da1c:	d027      	beq.n	800da6e <_strtod_l+0x346>
 800da1e:	dc21      	bgt.n	800da64 <_strtod_l+0x33c>
 800da20:	2b49      	cmp	r3, #73	; 0x49
 800da22:	f47f aede 	bne.w	800d7e2 <_strtod_l+0xba>
 800da26:	49a0      	ldr	r1, [pc, #640]	; (800dca8 <_strtod_l+0x580>)
 800da28:	a81b      	add	r0, sp, #108	; 0x6c
 800da2a:	f002 f811 	bl	800fa50 <__match>
 800da2e:	2800      	cmp	r0, #0
 800da30:	f43f aed7 	beq.w	800d7e2 <_strtod_l+0xba>
 800da34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da36:	499d      	ldr	r1, [pc, #628]	; (800dcac <_strtod_l+0x584>)
 800da38:	3b01      	subs	r3, #1
 800da3a:	a81b      	add	r0, sp, #108	; 0x6c
 800da3c:	931b      	str	r3, [sp, #108]	; 0x6c
 800da3e:	f002 f807 	bl	800fa50 <__match>
 800da42:	b910      	cbnz	r0, 800da4a <_strtod_l+0x322>
 800da44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da46:	3301      	adds	r3, #1
 800da48:	931b      	str	r3, [sp, #108]	; 0x6c
 800da4a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800dcc0 <_strtod_l+0x598>
 800da4e:	f04f 0a00 	mov.w	sl, #0
 800da52:	e6a8      	b.n	800d7a6 <_strtod_l+0x7e>
 800da54:	210a      	movs	r1, #10
 800da56:	fb01 3e0e 	mla	lr, r1, lr, r3
 800da5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800da5e:	e7b8      	b.n	800d9d2 <_strtod_l+0x2aa>
 800da60:	46be      	mov	lr, r7
 800da62:	e7c8      	b.n	800d9f6 <_strtod_l+0x2ce>
 800da64:	2b69      	cmp	r3, #105	; 0x69
 800da66:	d0de      	beq.n	800da26 <_strtod_l+0x2fe>
 800da68:	2b6e      	cmp	r3, #110	; 0x6e
 800da6a:	f47f aeba 	bne.w	800d7e2 <_strtod_l+0xba>
 800da6e:	4990      	ldr	r1, [pc, #576]	; (800dcb0 <_strtod_l+0x588>)
 800da70:	a81b      	add	r0, sp, #108	; 0x6c
 800da72:	f001 ffed 	bl	800fa50 <__match>
 800da76:	2800      	cmp	r0, #0
 800da78:	f43f aeb3 	beq.w	800d7e2 <_strtod_l+0xba>
 800da7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b28      	cmp	r3, #40	; 0x28
 800da82:	d10e      	bne.n	800daa2 <_strtod_l+0x37a>
 800da84:	aa1e      	add	r2, sp, #120	; 0x78
 800da86:	498b      	ldr	r1, [pc, #556]	; (800dcb4 <_strtod_l+0x58c>)
 800da88:	a81b      	add	r0, sp, #108	; 0x6c
 800da8a:	f001 fff5 	bl	800fa78 <__hexnan>
 800da8e:	2805      	cmp	r0, #5
 800da90:	d107      	bne.n	800daa2 <_strtod_l+0x37a>
 800da92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800da94:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800da98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800da9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800daa0:	e681      	b.n	800d7a6 <_strtod_l+0x7e>
 800daa2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800dcc8 <_strtod_l+0x5a0>
 800daa6:	e7d2      	b.n	800da4e <_strtod_l+0x326>
 800daa8:	ebae 0302 	sub.w	r3, lr, r2
 800daac:	9306      	str	r3, [sp, #24]
 800daae:	9b05      	ldr	r3, [sp, #20]
 800dab0:	9807      	ldr	r0, [sp, #28]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bf08      	it	eq
 800dab6:	4623      	moveq	r3, r4
 800dab8:	2c10      	cmp	r4, #16
 800daba:	9305      	str	r3, [sp, #20]
 800dabc:	46a0      	mov	r8, r4
 800dabe:	bfa8      	it	ge
 800dac0:	f04f 0810 	movge.w	r8, #16
 800dac4:	f7f2 fd1e 	bl	8000504 <__aeabi_ui2d>
 800dac8:	2c09      	cmp	r4, #9
 800daca:	4682      	mov	sl, r0
 800dacc:	468b      	mov	fp, r1
 800dace:	dc13      	bgt.n	800daf8 <_strtod_l+0x3d0>
 800dad0:	9b06      	ldr	r3, [sp, #24]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f43f ae67 	beq.w	800d7a6 <_strtod_l+0x7e>
 800dad8:	9b06      	ldr	r3, [sp, #24]
 800dada:	dd7a      	ble.n	800dbd2 <_strtod_l+0x4aa>
 800dadc:	2b16      	cmp	r3, #22
 800dade:	dc61      	bgt.n	800dba4 <_strtod_l+0x47c>
 800dae0:	4a75      	ldr	r2, [pc, #468]	; (800dcb8 <_strtod_l+0x590>)
 800dae2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800dae6:	e9de 0100 	ldrd	r0, r1, [lr]
 800daea:	4652      	mov	r2, sl
 800daec:	465b      	mov	r3, fp
 800daee:	f7f2 fd83 	bl	80005f8 <__aeabi_dmul>
 800daf2:	4682      	mov	sl, r0
 800daf4:	468b      	mov	fp, r1
 800daf6:	e656      	b.n	800d7a6 <_strtod_l+0x7e>
 800daf8:	4b6f      	ldr	r3, [pc, #444]	; (800dcb8 <_strtod_l+0x590>)
 800dafa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dafe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800db02:	f7f2 fd79 	bl	80005f8 <__aeabi_dmul>
 800db06:	4606      	mov	r6, r0
 800db08:	4628      	mov	r0, r5
 800db0a:	460f      	mov	r7, r1
 800db0c:	f7f2 fcfa 	bl	8000504 <__aeabi_ui2d>
 800db10:	4602      	mov	r2, r0
 800db12:	460b      	mov	r3, r1
 800db14:	4630      	mov	r0, r6
 800db16:	4639      	mov	r1, r7
 800db18:	f7f2 fbb8 	bl	800028c <__adddf3>
 800db1c:	2c0f      	cmp	r4, #15
 800db1e:	4682      	mov	sl, r0
 800db20:	468b      	mov	fp, r1
 800db22:	ddd5      	ble.n	800dad0 <_strtod_l+0x3a8>
 800db24:	9b06      	ldr	r3, [sp, #24]
 800db26:	eba4 0808 	sub.w	r8, r4, r8
 800db2a:	4498      	add	r8, r3
 800db2c:	f1b8 0f00 	cmp.w	r8, #0
 800db30:	f340 8096 	ble.w	800dc60 <_strtod_l+0x538>
 800db34:	f018 030f 	ands.w	r3, r8, #15
 800db38:	d00a      	beq.n	800db50 <_strtod_l+0x428>
 800db3a:	495f      	ldr	r1, [pc, #380]	; (800dcb8 <_strtod_l+0x590>)
 800db3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db40:	4652      	mov	r2, sl
 800db42:	465b      	mov	r3, fp
 800db44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db48:	f7f2 fd56 	bl	80005f8 <__aeabi_dmul>
 800db4c:	4682      	mov	sl, r0
 800db4e:	468b      	mov	fp, r1
 800db50:	f038 080f 	bics.w	r8, r8, #15
 800db54:	d073      	beq.n	800dc3e <_strtod_l+0x516>
 800db56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800db5a:	dd47      	ble.n	800dbec <_strtod_l+0x4c4>
 800db5c:	2400      	movs	r4, #0
 800db5e:	46a0      	mov	r8, r4
 800db60:	9407      	str	r4, [sp, #28]
 800db62:	9405      	str	r4, [sp, #20]
 800db64:	2322      	movs	r3, #34	; 0x22
 800db66:	f8df b158 	ldr.w	fp, [pc, #344]	; 800dcc0 <_strtod_l+0x598>
 800db6a:	f8c9 3000 	str.w	r3, [r9]
 800db6e:	f04f 0a00 	mov.w	sl, #0
 800db72:	9b07      	ldr	r3, [sp, #28]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f43f ae16 	beq.w	800d7a6 <_strtod_l+0x7e>
 800db7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800db7c:	4648      	mov	r0, r9
 800db7e:	f002 f8d1 	bl	800fd24 <_Bfree>
 800db82:	9905      	ldr	r1, [sp, #20]
 800db84:	4648      	mov	r0, r9
 800db86:	f002 f8cd 	bl	800fd24 <_Bfree>
 800db8a:	4641      	mov	r1, r8
 800db8c:	4648      	mov	r0, r9
 800db8e:	f002 f8c9 	bl	800fd24 <_Bfree>
 800db92:	9907      	ldr	r1, [sp, #28]
 800db94:	4648      	mov	r0, r9
 800db96:	f002 f8c5 	bl	800fd24 <_Bfree>
 800db9a:	4621      	mov	r1, r4
 800db9c:	4648      	mov	r0, r9
 800db9e:	f002 f8c1 	bl	800fd24 <_Bfree>
 800dba2:	e600      	b.n	800d7a6 <_strtod_l+0x7e>
 800dba4:	9a06      	ldr	r2, [sp, #24]
 800dba6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	dbba      	blt.n	800db24 <_strtod_l+0x3fc>
 800dbae:	4d42      	ldr	r5, [pc, #264]	; (800dcb8 <_strtod_l+0x590>)
 800dbb0:	f1c4 040f 	rsb	r4, r4, #15
 800dbb4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800dbb8:	4652      	mov	r2, sl
 800dbba:	465b      	mov	r3, fp
 800dbbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbc0:	f7f2 fd1a 	bl	80005f8 <__aeabi_dmul>
 800dbc4:	9b06      	ldr	r3, [sp, #24]
 800dbc6:	1b1c      	subs	r4, r3, r4
 800dbc8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dbcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dbd0:	e78d      	b.n	800daee <_strtod_l+0x3c6>
 800dbd2:	f113 0f16 	cmn.w	r3, #22
 800dbd6:	dba5      	blt.n	800db24 <_strtod_l+0x3fc>
 800dbd8:	4a37      	ldr	r2, [pc, #220]	; (800dcb8 <_strtod_l+0x590>)
 800dbda:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800dbde:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	4659      	mov	r1, fp
 800dbe6:	f7f2 fe31 	bl	800084c <__aeabi_ddiv>
 800dbea:	e782      	b.n	800daf2 <_strtod_l+0x3ca>
 800dbec:	2300      	movs	r3, #0
 800dbee:	4e33      	ldr	r6, [pc, #204]	; (800dcbc <_strtod_l+0x594>)
 800dbf0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	4659      	mov	r1, fp
 800dbf8:	461d      	mov	r5, r3
 800dbfa:	f1b8 0f01 	cmp.w	r8, #1
 800dbfe:	dc21      	bgt.n	800dc44 <_strtod_l+0x51c>
 800dc00:	b10b      	cbz	r3, 800dc06 <_strtod_l+0x4de>
 800dc02:	4682      	mov	sl, r0
 800dc04:	468b      	mov	fp, r1
 800dc06:	4b2d      	ldr	r3, [pc, #180]	; (800dcbc <_strtod_l+0x594>)
 800dc08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dc0c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dc10:	4652      	mov	r2, sl
 800dc12:	465b      	mov	r3, fp
 800dc14:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc18:	f7f2 fcee 	bl	80005f8 <__aeabi_dmul>
 800dc1c:	4b28      	ldr	r3, [pc, #160]	; (800dcc0 <_strtod_l+0x598>)
 800dc1e:	460a      	mov	r2, r1
 800dc20:	400b      	ands	r3, r1
 800dc22:	4928      	ldr	r1, [pc, #160]	; (800dcc4 <_strtod_l+0x59c>)
 800dc24:	428b      	cmp	r3, r1
 800dc26:	4682      	mov	sl, r0
 800dc28:	d898      	bhi.n	800db5c <_strtod_l+0x434>
 800dc2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dc2e:	428b      	cmp	r3, r1
 800dc30:	bf86      	itte	hi
 800dc32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dccc <_strtod_l+0x5a4>
 800dc36:	f04f 3aff 	movhi.w	sl, #4294967295
 800dc3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dc3e:	2300      	movs	r3, #0
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	e077      	b.n	800dd34 <_strtod_l+0x60c>
 800dc44:	f018 0f01 	tst.w	r8, #1
 800dc48:	d006      	beq.n	800dc58 <_strtod_l+0x530>
 800dc4a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800dc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc52:	f7f2 fcd1 	bl	80005f8 <__aeabi_dmul>
 800dc56:	2301      	movs	r3, #1
 800dc58:	3501      	adds	r5, #1
 800dc5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc5e:	e7cc      	b.n	800dbfa <_strtod_l+0x4d2>
 800dc60:	d0ed      	beq.n	800dc3e <_strtod_l+0x516>
 800dc62:	f1c8 0800 	rsb	r8, r8, #0
 800dc66:	f018 020f 	ands.w	r2, r8, #15
 800dc6a:	d00a      	beq.n	800dc82 <_strtod_l+0x55a>
 800dc6c:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <_strtod_l+0x590>)
 800dc6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc72:	4650      	mov	r0, sl
 800dc74:	4659      	mov	r1, fp
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7f2 fde7 	bl	800084c <__aeabi_ddiv>
 800dc7e:	4682      	mov	sl, r0
 800dc80:	468b      	mov	fp, r1
 800dc82:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dc86:	d0da      	beq.n	800dc3e <_strtod_l+0x516>
 800dc88:	f1b8 0f1f 	cmp.w	r8, #31
 800dc8c:	dd20      	ble.n	800dcd0 <_strtod_l+0x5a8>
 800dc8e:	2400      	movs	r4, #0
 800dc90:	46a0      	mov	r8, r4
 800dc92:	9407      	str	r4, [sp, #28]
 800dc94:	9405      	str	r4, [sp, #20]
 800dc96:	2322      	movs	r3, #34	; 0x22
 800dc98:	f04f 0a00 	mov.w	sl, #0
 800dc9c:	f04f 0b00 	mov.w	fp, #0
 800dca0:	f8c9 3000 	str.w	r3, [r9]
 800dca4:	e765      	b.n	800db72 <_strtod_l+0x44a>
 800dca6:	bf00      	nop
 800dca8:	080113e9 	.word	0x080113e9
 800dcac:	08011473 	.word	0x08011473
 800dcb0:	080113f1 	.word	0x080113f1
 800dcb4:	08011434 	.word	0x08011434
 800dcb8:	08011518 	.word	0x08011518
 800dcbc:	080114f0 	.word	0x080114f0
 800dcc0:	7ff00000 	.word	0x7ff00000
 800dcc4:	7ca00000 	.word	0x7ca00000
 800dcc8:	fff80000 	.word	0xfff80000
 800dccc:	7fefffff 	.word	0x7fefffff
 800dcd0:	f018 0310 	ands.w	r3, r8, #16
 800dcd4:	bf18      	it	ne
 800dcd6:	236a      	movne	r3, #106	; 0x6a
 800dcd8:	4da0      	ldr	r5, [pc, #640]	; (800df5c <_strtod_l+0x834>)
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	4650      	mov	r0, sl
 800dcde:	4659      	mov	r1, fp
 800dce0:	2300      	movs	r3, #0
 800dce2:	f1b8 0f00 	cmp.w	r8, #0
 800dce6:	f300 810a 	bgt.w	800defe <_strtod_l+0x7d6>
 800dcea:	b10b      	cbz	r3, 800dcf0 <_strtod_l+0x5c8>
 800dcec:	4682      	mov	sl, r0
 800dcee:	468b      	mov	fp, r1
 800dcf0:	9b04      	ldr	r3, [sp, #16]
 800dcf2:	b1bb      	cbz	r3, 800dd24 <_strtod_l+0x5fc>
 800dcf4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dcf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	4659      	mov	r1, fp
 800dd00:	dd10      	ble.n	800dd24 <_strtod_l+0x5fc>
 800dd02:	2b1f      	cmp	r3, #31
 800dd04:	f340 8107 	ble.w	800df16 <_strtod_l+0x7ee>
 800dd08:	2b34      	cmp	r3, #52	; 0x34
 800dd0a:	bfde      	ittt	le
 800dd0c:	3b20      	suble	r3, #32
 800dd0e:	f04f 32ff 	movle.w	r2, #4294967295
 800dd12:	fa02 f303 	lslle.w	r3, r2, r3
 800dd16:	f04f 0a00 	mov.w	sl, #0
 800dd1a:	bfcc      	ite	gt
 800dd1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dd20:	ea03 0b01 	andle.w	fp, r3, r1
 800dd24:	2200      	movs	r2, #0
 800dd26:	2300      	movs	r3, #0
 800dd28:	4650      	mov	r0, sl
 800dd2a:	4659      	mov	r1, fp
 800dd2c:	f7f2 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d1ac      	bne.n	800dc8e <_strtod_l+0x566>
 800dd34:	9b07      	ldr	r3, [sp, #28]
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	9a05      	ldr	r2, [sp, #20]
 800dd3a:	9908      	ldr	r1, [sp, #32]
 800dd3c:	4623      	mov	r3, r4
 800dd3e:	4648      	mov	r0, r9
 800dd40:	f002 f842 	bl	800fdc8 <__s2b>
 800dd44:	9007      	str	r0, [sp, #28]
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f43f af08 	beq.w	800db5c <_strtod_l+0x434>
 800dd4c:	9a06      	ldr	r2, [sp, #24]
 800dd4e:	9b06      	ldr	r3, [sp, #24]
 800dd50:	2a00      	cmp	r2, #0
 800dd52:	f1c3 0300 	rsb	r3, r3, #0
 800dd56:	bfa8      	it	ge
 800dd58:	2300      	movge	r3, #0
 800dd5a:	930e      	str	r3, [sp, #56]	; 0x38
 800dd5c:	2400      	movs	r4, #0
 800dd5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dd62:	9316      	str	r3, [sp, #88]	; 0x58
 800dd64:	46a0      	mov	r8, r4
 800dd66:	9b07      	ldr	r3, [sp, #28]
 800dd68:	4648      	mov	r0, r9
 800dd6a:	6859      	ldr	r1, [r3, #4]
 800dd6c:	f001 ffa6 	bl	800fcbc <_Balloc>
 800dd70:	9005      	str	r0, [sp, #20]
 800dd72:	2800      	cmp	r0, #0
 800dd74:	f43f aef6 	beq.w	800db64 <_strtod_l+0x43c>
 800dd78:	9b07      	ldr	r3, [sp, #28]
 800dd7a:	691a      	ldr	r2, [r3, #16]
 800dd7c:	3202      	adds	r2, #2
 800dd7e:	f103 010c 	add.w	r1, r3, #12
 800dd82:	0092      	lsls	r2, r2, #2
 800dd84:	300c      	adds	r0, #12
 800dd86:	f7fe fdbd 	bl	800c904 <memcpy>
 800dd8a:	aa1e      	add	r2, sp, #120	; 0x78
 800dd8c:	a91d      	add	r1, sp, #116	; 0x74
 800dd8e:	ec4b ab10 	vmov	d0, sl, fp
 800dd92:	4648      	mov	r0, r9
 800dd94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dd98:	f002 fad2 	bl	8010340 <__d2b>
 800dd9c:	901c      	str	r0, [sp, #112]	; 0x70
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	f43f aee0 	beq.w	800db64 <_strtod_l+0x43c>
 800dda4:	2101      	movs	r1, #1
 800dda6:	4648      	mov	r0, r9
 800dda8:	f002 f89a 	bl	800fee0 <__i2b>
 800ddac:	4680      	mov	r8, r0
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	f43f aed8 	beq.w	800db64 <_strtod_l+0x43c>
 800ddb4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ddb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ddb8:	2e00      	cmp	r6, #0
 800ddba:	bfab      	itete	ge
 800ddbc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ddbe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ddc0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ddc2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ddc4:	bfac      	ite	ge
 800ddc6:	18f7      	addge	r7, r6, r3
 800ddc8:	1b9d      	sublt	r5, r3, r6
 800ddca:	9b04      	ldr	r3, [sp, #16]
 800ddcc:	1af6      	subs	r6, r6, r3
 800ddce:	4416      	add	r6, r2
 800ddd0:	4b63      	ldr	r3, [pc, #396]	; (800df60 <_strtod_l+0x838>)
 800ddd2:	3e01      	subs	r6, #1
 800ddd4:	429e      	cmp	r6, r3
 800ddd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ddda:	f280 80af 	bge.w	800df3c <_strtod_l+0x814>
 800ddde:	1b9b      	subs	r3, r3, r6
 800dde0:	2b1f      	cmp	r3, #31
 800dde2:	eba2 0203 	sub.w	r2, r2, r3
 800dde6:	f04f 0101 	mov.w	r1, #1
 800ddea:	f300 809b 	bgt.w	800df24 <_strtod_l+0x7fc>
 800ddee:	fa01 f303 	lsl.w	r3, r1, r3
 800ddf2:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	930a      	str	r3, [sp, #40]	; 0x28
 800ddf8:	18be      	adds	r6, r7, r2
 800ddfa:	9b04      	ldr	r3, [sp, #16]
 800ddfc:	42b7      	cmp	r7, r6
 800ddfe:	4415      	add	r5, r2
 800de00:	441d      	add	r5, r3
 800de02:	463b      	mov	r3, r7
 800de04:	bfa8      	it	ge
 800de06:	4633      	movge	r3, r6
 800de08:	42ab      	cmp	r3, r5
 800de0a:	bfa8      	it	ge
 800de0c:	462b      	movge	r3, r5
 800de0e:	2b00      	cmp	r3, #0
 800de10:	bfc2      	ittt	gt
 800de12:	1af6      	subgt	r6, r6, r3
 800de14:	1aed      	subgt	r5, r5, r3
 800de16:	1aff      	subgt	r7, r7, r3
 800de18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de1a:	b1bb      	cbz	r3, 800de4c <_strtod_l+0x724>
 800de1c:	4641      	mov	r1, r8
 800de1e:	461a      	mov	r2, r3
 800de20:	4648      	mov	r0, r9
 800de22:	f002 f8fd 	bl	8010020 <__pow5mult>
 800de26:	4680      	mov	r8, r0
 800de28:	2800      	cmp	r0, #0
 800de2a:	f43f ae9b 	beq.w	800db64 <_strtod_l+0x43c>
 800de2e:	4601      	mov	r1, r0
 800de30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800de32:	4648      	mov	r0, r9
 800de34:	f002 f85d 	bl	800fef2 <__multiply>
 800de38:	900c      	str	r0, [sp, #48]	; 0x30
 800de3a:	2800      	cmp	r0, #0
 800de3c:	f43f ae92 	beq.w	800db64 <_strtod_l+0x43c>
 800de40:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de42:	4648      	mov	r0, r9
 800de44:	f001 ff6e 	bl	800fd24 <_Bfree>
 800de48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de4a:	931c      	str	r3, [sp, #112]	; 0x70
 800de4c:	2e00      	cmp	r6, #0
 800de4e:	dc7a      	bgt.n	800df46 <_strtod_l+0x81e>
 800de50:	9b06      	ldr	r3, [sp, #24]
 800de52:	2b00      	cmp	r3, #0
 800de54:	dd08      	ble.n	800de68 <_strtod_l+0x740>
 800de56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de58:	9905      	ldr	r1, [sp, #20]
 800de5a:	4648      	mov	r0, r9
 800de5c:	f002 f8e0 	bl	8010020 <__pow5mult>
 800de60:	9005      	str	r0, [sp, #20]
 800de62:	2800      	cmp	r0, #0
 800de64:	f43f ae7e 	beq.w	800db64 <_strtod_l+0x43c>
 800de68:	2d00      	cmp	r5, #0
 800de6a:	dd08      	ble.n	800de7e <_strtod_l+0x756>
 800de6c:	462a      	mov	r2, r5
 800de6e:	9905      	ldr	r1, [sp, #20]
 800de70:	4648      	mov	r0, r9
 800de72:	f002 f923 	bl	80100bc <__lshift>
 800de76:	9005      	str	r0, [sp, #20]
 800de78:	2800      	cmp	r0, #0
 800de7a:	f43f ae73 	beq.w	800db64 <_strtod_l+0x43c>
 800de7e:	2f00      	cmp	r7, #0
 800de80:	dd08      	ble.n	800de94 <_strtod_l+0x76c>
 800de82:	4641      	mov	r1, r8
 800de84:	463a      	mov	r2, r7
 800de86:	4648      	mov	r0, r9
 800de88:	f002 f918 	bl	80100bc <__lshift>
 800de8c:	4680      	mov	r8, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	f43f ae68 	beq.w	800db64 <_strtod_l+0x43c>
 800de94:	9a05      	ldr	r2, [sp, #20]
 800de96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de98:	4648      	mov	r0, r9
 800de9a:	f002 f97d 	bl	8010198 <__mdiff>
 800de9e:	4604      	mov	r4, r0
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f43f ae5f 	beq.w	800db64 <_strtod_l+0x43c>
 800dea6:	68c3      	ldr	r3, [r0, #12]
 800dea8:	930c      	str	r3, [sp, #48]	; 0x30
 800deaa:	2300      	movs	r3, #0
 800deac:	60c3      	str	r3, [r0, #12]
 800deae:	4641      	mov	r1, r8
 800deb0:	f002 f958 	bl	8010164 <__mcmp>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	da55      	bge.n	800df64 <_strtod_l+0x83c>
 800deb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800deba:	b9e3      	cbnz	r3, 800def6 <_strtod_l+0x7ce>
 800debc:	f1ba 0f00 	cmp.w	sl, #0
 800dec0:	d119      	bne.n	800def6 <_strtod_l+0x7ce>
 800dec2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dec6:	b9b3      	cbnz	r3, 800def6 <_strtod_l+0x7ce>
 800dec8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800decc:	0d1b      	lsrs	r3, r3, #20
 800dece:	051b      	lsls	r3, r3, #20
 800ded0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ded4:	d90f      	bls.n	800def6 <_strtod_l+0x7ce>
 800ded6:	6963      	ldr	r3, [r4, #20]
 800ded8:	b913      	cbnz	r3, 800dee0 <_strtod_l+0x7b8>
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	dd0a      	ble.n	800def6 <_strtod_l+0x7ce>
 800dee0:	4621      	mov	r1, r4
 800dee2:	2201      	movs	r2, #1
 800dee4:	4648      	mov	r0, r9
 800dee6:	f002 f8e9 	bl	80100bc <__lshift>
 800deea:	4641      	mov	r1, r8
 800deec:	4604      	mov	r4, r0
 800deee:	f002 f939 	bl	8010164 <__mcmp>
 800def2:	2800      	cmp	r0, #0
 800def4:	dc67      	bgt.n	800dfc6 <_strtod_l+0x89e>
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d171      	bne.n	800dfe0 <_strtod_l+0x8b8>
 800defc:	e63d      	b.n	800db7a <_strtod_l+0x452>
 800defe:	f018 0f01 	tst.w	r8, #1
 800df02:	d004      	beq.n	800df0e <_strtod_l+0x7e6>
 800df04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df08:	f7f2 fb76 	bl	80005f8 <__aeabi_dmul>
 800df0c:	2301      	movs	r3, #1
 800df0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800df12:	3508      	adds	r5, #8
 800df14:	e6e5      	b.n	800dce2 <_strtod_l+0x5ba>
 800df16:	f04f 32ff 	mov.w	r2, #4294967295
 800df1a:	fa02 f303 	lsl.w	r3, r2, r3
 800df1e:	ea03 0a0a 	and.w	sl, r3, sl
 800df22:	e6ff      	b.n	800dd24 <_strtod_l+0x5fc>
 800df24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800df28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800df2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800df30:	36e2      	adds	r6, #226	; 0xe2
 800df32:	fa01 f306 	lsl.w	r3, r1, r6
 800df36:	930a      	str	r3, [sp, #40]	; 0x28
 800df38:	910f      	str	r1, [sp, #60]	; 0x3c
 800df3a:	e75d      	b.n	800ddf8 <_strtod_l+0x6d0>
 800df3c:	2300      	movs	r3, #0
 800df3e:	930a      	str	r3, [sp, #40]	; 0x28
 800df40:	2301      	movs	r3, #1
 800df42:	930f      	str	r3, [sp, #60]	; 0x3c
 800df44:	e758      	b.n	800ddf8 <_strtod_l+0x6d0>
 800df46:	4632      	mov	r2, r6
 800df48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800df4a:	4648      	mov	r0, r9
 800df4c:	f002 f8b6 	bl	80100bc <__lshift>
 800df50:	901c      	str	r0, [sp, #112]	; 0x70
 800df52:	2800      	cmp	r0, #0
 800df54:	f47f af7c 	bne.w	800de50 <_strtod_l+0x728>
 800df58:	e604      	b.n	800db64 <_strtod_l+0x43c>
 800df5a:	bf00      	nop
 800df5c:	08011448 	.word	0x08011448
 800df60:	fffffc02 	.word	0xfffffc02
 800df64:	465d      	mov	r5, fp
 800df66:	f040 8086 	bne.w	800e076 <_strtod_l+0x94e>
 800df6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df70:	b32a      	cbz	r2, 800dfbe <_strtod_l+0x896>
 800df72:	4aaf      	ldr	r2, [pc, #700]	; (800e230 <_strtod_l+0xb08>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d153      	bne.n	800e020 <_strtod_l+0x8f8>
 800df78:	9b04      	ldr	r3, [sp, #16]
 800df7a:	4650      	mov	r0, sl
 800df7c:	b1d3      	cbz	r3, 800dfb4 <_strtod_l+0x88c>
 800df7e:	4aad      	ldr	r2, [pc, #692]	; (800e234 <_strtod_l+0xb0c>)
 800df80:	402a      	ands	r2, r5
 800df82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800df86:	f04f 31ff 	mov.w	r1, #4294967295
 800df8a:	d816      	bhi.n	800dfba <_strtod_l+0x892>
 800df8c:	0d12      	lsrs	r2, r2, #20
 800df8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800df92:	fa01 f303 	lsl.w	r3, r1, r3
 800df96:	4298      	cmp	r0, r3
 800df98:	d142      	bne.n	800e020 <_strtod_l+0x8f8>
 800df9a:	4ba7      	ldr	r3, [pc, #668]	; (800e238 <_strtod_l+0xb10>)
 800df9c:	429d      	cmp	r5, r3
 800df9e:	d102      	bne.n	800dfa6 <_strtod_l+0x87e>
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	f43f addf 	beq.w	800db64 <_strtod_l+0x43c>
 800dfa6:	4ba3      	ldr	r3, [pc, #652]	; (800e234 <_strtod_l+0xb0c>)
 800dfa8:	402b      	ands	r3, r5
 800dfaa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dfae:	f04f 0a00 	mov.w	sl, #0
 800dfb2:	e7a0      	b.n	800def6 <_strtod_l+0x7ce>
 800dfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb8:	e7ed      	b.n	800df96 <_strtod_l+0x86e>
 800dfba:	460b      	mov	r3, r1
 800dfbc:	e7eb      	b.n	800df96 <_strtod_l+0x86e>
 800dfbe:	bb7b      	cbnz	r3, 800e020 <_strtod_l+0x8f8>
 800dfc0:	f1ba 0f00 	cmp.w	sl, #0
 800dfc4:	d12c      	bne.n	800e020 <_strtod_l+0x8f8>
 800dfc6:	9904      	ldr	r1, [sp, #16]
 800dfc8:	4a9a      	ldr	r2, [pc, #616]	; (800e234 <_strtod_l+0xb0c>)
 800dfca:	465b      	mov	r3, fp
 800dfcc:	b1f1      	cbz	r1, 800e00c <_strtod_l+0x8e4>
 800dfce:	ea02 010b 	and.w	r1, r2, fp
 800dfd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dfd6:	dc19      	bgt.n	800e00c <_strtod_l+0x8e4>
 800dfd8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dfdc:	f77f ae5b 	ble.w	800dc96 <_strtod_l+0x56e>
 800dfe0:	4a96      	ldr	r2, [pc, #600]	; (800e23c <_strtod_l+0xb14>)
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800dfe8:	4650      	mov	r0, sl
 800dfea:	4659      	mov	r1, fp
 800dfec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	4682      	mov	sl, r0
 800dff6:	468b      	mov	fp, r1
 800dff8:	2900      	cmp	r1, #0
 800dffa:	f47f adbe 	bne.w	800db7a <_strtod_l+0x452>
 800dffe:	2800      	cmp	r0, #0
 800e000:	f47f adbb 	bne.w	800db7a <_strtod_l+0x452>
 800e004:	2322      	movs	r3, #34	; 0x22
 800e006:	f8c9 3000 	str.w	r3, [r9]
 800e00a:	e5b6      	b.n	800db7a <_strtod_l+0x452>
 800e00c:	4013      	ands	r3, r2
 800e00e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e012:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e016:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e01a:	f04f 3aff 	mov.w	sl, #4294967295
 800e01e:	e76a      	b.n	800def6 <_strtod_l+0x7ce>
 800e020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e022:	b193      	cbz	r3, 800e04a <_strtod_l+0x922>
 800e024:	422b      	tst	r3, r5
 800e026:	f43f af66 	beq.w	800def6 <_strtod_l+0x7ce>
 800e02a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e02c:	9a04      	ldr	r2, [sp, #16]
 800e02e:	4650      	mov	r0, sl
 800e030:	4659      	mov	r1, fp
 800e032:	b173      	cbz	r3, 800e052 <_strtod_l+0x92a>
 800e034:	f7ff fb5a 	bl	800d6ec <sulp>
 800e038:	4602      	mov	r2, r0
 800e03a:	460b      	mov	r3, r1
 800e03c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e040:	f7f2 f924 	bl	800028c <__adddf3>
 800e044:	4682      	mov	sl, r0
 800e046:	468b      	mov	fp, r1
 800e048:	e755      	b.n	800def6 <_strtod_l+0x7ce>
 800e04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e04c:	ea13 0f0a 	tst.w	r3, sl
 800e050:	e7e9      	b.n	800e026 <_strtod_l+0x8fe>
 800e052:	f7ff fb4b 	bl	800d6ec <sulp>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e05e:	f7f2 f913 	bl	8000288 <__aeabi_dsub>
 800e062:	2200      	movs	r2, #0
 800e064:	2300      	movs	r3, #0
 800e066:	4682      	mov	sl, r0
 800e068:	468b      	mov	fp, r1
 800e06a:	f7f2 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e06e:	2800      	cmp	r0, #0
 800e070:	f47f ae11 	bne.w	800dc96 <_strtod_l+0x56e>
 800e074:	e73f      	b.n	800def6 <_strtod_l+0x7ce>
 800e076:	4641      	mov	r1, r8
 800e078:	4620      	mov	r0, r4
 800e07a:	f002 f9b0 	bl	80103de <__ratio>
 800e07e:	ec57 6b10 	vmov	r6, r7, d0
 800e082:	2200      	movs	r2, #0
 800e084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e088:	ee10 0a10 	vmov	r0, s0
 800e08c:	4639      	mov	r1, r7
 800e08e:	f7f2 fd2f 	bl	8000af0 <__aeabi_dcmple>
 800e092:	2800      	cmp	r0, #0
 800e094:	d077      	beq.n	800e186 <_strtod_l+0xa5e>
 800e096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d04a      	beq.n	800e132 <_strtod_l+0xa0a>
 800e09c:	4b68      	ldr	r3, [pc, #416]	; (800e240 <_strtod_l+0xb18>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e0a4:	4f66      	ldr	r7, [pc, #408]	; (800e240 <_strtod_l+0xb18>)
 800e0a6:	2600      	movs	r6, #0
 800e0a8:	4b62      	ldr	r3, [pc, #392]	; (800e234 <_strtod_l+0xb0c>)
 800e0aa:	402b      	ands	r3, r5
 800e0ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0b0:	4b64      	ldr	r3, [pc, #400]	; (800e244 <_strtod_l+0xb1c>)
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	f040 80ce 	bne.w	800e254 <_strtod_l+0xb2c>
 800e0b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e0bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e0c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800e0c4:	ec4b ab10 	vmov	d0, sl, fp
 800e0c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e0cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e0d0:	f002 f8c0 	bl	8010254 <__ulp>
 800e0d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e0d8:	ec53 2b10 	vmov	r2, r3, d0
 800e0dc:	f7f2 fa8c 	bl	80005f8 <__aeabi_dmul>
 800e0e0:	4652      	mov	r2, sl
 800e0e2:	465b      	mov	r3, fp
 800e0e4:	f7f2 f8d2 	bl	800028c <__adddf3>
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4952      	ldr	r1, [pc, #328]	; (800e234 <_strtod_l+0xb0c>)
 800e0ec:	4a56      	ldr	r2, [pc, #344]	; (800e248 <_strtod_l+0xb20>)
 800e0ee:	4019      	ands	r1, r3
 800e0f0:	4291      	cmp	r1, r2
 800e0f2:	4682      	mov	sl, r0
 800e0f4:	d95b      	bls.n	800e1ae <_strtod_l+0xa86>
 800e0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d103      	bne.n	800e108 <_strtod_l+0x9e0>
 800e100:	9b08      	ldr	r3, [sp, #32]
 800e102:	3301      	adds	r3, #1
 800e104:	f43f ad2e 	beq.w	800db64 <_strtod_l+0x43c>
 800e108:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e238 <_strtod_l+0xb10>
 800e10c:	f04f 3aff 	mov.w	sl, #4294967295
 800e110:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e112:	4648      	mov	r0, r9
 800e114:	f001 fe06 	bl	800fd24 <_Bfree>
 800e118:	9905      	ldr	r1, [sp, #20]
 800e11a:	4648      	mov	r0, r9
 800e11c:	f001 fe02 	bl	800fd24 <_Bfree>
 800e120:	4641      	mov	r1, r8
 800e122:	4648      	mov	r0, r9
 800e124:	f001 fdfe 	bl	800fd24 <_Bfree>
 800e128:	4621      	mov	r1, r4
 800e12a:	4648      	mov	r0, r9
 800e12c:	f001 fdfa 	bl	800fd24 <_Bfree>
 800e130:	e619      	b.n	800dd66 <_strtod_l+0x63e>
 800e132:	f1ba 0f00 	cmp.w	sl, #0
 800e136:	d11a      	bne.n	800e16e <_strtod_l+0xa46>
 800e138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e13c:	b9eb      	cbnz	r3, 800e17a <_strtod_l+0xa52>
 800e13e:	2200      	movs	r2, #0
 800e140:	4b3f      	ldr	r3, [pc, #252]	; (800e240 <_strtod_l+0xb18>)
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	f7f2 fcc9 	bl	8000adc <__aeabi_dcmplt>
 800e14a:	b9c8      	cbnz	r0, 800e180 <_strtod_l+0xa58>
 800e14c:	4630      	mov	r0, r6
 800e14e:	4639      	mov	r1, r7
 800e150:	2200      	movs	r2, #0
 800e152:	4b3e      	ldr	r3, [pc, #248]	; (800e24c <_strtod_l+0xb24>)
 800e154:	f7f2 fa50 	bl	80005f8 <__aeabi_dmul>
 800e158:	4606      	mov	r6, r0
 800e15a:	460f      	mov	r7, r1
 800e15c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e160:	9618      	str	r6, [sp, #96]	; 0x60
 800e162:	9319      	str	r3, [sp, #100]	; 0x64
 800e164:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800e168:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e16c:	e79c      	b.n	800e0a8 <_strtod_l+0x980>
 800e16e:	f1ba 0f01 	cmp.w	sl, #1
 800e172:	d102      	bne.n	800e17a <_strtod_l+0xa52>
 800e174:	2d00      	cmp	r5, #0
 800e176:	f43f ad8e 	beq.w	800dc96 <_strtod_l+0x56e>
 800e17a:	2200      	movs	r2, #0
 800e17c:	4b34      	ldr	r3, [pc, #208]	; (800e250 <_strtod_l+0xb28>)
 800e17e:	e78f      	b.n	800e0a0 <_strtod_l+0x978>
 800e180:	2600      	movs	r6, #0
 800e182:	4f32      	ldr	r7, [pc, #200]	; (800e24c <_strtod_l+0xb24>)
 800e184:	e7ea      	b.n	800e15c <_strtod_l+0xa34>
 800e186:	4b31      	ldr	r3, [pc, #196]	; (800e24c <_strtod_l+0xb24>)
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	2200      	movs	r2, #0
 800e18e:	f7f2 fa33 	bl	80005f8 <__aeabi_dmul>
 800e192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e194:	4606      	mov	r6, r0
 800e196:	460f      	mov	r7, r1
 800e198:	b933      	cbnz	r3, 800e1a8 <_strtod_l+0xa80>
 800e19a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e19e:	9010      	str	r0, [sp, #64]	; 0x40
 800e1a0:	9311      	str	r3, [sp, #68]	; 0x44
 800e1a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e1a6:	e7df      	b.n	800e168 <_strtod_l+0xa40>
 800e1a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e1ac:	e7f9      	b.n	800e1a2 <_strtod_l+0xa7a>
 800e1ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e1b2:	9b04      	ldr	r3, [sp, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1ab      	bne.n	800e110 <_strtod_l+0x9e8>
 800e1b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e1bc:	0d1b      	lsrs	r3, r3, #20
 800e1be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1c0:	051b      	lsls	r3, r3, #20
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	465d      	mov	r5, fp
 800e1c6:	d1a3      	bne.n	800e110 <_strtod_l+0x9e8>
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f7f2 fcc4 	bl	8000b58 <__aeabi_d2iz>
 800e1d0:	f7f2 f9a8 	bl	8000524 <__aeabi_i2d>
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	4639      	mov	r1, r7
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f7f2 f854 	bl	8000288 <__aeabi_dsub>
 800e1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	460f      	mov	r7, r1
 800e1e6:	b933      	cbnz	r3, 800e1f6 <_strtod_l+0xace>
 800e1e8:	f1ba 0f00 	cmp.w	sl, #0
 800e1ec:	d103      	bne.n	800e1f6 <_strtod_l+0xace>
 800e1ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800e1f2:	2d00      	cmp	r5, #0
 800e1f4:	d06d      	beq.n	800e2d2 <_strtod_l+0xbaa>
 800e1f6:	a30a      	add	r3, pc, #40	; (adr r3, 800e220 <_strtod_l+0xaf8>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	4639      	mov	r1, r7
 800e200:	f7f2 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800e204:	2800      	cmp	r0, #0
 800e206:	f47f acb8 	bne.w	800db7a <_strtod_l+0x452>
 800e20a:	a307      	add	r3, pc, #28	; (adr r3, 800e228 <_strtod_l+0xb00>)
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	4630      	mov	r0, r6
 800e212:	4639      	mov	r1, r7
 800e214:	f7f2 fc80 	bl	8000b18 <__aeabi_dcmpgt>
 800e218:	2800      	cmp	r0, #0
 800e21a:	f43f af79 	beq.w	800e110 <_strtod_l+0x9e8>
 800e21e:	e4ac      	b.n	800db7a <_strtod_l+0x452>
 800e220:	94a03595 	.word	0x94a03595
 800e224:	3fdfffff 	.word	0x3fdfffff
 800e228:	35afe535 	.word	0x35afe535
 800e22c:	3fe00000 	.word	0x3fe00000
 800e230:	000fffff 	.word	0x000fffff
 800e234:	7ff00000 	.word	0x7ff00000
 800e238:	7fefffff 	.word	0x7fefffff
 800e23c:	39500000 	.word	0x39500000
 800e240:	3ff00000 	.word	0x3ff00000
 800e244:	7fe00000 	.word	0x7fe00000
 800e248:	7c9fffff 	.word	0x7c9fffff
 800e24c:	3fe00000 	.word	0x3fe00000
 800e250:	bff00000 	.word	0xbff00000
 800e254:	9b04      	ldr	r3, [sp, #16]
 800e256:	b333      	cbz	r3, 800e2a6 <_strtod_l+0xb7e>
 800e258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e25a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e25e:	d822      	bhi.n	800e2a6 <_strtod_l+0xb7e>
 800e260:	a327      	add	r3, pc, #156	; (adr r3, 800e300 <_strtod_l+0xbd8>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	4630      	mov	r0, r6
 800e268:	4639      	mov	r1, r7
 800e26a:	f7f2 fc41 	bl	8000af0 <__aeabi_dcmple>
 800e26e:	b1a0      	cbz	r0, 800e29a <_strtod_l+0xb72>
 800e270:	4639      	mov	r1, r7
 800e272:	4630      	mov	r0, r6
 800e274:	f7f2 fc98 	bl	8000ba8 <__aeabi_d2uiz>
 800e278:	2800      	cmp	r0, #0
 800e27a:	bf08      	it	eq
 800e27c:	2001      	moveq	r0, #1
 800e27e:	f7f2 f941 	bl	8000504 <__aeabi_ui2d>
 800e282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e284:	4606      	mov	r6, r0
 800e286:	460f      	mov	r7, r1
 800e288:	bb03      	cbnz	r3, 800e2cc <_strtod_l+0xba4>
 800e28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e28e:	9012      	str	r0, [sp, #72]	; 0x48
 800e290:	9313      	str	r3, [sp, #76]	; 0x4c
 800e292:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e296:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e29c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e29e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e2a2:	1a9b      	subs	r3, r3, r2
 800e2a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e2aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e2ae:	f001 ffd1 	bl	8010254 <__ulp>
 800e2b2:	4650      	mov	r0, sl
 800e2b4:	ec53 2b10 	vmov	r2, r3, d0
 800e2b8:	4659      	mov	r1, fp
 800e2ba:	f7f2 f99d 	bl	80005f8 <__aeabi_dmul>
 800e2be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e2c2:	f7f1 ffe3 	bl	800028c <__adddf3>
 800e2c6:	4682      	mov	sl, r0
 800e2c8:	468b      	mov	fp, r1
 800e2ca:	e772      	b.n	800e1b2 <_strtod_l+0xa8a>
 800e2cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e2d0:	e7df      	b.n	800e292 <_strtod_l+0xb6a>
 800e2d2:	a30d      	add	r3, pc, #52	; (adr r3, 800e308 <_strtod_l+0xbe0>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 fc00 	bl	8000adc <__aeabi_dcmplt>
 800e2dc:	e79c      	b.n	800e218 <_strtod_l+0xaf0>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	930d      	str	r3, [sp, #52]	; 0x34
 800e2e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	f7ff ba61 	b.w	800d7ae <_strtod_l+0x86>
 800e2ec:	2b65      	cmp	r3, #101	; 0x65
 800e2ee:	f04f 0200 	mov.w	r2, #0
 800e2f2:	f43f ab4e 	beq.w	800d992 <_strtod_l+0x26a>
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	4614      	mov	r4, r2
 800e2fa:	9104      	str	r1, [sp, #16]
 800e2fc:	f7ff bacb 	b.w	800d896 <_strtod_l+0x16e>
 800e300:	ffc00000 	.word	0xffc00000
 800e304:	41dfffff 	.word	0x41dfffff
 800e308:	94a03595 	.word	0x94a03595
 800e30c:	3fcfffff 	.word	0x3fcfffff

0800e310 <_strtod_r>:
 800e310:	4b05      	ldr	r3, [pc, #20]	; (800e328 <_strtod_r+0x18>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	b410      	push	{r4}
 800e316:	6a1b      	ldr	r3, [r3, #32]
 800e318:	4c04      	ldr	r4, [pc, #16]	; (800e32c <_strtod_r+0x1c>)
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	bf08      	it	eq
 800e31e:	4623      	moveq	r3, r4
 800e320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e324:	f7ff ba00 	b.w	800d728 <_strtod_l>
 800e328:	20000040 	.word	0x20000040
 800e32c:	200000a4 	.word	0x200000a4

0800e330 <_strtol_l.isra.0>:
 800e330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e334:	4680      	mov	r8, r0
 800e336:	4689      	mov	r9, r1
 800e338:	4692      	mov	sl, r2
 800e33a:	461e      	mov	r6, r3
 800e33c:	460f      	mov	r7, r1
 800e33e:	463d      	mov	r5, r7
 800e340:	9808      	ldr	r0, [sp, #32]
 800e342:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e346:	f001 fc27 	bl	800fb98 <__locale_ctype_ptr_l>
 800e34a:	4420      	add	r0, r4
 800e34c:	7843      	ldrb	r3, [r0, #1]
 800e34e:	f013 0308 	ands.w	r3, r3, #8
 800e352:	d132      	bne.n	800e3ba <_strtol_l.isra.0+0x8a>
 800e354:	2c2d      	cmp	r4, #45	; 0x2d
 800e356:	d132      	bne.n	800e3be <_strtol_l.isra.0+0x8e>
 800e358:	787c      	ldrb	r4, [r7, #1]
 800e35a:	1cbd      	adds	r5, r7, #2
 800e35c:	2201      	movs	r2, #1
 800e35e:	2e00      	cmp	r6, #0
 800e360:	d05d      	beq.n	800e41e <_strtol_l.isra.0+0xee>
 800e362:	2e10      	cmp	r6, #16
 800e364:	d109      	bne.n	800e37a <_strtol_l.isra.0+0x4a>
 800e366:	2c30      	cmp	r4, #48	; 0x30
 800e368:	d107      	bne.n	800e37a <_strtol_l.isra.0+0x4a>
 800e36a:	782b      	ldrb	r3, [r5, #0]
 800e36c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e370:	2b58      	cmp	r3, #88	; 0x58
 800e372:	d14f      	bne.n	800e414 <_strtol_l.isra.0+0xe4>
 800e374:	786c      	ldrb	r4, [r5, #1]
 800e376:	2610      	movs	r6, #16
 800e378:	3502      	adds	r5, #2
 800e37a:	2a00      	cmp	r2, #0
 800e37c:	bf14      	ite	ne
 800e37e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e382:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e386:	2700      	movs	r7, #0
 800e388:	fbb1 fcf6 	udiv	ip, r1, r6
 800e38c:	4638      	mov	r0, r7
 800e38e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e392:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e396:	2b09      	cmp	r3, #9
 800e398:	d817      	bhi.n	800e3ca <_strtol_l.isra.0+0x9a>
 800e39a:	461c      	mov	r4, r3
 800e39c:	42a6      	cmp	r6, r4
 800e39e:	dd23      	ble.n	800e3e8 <_strtol_l.isra.0+0xb8>
 800e3a0:	1c7b      	adds	r3, r7, #1
 800e3a2:	d007      	beq.n	800e3b4 <_strtol_l.isra.0+0x84>
 800e3a4:	4584      	cmp	ip, r0
 800e3a6:	d31c      	bcc.n	800e3e2 <_strtol_l.isra.0+0xb2>
 800e3a8:	d101      	bne.n	800e3ae <_strtol_l.isra.0+0x7e>
 800e3aa:	45a6      	cmp	lr, r4
 800e3ac:	db19      	blt.n	800e3e2 <_strtol_l.isra.0+0xb2>
 800e3ae:	fb00 4006 	mla	r0, r0, r6, r4
 800e3b2:	2701      	movs	r7, #1
 800e3b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3b8:	e7eb      	b.n	800e392 <_strtol_l.isra.0+0x62>
 800e3ba:	462f      	mov	r7, r5
 800e3bc:	e7bf      	b.n	800e33e <_strtol_l.isra.0+0xe>
 800e3be:	2c2b      	cmp	r4, #43	; 0x2b
 800e3c0:	bf04      	itt	eq
 800e3c2:	1cbd      	addeq	r5, r7, #2
 800e3c4:	787c      	ldrbeq	r4, [r7, #1]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	e7c9      	b.n	800e35e <_strtol_l.isra.0+0x2e>
 800e3ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e3ce:	2b19      	cmp	r3, #25
 800e3d0:	d801      	bhi.n	800e3d6 <_strtol_l.isra.0+0xa6>
 800e3d2:	3c37      	subs	r4, #55	; 0x37
 800e3d4:	e7e2      	b.n	800e39c <_strtol_l.isra.0+0x6c>
 800e3d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e3da:	2b19      	cmp	r3, #25
 800e3dc:	d804      	bhi.n	800e3e8 <_strtol_l.isra.0+0xb8>
 800e3de:	3c57      	subs	r4, #87	; 0x57
 800e3e0:	e7dc      	b.n	800e39c <_strtol_l.isra.0+0x6c>
 800e3e2:	f04f 37ff 	mov.w	r7, #4294967295
 800e3e6:	e7e5      	b.n	800e3b4 <_strtol_l.isra.0+0x84>
 800e3e8:	1c7b      	adds	r3, r7, #1
 800e3ea:	d108      	bne.n	800e3fe <_strtol_l.isra.0+0xce>
 800e3ec:	2322      	movs	r3, #34	; 0x22
 800e3ee:	f8c8 3000 	str.w	r3, [r8]
 800e3f2:	4608      	mov	r0, r1
 800e3f4:	f1ba 0f00 	cmp.w	sl, #0
 800e3f8:	d107      	bne.n	800e40a <_strtol_l.isra.0+0xda>
 800e3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3fe:	b102      	cbz	r2, 800e402 <_strtol_l.isra.0+0xd2>
 800e400:	4240      	negs	r0, r0
 800e402:	f1ba 0f00 	cmp.w	sl, #0
 800e406:	d0f8      	beq.n	800e3fa <_strtol_l.isra.0+0xca>
 800e408:	b10f      	cbz	r7, 800e40e <_strtol_l.isra.0+0xde>
 800e40a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e40e:	f8ca 9000 	str.w	r9, [sl]
 800e412:	e7f2      	b.n	800e3fa <_strtol_l.isra.0+0xca>
 800e414:	2430      	movs	r4, #48	; 0x30
 800e416:	2e00      	cmp	r6, #0
 800e418:	d1af      	bne.n	800e37a <_strtol_l.isra.0+0x4a>
 800e41a:	2608      	movs	r6, #8
 800e41c:	e7ad      	b.n	800e37a <_strtol_l.isra.0+0x4a>
 800e41e:	2c30      	cmp	r4, #48	; 0x30
 800e420:	d0a3      	beq.n	800e36a <_strtol_l.isra.0+0x3a>
 800e422:	260a      	movs	r6, #10
 800e424:	e7a9      	b.n	800e37a <_strtol_l.isra.0+0x4a>
	...

0800e428 <_strtol_r>:
 800e428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e42a:	4c06      	ldr	r4, [pc, #24]	; (800e444 <_strtol_r+0x1c>)
 800e42c:	4d06      	ldr	r5, [pc, #24]	; (800e448 <_strtol_r+0x20>)
 800e42e:	6824      	ldr	r4, [r4, #0]
 800e430:	6a24      	ldr	r4, [r4, #32]
 800e432:	2c00      	cmp	r4, #0
 800e434:	bf08      	it	eq
 800e436:	462c      	moveq	r4, r5
 800e438:	9400      	str	r4, [sp, #0]
 800e43a:	f7ff ff79 	bl	800e330 <_strtol_l.isra.0>
 800e43e:	b003      	add	sp, #12
 800e440:	bd30      	pop	{r4, r5, pc}
 800e442:	bf00      	nop
 800e444:	20000040 	.word	0x20000040
 800e448:	200000a4 	.word	0x200000a4

0800e44c <__swbuf_r>:
 800e44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44e:	460e      	mov	r6, r1
 800e450:	4614      	mov	r4, r2
 800e452:	4605      	mov	r5, r0
 800e454:	b118      	cbz	r0, 800e45e <__swbuf_r+0x12>
 800e456:	6983      	ldr	r3, [r0, #24]
 800e458:	b90b      	cbnz	r3, 800e45e <__swbuf_r+0x12>
 800e45a:	f000 ffed 	bl	800f438 <__sinit>
 800e45e:	4b21      	ldr	r3, [pc, #132]	; (800e4e4 <__swbuf_r+0x98>)
 800e460:	429c      	cmp	r4, r3
 800e462:	d12a      	bne.n	800e4ba <__swbuf_r+0x6e>
 800e464:	686c      	ldr	r4, [r5, #4]
 800e466:	69a3      	ldr	r3, [r4, #24]
 800e468:	60a3      	str	r3, [r4, #8]
 800e46a:	89a3      	ldrh	r3, [r4, #12]
 800e46c:	071a      	lsls	r2, r3, #28
 800e46e:	d52e      	bpl.n	800e4ce <__swbuf_r+0x82>
 800e470:	6923      	ldr	r3, [r4, #16]
 800e472:	b363      	cbz	r3, 800e4ce <__swbuf_r+0x82>
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	6820      	ldr	r0, [r4, #0]
 800e478:	1ac0      	subs	r0, r0, r3
 800e47a:	6963      	ldr	r3, [r4, #20]
 800e47c:	b2f6      	uxtb	r6, r6
 800e47e:	4283      	cmp	r3, r0
 800e480:	4637      	mov	r7, r6
 800e482:	dc04      	bgt.n	800e48e <__swbuf_r+0x42>
 800e484:	4621      	mov	r1, r4
 800e486:	4628      	mov	r0, r5
 800e488:	f000 ff6c 	bl	800f364 <_fflush_r>
 800e48c:	bb28      	cbnz	r0, 800e4da <__swbuf_r+0x8e>
 800e48e:	68a3      	ldr	r3, [r4, #8]
 800e490:	3b01      	subs	r3, #1
 800e492:	60a3      	str	r3, [r4, #8]
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	6022      	str	r2, [r4, #0]
 800e49a:	701e      	strb	r6, [r3, #0]
 800e49c:	6963      	ldr	r3, [r4, #20]
 800e49e:	3001      	adds	r0, #1
 800e4a0:	4283      	cmp	r3, r0
 800e4a2:	d004      	beq.n	800e4ae <__swbuf_r+0x62>
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	07db      	lsls	r3, r3, #31
 800e4a8:	d519      	bpl.n	800e4de <__swbuf_r+0x92>
 800e4aa:	2e0a      	cmp	r6, #10
 800e4ac:	d117      	bne.n	800e4de <__swbuf_r+0x92>
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f000 ff57 	bl	800f364 <_fflush_r>
 800e4b6:	b190      	cbz	r0, 800e4de <__swbuf_r+0x92>
 800e4b8:	e00f      	b.n	800e4da <__swbuf_r+0x8e>
 800e4ba:	4b0b      	ldr	r3, [pc, #44]	; (800e4e8 <__swbuf_r+0x9c>)
 800e4bc:	429c      	cmp	r4, r3
 800e4be:	d101      	bne.n	800e4c4 <__swbuf_r+0x78>
 800e4c0:	68ac      	ldr	r4, [r5, #8]
 800e4c2:	e7d0      	b.n	800e466 <__swbuf_r+0x1a>
 800e4c4:	4b09      	ldr	r3, [pc, #36]	; (800e4ec <__swbuf_r+0xa0>)
 800e4c6:	429c      	cmp	r4, r3
 800e4c8:	bf08      	it	eq
 800e4ca:	68ec      	ldreq	r4, [r5, #12]
 800e4cc:	e7cb      	b.n	800e466 <__swbuf_r+0x1a>
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	f000 f80d 	bl	800e4f0 <__swsetup_r>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d0cc      	beq.n	800e474 <__swbuf_r+0x28>
 800e4da:	f04f 37ff 	mov.w	r7, #4294967295
 800e4de:	4638      	mov	r0, r7
 800e4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	080114a0 	.word	0x080114a0
 800e4e8:	080114c0 	.word	0x080114c0
 800e4ec:	08011480 	.word	0x08011480

0800e4f0 <__swsetup_r>:
 800e4f0:	4b32      	ldr	r3, [pc, #200]	; (800e5bc <__swsetup_r+0xcc>)
 800e4f2:	b570      	push	{r4, r5, r6, lr}
 800e4f4:	681d      	ldr	r5, [r3, #0]
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	b125      	cbz	r5, 800e506 <__swsetup_r+0x16>
 800e4fc:	69ab      	ldr	r3, [r5, #24]
 800e4fe:	b913      	cbnz	r3, 800e506 <__swsetup_r+0x16>
 800e500:	4628      	mov	r0, r5
 800e502:	f000 ff99 	bl	800f438 <__sinit>
 800e506:	4b2e      	ldr	r3, [pc, #184]	; (800e5c0 <__swsetup_r+0xd0>)
 800e508:	429c      	cmp	r4, r3
 800e50a:	d10f      	bne.n	800e52c <__swsetup_r+0x3c>
 800e50c:	686c      	ldr	r4, [r5, #4]
 800e50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e512:	b29a      	uxth	r2, r3
 800e514:	0715      	lsls	r5, r2, #28
 800e516:	d42c      	bmi.n	800e572 <__swsetup_r+0x82>
 800e518:	06d0      	lsls	r0, r2, #27
 800e51a:	d411      	bmi.n	800e540 <__swsetup_r+0x50>
 800e51c:	2209      	movs	r2, #9
 800e51e:	6032      	str	r2, [r6, #0]
 800e520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	f04f 30ff 	mov.w	r0, #4294967295
 800e52a:	e03e      	b.n	800e5aa <__swsetup_r+0xba>
 800e52c:	4b25      	ldr	r3, [pc, #148]	; (800e5c4 <__swsetup_r+0xd4>)
 800e52e:	429c      	cmp	r4, r3
 800e530:	d101      	bne.n	800e536 <__swsetup_r+0x46>
 800e532:	68ac      	ldr	r4, [r5, #8]
 800e534:	e7eb      	b.n	800e50e <__swsetup_r+0x1e>
 800e536:	4b24      	ldr	r3, [pc, #144]	; (800e5c8 <__swsetup_r+0xd8>)
 800e538:	429c      	cmp	r4, r3
 800e53a:	bf08      	it	eq
 800e53c:	68ec      	ldreq	r4, [r5, #12]
 800e53e:	e7e6      	b.n	800e50e <__swsetup_r+0x1e>
 800e540:	0751      	lsls	r1, r2, #29
 800e542:	d512      	bpl.n	800e56a <__swsetup_r+0x7a>
 800e544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e546:	b141      	cbz	r1, 800e55a <__swsetup_r+0x6a>
 800e548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e54c:	4299      	cmp	r1, r3
 800e54e:	d002      	beq.n	800e556 <__swsetup_r+0x66>
 800e550:	4630      	mov	r0, r6
 800e552:	f001 ffc1 	bl	80104d8 <_free_r>
 800e556:	2300      	movs	r3, #0
 800e558:	6363      	str	r3, [r4, #52]	; 0x34
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e560:	81a3      	strh	r3, [r4, #12]
 800e562:	2300      	movs	r3, #0
 800e564:	6063      	str	r3, [r4, #4]
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	89a3      	ldrh	r3, [r4, #12]
 800e56c:	f043 0308 	orr.w	r3, r3, #8
 800e570:	81a3      	strh	r3, [r4, #12]
 800e572:	6923      	ldr	r3, [r4, #16]
 800e574:	b94b      	cbnz	r3, 800e58a <__swsetup_r+0x9a>
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e580:	d003      	beq.n	800e58a <__swsetup_r+0x9a>
 800e582:	4621      	mov	r1, r4
 800e584:	4630      	mov	r0, r6
 800e586:	f001 fb3f 	bl	800fc08 <__smakebuf_r>
 800e58a:	89a2      	ldrh	r2, [r4, #12]
 800e58c:	f012 0301 	ands.w	r3, r2, #1
 800e590:	d00c      	beq.n	800e5ac <__swsetup_r+0xbc>
 800e592:	2300      	movs	r3, #0
 800e594:	60a3      	str	r3, [r4, #8]
 800e596:	6963      	ldr	r3, [r4, #20]
 800e598:	425b      	negs	r3, r3
 800e59a:	61a3      	str	r3, [r4, #24]
 800e59c:	6923      	ldr	r3, [r4, #16]
 800e59e:	b953      	cbnz	r3, 800e5b6 <__swsetup_r+0xc6>
 800e5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e5a8:	d1ba      	bne.n	800e520 <__swsetup_r+0x30>
 800e5aa:	bd70      	pop	{r4, r5, r6, pc}
 800e5ac:	0792      	lsls	r2, r2, #30
 800e5ae:	bf58      	it	pl
 800e5b0:	6963      	ldrpl	r3, [r4, #20]
 800e5b2:	60a3      	str	r3, [r4, #8]
 800e5b4:	e7f2      	b.n	800e59c <__swsetup_r+0xac>
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	e7f7      	b.n	800e5aa <__swsetup_r+0xba>
 800e5ba:	bf00      	nop
 800e5bc:	20000040 	.word	0x20000040
 800e5c0:	080114a0 	.word	0x080114a0
 800e5c4:	080114c0 	.word	0x080114c0
 800e5c8:	08011480 	.word	0x08011480

0800e5cc <quorem>:
 800e5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d0:	6903      	ldr	r3, [r0, #16]
 800e5d2:	690c      	ldr	r4, [r1, #16]
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	4680      	mov	r8, r0
 800e5d8:	f2c0 8082 	blt.w	800e6e0 <quorem+0x114>
 800e5dc:	3c01      	subs	r4, #1
 800e5de:	f101 0714 	add.w	r7, r1, #20
 800e5e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e5e6:	f100 0614 	add.w	r6, r0, #20
 800e5ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e5ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e5f2:	eb06 030c 	add.w	r3, r6, ip
 800e5f6:	3501      	adds	r5, #1
 800e5f8:	eb07 090c 	add.w	r9, r7, ip
 800e5fc:	9301      	str	r3, [sp, #4]
 800e5fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800e602:	b395      	cbz	r5, 800e66a <quorem+0x9e>
 800e604:	f04f 0a00 	mov.w	sl, #0
 800e608:	4638      	mov	r0, r7
 800e60a:	46b6      	mov	lr, r6
 800e60c:	46d3      	mov	fp, sl
 800e60e:	f850 2b04 	ldr.w	r2, [r0], #4
 800e612:	b293      	uxth	r3, r2
 800e614:	fb05 a303 	mla	r3, r5, r3, sl
 800e618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	ebab 0303 	sub.w	r3, fp, r3
 800e622:	0c12      	lsrs	r2, r2, #16
 800e624:	f8de b000 	ldr.w	fp, [lr]
 800e628:	fb05 a202 	mla	r2, r5, r2, sl
 800e62c:	fa13 f38b 	uxtah	r3, r3, fp
 800e630:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e634:	fa1f fb82 	uxth.w	fp, r2
 800e638:	f8de 2000 	ldr.w	r2, [lr]
 800e63c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e644:	b29b      	uxth	r3, r3
 800e646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e64a:	4581      	cmp	r9, r0
 800e64c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e650:	f84e 3b04 	str.w	r3, [lr], #4
 800e654:	d2db      	bcs.n	800e60e <quorem+0x42>
 800e656:	f856 300c 	ldr.w	r3, [r6, ip]
 800e65a:	b933      	cbnz	r3, 800e66a <quorem+0x9e>
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	3b04      	subs	r3, #4
 800e660:	429e      	cmp	r6, r3
 800e662:	461a      	mov	r2, r3
 800e664:	d330      	bcc.n	800e6c8 <quorem+0xfc>
 800e666:	f8c8 4010 	str.w	r4, [r8, #16]
 800e66a:	4640      	mov	r0, r8
 800e66c:	f001 fd7a 	bl	8010164 <__mcmp>
 800e670:	2800      	cmp	r0, #0
 800e672:	db25      	blt.n	800e6c0 <quorem+0xf4>
 800e674:	3501      	adds	r5, #1
 800e676:	4630      	mov	r0, r6
 800e678:	f04f 0c00 	mov.w	ip, #0
 800e67c:	f857 2b04 	ldr.w	r2, [r7], #4
 800e680:	f8d0 e000 	ldr.w	lr, [r0]
 800e684:	b293      	uxth	r3, r2
 800e686:	ebac 0303 	sub.w	r3, ip, r3
 800e68a:	0c12      	lsrs	r2, r2, #16
 800e68c:	fa13 f38e 	uxtah	r3, r3, lr
 800e690:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e698:	b29b      	uxth	r3, r3
 800e69a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e69e:	45b9      	cmp	r9, r7
 800e6a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6a4:	f840 3b04 	str.w	r3, [r0], #4
 800e6a8:	d2e8      	bcs.n	800e67c <quorem+0xb0>
 800e6aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e6ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e6b2:	b92a      	cbnz	r2, 800e6c0 <quorem+0xf4>
 800e6b4:	3b04      	subs	r3, #4
 800e6b6:	429e      	cmp	r6, r3
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	d30b      	bcc.n	800e6d4 <quorem+0x108>
 800e6bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	b003      	add	sp, #12
 800e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c8:	6812      	ldr	r2, [r2, #0]
 800e6ca:	3b04      	subs	r3, #4
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	d1ca      	bne.n	800e666 <quorem+0x9a>
 800e6d0:	3c01      	subs	r4, #1
 800e6d2:	e7c5      	b.n	800e660 <quorem+0x94>
 800e6d4:	6812      	ldr	r2, [r2, #0]
 800e6d6:	3b04      	subs	r3, #4
 800e6d8:	2a00      	cmp	r2, #0
 800e6da:	d1ef      	bne.n	800e6bc <quorem+0xf0>
 800e6dc:	3c01      	subs	r4, #1
 800e6de:	e7ea      	b.n	800e6b6 <quorem+0xea>
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e7ee      	b.n	800e6c2 <quorem+0xf6>
 800e6e4:	0000      	movs	r0, r0
	...

0800e6e8 <_dtoa_r>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	ec57 6b10 	vmov	r6, r7, d0
 800e6f0:	b097      	sub	sp, #92	; 0x5c
 800e6f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e6f4:	9106      	str	r1, [sp, #24]
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e6fa:	9312      	str	r3, [sp, #72]	; 0x48
 800e6fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e700:	e9cd 6700 	strd	r6, r7, [sp]
 800e704:	b93d      	cbnz	r5, 800e716 <_dtoa_r+0x2e>
 800e706:	2010      	movs	r0, #16
 800e708:	f001 fabe 	bl	800fc88 <malloc>
 800e70c:	6260      	str	r0, [r4, #36]	; 0x24
 800e70e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e712:	6005      	str	r5, [r0, #0]
 800e714:	60c5      	str	r5, [r0, #12]
 800e716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e718:	6819      	ldr	r1, [r3, #0]
 800e71a:	b151      	cbz	r1, 800e732 <_dtoa_r+0x4a>
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	604a      	str	r2, [r1, #4]
 800e720:	2301      	movs	r3, #1
 800e722:	4093      	lsls	r3, r2
 800e724:	608b      	str	r3, [r1, #8]
 800e726:	4620      	mov	r0, r4
 800e728:	f001 fafc 	bl	800fd24 <_Bfree>
 800e72c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e72e:	2200      	movs	r2, #0
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	1e3b      	subs	r3, r7, #0
 800e734:	bfbb      	ittet	lt
 800e736:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e73a:	9301      	strlt	r3, [sp, #4]
 800e73c:	2300      	movge	r3, #0
 800e73e:	2201      	movlt	r2, #1
 800e740:	bfac      	ite	ge
 800e742:	f8c8 3000 	strge.w	r3, [r8]
 800e746:	f8c8 2000 	strlt.w	r2, [r8]
 800e74a:	4baf      	ldr	r3, [pc, #700]	; (800ea08 <_dtoa_r+0x320>)
 800e74c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e750:	ea33 0308 	bics.w	r3, r3, r8
 800e754:	d114      	bne.n	800e780 <_dtoa_r+0x98>
 800e756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e758:	f242 730f 	movw	r3, #9999	; 0x270f
 800e75c:	6013      	str	r3, [r2, #0]
 800e75e:	9b00      	ldr	r3, [sp, #0]
 800e760:	b923      	cbnz	r3, 800e76c <_dtoa_r+0x84>
 800e762:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e766:	2800      	cmp	r0, #0
 800e768:	f000 8542 	beq.w	800f1f0 <_dtoa_r+0xb08>
 800e76c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e76e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ea1c <_dtoa_r+0x334>
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 8544 	beq.w	800f200 <_dtoa_r+0xb18>
 800e778:	f10b 0303 	add.w	r3, fp, #3
 800e77c:	f000 bd3e 	b.w	800f1fc <_dtoa_r+0xb14>
 800e780:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e784:	2200      	movs	r2, #0
 800e786:	2300      	movs	r3, #0
 800e788:	4630      	mov	r0, r6
 800e78a:	4639      	mov	r1, r7
 800e78c:	f7f2 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e790:	4681      	mov	r9, r0
 800e792:	b168      	cbz	r0, 800e7b0 <_dtoa_r+0xc8>
 800e794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e796:	2301      	movs	r3, #1
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 8524 	beq.w	800f1ea <_dtoa_r+0xb02>
 800e7a2:	4b9a      	ldr	r3, [pc, #616]	; (800ea0c <_dtoa_r+0x324>)
 800e7a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800e7aa:	6013      	str	r3, [r2, #0]
 800e7ac:	f000 bd28 	b.w	800f200 <_dtoa_r+0xb18>
 800e7b0:	aa14      	add	r2, sp, #80	; 0x50
 800e7b2:	a915      	add	r1, sp, #84	; 0x54
 800e7b4:	ec47 6b10 	vmov	d0, r6, r7
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	f001 fdc1 	bl	8010340 <__d2b>
 800e7be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e7c2:	9004      	str	r0, [sp, #16]
 800e7c4:	2d00      	cmp	r5, #0
 800e7c6:	d07c      	beq.n	800e8c2 <_dtoa_r+0x1da>
 800e7c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e7cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e7d0:	46b2      	mov	sl, r6
 800e7d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e7d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e7da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e7de:	2200      	movs	r2, #0
 800e7e0:	4b8b      	ldr	r3, [pc, #556]	; (800ea10 <_dtoa_r+0x328>)
 800e7e2:	4650      	mov	r0, sl
 800e7e4:	4659      	mov	r1, fp
 800e7e6:	f7f1 fd4f 	bl	8000288 <__aeabi_dsub>
 800e7ea:	a381      	add	r3, pc, #516	; (adr r3, 800e9f0 <_dtoa_r+0x308>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	f7f1 ff02 	bl	80005f8 <__aeabi_dmul>
 800e7f4:	a380      	add	r3, pc, #512	; (adr r3, 800e9f8 <_dtoa_r+0x310>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	f7f1 fd47 	bl	800028c <__adddf3>
 800e7fe:	4606      	mov	r6, r0
 800e800:	4628      	mov	r0, r5
 800e802:	460f      	mov	r7, r1
 800e804:	f7f1 fe8e 	bl	8000524 <__aeabi_i2d>
 800e808:	a37d      	add	r3, pc, #500	; (adr r3, 800ea00 <_dtoa_r+0x318>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	f7f1 fef3 	bl	80005f8 <__aeabi_dmul>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	f7f1 fd37 	bl	800028c <__adddf3>
 800e81e:	4606      	mov	r6, r0
 800e820:	460f      	mov	r7, r1
 800e822:	f7f2 f999 	bl	8000b58 <__aeabi_d2iz>
 800e826:	2200      	movs	r2, #0
 800e828:	4682      	mov	sl, r0
 800e82a:	2300      	movs	r3, #0
 800e82c:	4630      	mov	r0, r6
 800e82e:	4639      	mov	r1, r7
 800e830:	f7f2 f954 	bl	8000adc <__aeabi_dcmplt>
 800e834:	b148      	cbz	r0, 800e84a <_dtoa_r+0x162>
 800e836:	4650      	mov	r0, sl
 800e838:	f7f1 fe74 	bl	8000524 <__aeabi_i2d>
 800e83c:	4632      	mov	r2, r6
 800e83e:	463b      	mov	r3, r7
 800e840:	f7f2 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 800e844:	b908      	cbnz	r0, 800e84a <_dtoa_r+0x162>
 800e846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e84a:	f1ba 0f16 	cmp.w	sl, #22
 800e84e:	d859      	bhi.n	800e904 <_dtoa_r+0x21c>
 800e850:	4970      	ldr	r1, [pc, #448]	; (800ea14 <_dtoa_r+0x32c>)
 800e852:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e85e:	f7f2 f95b 	bl	8000b18 <__aeabi_dcmpgt>
 800e862:	2800      	cmp	r0, #0
 800e864:	d050      	beq.n	800e908 <_dtoa_r+0x220>
 800e866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e86a:	2300      	movs	r3, #0
 800e86c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e86e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e870:	1b5d      	subs	r5, r3, r5
 800e872:	f1b5 0801 	subs.w	r8, r5, #1
 800e876:	bf49      	itett	mi
 800e878:	f1c5 0301 	rsbmi	r3, r5, #1
 800e87c:	2300      	movpl	r3, #0
 800e87e:	9305      	strmi	r3, [sp, #20]
 800e880:	f04f 0800 	movmi.w	r8, #0
 800e884:	bf58      	it	pl
 800e886:	9305      	strpl	r3, [sp, #20]
 800e888:	f1ba 0f00 	cmp.w	sl, #0
 800e88c:	db3e      	blt.n	800e90c <_dtoa_r+0x224>
 800e88e:	2300      	movs	r3, #0
 800e890:	44d0      	add	r8, sl
 800e892:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e896:	9307      	str	r3, [sp, #28]
 800e898:	9b06      	ldr	r3, [sp, #24]
 800e89a:	2b09      	cmp	r3, #9
 800e89c:	f200 8090 	bhi.w	800e9c0 <_dtoa_r+0x2d8>
 800e8a0:	2b05      	cmp	r3, #5
 800e8a2:	bfc4      	itt	gt
 800e8a4:	3b04      	subgt	r3, #4
 800e8a6:	9306      	strgt	r3, [sp, #24]
 800e8a8:	9b06      	ldr	r3, [sp, #24]
 800e8aa:	f1a3 0302 	sub.w	r3, r3, #2
 800e8ae:	bfcc      	ite	gt
 800e8b0:	2500      	movgt	r5, #0
 800e8b2:	2501      	movle	r5, #1
 800e8b4:	2b03      	cmp	r3, #3
 800e8b6:	f200 808f 	bhi.w	800e9d8 <_dtoa_r+0x2f0>
 800e8ba:	e8df f003 	tbb	[pc, r3]
 800e8be:	7f7d      	.short	0x7f7d
 800e8c0:	7131      	.short	0x7131
 800e8c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e8c6:	441d      	add	r5, r3
 800e8c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e8cc:	2820      	cmp	r0, #32
 800e8ce:	dd13      	ble.n	800e8f8 <_dtoa_r+0x210>
 800e8d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e8d4:	9b00      	ldr	r3, [sp, #0]
 800e8d6:	fa08 f800 	lsl.w	r8, r8, r0
 800e8da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e8de:	fa23 f000 	lsr.w	r0, r3, r0
 800e8e2:	ea48 0000 	orr.w	r0, r8, r0
 800e8e6:	f7f1 fe0d 	bl	8000504 <__aeabi_ui2d>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	4682      	mov	sl, r0
 800e8ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e8f2:	3d01      	subs	r5, #1
 800e8f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8f6:	e772      	b.n	800e7de <_dtoa_r+0xf6>
 800e8f8:	9b00      	ldr	r3, [sp, #0]
 800e8fa:	f1c0 0020 	rsb	r0, r0, #32
 800e8fe:	fa03 f000 	lsl.w	r0, r3, r0
 800e902:	e7f0      	b.n	800e8e6 <_dtoa_r+0x1fe>
 800e904:	2301      	movs	r3, #1
 800e906:	e7b1      	b.n	800e86c <_dtoa_r+0x184>
 800e908:	900f      	str	r0, [sp, #60]	; 0x3c
 800e90a:	e7b0      	b.n	800e86e <_dtoa_r+0x186>
 800e90c:	9b05      	ldr	r3, [sp, #20]
 800e90e:	eba3 030a 	sub.w	r3, r3, sl
 800e912:	9305      	str	r3, [sp, #20]
 800e914:	f1ca 0300 	rsb	r3, sl, #0
 800e918:	9307      	str	r3, [sp, #28]
 800e91a:	2300      	movs	r3, #0
 800e91c:	930e      	str	r3, [sp, #56]	; 0x38
 800e91e:	e7bb      	b.n	800e898 <_dtoa_r+0x1b0>
 800e920:	2301      	movs	r3, #1
 800e922:	930a      	str	r3, [sp, #40]	; 0x28
 800e924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e926:	2b00      	cmp	r3, #0
 800e928:	dd59      	ble.n	800e9de <_dtoa_r+0x2f6>
 800e92a:	9302      	str	r3, [sp, #8]
 800e92c:	4699      	mov	r9, r3
 800e92e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e930:	2200      	movs	r2, #0
 800e932:	6072      	str	r2, [r6, #4]
 800e934:	2204      	movs	r2, #4
 800e936:	f102 0014 	add.w	r0, r2, #20
 800e93a:	4298      	cmp	r0, r3
 800e93c:	6871      	ldr	r1, [r6, #4]
 800e93e:	d953      	bls.n	800e9e8 <_dtoa_r+0x300>
 800e940:	4620      	mov	r0, r4
 800e942:	f001 f9bb 	bl	800fcbc <_Balloc>
 800e946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e948:	6030      	str	r0, [r6, #0]
 800e94a:	f1b9 0f0e 	cmp.w	r9, #14
 800e94e:	f8d3 b000 	ldr.w	fp, [r3]
 800e952:	f200 80e6 	bhi.w	800eb22 <_dtoa_r+0x43a>
 800e956:	2d00      	cmp	r5, #0
 800e958:	f000 80e3 	beq.w	800eb22 <_dtoa_r+0x43a>
 800e95c:	ed9d 7b00 	vldr	d7, [sp]
 800e960:	f1ba 0f00 	cmp.w	sl, #0
 800e964:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e968:	dd74      	ble.n	800ea54 <_dtoa_r+0x36c>
 800e96a:	4a2a      	ldr	r2, [pc, #168]	; (800ea14 <_dtoa_r+0x32c>)
 800e96c:	f00a 030f 	and.w	r3, sl, #15
 800e970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e974:	ed93 7b00 	vldr	d7, [r3]
 800e978:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e97c:	06f0      	lsls	r0, r6, #27
 800e97e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e982:	d565      	bpl.n	800ea50 <_dtoa_r+0x368>
 800e984:	4b24      	ldr	r3, [pc, #144]	; (800ea18 <_dtoa_r+0x330>)
 800e986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e98a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e98e:	f7f1 ff5d 	bl	800084c <__aeabi_ddiv>
 800e992:	e9cd 0100 	strd	r0, r1, [sp]
 800e996:	f006 060f 	and.w	r6, r6, #15
 800e99a:	2503      	movs	r5, #3
 800e99c:	4f1e      	ldr	r7, [pc, #120]	; (800ea18 <_dtoa_r+0x330>)
 800e99e:	e04c      	b.n	800ea3a <_dtoa_r+0x352>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9a6:	4453      	add	r3, sl
 800e9a8:	f103 0901 	add.w	r9, r3, #1
 800e9ac:	9302      	str	r3, [sp, #8]
 800e9ae:	464b      	mov	r3, r9
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	bfb8      	it	lt
 800e9b4:	2301      	movlt	r3, #1
 800e9b6:	e7ba      	b.n	800e92e <_dtoa_r+0x246>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	e7b2      	b.n	800e922 <_dtoa_r+0x23a>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	e7f0      	b.n	800e9a2 <_dtoa_r+0x2ba>
 800e9c0:	2501      	movs	r5, #1
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	9306      	str	r3, [sp, #24]
 800e9c6:	950a      	str	r5, [sp, #40]	; 0x28
 800e9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9cc:	9302      	str	r3, [sp, #8]
 800e9ce:	4699      	mov	r9, r3
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	2312      	movs	r3, #18
 800e9d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e9d6:	e7aa      	b.n	800e92e <_dtoa_r+0x246>
 800e9d8:	2301      	movs	r3, #1
 800e9da:	930a      	str	r3, [sp, #40]	; 0x28
 800e9dc:	e7f4      	b.n	800e9c8 <_dtoa_r+0x2e0>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	9302      	str	r3, [sp, #8]
 800e9e2:	4699      	mov	r9, r3
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	e7f5      	b.n	800e9d4 <_dtoa_r+0x2ec>
 800e9e8:	3101      	adds	r1, #1
 800e9ea:	6071      	str	r1, [r6, #4]
 800e9ec:	0052      	lsls	r2, r2, #1
 800e9ee:	e7a2      	b.n	800e936 <_dtoa_r+0x24e>
 800e9f0:	636f4361 	.word	0x636f4361
 800e9f4:	3fd287a7 	.word	0x3fd287a7
 800e9f8:	8b60c8b3 	.word	0x8b60c8b3
 800e9fc:	3fc68a28 	.word	0x3fc68a28
 800ea00:	509f79fb 	.word	0x509f79fb
 800ea04:	3fd34413 	.word	0x3fd34413
 800ea08:	7ff00000 	.word	0x7ff00000
 800ea0c:	080113f5 	.word	0x080113f5
 800ea10:	3ff80000 	.word	0x3ff80000
 800ea14:	08011518 	.word	0x08011518
 800ea18:	080114f0 	.word	0x080114f0
 800ea1c:	08011479 	.word	0x08011479
 800ea20:	07f1      	lsls	r1, r6, #31
 800ea22:	d508      	bpl.n	800ea36 <_dtoa_r+0x34e>
 800ea24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea2c:	f7f1 fde4 	bl	80005f8 <__aeabi_dmul>
 800ea30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea34:	3501      	adds	r5, #1
 800ea36:	1076      	asrs	r6, r6, #1
 800ea38:	3708      	adds	r7, #8
 800ea3a:	2e00      	cmp	r6, #0
 800ea3c:	d1f0      	bne.n	800ea20 <_dtoa_r+0x338>
 800ea3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea46:	f7f1 ff01 	bl	800084c <__aeabi_ddiv>
 800ea4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ea4e:	e01a      	b.n	800ea86 <_dtoa_r+0x39e>
 800ea50:	2502      	movs	r5, #2
 800ea52:	e7a3      	b.n	800e99c <_dtoa_r+0x2b4>
 800ea54:	f000 80a0 	beq.w	800eb98 <_dtoa_r+0x4b0>
 800ea58:	f1ca 0600 	rsb	r6, sl, #0
 800ea5c:	4b9f      	ldr	r3, [pc, #636]	; (800ecdc <_dtoa_r+0x5f4>)
 800ea5e:	4fa0      	ldr	r7, [pc, #640]	; (800ece0 <_dtoa_r+0x5f8>)
 800ea60:	f006 020f 	and.w	r2, r6, #15
 800ea64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea70:	f7f1 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ea74:	e9cd 0100 	strd	r0, r1, [sp]
 800ea78:	1136      	asrs	r6, r6, #4
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	2502      	movs	r5, #2
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	d17f      	bne.n	800eb82 <_dtoa_r+0x49a>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1e1      	bne.n	800ea4a <_dtoa_r+0x362>
 800ea86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 8087 	beq.w	800eb9c <_dtoa_r+0x4b4>
 800ea8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ea92:	2200      	movs	r2, #0
 800ea94:	4b93      	ldr	r3, [pc, #588]	; (800ece4 <_dtoa_r+0x5fc>)
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	f7f2 f81f 	bl	8000adc <__aeabi_dcmplt>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d07c      	beq.n	800eb9c <_dtoa_r+0x4b4>
 800eaa2:	f1b9 0f00 	cmp.w	r9, #0
 800eaa6:	d079      	beq.n	800eb9c <_dtoa_r+0x4b4>
 800eaa8:	9b02      	ldr	r3, [sp, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dd35      	ble.n	800eb1a <_dtoa_r+0x432>
 800eaae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eab2:	9308      	str	r3, [sp, #32]
 800eab4:	4639      	mov	r1, r7
 800eab6:	2200      	movs	r2, #0
 800eab8:	4b8b      	ldr	r3, [pc, #556]	; (800ece8 <_dtoa_r+0x600>)
 800eaba:	4630      	mov	r0, r6
 800eabc:	f7f1 fd9c 	bl	80005f8 <__aeabi_dmul>
 800eac0:	e9cd 0100 	strd	r0, r1, [sp]
 800eac4:	9f02      	ldr	r7, [sp, #8]
 800eac6:	3501      	adds	r5, #1
 800eac8:	4628      	mov	r0, r5
 800eaca:	f7f1 fd2b 	bl	8000524 <__aeabi_i2d>
 800eace:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ead2:	f7f1 fd91 	bl	80005f8 <__aeabi_dmul>
 800ead6:	2200      	movs	r2, #0
 800ead8:	4b84      	ldr	r3, [pc, #528]	; (800ecec <_dtoa_r+0x604>)
 800eada:	f7f1 fbd7 	bl	800028c <__adddf3>
 800eade:	4605      	mov	r5, r0
 800eae0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eae4:	2f00      	cmp	r7, #0
 800eae6:	d15d      	bne.n	800eba4 <_dtoa_r+0x4bc>
 800eae8:	2200      	movs	r2, #0
 800eaea:	4b81      	ldr	r3, [pc, #516]	; (800ecf0 <_dtoa_r+0x608>)
 800eaec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaf0:	f7f1 fbca 	bl	8000288 <__aeabi_dsub>
 800eaf4:	462a      	mov	r2, r5
 800eaf6:	4633      	mov	r3, r6
 800eaf8:	e9cd 0100 	strd	r0, r1, [sp]
 800eafc:	f7f2 f80c 	bl	8000b18 <__aeabi_dcmpgt>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	f040 8288 	bne.w	800f016 <_dtoa_r+0x92e>
 800eb06:	462a      	mov	r2, r5
 800eb08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eb0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb10:	f7f1 ffe4 	bl	8000adc <__aeabi_dcmplt>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f040 827c 	bne.w	800f012 <_dtoa_r+0x92a>
 800eb1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb1e:	e9cd 2300 	strd	r2, r3, [sp]
 800eb22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f2c0 8150 	blt.w	800edca <_dtoa_r+0x6e2>
 800eb2a:	f1ba 0f0e 	cmp.w	sl, #14
 800eb2e:	f300 814c 	bgt.w	800edca <_dtoa_r+0x6e2>
 800eb32:	4b6a      	ldr	r3, [pc, #424]	; (800ecdc <_dtoa_r+0x5f4>)
 800eb34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb38:	ed93 7b00 	vldr	d7, [r3]
 800eb3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb44:	f280 80d8 	bge.w	800ecf8 <_dtoa_r+0x610>
 800eb48:	f1b9 0f00 	cmp.w	r9, #0
 800eb4c:	f300 80d4 	bgt.w	800ecf8 <_dtoa_r+0x610>
 800eb50:	f040 825e 	bne.w	800f010 <_dtoa_r+0x928>
 800eb54:	2200      	movs	r2, #0
 800eb56:	4b66      	ldr	r3, [pc, #408]	; (800ecf0 <_dtoa_r+0x608>)
 800eb58:	ec51 0b17 	vmov	r0, r1, d7
 800eb5c:	f7f1 fd4c 	bl	80005f8 <__aeabi_dmul>
 800eb60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb64:	f7f1 ffce 	bl	8000b04 <__aeabi_dcmpge>
 800eb68:	464f      	mov	r7, r9
 800eb6a:	464e      	mov	r6, r9
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	f040 8234 	bne.w	800efda <_dtoa_r+0x8f2>
 800eb72:	2331      	movs	r3, #49	; 0x31
 800eb74:	f10b 0501 	add.w	r5, fp, #1
 800eb78:	f88b 3000 	strb.w	r3, [fp]
 800eb7c:	f10a 0a01 	add.w	sl, sl, #1
 800eb80:	e22f      	b.n	800efe2 <_dtoa_r+0x8fa>
 800eb82:	07f2      	lsls	r2, r6, #31
 800eb84:	d505      	bpl.n	800eb92 <_dtoa_r+0x4aa>
 800eb86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb8a:	f7f1 fd35 	bl	80005f8 <__aeabi_dmul>
 800eb8e:	3501      	adds	r5, #1
 800eb90:	2301      	movs	r3, #1
 800eb92:	1076      	asrs	r6, r6, #1
 800eb94:	3708      	adds	r7, #8
 800eb96:	e772      	b.n	800ea7e <_dtoa_r+0x396>
 800eb98:	2502      	movs	r5, #2
 800eb9a:	e774      	b.n	800ea86 <_dtoa_r+0x39e>
 800eb9c:	f8cd a020 	str.w	sl, [sp, #32]
 800eba0:	464f      	mov	r7, r9
 800eba2:	e791      	b.n	800eac8 <_dtoa_r+0x3e0>
 800eba4:	4b4d      	ldr	r3, [pc, #308]	; (800ecdc <_dtoa_r+0x5f4>)
 800eba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ebaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ebae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d047      	beq.n	800ec44 <_dtoa_r+0x55c>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	2000      	movs	r0, #0
 800ebba:	494e      	ldr	r1, [pc, #312]	; (800ecf4 <_dtoa_r+0x60c>)
 800ebbc:	f7f1 fe46 	bl	800084c <__aeabi_ddiv>
 800ebc0:	462a      	mov	r2, r5
 800ebc2:	4633      	mov	r3, r6
 800ebc4:	f7f1 fb60 	bl	8000288 <__aeabi_dsub>
 800ebc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ebcc:	465d      	mov	r5, fp
 800ebce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebd2:	f7f1 ffc1 	bl	8000b58 <__aeabi_d2iz>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	f7f1 fca4 	bl	8000524 <__aeabi_i2d>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebe4:	f7f1 fb50 	bl	8000288 <__aeabi_dsub>
 800ebe8:	3630      	adds	r6, #48	; 0x30
 800ebea:	f805 6b01 	strb.w	r6, [r5], #1
 800ebee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ebf2:	e9cd 0100 	strd	r0, r1, [sp]
 800ebf6:	f7f1 ff71 	bl	8000adc <__aeabi_dcmplt>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d163      	bne.n	800ecc6 <_dtoa_r+0x5de>
 800ebfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec02:	2000      	movs	r0, #0
 800ec04:	4937      	ldr	r1, [pc, #220]	; (800ece4 <_dtoa_r+0x5fc>)
 800ec06:	f7f1 fb3f 	bl	8000288 <__aeabi_dsub>
 800ec0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec0e:	f7f1 ff65 	bl	8000adc <__aeabi_dcmplt>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	f040 80b7 	bne.w	800ed86 <_dtoa_r+0x69e>
 800ec18:	eba5 030b 	sub.w	r3, r5, fp
 800ec1c:	429f      	cmp	r7, r3
 800ec1e:	f77f af7c 	ble.w	800eb1a <_dtoa_r+0x432>
 800ec22:	2200      	movs	r2, #0
 800ec24:	4b30      	ldr	r3, [pc, #192]	; (800ece8 <_dtoa_r+0x600>)
 800ec26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec2a:	f7f1 fce5 	bl	80005f8 <__aeabi_dmul>
 800ec2e:	2200      	movs	r2, #0
 800ec30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec34:	4b2c      	ldr	r3, [pc, #176]	; (800ece8 <_dtoa_r+0x600>)
 800ec36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec3a:	f7f1 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ec3e:	e9cd 0100 	strd	r0, r1, [sp]
 800ec42:	e7c4      	b.n	800ebce <_dtoa_r+0x4e6>
 800ec44:	462a      	mov	r2, r5
 800ec46:	4633      	mov	r3, r6
 800ec48:	f7f1 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ec4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec50:	eb0b 0507 	add.w	r5, fp, r7
 800ec54:	465e      	mov	r6, fp
 800ec56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec5a:	f7f1 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800ec5e:	4607      	mov	r7, r0
 800ec60:	f7f1 fc60 	bl	8000524 <__aeabi_i2d>
 800ec64:	3730      	adds	r7, #48	; 0x30
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec6e:	f7f1 fb0b 	bl	8000288 <__aeabi_dsub>
 800ec72:	f806 7b01 	strb.w	r7, [r6], #1
 800ec76:	42ae      	cmp	r6, r5
 800ec78:	e9cd 0100 	strd	r0, r1, [sp]
 800ec7c:	f04f 0200 	mov.w	r2, #0
 800ec80:	d126      	bne.n	800ecd0 <_dtoa_r+0x5e8>
 800ec82:	4b1c      	ldr	r3, [pc, #112]	; (800ecf4 <_dtoa_r+0x60c>)
 800ec84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec88:	f7f1 fb00 	bl	800028c <__adddf3>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec94:	f7f1 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d174      	bne.n	800ed86 <_dtoa_r+0x69e>
 800ec9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eca0:	2000      	movs	r0, #0
 800eca2:	4914      	ldr	r1, [pc, #80]	; (800ecf4 <_dtoa_r+0x60c>)
 800eca4:	f7f1 faf0 	bl	8000288 <__aeabi_dsub>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	460b      	mov	r3, r1
 800ecac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecb0:	f7f1 ff14 	bl	8000adc <__aeabi_dcmplt>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	f43f af30 	beq.w	800eb1a <_dtoa_r+0x432>
 800ecba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ecbe:	2b30      	cmp	r3, #48	; 0x30
 800ecc0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ecc4:	d002      	beq.n	800eccc <_dtoa_r+0x5e4>
 800ecc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ecca:	e04a      	b.n	800ed62 <_dtoa_r+0x67a>
 800eccc:	4615      	mov	r5, r2
 800ecce:	e7f4      	b.n	800ecba <_dtoa_r+0x5d2>
 800ecd0:	4b05      	ldr	r3, [pc, #20]	; (800ece8 <_dtoa_r+0x600>)
 800ecd2:	f7f1 fc91 	bl	80005f8 <__aeabi_dmul>
 800ecd6:	e9cd 0100 	strd	r0, r1, [sp]
 800ecda:	e7bc      	b.n	800ec56 <_dtoa_r+0x56e>
 800ecdc:	08011518 	.word	0x08011518
 800ece0:	080114f0 	.word	0x080114f0
 800ece4:	3ff00000 	.word	0x3ff00000
 800ece8:	40240000 	.word	0x40240000
 800ecec:	401c0000 	.word	0x401c0000
 800ecf0:	40140000 	.word	0x40140000
 800ecf4:	3fe00000 	.word	0x3fe00000
 800ecf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ecfc:	465d      	mov	r5, fp
 800ecfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed02:	4630      	mov	r0, r6
 800ed04:	4639      	mov	r1, r7
 800ed06:	f7f1 fda1 	bl	800084c <__aeabi_ddiv>
 800ed0a:	f7f1 ff25 	bl	8000b58 <__aeabi_d2iz>
 800ed0e:	4680      	mov	r8, r0
 800ed10:	f7f1 fc08 	bl	8000524 <__aeabi_i2d>
 800ed14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed18:	f7f1 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	4630      	mov	r0, r6
 800ed22:	4639      	mov	r1, r7
 800ed24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ed28:	f7f1 faae 	bl	8000288 <__aeabi_dsub>
 800ed2c:	f805 6b01 	strb.w	r6, [r5], #1
 800ed30:	eba5 060b 	sub.w	r6, r5, fp
 800ed34:	45b1      	cmp	r9, r6
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	d139      	bne.n	800edb0 <_dtoa_r+0x6c8>
 800ed3c:	f7f1 faa6 	bl	800028c <__adddf3>
 800ed40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed44:	4606      	mov	r6, r0
 800ed46:	460f      	mov	r7, r1
 800ed48:	f7f1 fee6 	bl	8000b18 <__aeabi_dcmpgt>
 800ed4c:	b9c8      	cbnz	r0, 800ed82 <_dtoa_r+0x69a>
 800ed4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed52:	4630      	mov	r0, r6
 800ed54:	4639      	mov	r1, r7
 800ed56:	f7f1 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed5a:	b110      	cbz	r0, 800ed62 <_dtoa_r+0x67a>
 800ed5c:	f018 0f01 	tst.w	r8, #1
 800ed60:	d10f      	bne.n	800ed82 <_dtoa_r+0x69a>
 800ed62:	9904      	ldr	r1, [sp, #16]
 800ed64:	4620      	mov	r0, r4
 800ed66:	f000 ffdd 	bl	800fd24 <_Bfree>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed6e:	702b      	strb	r3, [r5, #0]
 800ed70:	f10a 0301 	add.w	r3, sl, #1
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 8241 	beq.w	800f200 <_dtoa_r+0xb18>
 800ed7e:	601d      	str	r5, [r3, #0]
 800ed80:	e23e      	b.n	800f200 <_dtoa_r+0xb18>
 800ed82:	f8cd a020 	str.w	sl, [sp, #32]
 800ed86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed8a:	2a39      	cmp	r2, #57	; 0x39
 800ed8c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ed90:	d108      	bne.n	800eda4 <_dtoa_r+0x6bc>
 800ed92:	459b      	cmp	fp, r3
 800ed94:	d10a      	bne.n	800edac <_dtoa_r+0x6c4>
 800ed96:	9b08      	ldr	r3, [sp, #32]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	9308      	str	r3, [sp, #32]
 800ed9c:	2330      	movs	r3, #48	; 0x30
 800ed9e:	f88b 3000 	strb.w	r3, [fp]
 800eda2:	465b      	mov	r3, fp
 800eda4:	781a      	ldrb	r2, [r3, #0]
 800eda6:	3201      	adds	r2, #1
 800eda8:	701a      	strb	r2, [r3, #0]
 800edaa:	e78c      	b.n	800ecc6 <_dtoa_r+0x5de>
 800edac:	461d      	mov	r5, r3
 800edae:	e7ea      	b.n	800ed86 <_dtoa_r+0x69e>
 800edb0:	2200      	movs	r2, #0
 800edb2:	4b9b      	ldr	r3, [pc, #620]	; (800f020 <_dtoa_r+0x938>)
 800edb4:	f7f1 fc20 	bl	80005f8 <__aeabi_dmul>
 800edb8:	2200      	movs	r2, #0
 800edba:	2300      	movs	r3, #0
 800edbc:	4606      	mov	r6, r0
 800edbe:	460f      	mov	r7, r1
 800edc0:	f7f1 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d09a      	beq.n	800ecfe <_dtoa_r+0x616>
 800edc8:	e7cb      	b.n	800ed62 <_dtoa_r+0x67a>
 800edca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edcc:	2a00      	cmp	r2, #0
 800edce:	f000 808b 	beq.w	800eee8 <_dtoa_r+0x800>
 800edd2:	9a06      	ldr	r2, [sp, #24]
 800edd4:	2a01      	cmp	r2, #1
 800edd6:	dc6e      	bgt.n	800eeb6 <_dtoa_r+0x7ce>
 800edd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800edda:	2a00      	cmp	r2, #0
 800eddc:	d067      	beq.n	800eeae <_dtoa_r+0x7c6>
 800edde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ede2:	9f07      	ldr	r7, [sp, #28]
 800ede4:	9d05      	ldr	r5, [sp, #20]
 800ede6:	9a05      	ldr	r2, [sp, #20]
 800ede8:	2101      	movs	r1, #1
 800edea:	441a      	add	r2, r3
 800edec:	4620      	mov	r0, r4
 800edee:	9205      	str	r2, [sp, #20]
 800edf0:	4498      	add	r8, r3
 800edf2:	f001 f875 	bl	800fee0 <__i2b>
 800edf6:	4606      	mov	r6, r0
 800edf8:	2d00      	cmp	r5, #0
 800edfa:	dd0c      	ble.n	800ee16 <_dtoa_r+0x72e>
 800edfc:	f1b8 0f00 	cmp.w	r8, #0
 800ee00:	dd09      	ble.n	800ee16 <_dtoa_r+0x72e>
 800ee02:	4545      	cmp	r5, r8
 800ee04:	9a05      	ldr	r2, [sp, #20]
 800ee06:	462b      	mov	r3, r5
 800ee08:	bfa8      	it	ge
 800ee0a:	4643      	movge	r3, r8
 800ee0c:	1ad2      	subs	r2, r2, r3
 800ee0e:	9205      	str	r2, [sp, #20]
 800ee10:	1aed      	subs	r5, r5, r3
 800ee12:	eba8 0803 	sub.w	r8, r8, r3
 800ee16:	9b07      	ldr	r3, [sp, #28]
 800ee18:	b1eb      	cbz	r3, 800ee56 <_dtoa_r+0x76e>
 800ee1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d067      	beq.n	800eef0 <_dtoa_r+0x808>
 800ee20:	b18f      	cbz	r7, 800ee46 <_dtoa_r+0x75e>
 800ee22:	4631      	mov	r1, r6
 800ee24:	463a      	mov	r2, r7
 800ee26:	4620      	mov	r0, r4
 800ee28:	f001 f8fa 	bl	8010020 <__pow5mult>
 800ee2c:	9a04      	ldr	r2, [sp, #16]
 800ee2e:	4601      	mov	r1, r0
 800ee30:	4606      	mov	r6, r0
 800ee32:	4620      	mov	r0, r4
 800ee34:	f001 f85d 	bl	800fef2 <__multiply>
 800ee38:	9904      	ldr	r1, [sp, #16]
 800ee3a:	9008      	str	r0, [sp, #32]
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f000 ff71 	bl	800fd24 <_Bfree>
 800ee42:	9b08      	ldr	r3, [sp, #32]
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	9b07      	ldr	r3, [sp, #28]
 800ee48:	1bda      	subs	r2, r3, r7
 800ee4a:	d004      	beq.n	800ee56 <_dtoa_r+0x76e>
 800ee4c:	9904      	ldr	r1, [sp, #16]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f001 f8e6 	bl	8010020 <__pow5mult>
 800ee54:	9004      	str	r0, [sp, #16]
 800ee56:	2101      	movs	r1, #1
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f001 f841 	bl	800fee0 <__i2b>
 800ee5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee60:	4607      	mov	r7, r0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 81d0 	beq.w	800f208 <_dtoa_r+0xb20>
 800ee68:	461a      	mov	r2, r3
 800ee6a:	4601      	mov	r1, r0
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f001 f8d7 	bl	8010020 <__pow5mult>
 800ee72:	9b06      	ldr	r3, [sp, #24]
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	4607      	mov	r7, r0
 800ee78:	dc40      	bgt.n	800eefc <_dtoa_r+0x814>
 800ee7a:	9b00      	ldr	r3, [sp, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d139      	bne.n	800eef4 <_dtoa_r+0x80c>
 800ee80:	9b01      	ldr	r3, [sp, #4]
 800ee82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d136      	bne.n	800eef8 <_dtoa_r+0x810>
 800ee8a:	9b01      	ldr	r3, [sp, #4]
 800ee8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee90:	0d1b      	lsrs	r3, r3, #20
 800ee92:	051b      	lsls	r3, r3, #20
 800ee94:	b12b      	cbz	r3, 800eea2 <_dtoa_r+0x7ba>
 800ee96:	9b05      	ldr	r3, [sp, #20]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	9305      	str	r3, [sp, #20]
 800ee9c:	f108 0801 	add.w	r8, r8, #1
 800eea0:	2301      	movs	r3, #1
 800eea2:	9307      	str	r3, [sp, #28]
 800eea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d12a      	bne.n	800ef00 <_dtoa_r+0x818>
 800eeaa:	2001      	movs	r0, #1
 800eeac:	e030      	b.n	800ef10 <_dtoa_r+0x828>
 800eeae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eeb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eeb4:	e795      	b.n	800ede2 <_dtoa_r+0x6fa>
 800eeb6:	9b07      	ldr	r3, [sp, #28]
 800eeb8:	f109 37ff 	add.w	r7, r9, #4294967295
 800eebc:	42bb      	cmp	r3, r7
 800eebe:	bfbf      	itttt	lt
 800eec0:	9b07      	ldrlt	r3, [sp, #28]
 800eec2:	9707      	strlt	r7, [sp, #28]
 800eec4:	1afa      	sublt	r2, r7, r3
 800eec6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eec8:	bfbb      	ittet	lt
 800eeca:	189b      	addlt	r3, r3, r2
 800eecc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eece:	1bdf      	subge	r7, r3, r7
 800eed0:	2700      	movlt	r7, #0
 800eed2:	f1b9 0f00 	cmp.w	r9, #0
 800eed6:	bfb5      	itete	lt
 800eed8:	9b05      	ldrlt	r3, [sp, #20]
 800eeda:	9d05      	ldrge	r5, [sp, #20]
 800eedc:	eba3 0509 	sublt.w	r5, r3, r9
 800eee0:	464b      	movge	r3, r9
 800eee2:	bfb8      	it	lt
 800eee4:	2300      	movlt	r3, #0
 800eee6:	e77e      	b.n	800ede6 <_dtoa_r+0x6fe>
 800eee8:	9f07      	ldr	r7, [sp, #28]
 800eeea:	9d05      	ldr	r5, [sp, #20]
 800eeec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800eeee:	e783      	b.n	800edf8 <_dtoa_r+0x710>
 800eef0:	9a07      	ldr	r2, [sp, #28]
 800eef2:	e7ab      	b.n	800ee4c <_dtoa_r+0x764>
 800eef4:	2300      	movs	r3, #0
 800eef6:	e7d4      	b.n	800eea2 <_dtoa_r+0x7ba>
 800eef8:	9b00      	ldr	r3, [sp, #0]
 800eefa:	e7d2      	b.n	800eea2 <_dtoa_r+0x7ba>
 800eefc:	2300      	movs	r3, #0
 800eefe:	9307      	str	r3, [sp, #28]
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ef06:	6918      	ldr	r0, [r3, #16]
 800ef08:	f000 ff9c 	bl	800fe44 <__hi0bits>
 800ef0c:	f1c0 0020 	rsb	r0, r0, #32
 800ef10:	4440      	add	r0, r8
 800ef12:	f010 001f 	ands.w	r0, r0, #31
 800ef16:	d047      	beq.n	800efa8 <_dtoa_r+0x8c0>
 800ef18:	f1c0 0320 	rsb	r3, r0, #32
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	dd3b      	ble.n	800ef98 <_dtoa_r+0x8b0>
 800ef20:	9b05      	ldr	r3, [sp, #20]
 800ef22:	f1c0 001c 	rsb	r0, r0, #28
 800ef26:	4403      	add	r3, r0
 800ef28:	9305      	str	r3, [sp, #20]
 800ef2a:	4405      	add	r5, r0
 800ef2c:	4480      	add	r8, r0
 800ef2e:	9b05      	ldr	r3, [sp, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dd05      	ble.n	800ef40 <_dtoa_r+0x858>
 800ef34:	461a      	mov	r2, r3
 800ef36:	9904      	ldr	r1, [sp, #16]
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f001 f8bf 	bl	80100bc <__lshift>
 800ef3e:	9004      	str	r0, [sp, #16]
 800ef40:	f1b8 0f00 	cmp.w	r8, #0
 800ef44:	dd05      	ble.n	800ef52 <_dtoa_r+0x86a>
 800ef46:	4639      	mov	r1, r7
 800ef48:	4642      	mov	r2, r8
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f001 f8b6 	bl	80100bc <__lshift>
 800ef50:	4607      	mov	r7, r0
 800ef52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef54:	b353      	cbz	r3, 800efac <_dtoa_r+0x8c4>
 800ef56:	4639      	mov	r1, r7
 800ef58:	9804      	ldr	r0, [sp, #16]
 800ef5a:	f001 f903 	bl	8010164 <__mcmp>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	da24      	bge.n	800efac <_dtoa_r+0x8c4>
 800ef62:	2300      	movs	r3, #0
 800ef64:	220a      	movs	r2, #10
 800ef66:	9904      	ldr	r1, [sp, #16]
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f000 fef2 	bl	800fd52 <__multadd>
 800ef6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef70:	9004      	str	r0, [sp, #16]
 800ef72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f000 814d 	beq.w	800f216 <_dtoa_r+0xb2e>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4631      	mov	r1, r6
 800ef80:	220a      	movs	r2, #10
 800ef82:	4620      	mov	r0, r4
 800ef84:	f000 fee5 	bl	800fd52 <__multadd>
 800ef88:	9b02      	ldr	r3, [sp, #8]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	dc4f      	bgt.n	800f030 <_dtoa_r+0x948>
 800ef90:	9b06      	ldr	r3, [sp, #24]
 800ef92:	2b02      	cmp	r3, #2
 800ef94:	dd4c      	ble.n	800f030 <_dtoa_r+0x948>
 800ef96:	e011      	b.n	800efbc <_dtoa_r+0x8d4>
 800ef98:	d0c9      	beq.n	800ef2e <_dtoa_r+0x846>
 800ef9a:	9a05      	ldr	r2, [sp, #20]
 800ef9c:	331c      	adds	r3, #28
 800ef9e:	441a      	add	r2, r3
 800efa0:	9205      	str	r2, [sp, #20]
 800efa2:	441d      	add	r5, r3
 800efa4:	4498      	add	r8, r3
 800efa6:	e7c2      	b.n	800ef2e <_dtoa_r+0x846>
 800efa8:	4603      	mov	r3, r0
 800efaa:	e7f6      	b.n	800ef9a <_dtoa_r+0x8b2>
 800efac:	f1b9 0f00 	cmp.w	r9, #0
 800efb0:	dc38      	bgt.n	800f024 <_dtoa_r+0x93c>
 800efb2:	9b06      	ldr	r3, [sp, #24]
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	dd35      	ble.n	800f024 <_dtoa_r+0x93c>
 800efb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800efbc:	9b02      	ldr	r3, [sp, #8]
 800efbe:	b963      	cbnz	r3, 800efda <_dtoa_r+0x8f2>
 800efc0:	4639      	mov	r1, r7
 800efc2:	2205      	movs	r2, #5
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 fec4 	bl	800fd52 <__multadd>
 800efca:	4601      	mov	r1, r0
 800efcc:	4607      	mov	r7, r0
 800efce:	9804      	ldr	r0, [sp, #16]
 800efd0:	f001 f8c8 	bl	8010164 <__mcmp>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	f73f adcc 	bgt.w	800eb72 <_dtoa_r+0x48a>
 800efda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efdc:	465d      	mov	r5, fp
 800efde:	ea6f 0a03 	mvn.w	sl, r3
 800efe2:	f04f 0900 	mov.w	r9, #0
 800efe6:	4639      	mov	r1, r7
 800efe8:	4620      	mov	r0, r4
 800efea:	f000 fe9b 	bl	800fd24 <_Bfree>
 800efee:	2e00      	cmp	r6, #0
 800eff0:	f43f aeb7 	beq.w	800ed62 <_dtoa_r+0x67a>
 800eff4:	f1b9 0f00 	cmp.w	r9, #0
 800eff8:	d005      	beq.n	800f006 <_dtoa_r+0x91e>
 800effa:	45b1      	cmp	r9, r6
 800effc:	d003      	beq.n	800f006 <_dtoa_r+0x91e>
 800effe:	4649      	mov	r1, r9
 800f000:	4620      	mov	r0, r4
 800f002:	f000 fe8f 	bl	800fd24 <_Bfree>
 800f006:	4631      	mov	r1, r6
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 fe8b 	bl	800fd24 <_Bfree>
 800f00e:	e6a8      	b.n	800ed62 <_dtoa_r+0x67a>
 800f010:	2700      	movs	r7, #0
 800f012:	463e      	mov	r6, r7
 800f014:	e7e1      	b.n	800efda <_dtoa_r+0x8f2>
 800f016:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f01a:	463e      	mov	r6, r7
 800f01c:	e5a9      	b.n	800eb72 <_dtoa_r+0x48a>
 800f01e:	bf00      	nop
 800f020:	40240000 	.word	0x40240000
 800f024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f026:	f8cd 9008 	str.w	r9, [sp, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f000 80fa 	beq.w	800f224 <_dtoa_r+0xb3c>
 800f030:	2d00      	cmp	r5, #0
 800f032:	dd05      	ble.n	800f040 <_dtoa_r+0x958>
 800f034:	4631      	mov	r1, r6
 800f036:	462a      	mov	r2, r5
 800f038:	4620      	mov	r0, r4
 800f03a:	f001 f83f 	bl	80100bc <__lshift>
 800f03e:	4606      	mov	r6, r0
 800f040:	9b07      	ldr	r3, [sp, #28]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d04c      	beq.n	800f0e0 <_dtoa_r+0x9f8>
 800f046:	6871      	ldr	r1, [r6, #4]
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 fe37 	bl	800fcbc <_Balloc>
 800f04e:	6932      	ldr	r2, [r6, #16]
 800f050:	3202      	adds	r2, #2
 800f052:	4605      	mov	r5, r0
 800f054:	0092      	lsls	r2, r2, #2
 800f056:	f106 010c 	add.w	r1, r6, #12
 800f05a:	300c      	adds	r0, #12
 800f05c:	f7fd fc52 	bl	800c904 <memcpy>
 800f060:	2201      	movs	r2, #1
 800f062:	4629      	mov	r1, r5
 800f064:	4620      	mov	r0, r4
 800f066:	f001 f829 	bl	80100bc <__lshift>
 800f06a:	9b00      	ldr	r3, [sp, #0]
 800f06c:	f8cd b014 	str.w	fp, [sp, #20]
 800f070:	f003 0301 	and.w	r3, r3, #1
 800f074:	46b1      	mov	r9, r6
 800f076:	9307      	str	r3, [sp, #28]
 800f078:	4606      	mov	r6, r0
 800f07a:	4639      	mov	r1, r7
 800f07c:	9804      	ldr	r0, [sp, #16]
 800f07e:	f7ff faa5 	bl	800e5cc <quorem>
 800f082:	4649      	mov	r1, r9
 800f084:	4605      	mov	r5, r0
 800f086:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f08a:	9804      	ldr	r0, [sp, #16]
 800f08c:	f001 f86a 	bl	8010164 <__mcmp>
 800f090:	4632      	mov	r2, r6
 800f092:	9000      	str	r0, [sp, #0]
 800f094:	4639      	mov	r1, r7
 800f096:	4620      	mov	r0, r4
 800f098:	f001 f87e 	bl	8010198 <__mdiff>
 800f09c:	68c3      	ldr	r3, [r0, #12]
 800f09e:	4602      	mov	r2, r0
 800f0a0:	bb03      	cbnz	r3, 800f0e4 <_dtoa_r+0x9fc>
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	9008      	str	r0, [sp, #32]
 800f0a6:	9804      	ldr	r0, [sp, #16]
 800f0a8:	f001 f85c 	bl	8010164 <__mcmp>
 800f0ac:	9a08      	ldr	r2, [sp, #32]
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	9308      	str	r3, [sp, #32]
 800f0b6:	f000 fe35 	bl	800fd24 <_Bfree>
 800f0ba:	9b08      	ldr	r3, [sp, #32]
 800f0bc:	b9a3      	cbnz	r3, 800f0e8 <_dtoa_r+0xa00>
 800f0be:	9a06      	ldr	r2, [sp, #24]
 800f0c0:	b992      	cbnz	r2, 800f0e8 <_dtoa_r+0xa00>
 800f0c2:	9a07      	ldr	r2, [sp, #28]
 800f0c4:	b982      	cbnz	r2, 800f0e8 <_dtoa_r+0xa00>
 800f0c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f0ca:	d029      	beq.n	800f120 <_dtoa_r+0xa38>
 800f0cc:	9b00      	ldr	r3, [sp, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	dd01      	ble.n	800f0d6 <_dtoa_r+0x9ee>
 800f0d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f0d6:	9b05      	ldr	r3, [sp, #20]
 800f0d8:	1c5d      	adds	r5, r3, #1
 800f0da:	f883 8000 	strb.w	r8, [r3]
 800f0de:	e782      	b.n	800efe6 <_dtoa_r+0x8fe>
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	e7c2      	b.n	800f06a <_dtoa_r+0x982>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e7e3      	b.n	800f0b0 <_dtoa_r+0x9c8>
 800f0e8:	9a00      	ldr	r2, [sp, #0]
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	db04      	blt.n	800f0f8 <_dtoa_r+0xa10>
 800f0ee:	d125      	bne.n	800f13c <_dtoa_r+0xa54>
 800f0f0:	9a06      	ldr	r2, [sp, #24]
 800f0f2:	bb1a      	cbnz	r2, 800f13c <_dtoa_r+0xa54>
 800f0f4:	9a07      	ldr	r2, [sp, #28]
 800f0f6:	bb0a      	cbnz	r2, 800f13c <_dtoa_r+0xa54>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	ddec      	ble.n	800f0d6 <_dtoa_r+0x9ee>
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	9904      	ldr	r1, [sp, #16]
 800f100:	4620      	mov	r0, r4
 800f102:	f000 ffdb 	bl	80100bc <__lshift>
 800f106:	4639      	mov	r1, r7
 800f108:	9004      	str	r0, [sp, #16]
 800f10a:	f001 f82b 	bl	8010164 <__mcmp>
 800f10e:	2800      	cmp	r0, #0
 800f110:	dc03      	bgt.n	800f11a <_dtoa_r+0xa32>
 800f112:	d1e0      	bne.n	800f0d6 <_dtoa_r+0x9ee>
 800f114:	f018 0f01 	tst.w	r8, #1
 800f118:	d0dd      	beq.n	800f0d6 <_dtoa_r+0x9ee>
 800f11a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f11e:	d1d8      	bne.n	800f0d2 <_dtoa_r+0x9ea>
 800f120:	9b05      	ldr	r3, [sp, #20]
 800f122:	9a05      	ldr	r2, [sp, #20]
 800f124:	1c5d      	adds	r5, r3, #1
 800f126:	2339      	movs	r3, #57	; 0x39
 800f128:	7013      	strb	r3, [r2, #0]
 800f12a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f12e:	2b39      	cmp	r3, #57	; 0x39
 800f130:	f105 32ff 	add.w	r2, r5, #4294967295
 800f134:	d04f      	beq.n	800f1d6 <_dtoa_r+0xaee>
 800f136:	3301      	adds	r3, #1
 800f138:	7013      	strb	r3, [r2, #0]
 800f13a:	e754      	b.n	800efe6 <_dtoa_r+0x8fe>
 800f13c:	9a05      	ldr	r2, [sp, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f102 0501 	add.w	r5, r2, #1
 800f144:	dd06      	ble.n	800f154 <_dtoa_r+0xa6c>
 800f146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f14a:	d0e9      	beq.n	800f120 <_dtoa_r+0xa38>
 800f14c:	f108 0801 	add.w	r8, r8, #1
 800f150:	9b05      	ldr	r3, [sp, #20]
 800f152:	e7c2      	b.n	800f0da <_dtoa_r+0x9f2>
 800f154:	9a02      	ldr	r2, [sp, #8]
 800f156:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f15a:	eba5 030b 	sub.w	r3, r5, fp
 800f15e:	4293      	cmp	r3, r2
 800f160:	d021      	beq.n	800f1a6 <_dtoa_r+0xabe>
 800f162:	2300      	movs	r3, #0
 800f164:	220a      	movs	r2, #10
 800f166:	9904      	ldr	r1, [sp, #16]
 800f168:	4620      	mov	r0, r4
 800f16a:	f000 fdf2 	bl	800fd52 <__multadd>
 800f16e:	45b1      	cmp	r9, r6
 800f170:	9004      	str	r0, [sp, #16]
 800f172:	f04f 0300 	mov.w	r3, #0
 800f176:	f04f 020a 	mov.w	r2, #10
 800f17a:	4649      	mov	r1, r9
 800f17c:	4620      	mov	r0, r4
 800f17e:	d105      	bne.n	800f18c <_dtoa_r+0xaa4>
 800f180:	f000 fde7 	bl	800fd52 <__multadd>
 800f184:	4681      	mov	r9, r0
 800f186:	4606      	mov	r6, r0
 800f188:	9505      	str	r5, [sp, #20]
 800f18a:	e776      	b.n	800f07a <_dtoa_r+0x992>
 800f18c:	f000 fde1 	bl	800fd52 <__multadd>
 800f190:	4631      	mov	r1, r6
 800f192:	4681      	mov	r9, r0
 800f194:	2300      	movs	r3, #0
 800f196:	220a      	movs	r2, #10
 800f198:	4620      	mov	r0, r4
 800f19a:	f000 fdda 	bl	800fd52 <__multadd>
 800f19e:	4606      	mov	r6, r0
 800f1a0:	e7f2      	b.n	800f188 <_dtoa_r+0xaa0>
 800f1a2:	f04f 0900 	mov.w	r9, #0
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	9904      	ldr	r1, [sp, #16]
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	f000 ff86 	bl	80100bc <__lshift>
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	9004      	str	r0, [sp, #16]
 800f1b4:	f000 ffd6 	bl	8010164 <__mcmp>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	dcb6      	bgt.n	800f12a <_dtoa_r+0xa42>
 800f1bc:	d102      	bne.n	800f1c4 <_dtoa_r+0xadc>
 800f1be:	f018 0f01 	tst.w	r8, #1
 800f1c2:	d1b2      	bne.n	800f12a <_dtoa_r+0xa42>
 800f1c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f1c8:	2b30      	cmp	r3, #48	; 0x30
 800f1ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800f1ce:	f47f af0a 	bne.w	800efe6 <_dtoa_r+0x8fe>
 800f1d2:	4615      	mov	r5, r2
 800f1d4:	e7f6      	b.n	800f1c4 <_dtoa_r+0xadc>
 800f1d6:	4593      	cmp	fp, r2
 800f1d8:	d105      	bne.n	800f1e6 <_dtoa_r+0xafe>
 800f1da:	2331      	movs	r3, #49	; 0x31
 800f1dc:	f10a 0a01 	add.w	sl, sl, #1
 800f1e0:	f88b 3000 	strb.w	r3, [fp]
 800f1e4:	e6ff      	b.n	800efe6 <_dtoa_r+0x8fe>
 800f1e6:	4615      	mov	r5, r2
 800f1e8:	e79f      	b.n	800f12a <_dtoa_r+0xa42>
 800f1ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f250 <_dtoa_r+0xb68>
 800f1ee:	e007      	b.n	800f200 <_dtoa_r+0xb18>
 800f1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f254 <_dtoa_r+0xb6c>
 800f1f6:	b11b      	cbz	r3, 800f200 <_dtoa_r+0xb18>
 800f1f8:	f10b 0308 	add.w	r3, fp, #8
 800f1fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	4658      	mov	r0, fp
 800f202:	b017      	add	sp, #92	; 0x5c
 800f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f208:	9b06      	ldr	r3, [sp, #24]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	f77f ae35 	ble.w	800ee7a <_dtoa_r+0x792>
 800f210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f212:	9307      	str	r3, [sp, #28]
 800f214:	e649      	b.n	800eeaa <_dtoa_r+0x7c2>
 800f216:	9b02      	ldr	r3, [sp, #8]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	dc03      	bgt.n	800f224 <_dtoa_r+0xb3c>
 800f21c:	9b06      	ldr	r3, [sp, #24]
 800f21e:	2b02      	cmp	r3, #2
 800f220:	f73f aecc 	bgt.w	800efbc <_dtoa_r+0x8d4>
 800f224:	465d      	mov	r5, fp
 800f226:	4639      	mov	r1, r7
 800f228:	9804      	ldr	r0, [sp, #16]
 800f22a:	f7ff f9cf 	bl	800e5cc <quorem>
 800f22e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f232:	f805 8b01 	strb.w	r8, [r5], #1
 800f236:	9a02      	ldr	r2, [sp, #8]
 800f238:	eba5 030b 	sub.w	r3, r5, fp
 800f23c:	429a      	cmp	r2, r3
 800f23e:	ddb0      	ble.n	800f1a2 <_dtoa_r+0xaba>
 800f240:	2300      	movs	r3, #0
 800f242:	220a      	movs	r2, #10
 800f244:	9904      	ldr	r1, [sp, #16]
 800f246:	4620      	mov	r0, r4
 800f248:	f000 fd83 	bl	800fd52 <__multadd>
 800f24c:	9004      	str	r0, [sp, #16]
 800f24e:	e7ea      	b.n	800f226 <_dtoa_r+0xb3e>
 800f250:	080113f4 	.word	0x080113f4
 800f254:	08011470 	.word	0x08011470

0800f258 <__sflush_r>:
 800f258:	898a      	ldrh	r2, [r1, #12]
 800f25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f25e:	4605      	mov	r5, r0
 800f260:	0710      	lsls	r0, r2, #28
 800f262:	460c      	mov	r4, r1
 800f264:	d458      	bmi.n	800f318 <__sflush_r+0xc0>
 800f266:	684b      	ldr	r3, [r1, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	dc05      	bgt.n	800f278 <__sflush_r+0x20>
 800f26c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f26e:	2b00      	cmp	r3, #0
 800f270:	dc02      	bgt.n	800f278 <__sflush_r+0x20>
 800f272:	2000      	movs	r0, #0
 800f274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f27a:	2e00      	cmp	r6, #0
 800f27c:	d0f9      	beq.n	800f272 <__sflush_r+0x1a>
 800f27e:	2300      	movs	r3, #0
 800f280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f284:	682f      	ldr	r7, [r5, #0]
 800f286:	6a21      	ldr	r1, [r4, #32]
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	d032      	beq.n	800f2f2 <__sflush_r+0x9a>
 800f28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	075a      	lsls	r2, r3, #29
 800f292:	d505      	bpl.n	800f2a0 <__sflush_r+0x48>
 800f294:	6863      	ldr	r3, [r4, #4]
 800f296:	1ac0      	subs	r0, r0, r3
 800f298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f29a:	b10b      	cbz	r3, 800f2a0 <__sflush_r+0x48>
 800f29c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f29e:	1ac0      	subs	r0, r0, r3
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a6:	6a21      	ldr	r1, [r4, #32]
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	47b0      	blx	r6
 800f2ac:	1c43      	adds	r3, r0, #1
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	d106      	bne.n	800f2c0 <__sflush_r+0x68>
 800f2b2:	6829      	ldr	r1, [r5, #0]
 800f2b4:	291d      	cmp	r1, #29
 800f2b6:	d848      	bhi.n	800f34a <__sflush_r+0xf2>
 800f2b8:	4a29      	ldr	r2, [pc, #164]	; (800f360 <__sflush_r+0x108>)
 800f2ba:	40ca      	lsrs	r2, r1
 800f2bc:	07d6      	lsls	r6, r2, #31
 800f2be:	d544      	bpl.n	800f34a <__sflush_r+0xf2>
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	6062      	str	r2, [r4, #4]
 800f2c4:	04d9      	lsls	r1, r3, #19
 800f2c6:	6922      	ldr	r2, [r4, #16]
 800f2c8:	6022      	str	r2, [r4, #0]
 800f2ca:	d504      	bpl.n	800f2d6 <__sflush_r+0x7e>
 800f2cc:	1c42      	adds	r2, r0, #1
 800f2ce:	d101      	bne.n	800f2d4 <__sflush_r+0x7c>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b903      	cbnz	r3, 800f2d6 <__sflush_r+0x7e>
 800f2d4:	6560      	str	r0, [r4, #84]	; 0x54
 800f2d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2d8:	602f      	str	r7, [r5, #0]
 800f2da:	2900      	cmp	r1, #0
 800f2dc:	d0c9      	beq.n	800f272 <__sflush_r+0x1a>
 800f2de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2e2:	4299      	cmp	r1, r3
 800f2e4:	d002      	beq.n	800f2ec <__sflush_r+0x94>
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	f001 f8f6 	bl	80104d8 <_free_r>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	6360      	str	r0, [r4, #52]	; 0x34
 800f2f0:	e7c0      	b.n	800f274 <__sflush_r+0x1c>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	47b0      	blx	r6
 800f2f8:	1c41      	adds	r1, r0, #1
 800f2fa:	d1c8      	bne.n	800f28e <__sflush_r+0x36>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d0c5      	beq.n	800f28e <__sflush_r+0x36>
 800f302:	2b1d      	cmp	r3, #29
 800f304:	d001      	beq.n	800f30a <__sflush_r+0xb2>
 800f306:	2b16      	cmp	r3, #22
 800f308:	d101      	bne.n	800f30e <__sflush_r+0xb6>
 800f30a:	602f      	str	r7, [r5, #0]
 800f30c:	e7b1      	b.n	800f272 <__sflush_r+0x1a>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	e7ad      	b.n	800f274 <__sflush_r+0x1c>
 800f318:	690f      	ldr	r7, [r1, #16]
 800f31a:	2f00      	cmp	r7, #0
 800f31c:	d0a9      	beq.n	800f272 <__sflush_r+0x1a>
 800f31e:	0793      	lsls	r3, r2, #30
 800f320:	680e      	ldr	r6, [r1, #0]
 800f322:	bf08      	it	eq
 800f324:	694b      	ldreq	r3, [r1, #20]
 800f326:	600f      	str	r7, [r1, #0]
 800f328:	bf18      	it	ne
 800f32a:	2300      	movne	r3, #0
 800f32c:	eba6 0807 	sub.w	r8, r6, r7
 800f330:	608b      	str	r3, [r1, #8]
 800f332:	f1b8 0f00 	cmp.w	r8, #0
 800f336:	dd9c      	ble.n	800f272 <__sflush_r+0x1a>
 800f338:	4643      	mov	r3, r8
 800f33a:	463a      	mov	r2, r7
 800f33c:	6a21      	ldr	r1, [r4, #32]
 800f33e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f340:	4628      	mov	r0, r5
 800f342:	47b0      	blx	r6
 800f344:	2800      	cmp	r0, #0
 800f346:	dc06      	bgt.n	800f356 <__sflush_r+0xfe>
 800f348:	89a3      	ldrh	r3, [r4, #12]
 800f34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f34e:	81a3      	strh	r3, [r4, #12]
 800f350:	f04f 30ff 	mov.w	r0, #4294967295
 800f354:	e78e      	b.n	800f274 <__sflush_r+0x1c>
 800f356:	4407      	add	r7, r0
 800f358:	eba8 0800 	sub.w	r8, r8, r0
 800f35c:	e7e9      	b.n	800f332 <__sflush_r+0xda>
 800f35e:	bf00      	nop
 800f360:	20400001 	.word	0x20400001

0800f364 <_fflush_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	690b      	ldr	r3, [r1, #16]
 800f368:	4605      	mov	r5, r0
 800f36a:	460c      	mov	r4, r1
 800f36c:	b1db      	cbz	r3, 800f3a6 <_fflush_r+0x42>
 800f36e:	b118      	cbz	r0, 800f378 <_fflush_r+0x14>
 800f370:	6983      	ldr	r3, [r0, #24]
 800f372:	b90b      	cbnz	r3, 800f378 <_fflush_r+0x14>
 800f374:	f000 f860 	bl	800f438 <__sinit>
 800f378:	4b0c      	ldr	r3, [pc, #48]	; (800f3ac <_fflush_r+0x48>)
 800f37a:	429c      	cmp	r4, r3
 800f37c:	d109      	bne.n	800f392 <_fflush_r+0x2e>
 800f37e:	686c      	ldr	r4, [r5, #4]
 800f380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f384:	b17b      	cbz	r3, 800f3a6 <_fflush_r+0x42>
 800f386:	4621      	mov	r1, r4
 800f388:	4628      	mov	r0, r5
 800f38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f38e:	f7ff bf63 	b.w	800f258 <__sflush_r>
 800f392:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <_fflush_r+0x4c>)
 800f394:	429c      	cmp	r4, r3
 800f396:	d101      	bne.n	800f39c <_fflush_r+0x38>
 800f398:	68ac      	ldr	r4, [r5, #8]
 800f39a:	e7f1      	b.n	800f380 <_fflush_r+0x1c>
 800f39c:	4b05      	ldr	r3, [pc, #20]	; (800f3b4 <_fflush_r+0x50>)
 800f39e:	429c      	cmp	r4, r3
 800f3a0:	bf08      	it	eq
 800f3a2:	68ec      	ldreq	r4, [r5, #12]
 800f3a4:	e7ec      	b.n	800f380 <_fflush_r+0x1c>
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	bd38      	pop	{r3, r4, r5, pc}
 800f3aa:	bf00      	nop
 800f3ac:	080114a0 	.word	0x080114a0
 800f3b0:	080114c0 	.word	0x080114c0
 800f3b4:	08011480 	.word	0x08011480

0800f3b8 <std>:
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	b510      	push	{r4, lr}
 800f3bc:	4604      	mov	r4, r0
 800f3be:	e9c0 3300 	strd	r3, r3, [r0]
 800f3c2:	6083      	str	r3, [r0, #8]
 800f3c4:	8181      	strh	r1, [r0, #12]
 800f3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800f3c8:	81c2      	strh	r2, [r0, #14]
 800f3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3ce:	6183      	str	r3, [r0, #24]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	2208      	movs	r2, #8
 800f3d4:	305c      	adds	r0, #92	; 0x5c
 800f3d6:	f7fd faa0 	bl	800c91a <memset>
 800f3da:	4b05      	ldr	r3, [pc, #20]	; (800f3f0 <std+0x38>)
 800f3dc:	6263      	str	r3, [r4, #36]	; 0x24
 800f3de:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <std+0x3c>)
 800f3e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3e2:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <std+0x40>)
 800f3e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3e6:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <std+0x44>)
 800f3e8:	6224      	str	r4, [r4, #32]
 800f3ea:	6323      	str	r3, [r4, #48]	; 0x30
 800f3ec:	bd10      	pop	{r4, pc}
 800f3ee:	bf00      	nop
 800f3f0:	08010b6d 	.word	0x08010b6d
 800f3f4:	08010b8f 	.word	0x08010b8f
 800f3f8:	08010bc7 	.word	0x08010bc7
 800f3fc:	08010beb 	.word	0x08010beb

0800f400 <_cleanup_r>:
 800f400:	4901      	ldr	r1, [pc, #4]	; (800f408 <_cleanup_r+0x8>)
 800f402:	f000 b885 	b.w	800f510 <_fwalk_reent>
 800f406:	bf00      	nop
 800f408:	0800f365 	.word	0x0800f365

0800f40c <__sfmoreglue>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	1e4a      	subs	r2, r1, #1
 800f410:	2568      	movs	r5, #104	; 0x68
 800f412:	4355      	muls	r5, r2
 800f414:	460e      	mov	r6, r1
 800f416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f41a:	f001 f8ab 	bl	8010574 <_malloc_r>
 800f41e:	4604      	mov	r4, r0
 800f420:	b140      	cbz	r0, 800f434 <__sfmoreglue+0x28>
 800f422:	2100      	movs	r1, #0
 800f424:	e9c0 1600 	strd	r1, r6, [r0]
 800f428:	300c      	adds	r0, #12
 800f42a:	60a0      	str	r0, [r4, #8]
 800f42c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f430:	f7fd fa73 	bl	800c91a <memset>
 800f434:	4620      	mov	r0, r4
 800f436:	bd70      	pop	{r4, r5, r6, pc}

0800f438 <__sinit>:
 800f438:	6983      	ldr	r3, [r0, #24]
 800f43a:	b510      	push	{r4, lr}
 800f43c:	4604      	mov	r4, r0
 800f43e:	bb33      	cbnz	r3, 800f48e <__sinit+0x56>
 800f440:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f444:	6503      	str	r3, [r0, #80]	; 0x50
 800f446:	4b12      	ldr	r3, [pc, #72]	; (800f490 <__sinit+0x58>)
 800f448:	4a12      	ldr	r2, [pc, #72]	; (800f494 <__sinit+0x5c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6282      	str	r2, [r0, #40]	; 0x28
 800f44e:	4298      	cmp	r0, r3
 800f450:	bf04      	itt	eq
 800f452:	2301      	moveq	r3, #1
 800f454:	6183      	streq	r3, [r0, #24]
 800f456:	f000 f81f 	bl	800f498 <__sfp>
 800f45a:	6060      	str	r0, [r4, #4]
 800f45c:	4620      	mov	r0, r4
 800f45e:	f000 f81b 	bl	800f498 <__sfp>
 800f462:	60a0      	str	r0, [r4, #8]
 800f464:	4620      	mov	r0, r4
 800f466:	f000 f817 	bl	800f498 <__sfp>
 800f46a:	2200      	movs	r2, #0
 800f46c:	60e0      	str	r0, [r4, #12]
 800f46e:	2104      	movs	r1, #4
 800f470:	6860      	ldr	r0, [r4, #4]
 800f472:	f7ff ffa1 	bl	800f3b8 <std>
 800f476:	2201      	movs	r2, #1
 800f478:	2109      	movs	r1, #9
 800f47a:	68a0      	ldr	r0, [r4, #8]
 800f47c:	f7ff ff9c 	bl	800f3b8 <std>
 800f480:	2202      	movs	r2, #2
 800f482:	2112      	movs	r1, #18
 800f484:	68e0      	ldr	r0, [r4, #12]
 800f486:	f7ff ff97 	bl	800f3b8 <std>
 800f48a:	2301      	movs	r3, #1
 800f48c:	61a3      	str	r3, [r4, #24]
 800f48e:	bd10      	pop	{r4, pc}
 800f490:	080113e0 	.word	0x080113e0
 800f494:	0800f401 	.word	0x0800f401

0800f498 <__sfp>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	4b1b      	ldr	r3, [pc, #108]	; (800f508 <__sfp+0x70>)
 800f49c:	681e      	ldr	r6, [r3, #0]
 800f49e:	69b3      	ldr	r3, [r6, #24]
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	b913      	cbnz	r3, 800f4aa <__sfp+0x12>
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	f7ff ffc7 	bl	800f438 <__sinit>
 800f4aa:	3648      	adds	r6, #72	; 0x48
 800f4ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	d503      	bpl.n	800f4bc <__sfp+0x24>
 800f4b4:	6833      	ldr	r3, [r6, #0]
 800f4b6:	b133      	cbz	r3, 800f4c6 <__sfp+0x2e>
 800f4b8:	6836      	ldr	r6, [r6, #0]
 800f4ba:	e7f7      	b.n	800f4ac <__sfp+0x14>
 800f4bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f4c0:	b16d      	cbz	r5, 800f4de <__sfp+0x46>
 800f4c2:	3468      	adds	r4, #104	; 0x68
 800f4c4:	e7f4      	b.n	800f4b0 <__sfp+0x18>
 800f4c6:	2104      	movs	r1, #4
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	f7ff ff9f 	bl	800f40c <__sfmoreglue>
 800f4ce:	6030      	str	r0, [r6, #0]
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d1f1      	bne.n	800f4b8 <__sfp+0x20>
 800f4d4:	230c      	movs	r3, #12
 800f4d6:	603b      	str	r3, [r7, #0]
 800f4d8:	4604      	mov	r4, r0
 800f4da:	4620      	mov	r0, r4
 800f4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4de:	4b0b      	ldr	r3, [pc, #44]	; (800f50c <__sfp+0x74>)
 800f4e0:	6665      	str	r5, [r4, #100]	; 0x64
 800f4e2:	e9c4 5500 	strd	r5, r5, [r4]
 800f4e6:	60a5      	str	r5, [r4, #8]
 800f4e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f4ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f4f0:	2208      	movs	r2, #8
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4f8:	f7fd fa0f 	bl	800c91a <memset>
 800f4fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f504:	e7e9      	b.n	800f4da <__sfp+0x42>
 800f506:	bf00      	nop
 800f508:	080113e0 	.word	0x080113e0
 800f50c:	ffff0001 	.word	0xffff0001

0800f510 <_fwalk_reent>:
 800f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f514:	4680      	mov	r8, r0
 800f516:	4689      	mov	r9, r1
 800f518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f51c:	2600      	movs	r6, #0
 800f51e:	b914      	cbnz	r4, 800f526 <_fwalk_reent+0x16>
 800f520:	4630      	mov	r0, r6
 800f522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f526:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f52a:	3f01      	subs	r7, #1
 800f52c:	d501      	bpl.n	800f532 <_fwalk_reent+0x22>
 800f52e:	6824      	ldr	r4, [r4, #0]
 800f530:	e7f5      	b.n	800f51e <_fwalk_reent+0xe>
 800f532:	89ab      	ldrh	r3, [r5, #12]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d907      	bls.n	800f548 <_fwalk_reent+0x38>
 800f538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f53c:	3301      	adds	r3, #1
 800f53e:	d003      	beq.n	800f548 <_fwalk_reent+0x38>
 800f540:	4629      	mov	r1, r5
 800f542:	4640      	mov	r0, r8
 800f544:	47c8      	blx	r9
 800f546:	4306      	orrs	r6, r0
 800f548:	3568      	adds	r5, #104	; 0x68
 800f54a:	e7ee      	b.n	800f52a <_fwalk_reent+0x1a>

0800f54c <rshift>:
 800f54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f54e:	6906      	ldr	r6, [r0, #16]
 800f550:	114b      	asrs	r3, r1, #5
 800f552:	429e      	cmp	r6, r3
 800f554:	f100 0414 	add.w	r4, r0, #20
 800f558:	dd30      	ble.n	800f5bc <rshift+0x70>
 800f55a:	f011 011f 	ands.w	r1, r1, #31
 800f55e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f562:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f566:	d108      	bne.n	800f57a <rshift+0x2e>
 800f568:	4621      	mov	r1, r4
 800f56a:	42b2      	cmp	r2, r6
 800f56c:	460b      	mov	r3, r1
 800f56e:	d211      	bcs.n	800f594 <rshift+0x48>
 800f570:	f852 3b04 	ldr.w	r3, [r2], #4
 800f574:	f841 3b04 	str.w	r3, [r1], #4
 800f578:	e7f7      	b.n	800f56a <rshift+0x1e>
 800f57a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f57e:	f1c1 0c20 	rsb	ip, r1, #32
 800f582:	40cd      	lsrs	r5, r1
 800f584:	3204      	adds	r2, #4
 800f586:	4623      	mov	r3, r4
 800f588:	42b2      	cmp	r2, r6
 800f58a:	4617      	mov	r7, r2
 800f58c:	d30c      	bcc.n	800f5a8 <rshift+0x5c>
 800f58e:	601d      	str	r5, [r3, #0]
 800f590:	b105      	cbz	r5, 800f594 <rshift+0x48>
 800f592:	3304      	adds	r3, #4
 800f594:	1b1a      	subs	r2, r3, r4
 800f596:	42a3      	cmp	r3, r4
 800f598:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f59c:	bf08      	it	eq
 800f59e:	2300      	moveq	r3, #0
 800f5a0:	6102      	str	r2, [r0, #16]
 800f5a2:	bf08      	it	eq
 800f5a4:	6143      	streq	r3, [r0, #20]
 800f5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a8:	683f      	ldr	r7, [r7, #0]
 800f5aa:	fa07 f70c 	lsl.w	r7, r7, ip
 800f5ae:	433d      	orrs	r5, r7
 800f5b0:	f843 5b04 	str.w	r5, [r3], #4
 800f5b4:	f852 5b04 	ldr.w	r5, [r2], #4
 800f5b8:	40cd      	lsrs	r5, r1
 800f5ba:	e7e5      	b.n	800f588 <rshift+0x3c>
 800f5bc:	4623      	mov	r3, r4
 800f5be:	e7e9      	b.n	800f594 <rshift+0x48>

0800f5c0 <__hexdig_fun>:
 800f5c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f5c4:	2b09      	cmp	r3, #9
 800f5c6:	d802      	bhi.n	800f5ce <__hexdig_fun+0xe>
 800f5c8:	3820      	subs	r0, #32
 800f5ca:	b2c0      	uxtb	r0, r0
 800f5cc:	4770      	bx	lr
 800f5ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f5d2:	2b05      	cmp	r3, #5
 800f5d4:	d801      	bhi.n	800f5da <__hexdig_fun+0x1a>
 800f5d6:	3847      	subs	r0, #71	; 0x47
 800f5d8:	e7f7      	b.n	800f5ca <__hexdig_fun+0xa>
 800f5da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f5de:	2b05      	cmp	r3, #5
 800f5e0:	d801      	bhi.n	800f5e6 <__hexdig_fun+0x26>
 800f5e2:	3827      	subs	r0, #39	; 0x27
 800f5e4:	e7f1      	b.n	800f5ca <__hexdig_fun+0xa>
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	4770      	bx	lr

0800f5ea <__gethex>:
 800f5ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ee:	b08b      	sub	sp, #44	; 0x2c
 800f5f0:	468a      	mov	sl, r1
 800f5f2:	9002      	str	r0, [sp, #8]
 800f5f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f5f6:	9306      	str	r3, [sp, #24]
 800f5f8:	4690      	mov	r8, r2
 800f5fa:	f000 fad0 	bl	800fb9e <__localeconv_l>
 800f5fe:	6803      	ldr	r3, [r0, #0]
 800f600:	9303      	str	r3, [sp, #12]
 800f602:	4618      	mov	r0, r3
 800f604:	f7f0 fde4 	bl	80001d0 <strlen>
 800f608:	9b03      	ldr	r3, [sp, #12]
 800f60a:	9001      	str	r0, [sp, #4]
 800f60c:	4403      	add	r3, r0
 800f60e:	f04f 0b00 	mov.w	fp, #0
 800f612:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f616:	9307      	str	r3, [sp, #28]
 800f618:	f8da 3000 	ldr.w	r3, [sl]
 800f61c:	3302      	adds	r3, #2
 800f61e:	461f      	mov	r7, r3
 800f620:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f624:	2830      	cmp	r0, #48	; 0x30
 800f626:	d06c      	beq.n	800f702 <__gethex+0x118>
 800f628:	f7ff ffca 	bl	800f5c0 <__hexdig_fun>
 800f62c:	4604      	mov	r4, r0
 800f62e:	2800      	cmp	r0, #0
 800f630:	d16a      	bne.n	800f708 <__gethex+0x11e>
 800f632:	9a01      	ldr	r2, [sp, #4]
 800f634:	9903      	ldr	r1, [sp, #12]
 800f636:	4638      	mov	r0, r7
 800f638:	f001 fadb 	bl	8010bf2 <strncmp>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d166      	bne.n	800f70e <__gethex+0x124>
 800f640:	9b01      	ldr	r3, [sp, #4]
 800f642:	5cf8      	ldrb	r0, [r7, r3]
 800f644:	18fe      	adds	r6, r7, r3
 800f646:	f7ff ffbb 	bl	800f5c0 <__hexdig_fun>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d062      	beq.n	800f714 <__gethex+0x12a>
 800f64e:	4633      	mov	r3, r6
 800f650:	7818      	ldrb	r0, [r3, #0]
 800f652:	2830      	cmp	r0, #48	; 0x30
 800f654:	461f      	mov	r7, r3
 800f656:	f103 0301 	add.w	r3, r3, #1
 800f65a:	d0f9      	beq.n	800f650 <__gethex+0x66>
 800f65c:	f7ff ffb0 	bl	800f5c0 <__hexdig_fun>
 800f660:	fab0 f580 	clz	r5, r0
 800f664:	096d      	lsrs	r5, r5, #5
 800f666:	4634      	mov	r4, r6
 800f668:	f04f 0b01 	mov.w	fp, #1
 800f66c:	463a      	mov	r2, r7
 800f66e:	4616      	mov	r6, r2
 800f670:	3201      	adds	r2, #1
 800f672:	7830      	ldrb	r0, [r6, #0]
 800f674:	f7ff ffa4 	bl	800f5c0 <__hexdig_fun>
 800f678:	2800      	cmp	r0, #0
 800f67a:	d1f8      	bne.n	800f66e <__gethex+0x84>
 800f67c:	9a01      	ldr	r2, [sp, #4]
 800f67e:	9903      	ldr	r1, [sp, #12]
 800f680:	4630      	mov	r0, r6
 800f682:	f001 fab6 	bl	8010bf2 <strncmp>
 800f686:	b950      	cbnz	r0, 800f69e <__gethex+0xb4>
 800f688:	b954      	cbnz	r4, 800f6a0 <__gethex+0xb6>
 800f68a:	9b01      	ldr	r3, [sp, #4]
 800f68c:	18f4      	adds	r4, r6, r3
 800f68e:	4622      	mov	r2, r4
 800f690:	4616      	mov	r6, r2
 800f692:	3201      	adds	r2, #1
 800f694:	7830      	ldrb	r0, [r6, #0]
 800f696:	f7ff ff93 	bl	800f5c0 <__hexdig_fun>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d1f8      	bne.n	800f690 <__gethex+0xa6>
 800f69e:	b10c      	cbz	r4, 800f6a4 <__gethex+0xba>
 800f6a0:	1ba4      	subs	r4, r4, r6
 800f6a2:	00a4      	lsls	r4, r4, #2
 800f6a4:	7833      	ldrb	r3, [r6, #0]
 800f6a6:	2b50      	cmp	r3, #80	; 0x50
 800f6a8:	d001      	beq.n	800f6ae <__gethex+0xc4>
 800f6aa:	2b70      	cmp	r3, #112	; 0x70
 800f6ac:	d140      	bne.n	800f730 <__gethex+0x146>
 800f6ae:	7873      	ldrb	r3, [r6, #1]
 800f6b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f6b2:	d031      	beq.n	800f718 <__gethex+0x12e>
 800f6b4:	2b2d      	cmp	r3, #45	; 0x2d
 800f6b6:	d033      	beq.n	800f720 <__gethex+0x136>
 800f6b8:	1c71      	adds	r1, r6, #1
 800f6ba:	f04f 0900 	mov.w	r9, #0
 800f6be:	7808      	ldrb	r0, [r1, #0]
 800f6c0:	f7ff ff7e 	bl	800f5c0 <__hexdig_fun>
 800f6c4:	1e43      	subs	r3, r0, #1
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	2b18      	cmp	r3, #24
 800f6ca:	d831      	bhi.n	800f730 <__gethex+0x146>
 800f6cc:	f1a0 0210 	sub.w	r2, r0, #16
 800f6d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f6d4:	f7ff ff74 	bl	800f5c0 <__hexdig_fun>
 800f6d8:	1e43      	subs	r3, r0, #1
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b18      	cmp	r3, #24
 800f6de:	d922      	bls.n	800f726 <__gethex+0x13c>
 800f6e0:	f1b9 0f00 	cmp.w	r9, #0
 800f6e4:	d000      	beq.n	800f6e8 <__gethex+0xfe>
 800f6e6:	4252      	negs	r2, r2
 800f6e8:	4414      	add	r4, r2
 800f6ea:	f8ca 1000 	str.w	r1, [sl]
 800f6ee:	b30d      	cbz	r5, 800f734 <__gethex+0x14a>
 800f6f0:	f1bb 0f00 	cmp.w	fp, #0
 800f6f4:	bf0c      	ite	eq
 800f6f6:	2706      	moveq	r7, #6
 800f6f8:	2700      	movne	r7, #0
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	b00b      	add	sp, #44	; 0x2c
 800f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f702:	f10b 0b01 	add.w	fp, fp, #1
 800f706:	e78a      	b.n	800f61e <__gethex+0x34>
 800f708:	2500      	movs	r5, #0
 800f70a:	462c      	mov	r4, r5
 800f70c:	e7ae      	b.n	800f66c <__gethex+0x82>
 800f70e:	463e      	mov	r6, r7
 800f710:	2501      	movs	r5, #1
 800f712:	e7c7      	b.n	800f6a4 <__gethex+0xba>
 800f714:	4604      	mov	r4, r0
 800f716:	e7fb      	b.n	800f710 <__gethex+0x126>
 800f718:	f04f 0900 	mov.w	r9, #0
 800f71c:	1cb1      	adds	r1, r6, #2
 800f71e:	e7ce      	b.n	800f6be <__gethex+0xd4>
 800f720:	f04f 0901 	mov.w	r9, #1
 800f724:	e7fa      	b.n	800f71c <__gethex+0x132>
 800f726:	230a      	movs	r3, #10
 800f728:	fb03 0202 	mla	r2, r3, r2, r0
 800f72c:	3a10      	subs	r2, #16
 800f72e:	e7cf      	b.n	800f6d0 <__gethex+0xe6>
 800f730:	4631      	mov	r1, r6
 800f732:	e7da      	b.n	800f6ea <__gethex+0x100>
 800f734:	1bf3      	subs	r3, r6, r7
 800f736:	3b01      	subs	r3, #1
 800f738:	4629      	mov	r1, r5
 800f73a:	2b07      	cmp	r3, #7
 800f73c:	dc49      	bgt.n	800f7d2 <__gethex+0x1e8>
 800f73e:	9802      	ldr	r0, [sp, #8]
 800f740:	f000 fabc 	bl	800fcbc <_Balloc>
 800f744:	9b01      	ldr	r3, [sp, #4]
 800f746:	f100 0914 	add.w	r9, r0, #20
 800f74a:	f04f 0b00 	mov.w	fp, #0
 800f74e:	f1c3 0301 	rsb	r3, r3, #1
 800f752:	4605      	mov	r5, r0
 800f754:	f8cd 9010 	str.w	r9, [sp, #16]
 800f758:	46da      	mov	sl, fp
 800f75a:	9308      	str	r3, [sp, #32]
 800f75c:	42b7      	cmp	r7, r6
 800f75e:	d33b      	bcc.n	800f7d8 <__gethex+0x1ee>
 800f760:	9804      	ldr	r0, [sp, #16]
 800f762:	f840 ab04 	str.w	sl, [r0], #4
 800f766:	eba0 0009 	sub.w	r0, r0, r9
 800f76a:	1080      	asrs	r0, r0, #2
 800f76c:	6128      	str	r0, [r5, #16]
 800f76e:	0147      	lsls	r7, r0, #5
 800f770:	4650      	mov	r0, sl
 800f772:	f000 fb67 	bl	800fe44 <__hi0bits>
 800f776:	f8d8 6000 	ldr.w	r6, [r8]
 800f77a:	1a3f      	subs	r7, r7, r0
 800f77c:	42b7      	cmp	r7, r6
 800f77e:	dd64      	ble.n	800f84a <__gethex+0x260>
 800f780:	1bbf      	subs	r7, r7, r6
 800f782:	4639      	mov	r1, r7
 800f784:	4628      	mov	r0, r5
 800f786:	f000 fe77 	bl	8010478 <__any_on>
 800f78a:	4682      	mov	sl, r0
 800f78c:	b178      	cbz	r0, 800f7ae <__gethex+0x1c4>
 800f78e:	1e7b      	subs	r3, r7, #1
 800f790:	1159      	asrs	r1, r3, #5
 800f792:	f003 021f 	and.w	r2, r3, #31
 800f796:	f04f 0a01 	mov.w	sl, #1
 800f79a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f79e:	fa0a f202 	lsl.w	r2, sl, r2
 800f7a2:	420a      	tst	r2, r1
 800f7a4:	d003      	beq.n	800f7ae <__gethex+0x1c4>
 800f7a6:	4553      	cmp	r3, sl
 800f7a8:	dc46      	bgt.n	800f838 <__gethex+0x24e>
 800f7aa:	f04f 0a02 	mov.w	sl, #2
 800f7ae:	4639      	mov	r1, r7
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	f7ff fecb 	bl	800f54c <rshift>
 800f7b6:	443c      	add	r4, r7
 800f7b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7bc:	42a3      	cmp	r3, r4
 800f7be:	da52      	bge.n	800f866 <__gethex+0x27c>
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	9802      	ldr	r0, [sp, #8]
 800f7c4:	f000 faae 	bl	800fd24 <_Bfree>
 800f7c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	6013      	str	r3, [r2, #0]
 800f7ce:	27a3      	movs	r7, #163	; 0xa3
 800f7d0:	e793      	b.n	800f6fa <__gethex+0x110>
 800f7d2:	3101      	adds	r1, #1
 800f7d4:	105b      	asrs	r3, r3, #1
 800f7d6:	e7b0      	b.n	800f73a <__gethex+0x150>
 800f7d8:	1e73      	subs	r3, r6, #1
 800f7da:	9305      	str	r3, [sp, #20]
 800f7dc:	9a07      	ldr	r2, [sp, #28]
 800f7de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d018      	beq.n	800f818 <__gethex+0x22e>
 800f7e6:	f1bb 0f20 	cmp.w	fp, #32
 800f7ea:	d107      	bne.n	800f7fc <__gethex+0x212>
 800f7ec:	9b04      	ldr	r3, [sp, #16]
 800f7ee:	f8c3 a000 	str.w	sl, [r3]
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	f04f 0a00 	mov.w	sl, #0
 800f7f8:	9304      	str	r3, [sp, #16]
 800f7fa:	46d3      	mov	fp, sl
 800f7fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f800:	f7ff fede 	bl	800f5c0 <__hexdig_fun>
 800f804:	f000 000f 	and.w	r0, r0, #15
 800f808:	fa00 f00b 	lsl.w	r0, r0, fp
 800f80c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f810:	f10b 0b04 	add.w	fp, fp, #4
 800f814:	9b05      	ldr	r3, [sp, #20]
 800f816:	e00d      	b.n	800f834 <__gethex+0x24a>
 800f818:	9b05      	ldr	r3, [sp, #20]
 800f81a:	9a08      	ldr	r2, [sp, #32]
 800f81c:	4413      	add	r3, r2
 800f81e:	42bb      	cmp	r3, r7
 800f820:	d3e1      	bcc.n	800f7e6 <__gethex+0x1fc>
 800f822:	4618      	mov	r0, r3
 800f824:	9a01      	ldr	r2, [sp, #4]
 800f826:	9903      	ldr	r1, [sp, #12]
 800f828:	9309      	str	r3, [sp, #36]	; 0x24
 800f82a:	f001 f9e2 	bl	8010bf2 <strncmp>
 800f82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f830:	2800      	cmp	r0, #0
 800f832:	d1d8      	bne.n	800f7e6 <__gethex+0x1fc>
 800f834:	461e      	mov	r6, r3
 800f836:	e791      	b.n	800f75c <__gethex+0x172>
 800f838:	1eb9      	subs	r1, r7, #2
 800f83a:	4628      	mov	r0, r5
 800f83c:	f000 fe1c 	bl	8010478 <__any_on>
 800f840:	2800      	cmp	r0, #0
 800f842:	d0b2      	beq.n	800f7aa <__gethex+0x1c0>
 800f844:	f04f 0a03 	mov.w	sl, #3
 800f848:	e7b1      	b.n	800f7ae <__gethex+0x1c4>
 800f84a:	da09      	bge.n	800f860 <__gethex+0x276>
 800f84c:	1bf7      	subs	r7, r6, r7
 800f84e:	4629      	mov	r1, r5
 800f850:	463a      	mov	r2, r7
 800f852:	9802      	ldr	r0, [sp, #8]
 800f854:	f000 fc32 	bl	80100bc <__lshift>
 800f858:	1be4      	subs	r4, r4, r7
 800f85a:	4605      	mov	r5, r0
 800f85c:	f100 0914 	add.w	r9, r0, #20
 800f860:	f04f 0a00 	mov.w	sl, #0
 800f864:	e7a8      	b.n	800f7b8 <__gethex+0x1ce>
 800f866:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f86a:	42a0      	cmp	r0, r4
 800f86c:	dd6a      	ble.n	800f944 <__gethex+0x35a>
 800f86e:	1b04      	subs	r4, r0, r4
 800f870:	42a6      	cmp	r6, r4
 800f872:	dc2e      	bgt.n	800f8d2 <__gethex+0x2e8>
 800f874:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d022      	beq.n	800f8c2 <__gethex+0x2d8>
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d024      	beq.n	800f8ca <__gethex+0x2e0>
 800f880:	2b01      	cmp	r3, #1
 800f882:	d115      	bne.n	800f8b0 <__gethex+0x2c6>
 800f884:	42a6      	cmp	r6, r4
 800f886:	d113      	bne.n	800f8b0 <__gethex+0x2c6>
 800f888:	2e01      	cmp	r6, #1
 800f88a:	dc0b      	bgt.n	800f8a4 <__gethex+0x2ba>
 800f88c:	9a06      	ldr	r2, [sp, #24]
 800f88e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f892:	6013      	str	r3, [r2, #0]
 800f894:	2301      	movs	r3, #1
 800f896:	612b      	str	r3, [r5, #16]
 800f898:	f8c9 3000 	str.w	r3, [r9]
 800f89c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f89e:	2762      	movs	r7, #98	; 0x62
 800f8a0:	601d      	str	r5, [r3, #0]
 800f8a2:	e72a      	b.n	800f6fa <__gethex+0x110>
 800f8a4:	1e71      	subs	r1, r6, #1
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f000 fde6 	bl	8010478 <__any_on>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d1ed      	bne.n	800f88c <__gethex+0x2a2>
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	9802      	ldr	r0, [sp, #8]
 800f8b4:	f000 fa36 	bl	800fd24 <_Bfree>
 800f8b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	6013      	str	r3, [r2, #0]
 800f8be:	2750      	movs	r7, #80	; 0x50
 800f8c0:	e71b      	b.n	800f6fa <__gethex+0x110>
 800f8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d0e1      	beq.n	800f88c <__gethex+0x2a2>
 800f8c8:	e7f2      	b.n	800f8b0 <__gethex+0x2c6>
 800f8ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d1dd      	bne.n	800f88c <__gethex+0x2a2>
 800f8d0:	e7ee      	b.n	800f8b0 <__gethex+0x2c6>
 800f8d2:	1e67      	subs	r7, r4, #1
 800f8d4:	f1ba 0f00 	cmp.w	sl, #0
 800f8d8:	d131      	bne.n	800f93e <__gethex+0x354>
 800f8da:	b127      	cbz	r7, 800f8e6 <__gethex+0x2fc>
 800f8dc:	4639      	mov	r1, r7
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f000 fdca 	bl	8010478 <__any_on>
 800f8e4:	4682      	mov	sl, r0
 800f8e6:	117a      	asrs	r2, r7, #5
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	f007 071f 	and.w	r7, r7, #31
 800f8ee:	fa03 f707 	lsl.w	r7, r3, r7
 800f8f2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	421f      	tst	r7, r3
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	bf18      	it	ne
 800f8fe:	f04a 0a02 	orrne.w	sl, sl, #2
 800f902:	1b36      	subs	r6, r6, r4
 800f904:	f7ff fe22 	bl	800f54c <rshift>
 800f908:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f90c:	2702      	movs	r7, #2
 800f90e:	f1ba 0f00 	cmp.w	sl, #0
 800f912:	d048      	beq.n	800f9a6 <__gethex+0x3bc>
 800f914:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d015      	beq.n	800f948 <__gethex+0x35e>
 800f91c:	2b03      	cmp	r3, #3
 800f91e:	d017      	beq.n	800f950 <__gethex+0x366>
 800f920:	2b01      	cmp	r3, #1
 800f922:	d109      	bne.n	800f938 <__gethex+0x34e>
 800f924:	f01a 0f02 	tst.w	sl, #2
 800f928:	d006      	beq.n	800f938 <__gethex+0x34e>
 800f92a:	f8d9 3000 	ldr.w	r3, [r9]
 800f92e:	ea4a 0a03 	orr.w	sl, sl, r3
 800f932:	f01a 0f01 	tst.w	sl, #1
 800f936:	d10e      	bne.n	800f956 <__gethex+0x36c>
 800f938:	f047 0710 	orr.w	r7, r7, #16
 800f93c:	e033      	b.n	800f9a6 <__gethex+0x3bc>
 800f93e:	f04f 0a01 	mov.w	sl, #1
 800f942:	e7d0      	b.n	800f8e6 <__gethex+0x2fc>
 800f944:	2701      	movs	r7, #1
 800f946:	e7e2      	b.n	800f90e <__gethex+0x324>
 800f948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f94a:	f1c3 0301 	rsb	r3, r3, #1
 800f94e:	9315      	str	r3, [sp, #84]	; 0x54
 800f950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0f0      	beq.n	800f938 <__gethex+0x34e>
 800f956:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f95a:	f105 0314 	add.w	r3, r5, #20
 800f95e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f962:	eb03 010a 	add.w	r1, r3, sl
 800f966:	f04f 0c00 	mov.w	ip, #0
 800f96a:	4618      	mov	r0, r3
 800f96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f970:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f974:	d01c      	beq.n	800f9b0 <__gethex+0x3c6>
 800f976:	3201      	adds	r2, #1
 800f978:	6002      	str	r2, [r0, #0]
 800f97a:	2f02      	cmp	r7, #2
 800f97c:	f105 0314 	add.w	r3, r5, #20
 800f980:	d138      	bne.n	800f9f4 <__gethex+0x40a>
 800f982:	f8d8 2000 	ldr.w	r2, [r8]
 800f986:	3a01      	subs	r2, #1
 800f988:	42b2      	cmp	r2, r6
 800f98a:	d10a      	bne.n	800f9a2 <__gethex+0x3b8>
 800f98c:	1171      	asrs	r1, r6, #5
 800f98e:	2201      	movs	r2, #1
 800f990:	f006 061f 	and.w	r6, r6, #31
 800f994:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f998:	fa02 f606 	lsl.w	r6, r2, r6
 800f99c:	421e      	tst	r6, r3
 800f99e:	bf18      	it	ne
 800f9a0:	4617      	movne	r7, r2
 800f9a2:	f047 0720 	orr.w	r7, r7, #32
 800f9a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9a8:	601d      	str	r5, [r3, #0]
 800f9aa:	9b06      	ldr	r3, [sp, #24]
 800f9ac:	601c      	str	r4, [r3, #0]
 800f9ae:	e6a4      	b.n	800f6fa <__gethex+0x110>
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	f843 cc04 	str.w	ip, [r3, #-4]
 800f9b6:	d8d8      	bhi.n	800f96a <__gethex+0x380>
 800f9b8:	68ab      	ldr	r3, [r5, #8]
 800f9ba:	4599      	cmp	r9, r3
 800f9bc:	db12      	blt.n	800f9e4 <__gethex+0x3fa>
 800f9be:	6869      	ldr	r1, [r5, #4]
 800f9c0:	9802      	ldr	r0, [sp, #8]
 800f9c2:	3101      	adds	r1, #1
 800f9c4:	f000 f97a 	bl	800fcbc <_Balloc>
 800f9c8:	692a      	ldr	r2, [r5, #16]
 800f9ca:	3202      	adds	r2, #2
 800f9cc:	f105 010c 	add.w	r1, r5, #12
 800f9d0:	4683      	mov	fp, r0
 800f9d2:	0092      	lsls	r2, r2, #2
 800f9d4:	300c      	adds	r0, #12
 800f9d6:	f7fc ff95 	bl	800c904 <memcpy>
 800f9da:	4629      	mov	r1, r5
 800f9dc:	9802      	ldr	r0, [sp, #8]
 800f9de:	f000 f9a1 	bl	800fd24 <_Bfree>
 800f9e2:	465d      	mov	r5, fp
 800f9e4:	692b      	ldr	r3, [r5, #16]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f9ec:	612a      	str	r2, [r5, #16]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	615a      	str	r2, [r3, #20]
 800f9f2:	e7c2      	b.n	800f97a <__gethex+0x390>
 800f9f4:	692a      	ldr	r2, [r5, #16]
 800f9f6:	454a      	cmp	r2, r9
 800f9f8:	dd0b      	ble.n	800fa12 <__gethex+0x428>
 800f9fa:	2101      	movs	r1, #1
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f7ff fda5 	bl	800f54c <rshift>
 800fa02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa06:	3401      	adds	r4, #1
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	f6ff aed9 	blt.w	800f7c0 <__gethex+0x1d6>
 800fa0e:	2701      	movs	r7, #1
 800fa10:	e7c7      	b.n	800f9a2 <__gethex+0x3b8>
 800fa12:	f016 061f 	ands.w	r6, r6, #31
 800fa16:	d0fa      	beq.n	800fa0e <__gethex+0x424>
 800fa18:	449a      	add	sl, r3
 800fa1a:	f1c6 0620 	rsb	r6, r6, #32
 800fa1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fa22:	f000 fa0f 	bl	800fe44 <__hi0bits>
 800fa26:	42b0      	cmp	r0, r6
 800fa28:	dbe7      	blt.n	800f9fa <__gethex+0x410>
 800fa2a:	e7f0      	b.n	800fa0e <__gethex+0x424>

0800fa2c <L_shift>:
 800fa2c:	f1c2 0208 	rsb	r2, r2, #8
 800fa30:	0092      	lsls	r2, r2, #2
 800fa32:	b570      	push	{r4, r5, r6, lr}
 800fa34:	f1c2 0620 	rsb	r6, r2, #32
 800fa38:	6843      	ldr	r3, [r0, #4]
 800fa3a:	6804      	ldr	r4, [r0, #0]
 800fa3c:	fa03 f506 	lsl.w	r5, r3, r6
 800fa40:	432c      	orrs	r4, r5
 800fa42:	40d3      	lsrs	r3, r2
 800fa44:	6004      	str	r4, [r0, #0]
 800fa46:	f840 3f04 	str.w	r3, [r0, #4]!
 800fa4a:	4288      	cmp	r0, r1
 800fa4c:	d3f4      	bcc.n	800fa38 <L_shift+0xc>
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}

0800fa50 <__match>:
 800fa50:	b530      	push	{r4, r5, lr}
 800fa52:	6803      	ldr	r3, [r0, #0]
 800fa54:	3301      	adds	r3, #1
 800fa56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa5a:	b914      	cbnz	r4, 800fa62 <__match+0x12>
 800fa5c:	6003      	str	r3, [r0, #0]
 800fa5e:	2001      	movs	r0, #1
 800fa60:	bd30      	pop	{r4, r5, pc}
 800fa62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fa6a:	2d19      	cmp	r5, #25
 800fa6c:	bf98      	it	ls
 800fa6e:	3220      	addls	r2, #32
 800fa70:	42a2      	cmp	r2, r4
 800fa72:	d0f0      	beq.n	800fa56 <__match+0x6>
 800fa74:	2000      	movs	r0, #0
 800fa76:	e7f3      	b.n	800fa60 <__match+0x10>

0800fa78 <__hexnan>:
 800fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	680b      	ldr	r3, [r1, #0]
 800fa7e:	6801      	ldr	r1, [r0, #0]
 800fa80:	115f      	asrs	r7, r3, #5
 800fa82:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800fa86:	f013 031f 	ands.w	r3, r3, #31
 800fa8a:	b087      	sub	sp, #28
 800fa8c:	bf18      	it	ne
 800fa8e:	3704      	addne	r7, #4
 800fa90:	2500      	movs	r5, #0
 800fa92:	1f3e      	subs	r6, r7, #4
 800fa94:	4682      	mov	sl, r0
 800fa96:	4690      	mov	r8, r2
 800fa98:	9301      	str	r3, [sp, #4]
 800fa9a:	f847 5c04 	str.w	r5, [r7, #-4]
 800fa9e:	46b1      	mov	r9, r6
 800faa0:	4634      	mov	r4, r6
 800faa2:	9502      	str	r5, [sp, #8]
 800faa4:	46ab      	mov	fp, r5
 800faa6:	784a      	ldrb	r2, [r1, #1]
 800faa8:	1c4b      	adds	r3, r1, #1
 800faaa:	9303      	str	r3, [sp, #12]
 800faac:	b342      	cbz	r2, 800fb00 <__hexnan+0x88>
 800faae:	4610      	mov	r0, r2
 800fab0:	9105      	str	r1, [sp, #20]
 800fab2:	9204      	str	r2, [sp, #16]
 800fab4:	f7ff fd84 	bl	800f5c0 <__hexdig_fun>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d143      	bne.n	800fb44 <__hexnan+0xcc>
 800fabc:	9a04      	ldr	r2, [sp, #16]
 800fabe:	9905      	ldr	r1, [sp, #20]
 800fac0:	2a20      	cmp	r2, #32
 800fac2:	d818      	bhi.n	800faf6 <__hexnan+0x7e>
 800fac4:	9b02      	ldr	r3, [sp, #8]
 800fac6:	459b      	cmp	fp, r3
 800fac8:	dd13      	ble.n	800faf2 <__hexnan+0x7a>
 800faca:	454c      	cmp	r4, r9
 800facc:	d206      	bcs.n	800fadc <__hexnan+0x64>
 800face:	2d07      	cmp	r5, #7
 800fad0:	dc04      	bgt.n	800fadc <__hexnan+0x64>
 800fad2:	462a      	mov	r2, r5
 800fad4:	4649      	mov	r1, r9
 800fad6:	4620      	mov	r0, r4
 800fad8:	f7ff ffa8 	bl	800fa2c <L_shift>
 800fadc:	4544      	cmp	r4, r8
 800fade:	d944      	bls.n	800fb6a <__hexnan+0xf2>
 800fae0:	2300      	movs	r3, #0
 800fae2:	f1a4 0904 	sub.w	r9, r4, #4
 800fae6:	f844 3c04 	str.w	r3, [r4, #-4]
 800faea:	f8cd b008 	str.w	fp, [sp, #8]
 800faee:	464c      	mov	r4, r9
 800faf0:	461d      	mov	r5, r3
 800faf2:	9903      	ldr	r1, [sp, #12]
 800faf4:	e7d7      	b.n	800faa6 <__hexnan+0x2e>
 800faf6:	2a29      	cmp	r2, #41	; 0x29
 800faf8:	d14a      	bne.n	800fb90 <__hexnan+0x118>
 800fafa:	3102      	adds	r1, #2
 800fafc:	f8ca 1000 	str.w	r1, [sl]
 800fb00:	f1bb 0f00 	cmp.w	fp, #0
 800fb04:	d044      	beq.n	800fb90 <__hexnan+0x118>
 800fb06:	454c      	cmp	r4, r9
 800fb08:	d206      	bcs.n	800fb18 <__hexnan+0xa0>
 800fb0a:	2d07      	cmp	r5, #7
 800fb0c:	dc04      	bgt.n	800fb18 <__hexnan+0xa0>
 800fb0e:	462a      	mov	r2, r5
 800fb10:	4649      	mov	r1, r9
 800fb12:	4620      	mov	r0, r4
 800fb14:	f7ff ff8a 	bl	800fa2c <L_shift>
 800fb18:	4544      	cmp	r4, r8
 800fb1a:	d928      	bls.n	800fb6e <__hexnan+0xf6>
 800fb1c:	4643      	mov	r3, r8
 800fb1e:	f854 2b04 	ldr.w	r2, [r4], #4
 800fb22:	f843 2b04 	str.w	r2, [r3], #4
 800fb26:	42a6      	cmp	r6, r4
 800fb28:	d2f9      	bcs.n	800fb1e <__hexnan+0xa6>
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f843 2b04 	str.w	r2, [r3], #4
 800fb30:	429e      	cmp	r6, r3
 800fb32:	d2fb      	bcs.n	800fb2c <__hexnan+0xb4>
 800fb34:	6833      	ldr	r3, [r6, #0]
 800fb36:	b91b      	cbnz	r3, 800fb40 <__hexnan+0xc8>
 800fb38:	4546      	cmp	r6, r8
 800fb3a:	d127      	bne.n	800fb8c <__hexnan+0x114>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	6033      	str	r3, [r6, #0]
 800fb40:	2005      	movs	r0, #5
 800fb42:	e026      	b.n	800fb92 <__hexnan+0x11a>
 800fb44:	3501      	adds	r5, #1
 800fb46:	2d08      	cmp	r5, #8
 800fb48:	f10b 0b01 	add.w	fp, fp, #1
 800fb4c:	dd06      	ble.n	800fb5c <__hexnan+0xe4>
 800fb4e:	4544      	cmp	r4, r8
 800fb50:	d9cf      	bls.n	800faf2 <__hexnan+0x7a>
 800fb52:	2300      	movs	r3, #0
 800fb54:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb58:	2501      	movs	r5, #1
 800fb5a:	3c04      	subs	r4, #4
 800fb5c:	6822      	ldr	r2, [r4, #0]
 800fb5e:	f000 000f 	and.w	r0, r0, #15
 800fb62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fb66:	6020      	str	r0, [r4, #0]
 800fb68:	e7c3      	b.n	800faf2 <__hexnan+0x7a>
 800fb6a:	2508      	movs	r5, #8
 800fb6c:	e7c1      	b.n	800faf2 <__hexnan+0x7a>
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0df      	beq.n	800fb34 <__hexnan+0xbc>
 800fb74:	f04f 32ff 	mov.w	r2, #4294967295
 800fb78:	f1c3 0320 	rsb	r3, r3, #32
 800fb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800fb80:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fb84:	401a      	ands	r2, r3
 800fb86:	f847 2c04 	str.w	r2, [r7, #-4]
 800fb8a:	e7d3      	b.n	800fb34 <__hexnan+0xbc>
 800fb8c:	3e04      	subs	r6, #4
 800fb8e:	e7d1      	b.n	800fb34 <__hexnan+0xbc>
 800fb90:	2004      	movs	r0, #4
 800fb92:	b007      	add	sp, #28
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb98 <__locale_ctype_ptr_l>:
 800fb98:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800fb9c:	4770      	bx	lr

0800fb9e <__localeconv_l>:
 800fb9e:	30f0      	adds	r0, #240	; 0xf0
 800fba0:	4770      	bx	lr
	...

0800fba4 <_localeconv_r>:
 800fba4:	4b04      	ldr	r3, [pc, #16]	; (800fbb8 <_localeconv_r+0x14>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6a18      	ldr	r0, [r3, #32]
 800fbaa:	4b04      	ldr	r3, [pc, #16]	; (800fbbc <_localeconv_r+0x18>)
 800fbac:	2800      	cmp	r0, #0
 800fbae:	bf08      	it	eq
 800fbb0:	4618      	moveq	r0, r3
 800fbb2:	30f0      	adds	r0, #240	; 0xf0
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20000040 	.word	0x20000040
 800fbbc:	200000a4 	.word	0x200000a4

0800fbc0 <__swhatbuf_r>:
 800fbc0:	b570      	push	{r4, r5, r6, lr}
 800fbc2:	460e      	mov	r6, r1
 800fbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc8:	2900      	cmp	r1, #0
 800fbca:	b096      	sub	sp, #88	; 0x58
 800fbcc:	4614      	mov	r4, r2
 800fbce:	461d      	mov	r5, r3
 800fbd0:	da07      	bge.n	800fbe2 <__swhatbuf_r+0x22>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	602b      	str	r3, [r5, #0]
 800fbd6:	89b3      	ldrh	r3, [r6, #12]
 800fbd8:	061a      	lsls	r2, r3, #24
 800fbda:	d410      	bmi.n	800fbfe <__swhatbuf_r+0x3e>
 800fbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe0:	e00e      	b.n	800fc00 <__swhatbuf_r+0x40>
 800fbe2:	466a      	mov	r2, sp
 800fbe4:	f001 f846 	bl	8010c74 <_fstat_r>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	dbf2      	blt.n	800fbd2 <__swhatbuf_r+0x12>
 800fbec:	9a01      	ldr	r2, [sp, #4]
 800fbee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbf6:	425a      	negs	r2, r3
 800fbf8:	415a      	adcs	r2, r3
 800fbfa:	602a      	str	r2, [r5, #0]
 800fbfc:	e7ee      	b.n	800fbdc <__swhatbuf_r+0x1c>
 800fbfe:	2340      	movs	r3, #64	; 0x40
 800fc00:	2000      	movs	r0, #0
 800fc02:	6023      	str	r3, [r4, #0]
 800fc04:	b016      	add	sp, #88	; 0x58
 800fc06:	bd70      	pop	{r4, r5, r6, pc}

0800fc08 <__smakebuf_r>:
 800fc08:	898b      	ldrh	r3, [r1, #12]
 800fc0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc0c:	079d      	lsls	r5, r3, #30
 800fc0e:	4606      	mov	r6, r0
 800fc10:	460c      	mov	r4, r1
 800fc12:	d507      	bpl.n	800fc24 <__smakebuf_r+0x1c>
 800fc14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	6123      	str	r3, [r4, #16]
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	6163      	str	r3, [r4, #20]
 800fc20:	b002      	add	sp, #8
 800fc22:	bd70      	pop	{r4, r5, r6, pc}
 800fc24:	ab01      	add	r3, sp, #4
 800fc26:	466a      	mov	r2, sp
 800fc28:	f7ff ffca 	bl	800fbc0 <__swhatbuf_r>
 800fc2c:	9900      	ldr	r1, [sp, #0]
 800fc2e:	4605      	mov	r5, r0
 800fc30:	4630      	mov	r0, r6
 800fc32:	f000 fc9f 	bl	8010574 <_malloc_r>
 800fc36:	b948      	cbnz	r0, 800fc4c <__smakebuf_r+0x44>
 800fc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc3c:	059a      	lsls	r2, r3, #22
 800fc3e:	d4ef      	bmi.n	800fc20 <__smakebuf_r+0x18>
 800fc40:	f023 0303 	bic.w	r3, r3, #3
 800fc44:	f043 0302 	orr.w	r3, r3, #2
 800fc48:	81a3      	strh	r3, [r4, #12]
 800fc4a:	e7e3      	b.n	800fc14 <__smakebuf_r+0xc>
 800fc4c:	4b0d      	ldr	r3, [pc, #52]	; (800fc84 <__smakebuf_r+0x7c>)
 800fc4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	6020      	str	r0, [r4, #0]
 800fc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc58:	81a3      	strh	r3, [r4, #12]
 800fc5a:	9b00      	ldr	r3, [sp, #0]
 800fc5c:	6163      	str	r3, [r4, #20]
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	6120      	str	r0, [r4, #16]
 800fc62:	b15b      	cbz	r3, 800fc7c <__smakebuf_r+0x74>
 800fc64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f001 f815 	bl	8010c98 <_isatty_r>
 800fc6e:	b128      	cbz	r0, 800fc7c <__smakebuf_r+0x74>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	f023 0303 	bic.w	r3, r3, #3
 800fc76:	f043 0301 	orr.w	r3, r3, #1
 800fc7a:	81a3      	strh	r3, [r4, #12]
 800fc7c:	89a3      	ldrh	r3, [r4, #12]
 800fc7e:	431d      	orrs	r5, r3
 800fc80:	81a5      	strh	r5, [r4, #12]
 800fc82:	e7cd      	b.n	800fc20 <__smakebuf_r+0x18>
 800fc84:	0800f401 	.word	0x0800f401

0800fc88 <malloc>:
 800fc88:	4b02      	ldr	r3, [pc, #8]	; (800fc94 <malloc+0xc>)
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	6818      	ldr	r0, [r3, #0]
 800fc8e:	f000 bc71 	b.w	8010574 <_malloc_r>
 800fc92:	bf00      	nop
 800fc94:	20000040 	.word	0x20000040

0800fc98 <__ascii_mbtowc>:
 800fc98:	b082      	sub	sp, #8
 800fc9a:	b901      	cbnz	r1, 800fc9e <__ascii_mbtowc+0x6>
 800fc9c:	a901      	add	r1, sp, #4
 800fc9e:	b142      	cbz	r2, 800fcb2 <__ascii_mbtowc+0x1a>
 800fca0:	b14b      	cbz	r3, 800fcb6 <__ascii_mbtowc+0x1e>
 800fca2:	7813      	ldrb	r3, [r2, #0]
 800fca4:	600b      	str	r3, [r1, #0]
 800fca6:	7812      	ldrb	r2, [r2, #0]
 800fca8:	1c10      	adds	r0, r2, #0
 800fcaa:	bf18      	it	ne
 800fcac:	2001      	movne	r0, #1
 800fcae:	b002      	add	sp, #8
 800fcb0:	4770      	bx	lr
 800fcb2:	4610      	mov	r0, r2
 800fcb4:	e7fb      	b.n	800fcae <__ascii_mbtowc+0x16>
 800fcb6:	f06f 0001 	mvn.w	r0, #1
 800fcba:	e7f8      	b.n	800fcae <__ascii_mbtowc+0x16>

0800fcbc <_Balloc>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460e      	mov	r6, r1
 800fcc4:	b93d      	cbnz	r5, 800fcd6 <_Balloc+0x1a>
 800fcc6:	2010      	movs	r0, #16
 800fcc8:	f7ff ffde 	bl	800fc88 <malloc>
 800fccc:	6260      	str	r0, [r4, #36]	; 0x24
 800fcce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcd2:	6005      	str	r5, [r0, #0]
 800fcd4:	60c5      	str	r5, [r0, #12]
 800fcd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fcd8:	68eb      	ldr	r3, [r5, #12]
 800fcda:	b183      	cbz	r3, 800fcfe <_Balloc+0x42>
 800fcdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fce4:	b9b8      	cbnz	r0, 800fd16 <_Balloc+0x5a>
 800fce6:	2101      	movs	r1, #1
 800fce8:	fa01 f506 	lsl.w	r5, r1, r6
 800fcec:	1d6a      	adds	r2, r5, #5
 800fcee:	0092      	lsls	r2, r2, #2
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fbe2 	bl	80104ba <_calloc_r>
 800fcf6:	b160      	cbz	r0, 800fd12 <_Balloc+0x56>
 800fcf8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fcfc:	e00e      	b.n	800fd1c <_Balloc+0x60>
 800fcfe:	2221      	movs	r2, #33	; 0x21
 800fd00:	2104      	movs	r1, #4
 800fd02:	4620      	mov	r0, r4
 800fd04:	f000 fbd9 	bl	80104ba <_calloc_r>
 800fd08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd0a:	60e8      	str	r0, [r5, #12]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1e4      	bne.n	800fcdc <_Balloc+0x20>
 800fd12:	2000      	movs	r0, #0
 800fd14:	bd70      	pop	{r4, r5, r6, pc}
 800fd16:	6802      	ldr	r2, [r0, #0]
 800fd18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd22:	e7f7      	b.n	800fd14 <_Balloc+0x58>

0800fd24 <_Bfree>:
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fd28:	4606      	mov	r6, r0
 800fd2a:	460d      	mov	r5, r1
 800fd2c:	b93c      	cbnz	r4, 800fd3e <_Bfree+0x1a>
 800fd2e:	2010      	movs	r0, #16
 800fd30:	f7ff ffaa 	bl	800fc88 <malloc>
 800fd34:	6270      	str	r0, [r6, #36]	; 0x24
 800fd36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd3a:	6004      	str	r4, [r0, #0]
 800fd3c:	60c4      	str	r4, [r0, #12]
 800fd3e:	b13d      	cbz	r5, 800fd50 <_Bfree+0x2c>
 800fd40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fd42:	686a      	ldr	r2, [r5, #4]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd4a:	6029      	str	r1, [r5, #0]
 800fd4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fd50:	bd70      	pop	{r4, r5, r6, pc}

0800fd52 <__multadd>:
 800fd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd56:	690d      	ldr	r5, [r1, #16]
 800fd58:	461f      	mov	r7, r3
 800fd5a:	4606      	mov	r6, r0
 800fd5c:	460c      	mov	r4, r1
 800fd5e:	f101 0c14 	add.w	ip, r1, #20
 800fd62:	2300      	movs	r3, #0
 800fd64:	f8dc 0000 	ldr.w	r0, [ip]
 800fd68:	b281      	uxth	r1, r0
 800fd6a:	fb02 7101 	mla	r1, r2, r1, r7
 800fd6e:	0c0f      	lsrs	r7, r1, #16
 800fd70:	0c00      	lsrs	r0, r0, #16
 800fd72:	fb02 7000 	mla	r0, r2, r0, r7
 800fd76:	b289      	uxth	r1, r1
 800fd78:	3301      	adds	r3, #1
 800fd7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fd7e:	429d      	cmp	r5, r3
 800fd80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fd84:	f84c 1b04 	str.w	r1, [ip], #4
 800fd88:	dcec      	bgt.n	800fd64 <__multadd+0x12>
 800fd8a:	b1d7      	cbz	r7, 800fdc2 <__multadd+0x70>
 800fd8c:	68a3      	ldr	r3, [r4, #8]
 800fd8e:	42ab      	cmp	r3, r5
 800fd90:	dc12      	bgt.n	800fdb8 <__multadd+0x66>
 800fd92:	6861      	ldr	r1, [r4, #4]
 800fd94:	4630      	mov	r0, r6
 800fd96:	3101      	adds	r1, #1
 800fd98:	f7ff ff90 	bl	800fcbc <_Balloc>
 800fd9c:	6922      	ldr	r2, [r4, #16]
 800fd9e:	3202      	adds	r2, #2
 800fda0:	f104 010c 	add.w	r1, r4, #12
 800fda4:	4680      	mov	r8, r0
 800fda6:	0092      	lsls	r2, r2, #2
 800fda8:	300c      	adds	r0, #12
 800fdaa:	f7fc fdab 	bl	800c904 <memcpy>
 800fdae:	4621      	mov	r1, r4
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7ff ffb7 	bl	800fd24 <_Bfree>
 800fdb6:	4644      	mov	r4, r8
 800fdb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fdbc:	3501      	adds	r5, #1
 800fdbe:	615f      	str	r7, [r3, #20]
 800fdc0:	6125      	str	r5, [r4, #16]
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdc8 <__s2b>:
 800fdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdcc:	460c      	mov	r4, r1
 800fdce:	4615      	mov	r5, r2
 800fdd0:	461f      	mov	r7, r3
 800fdd2:	2209      	movs	r2, #9
 800fdd4:	3308      	adds	r3, #8
 800fdd6:	4606      	mov	r6, r0
 800fdd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fddc:	2100      	movs	r1, #0
 800fdde:	2201      	movs	r2, #1
 800fde0:	429a      	cmp	r2, r3
 800fde2:	db20      	blt.n	800fe26 <__s2b+0x5e>
 800fde4:	4630      	mov	r0, r6
 800fde6:	f7ff ff69 	bl	800fcbc <_Balloc>
 800fdea:	9b08      	ldr	r3, [sp, #32]
 800fdec:	6143      	str	r3, [r0, #20]
 800fdee:	2d09      	cmp	r5, #9
 800fdf0:	f04f 0301 	mov.w	r3, #1
 800fdf4:	6103      	str	r3, [r0, #16]
 800fdf6:	dd19      	ble.n	800fe2c <__s2b+0x64>
 800fdf8:	f104 0809 	add.w	r8, r4, #9
 800fdfc:	46c1      	mov	r9, r8
 800fdfe:	442c      	add	r4, r5
 800fe00:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fe04:	4601      	mov	r1, r0
 800fe06:	3b30      	subs	r3, #48	; 0x30
 800fe08:	220a      	movs	r2, #10
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f7ff ffa1 	bl	800fd52 <__multadd>
 800fe10:	45a1      	cmp	r9, r4
 800fe12:	d1f5      	bne.n	800fe00 <__s2b+0x38>
 800fe14:	eb08 0405 	add.w	r4, r8, r5
 800fe18:	3c08      	subs	r4, #8
 800fe1a:	1b2d      	subs	r5, r5, r4
 800fe1c:	1963      	adds	r3, r4, r5
 800fe1e:	42bb      	cmp	r3, r7
 800fe20:	db07      	blt.n	800fe32 <__s2b+0x6a>
 800fe22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe26:	0052      	lsls	r2, r2, #1
 800fe28:	3101      	adds	r1, #1
 800fe2a:	e7d9      	b.n	800fde0 <__s2b+0x18>
 800fe2c:	340a      	adds	r4, #10
 800fe2e:	2509      	movs	r5, #9
 800fe30:	e7f3      	b.n	800fe1a <__s2b+0x52>
 800fe32:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe36:	4601      	mov	r1, r0
 800fe38:	3b30      	subs	r3, #48	; 0x30
 800fe3a:	220a      	movs	r2, #10
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	f7ff ff88 	bl	800fd52 <__multadd>
 800fe42:	e7eb      	b.n	800fe1c <__s2b+0x54>

0800fe44 <__hi0bits>:
 800fe44:	0c02      	lsrs	r2, r0, #16
 800fe46:	0412      	lsls	r2, r2, #16
 800fe48:	4603      	mov	r3, r0
 800fe4a:	b9b2      	cbnz	r2, 800fe7a <__hi0bits+0x36>
 800fe4c:	0403      	lsls	r3, r0, #16
 800fe4e:	2010      	movs	r0, #16
 800fe50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fe54:	bf04      	itt	eq
 800fe56:	021b      	lsleq	r3, r3, #8
 800fe58:	3008      	addeq	r0, #8
 800fe5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fe5e:	bf04      	itt	eq
 800fe60:	011b      	lsleq	r3, r3, #4
 800fe62:	3004      	addeq	r0, #4
 800fe64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fe68:	bf04      	itt	eq
 800fe6a:	009b      	lsleq	r3, r3, #2
 800fe6c:	3002      	addeq	r0, #2
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	db06      	blt.n	800fe80 <__hi0bits+0x3c>
 800fe72:	005b      	lsls	r3, r3, #1
 800fe74:	d503      	bpl.n	800fe7e <__hi0bits+0x3a>
 800fe76:	3001      	adds	r0, #1
 800fe78:	4770      	bx	lr
 800fe7a:	2000      	movs	r0, #0
 800fe7c:	e7e8      	b.n	800fe50 <__hi0bits+0xc>
 800fe7e:	2020      	movs	r0, #32
 800fe80:	4770      	bx	lr

0800fe82 <__lo0bits>:
 800fe82:	6803      	ldr	r3, [r0, #0]
 800fe84:	f013 0207 	ands.w	r2, r3, #7
 800fe88:	4601      	mov	r1, r0
 800fe8a:	d00b      	beq.n	800fea4 <__lo0bits+0x22>
 800fe8c:	07da      	lsls	r2, r3, #31
 800fe8e:	d423      	bmi.n	800fed8 <__lo0bits+0x56>
 800fe90:	0798      	lsls	r0, r3, #30
 800fe92:	bf49      	itett	mi
 800fe94:	085b      	lsrmi	r3, r3, #1
 800fe96:	089b      	lsrpl	r3, r3, #2
 800fe98:	2001      	movmi	r0, #1
 800fe9a:	600b      	strmi	r3, [r1, #0]
 800fe9c:	bf5c      	itt	pl
 800fe9e:	600b      	strpl	r3, [r1, #0]
 800fea0:	2002      	movpl	r0, #2
 800fea2:	4770      	bx	lr
 800fea4:	b298      	uxth	r0, r3
 800fea6:	b9a8      	cbnz	r0, 800fed4 <__lo0bits+0x52>
 800fea8:	0c1b      	lsrs	r3, r3, #16
 800feaa:	2010      	movs	r0, #16
 800feac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800feb0:	bf04      	itt	eq
 800feb2:	0a1b      	lsreq	r3, r3, #8
 800feb4:	3008      	addeq	r0, #8
 800feb6:	071a      	lsls	r2, r3, #28
 800feb8:	bf04      	itt	eq
 800feba:	091b      	lsreq	r3, r3, #4
 800febc:	3004      	addeq	r0, #4
 800febe:	079a      	lsls	r2, r3, #30
 800fec0:	bf04      	itt	eq
 800fec2:	089b      	lsreq	r3, r3, #2
 800fec4:	3002      	addeq	r0, #2
 800fec6:	07da      	lsls	r2, r3, #31
 800fec8:	d402      	bmi.n	800fed0 <__lo0bits+0x4e>
 800feca:	085b      	lsrs	r3, r3, #1
 800fecc:	d006      	beq.n	800fedc <__lo0bits+0x5a>
 800fece:	3001      	adds	r0, #1
 800fed0:	600b      	str	r3, [r1, #0]
 800fed2:	4770      	bx	lr
 800fed4:	4610      	mov	r0, r2
 800fed6:	e7e9      	b.n	800feac <__lo0bits+0x2a>
 800fed8:	2000      	movs	r0, #0
 800feda:	4770      	bx	lr
 800fedc:	2020      	movs	r0, #32
 800fede:	4770      	bx	lr

0800fee0 <__i2b>:
 800fee0:	b510      	push	{r4, lr}
 800fee2:	460c      	mov	r4, r1
 800fee4:	2101      	movs	r1, #1
 800fee6:	f7ff fee9 	bl	800fcbc <_Balloc>
 800feea:	2201      	movs	r2, #1
 800feec:	6144      	str	r4, [r0, #20]
 800feee:	6102      	str	r2, [r0, #16]
 800fef0:	bd10      	pop	{r4, pc}

0800fef2 <__multiply>:
 800fef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef6:	4614      	mov	r4, r2
 800fef8:	690a      	ldr	r2, [r1, #16]
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	bfb8      	it	lt
 800ff00:	460b      	movlt	r3, r1
 800ff02:	4688      	mov	r8, r1
 800ff04:	bfbc      	itt	lt
 800ff06:	46a0      	movlt	r8, r4
 800ff08:	461c      	movlt	r4, r3
 800ff0a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff16:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff1a:	eb07 0609 	add.w	r6, r7, r9
 800ff1e:	42b3      	cmp	r3, r6
 800ff20:	bfb8      	it	lt
 800ff22:	3101      	addlt	r1, #1
 800ff24:	f7ff feca 	bl	800fcbc <_Balloc>
 800ff28:	f100 0514 	add.w	r5, r0, #20
 800ff2c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ff30:	462b      	mov	r3, r5
 800ff32:	2200      	movs	r2, #0
 800ff34:	4573      	cmp	r3, lr
 800ff36:	d316      	bcc.n	800ff66 <__multiply+0x74>
 800ff38:	f104 0214 	add.w	r2, r4, #20
 800ff3c:	f108 0114 	add.w	r1, r8, #20
 800ff40:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ff44:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	9b00      	ldr	r3, [sp, #0]
 800ff4c:	9201      	str	r2, [sp, #4]
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d80c      	bhi.n	800ff6c <__multiply+0x7a>
 800ff52:	2e00      	cmp	r6, #0
 800ff54:	dd03      	ble.n	800ff5e <__multiply+0x6c>
 800ff56:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d05d      	beq.n	801001a <__multiply+0x128>
 800ff5e:	6106      	str	r6, [r0, #16]
 800ff60:	b003      	add	sp, #12
 800ff62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff66:	f843 2b04 	str.w	r2, [r3], #4
 800ff6a:	e7e3      	b.n	800ff34 <__multiply+0x42>
 800ff6c:	f8b2 b000 	ldrh.w	fp, [r2]
 800ff70:	f1bb 0f00 	cmp.w	fp, #0
 800ff74:	d023      	beq.n	800ffbe <__multiply+0xcc>
 800ff76:	4689      	mov	r9, r1
 800ff78:	46ac      	mov	ip, r5
 800ff7a:	f04f 0800 	mov.w	r8, #0
 800ff7e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ff82:	f8dc a000 	ldr.w	sl, [ip]
 800ff86:	b2a3      	uxth	r3, r4
 800ff88:	fa1f fa8a 	uxth.w	sl, sl
 800ff8c:	fb0b a303 	mla	r3, fp, r3, sl
 800ff90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ff94:	f8dc 4000 	ldr.w	r4, [ip]
 800ff98:	4443      	add	r3, r8
 800ff9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ff9e:	fb0b 840a 	mla	r4, fp, sl, r8
 800ffa2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ffa6:	46e2      	mov	sl, ip
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ffae:	454f      	cmp	r7, r9
 800ffb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ffb4:	f84a 3b04 	str.w	r3, [sl], #4
 800ffb8:	d82b      	bhi.n	8010012 <__multiply+0x120>
 800ffba:	f8cc 8004 	str.w	r8, [ip, #4]
 800ffbe:	9b01      	ldr	r3, [sp, #4]
 800ffc0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ffc4:	3204      	adds	r2, #4
 800ffc6:	f1ba 0f00 	cmp.w	sl, #0
 800ffca:	d020      	beq.n	801000e <__multiply+0x11c>
 800ffcc:	682b      	ldr	r3, [r5, #0]
 800ffce:	4689      	mov	r9, r1
 800ffd0:	46a8      	mov	r8, r5
 800ffd2:	f04f 0b00 	mov.w	fp, #0
 800ffd6:	f8b9 c000 	ldrh.w	ip, [r9]
 800ffda:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ffde:	fb0a 440c 	mla	r4, sl, ip, r4
 800ffe2:	445c      	add	r4, fp
 800ffe4:	46c4      	mov	ip, r8
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ffec:	f84c 3b04 	str.w	r3, [ip], #4
 800fff0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fff4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fff8:	0c1b      	lsrs	r3, r3, #16
 800fffa:	fb0a b303 	mla	r3, sl, r3, fp
 800fffe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010002:	454f      	cmp	r7, r9
 8010004:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010008:	d805      	bhi.n	8010016 <__multiply+0x124>
 801000a:	f8c8 3004 	str.w	r3, [r8, #4]
 801000e:	3504      	adds	r5, #4
 8010010:	e79b      	b.n	800ff4a <__multiply+0x58>
 8010012:	46d4      	mov	ip, sl
 8010014:	e7b3      	b.n	800ff7e <__multiply+0x8c>
 8010016:	46e0      	mov	r8, ip
 8010018:	e7dd      	b.n	800ffd6 <__multiply+0xe4>
 801001a:	3e01      	subs	r6, #1
 801001c:	e799      	b.n	800ff52 <__multiply+0x60>
	...

08010020 <__pow5mult>:
 8010020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010024:	4615      	mov	r5, r2
 8010026:	f012 0203 	ands.w	r2, r2, #3
 801002a:	4606      	mov	r6, r0
 801002c:	460f      	mov	r7, r1
 801002e:	d007      	beq.n	8010040 <__pow5mult+0x20>
 8010030:	3a01      	subs	r2, #1
 8010032:	4c21      	ldr	r4, [pc, #132]	; (80100b8 <__pow5mult+0x98>)
 8010034:	2300      	movs	r3, #0
 8010036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801003a:	f7ff fe8a 	bl	800fd52 <__multadd>
 801003e:	4607      	mov	r7, r0
 8010040:	10ad      	asrs	r5, r5, #2
 8010042:	d035      	beq.n	80100b0 <__pow5mult+0x90>
 8010044:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010046:	b93c      	cbnz	r4, 8010058 <__pow5mult+0x38>
 8010048:	2010      	movs	r0, #16
 801004a:	f7ff fe1d 	bl	800fc88 <malloc>
 801004e:	6270      	str	r0, [r6, #36]	; 0x24
 8010050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010054:	6004      	str	r4, [r0, #0]
 8010056:	60c4      	str	r4, [r0, #12]
 8010058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801005c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010060:	b94c      	cbnz	r4, 8010076 <__pow5mult+0x56>
 8010062:	f240 2171 	movw	r1, #625	; 0x271
 8010066:	4630      	mov	r0, r6
 8010068:	f7ff ff3a 	bl	800fee0 <__i2b>
 801006c:	2300      	movs	r3, #0
 801006e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010072:	4604      	mov	r4, r0
 8010074:	6003      	str	r3, [r0, #0]
 8010076:	f04f 0800 	mov.w	r8, #0
 801007a:	07eb      	lsls	r3, r5, #31
 801007c:	d50a      	bpl.n	8010094 <__pow5mult+0x74>
 801007e:	4639      	mov	r1, r7
 8010080:	4622      	mov	r2, r4
 8010082:	4630      	mov	r0, r6
 8010084:	f7ff ff35 	bl	800fef2 <__multiply>
 8010088:	4639      	mov	r1, r7
 801008a:	4681      	mov	r9, r0
 801008c:	4630      	mov	r0, r6
 801008e:	f7ff fe49 	bl	800fd24 <_Bfree>
 8010092:	464f      	mov	r7, r9
 8010094:	106d      	asrs	r5, r5, #1
 8010096:	d00b      	beq.n	80100b0 <__pow5mult+0x90>
 8010098:	6820      	ldr	r0, [r4, #0]
 801009a:	b938      	cbnz	r0, 80100ac <__pow5mult+0x8c>
 801009c:	4622      	mov	r2, r4
 801009e:	4621      	mov	r1, r4
 80100a0:	4630      	mov	r0, r6
 80100a2:	f7ff ff26 	bl	800fef2 <__multiply>
 80100a6:	6020      	str	r0, [r4, #0]
 80100a8:	f8c0 8000 	str.w	r8, [r0]
 80100ac:	4604      	mov	r4, r0
 80100ae:	e7e4      	b.n	801007a <__pow5mult+0x5a>
 80100b0:	4638      	mov	r0, r7
 80100b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b6:	bf00      	nop
 80100b8:	080115e0 	.word	0x080115e0

080100bc <__lshift>:
 80100bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c0:	460c      	mov	r4, r1
 80100c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100c6:	6923      	ldr	r3, [r4, #16]
 80100c8:	6849      	ldr	r1, [r1, #4]
 80100ca:	eb0a 0903 	add.w	r9, sl, r3
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	4607      	mov	r7, r0
 80100d2:	4616      	mov	r6, r2
 80100d4:	f109 0501 	add.w	r5, r9, #1
 80100d8:	42ab      	cmp	r3, r5
 80100da:	db32      	blt.n	8010142 <__lshift+0x86>
 80100dc:	4638      	mov	r0, r7
 80100de:	f7ff fded 	bl	800fcbc <_Balloc>
 80100e2:	2300      	movs	r3, #0
 80100e4:	4680      	mov	r8, r0
 80100e6:	f100 0114 	add.w	r1, r0, #20
 80100ea:	461a      	mov	r2, r3
 80100ec:	4553      	cmp	r3, sl
 80100ee:	db2b      	blt.n	8010148 <__lshift+0x8c>
 80100f0:	6920      	ldr	r0, [r4, #16]
 80100f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100f6:	f104 0314 	add.w	r3, r4, #20
 80100fa:	f016 021f 	ands.w	r2, r6, #31
 80100fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010102:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010106:	d025      	beq.n	8010154 <__lshift+0x98>
 8010108:	f1c2 0e20 	rsb	lr, r2, #32
 801010c:	2000      	movs	r0, #0
 801010e:	681e      	ldr	r6, [r3, #0]
 8010110:	468a      	mov	sl, r1
 8010112:	4096      	lsls	r6, r2
 8010114:	4330      	orrs	r0, r6
 8010116:	f84a 0b04 	str.w	r0, [sl], #4
 801011a:	f853 0b04 	ldr.w	r0, [r3], #4
 801011e:	459c      	cmp	ip, r3
 8010120:	fa20 f00e 	lsr.w	r0, r0, lr
 8010124:	d814      	bhi.n	8010150 <__lshift+0x94>
 8010126:	6048      	str	r0, [r1, #4]
 8010128:	b108      	cbz	r0, 801012e <__lshift+0x72>
 801012a:	f109 0502 	add.w	r5, r9, #2
 801012e:	3d01      	subs	r5, #1
 8010130:	4638      	mov	r0, r7
 8010132:	f8c8 5010 	str.w	r5, [r8, #16]
 8010136:	4621      	mov	r1, r4
 8010138:	f7ff fdf4 	bl	800fd24 <_Bfree>
 801013c:	4640      	mov	r0, r8
 801013e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010142:	3101      	adds	r1, #1
 8010144:	005b      	lsls	r3, r3, #1
 8010146:	e7c7      	b.n	80100d8 <__lshift+0x1c>
 8010148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801014c:	3301      	adds	r3, #1
 801014e:	e7cd      	b.n	80100ec <__lshift+0x30>
 8010150:	4651      	mov	r1, sl
 8010152:	e7dc      	b.n	801010e <__lshift+0x52>
 8010154:	3904      	subs	r1, #4
 8010156:	f853 2b04 	ldr.w	r2, [r3], #4
 801015a:	f841 2f04 	str.w	r2, [r1, #4]!
 801015e:	459c      	cmp	ip, r3
 8010160:	d8f9      	bhi.n	8010156 <__lshift+0x9a>
 8010162:	e7e4      	b.n	801012e <__lshift+0x72>

08010164 <__mcmp>:
 8010164:	6903      	ldr	r3, [r0, #16]
 8010166:	690a      	ldr	r2, [r1, #16]
 8010168:	1a9b      	subs	r3, r3, r2
 801016a:	b530      	push	{r4, r5, lr}
 801016c:	d10c      	bne.n	8010188 <__mcmp+0x24>
 801016e:	0092      	lsls	r2, r2, #2
 8010170:	3014      	adds	r0, #20
 8010172:	3114      	adds	r1, #20
 8010174:	1884      	adds	r4, r0, r2
 8010176:	4411      	add	r1, r2
 8010178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801017c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010180:	4295      	cmp	r5, r2
 8010182:	d003      	beq.n	801018c <__mcmp+0x28>
 8010184:	d305      	bcc.n	8010192 <__mcmp+0x2e>
 8010186:	2301      	movs	r3, #1
 8010188:	4618      	mov	r0, r3
 801018a:	bd30      	pop	{r4, r5, pc}
 801018c:	42a0      	cmp	r0, r4
 801018e:	d3f3      	bcc.n	8010178 <__mcmp+0x14>
 8010190:	e7fa      	b.n	8010188 <__mcmp+0x24>
 8010192:	f04f 33ff 	mov.w	r3, #4294967295
 8010196:	e7f7      	b.n	8010188 <__mcmp+0x24>

08010198 <__mdiff>:
 8010198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801019c:	460d      	mov	r5, r1
 801019e:	4607      	mov	r7, r0
 80101a0:	4611      	mov	r1, r2
 80101a2:	4628      	mov	r0, r5
 80101a4:	4614      	mov	r4, r2
 80101a6:	f7ff ffdd 	bl	8010164 <__mcmp>
 80101aa:	1e06      	subs	r6, r0, #0
 80101ac:	d108      	bne.n	80101c0 <__mdiff+0x28>
 80101ae:	4631      	mov	r1, r6
 80101b0:	4638      	mov	r0, r7
 80101b2:	f7ff fd83 	bl	800fcbc <_Balloc>
 80101b6:	2301      	movs	r3, #1
 80101b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80101bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c0:	bfa4      	itt	ge
 80101c2:	4623      	movge	r3, r4
 80101c4:	462c      	movge	r4, r5
 80101c6:	4638      	mov	r0, r7
 80101c8:	6861      	ldr	r1, [r4, #4]
 80101ca:	bfa6      	itte	ge
 80101cc:	461d      	movge	r5, r3
 80101ce:	2600      	movge	r6, #0
 80101d0:	2601      	movlt	r6, #1
 80101d2:	f7ff fd73 	bl	800fcbc <_Balloc>
 80101d6:	692b      	ldr	r3, [r5, #16]
 80101d8:	60c6      	str	r6, [r0, #12]
 80101da:	6926      	ldr	r6, [r4, #16]
 80101dc:	f105 0914 	add.w	r9, r5, #20
 80101e0:	f104 0214 	add.w	r2, r4, #20
 80101e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80101e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80101ec:	f100 0514 	add.w	r5, r0, #20
 80101f0:	f04f 0e00 	mov.w	lr, #0
 80101f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80101f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80101fc:	fa1e f18a 	uxtah	r1, lr, sl
 8010200:	b2a3      	uxth	r3, r4
 8010202:	1ac9      	subs	r1, r1, r3
 8010204:	0c23      	lsrs	r3, r4, #16
 8010206:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801020a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801020e:	b289      	uxth	r1, r1
 8010210:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010214:	45c8      	cmp	r8, r9
 8010216:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801021a:	4694      	mov	ip, r2
 801021c:	f845 3b04 	str.w	r3, [r5], #4
 8010220:	d8e8      	bhi.n	80101f4 <__mdiff+0x5c>
 8010222:	45bc      	cmp	ip, r7
 8010224:	d304      	bcc.n	8010230 <__mdiff+0x98>
 8010226:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801022a:	b183      	cbz	r3, 801024e <__mdiff+0xb6>
 801022c:	6106      	str	r6, [r0, #16]
 801022e:	e7c5      	b.n	80101bc <__mdiff+0x24>
 8010230:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010234:	fa1e f381 	uxtah	r3, lr, r1
 8010238:	141a      	asrs	r2, r3, #16
 801023a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801023e:	b29b      	uxth	r3, r3
 8010240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010244:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010248:	f845 3b04 	str.w	r3, [r5], #4
 801024c:	e7e9      	b.n	8010222 <__mdiff+0x8a>
 801024e:	3e01      	subs	r6, #1
 8010250:	e7e9      	b.n	8010226 <__mdiff+0x8e>
	...

08010254 <__ulp>:
 8010254:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <__ulp+0x4c>)
 8010256:	ee10 2a90 	vmov	r2, s1
 801025a:	401a      	ands	r2, r3
 801025c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010260:	2b00      	cmp	r3, #0
 8010262:	dd04      	ble.n	801026e <__ulp+0x1a>
 8010264:	2000      	movs	r0, #0
 8010266:	4619      	mov	r1, r3
 8010268:	ec41 0b10 	vmov	d0, r0, r1
 801026c:	4770      	bx	lr
 801026e:	425b      	negs	r3, r3
 8010270:	151b      	asrs	r3, r3, #20
 8010272:	2b13      	cmp	r3, #19
 8010274:	f04f 0000 	mov.w	r0, #0
 8010278:	f04f 0100 	mov.w	r1, #0
 801027c:	dc04      	bgt.n	8010288 <__ulp+0x34>
 801027e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010282:	fa42 f103 	asr.w	r1, r2, r3
 8010286:	e7ef      	b.n	8010268 <__ulp+0x14>
 8010288:	3b14      	subs	r3, #20
 801028a:	2b1e      	cmp	r3, #30
 801028c:	f04f 0201 	mov.w	r2, #1
 8010290:	bfda      	itte	le
 8010292:	f1c3 031f 	rsble	r3, r3, #31
 8010296:	fa02 f303 	lslle.w	r3, r2, r3
 801029a:	4613      	movgt	r3, r2
 801029c:	4618      	mov	r0, r3
 801029e:	e7e3      	b.n	8010268 <__ulp+0x14>
 80102a0:	7ff00000 	.word	0x7ff00000

080102a4 <__b2d>:
 80102a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a6:	6905      	ldr	r5, [r0, #16]
 80102a8:	f100 0714 	add.w	r7, r0, #20
 80102ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80102b0:	1f2e      	subs	r6, r5, #4
 80102b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80102b6:	4620      	mov	r0, r4
 80102b8:	f7ff fdc4 	bl	800fe44 <__hi0bits>
 80102bc:	f1c0 0320 	rsb	r3, r0, #32
 80102c0:	280a      	cmp	r0, #10
 80102c2:	600b      	str	r3, [r1, #0]
 80102c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801033c <__b2d+0x98>
 80102c8:	dc14      	bgt.n	80102f4 <__b2d+0x50>
 80102ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80102ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80102d2:	42b7      	cmp	r7, r6
 80102d4:	ea41 030c 	orr.w	r3, r1, ip
 80102d8:	bf34      	ite	cc
 80102da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80102de:	2100      	movcs	r1, #0
 80102e0:	3015      	adds	r0, #21
 80102e2:	fa04 f000 	lsl.w	r0, r4, r0
 80102e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80102ea:	ea40 0201 	orr.w	r2, r0, r1
 80102ee:	ec43 2b10 	vmov	d0, r2, r3
 80102f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102f4:	42b7      	cmp	r7, r6
 80102f6:	bf3a      	itte	cc
 80102f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80102fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010300:	2100      	movcs	r1, #0
 8010302:	380b      	subs	r0, #11
 8010304:	d015      	beq.n	8010332 <__b2d+0x8e>
 8010306:	4084      	lsls	r4, r0
 8010308:	f1c0 0520 	rsb	r5, r0, #32
 801030c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010310:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010314:	42be      	cmp	r6, r7
 8010316:	fa21 fc05 	lsr.w	ip, r1, r5
 801031a:	ea44 030c 	orr.w	r3, r4, ip
 801031e:	bf8c      	ite	hi
 8010320:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010324:	2400      	movls	r4, #0
 8010326:	fa01 f000 	lsl.w	r0, r1, r0
 801032a:	40ec      	lsrs	r4, r5
 801032c:	ea40 0204 	orr.w	r2, r0, r4
 8010330:	e7dd      	b.n	80102ee <__b2d+0x4a>
 8010332:	ea44 030c 	orr.w	r3, r4, ip
 8010336:	460a      	mov	r2, r1
 8010338:	e7d9      	b.n	80102ee <__b2d+0x4a>
 801033a:	bf00      	nop
 801033c:	3ff00000 	.word	0x3ff00000

08010340 <__d2b>:
 8010340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010344:	460e      	mov	r6, r1
 8010346:	2101      	movs	r1, #1
 8010348:	ec59 8b10 	vmov	r8, r9, d0
 801034c:	4615      	mov	r5, r2
 801034e:	f7ff fcb5 	bl	800fcbc <_Balloc>
 8010352:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010356:	4607      	mov	r7, r0
 8010358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801035c:	bb34      	cbnz	r4, 80103ac <__d2b+0x6c>
 801035e:	9301      	str	r3, [sp, #4]
 8010360:	f1b8 0300 	subs.w	r3, r8, #0
 8010364:	d027      	beq.n	80103b6 <__d2b+0x76>
 8010366:	a802      	add	r0, sp, #8
 8010368:	f840 3d08 	str.w	r3, [r0, #-8]!
 801036c:	f7ff fd89 	bl	800fe82 <__lo0bits>
 8010370:	9900      	ldr	r1, [sp, #0]
 8010372:	b1f0      	cbz	r0, 80103b2 <__d2b+0x72>
 8010374:	9a01      	ldr	r2, [sp, #4]
 8010376:	f1c0 0320 	rsb	r3, r0, #32
 801037a:	fa02 f303 	lsl.w	r3, r2, r3
 801037e:	430b      	orrs	r3, r1
 8010380:	40c2      	lsrs	r2, r0
 8010382:	617b      	str	r3, [r7, #20]
 8010384:	9201      	str	r2, [sp, #4]
 8010386:	9b01      	ldr	r3, [sp, #4]
 8010388:	61bb      	str	r3, [r7, #24]
 801038a:	2b00      	cmp	r3, #0
 801038c:	bf14      	ite	ne
 801038e:	2102      	movne	r1, #2
 8010390:	2101      	moveq	r1, #1
 8010392:	6139      	str	r1, [r7, #16]
 8010394:	b1c4      	cbz	r4, 80103c8 <__d2b+0x88>
 8010396:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801039a:	4404      	add	r4, r0
 801039c:	6034      	str	r4, [r6, #0]
 801039e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80103a2:	6028      	str	r0, [r5, #0]
 80103a4:	4638      	mov	r0, r7
 80103a6:	b003      	add	sp, #12
 80103a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103b0:	e7d5      	b.n	801035e <__d2b+0x1e>
 80103b2:	6179      	str	r1, [r7, #20]
 80103b4:	e7e7      	b.n	8010386 <__d2b+0x46>
 80103b6:	a801      	add	r0, sp, #4
 80103b8:	f7ff fd63 	bl	800fe82 <__lo0bits>
 80103bc:	9b01      	ldr	r3, [sp, #4]
 80103be:	617b      	str	r3, [r7, #20]
 80103c0:	2101      	movs	r1, #1
 80103c2:	6139      	str	r1, [r7, #16]
 80103c4:	3020      	adds	r0, #32
 80103c6:	e7e5      	b.n	8010394 <__d2b+0x54>
 80103c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80103cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103d0:	6030      	str	r0, [r6, #0]
 80103d2:	6918      	ldr	r0, [r3, #16]
 80103d4:	f7ff fd36 	bl	800fe44 <__hi0bits>
 80103d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80103dc:	e7e1      	b.n	80103a2 <__d2b+0x62>

080103de <__ratio>:
 80103de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e2:	4688      	mov	r8, r1
 80103e4:	4669      	mov	r1, sp
 80103e6:	4681      	mov	r9, r0
 80103e8:	f7ff ff5c 	bl	80102a4 <__b2d>
 80103ec:	a901      	add	r1, sp, #4
 80103ee:	4640      	mov	r0, r8
 80103f0:	ec57 6b10 	vmov	r6, r7, d0
 80103f4:	f7ff ff56 	bl	80102a4 <__b2d>
 80103f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010400:	eba3 0c02 	sub.w	ip, r3, r2
 8010404:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010408:	1a9b      	subs	r3, r3, r2
 801040a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801040e:	ec5b ab10 	vmov	sl, fp, d0
 8010412:	2b00      	cmp	r3, #0
 8010414:	bfce      	itee	gt
 8010416:	463a      	movgt	r2, r7
 8010418:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801041c:	465a      	movle	r2, fp
 801041e:	4659      	mov	r1, fp
 8010420:	463d      	mov	r5, r7
 8010422:	bfd4      	ite	le
 8010424:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010428:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801042c:	4630      	mov	r0, r6
 801042e:	ee10 2a10 	vmov	r2, s0
 8010432:	460b      	mov	r3, r1
 8010434:	4629      	mov	r1, r5
 8010436:	f7f0 fa09 	bl	800084c <__aeabi_ddiv>
 801043a:	ec41 0b10 	vmov	d0, r0, r1
 801043e:	b003      	add	sp, #12
 8010440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010444 <__copybits>:
 8010444:	3901      	subs	r1, #1
 8010446:	b510      	push	{r4, lr}
 8010448:	1149      	asrs	r1, r1, #5
 801044a:	6914      	ldr	r4, [r2, #16]
 801044c:	3101      	adds	r1, #1
 801044e:	f102 0314 	add.w	r3, r2, #20
 8010452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801045a:	42a3      	cmp	r3, r4
 801045c:	4602      	mov	r2, r0
 801045e:	d303      	bcc.n	8010468 <__copybits+0x24>
 8010460:	2300      	movs	r3, #0
 8010462:	428a      	cmp	r2, r1
 8010464:	d305      	bcc.n	8010472 <__copybits+0x2e>
 8010466:	bd10      	pop	{r4, pc}
 8010468:	f853 2b04 	ldr.w	r2, [r3], #4
 801046c:	f840 2b04 	str.w	r2, [r0], #4
 8010470:	e7f3      	b.n	801045a <__copybits+0x16>
 8010472:	f842 3b04 	str.w	r3, [r2], #4
 8010476:	e7f4      	b.n	8010462 <__copybits+0x1e>

08010478 <__any_on>:
 8010478:	f100 0214 	add.w	r2, r0, #20
 801047c:	6900      	ldr	r0, [r0, #16]
 801047e:	114b      	asrs	r3, r1, #5
 8010480:	4298      	cmp	r0, r3
 8010482:	b510      	push	{r4, lr}
 8010484:	db11      	blt.n	80104aa <__any_on+0x32>
 8010486:	dd0a      	ble.n	801049e <__any_on+0x26>
 8010488:	f011 011f 	ands.w	r1, r1, #31
 801048c:	d007      	beq.n	801049e <__any_on+0x26>
 801048e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010492:	fa24 f001 	lsr.w	r0, r4, r1
 8010496:	fa00 f101 	lsl.w	r1, r0, r1
 801049a:	428c      	cmp	r4, r1
 801049c:	d10b      	bne.n	80104b6 <__any_on+0x3e>
 801049e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d803      	bhi.n	80104ae <__any_on+0x36>
 80104a6:	2000      	movs	r0, #0
 80104a8:	bd10      	pop	{r4, pc}
 80104aa:	4603      	mov	r3, r0
 80104ac:	e7f7      	b.n	801049e <__any_on+0x26>
 80104ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104b2:	2900      	cmp	r1, #0
 80104b4:	d0f5      	beq.n	80104a2 <__any_on+0x2a>
 80104b6:	2001      	movs	r0, #1
 80104b8:	e7f6      	b.n	80104a8 <__any_on+0x30>

080104ba <_calloc_r>:
 80104ba:	b538      	push	{r3, r4, r5, lr}
 80104bc:	fb02 f401 	mul.w	r4, r2, r1
 80104c0:	4621      	mov	r1, r4
 80104c2:	f000 f857 	bl	8010574 <_malloc_r>
 80104c6:	4605      	mov	r5, r0
 80104c8:	b118      	cbz	r0, 80104d2 <_calloc_r+0x18>
 80104ca:	4622      	mov	r2, r4
 80104cc:	2100      	movs	r1, #0
 80104ce:	f7fc fa24 	bl	800c91a <memset>
 80104d2:	4628      	mov	r0, r5
 80104d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080104d8 <_free_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4605      	mov	r5, r0
 80104dc:	2900      	cmp	r1, #0
 80104de:	d045      	beq.n	801056c <_free_r+0x94>
 80104e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104e4:	1f0c      	subs	r4, r1, #4
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	bfb8      	it	lt
 80104ea:	18e4      	addlt	r4, r4, r3
 80104ec:	f000 fc0f 	bl	8010d0e <__malloc_lock>
 80104f0:	4a1f      	ldr	r2, [pc, #124]	; (8010570 <_free_r+0x98>)
 80104f2:	6813      	ldr	r3, [r2, #0]
 80104f4:	4610      	mov	r0, r2
 80104f6:	b933      	cbnz	r3, 8010506 <_free_r+0x2e>
 80104f8:	6063      	str	r3, [r4, #4]
 80104fa:	6014      	str	r4, [r2, #0]
 80104fc:	4628      	mov	r0, r5
 80104fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010502:	f000 bc05 	b.w	8010d10 <__malloc_unlock>
 8010506:	42a3      	cmp	r3, r4
 8010508:	d90c      	bls.n	8010524 <_free_r+0x4c>
 801050a:	6821      	ldr	r1, [r4, #0]
 801050c:	1862      	adds	r2, r4, r1
 801050e:	4293      	cmp	r3, r2
 8010510:	bf04      	itt	eq
 8010512:	681a      	ldreq	r2, [r3, #0]
 8010514:	685b      	ldreq	r3, [r3, #4]
 8010516:	6063      	str	r3, [r4, #4]
 8010518:	bf04      	itt	eq
 801051a:	1852      	addeq	r2, r2, r1
 801051c:	6022      	streq	r2, [r4, #0]
 801051e:	6004      	str	r4, [r0, #0]
 8010520:	e7ec      	b.n	80104fc <_free_r+0x24>
 8010522:	4613      	mov	r3, r2
 8010524:	685a      	ldr	r2, [r3, #4]
 8010526:	b10a      	cbz	r2, 801052c <_free_r+0x54>
 8010528:	42a2      	cmp	r2, r4
 801052a:	d9fa      	bls.n	8010522 <_free_r+0x4a>
 801052c:	6819      	ldr	r1, [r3, #0]
 801052e:	1858      	adds	r0, r3, r1
 8010530:	42a0      	cmp	r0, r4
 8010532:	d10b      	bne.n	801054c <_free_r+0x74>
 8010534:	6820      	ldr	r0, [r4, #0]
 8010536:	4401      	add	r1, r0
 8010538:	1858      	adds	r0, r3, r1
 801053a:	4282      	cmp	r2, r0
 801053c:	6019      	str	r1, [r3, #0]
 801053e:	d1dd      	bne.n	80104fc <_free_r+0x24>
 8010540:	6810      	ldr	r0, [r2, #0]
 8010542:	6852      	ldr	r2, [r2, #4]
 8010544:	605a      	str	r2, [r3, #4]
 8010546:	4401      	add	r1, r0
 8010548:	6019      	str	r1, [r3, #0]
 801054a:	e7d7      	b.n	80104fc <_free_r+0x24>
 801054c:	d902      	bls.n	8010554 <_free_r+0x7c>
 801054e:	230c      	movs	r3, #12
 8010550:	602b      	str	r3, [r5, #0]
 8010552:	e7d3      	b.n	80104fc <_free_r+0x24>
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	1821      	adds	r1, r4, r0
 8010558:	428a      	cmp	r2, r1
 801055a:	bf04      	itt	eq
 801055c:	6811      	ldreq	r1, [r2, #0]
 801055e:	6852      	ldreq	r2, [r2, #4]
 8010560:	6062      	str	r2, [r4, #4]
 8010562:	bf04      	itt	eq
 8010564:	1809      	addeq	r1, r1, r0
 8010566:	6021      	streq	r1, [r4, #0]
 8010568:	605c      	str	r4, [r3, #4]
 801056a:	e7c7      	b.n	80104fc <_free_r+0x24>
 801056c:	bd38      	pop	{r3, r4, r5, pc}
 801056e:	bf00      	nop
 8010570:	2001a594 	.word	0x2001a594

08010574 <_malloc_r>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	1ccd      	adds	r5, r1, #3
 8010578:	f025 0503 	bic.w	r5, r5, #3
 801057c:	3508      	adds	r5, #8
 801057e:	2d0c      	cmp	r5, #12
 8010580:	bf38      	it	cc
 8010582:	250c      	movcc	r5, #12
 8010584:	2d00      	cmp	r5, #0
 8010586:	4606      	mov	r6, r0
 8010588:	db01      	blt.n	801058e <_malloc_r+0x1a>
 801058a:	42a9      	cmp	r1, r5
 801058c:	d903      	bls.n	8010596 <_malloc_r+0x22>
 801058e:	230c      	movs	r3, #12
 8010590:	6033      	str	r3, [r6, #0]
 8010592:	2000      	movs	r0, #0
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	f000 fbba 	bl	8010d0e <__malloc_lock>
 801059a:	4a21      	ldr	r2, [pc, #132]	; (8010620 <_malloc_r+0xac>)
 801059c:	6814      	ldr	r4, [r2, #0]
 801059e:	4621      	mov	r1, r4
 80105a0:	b991      	cbnz	r1, 80105c8 <_malloc_r+0x54>
 80105a2:	4c20      	ldr	r4, [pc, #128]	; (8010624 <_malloc_r+0xb0>)
 80105a4:	6823      	ldr	r3, [r4, #0]
 80105a6:	b91b      	cbnz	r3, 80105b0 <_malloc_r+0x3c>
 80105a8:	4630      	mov	r0, r6
 80105aa:	f000 facf 	bl	8010b4c <_sbrk_r>
 80105ae:	6020      	str	r0, [r4, #0]
 80105b0:	4629      	mov	r1, r5
 80105b2:	4630      	mov	r0, r6
 80105b4:	f000 faca 	bl	8010b4c <_sbrk_r>
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	d124      	bne.n	8010606 <_malloc_r+0x92>
 80105bc:	230c      	movs	r3, #12
 80105be:	6033      	str	r3, [r6, #0]
 80105c0:	4630      	mov	r0, r6
 80105c2:	f000 fba5 	bl	8010d10 <__malloc_unlock>
 80105c6:	e7e4      	b.n	8010592 <_malloc_r+0x1e>
 80105c8:	680b      	ldr	r3, [r1, #0]
 80105ca:	1b5b      	subs	r3, r3, r5
 80105cc:	d418      	bmi.n	8010600 <_malloc_r+0x8c>
 80105ce:	2b0b      	cmp	r3, #11
 80105d0:	d90f      	bls.n	80105f2 <_malloc_r+0x7e>
 80105d2:	600b      	str	r3, [r1, #0]
 80105d4:	50cd      	str	r5, [r1, r3]
 80105d6:	18cc      	adds	r4, r1, r3
 80105d8:	4630      	mov	r0, r6
 80105da:	f000 fb99 	bl	8010d10 <__malloc_unlock>
 80105de:	f104 000b 	add.w	r0, r4, #11
 80105e2:	1d23      	adds	r3, r4, #4
 80105e4:	f020 0007 	bic.w	r0, r0, #7
 80105e8:	1ac3      	subs	r3, r0, r3
 80105ea:	d0d3      	beq.n	8010594 <_malloc_r+0x20>
 80105ec:	425a      	negs	r2, r3
 80105ee:	50e2      	str	r2, [r4, r3]
 80105f0:	e7d0      	b.n	8010594 <_malloc_r+0x20>
 80105f2:	428c      	cmp	r4, r1
 80105f4:	684b      	ldr	r3, [r1, #4]
 80105f6:	bf16      	itet	ne
 80105f8:	6063      	strne	r3, [r4, #4]
 80105fa:	6013      	streq	r3, [r2, #0]
 80105fc:	460c      	movne	r4, r1
 80105fe:	e7eb      	b.n	80105d8 <_malloc_r+0x64>
 8010600:	460c      	mov	r4, r1
 8010602:	6849      	ldr	r1, [r1, #4]
 8010604:	e7cc      	b.n	80105a0 <_malloc_r+0x2c>
 8010606:	1cc4      	adds	r4, r0, #3
 8010608:	f024 0403 	bic.w	r4, r4, #3
 801060c:	42a0      	cmp	r0, r4
 801060e:	d005      	beq.n	801061c <_malloc_r+0xa8>
 8010610:	1a21      	subs	r1, r4, r0
 8010612:	4630      	mov	r0, r6
 8010614:	f000 fa9a 	bl	8010b4c <_sbrk_r>
 8010618:	3001      	adds	r0, #1
 801061a:	d0cf      	beq.n	80105bc <_malloc_r+0x48>
 801061c:	6025      	str	r5, [r4, #0]
 801061e:	e7db      	b.n	80105d8 <_malloc_r+0x64>
 8010620:	2001a594 	.word	0x2001a594
 8010624:	2001a598 	.word	0x2001a598

08010628 <__ssputs_r>:
 8010628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801062c:	688e      	ldr	r6, [r1, #8]
 801062e:	429e      	cmp	r6, r3
 8010630:	4682      	mov	sl, r0
 8010632:	460c      	mov	r4, r1
 8010634:	4690      	mov	r8, r2
 8010636:	4699      	mov	r9, r3
 8010638:	d837      	bhi.n	80106aa <__ssputs_r+0x82>
 801063a:	898a      	ldrh	r2, [r1, #12]
 801063c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010640:	d031      	beq.n	80106a6 <__ssputs_r+0x7e>
 8010642:	6825      	ldr	r5, [r4, #0]
 8010644:	6909      	ldr	r1, [r1, #16]
 8010646:	1a6f      	subs	r7, r5, r1
 8010648:	6965      	ldr	r5, [r4, #20]
 801064a:	2302      	movs	r3, #2
 801064c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010650:	fb95 f5f3 	sdiv	r5, r5, r3
 8010654:	f109 0301 	add.w	r3, r9, #1
 8010658:	443b      	add	r3, r7
 801065a:	429d      	cmp	r5, r3
 801065c:	bf38      	it	cc
 801065e:	461d      	movcc	r5, r3
 8010660:	0553      	lsls	r3, r2, #21
 8010662:	d530      	bpl.n	80106c6 <__ssputs_r+0x9e>
 8010664:	4629      	mov	r1, r5
 8010666:	f7ff ff85 	bl	8010574 <_malloc_r>
 801066a:	4606      	mov	r6, r0
 801066c:	b950      	cbnz	r0, 8010684 <__ssputs_r+0x5c>
 801066e:	230c      	movs	r3, #12
 8010670:	f8ca 3000 	str.w	r3, [sl]
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	f04f 30ff 	mov.w	r0, #4294967295
 8010680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010684:	463a      	mov	r2, r7
 8010686:	6921      	ldr	r1, [r4, #16]
 8010688:	f7fc f93c 	bl	800c904 <memcpy>
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010696:	81a3      	strh	r3, [r4, #12]
 8010698:	6126      	str	r6, [r4, #16]
 801069a:	6165      	str	r5, [r4, #20]
 801069c:	443e      	add	r6, r7
 801069e:	1bed      	subs	r5, r5, r7
 80106a0:	6026      	str	r6, [r4, #0]
 80106a2:	60a5      	str	r5, [r4, #8]
 80106a4:	464e      	mov	r6, r9
 80106a6:	454e      	cmp	r6, r9
 80106a8:	d900      	bls.n	80106ac <__ssputs_r+0x84>
 80106aa:	464e      	mov	r6, r9
 80106ac:	4632      	mov	r2, r6
 80106ae:	4641      	mov	r1, r8
 80106b0:	6820      	ldr	r0, [r4, #0]
 80106b2:	f000 fb13 	bl	8010cdc <memmove>
 80106b6:	68a3      	ldr	r3, [r4, #8]
 80106b8:	1b9b      	subs	r3, r3, r6
 80106ba:	60a3      	str	r3, [r4, #8]
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	441e      	add	r6, r3
 80106c0:	6026      	str	r6, [r4, #0]
 80106c2:	2000      	movs	r0, #0
 80106c4:	e7dc      	b.n	8010680 <__ssputs_r+0x58>
 80106c6:	462a      	mov	r2, r5
 80106c8:	f000 fb23 	bl	8010d12 <_realloc_r>
 80106cc:	4606      	mov	r6, r0
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d1e2      	bne.n	8010698 <__ssputs_r+0x70>
 80106d2:	6921      	ldr	r1, [r4, #16]
 80106d4:	4650      	mov	r0, sl
 80106d6:	f7ff feff 	bl	80104d8 <_free_r>
 80106da:	e7c8      	b.n	801066e <__ssputs_r+0x46>

080106dc <_svfiprintf_r>:
 80106dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e0:	461d      	mov	r5, r3
 80106e2:	898b      	ldrh	r3, [r1, #12]
 80106e4:	061f      	lsls	r7, r3, #24
 80106e6:	b09d      	sub	sp, #116	; 0x74
 80106e8:	4680      	mov	r8, r0
 80106ea:	460c      	mov	r4, r1
 80106ec:	4616      	mov	r6, r2
 80106ee:	d50f      	bpl.n	8010710 <_svfiprintf_r+0x34>
 80106f0:	690b      	ldr	r3, [r1, #16]
 80106f2:	b96b      	cbnz	r3, 8010710 <_svfiprintf_r+0x34>
 80106f4:	2140      	movs	r1, #64	; 0x40
 80106f6:	f7ff ff3d 	bl	8010574 <_malloc_r>
 80106fa:	6020      	str	r0, [r4, #0]
 80106fc:	6120      	str	r0, [r4, #16]
 80106fe:	b928      	cbnz	r0, 801070c <_svfiprintf_r+0x30>
 8010700:	230c      	movs	r3, #12
 8010702:	f8c8 3000 	str.w	r3, [r8]
 8010706:	f04f 30ff 	mov.w	r0, #4294967295
 801070a:	e0c8      	b.n	801089e <_svfiprintf_r+0x1c2>
 801070c:	2340      	movs	r3, #64	; 0x40
 801070e:	6163      	str	r3, [r4, #20]
 8010710:	2300      	movs	r3, #0
 8010712:	9309      	str	r3, [sp, #36]	; 0x24
 8010714:	2320      	movs	r3, #32
 8010716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801071a:	2330      	movs	r3, #48	; 0x30
 801071c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010720:	9503      	str	r5, [sp, #12]
 8010722:	f04f 0b01 	mov.w	fp, #1
 8010726:	4637      	mov	r7, r6
 8010728:	463d      	mov	r5, r7
 801072a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801072e:	b10b      	cbz	r3, 8010734 <_svfiprintf_r+0x58>
 8010730:	2b25      	cmp	r3, #37	; 0x25
 8010732:	d13e      	bne.n	80107b2 <_svfiprintf_r+0xd6>
 8010734:	ebb7 0a06 	subs.w	sl, r7, r6
 8010738:	d00b      	beq.n	8010752 <_svfiprintf_r+0x76>
 801073a:	4653      	mov	r3, sl
 801073c:	4632      	mov	r2, r6
 801073e:	4621      	mov	r1, r4
 8010740:	4640      	mov	r0, r8
 8010742:	f7ff ff71 	bl	8010628 <__ssputs_r>
 8010746:	3001      	adds	r0, #1
 8010748:	f000 80a4 	beq.w	8010894 <_svfiprintf_r+0x1b8>
 801074c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801074e:	4453      	add	r3, sl
 8010750:	9309      	str	r3, [sp, #36]	; 0x24
 8010752:	783b      	ldrb	r3, [r7, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 809d 	beq.w	8010894 <_svfiprintf_r+0x1b8>
 801075a:	2300      	movs	r3, #0
 801075c:	f04f 32ff 	mov.w	r2, #4294967295
 8010760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010764:	9304      	str	r3, [sp, #16]
 8010766:	9307      	str	r3, [sp, #28]
 8010768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801076c:	931a      	str	r3, [sp, #104]	; 0x68
 801076e:	462f      	mov	r7, r5
 8010770:	2205      	movs	r2, #5
 8010772:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010776:	4850      	ldr	r0, [pc, #320]	; (80108b8 <_svfiprintf_r+0x1dc>)
 8010778:	f7ef fd32 	bl	80001e0 <memchr>
 801077c:	9b04      	ldr	r3, [sp, #16]
 801077e:	b9d0      	cbnz	r0, 80107b6 <_svfiprintf_r+0xda>
 8010780:	06d9      	lsls	r1, r3, #27
 8010782:	bf44      	itt	mi
 8010784:	2220      	movmi	r2, #32
 8010786:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801078a:	071a      	lsls	r2, r3, #28
 801078c:	bf44      	itt	mi
 801078e:	222b      	movmi	r2, #43	; 0x2b
 8010790:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010794:	782a      	ldrb	r2, [r5, #0]
 8010796:	2a2a      	cmp	r2, #42	; 0x2a
 8010798:	d015      	beq.n	80107c6 <_svfiprintf_r+0xea>
 801079a:	9a07      	ldr	r2, [sp, #28]
 801079c:	462f      	mov	r7, r5
 801079e:	2000      	movs	r0, #0
 80107a0:	250a      	movs	r5, #10
 80107a2:	4639      	mov	r1, r7
 80107a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107a8:	3b30      	subs	r3, #48	; 0x30
 80107aa:	2b09      	cmp	r3, #9
 80107ac:	d94d      	bls.n	801084a <_svfiprintf_r+0x16e>
 80107ae:	b1b8      	cbz	r0, 80107e0 <_svfiprintf_r+0x104>
 80107b0:	e00f      	b.n	80107d2 <_svfiprintf_r+0xf6>
 80107b2:	462f      	mov	r7, r5
 80107b4:	e7b8      	b.n	8010728 <_svfiprintf_r+0x4c>
 80107b6:	4a40      	ldr	r2, [pc, #256]	; (80108b8 <_svfiprintf_r+0x1dc>)
 80107b8:	1a80      	subs	r0, r0, r2
 80107ba:	fa0b f000 	lsl.w	r0, fp, r0
 80107be:	4318      	orrs	r0, r3
 80107c0:	9004      	str	r0, [sp, #16]
 80107c2:	463d      	mov	r5, r7
 80107c4:	e7d3      	b.n	801076e <_svfiprintf_r+0x92>
 80107c6:	9a03      	ldr	r2, [sp, #12]
 80107c8:	1d11      	adds	r1, r2, #4
 80107ca:	6812      	ldr	r2, [r2, #0]
 80107cc:	9103      	str	r1, [sp, #12]
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	db01      	blt.n	80107d6 <_svfiprintf_r+0xfa>
 80107d2:	9207      	str	r2, [sp, #28]
 80107d4:	e004      	b.n	80107e0 <_svfiprintf_r+0x104>
 80107d6:	4252      	negs	r2, r2
 80107d8:	f043 0302 	orr.w	r3, r3, #2
 80107dc:	9207      	str	r2, [sp, #28]
 80107de:	9304      	str	r3, [sp, #16]
 80107e0:	783b      	ldrb	r3, [r7, #0]
 80107e2:	2b2e      	cmp	r3, #46	; 0x2e
 80107e4:	d10c      	bne.n	8010800 <_svfiprintf_r+0x124>
 80107e6:	787b      	ldrb	r3, [r7, #1]
 80107e8:	2b2a      	cmp	r3, #42	; 0x2a
 80107ea:	d133      	bne.n	8010854 <_svfiprintf_r+0x178>
 80107ec:	9b03      	ldr	r3, [sp, #12]
 80107ee:	1d1a      	adds	r2, r3, #4
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	9203      	str	r2, [sp, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	bfb8      	it	lt
 80107f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80107fc:	3702      	adds	r7, #2
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	4d2e      	ldr	r5, [pc, #184]	; (80108bc <_svfiprintf_r+0x1e0>)
 8010802:	7839      	ldrb	r1, [r7, #0]
 8010804:	2203      	movs	r2, #3
 8010806:	4628      	mov	r0, r5
 8010808:	f7ef fcea 	bl	80001e0 <memchr>
 801080c:	b138      	cbz	r0, 801081e <_svfiprintf_r+0x142>
 801080e:	2340      	movs	r3, #64	; 0x40
 8010810:	1b40      	subs	r0, r0, r5
 8010812:	fa03 f000 	lsl.w	r0, r3, r0
 8010816:	9b04      	ldr	r3, [sp, #16]
 8010818:	4303      	orrs	r3, r0
 801081a:	3701      	adds	r7, #1
 801081c:	9304      	str	r3, [sp, #16]
 801081e:	7839      	ldrb	r1, [r7, #0]
 8010820:	4827      	ldr	r0, [pc, #156]	; (80108c0 <_svfiprintf_r+0x1e4>)
 8010822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010826:	2206      	movs	r2, #6
 8010828:	1c7e      	adds	r6, r7, #1
 801082a:	f7ef fcd9 	bl	80001e0 <memchr>
 801082e:	2800      	cmp	r0, #0
 8010830:	d038      	beq.n	80108a4 <_svfiprintf_r+0x1c8>
 8010832:	4b24      	ldr	r3, [pc, #144]	; (80108c4 <_svfiprintf_r+0x1e8>)
 8010834:	bb13      	cbnz	r3, 801087c <_svfiprintf_r+0x1a0>
 8010836:	9b03      	ldr	r3, [sp, #12]
 8010838:	3307      	adds	r3, #7
 801083a:	f023 0307 	bic.w	r3, r3, #7
 801083e:	3308      	adds	r3, #8
 8010840:	9303      	str	r3, [sp, #12]
 8010842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010844:	444b      	add	r3, r9
 8010846:	9309      	str	r3, [sp, #36]	; 0x24
 8010848:	e76d      	b.n	8010726 <_svfiprintf_r+0x4a>
 801084a:	fb05 3202 	mla	r2, r5, r2, r3
 801084e:	2001      	movs	r0, #1
 8010850:	460f      	mov	r7, r1
 8010852:	e7a6      	b.n	80107a2 <_svfiprintf_r+0xc6>
 8010854:	2300      	movs	r3, #0
 8010856:	3701      	adds	r7, #1
 8010858:	9305      	str	r3, [sp, #20]
 801085a:	4619      	mov	r1, r3
 801085c:	250a      	movs	r5, #10
 801085e:	4638      	mov	r0, r7
 8010860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010864:	3a30      	subs	r2, #48	; 0x30
 8010866:	2a09      	cmp	r2, #9
 8010868:	d903      	bls.n	8010872 <_svfiprintf_r+0x196>
 801086a:	2b00      	cmp	r3, #0
 801086c:	d0c8      	beq.n	8010800 <_svfiprintf_r+0x124>
 801086e:	9105      	str	r1, [sp, #20]
 8010870:	e7c6      	b.n	8010800 <_svfiprintf_r+0x124>
 8010872:	fb05 2101 	mla	r1, r5, r1, r2
 8010876:	2301      	movs	r3, #1
 8010878:	4607      	mov	r7, r0
 801087a:	e7f0      	b.n	801085e <_svfiprintf_r+0x182>
 801087c:	ab03      	add	r3, sp, #12
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	4622      	mov	r2, r4
 8010882:	4b11      	ldr	r3, [pc, #68]	; (80108c8 <_svfiprintf_r+0x1ec>)
 8010884:	a904      	add	r1, sp, #16
 8010886:	4640      	mov	r0, r8
 8010888:	f7fc f8e4 	bl	800ca54 <_printf_float>
 801088c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010890:	4681      	mov	r9, r0
 8010892:	d1d6      	bne.n	8010842 <_svfiprintf_r+0x166>
 8010894:	89a3      	ldrh	r3, [r4, #12]
 8010896:	065b      	lsls	r3, r3, #25
 8010898:	f53f af35 	bmi.w	8010706 <_svfiprintf_r+0x2a>
 801089c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801089e:	b01d      	add	sp, #116	; 0x74
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	ab03      	add	r3, sp, #12
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	4622      	mov	r2, r4
 80108aa:	4b07      	ldr	r3, [pc, #28]	; (80108c8 <_svfiprintf_r+0x1ec>)
 80108ac:	a904      	add	r1, sp, #16
 80108ae:	4640      	mov	r0, r8
 80108b0:	f7fc fb86 	bl	800cfc0 <_printf_i>
 80108b4:	e7ea      	b.n	801088c <_svfiprintf_r+0x1b0>
 80108b6:	bf00      	nop
 80108b8:	080115ec 	.word	0x080115ec
 80108bc:	080115f2 	.word	0x080115f2
 80108c0:	080115f6 	.word	0x080115f6
 80108c4:	0800ca55 	.word	0x0800ca55
 80108c8:	08010629 	.word	0x08010629

080108cc <__sfputc_r>:
 80108cc:	6893      	ldr	r3, [r2, #8]
 80108ce:	3b01      	subs	r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	b410      	push	{r4}
 80108d4:	6093      	str	r3, [r2, #8]
 80108d6:	da08      	bge.n	80108ea <__sfputc_r+0x1e>
 80108d8:	6994      	ldr	r4, [r2, #24]
 80108da:	42a3      	cmp	r3, r4
 80108dc:	db01      	blt.n	80108e2 <__sfputc_r+0x16>
 80108de:	290a      	cmp	r1, #10
 80108e0:	d103      	bne.n	80108ea <__sfputc_r+0x1e>
 80108e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108e6:	f7fd bdb1 	b.w	800e44c <__swbuf_r>
 80108ea:	6813      	ldr	r3, [r2, #0]
 80108ec:	1c58      	adds	r0, r3, #1
 80108ee:	6010      	str	r0, [r2, #0]
 80108f0:	7019      	strb	r1, [r3, #0]
 80108f2:	4608      	mov	r0, r1
 80108f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <__sfputs_r>:
 80108fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fc:	4606      	mov	r6, r0
 80108fe:	460f      	mov	r7, r1
 8010900:	4614      	mov	r4, r2
 8010902:	18d5      	adds	r5, r2, r3
 8010904:	42ac      	cmp	r4, r5
 8010906:	d101      	bne.n	801090c <__sfputs_r+0x12>
 8010908:	2000      	movs	r0, #0
 801090a:	e007      	b.n	801091c <__sfputs_r+0x22>
 801090c:	463a      	mov	r2, r7
 801090e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010912:	4630      	mov	r0, r6
 8010914:	f7ff ffda 	bl	80108cc <__sfputc_r>
 8010918:	1c43      	adds	r3, r0, #1
 801091a:	d1f3      	bne.n	8010904 <__sfputs_r+0xa>
 801091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010920 <_vfiprintf_r>:
 8010920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010924:	460c      	mov	r4, r1
 8010926:	b09d      	sub	sp, #116	; 0x74
 8010928:	4617      	mov	r7, r2
 801092a:	461d      	mov	r5, r3
 801092c:	4606      	mov	r6, r0
 801092e:	b118      	cbz	r0, 8010938 <_vfiprintf_r+0x18>
 8010930:	6983      	ldr	r3, [r0, #24]
 8010932:	b90b      	cbnz	r3, 8010938 <_vfiprintf_r+0x18>
 8010934:	f7fe fd80 	bl	800f438 <__sinit>
 8010938:	4b7c      	ldr	r3, [pc, #496]	; (8010b2c <_vfiprintf_r+0x20c>)
 801093a:	429c      	cmp	r4, r3
 801093c:	d158      	bne.n	80109f0 <_vfiprintf_r+0xd0>
 801093e:	6874      	ldr	r4, [r6, #4]
 8010940:	89a3      	ldrh	r3, [r4, #12]
 8010942:	0718      	lsls	r0, r3, #28
 8010944:	d55e      	bpl.n	8010a04 <_vfiprintf_r+0xe4>
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d05b      	beq.n	8010a04 <_vfiprintf_r+0xe4>
 801094c:	2300      	movs	r3, #0
 801094e:	9309      	str	r3, [sp, #36]	; 0x24
 8010950:	2320      	movs	r3, #32
 8010952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010956:	2330      	movs	r3, #48	; 0x30
 8010958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801095c:	9503      	str	r5, [sp, #12]
 801095e:	f04f 0b01 	mov.w	fp, #1
 8010962:	46b8      	mov	r8, r7
 8010964:	4645      	mov	r5, r8
 8010966:	f815 3b01 	ldrb.w	r3, [r5], #1
 801096a:	b10b      	cbz	r3, 8010970 <_vfiprintf_r+0x50>
 801096c:	2b25      	cmp	r3, #37	; 0x25
 801096e:	d154      	bne.n	8010a1a <_vfiprintf_r+0xfa>
 8010970:	ebb8 0a07 	subs.w	sl, r8, r7
 8010974:	d00b      	beq.n	801098e <_vfiprintf_r+0x6e>
 8010976:	4653      	mov	r3, sl
 8010978:	463a      	mov	r2, r7
 801097a:	4621      	mov	r1, r4
 801097c:	4630      	mov	r0, r6
 801097e:	f7ff ffbc 	bl	80108fa <__sfputs_r>
 8010982:	3001      	adds	r0, #1
 8010984:	f000 80c2 	beq.w	8010b0c <_vfiprintf_r+0x1ec>
 8010988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801098a:	4453      	add	r3, sl
 801098c:	9309      	str	r3, [sp, #36]	; 0x24
 801098e:	f898 3000 	ldrb.w	r3, [r8]
 8010992:	2b00      	cmp	r3, #0
 8010994:	f000 80ba 	beq.w	8010b0c <_vfiprintf_r+0x1ec>
 8010998:	2300      	movs	r3, #0
 801099a:	f04f 32ff 	mov.w	r2, #4294967295
 801099e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109a2:	9304      	str	r3, [sp, #16]
 80109a4:	9307      	str	r3, [sp, #28]
 80109a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109aa:	931a      	str	r3, [sp, #104]	; 0x68
 80109ac:	46a8      	mov	r8, r5
 80109ae:	2205      	movs	r2, #5
 80109b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80109b4:	485e      	ldr	r0, [pc, #376]	; (8010b30 <_vfiprintf_r+0x210>)
 80109b6:	f7ef fc13 	bl	80001e0 <memchr>
 80109ba:	9b04      	ldr	r3, [sp, #16]
 80109bc:	bb78      	cbnz	r0, 8010a1e <_vfiprintf_r+0xfe>
 80109be:	06d9      	lsls	r1, r3, #27
 80109c0:	bf44      	itt	mi
 80109c2:	2220      	movmi	r2, #32
 80109c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80109c8:	071a      	lsls	r2, r3, #28
 80109ca:	bf44      	itt	mi
 80109cc:	222b      	movmi	r2, #43	; 0x2b
 80109ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80109d2:	782a      	ldrb	r2, [r5, #0]
 80109d4:	2a2a      	cmp	r2, #42	; 0x2a
 80109d6:	d02a      	beq.n	8010a2e <_vfiprintf_r+0x10e>
 80109d8:	9a07      	ldr	r2, [sp, #28]
 80109da:	46a8      	mov	r8, r5
 80109dc:	2000      	movs	r0, #0
 80109de:	250a      	movs	r5, #10
 80109e0:	4641      	mov	r1, r8
 80109e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109e6:	3b30      	subs	r3, #48	; 0x30
 80109e8:	2b09      	cmp	r3, #9
 80109ea:	d969      	bls.n	8010ac0 <_vfiprintf_r+0x1a0>
 80109ec:	b360      	cbz	r0, 8010a48 <_vfiprintf_r+0x128>
 80109ee:	e024      	b.n	8010a3a <_vfiprintf_r+0x11a>
 80109f0:	4b50      	ldr	r3, [pc, #320]	; (8010b34 <_vfiprintf_r+0x214>)
 80109f2:	429c      	cmp	r4, r3
 80109f4:	d101      	bne.n	80109fa <_vfiprintf_r+0xda>
 80109f6:	68b4      	ldr	r4, [r6, #8]
 80109f8:	e7a2      	b.n	8010940 <_vfiprintf_r+0x20>
 80109fa:	4b4f      	ldr	r3, [pc, #316]	; (8010b38 <_vfiprintf_r+0x218>)
 80109fc:	429c      	cmp	r4, r3
 80109fe:	bf08      	it	eq
 8010a00:	68f4      	ldreq	r4, [r6, #12]
 8010a02:	e79d      	b.n	8010940 <_vfiprintf_r+0x20>
 8010a04:	4621      	mov	r1, r4
 8010a06:	4630      	mov	r0, r6
 8010a08:	f7fd fd72 	bl	800e4f0 <__swsetup_r>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d09d      	beq.n	801094c <_vfiprintf_r+0x2c>
 8010a10:	f04f 30ff 	mov.w	r0, #4294967295
 8010a14:	b01d      	add	sp, #116	; 0x74
 8010a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1a:	46a8      	mov	r8, r5
 8010a1c:	e7a2      	b.n	8010964 <_vfiprintf_r+0x44>
 8010a1e:	4a44      	ldr	r2, [pc, #272]	; (8010b30 <_vfiprintf_r+0x210>)
 8010a20:	1a80      	subs	r0, r0, r2
 8010a22:	fa0b f000 	lsl.w	r0, fp, r0
 8010a26:	4318      	orrs	r0, r3
 8010a28:	9004      	str	r0, [sp, #16]
 8010a2a:	4645      	mov	r5, r8
 8010a2c:	e7be      	b.n	80109ac <_vfiprintf_r+0x8c>
 8010a2e:	9a03      	ldr	r2, [sp, #12]
 8010a30:	1d11      	adds	r1, r2, #4
 8010a32:	6812      	ldr	r2, [r2, #0]
 8010a34:	9103      	str	r1, [sp, #12]
 8010a36:	2a00      	cmp	r2, #0
 8010a38:	db01      	blt.n	8010a3e <_vfiprintf_r+0x11e>
 8010a3a:	9207      	str	r2, [sp, #28]
 8010a3c:	e004      	b.n	8010a48 <_vfiprintf_r+0x128>
 8010a3e:	4252      	negs	r2, r2
 8010a40:	f043 0302 	orr.w	r3, r3, #2
 8010a44:	9207      	str	r2, [sp, #28]
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	f898 3000 	ldrb.w	r3, [r8]
 8010a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8010a4e:	d10e      	bne.n	8010a6e <_vfiprintf_r+0x14e>
 8010a50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010a54:	2b2a      	cmp	r3, #42	; 0x2a
 8010a56:	d138      	bne.n	8010aca <_vfiprintf_r+0x1aa>
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	1d1a      	adds	r2, r3, #4
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	9203      	str	r2, [sp, #12]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	bfb8      	it	lt
 8010a64:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a68:	f108 0802 	add.w	r8, r8, #2
 8010a6c:	9305      	str	r3, [sp, #20]
 8010a6e:	4d33      	ldr	r5, [pc, #204]	; (8010b3c <_vfiprintf_r+0x21c>)
 8010a70:	f898 1000 	ldrb.w	r1, [r8]
 8010a74:	2203      	movs	r2, #3
 8010a76:	4628      	mov	r0, r5
 8010a78:	f7ef fbb2 	bl	80001e0 <memchr>
 8010a7c:	b140      	cbz	r0, 8010a90 <_vfiprintf_r+0x170>
 8010a7e:	2340      	movs	r3, #64	; 0x40
 8010a80:	1b40      	subs	r0, r0, r5
 8010a82:	fa03 f000 	lsl.w	r0, r3, r0
 8010a86:	9b04      	ldr	r3, [sp, #16]
 8010a88:	4303      	orrs	r3, r0
 8010a8a:	f108 0801 	add.w	r8, r8, #1
 8010a8e:	9304      	str	r3, [sp, #16]
 8010a90:	f898 1000 	ldrb.w	r1, [r8]
 8010a94:	482a      	ldr	r0, [pc, #168]	; (8010b40 <_vfiprintf_r+0x220>)
 8010a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a9a:	2206      	movs	r2, #6
 8010a9c:	f108 0701 	add.w	r7, r8, #1
 8010aa0:	f7ef fb9e 	bl	80001e0 <memchr>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d037      	beq.n	8010b18 <_vfiprintf_r+0x1f8>
 8010aa8:	4b26      	ldr	r3, [pc, #152]	; (8010b44 <_vfiprintf_r+0x224>)
 8010aaa:	bb1b      	cbnz	r3, 8010af4 <_vfiprintf_r+0x1d4>
 8010aac:	9b03      	ldr	r3, [sp, #12]
 8010aae:	3307      	adds	r3, #7
 8010ab0:	f023 0307 	bic.w	r3, r3, #7
 8010ab4:	3308      	adds	r3, #8
 8010ab6:	9303      	str	r3, [sp, #12]
 8010ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aba:	444b      	add	r3, r9
 8010abc:	9309      	str	r3, [sp, #36]	; 0x24
 8010abe:	e750      	b.n	8010962 <_vfiprintf_r+0x42>
 8010ac0:	fb05 3202 	mla	r2, r5, r2, r3
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	4688      	mov	r8, r1
 8010ac8:	e78a      	b.n	80109e0 <_vfiprintf_r+0xc0>
 8010aca:	2300      	movs	r3, #0
 8010acc:	f108 0801 	add.w	r8, r8, #1
 8010ad0:	9305      	str	r3, [sp, #20]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	250a      	movs	r5, #10
 8010ad6:	4640      	mov	r0, r8
 8010ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010adc:	3a30      	subs	r2, #48	; 0x30
 8010ade:	2a09      	cmp	r2, #9
 8010ae0:	d903      	bls.n	8010aea <_vfiprintf_r+0x1ca>
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0c3      	beq.n	8010a6e <_vfiprintf_r+0x14e>
 8010ae6:	9105      	str	r1, [sp, #20]
 8010ae8:	e7c1      	b.n	8010a6e <_vfiprintf_r+0x14e>
 8010aea:	fb05 2101 	mla	r1, r5, r1, r2
 8010aee:	2301      	movs	r3, #1
 8010af0:	4680      	mov	r8, r0
 8010af2:	e7f0      	b.n	8010ad6 <_vfiprintf_r+0x1b6>
 8010af4:	ab03      	add	r3, sp, #12
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	4622      	mov	r2, r4
 8010afa:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <_vfiprintf_r+0x228>)
 8010afc:	a904      	add	r1, sp, #16
 8010afe:	4630      	mov	r0, r6
 8010b00:	f7fb ffa8 	bl	800ca54 <_printf_float>
 8010b04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010b08:	4681      	mov	r9, r0
 8010b0a:	d1d5      	bne.n	8010ab8 <_vfiprintf_r+0x198>
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	065b      	lsls	r3, r3, #25
 8010b10:	f53f af7e 	bmi.w	8010a10 <_vfiprintf_r+0xf0>
 8010b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b16:	e77d      	b.n	8010a14 <_vfiprintf_r+0xf4>
 8010b18:	ab03      	add	r3, sp, #12
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	4622      	mov	r2, r4
 8010b1e:	4b0a      	ldr	r3, [pc, #40]	; (8010b48 <_vfiprintf_r+0x228>)
 8010b20:	a904      	add	r1, sp, #16
 8010b22:	4630      	mov	r0, r6
 8010b24:	f7fc fa4c 	bl	800cfc0 <_printf_i>
 8010b28:	e7ec      	b.n	8010b04 <_vfiprintf_r+0x1e4>
 8010b2a:	bf00      	nop
 8010b2c:	080114a0 	.word	0x080114a0
 8010b30:	080115ec 	.word	0x080115ec
 8010b34:	080114c0 	.word	0x080114c0
 8010b38:	08011480 	.word	0x08011480
 8010b3c:	080115f2 	.word	0x080115f2
 8010b40:	080115f6 	.word	0x080115f6
 8010b44:	0800ca55 	.word	0x0800ca55
 8010b48:	080108fb 	.word	0x080108fb

08010b4c <_sbrk_r>:
 8010b4c:	b538      	push	{r3, r4, r5, lr}
 8010b4e:	4c06      	ldr	r4, [pc, #24]	; (8010b68 <_sbrk_r+0x1c>)
 8010b50:	2300      	movs	r3, #0
 8010b52:	4605      	mov	r5, r0
 8010b54:	4608      	mov	r0, r1
 8010b56:	6023      	str	r3, [r4, #0]
 8010b58:	f7f5 fd4c 	bl	80065f4 <_sbrk>
 8010b5c:	1c43      	adds	r3, r0, #1
 8010b5e:	d102      	bne.n	8010b66 <_sbrk_r+0x1a>
 8010b60:	6823      	ldr	r3, [r4, #0]
 8010b62:	b103      	cbz	r3, 8010b66 <_sbrk_r+0x1a>
 8010b64:	602b      	str	r3, [r5, #0]
 8010b66:	bd38      	pop	{r3, r4, r5, pc}
 8010b68:	2001aadc 	.word	0x2001aadc

08010b6c <__sread>:
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	460c      	mov	r4, r1
 8010b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b74:	f000 f8f4 	bl	8010d60 <_read_r>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	bfab      	itete	ge
 8010b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8010b80:	181b      	addge	r3, r3, r0
 8010b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b86:	bfac      	ite	ge
 8010b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b8a:	81a3      	strhlt	r3, [r4, #12]
 8010b8c:	bd10      	pop	{r4, pc}

08010b8e <__swrite>:
 8010b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b92:	461f      	mov	r7, r3
 8010b94:	898b      	ldrh	r3, [r1, #12]
 8010b96:	05db      	lsls	r3, r3, #23
 8010b98:	4605      	mov	r5, r0
 8010b9a:	460c      	mov	r4, r1
 8010b9c:	4616      	mov	r6, r2
 8010b9e:	d505      	bpl.n	8010bac <__swrite+0x1e>
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba8:	f000 f886 	bl	8010cb8 <_lseek_r>
 8010bac:	89a3      	ldrh	r3, [r4, #12]
 8010bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bb6:	81a3      	strh	r3, [r4, #12]
 8010bb8:	4632      	mov	r2, r6
 8010bba:	463b      	mov	r3, r7
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc2:	f000 b835 	b.w	8010c30 <_write_r>

08010bc6 <__sseek>:
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	460c      	mov	r4, r1
 8010bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bce:	f000 f873 	bl	8010cb8 <_lseek_r>
 8010bd2:	1c43      	adds	r3, r0, #1
 8010bd4:	89a3      	ldrh	r3, [r4, #12]
 8010bd6:	bf15      	itete	ne
 8010bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010be2:	81a3      	strheq	r3, [r4, #12]
 8010be4:	bf18      	it	ne
 8010be6:	81a3      	strhne	r3, [r4, #12]
 8010be8:	bd10      	pop	{r4, pc}

08010bea <__sclose>:
 8010bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bee:	f000 b831 	b.w	8010c54 <_close_r>

08010bf2 <strncmp>:
 8010bf2:	b510      	push	{r4, lr}
 8010bf4:	b16a      	cbz	r2, 8010c12 <strncmp+0x20>
 8010bf6:	3901      	subs	r1, #1
 8010bf8:	1884      	adds	r4, r0, r2
 8010bfa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010bfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d103      	bne.n	8010c0e <strncmp+0x1c>
 8010c06:	42a0      	cmp	r0, r4
 8010c08:	d001      	beq.n	8010c0e <strncmp+0x1c>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d1f5      	bne.n	8010bfa <strncmp+0x8>
 8010c0e:	1a98      	subs	r0, r3, r2
 8010c10:	bd10      	pop	{r4, pc}
 8010c12:	4610      	mov	r0, r2
 8010c14:	e7fc      	b.n	8010c10 <strncmp+0x1e>

08010c16 <__ascii_wctomb>:
 8010c16:	b149      	cbz	r1, 8010c2c <__ascii_wctomb+0x16>
 8010c18:	2aff      	cmp	r2, #255	; 0xff
 8010c1a:	bf85      	ittet	hi
 8010c1c:	238a      	movhi	r3, #138	; 0x8a
 8010c1e:	6003      	strhi	r3, [r0, #0]
 8010c20:	700a      	strbls	r2, [r1, #0]
 8010c22:	f04f 30ff 	movhi.w	r0, #4294967295
 8010c26:	bf98      	it	ls
 8010c28:	2001      	movls	r0, #1
 8010c2a:	4770      	bx	lr
 8010c2c:	4608      	mov	r0, r1
 8010c2e:	4770      	bx	lr

08010c30 <_write_r>:
 8010c30:	b538      	push	{r3, r4, r5, lr}
 8010c32:	4c07      	ldr	r4, [pc, #28]	; (8010c50 <_write_r+0x20>)
 8010c34:	4605      	mov	r5, r0
 8010c36:	4608      	mov	r0, r1
 8010c38:	4611      	mov	r1, r2
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	6022      	str	r2, [r4, #0]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	f7f5 fc87 	bl	8006552 <_write>
 8010c44:	1c43      	adds	r3, r0, #1
 8010c46:	d102      	bne.n	8010c4e <_write_r+0x1e>
 8010c48:	6823      	ldr	r3, [r4, #0]
 8010c4a:	b103      	cbz	r3, 8010c4e <_write_r+0x1e>
 8010c4c:	602b      	str	r3, [r5, #0]
 8010c4e:	bd38      	pop	{r3, r4, r5, pc}
 8010c50:	2001aadc 	.word	0x2001aadc

08010c54 <_close_r>:
 8010c54:	b538      	push	{r3, r4, r5, lr}
 8010c56:	4c06      	ldr	r4, [pc, #24]	; (8010c70 <_close_r+0x1c>)
 8010c58:	2300      	movs	r3, #0
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	4608      	mov	r0, r1
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	f7f5 fc93 	bl	800658a <_close>
 8010c64:	1c43      	adds	r3, r0, #1
 8010c66:	d102      	bne.n	8010c6e <_close_r+0x1a>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	b103      	cbz	r3, 8010c6e <_close_r+0x1a>
 8010c6c:	602b      	str	r3, [r5, #0]
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}
 8010c70:	2001aadc 	.word	0x2001aadc

08010c74 <_fstat_r>:
 8010c74:	b538      	push	{r3, r4, r5, lr}
 8010c76:	4c07      	ldr	r4, [pc, #28]	; (8010c94 <_fstat_r+0x20>)
 8010c78:	2300      	movs	r3, #0
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	4608      	mov	r0, r1
 8010c7e:	4611      	mov	r1, r2
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	f7f5 fc8e 	bl	80065a2 <_fstat>
 8010c86:	1c43      	adds	r3, r0, #1
 8010c88:	d102      	bne.n	8010c90 <_fstat_r+0x1c>
 8010c8a:	6823      	ldr	r3, [r4, #0]
 8010c8c:	b103      	cbz	r3, 8010c90 <_fstat_r+0x1c>
 8010c8e:	602b      	str	r3, [r5, #0]
 8010c90:	bd38      	pop	{r3, r4, r5, pc}
 8010c92:	bf00      	nop
 8010c94:	2001aadc 	.word	0x2001aadc

08010c98 <_isatty_r>:
 8010c98:	b538      	push	{r3, r4, r5, lr}
 8010c9a:	4c06      	ldr	r4, [pc, #24]	; (8010cb4 <_isatty_r+0x1c>)
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	4608      	mov	r0, r1
 8010ca2:	6023      	str	r3, [r4, #0]
 8010ca4:	f7f5 fc8d 	bl	80065c2 <_isatty>
 8010ca8:	1c43      	adds	r3, r0, #1
 8010caa:	d102      	bne.n	8010cb2 <_isatty_r+0x1a>
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	b103      	cbz	r3, 8010cb2 <_isatty_r+0x1a>
 8010cb0:	602b      	str	r3, [r5, #0]
 8010cb2:	bd38      	pop	{r3, r4, r5, pc}
 8010cb4:	2001aadc 	.word	0x2001aadc

08010cb8 <_lseek_r>:
 8010cb8:	b538      	push	{r3, r4, r5, lr}
 8010cba:	4c07      	ldr	r4, [pc, #28]	; (8010cd8 <_lseek_r+0x20>)
 8010cbc:	4605      	mov	r5, r0
 8010cbe:	4608      	mov	r0, r1
 8010cc0:	4611      	mov	r1, r2
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	6022      	str	r2, [r4, #0]
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	f7f5 fc86 	bl	80065d8 <_lseek>
 8010ccc:	1c43      	adds	r3, r0, #1
 8010cce:	d102      	bne.n	8010cd6 <_lseek_r+0x1e>
 8010cd0:	6823      	ldr	r3, [r4, #0]
 8010cd2:	b103      	cbz	r3, 8010cd6 <_lseek_r+0x1e>
 8010cd4:	602b      	str	r3, [r5, #0]
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	2001aadc 	.word	0x2001aadc

08010cdc <memmove>:
 8010cdc:	4288      	cmp	r0, r1
 8010cde:	b510      	push	{r4, lr}
 8010ce0:	eb01 0302 	add.w	r3, r1, r2
 8010ce4:	d807      	bhi.n	8010cf6 <memmove+0x1a>
 8010ce6:	1e42      	subs	r2, r0, #1
 8010ce8:	4299      	cmp	r1, r3
 8010cea:	d00a      	beq.n	8010d02 <memmove+0x26>
 8010cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cf0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010cf4:	e7f8      	b.n	8010ce8 <memmove+0xc>
 8010cf6:	4283      	cmp	r3, r0
 8010cf8:	d9f5      	bls.n	8010ce6 <memmove+0xa>
 8010cfa:	1881      	adds	r1, r0, r2
 8010cfc:	1ad2      	subs	r2, r2, r3
 8010cfe:	42d3      	cmn	r3, r2
 8010d00:	d100      	bne.n	8010d04 <memmove+0x28>
 8010d02:	bd10      	pop	{r4, pc}
 8010d04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010d0c:	e7f7      	b.n	8010cfe <memmove+0x22>

08010d0e <__malloc_lock>:
 8010d0e:	4770      	bx	lr

08010d10 <__malloc_unlock>:
 8010d10:	4770      	bx	lr

08010d12 <_realloc_r>:
 8010d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d14:	4607      	mov	r7, r0
 8010d16:	4614      	mov	r4, r2
 8010d18:	460e      	mov	r6, r1
 8010d1a:	b921      	cbnz	r1, 8010d26 <_realloc_r+0x14>
 8010d1c:	4611      	mov	r1, r2
 8010d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d22:	f7ff bc27 	b.w	8010574 <_malloc_r>
 8010d26:	b922      	cbnz	r2, 8010d32 <_realloc_r+0x20>
 8010d28:	f7ff fbd6 	bl	80104d8 <_free_r>
 8010d2c:	4625      	mov	r5, r4
 8010d2e:	4628      	mov	r0, r5
 8010d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d32:	f000 f827 	bl	8010d84 <_malloc_usable_size_r>
 8010d36:	42a0      	cmp	r0, r4
 8010d38:	d20f      	bcs.n	8010d5a <_realloc_r+0x48>
 8010d3a:	4621      	mov	r1, r4
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	f7ff fc19 	bl	8010574 <_malloc_r>
 8010d42:	4605      	mov	r5, r0
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d0f2      	beq.n	8010d2e <_realloc_r+0x1c>
 8010d48:	4631      	mov	r1, r6
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	f7fb fdda 	bl	800c904 <memcpy>
 8010d50:	4631      	mov	r1, r6
 8010d52:	4638      	mov	r0, r7
 8010d54:	f7ff fbc0 	bl	80104d8 <_free_r>
 8010d58:	e7e9      	b.n	8010d2e <_realloc_r+0x1c>
 8010d5a:	4635      	mov	r5, r6
 8010d5c:	e7e7      	b.n	8010d2e <_realloc_r+0x1c>
	...

08010d60 <_read_r>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	4c07      	ldr	r4, [pc, #28]	; (8010d80 <_read_r+0x20>)
 8010d64:	4605      	mov	r5, r0
 8010d66:	4608      	mov	r0, r1
 8010d68:	4611      	mov	r1, r2
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	6022      	str	r2, [r4, #0]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	f7f5 fbd2 	bl	8006518 <_read>
 8010d74:	1c43      	adds	r3, r0, #1
 8010d76:	d102      	bne.n	8010d7e <_read_r+0x1e>
 8010d78:	6823      	ldr	r3, [r4, #0]
 8010d7a:	b103      	cbz	r3, 8010d7e <_read_r+0x1e>
 8010d7c:	602b      	str	r3, [r5, #0]
 8010d7e:	bd38      	pop	{r3, r4, r5, pc}
 8010d80:	2001aadc 	.word	0x2001aadc

08010d84 <_malloc_usable_size_r>:
 8010d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d88:	1f18      	subs	r0, r3, #4
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	bfbc      	itt	lt
 8010d8e:	580b      	ldrlt	r3, [r1, r0]
 8010d90:	18c0      	addlt	r0, r0, r3
 8010d92:	4770      	bx	lr

08010d94 <_init>:
 8010d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d96:	bf00      	nop
 8010d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d9a:	bc08      	pop	{r3}
 8010d9c:	469e      	mov	lr, r3
 8010d9e:	4770      	bx	lr

08010da0 <_fini>:
 8010da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da2:	bf00      	nop
 8010da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010da6:	bc08      	pop	{r3}
 8010da8:	469e      	mov	lr, r3
 8010daa:	4770      	bx	lr

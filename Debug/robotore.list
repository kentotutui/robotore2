
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800db38  0800db38  0001db38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec0  0800dec0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec8  0800dec8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec8  0800dec8  0001dec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800ded0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c298  20000210  0800e0e0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c4a8  0800e0e0  0002c4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002103e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004588  00000000  00000000  0004127e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001880  00000000  00000000  00045808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a0  00000000  00000000  00047088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024644  00000000  00000000  00048728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000163f8  00000000  00000000  0006cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cae2d  00000000  00000000  00083164  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014df91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000773c  00000000  00000000  0014e00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db1c 	.word	0x0800db1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800db1c 	.word	0x0800db1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fb71 	bl	8001688 <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f007 f874 	bl	80081d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f007 f870 	bl	80081d8 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000c074 	.word	0x2000c074
 8001110:	2000c034 	.word	0x2000c034
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b52      	ldr	r3, [pc, #328]	; (8001270 <updateEncoderCnt+0x150>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <updateEncoderCnt+0x154>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <updateEncoderCnt+0x158>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <updateEncoderCnt+0x15c>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <updateEncoderCnt+0x160>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b47      	ldr	r3, [pc, #284]	; (8001274 <updateEncoderCnt+0x154>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <updateEncoderCnt+0x160>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <updateEncoderCnt+0x164>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <updateEncoderCnt+0x15c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <updateEncoderCnt+0x164>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <updateEncoderCnt+0x154>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <updateEncoderCnt+0x15c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a334      	add	r3, pc, #208	; (adr r3, 8001268 <updateEncoderCnt+0x148>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <updateEncoderCnt+0x168>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <updateEncoderCnt+0x16c>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <updateEncoderCnt+0x168>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <updateEncoderCnt+0x16c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <updateEncoderCnt+0x170>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <updateEncoderCnt+0x168>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <updateEncoderCnt+0x170>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <updateEncoderCnt+0x174>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <updateEncoderCnt+0x168>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <updateEncoderCnt+0x174>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <updateEncoderCnt+0x178>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <updateEncoderCnt+0x168>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <updateEncoderCnt+0x178>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <updateEncoderCnt+0x17c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <updateEncoderCnt+0x168>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <updateEncoderCnt+0x17c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <updateEncoderCnt+0x180>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <updateEncoderCnt+0x168>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <updateEncoderCnt+0x180>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <updateEncoderCnt+0x184>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <updateEncoderCnt+0x168>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <updateEncoderCnt+0x184>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
}
 8001260:	bf00      	nop
 8001262:	bd98      	pop	{r3, r4, r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	31e7b585 	.word	0x31e7b585
 800126c:	3f8e28c7 	.word	0x3f8e28c7
 8001270:	40000400 	.word	0x40000400
 8001274:	20000244 	.word	0x20000244
 8001278:	40000800 	.word	0x40000800
 800127c:	20000246 	.word	0x20000246
 8001280:	20000248 	.word	0x20000248
 8001284:	2000024a 	.word	0x2000024a
 8001288:	2000024c 	.word	0x2000024c
 800128c:	20000250 	.word	0x20000250
 8001290:	20000254 	.word	0x20000254
 8001294:	20000258 	.word	0x20000258
 8001298:	2000025c 	.word	0x2000025c
 800129c:	20000260 	.word	0x20000260
 80012a0:	20000264 	.word	0x20000264
 80012a4:	20000268 	.word	0x20000268

080012a8 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <getEncoderCnt+0x2c>)
 80012b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <getEncoderCnt+0x30>)
 80012be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000244 	.word	0x20000244
 80012d8:	20000246 	.word	0x20000246

080012dc <getGoalJudgeDistance>:

float getTotalDistance(){
	return total_distance;
}

float getGoalJudgeDistance(){
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <getGoalJudgeDistance+0x18>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
}
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	2000025c 	.word	0x2000025c

080012f8 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	total_distance = 0;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <clearTotalDistance+0x18>)
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000258 	.word	0x20000258

08001314 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <clearGoalJudgeDistance+0x18>)
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000025c 	.word	0x2000025c

08001330 <resetEncoderCnt>:
{
	distance_side_line_ignore = 0;
}

void resetEncoderCnt(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	TIM3 -> CNT = CNT_OFFSET;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <resetEncoderCnt+0x20>)
 8001336:	f242 7210 	movw	r2, #10000	; 0x2710
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <resetEncoderCnt+0x24>)
 800133e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40000400 	.word	0x40000400
 8001354:	40000800 	.word	0x40000800

08001358 <getDistance10mm>:

float getDistance10mm(void){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	return distance_10mm;
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <getDistance10mm+0x18>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	ee07 3a90 	vmov	s15, r3
}
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	20000250 	.word	0x20000250

08001374 <clearDistance10mm>:

void clearDistance10mm(void){
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <clearDistance10mm+0x18>)
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000250 	.word	0x20000250

08001390 <getspeedcount>:

float getspeedcount(void){
 8001390:	b598      	push	{r3, r4, r7, lr}
 8001392:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <getspeedcount+0x60>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800139e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	db16      	blt.n	80013d6 <getspeedcount+0x46>
		speed_cnt += 0.1;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <getspeedcount+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8cb 	bl	8000548 <__aeabi_f2d>
 80013b2:	a30d      	add	r3, pc, #52	; (adr r3, 80013e8 <getspeedcount+0x58>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7fe ff68 	bl	800028c <__adddf3>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	f7ff fc10 	bl	8000be8 <__aeabi_d2f>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <getspeedcount+0x64>)
 80013cc:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <getspeedcount+0x60>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <getspeedcount+0x64>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	ee07 3a90 	vmov	s15, r3
}
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	bd98      	pop	{r3, r4, r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	9999999a 	.word	0x9999999a
 80013ec:	3fb99999 	.word	0x3fb99999
 80013f0:	20000254 	.word	0x20000254
 80013f4:	2000026c 	.word	0x2000026c

080013f8 <clearspeedcount>:

void clearspeedcount(void){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <clearspeedcount+0x14>)
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <clearspeedcount+0x18>)
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	2000026c 	.word	0x2000026c
 8001410:	3dcccccd 	.word	0x3dcccccd

08001414 <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <FLASH_Unlock+0x1c>)
 800141a:	4a06      	ldr	r2, [pc, #24]	; (8001434 <FLASH_Unlock+0x20>)
 800141c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <FLASH_Unlock+0x1c>)
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <FLASH_Unlock+0x24>)
 8001422:	605a      	str	r2, [r3, #4]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00
 8001434:	45670123 	.word	0x45670123
 8001438:	cdef89ab 	.word	0xcdef89ab

0800143c <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <FLASH_Lock+0x1c>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <FLASH_Lock+0x1c>)
 8001446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800144a:	6113      	str	r3, [r2, #16]

}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001460:	bf00      	nop
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <FLASH_WaitBusy+0x1c>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f9      	bne.n	8001462 <FLASH_WaitBusy+0x6>
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40023c00 	.word	0x40023c00

0800147c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8001486:	f004 fedf 	bl	8006248 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8001496:	2302      	movs	r3, #2
 8001498:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800149e:	f107 0208 	add.w	r2, r7, #8
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 ff95 	bl	80063d8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80014ae:	f004 feed 	bl	800628c <HAL_FLASH_Lock>
}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80014c8:	f7ff ffa4 	bl	8001414 <FLASH_Unlock>

	FLASH_WaitBusy();
 80014cc:	f7ff ffc6 	bl	800145c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <FLASH_Write_Word_F+0x50>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <FLASH_Write_Word_F+0x50>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <FLASH_Write_Word_F+0x50>)
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <FLASH_Write_Word_F+0x50>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80014ee:	f7ff ffb5 	bl	800145c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <FLASH_Write_Word_F+0x50>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <FLASH_Write_Word_F+0x50>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80014fe:	f7ff ff9d 	bl	800143c <FLASH_Lock>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00

08001510 <initGyro>:

int16_t xg_, yg_, zg_;
float omega;
float theta_10mm;

uint8_t initGyro(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 8001516:	f001 fc99 	bl	8002e4c <IMU_init>
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001522:	f003 fdfb 	bl	800511c <HAL_Delay>

	return who_i_am;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <updateIMUValue>:

void updateIMUValue(){
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	read_gyro_data();
 8001536:	f001 fcad 	bl	8002e94 <read_gyro_data>
	zg_ = zg;
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <updateIMUValue+0x140>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <updateIMUValue+0x144>)
 8001542:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <updateIMUValue+0x140>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffea 	bl	8000524 <__aeabi_i2d>
 8001550:	a33d      	add	r3, pc, #244	; (adr r3, 8001648 <updateIMUValue+0x118>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f84f 	bl	80005f8 <__aeabi_dmul>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4625      	mov	r5, r4
 8001560:	461c      	mov	r4, r3
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <updateIMUValue+0x148>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffdb 	bl	8000524 <__aeabi_i2d>
 800156e:	a338      	add	r3, pc, #224	; (adr r3, 8001650 <updateIMUValue+0x120>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f840 	bl	80005f8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fe84 	bl	800028c <__adddf3>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	4618      	mov	r0, r3
 800158a:	4621      	mov	r1, r4
 800158c:	f7ff fae4 	bl	8000b58 <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b37      	ldr	r3, [pc, #220]	; (8001674 <updateIMUValue+0x144>)
 8001596:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <updateIMUValue+0x144>)
 800159a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <updateIMUValue+0x148>)
 80015a0:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <updateIMUValue+0x144>)
 80015a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	a327      	add	r3, pc, #156	; (adr r3, 8001658 <updateIMUValue+0x128>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f944 	bl	800084c <__aeabi_ddiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	a324      	add	r3, pc, #144	; (adr r3, 8001660 <updateIMUValue+0x130>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f811 	bl	80005f8 <__aeabi_dmul>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	4618      	mov	r0, r3
 80015dc:	4621      	mov	r1, r4
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <updateIMUValue+0x14c>)
 80015e4:	f7ff f932 	bl	800084c <__aeabi_ddiv>
 80015e8:	4603      	mov	r3, r0
 80015ea:	460c      	mov	r4, r1
 80015ec:	4618      	mov	r0, r3
 80015ee:	4621      	mov	r1, r4
 80015f0:	f7ff fafa 	bl	8000be8 <__aeabi_d2f>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <updateIMUValue+0x150>)
 80015f8:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <updateIMUValue+0x154>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa2 	bl	8000548 <__aeabi_f2d>
 8001604:	4604      	mov	r4, r0
 8001606:	460d      	mov	r5, r1
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <updateIMUValue+0x150>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	a315      	add	r3, pc, #84	; (adr r3, 8001668 <updateIMUValue+0x138>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fada 	bl	8000be8 <__aeabi_d2f>
 8001634:	4602      	mov	r2, r0
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <updateIMUValue+0x154>)
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	33333333 	.word	0x33333333
 800164c:	3feb3333 	.word	0x3feb3333
 8001650:	33333334 	.word	0x33333334
 8001654:	3fc33333 	.word	0x3fc33333
 8001658:	66666666 	.word	0x66666666
 800165c:	40306666 	.word	0x40306666
 8001660:	54411744 	.word	0x54411744
 8001664:	400921fb 	.word	0x400921fb
 8001668:	d2f1a9fc 	.word	0xd2f1a9fc
 800166c:	3f50624d 	.word	0x3f50624d
 8001670:	2000c198 	.word	0x2000c198
 8001674:	2000c0b4 	.word	0x2000c0b4
 8001678:	20000270 	.word	0x20000270
 800167c:	40668000 	.word	0x40668000
 8001680:	2000c0c0 	.word	0x2000c0c0
 8001684:	2000c0bc 	.word	0x2000c0bc

08001688 <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return theta_10mm;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <getTheta10mm+0x18>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
}
 8001694:	eeb0 0a67 	vmov.f32	s0, s15
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	2000c0bc 	.word	0x2000c0bc

080016a4 <clearTheta10mm>:

void clearTheta10mm()
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <clearTheta10mm+0x18>)
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2000c0bc 	.word	0x2000c0bc

080016c0 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b52      	cmp	r3, #82	; 0x52
 80016ce:	d112      	bne.n	80016f6 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4860      	ldr	r0, [pc, #384]	; (8001858 <setLED+0x198>)
 80016d8:	f005 f952 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	485d      	ldr	r0, [pc, #372]	; (8001858 <setLED+0x198>)
 80016e4:	f005 f94c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ee:	485a      	ldr	r0, [pc, #360]	; (8001858 <setLED+0x198>)
 80016f0:	f005 f946 	bl	8006980 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80016f4:	e0ab      	b.n	800184e <setLED+0x18e>
	else if(color == 'G'){
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b47      	cmp	r3, #71	; 0x47
 80016fa:	d112      	bne.n	8001722 <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001702:	4855      	ldr	r0, [pc, #340]	; (8001858 <setLED+0x198>)
 8001704:	f005 f93c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800170e:	4852      	ldr	r0, [pc, #328]	; (8001858 <setLED+0x198>)
 8001710:	f005 f936 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171a:	484f      	ldr	r0, [pc, #316]	; (8001858 <setLED+0x198>)
 800171c:	f005 f930 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001720:	e095      	b.n	800184e <setLED+0x18e>
	else if(color == 'B'){
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b42      	cmp	r3, #66	; 0x42
 8001726:	d112      	bne.n	800174e <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	484a      	ldr	r0, [pc, #296]	; (8001858 <setLED+0x198>)
 8001730:	f005 f926 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173a:	4847      	ldr	r0, [pc, #284]	; (8001858 <setLED+0x198>)
 800173c:	f005 f920 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001746:	4844      	ldr	r0, [pc, #272]	; (8001858 <setLED+0x198>)
 8001748:	f005 f91a 	bl	8006980 <HAL_GPIO_WritePin>
}
 800174c:	e07f      	b.n	800184e <setLED+0x18e>
	else if(color == 'M'){
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b4d      	cmp	r3, #77	; 0x4d
 8001752:	d112      	bne.n	800177a <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	483f      	ldr	r0, [pc, #252]	; (8001858 <setLED+0x198>)
 800175c:	f005 f910 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001766:	483c      	ldr	r0, [pc, #240]	; (8001858 <setLED+0x198>)
 8001768:	f005 f90a 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001772:	4839      	ldr	r0, [pc, #228]	; (8001858 <setLED+0x198>)
 8001774:	f005 f904 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001778:	e069      	b.n	800184e <setLED+0x18e>
	else if(color == 'Y'){
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b59      	cmp	r3, #89	; 0x59
 800177e:	d112      	bne.n	80017a6 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	4834      	ldr	r0, [pc, #208]	; (8001858 <setLED+0x198>)
 8001788:	f005 f8fa 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001792:	4831      	ldr	r0, [pc, #196]	; (8001858 <setLED+0x198>)
 8001794:	f005 f8f4 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	482e      	ldr	r0, [pc, #184]	; (8001858 <setLED+0x198>)
 80017a0:	f005 f8ee 	bl	8006980 <HAL_GPIO_WritePin>
}
 80017a4:	e053      	b.n	800184e <setLED+0x18e>
	else if(color == 'C'){
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b43      	cmp	r3, #67	; 0x43
 80017aa:	d112      	bne.n	80017d2 <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b2:	4829      	ldr	r0, [pc, #164]	; (8001858 <setLED+0x198>)
 80017b4:	f005 f8e4 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017be:	4826      	ldr	r0, [pc, #152]	; (8001858 <setLED+0x198>)
 80017c0:	f005 f8de 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ca:	4823      	ldr	r0, [pc, #140]	; (8001858 <setLED+0x198>)
 80017cc:	f005 f8d8 	bl	8006980 <HAL_GPIO_WritePin>
}
 80017d0:	e03d      	b.n	800184e <setLED+0x18e>
	else if(color == 'W'){
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b57      	cmp	r3, #87	; 0x57
 80017d6:	d112      	bne.n	80017fe <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017de:	481e      	ldr	r0, [pc, #120]	; (8001858 <setLED+0x198>)
 80017e0:	f005 f8ce 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ea:	481b      	ldr	r0, [pc, #108]	; (8001858 <setLED+0x198>)
 80017ec:	f005 f8c8 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <setLED+0x198>)
 80017f8:	f005 f8c2 	bl	8006980 <HAL_GPIO_WritePin>
}
 80017fc:	e027      	b.n	800184e <setLED+0x18e>
	else if(color == 'N'){
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b4e      	cmp	r3, #78	; 0x4e
 8001802:	d112      	bne.n	800182a <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4813      	ldr	r0, [pc, #76]	; (8001858 <setLED+0x198>)
 800180c:	f005 f8b8 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <setLED+0x198>)
 8001818:	f005 f8b2 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <setLED+0x198>)
 8001824:	f005 f8ac 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001828:	e011      	b.n	800184e <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <setLED+0x198>)
 8001832:	f005 f8a5 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <setLED+0x198>)
 800183e:	f005 f89f 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <setLED+0x198>)
 800184a:	f005 f899 	bl	8006980 <HAL_GPIO_WritePin>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40020800 	.word	0x40020800

0800185c <setLED2>:

void setLED2(uint8_t color2)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b52      	cmp	r3, #82	; 0x52
 800186a:	d124      	bne.n	80018b6 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001872:	489d      	ldr	r0, [pc, #628]	; (8001ae8 <setLED2+0x28c>)
 8001874:	f005 f884 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	489b      	ldr	r0, [pc, #620]	; (8001aec <setLED2+0x290>)
 8001880:	f005 f87e 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800188a:	4898      	ldr	r0, [pc, #608]	; (8001aec <setLED2+0x290>)
 800188c:	f005 f878 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001896:	4895      	ldr	r0, [pc, #596]	; (8001aec <setLED2+0x290>)
 8001898:	f005 f872 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a2:	4892      	ldr	r0, [pc, #584]	; (8001aec <setLED2+0x290>)
 80018a4:	f005 f86c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ae:	488f      	ldr	r0, [pc, #572]	; (8001aec <setLED2+0x290>)
 80018b0:	f005 f866 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 80018b4:	e113      	b.n	8001ade <setLED2+0x282>
	else if(color2 == 'G'){
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b47      	cmp	r3, #71	; 0x47
 80018ba:	d124      	bne.n	8001906 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c2:	4889      	ldr	r0, [pc, #548]	; (8001ae8 <setLED2+0x28c>)
 80018c4:	f005 f85c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	4887      	ldr	r0, [pc, #540]	; (8001aec <setLED2+0x290>)
 80018d0:	f005 f856 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4884      	ldr	r0, [pc, #528]	; (8001aec <setLED2+0x290>)
 80018dc:	f005 f850 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e6:	4881      	ldr	r0, [pc, #516]	; (8001aec <setLED2+0x290>)
 80018e8:	f005 f84a 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f2:	487e      	ldr	r0, [pc, #504]	; (8001aec <setLED2+0x290>)
 80018f4:	f005 f844 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fe:	487b      	ldr	r0, [pc, #492]	; (8001aec <setLED2+0x290>)
 8001900:	f005 f83e 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001904:	e0eb      	b.n	8001ade <setLED2+0x282>
	else if(color2 == 'B'){
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b42      	cmp	r3, #66	; 0x42
 800190a:	d124      	bne.n	8001956 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001912:	4875      	ldr	r0, [pc, #468]	; (8001ae8 <setLED2+0x28c>)
 8001914:	f005 f834 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800191e:	4873      	ldr	r0, [pc, #460]	; (8001aec <setLED2+0x290>)
 8001920:	f005 f82e 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	4870      	ldr	r0, [pc, #448]	; (8001aec <setLED2+0x290>)
 800192c:	f005 f828 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001936:	486d      	ldr	r0, [pc, #436]	; (8001aec <setLED2+0x290>)
 8001938:	f005 f822 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001942:	486a      	ldr	r0, [pc, #424]	; (8001aec <setLED2+0x290>)
 8001944:	f005 f81c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800194e:	4867      	ldr	r0, [pc, #412]	; (8001aec <setLED2+0x290>)
 8001950:	f005 f816 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001954:	e0c3      	b.n	8001ade <setLED2+0x282>
	else if(color2 == 'W'){
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b57      	cmp	r3, #87	; 0x57
 800195a:	d124      	bne.n	80019a6 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001962:	4861      	ldr	r0, [pc, #388]	; (8001ae8 <setLED2+0x28c>)
 8001964:	f005 f80c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196e:	485f      	ldr	r0, [pc, #380]	; (8001aec <setLED2+0x290>)
 8001970:	f005 f806 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197a:	485c      	ldr	r0, [pc, #368]	; (8001aec <setLED2+0x290>)
 800197c:	f005 f800 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001986:	4859      	ldr	r0, [pc, #356]	; (8001aec <setLED2+0x290>)
 8001988:	f004 fffa 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001992:	4856      	ldr	r0, [pc, #344]	; (8001aec <setLED2+0x290>)
 8001994:	f004 fff4 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800199e:	4853      	ldr	r0, [pc, #332]	; (8001aec <setLED2+0x290>)
 80019a0:	f004 ffee 	bl	8006980 <HAL_GPIO_WritePin>
}
 80019a4:	e09b      	b.n	8001ade <setLED2+0x282>
	else if(color2 == 'Y'){
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b59      	cmp	r3, #89	; 0x59
 80019aa:	d124      	bne.n	80019f6 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b2:	484d      	ldr	r0, [pc, #308]	; (8001ae8 <setLED2+0x28c>)
 80019b4:	f004 ffe4 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	484b      	ldr	r0, [pc, #300]	; (8001aec <setLED2+0x290>)
 80019c0:	f004 ffde 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ca:	4848      	ldr	r0, [pc, #288]	; (8001aec <setLED2+0x290>)
 80019cc:	f004 ffd8 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	4845      	ldr	r0, [pc, #276]	; (8001aec <setLED2+0x290>)
 80019d8:	f004 ffd2 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e2:	4842      	ldr	r0, [pc, #264]	; (8001aec <setLED2+0x290>)
 80019e4:	f004 ffcc 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ee:	483f      	ldr	r0, [pc, #252]	; (8001aec <setLED2+0x290>)
 80019f0:	f004 ffc6 	bl	8006980 <HAL_GPIO_WritePin>
}
 80019f4:	e073      	b.n	8001ade <setLED2+0x282>
	else if(color2 == 'X'){
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b58      	cmp	r3, #88	; 0x58
 80019fa:	d124      	bne.n	8001a46 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	4839      	ldr	r0, [pc, #228]	; (8001ae8 <setLED2+0x28c>)
 8001a04:	f004 ffbc 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0e:	4837      	ldr	r0, [pc, #220]	; (8001aec <setLED2+0x290>)
 8001a10:	f004 ffb6 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	4834      	ldr	r0, [pc, #208]	; (8001aec <setLED2+0x290>)
 8001a1c:	f004 ffb0 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a26:	4831      	ldr	r0, [pc, #196]	; (8001aec <setLED2+0x290>)
 8001a28:	f004 ffaa 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a32:	482e      	ldr	r0, [pc, #184]	; (8001aec <setLED2+0x290>)
 8001a34:	f004 ffa4 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3e:	482b      	ldr	r0, [pc, #172]	; (8001aec <setLED2+0x290>)
 8001a40:	f004 ff9e 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001a44:	e04b      	b.n	8001ade <setLED2+0x282>
	else if(color2 == 'A'){
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b41      	cmp	r3, #65	; 0x41
 8001a4a:	d124      	bne.n	8001a96 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a52:	4825      	ldr	r0, [pc, #148]	; (8001ae8 <setLED2+0x28c>)
 8001a54:	f004 ff94 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	4823      	ldr	r0, [pc, #140]	; (8001aec <setLED2+0x290>)
 8001a60:	f004 ff8e 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	4820      	ldr	r0, [pc, #128]	; (8001aec <setLED2+0x290>)
 8001a6c:	f004 ff88 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a76:	481d      	ldr	r0, [pc, #116]	; (8001aec <setLED2+0x290>)
 8001a78:	f004 ff82 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	481a      	ldr	r0, [pc, #104]	; (8001aec <setLED2+0x290>)
 8001a84:	f004 ff7c 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	4817      	ldr	r0, [pc, #92]	; (8001aec <setLED2+0x290>)
 8001a90:	f004 ff76 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001a94:	e023      	b.n	8001ade <setLED2+0x282>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9c:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <setLED2+0x28c>)
 8001a9e:	f004 ff6f 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa8:	4810      	ldr	r0, [pc, #64]	; (8001aec <setLED2+0x290>)
 8001aaa:	f004 ff69 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <setLED2+0x290>)
 8001ab6:	f004 ff63 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac0:	480a      	ldr	r0, [pc, #40]	; (8001aec <setLED2+0x290>)
 8001ac2:	f004 ff5d 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <setLED2+0x290>)
 8001ace:	f004 ff57 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <setLED2+0x290>)
 8001ada:	f004 ff51 	bl	8006980 <HAL_GPIO_WritePin>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40020400 	.word	0x40020400

08001af0 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.5, kd = 0.04;//kp = 1.5, kd = 0.0015  //kp = 3.0, kd = 0.005
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <calculateLineFollowingTermFlip+0x138>)
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <calculateLineFollowingTermFlip+0x13c>)
 8001afc:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <calculateLineFollowingTermFlip+0x140>)
 8001b06:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	f040 8081 	bne.w	8001c12 <calculateLineFollowingTermFlip+0x122>
		if(i_clear_flag == 1){
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <calculateLineFollowingTermFlip+0x144>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <calculateLineFollowingTermFlip+0x36>
			i = 0;
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <calculateLineFollowingTermFlip+0x148>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <calculateLineFollowingTermFlip+0x144>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );
 8001b26:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b38:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a3f      	ldr	r2, [pc, #252]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b40:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001b44:	4413      	add	r3, r2
 8001b46:	4a3d      	ldr	r2, [pc, #244]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b48:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b50:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <calculateLineFollowingTermFlip+0x150>)
 8001b58:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5c:	17db      	asrs	r3, r3, #31
 8001b5e:	1ad2      	subs	r2, r2, r3
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b62:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b6e:	440b      	add	r3, r1
 8001b70:	4932      	ldr	r1, [pc, #200]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b72:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001b76:	440b      	add	r3, r1
 8001b78:	4930      	ldr	r1, [pc, #192]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b7a:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001b7e:	440b      	add	r3, r1
 8001b80:	492e      	ldr	r1, [pc, #184]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b82:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8001b86:	440b      	add	r3, r1
 8001b88:	492c      	ldr	r1, [pc, #176]	; (8001c3c <calculateLineFollowingTermFlip+0x14c>)
 8001b8a:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001b8e:	440b      	add	r3, r1
 8001b90:	492b      	ldr	r1, [pc, #172]	; (8001c40 <calculateLineFollowingTermFlip+0x150>)
 8001b92:	fb81 0103 	smull	r0, r1, r1, r3
 8001b96:	17db      	asrs	r3, r3, #31
 8001b98:	1a5b      	subs	r3, r3, r1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	edc7 7a03 	vstr	s15, [r7, #12]

		p = kp * diff; //P制御
 8001ba8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <calculateLineFollowingTermFlip+0x154>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	ee17 0a90 	vmov	r0, s15
 8001bd2:	f7fe fcb9 	bl	8000548 <__aeabi_f2d>
 8001bd6:	a312      	add	r3, pc, #72	; (adr r3, 8001c20 <calculateLineFollowingTermFlip+0x130>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fe36 	bl	800084c <__aeabi_ddiv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	4618      	mov	r0, r3
 8001be6:	4621      	mov	r1, r4
 8001be8:	f7fe fffe 	bl	8000be8 <__aeabi_d2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <calculateLineFollowingTermFlip+0x148>)
 8001bf2:	ed93 7a00 	vldr	s14, [r3]
 8001bf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <calculateLineFollowingTermFlip+0x158>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <calculateLineFollowingTermFlip+0x154>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6013      	str	r3, [r2, #0]
	}
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c24:	3f50624d 	.word	0x3f50624d
 8001c28:	40600000 	.word	0x40600000
 8001c2c:	3d23d70a 	.word	0x3d23d70a
 8001c30:	20000272 	.word	0x20000272
 8001c34:	20000273 	.word	0x20000273
 8001c38:	20000280 	.word	0x20000280
 8001c3c:	2000bfe0 	.word	0x2000bfe0
 8001c40:	2aaaaaab 	.word	0x2aaaaaab
 8001c44:	2000027c 	.word	0x2000027c
 8001c48:	20000274 	.word	0x20000274

08001c4c <lineTraceFlip>:

void lineTraceFlip(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8001c52:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <lineTraceFlip+0x150>)
 8001c54:	f993 3000 	ldrsb.w	r3, [r3]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	f040 8097 	bne.w	8001d8c <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 8001c5e:	f001 f9b9 	bl	8002fd4 <getVelocityControlTerm>
 8001c62:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.8;
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <lineTraceFlip+0x154>)
 8001c68:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 8001c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7a:	db02      	blt.n	8001c82 <lineTraceFlip+0x36>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e010      	b.n	8001ca4 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 8001c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c86:	eef1 7a67 	vneg.f32	s15, s15
 8001c8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	d805      	bhi.n	8001ca4 <lineTraceFlip+0x58>
 8001c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9c:	eef1 7a67 	vneg.f32	s15, s15
 8001ca0:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <lineTraceFlip+0x158>)
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001da8 <lineTraceFlip+0x15c>
 8001cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc4:	db0d      	blt.n	8001ce2 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <lineTraceFlip+0x158>)
 8001cc8:	ed93 7a00 	vldr	s14, [r3]
 8001ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001da8 <lineTraceFlip+0x15c>
 8001cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cdc:	edc7 7a04 	vstr	s15, [r7, #16]
 8001ce0:	e01a      	b.n	8001d18 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <lineTraceFlip+0x158>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001dac <lineTraceFlip+0x160>
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d80c      	bhi.n	8001d18 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <lineTraceFlip+0x158>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001dac <lineTraceFlip+0x160>
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 8001d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d24:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <lineTraceFlip+0x158>)
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
 8001d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <lineTraceFlip+0x158>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]


		float motor_l = velocity_control_term + line_following_term;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <lineTraceFlip+0x158>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4a:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <lineTraceFlip+0x158>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5c:	edc7 7a01 	vstr	s15, [r7, #4]
		/*
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/

		mon_velo_term = velocity_control_term;
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <lineTraceFlip+0x164>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 8001d66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6e:	ee17 3a90 	vmov	r3, s15
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7c:	ee17 2a90 	vmov	r2, s15
 8001d80:	b212      	sxth	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fa41 	bl	800420c <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001d8a:	e003      	b.n	8001d94 <lineTraceFlip+0x148>
		setMotor(0, 0);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f002 fa3c 	bl	800420c <setMotor>
}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000272 	.word	0x20000272
 8001da0:	44a7e666 	.word	0x44a7e666
 8001da4:	20000274 	.word	0x20000274
 8001da8:	44d1e000 	.word	0x44d1e000
 8001dac:	c4d1e000 	.word	0xc4d1e000
 8001db0:	2000c0c4 	.word	0x2000c0c4

08001db4 <startLineTrace>:

void startLineTrace()
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <startLineTrace+0x1c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <startLineTrace+0x20>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000272 	.word	0x20000272
 8001dd4:	20000273 	.word	0x20000273

08001dd8 <stopLineTrace>:

void stopLineTrace()
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <stopLineTrace+0x1c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <stopLineTrace+0x20>)
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20000272 	.word	0x20000272
 8001df8:	20000274 	.word	0x20000274

08001dfc <checkCourseOut>:

void checkCourseOut(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e14:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e1c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e24:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e2c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e34:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e3c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e44:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e4c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e54:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <checkCourseOut+0xb4>)
 8001e5c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <checkCourseOut+0xb8>)
 8001e64:	fb82 1203 	smull	r1, r2, r2, r3
 8001e68:	1052      	asrs	r2, r2, #1
 8001e6a:	17db      	asrs	r3, r3, #31
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001e76:	d906      	bls.n	8001e86 <checkCourseOut+0x8a>
		dark_cnt++;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <checkCourseOut+0xbc>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <checkCourseOut+0xbc>)
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e002      	b.n	8001e8c <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <checkCourseOut+0xbc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <checkCourseOut+0xbc>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	2b13      	cmp	r3, #19
 8001e92:	d903      	bls.n	8001e9c <checkCourseOut+0xa0>
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <checkCourseOut+0xc0>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001e9a:	e002      	b.n	8001ea2 <checkCourseOut+0xa6>
	else dark_flag = false;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <checkCourseOut+0xc0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	2000bfe0 	.word	0x2000bfe0
 8001eb4:	2aaaaaab 	.word	0x2aaaaaab
 8001eb8:	20000284 	.word	0x20000284
 8001ebc:	20000278 	.word	0x20000278

08001ec0 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	return dark_flag;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <getCouseOutFlag+0x14>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000278 	.word	0x20000278

08001ed8 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8001edc:	2202      	movs	r2, #2
 8001ede:	4905      	ldr	r1, [pc, #20]	; (8001ef4 <initADC+0x1c>)
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <initADC+0x20>)
 8001ee2:	f003 f981 	bl	80051e8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	4904      	ldr	r1, [pc, #16]	; (8001efc <initADC+0x24>)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <initADC+0x28>)
 8001eec:	f003 f97c 	bl	80051e8 <HAL_ADC_Start_DMA>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200002a0 	.word	0x200002a0
 8001ef8:	2000c118 	.word	0x2000c118
 8001efc:	20000288 	.word	0x20000288
 8001f00:	2000c0c8 	.word	0x2000c0c8

08001f04 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8001f08:	4bc9      	ldr	r3, [pc, #804]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f14:	4bc7      	ldr	r3, [pc, #796]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8001f16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1e:	4bc6      	ldr	r3, [pc, #792]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8001f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 800223c <storeAnalogSensorBuffer+0x338>
 8001f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f30:	4bc3      	ldr	r3, [pc, #780]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3a:	ee17 3a90 	vmov	r3, s15
 8001f3e:	b219      	sxth	r1, r3
 8001f40:	4bc0      	ldr	r3, [pc, #768]	; (8002244 <storeAnalogSensorBuffer+0x340>)
 8001f42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8001f46:	4bba      	ldr	r3, [pc, #744]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f52:	4bb8      	ldr	r3, [pc, #736]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f5c:	4bb6      	ldr	r3, [pc, #728]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f66:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800223c <storeAnalogSensorBuffer+0x338>
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6e:	4bb4      	ldr	r3, [pc, #720]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f78:	ee17 3a90 	vmov	r3, s15
 8001f7c:	b219      	sxth	r1, r3
 8001f7e:	4bb2      	ldr	r3, [pc, #712]	; (8002248 <storeAnalogSensorBuffer+0x344>)
 8001f80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8001f84:	4baa      	ldr	r3, [pc, #680]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f90:	4ba8      	ldr	r3, [pc, #672]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8001f92:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f96:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f9a:	4ba7      	ldr	r3, [pc, #668]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8001f9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa4:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800223c <storeAnalogSensorBuffer+0x338>
 8001fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fac:	4ba4      	ldr	r3, [pc, #656]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	b219      	sxth	r1, r3
 8001fbc:	4ba3      	ldr	r3, [pc, #652]	; (800224c <storeAnalogSensorBuffer+0x348>)
 8001fbe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8001fc2:	4b9b      	ldr	r3, [pc, #620]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8001fc4:	88db      	ldrh	r3, [r3, #6]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fce:	4b99      	ldr	r3, [pc, #612]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8001fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fd4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fd8:	4b97      	ldr	r3, [pc, #604]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8001fda:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800223c <storeAnalogSensorBuffer+0x338>
 8001fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fea:	4b95      	ldr	r3, [pc, #596]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff4:	ee17 3a90 	vmov	r3, s15
 8001ff8:	b219      	sxth	r1, r3
 8001ffa:	4b95      	ldr	r3, [pc, #596]	; (8002250 <storeAnalogSensorBuffer+0x34c>)
 8001ffc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002000:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8002002:	891b      	ldrh	r3, [r3, #8]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	4b89      	ldr	r3, [pc, #548]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 800200e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002012:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8002018:	ed93 7a04 	vldr	s14, [r3, #16]
 800201c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002020:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800223c <storeAnalogSensorBuffer+0x338>
 8002024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002028:	4b85      	ldr	r3, [pc, #532]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002032:	ee17 3a90 	vmov	r3, s15
 8002036:	b219      	sxth	r1, r3
 8002038:	4b86      	ldr	r3, [pc, #536]	; (8002254 <storeAnalogSensorBuffer+0x350>)
 800203a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800203e:	4b7c      	ldr	r3, [pc, #496]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8002040:	895b      	ldrh	r3, [r3, #10]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204a:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 800204c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002050:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002054:	4b78      	ldr	r3, [pc, #480]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8002056:	ed93 7a05 	vldr	s14, [r3, #20]
 800205a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800223c <storeAnalogSensorBuffer+0x338>
 8002062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	b219      	sxth	r1, r3
 8002076:	4b78      	ldr	r3, [pc, #480]	; (8002258 <storeAnalogSensorBuffer+0x354>)
 8002078:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 800207e:	899b      	ldrh	r3, [r3, #12]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 800208a:	edd3 7a06 	vldr	s15, [r3, #24]
 800208e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002092:	4b69      	ldr	r3, [pc, #420]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8002094:	ed93 7a06 	vldr	s14, [r3, #24]
 8002098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800209c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800223c <storeAnalogSensorBuffer+0x338>
 80020a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	b219      	sxth	r1, r3
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <storeAnalogSensorBuffer+0x358>)
 80020b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 80020bc:	89db      	ldrh	r3, [r3, #14]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 80020c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80020cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 80020d2:	ed93 7a07 	vldr	s14, [r3, #28]
 80020d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020da:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800223c <storeAnalogSensorBuffer+0x338>
 80020de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e2:	4b57      	ldr	r3, [pc, #348]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ec:	ee17 3a90 	vmov	r3, s15
 80020f0:	b219      	sxth	r1, r3
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <storeAnalogSensorBuffer+0x35c>)
 80020f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80020f8:	4b4d      	ldr	r3, [pc, #308]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 80020fa:	8a1b      	ldrh	r3, [r3, #16]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002104:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8002106:	edd3 7a08 	vldr	s15, [r3, #32]
 800210a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 8002110:	ed93 7a08 	vldr	s14, [r3, #32]
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002118:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800223c <storeAnalogSensorBuffer+0x338>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212a:	ee17 3a90 	vmov	r3, s15
 800212e:	b219      	sxth	r1, r3
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <storeAnalogSensorBuffer+0x360>)
 8002132:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8002138:	8a5b      	ldrh	r3, [r3, #18]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8002144:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002148:	ee77 6a67 	vsub.f32	s13, s14, s15
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 800214e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002156:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800223c <storeAnalogSensorBuffer+0x338>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002168:	ee17 3a90 	vmov	r3, s15
 800216c:	b219      	sxth	r1, r3
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <storeAnalogSensorBuffer+0x364>)
 8002170:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 8002176:	8a9b      	ldrh	r3, [r3, #20]
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 8002182:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002186:	ee77 6a67 	vsub.f32	s13, s14, s15
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 800218c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002194:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800223c <storeAnalogSensorBuffer+0x338>
 8002198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a6:	ee17 3a90 	vmov	r3, s15
 80021aa:	b219      	sxth	r1, r3
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <storeAnalogSensorBuffer+0x368>)
 80021ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <storeAnalogSensorBuffer+0x32c>)
 80021b4:	8adb      	ldrh	r3, [r3, #22]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <storeAnalogSensorBuffer+0x330>)
 80021c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80021c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <storeAnalogSensorBuffer+0x334>)
 80021ca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800223c <storeAnalogSensorBuffer+0x338>
 80021d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e4:	ee17 3a90 	vmov	r3, s15
 80021e8:	b219      	sxth	r1, r3
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <storeAnalogSensorBuffer+0x36c>)
 80021ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <storeAnalogSensorBuffer+0x370>)
 80021f2:	885b      	ldrh	r3, [r3, #2]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <storeAnalogSensorBuffer+0x374>)
 80021fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002202:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <storeAnalogSensorBuffer+0x378>)
 8002208:	ed93 7a01 	vldr	s14, [r3, #4]
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800223c <storeAnalogSensorBuffer+0x338>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <storeAnalogSensorBuffer+0x33c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002222:	ee17 3a90 	vmov	r3, s15
 8002226:	b219      	sxth	r1, r3
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <storeAnalogSensorBuffer+0x37c>)
 800222a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800222e:	e029      	b.n	8002284 <storeAnalogSensorBuffer+0x380>
 8002230:	20000288 	.word	0x20000288
 8002234:	2000bfa0 	.word	0x2000bfa0
 8002238:	2000c004 	.word	0x2000c004
 800223c:	447a0000 	.word	0x447a0000
 8002240:	20000030 	.word	0x20000030
 8002244:	200002b8 	.word	0x200002b8
 8002248:	200002a4 	.word	0x200002a4
 800224c:	200002cc 	.word	0x200002cc
 8002250:	200002e0 	.word	0x200002e0
 8002254:	200002f4 	.word	0x200002f4
 8002258:	20000308 	.word	0x20000308
 800225c:	2000031c 	.word	0x2000031c
 8002260:	20000330 	.word	0x20000330
 8002264:	20000344 	.word	0x20000344
 8002268:	20000358 	.word	0x20000358
 800226c:	2000036c 	.word	0x2000036c
 8002270:	20000380 	.word	0x20000380
 8002274:	200002a0 	.word	0x200002a0
 8002278:	2000bf98 	.word	0x2000bf98
 800227c:	2000bfd8 	.word	0x2000bfd8
 8002280:	20000394 	.word	0x20000394
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <storeAnalogSensorBuffer+0x3d4>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <storeAnalogSensorBuffer+0x3d8>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 6a67 	vsub.f32	s13, s14, s15
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <storeAnalogSensorBuffer+0x3dc>)
 800229c:	ed93 7a00 	vldr	s14, [r3]
 80022a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80022e4 <storeAnalogSensorBuffer+0x3e0>
 80022a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <storeAnalogSensorBuffer+0x3e4>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b6:	ee17 3a90 	vmov	r3, s15
 80022ba:	b219      	sxth	r1, r3
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <storeAnalogSensorBuffer+0x3e8>)
 80022be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <storeAnalogSensorBuffer+0x3e4>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <storeAnalogSensorBuffer+0x3e4>)
 80022cc:	701a      	strb	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	200002a0 	.word	0x200002a0
 80022dc:	2000bf98 	.word	0x2000bf98
 80022e0:	2000bfd8 	.word	0x2000bfd8
 80022e4:	447a0000 	.word	0x447a0000
 80022e8:	20000030 	.word	0x20000030
 80022ec:	200003a8 	.word	0x200003a8

080022f0 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 80022f6:	4bc9      	ldr	r3, [pc, #804]	; (800261c <updateAnalogSensor+0x32c>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002302:	4bc7      	ldr	r3, [pc, #796]	; (8002620 <updateAnalogSensor+0x330>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ee77 6a67 	vsub.f32	s13, s14, s15
 800230c:	4bc5      	ldr	r3, [pc, #788]	; (8002624 <updateAnalogSensor+0x334>)
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002316:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002628 <updateAnalogSensor+0x338>
 800231a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002322:	ee17 3a90 	vmov	r3, s15
 8002326:	b21a      	sxth	r2, r3
 8002328:	4bc0      	ldr	r3, [pc, #768]	; (800262c <updateAnalogSensor+0x33c>)
 800232a:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800232c:	4bbb      	ldr	r3, [pc, #748]	; (800261c <updateAnalogSensor+0x32c>)
 800232e:	885b      	ldrh	r3, [r3, #2]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002338:	4bb9      	ldr	r3, [pc, #740]	; (8002620 <updateAnalogSensor+0x330>)
 800233a:	edd3 7a01 	vldr	s15, [r3, #4]
 800233e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002342:	4bb8      	ldr	r3, [pc, #736]	; (8002624 <updateAnalogSensor+0x334>)
 8002344:	ed93 7a01 	vldr	s14, [r3, #4]
 8002348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002628 <updateAnalogSensor+0x338>
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002358:	ee17 3a90 	vmov	r3, s15
 800235c:	b21a      	sxth	r2, r3
 800235e:	4bb3      	ldr	r3, [pc, #716]	; (800262c <updateAnalogSensor+0x33c>)
 8002360:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8002362:	4bae      	ldr	r3, [pc, #696]	; (800261c <updateAnalogSensor+0x32c>)
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236e:	4bac      	ldr	r3, [pc, #688]	; (8002620 <updateAnalogSensor+0x330>)
 8002370:	edd3 7a02 	vldr	s15, [r3, #8]
 8002374:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002378:	4baa      	ldr	r3, [pc, #680]	; (8002624 <updateAnalogSensor+0x334>)
 800237a:	ed93 7a02 	vldr	s14, [r3, #8]
 800237e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002382:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002628 <updateAnalogSensor+0x338>
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238e:	ee17 3a90 	vmov	r3, s15
 8002392:	b21a      	sxth	r2, r3
 8002394:	4ba5      	ldr	r3, [pc, #660]	; (800262c <updateAnalogSensor+0x33c>)
 8002396:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002398:	4ba0      	ldr	r3, [pc, #640]	; (800261c <updateAnalogSensor+0x32c>)
 800239a:	88db      	ldrh	r3, [r3, #6]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a4:	4b9e      	ldr	r3, [pc, #632]	; (8002620 <updateAnalogSensor+0x330>)
 80023a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80023aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023ae:	4b9d      	ldr	r3, [pc, #628]	; (8002624 <updateAnalogSensor+0x334>)
 80023b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80023b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b8:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002628 <updateAnalogSensor+0x338>
 80023bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 3a90 	vmov	r3, s15
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	4b98      	ldr	r3, [pc, #608]	; (800262c <updateAnalogSensor+0x33c>)
 80023cc:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80023ce:	4b93      	ldr	r3, [pc, #588]	; (800261c <updateAnalogSensor+0x32c>)
 80023d0:	891b      	ldrh	r3, [r3, #8]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023da:	4b91      	ldr	r3, [pc, #580]	; (8002620 <updateAnalogSensor+0x330>)
 80023dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80023e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023e4:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <updateAnalogSensor+0x334>)
 80023e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80023ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ee:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002628 <updateAnalogSensor+0x338>
 80023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fa:	ee17 3a90 	vmov	r3, s15
 80023fe:	b21a      	sxth	r2, r3
 8002400:	4b8a      	ldr	r3, [pc, #552]	; (800262c <updateAnalogSensor+0x33c>)
 8002402:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002404:	4b85      	ldr	r3, [pc, #532]	; (800261c <updateAnalogSensor+0x32c>)
 8002406:	895b      	ldrh	r3, [r3, #10]
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002410:	4b83      	ldr	r3, [pc, #524]	; (8002620 <updateAnalogSensor+0x330>)
 8002412:	edd3 7a05 	vldr	s15, [r3, #20]
 8002416:	ee77 6a67 	vsub.f32	s13, s14, s15
 800241a:	4b82      	ldr	r3, [pc, #520]	; (8002624 <updateAnalogSensor+0x334>)
 800241c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002424:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002628 <updateAnalogSensor+0x338>
 8002428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002430:	ee17 3a90 	vmov	r3, s15
 8002434:	b21a      	sxth	r2, r3
 8002436:	4b7d      	ldr	r3, [pc, #500]	; (800262c <updateAnalogSensor+0x33c>)
 8002438:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800243a:	4b78      	ldr	r3, [pc, #480]	; (800261c <updateAnalogSensor+0x32c>)
 800243c:	899b      	ldrh	r3, [r3, #12]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <updateAnalogSensor+0x330>)
 8002448:	edd3 7a06 	vldr	s15, [r3, #24]
 800244c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002450:	4b74      	ldr	r3, [pc, #464]	; (8002624 <updateAnalogSensor+0x334>)
 8002452:	ed93 7a06 	vldr	s14, [r3, #24]
 8002456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800245a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002628 <updateAnalogSensor+0x338>
 800245e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002466:	ee17 3a90 	vmov	r3, s15
 800246a:	b21a      	sxth	r2, r3
 800246c:	4b6f      	ldr	r3, [pc, #444]	; (800262c <updateAnalogSensor+0x33c>)
 800246e:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <updateAnalogSensor+0x32c>)
 8002472:	89db      	ldrh	r3, [r3, #14]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <updateAnalogSensor+0x330>)
 800247e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002482:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <updateAnalogSensor+0x334>)
 8002488:	ed93 7a07 	vldr	s14, [r3, #28]
 800248c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002490:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002628 <updateAnalogSensor+0x338>
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249c:	ee17 3a90 	vmov	r3, s15
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	4b62      	ldr	r3, [pc, #392]	; (800262c <updateAnalogSensor+0x33c>)
 80024a4:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <updateAnalogSensor+0x32c>)
 80024a8:	8a1b      	ldrh	r3, [r3, #16]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <updateAnalogSensor+0x330>)
 80024b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80024b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <updateAnalogSensor+0x334>)
 80024be:	ed93 7a08 	vldr	s14, [r3, #32]
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002628 <updateAnalogSensor+0x338>
 80024ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d2:	ee17 3a90 	vmov	r3, s15
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	4b54      	ldr	r3, [pc, #336]	; (800262c <updateAnalogSensor+0x33c>)
 80024da:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <updateAnalogSensor+0x32c>)
 80024de:	8a5b      	ldrh	r3, [r3, #18]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <updateAnalogSensor+0x330>)
 80024ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024f2:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <updateAnalogSensor+0x334>)
 80024f4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80024f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002628 <updateAnalogSensor+0x338>
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002508:	ee17 3a90 	vmov	r3, s15
 800250c:	b21a      	sxth	r2, r3
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <updateAnalogSensor+0x33c>)
 8002510:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002512:	4b42      	ldr	r3, [pc, #264]	; (800261c <updateAnalogSensor+0x32c>)
 8002514:	8a9b      	ldrh	r3, [r3, #20]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <updateAnalogSensor+0x330>)
 8002520:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002524:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002528:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <updateAnalogSensor+0x334>)
 800252a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800252e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002532:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002628 <updateAnalogSensor+0x338>
 8002536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253e:	ee17 3a90 	vmov	r3, s15
 8002542:	b21a      	sxth	r2, r3
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <updateAnalogSensor+0x33c>)
 8002546:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <updateAnalogSensor+0x32c>)
 800254a:	8adb      	ldrh	r3, [r3, #22]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <updateAnalogSensor+0x330>)
 8002556:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800255a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <updateAnalogSensor+0x334>)
 8002560:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002568:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002628 <updateAnalogSensor+0x338>
 800256c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002574:	ee17 3a90 	vmov	r3, s15
 8002578:	b21a      	sxth	r2, r3
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <updateAnalogSensor+0x33c>)
 800257c:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <updateAnalogSensor+0x340>)
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	461a      	mov	r2, r3
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <updateAnalogSensor+0x340>)
 8002588:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800258c:	4413      	add	r3, r2
 800258e:	4a28      	ldr	r2, [pc, #160]	; (8002630 <updateAnalogSensor+0x340>)
 8002590:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a26      	ldr	r2, [pc, #152]	; (8002630 <updateAnalogSensor+0x340>)
 8002598:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800259c:	4413      	add	r3, r2
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <updateAnalogSensor+0x340>)
 80025a0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <updateAnalogSensor+0x340>)
 80025a8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <updateAnalogSensor+0x340>)
 80025b0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <updateAnalogSensor+0x340>)
 80025b8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80025bc:	4413      	add	r3, r2
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <updateAnalogSensor+0x340>)
 80025c0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <updateAnalogSensor+0x340>)
 80025c8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a19      	ldr	r2, [pc, #100]	; (8002634 <updateAnalogSensor+0x344>)
 80025d0:	fb82 1203 	smull	r1, r2, r2, r3
 80025d4:	1092      	asrs	r2, r2, #2
 80025d6:	17db      	asrs	r3, r3, #31
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b21a      	sxth	r2, r3
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <updateAnalogSensor+0x348>)
 80025de:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <updateAnalogSensor+0x34c>)
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <updateAnalogSensor+0x34c>)
 80025ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <updateAnalogSensor+0x34c>)
 80025f2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a10      	ldr	r2, [pc, #64]	; (800263c <updateAnalogSensor+0x34c>)
 80025fa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80025fe:	4413      	add	r3, r2
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <updateAnalogSensor+0x34c>)
 8002602:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002606:	4413      	add	r3, r2
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <updateAnalogSensor+0x34c>)
 800260a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800260e:	4413      	add	r3, r2
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <updateAnalogSensor+0x34c>)
 8002612:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002616:	4413      	add	r3, r2
 8002618:	e012      	b.n	8002640 <updateAnalogSensor+0x350>
 800261a:	bf00      	nop
 800261c:	20000288 	.word	0x20000288
 8002620:	2000bfa0 	.word	0x2000bfa0
 8002624:	2000c004 	.word	0x2000c004
 8002628:	447a0000 	.word	0x447a0000
 800262c:	2000bfe0 	.word	0x2000bfe0
 8002630:	20000394 	.word	0x20000394
 8002634:	66666667 	.word	0x66666667
 8002638:	2000bf84 	.word	0x2000bf84
 800263c:	200003a8 	.word	0x200003a8
 8002640:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <updateAnalogSensor+0x3d0>)
 8002642:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002646:	4413      	add	r3, r2
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <updateAnalogSensor+0x3d0>)
 800264a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800264e:	4413      	add	r3, r2
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <updateAnalogSensor+0x3d0>)
 8002652:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002656:	4413      	add	r3, r2
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <updateAnalogSensor+0x3d4>)
 800265a:	fb82 1203 	smull	r1, r2, r2, r3
 800265e:	1092      	asrs	r2, r2, #2
 8002660:	17db      	asrs	r3, r3, #31
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b21a      	sxth	r2, r3
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <updateAnalogSensor+0x3d8>)
 8002668:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	e01a      	b.n	80026a6 <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <updateAnalogSensor+0x3dc>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800267c:	db05      	blt.n	800268a <updateAnalogSensor+0x39a>
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <updateAnalogSensor+0x3dc>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <updateAnalogSensor+0x3dc>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	dc04      	bgt.n	80026a0 <updateAnalogSensor+0x3b0>
 8002696:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <updateAnalogSensor+0x3dc>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2100      	movs	r1, #0
 800269c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3301      	adds	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0b      	cmp	r3, #11
 80026aa:	dde1      	ble.n	8002670 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <updateAnalogSensor+0x3e0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	200003a8 	.word	0x200003a8
 80026c4:	66666667 	.word	0x66666667
 80026c8:	2000bffc 	.word	0x2000bffc
 80026cc:	2000bfe0 	.word	0x2000bfe0
 80026d0:	20000030 	.word	0x20000030

080026d4 <sensorCalibration>:

void sensorCalibration()
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0a0      	sub	sp, #128	; 0x80
 80026d8:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 80026da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026de:	2230      	movs	r2, #48	; 0x30
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f006 ffdf 	bl	80096a6 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	2230      	movs	r2, #48	; 0x30
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 ffd8 	bl	80096a6 <memset>
 80026f6:	4bd8      	ldr	r3, [pc, #864]	; (8002a58 <sensorCalibration+0x384>)
 80026f8:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002700:	e026      	b.n	8002750 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002702:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002706:	4ad5      	ldr	r2, [pc, #852]	; (8002a5c <sensorCalibration+0x388>)
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002712:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002716:	4ad2      	ldr	r2, [pc, #840]	; (8002a60 <sensorCalibration+0x38c>)
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	4ad1      	ldr	r2, [pc, #836]	; (8002a64 <sensorCalibration+0x390>)
 800271e:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002720:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800272a:	4413      	add	r3, r2
 800272c:	3b40      	subs	r3, #64	; 0x40
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002734:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800273e:	4413      	add	r3, r2
 8002740:	3b70      	subs	r3, #112	; 0x70
 8002742:	4ac8      	ldr	r2, [pc, #800]	; (8002a64 <sensorCalibration+0x390>)
 8002744:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002746:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800274a:	3301      	adds	r3, #1
 800274c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002750:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002754:	2b0b      	cmp	r3, #11
 8002756:	d9d4      	bls.n	8002702 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002758:	2300      	movs	r3, #0
 800275a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800275e:	e013      	b.n	8002788 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002760:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002764:	4ac0      	ldr	r2, [pc, #768]	; (8002a68 <sensorCalibration+0x394>)
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002770:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002774:	4abd      	ldr	r2, [pc, #756]	; (8002a6c <sensorCalibration+0x398>)
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	4aba      	ldr	r2, [pc, #744]	; (8002a64 <sensorCalibration+0x390>)
 800277c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 800277e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002782:	3301      	adds	r3, #1
 8002784:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002788:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d9e7      	bls.n	8002760 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002790:	e0f5      	b.n	800297e <sensorCalibration+0x2aa>

		setLED2('X');
 8002792:	2058      	movs	r0, #88	; 0x58
 8002794:	f7ff f862 	bl	800185c <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002798:	2300      	movs	r3, #0
 800279a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800279e:	e06e      	b.n	800287e <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 80027a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027a4:	4ab2      	ldr	r2, [pc, #712]	; (8002a70 <sensorCalibration+0x39c>)
 80027a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80027aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027ae:	ee07 2a90 	vmov	s15, r2
 80027b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027bc:	4413      	add	r3, r2
 80027be:	3b40      	subs	r3, #64	; 0x40
 80027c0:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 80027c4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027c8:	4aa9      	ldr	r2, [pc, #676]	; (8002a70 <sensorCalibration+0x39c>)
 80027ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80027ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027d2:	ee07 2a90 	vmov	s15, r2
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027e0:	4413      	add	r3, r2
 80027e2:	3b70      	subs	r3, #112	; 0x70
 80027e4:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 80027e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027f2:	4413      	add	r3, r2
 80027f4:	3b40      	subs	r3, #64	; 0x40
 80027f6:	ed93 7a00 	vldr	s14, [r3]
 80027fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027fe:	4a97      	ldr	r2, [pc, #604]	; (8002a5c <sensorCalibration+0x388>)
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	dd0d      	ble.n	800282e <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002812:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002816:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440a      	add	r2, r1
 8002822:	3a40      	subs	r2, #64	; 0x40
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	498d      	ldr	r1, [pc, #564]	; (8002a5c <sensorCalibration+0x388>)
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 800282e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002838:	4413      	add	r3, r2
 800283a:	3b70      	subs	r3, #112	; 0x70
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002844:	4a86      	ldr	r2, [pc, #536]	; (8002a60 <sensorCalibration+0x38c>)
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	d50d      	bpl.n	8002874 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002858:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800285c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002866:	440a      	add	r2, r1
 8002868:	3a70      	subs	r2, #112	; 0x70
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	497c      	ldr	r1, [pc, #496]	; (8002a60 <sensorCalibration+0x38c>)
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002874:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002878:	3301      	adds	r3, #1
 800287a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800287e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002882:	2b0b      	cmp	r3, #11
 8002884:	d98c      	bls.n	80027a0 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002886:	2300      	movs	r3, #0
 8002888:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800288c:	e073      	b.n	8002976 <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 800288e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002892:	4a78      	ldr	r2, [pc, #480]	; (8002a74 <sensorCalibration+0x3a0>)
 8002894:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002898:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800289c:	ee07 2a90 	vmov	s15, r2
 80028a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028aa:	4413      	add	r3, r2
 80028ac:	3b78      	subs	r3, #120	; 0x78
 80028ae:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 80028b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028b6:	4a6f      	ldr	r2, [pc, #444]	; (8002a74 <sensorCalibration+0x3a0>)
 80028b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028bc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028c0:	ee07 2a90 	vmov	s15, r2
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028ce:	4413      	add	r3, r2
 80028d0:	3b80      	subs	r3, #128	; 0x80
 80028d2:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 80028d6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028e0:	4413      	add	r3, r2
 80028e2:	3b78      	subs	r3, #120	; 0x78
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028ec:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <sensorCalibration+0x394>)
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	dd10      	ble.n	8002922 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002900:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002904:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <sensorCalibration+0x3a0>)
 8002906:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800290a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800290e:	ee07 2a90 	vmov	s15, r2
 8002912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002916:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <sensorCalibration+0x394>)
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	edc3 7a00 	vstr	s15, [r3]
 8002920:	e024      	b.n	800296c <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002922:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800292c:	4413      	add	r3, r2
 800292e:	3b80      	subs	r3, #128	; 0x80
 8002930:	ed93 7a00 	vldr	s14, [r3]
 8002934:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002938:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <sensorCalibration+0x398>)
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294a:	d50f      	bpl.n	800296c <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 800294c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002950:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <sensorCalibration+0x3a0>)
 8002952:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002956:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800295a:	ee07 2a90 	vmov	s15, r2
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <sensorCalibration+0x398>)
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 800296c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002970:	3301      	adds	r3, #1
 8002972:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002976:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800297a:	2b01      	cmp	r3, #1
 800297c:	d987      	bls.n	800288e <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 800297e:	204c      	movs	r0, #76	; 0x4c
 8002980:	f002 fa4c 	bl	8004e1c <getSwitchStatus>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	f43f af03 	beq.w	8002792 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002992:	e01b      	b.n	80029cc <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002994:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002998:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <sensorCalibration+0x388>)
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	ed93 7a00 	vldr	s14, [r3]
 80029a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80029a6:	4a2e      	ldr	r2, [pc, #184]	; (8002a60 <sensorCalibration+0x38c>)
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <sensorCalibration+0x3a4>)
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80029c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80029c6:	3301      	adds	r3, #1
 80029c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80029cc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80029d0:	2b0b      	cmp	r3, #11
 80029d2:	d9df      	bls.n	8002994 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80029da:	e010      	b.n	80029fe <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 80029dc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80029e0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80029e4:	491e      	ldr	r1, [pc, #120]	; (8002a60 <sensorCalibration+0x38c>)
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	440a      	add	r2, r1
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4923      	ldr	r1, [pc, #140]	; (8002a7c <sensorCalibration+0x3a8>)
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80029f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80029fe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002a02:	2b0b      	cmp	r3, #11
 8002a04:	d9ea      	bls.n	80029dc <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002a0c:	e01b      	b.n	8002a46 <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002a0e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <sensorCalibration+0x394>)
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <sensorCalibration+0x398>)
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <sensorCalibration+0x3ac>)
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a3c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002a40:	3301      	adds	r3, #1
 8002a42:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002a46:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d9df      	bls.n	8002a0e <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002a54:	e027      	b.n	8002aa6 <sensorCalibration+0x3d2>
 8002a56:	bf00      	nop
 8002a58:	447a0000 	.word	0x447a0000
 8002a5c:	2000c160 	.word	0x2000c160
 8002a60:	20000000 	.word	0x20000000
 8002a64:	44bb8000 	.word	0x44bb8000
 8002a68:	2000c110 	.word	0x2000c110
 8002a6c:	2000c190 	.word	0x2000c190
 8002a70:	20000288 	.word	0x20000288
 8002a74:	200002a0 	.word	0x200002a0
 8002a78:	2000c004 	.word	0x2000c004
 8002a7c:	2000bfa0 	.word	0x2000bfa0
 8002a80:	2000bfd8 	.word	0x2000bfd8
		side_offset_values[i] = side_min_values[i];
 8002a84:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002a88:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002a8c:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <sensorCalibration+0x3e4>)
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	440a      	add	r2, r1
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4909      	ldr	r1, [pc, #36]	; (8002abc <sensorCalibration+0x3e8>)
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a9c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002aa6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d9ea      	bls.n	8002a84 <sensorCalibration+0x3b0>
	}
}
 8002aae:	bf00      	nop
 8002ab0:	3780      	adds	r7, #128	; 0x80
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000c190 	.word	0x2000c190
 8002abc:	2000bf98 	.word	0x2000bf98

08002ac0 <initLog>:
static float log_debug[12000];
static float log_distance[6000];
static float log_theta[6000];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <initLog+0x60>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <initLog+0x64>)
 8002aca:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <initLog+0x68>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <initLog+0x6c>)
 8002ad2:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <initLog+0x70>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <initLog+0x74>)
 8002ada:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <initLog+0x78>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <initLog+0x7c>)
 8002ae2:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <initLog+0x80>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <initLog+0x84>)
 8002aea:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <initLog+0x60>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <initLog+0x88>)
 8002af2:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <initLog+0x68>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <initLog+0x8c>)
 8002afa:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <initLog+0x70>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <initLog+0x90>)
 8002b02:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <initLog+0x78>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <initLog+0x94>)
 8002b0a:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <initLog+0x80>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <initLog+0x98>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	0800db6c 	.word	0x0800db6c
 8002b24:	2000bf80 	.word	0x2000bf80
 8002b28:	0800db70 	.word	0x0800db70
 8002b2c:	2000bfd4 	.word	0x2000bfd4
 8002b30:	0800db74 	.word	0x0800db74
 8002b34:	2000bf90 	.word	0x2000bf90
 8002b38:	0800db78 	.word	0x0800db78
 8002b3c:	2000bf7c 	.word	0x2000bf7c
 8002b40:	0800db7c 	.word	0x0800db7c
 8002b44:	2000bf8c 	.word	0x2000bf8c
 8002b48:	2000bf88 	.word	0x2000bf88
 8002b4c:	2000bf94 	.word	0x2000bf94
 8002b50:	2000c000 	.word	0x2000c000
 8002b54:	2000bff8 	.word	0x2000bff8
 8002b58:	2000bfd0 	.word	0x2000bfd0

08002b5c <saveDistance>:

void saveDistance(float distance){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <saveDistance+0x2c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fca4 	bl	80014bc <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <saveDistance+0x2c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <saveDistance+0x2c>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	2000bf80 	.word	0x2000bf80

08002b8c <saveTheta>:

void saveTheta(float theta){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <saveTheta+0x2c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fc8c 	bl	80014bc <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <saveTheta+0x2c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	4a03      	ldr	r2, [pc, #12]	; (8002bb8 <saveTheta+0x2c>)
 8002bac:	6013      	str	r3, [r2, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000bfd4 	.word	0x2000bfd4

08002bbc <ereaseLog>:
	FLASH_Write_Word_F(writeAdd_5, value);
	writeAdd_5+= 0x04;
}


void ereaseLog(){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8002bc0:	2007      	movs	r0, #7
 8002bc2:	f7fe fc5b 	bl	800147c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8002bc6:	2008      	movs	r0, #8
 8002bc8:	f7fe fc58 	bl	800147c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8002bcc:	2009      	movs	r0, #9
 8002bce:	f7fe fc55 	bl	800147c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8002bd2:	200a      	movs	r0, #10
 8002bd4:	f7fe fc52 	bl	800147c <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002bd8:	200b      	movs	r0, #11
 8002bda:	f7fe fc4f 	bl	800147c <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <ereaseLog+0x50>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <ereaseLog+0x54>)
 8002be4:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <ereaseLog+0x58>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <ereaseLog+0x5c>)
 8002bec:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <ereaseLog+0x60>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <ereaseLog+0x64>)
 8002bf4:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <ereaseLog+0x68>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <ereaseLog+0x6c>)
 8002bfc:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <ereaseLog+0x70>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <ereaseLog+0x74>)
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	0800db6c 	.word	0x0800db6c
 8002c10:	2000bf80 	.word	0x2000bf80
 8002c14:	0800db70 	.word	0x0800db70
 8002c18:	2000bfd4 	.word	0x2000bfd4
 8002c1c:	0800db74 	.word	0x0800db74
 8002c20:	2000bf90 	.word	0x2000bf90
 8002c24:	0800db78 	.word	0x0800db78
 8002c28:	2000bf7c 	.word	0x2000bf7c
 8002c2c:	0800db7c 	.word	0x0800db7c
 8002c30:	2000bf8c 	.word	0x2000bf8c

08002c34 <getDistanceLogSize>:
	FLASH_EreaseSector(FLASH_SECTOR_11);

	writeAdd_5= start_adress_sector11;
}

uint16_t getDistanceLogSize(){
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <getDistanceLogSize+0x14>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	2000bf3c 	.word	0x2000bf3c

08002c4c <loadDistance>:
uint16_t getDebugLogSize(){
	return log_debug_cnt;
}


void loadDistance(){
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <loadDistance+0x6c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <loadDistance+0x70>)
 8002c5c:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <loadDistance+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <loadDistance+0x70>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	4915      	ldr	r1, [pc, #84]	; (8002cc4 <loadDistance+0x78>)
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <loadDistance+0x78>)
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	eef4 7a67 	vcmp.f32	s15, s15
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d60e      	bvs.n	8002caa <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <loadDistance+0x74>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <loadDistance+0x74>)
 8002c96:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <loadDistance+0x70>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <loadDistance+0x70>)
 8002ca0:	6013      	str	r3, [r2, #0]
		i++;
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 8002ca8:	e7dc      	b.n	8002c64 <loadDistance+0x18>
			break;
 8002caa:	bf00      	nop
	}
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	0800db6c 	.word	0x0800db6c
 8002cbc:	2000bf88 	.word	0x2000bf88
 8002cc0:	2000bf3c 	.word	0x2000bf3c
 8002cc4:	200003bc 	.word	0x200003bc

08002cc8 <loadTheta>:

void loadTheta(){
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <loadTheta+0x6c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <loadTheta+0x70>)
 8002cd8:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <loadTheta+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 8002ce0:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <loadTheta+0x70>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4915      	ldr	r1, [pc, #84]	; (8002d40 <loadTheta+0x78>)
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <loadTheta+0x78>)
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	eef4 7a67 	vcmp.f32	s15, s15
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	d60e      	bvs.n	8002d26 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <loadTheta+0x74>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <loadTheta+0x74>)
 8002d12:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <loadTheta+0x70>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <loadTheta+0x70>)
 8002d1c:	6013      	str	r3, [r2, #0]
		i++;
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	3301      	adds	r3, #1
 8002d22:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8002d24:	e7dc      	b.n	8002ce0 <loadTheta+0x18>
			break;
 8002d26:	bf00      	nop
	}
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	0800db70 	.word	0x0800db70
 8002d38:	2000bf94 	.word	0x2000bf94
 8002d3c:	2000bf3e 	.word	0x2000bf3e
 8002d40:	2000617c 	.word	0x2000617c

08002d44 <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <getDistanceLog+0x28>)
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	ee07 3a90 	vmov	s15, r3
}
 8002d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200003bc 	.word	0x200003bc

08002d70 <getThetaLog>:

float getThetaLog(uint16_t idx){
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
	return log_theta[idx];
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <getThetaLog+0x28>)
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	ee07 3a90 	vmov	s15, r3
}
 8002d88:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000617c 	.word	0x2000617c

08002d9c <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 8002db0:	2200      	movs	r2, #0
 8002db2:	2104      	movs	r1, #4
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <read_byte+0x50>)
 8002db6:	f003 fde3 	bl	8006980 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8002dba:	f107 010f 	add.w	r1, r7, #15
 8002dbe:	2364      	movs	r3, #100	; 0x64
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	480b      	ldr	r0, [pc, #44]	; (8002df0 <read_byte+0x54>)
 8002dc4:	f004 fbce 	bl	8007564 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8002dc8:	f107 010e 	add.w	r1, r7, #14
 8002dcc:	2364      	movs	r3, #100	; 0x64
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <read_byte+0x54>)
 8002dd2:	f004 fcfb 	bl	80077cc <HAL_SPI_Receive>
		CS_SET;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	2104      	movs	r1, #4
 8002dda:	4804      	ldr	r0, [pc, #16]	; (8002dec <read_byte+0x50>)
 8002ddc:	f003 fdd0 	bl	8006980 <HAL_GPIO_WritePin>

	return val;
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	2000c258 	.word	0x2000c258

08002df4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2104      	movs	r1, #4
 8002e12:	480c      	ldr	r0, [pc, #48]	; (8002e44 <write_byte+0x50>)
 8002e14:	f003 fdb4 	bl	8006980 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8002e18:	f107 010f 	add.w	r1, r7, #15
 8002e1c:	2364      	movs	r3, #100	; 0x64
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4809      	ldr	r0, [pc, #36]	; (8002e48 <write_byte+0x54>)
 8002e22:	f004 fb9f 	bl	8007564 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8002e26:	1db9      	adds	r1, r7, #6
 8002e28:	2364      	movs	r3, #100	; 0x64
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4806      	ldr	r0, [pc, #24]	; (8002e48 <write_byte+0x54>)
 8002e2e:	f004 fccd 	bl	80077cc <HAL_SPI_Receive>
	CS_SET;
 8002e32:	2201      	movs	r2, #1
 8002e34:	2104      	movs	r1, #4
 8002e36:	4803      	ldr	r0, [pc, #12]	; (8002e44 <write_byte+0x50>)
 8002e38:	f003 fda2 	bl	8006980 <HAL_GPIO_WritePin>
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	2000c258 	.word	0x2000c258

08002e4c <IMU_init>:

uint8_t IMU_init() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 8002e56:	2075      	movs	r0, #117	; 0x75
 8002e58:	f7ff ffa0 	bl	8002d9c <read_byte>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8002e60:	79bb      	ldrb	r3, [r7, #6]
 8002e62:	2b70      	cmp	r3, #112	; 0x70
 8002e64:	d110      	bne.n	8002e88 <IMU_init+0x3c>
		ret = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	206b      	movs	r0, #107	; 0x6b
 8002e6e:	f7ff ffc1 	bl	8002df4 <write_byte>
		HAL_Delay(100);
 8002e72:	2064      	movs	r0, #100	; 0x64
 8002e74:	f002 f952 	bl	800511c <HAL_Delay>
		write_byte(0x1A, 0x00);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	201a      	movs	r0, #26
 8002e7c:	f7ff ffba 	bl	8002df4 <write_byte>
		write_byte(0x1B, 0x18);
 8002e80:	2118      	movs	r1, #24
 8002e82:	201b      	movs	r0, #27
 8002e84:	f7ff ffb6 	bl	8002df4 <write_byte>
	}
	return ret;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <read_gyro_data>:

void read_gyro_data() {
 8002e94:	b598      	push	{r3, r4, r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 8002e98:	2047      	movs	r0, #71	; 0x47
 8002e9a:	f7ff ff7f 	bl	8002d9c <read_byte>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	b21c      	sxth	r4, r3
 8002ea4:	2048      	movs	r0, #72	; 0x48
 8002ea6:	f7ff ff79 	bl	8002d9c <read_byte>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	4323      	orrs	r3, r4
 8002eb0:	b21a      	sxth	r2, r3
 8002eb2:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <read_gyro_data+0x28>)
 8002eb4:	801a      	strh	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	bd98      	pop	{r3, r4, r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000c198 	.word	0x2000c198

08002ec0 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1200, ki = 19000, kd = 0.0;
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <calculateVelocityControlFlip+0xf0>)
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <calculateVelocityControlFlip+0xf4>)
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 8002eda:	f000 f8cd 	bl	8003078 <getCurrentVelocity>
 8002ede:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8002ee2:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <calculateVelocityControlFlip+0xf8>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d159      	bne.n	8002f9e <calculateVelocityControlFlip+0xde>
		if(i_clear_flag == 1){
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <calculateVelocityControlFlip+0xfc>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <calculateVelocityControlFlip+0x40>
			i = 0;
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <calculateVelocityControlFlip+0x100>)
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <calculateVelocityControlFlip+0xfc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8002f00:	f000 f886 	bl	8003010 <setvariablespeed>
 8002f04:	eeb0 7a40 	vmov.f32	s14, s0
 8002f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f10:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8002f14:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8002f24:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <calculateVelocityControlFlip+0x100>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fb0d 	bl	8000548 <__aeabi_f2d>
 8002f2e:	4604      	mov	r4, r0
 8002f30:	460d      	mov	r5, r1
 8002f32:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	ee17 0a90 	vmov	r0, s15
 8002f42:	f7fd fb01 	bl	8000548 <__aeabi_f2d>
 8002f46:	a318      	add	r3, pc, #96	; (adr r3, 8002fa8 <calculateVelocityControlFlip+0xe8>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fb54 	bl	80005f8 <__aeabi_dmul>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4620      	mov	r0, r4
 8002f56:	4629      	mov	r1, r5
 8002f58:	f7fd f998 	bl	800028c <__adddf3>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	4618      	mov	r0, r3
 8002f62:	4621      	mov	r1, r4
 8002f64:	f7fd fe40 	bl	8000be8 <__aeabi_d2f>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <calculateVelocityControlFlip+0x100>)
 8002f6c:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		mon_p = p;
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <calculateVelocityControlFlip+0x104>)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6013      	str	r3, [r2, #0]
		mon_i = i;
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <calculateVelocityControlFlip+0x100>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <calculateVelocityControlFlip+0x108>)
 8002f7a:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <calculateVelocityControlFlip+0x100>)
 8002f7e:	ed93 7a00 	vldr	s14, [r3]
 8002f82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <calculateVelocityControlFlip+0x10c>)
 8002f94:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <calculateVelocityControlFlip+0x110>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6013      	str	r3, [r2, #0]

	}

}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	44960000 	.word	0x44960000
 8002fb4:	46947000 	.word	0x46947000
 8002fb8:	2000bf40 	.word	0x2000bf40
 8002fbc:	2000bf41 	.word	0x2000bf41
 8002fc0:	2000bf50 	.word	0x2000bf50
 8002fc4:	2000c1b0 	.word	0x2000c1b0
 8002fc8:	2000c1a8 	.word	0x2000c1a8
 8002fcc:	2000bf44 	.word	0x2000bf44
 8002fd0:	2000bf54 	.word	0x2000bf54

08002fd4 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <getVelocityControlTerm+0x18>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	ee07 3a90 	vmov	s15, r3
}
 8002fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	2000bf44 	.word	0x2000bf44

08002ff0 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	; (800300c <setTargetVelocity+0x1c>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	2000bf48 	.word	0x2000bf48

08003010 <setvariablespeed>:

float setvariablespeed(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003014:	f7fe f9bc 	bl	8001390 <getspeedcount>
 8003018:	eeb0 7a40 	vmov.f32	s14, s0
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <setvariablespeed+0x5c>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	db04      	blt.n	8003036 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <setvariablespeed+0x5c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <setvariablespeed+0x60>)
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	e012      	b.n	800305c <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003036:	f7fe f9ab 	bl	8001390 <getspeedcount>
 800303a:	eeb0 7a40 	vmov.f32	s14, s0
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <setvariablespeed+0x5c>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	d506      	bpl.n	800305c <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 800304e:	f7fe f99f 	bl	8001390 <getspeedcount>
 8003052:	eef0 7a40 	vmov.f32	s15, s0
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <setvariablespeed+0x60>)
 8003058:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <setvariablespeed+0x60>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	ee07 3a90 	vmov	s15, r3
}
 8003064:	eeb0 0a67 	vmov.f32	s0, s15
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000bf48 	.word	0x2000bf48
 8003070:	2000bf4c 	.word	0x2000bf4c
 8003074:	00000000 	.word	0x00000000

08003078 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	80fb      	strh	r3, [r7, #6]
 8003082:	2300      	movs	r3, #0
 8003084:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003086:	1d3a      	adds	r2, r7, #4
 8003088:	1dbb      	adds	r3, r7, #6
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe f90b 	bl	80012a8 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	461a      	mov	r2, r3
 8003098:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	0fda      	lsrs	r2, r3, #31
 80030a0:	4413      	add	r3, r2
 80030a2:	105b      	asrs	r3, r3, #1
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ac:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7fd fa49 	bl	8000548 <__aeabi_f2d>
 80030b6:	a30d      	add	r3, pc, #52	; (adr r3, 80030ec <getCurrentVelocity+0x74>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd fa9c 	bl	80005f8 <__aeabi_dmul>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	4618      	mov	r0, r3
 80030c6:	4621      	mov	r1, r4
 80030c8:	f7fd fd8e 	bl	8000be8 <__aeabi_d2f>
 80030cc:	4603      	mov	r3, r0
 80030ce:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 80030d0:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <getCurrentVelocity+0x70>)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6013      	str	r3, [r2, #0]

	return current_velocity;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	ee07 3a90 	vmov	s15, r3
}
 80030dc:	eeb0 0a67 	vmov.f32	s0, s15
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2000c1a4 	.word	0x2000c1a4
 80030ec:	31e7b585 	.word	0x31e7b585
 80030f0:	3f8e28c7 	.word	0x3f8e28c7

080030f4 <startVelocityControl>:
{
	return target_velocity;
}

void startVelocityControl(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <startVelocityControl+0x1c>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <startVelocityControl+0x20>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000bf40 	.word	0x2000bf40
 8003114:	2000bf41 	.word	0x2000bf41

08003118 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <stopVelocityControl+0x14>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	2000bf40 	.word	0x2000bf40

08003130 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003138:	1d39      	adds	r1, r7, #4
 800313a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800313e:	2201      	movs	r2, #1
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <__io_putchar+0x20>)
 8003142:	f005 fe1c 	bl	8008d7e <HAL_UART_Transmit>
	return ch;
 8003146:	687b      	ldr	r3, [r7, #4]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000c2b0 	.word	0x2000c2b0

08003154 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d123      	bne.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x5a>
      timer++;
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800316e:	6013      	str	r3, [r2, #0]
      timer2++;
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003178:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 800317a:	f7fd ffd1 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 800317e:	f7fe f9d7 	bl	8001530 <updateIMUValue>
      updateAnalogSensor();
 8003182:	f7ff f8b5 	bl	80022f0 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003186:	f7fe fcb3 	bl	8001af0 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 800318a:	f7ff fe99 	bl	8002ec0 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 800318e:	f7fd fefb 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003192:	f7fe fd5b 	bl	8001c4c <lineTraceFlip>
      runningFlip();
 8003196:	f001 f9dd 	bl	8004554 <runningFlip>
      motorCtrlFlip();
 800319a:	f000 ffc1 	bl	8004120 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 800319e:	f001 f823 	bl	80041e8 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 80031a2:	f001 f88f 	bl	80042c4 <updateSideSensorStatus>

      checkCourseOut();
 80031a6:	f7fe fe29 	bl	8001dfc <checkCourseOut>

      resetEncoderCnt();
 80031aa:	f7fe f8c1 	bl	8001330 <resetEncoderCnt>
   }

   if(htim->Instance == TIM7){//0.1ms
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d106      	bne.n	80031c6 <HAL_TIM_PeriodElapsedCallback+0x72>
	   timer1++;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80031c0:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 80031c2:	f7fe fe9f 	bl	8001f04 <storeAnalogSensorBuffer>

   }
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40001000 	.word	0x40001000
 80031d4:	2000c1b4 	.word	0x2000c1b4
 80031d8:	2000c1fc 	.word	0x2000c1fc
 80031dc:	40001400 	.word	0x40001400
 80031e0:	2000c3d4 	.word	0x2000c3d4

080031e4 <init>:

void init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	  initADC();
 80031e8:	f7fe fe76 	bl	8001ed8 <initADC>
	  initEncoder();
 80031ec:	f7fd ff7a 	bl	80010e4 <initEncoder>
	  initLog();
 80031f0:	f7ff fc66 	bl	8002ac0 <initLog>
	  initGyro();
 80031f4:	f7fe f98c 	bl	8001510 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 80031f8:	4809      	ldr	r0, [pc, #36]	; (8003220 <init+0x3c>)
 80031fa:	f004 fece 	bl	8007f9a <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 80031fe:	4809      	ldr	r0, [pc, #36]	; (8003224 <init+0x40>)
 8003200:	f004 fecb 	bl	8007f9a <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003204:	f000 ff74 	bl	80040f0 <initMotor>

	  setLED('R');
 8003208:	2052      	movs	r0, #82	; 0x52
 800320a:	f7fe fa59 	bl	80016c0 <setLED>

	  sensorCalibration();
 800320e:	f7ff fa61 	bl	80026d4 <sensorCalibration>

	  HAL_Delay(1000);
 8003212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003216:	f001 ff81 	bl	800511c <HAL_Delay>

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000c350 	.word	0x2000c350
 8003224:	2000c438 	.word	0x2000c438

08003228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322a:	b085      	sub	sp, #20
 800322c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800322e:	f001 ff03 	bl	8005038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003232:	f000 fa0b 	bl	800364c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003236:	f000 fe99 	bl	8003f6c <MX_GPIO_Init>
  MX_DMA_Init();
 800323a:	f000 fe6f 	bl	8003f1c <MX_DMA_Init>
  MX_TIM1_Init();
 800323e:	f000 fc1f 	bl	8003a80 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003242:	f000 fc9f 	bl	8003b84 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003246:	f000 fcf1 	bl	8003c2c <MX_TIM4_Init>
  MX_TIM8_Init();
 800324a:	f000 fdad 	bl	8003da8 <MX_TIM8_Init>
  MX_ADC1_Init();
 800324e:	f000 fa67 	bl	8003720 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003252:	f000 fbb1 	bl	80039b8 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003256:	f000 fbdd 	bl	8003a14 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800325a:	f000 fe35 	bl	8003ec8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800325e:	f000 fd39 	bl	8003cd4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003262:	f000 fd6d 	bl	8003d40 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003266:	f000 fabb 	bl	80037e0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 800326a:	f7ff ffbb 	bl	80031e4 <init>

  bool running_flag = false;
 800326e:	2300      	movs	r3, #0
 8003270:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003272:	204c      	movs	r0, #76	; 0x4c
 8003274:	f001 fdd2 	bl	8004e1c <getSwitchStatus>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d109      	bne.n	8003292 <main+0x6a>
 800327e:	4bbc      	ldr	r3, [pc, #752]	; (8003570 <main+0x348>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <main+0x6a>
		  timer = 0;
 8003286:	4bbb      	ldr	r3, [pc, #748]	; (8003574 <main+0x34c>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
		  sw = 1;
 800328c:	4bb8      	ldr	r3, [pc, #736]	; (8003570 <main+0x348>)
 800328e:	2201      	movs	r2, #1
 8003290:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003292:	204c      	movs	r0, #76	; 0x4c
 8003294:	f001 fdc2 	bl	8004e1c <getSwitchStatus>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10a      	bne.n	80032b4 <main+0x8c>
 800329e:	4bb5      	ldr	r3, [pc, #724]	; (8003574 <main+0x34c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b14      	cmp	r3, #20
 80032a4:	d906      	bls.n	80032b4 <main+0x8c>
 80032a6:	4bb2      	ldr	r3, [pc, #712]	; (8003570 <main+0x348>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <main+0x8c>
		  sw = 2;
 80032ae:	4bb0      	ldr	r3, [pc, #704]	; (8003570 <main+0x348>)
 80032b0:	2202      	movs	r2, #2
 80032b2:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 80032b4:	4baf      	ldr	r3, [pc, #700]	; (8003574 <main+0x34c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b28      	cmp	r3, #40	; 0x28
 80032ba:	d906      	bls.n	80032ca <main+0xa2>
 80032bc:	4bac      	ldr	r3, [pc, #688]	; (8003570 <main+0x348>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <main+0xa2>
		  sw = 0;
 80032c4:	4baa      	ldr	r3, [pc, #680]	; (8003570 <main+0x348>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 80032ca:	204c      	movs	r0, #76	; 0x4c
 80032cc:	f001 fda6 	bl	8004e1c <getSwitchStatus>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <main+0xc8>
 80032d6:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <main+0x348>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d108      	bne.n	80032f0 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 80032de:	4ba6      	ldr	r3, [pc, #664]	; (8003578 <main+0x350>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4ba4      	ldr	r3, [pc, #656]	; (8003578 <main+0x350>)
 80032e8:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 80032ea:	4ba1      	ldr	r3, [pc, #644]	; (8003570 <main+0x348>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 80032f0:	2052      	movs	r0, #82	; 0x52
 80032f2:	f001 fd93 	bl	8004e1c <getSwitchStatus>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d109      	bne.n	8003310 <main+0xe8>
 80032fc:	4b9f      	ldr	r3, [pc, #636]	; (800357c <main+0x354>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <main+0xe8>
	  	  timer = 0;
 8003304:	4b9b      	ldr	r3, [pc, #620]	; (8003574 <main+0x34c>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 800330a:	4b9c      	ldr	r3, [pc, #624]	; (800357c <main+0x354>)
 800330c:	2201      	movs	r2, #1
 800330e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003310:	2052      	movs	r0, #82	; 0x52
 8003312:	f001 fd83 	bl	8004e1c <getSwitchStatus>
 8003316:	4603      	mov	r3, r0
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10a      	bne.n	8003332 <main+0x10a>
 800331c:	4b95      	ldr	r3, [pc, #596]	; (8003574 <main+0x34c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b14      	cmp	r3, #20
 8003322:	d906      	bls.n	8003332 <main+0x10a>
 8003324:	4b95      	ldr	r3, [pc, #596]	; (800357c <main+0x354>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <main+0x10a>
	  	  sw2 = 2;
 800332c:	4b93      	ldr	r3, [pc, #588]	; (800357c <main+0x354>)
 800332e:	2202      	movs	r2, #2
 8003330:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003332:	4b90      	ldr	r3, [pc, #576]	; (8003574 <main+0x34c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b28      	cmp	r3, #40	; 0x28
 8003338:	d906      	bls.n	8003348 <main+0x120>
 800333a:	4b90      	ldr	r3, [pc, #576]	; (800357c <main+0x354>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <main+0x120>
	  	  sw2 = 0;
 8003342:	4b8e      	ldr	r3, [pc, #568]	; (800357c <main+0x354>)
 8003344:	2200      	movs	r2, #0
 8003346:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003348:	2052      	movs	r0, #82	; 0x52
 800334a:	f001 fd67 	bl	8004e1c <getSwitchStatus>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <main+0x146>
 8003354:	4b89      	ldr	r3, [pc, #548]	; (800357c <main+0x354>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d108      	bne.n	800336e <main+0x146>
	  	  cnt++;
 800335c:	4b88      	ldr	r3, [pc, #544]	; (8003580 <main+0x358>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	4b86      	ldr	r3, [pc, #536]	; (8003580 <main+0x358>)
 8003366:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003368:	4b84      	ldr	r3, [pc, #528]	; (800357c <main+0x354>)
 800336a:	2200      	movs	r2, #0
 800336c:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 800336e:	4b84      	ldr	r3, [pc, #528]	; (8003580 <main+0x358>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d902      	bls.n	800337c <main+0x154>
		  cnt = 0;
 8003376:	4b82      	ldr	r3, [pc, #520]	; (8003580 <main+0x358>)
 8003378:	2200      	movs	r2, #0
 800337a:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 800337c:	4b80      	ldr	r3, [pc, #512]	; (8003580 <main+0x358>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <main+0x174>
		  HAL_Delay(1000);
 8003384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003388:	f001 fec8 	bl	800511c <HAL_Delay>
		  running_flag = true;
 800338c:	2301      	movs	r3, #1
 800338e:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8003390:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <main+0x35c>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003396:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <main+0x358>)
 8003398:	2200      	movs	r2, #0
 800339a:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <main+0x188>
		  stopLineTrace();
 80033a8:	f7fe fd16 	bl	8001dd8 <stopLineTrace>
		  stopVelocityControl();
 80033ac:	f7ff feb4 	bl	8003118 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){  //goal判?��?
 80033b0:	f001 f94a 	bl	8004648 <getgoalStatus>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <main+0x1a2>
		  running_flag = false;
 80033ba:	2300      	movs	r3, #0
 80033bc:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 80033be:	4b70      	ldr	r3, [pc, #448]	; (8003580 <main+0x358>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f000 ff5f 	bl	8004288 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 8){
 80033ca:	4b6b      	ldr	r3, [pc, #428]	; (8003578 <main+0x350>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	2b07      	cmp	r3, #7
 80033d0:	d902      	bls.n	80033d8 <main+0x1b0>
		  soiya = 0;
 80033d2:	4b69      	ldr	r3, [pc, #420]	; (8003578 <main+0x350>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 80033d8:	4b67      	ldr	r3, [pc, #412]	; (8003578 <main+0x350>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b07      	cmp	r3, #7
 80033de:	f200 811b 	bhi.w	8003618 <main+0x3f0>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <main+0x1c0>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	08003409 	.word	0x08003409
 80033ec:	08003433 	.word	0x08003433
 80033f0:	08003467 	.word	0x08003467
 80033f4:	0800349d 	.word	0x0800349d
 80033f8:	080034d7 	.word	0x080034d7
 80033fc:	0800350b 	.word	0x0800350b
 8003400:	08003541 	.word	0x08003541
 8003404:	0800359d 	.word	0x0800359d

			  case 0:
				  setLED('W');
 8003408:	2057      	movs	r0, #87	; 0x57
 800340a:	f7fe f959 	bl	80016c0 <setLED>
				  setLED2('R');
 800340e:	2052      	movs	r0, #82	; 0x52
 8003410:	f7fe fa24 	bl	800185c <setLED2>
				  printf("0\r\n");
 8003414:	485c      	ldr	r0, [pc, #368]	; (8003588 <main+0x360>)
 8003416:	f007 f801 	bl	800a41c <puts>

				  if(running_flag == true){
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80fd 	beq.w	800361c <main+0x3f4>
					  setLED('G');
 8003422:	2047      	movs	r0, #71	; 0x47
 8003424:	f7fe f94c 	bl	80016c0 <setLED>

				  		  //setTargetVelocity(0.6);
				  		  //startVelocityControl();
					      //startAngleControl();

				  		  setsuctionMotor(400);
 8003428:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800342c:	f000 ff2c 	bl	8004288 <setsuctionMotor>
				  		  //running();
				  		  //setMotor(500, 500);
				  		  //while(1);
				  }

				  break;
 8003430:	e0f4      	b.n	800361c <main+0x3f4>

			  case 1:
				  setLED('G');
 8003432:	2047      	movs	r0, #71	; 0x47
 8003434:	f7fe f944 	bl	80016c0 <setLED>
				  setLED2('G');
 8003438:	2047      	movs	r0, #71	; 0x47
 800343a:	f7fe fa0f 	bl	800185c <setLED2>

				  if(running_flag == true){
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80ed 	beq.w	8003620 <main+0x3f8>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003446:	f7fd ffd7 	bl	80013f8 <clearspeedcount>

						  setTargetVelocity(0.0);
 800344a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800358c <main+0x364>
 800344e:	f7ff fdcf 	bl	8002ff0 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(0);
 8003452:	2000      	movs	r0, #0
 8003454:	f000 ff18 	bl	8004288 <setsuctionMotor>

						  HAL_Delay(1000);
 8003458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800345c:	f001 fe5e 	bl	800511c <HAL_Delay>

						  running();
 8003460:	f000 ff96 	bl	8004390 <running>
						  //running();
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8003464:	e0dc      	b.n	8003620 <main+0x3f8>

			  case 2:
				  setLED('B');
 8003466:	2042      	movs	r0, #66	; 0x42
 8003468:	f7fe f92a 	bl	80016c0 <setLED>
				  setLED2('B');
 800346c:	2042      	movs	r0, #66	; 0x42
 800346e:	f7fe f9f5 	bl	800185c <setLED2>

				  if(running_flag == true){
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80d5 	beq.w	8003624 <main+0x3fc>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800347a:	f7fd ffbd 	bl	80013f8 <clearspeedcount>

						  setTargetVelocity(1.6);
 800347e:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8003590 <main+0x368>
 8003482:	f7ff fdb5 	bl	8002ff0 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(400);
 8003486:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800348a:	f000 fefd 	bl	8004288 <setsuctionMotor>
						  HAL_Delay(1000);
 800348e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003492:	f001 fe43 	bl	800511c <HAL_Delay>

						  running();
 8003496:	f000 ff7b 	bl	8004390 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 800349a:	e0c3      	b.n	8003624 <main+0x3fc>

			  case 3:
				  setLED('M');
 800349c:	204d      	movs	r0, #77	; 0x4d
 800349e:	f7fe f90f 	bl	80016c0 <setLED>
				  setLED2('W');
 80034a2:	2057      	movs	r0, #87	; 0x57
 80034a4:	f7fe f9da 	bl	800185c <setLED2>

				  if(running_flag == true){
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80bc 	beq.w	8003628 <main+0x400>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80034b0:	f7fd ffa2 	bl	80013f8 <clearspeedcount>

					      setRunMode(1);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f000 ff41 	bl	800433c <setRunMode>

						  setTargetVelocity(1.4);
 80034ba:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8003594 <main+0x36c>
 80034be:	f7ff fd97 	bl	8002ff0 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 80034c2:	20fa      	movs	r0, #250	; 0xfa
 80034c4:	f000 fee0 	bl	8004288 <setsuctionMotor>

						  HAL_Delay(1000);
 80034c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034cc:	f001 fe26 	bl	800511c <HAL_Delay>

						  running();
 80034d0:	f000 ff5e 	bl	8004390 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 80034d4:	e0a8      	b.n	8003628 <main+0x400>

			  case 4:
				  setLED('Y');
 80034d6:	2059      	movs	r0, #89	; 0x59
 80034d8:	f7fe f8f2 	bl	80016c0 <setLED>
				  //setLED2('Y');

				  if(running_flag == true){
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a4 	beq.w	800362c <main+0x404>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80034e4:	f7fd ff88 	bl	80013f8 <clearspeedcount>

					      setRunMode(1);
 80034e8:	2001      	movs	r0, #1
 80034ea:	f000 ff27 	bl	800433c <setRunMode>

						  setTargetVelocity(1.6);
 80034ee:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003590 <main+0x368>
 80034f2:	f7ff fd7d 	bl	8002ff0 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 80034f6:	20fa      	movs	r0, #250	; 0xfa
 80034f8:	f000 fec6 	bl	8004288 <setsuctionMotor>

						  HAL_Delay(1000);
 80034fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003500:	f001 fe0c 	bl	800511c <HAL_Delay>

						  running();
 8003504:	f000 ff44 	bl	8004390 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8003508:	e090      	b.n	800362c <main+0x404>

			  case 5:
				  setLED('C');
 800350a:	2043      	movs	r0, #67	; 0x43
 800350c:	f7fe f8d8 	bl	80016c0 <setLED>
				  setLED2('X');
 8003510:	2058      	movs	r0, #88	; 0x58
 8003512:	f7fe f9a3 	bl	800185c <setLED2>

				  if(running_flag == true){
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8089 	beq.w	8003630 <main+0x408>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800351e:	f7fd ff6b 	bl	80013f8 <clearspeedcount>

						  setTargetVelocity(1.8);
 8003522:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003598 <main+0x370>
 8003526:	f7ff fd63 	bl	8002ff0 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(300);
 800352a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800352e:	f000 feab 	bl	8004288 <setsuctionMotor>

						  HAL_Delay(1000);
 8003532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003536:	f001 fdf1 	bl	800511c <HAL_Delay>

						  running();
 800353a:	f000 ff29 	bl	8004390 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 800353e:	e077      	b.n	8003630 <main+0x408>

			  case 6:
				  setLED('R');
 8003540:	2052      	movs	r0, #82	; 0x52
 8003542:	f7fe f8bd 	bl	80016c0 <setLED>

				  if(running_flag == true){
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d073      	beq.n	8003634 <main+0x40c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800354c:	f7fd ff54 	bl	80013f8 <clearspeedcount>

						  setTargetVelocity(2.0);
 8003550:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003554:	f7ff fd4c 	bl	8002ff0 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(300);
 8003558:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800355c:	f000 fe94 	bl	8004288 <setsuctionMotor>

						  HAL_Delay(1000);
 8003560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003564:	f001 fdda 	bl	800511c <HAL_Delay>

						  running();
 8003568:	f000 ff12 	bl	8004390 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 800356c:	e062      	b.n	8003634 <main+0x40c>
 800356e:	bf00      	nop
 8003570:	2000c3d0 	.word	0x2000c3d0
 8003574:	2000c1b4 	.word	0x2000c1b4
 8003578:	2000bf5a 	.word	0x2000bf5a
 800357c:	2000bf58 	.word	0x2000bf58
 8003580:	2000c254 	.word	0x2000c254
 8003584:	2000c1fc 	.word	0x2000c1fc
 8003588:	0800db38 	.word	0x0800db38
 800358c:	00000000 	.word	0x00000000
 8003590:	3fcccccd 	.word	0x3fcccccd
 8003594:	3fb33333 	.word	0x3fb33333
 8003598:	3fe66666 	.word	0x3fe66666

			  case 7:
				  setLED2('A');
 800359c:	2041      	movs	r0, #65	; 0x41
 800359e:	f7fe f95d 	bl	800185c <setLED2>
				  printf("7\r\n");
 80035a2:	4826      	ldr	r0, [pc, #152]	; (800363c <main+0x414>)
 80035a4:	f006 ff3a 	bl	800a41c <puts>

				  if(running_flag == true){
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <main+0x410>
					  loadDistance();
 80035ae:	f7ff fb4d 	bl	8002c4c <loadDistance>
					  loadTheta();
 80035b2:	f7ff fb89 	bl	8002cc8 <loadTheta>

					  printf("Distance, Theta\r\n");
 80035b6:	4822      	ldr	r0, [pc, #136]	; (8003640 <main+0x418>)
 80035b8:	f006 ff30 	bl	800a41c <puts>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 80035bc:	2300      	movs	r3, #0
 80035be:	80bb      	strh	r3, [r7, #4]
 80035c0:	e01f      	b.n	8003602 <main+0x3da>
						 printf("%f, %f\r\n", getDistanceLog(i), getThetaLog(i));
 80035c2:	88bb      	ldrh	r3, [r7, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fbbd 	bl	8002d44 <getDistanceLog>
 80035ca:	ee10 3a10 	vmov	r3, s0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffba 	bl	8000548 <__aeabi_f2d>
 80035d4:	4605      	mov	r5, r0
 80035d6:	460e      	mov	r6, r1
 80035d8:	88bb      	ldrh	r3, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fbc8 	bl	8002d70 <getThetaLog>
 80035e0:	ee10 3a10 	vmov	r3, s0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc ffaf 	bl	8000548 <__aeabi_f2d>
 80035ea:	4603      	mov	r3, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	e9cd 3400 	strd	r3, r4, [sp]
 80035f2:	462a      	mov	r2, r5
 80035f4:	4633      	mov	r3, r6
 80035f6:	4813      	ldr	r0, [pc, #76]	; (8003644 <main+0x41c>)
 80035f8:	f006 fe9c 	bl	800a334 <iprintf>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 80035fc:	88bb      	ldrh	r3, [r7, #4]
 80035fe:	3301      	adds	r3, #1
 8003600:	80bb      	strh	r3, [r7, #4]
 8003602:	f7ff fb17 	bl	8002c34 <getDistanceLogSize>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	88bb      	ldrh	r3, [r7, #4]
 800360c:	4293      	cmp	r3, r2
 800360e:	d3d8      	bcc.n	80035c2 <main+0x39a>
					  }

					  printf("9999, 9999\r\n");
 8003610:	480d      	ldr	r0, [pc, #52]	; (8003648 <main+0x420>)
 8003612:	f006 ff03 	bl	800a41c <puts>
				  }

				  break;
 8003616:	e00f      	b.n	8003638 <main+0x410>

			  default:
				  break;
 8003618:	bf00      	nop
 800361a:	e62a      	b.n	8003272 <main+0x4a>
				  break;
 800361c:	bf00      	nop
 800361e:	e628      	b.n	8003272 <main+0x4a>
				  break;
 8003620:	bf00      	nop
 8003622:	e626      	b.n	8003272 <main+0x4a>
				  break;
 8003624:	bf00      	nop
 8003626:	e624      	b.n	8003272 <main+0x4a>
				  break;
 8003628:	bf00      	nop
 800362a:	e622      	b.n	8003272 <main+0x4a>
				  break;
 800362c:	bf00      	nop
 800362e:	e620      	b.n	8003272 <main+0x4a>
				  break;
 8003630:	bf00      	nop
 8003632:	e61e      	b.n	8003272 <main+0x4a>
				  break;
 8003634:	bf00      	nop
 8003636:	e61c      	b.n	8003272 <main+0x4a>
				  break;
 8003638:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 800363a:	e61a      	b.n	8003272 <main+0x4a>
 800363c:	0800db3c 	.word	0x0800db3c
 8003640:	0800db40 	.word	0x0800db40
 8003644:	0800db54 	.word	0x0800db54
 8003648:	0800db60 	.word	0x0800db60

0800364c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b094      	sub	sp, #80	; 0x50
 8003650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003652:	f107 0320 	add.w	r3, r7, #32
 8003656:	2230      	movs	r2, #48	; 0x30
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f006 f823 	bl	80096a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <SystemClock_Config+0xcc>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <SystemClock_Config+0xcc>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	6413      	str	r3, [r2, #64]	; 0x40
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <SystemClock_Config+0xcc>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800368c:	2300      	movs	r3, #0
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <SystemClock_Config+0xd0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <SystemClock_Config+0xd0>)
 8003696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <SystemClock_Config+0xd0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036a8:	2302      	movs	r3, #2
 80036aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ac:	2301      	movs	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036b0:	2310      	movs	r3, #16
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b4:	2302      	movs	r3, #2
 80036b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036bc:	2308      	movs	r3, #8
 80036be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80036c0:	23a8      	movs	r3, #168	; 0xa8
 80036c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036c4:	2302      	movs	r3, #2
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036c8:	2304      	movs	r3, #4
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036cc:	f107 0320 	add.w	r3, r7, #32
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 faa7 	bl	8006c24 <HAL_RCC_OscConfig>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80036dc:	f000 fd04 	bl	80040e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e0:	230f      	movs	r3, #15
 80036e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036e4:	2302      	movs	r3, #2
 80036e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	2105      	movs	r1, #5
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 fd00 	bl	8007104 <HAL_RCC_ClockConfig>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800370a:	f000 fced 	bl	80040e8 <Error_Handler>
  }
}
 800370e:	bf00      	nop
 8003710:	3750      	adds	r7, #80	; 0x50
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000

08003720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003726:	463b      	mov	r3, r7
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <MX_ADC1_Init+0xb8>)
 8003736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <MX_ADC1_Init+0xb4>)
 800373a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800373e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003748:	2201      	movs	r2, #1
 800374a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <MX_ADC1_Init+0xb4>)
 800374e:	2201      	movs	r2, #1
 8003750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <MX_ADC1_Init+0xb4>)
 800375c:	2200      	movs	r2, #0
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003762:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <MX_ADC1_Init+0xbc>)
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003768:	2200      	movs	r2, #0
 800376a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <MX_ADC1_Init+0xb4>)
 800376e:	2202      	movs	r2, #2
 8003770:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <MX_ADC1_Init+0xb4>)
 800377c:	2201      	movs	r2, #1
 800377e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003780:	4814      	ldr	r0, [pc, #80]	; (80037d4 <MX_ADC1_Init+0xb4>)
 8003782:	f001 fced 	bl	8005160 <HAL_ADC_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800378c:	f000 fcac 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003790:	230c      	movs	r3, #12
 8003792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003794:	2301      	movs	r3, #1
 8003796:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003798:	2307      	movs	r3, #7
 800379a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800379c:	463b      	mov	r3, r7
 800379e:	4619      	mov	r1, r3
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <MX_ADC1_Init+0xb4>)
 80037a2:	f001 fe31 	bl	8005408 <HAL_ADC_ConfigChannel>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037ac:	f000 fc9c 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80037b0:	230d      	movs	r3, #13
 80037b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80037b4:	2302      	movs	r3, #2
 80037b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037b8:	463b      	mov	r3, r7
 80037ba:	4619      	mov	r1, r3
 80037bc:	4805      	ldr	r0, [pc, #20]	; (80037d4 <MX_ADC1_Init+0xb4>)
 80037be:	f001 fe23 	bl	8005408 <HAL_ADC_ConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80037c8:	f000 fc8e 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	2000c118 	.word	0x2000c118
 80037d8:	40012000 	.word	0x40012000
 80037dc:	0f000001 	.word	0x0f000001

080037e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037e6:	463b      	mov	r3, r7
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80037f2:	4b6e      	ldr	r3, [pc, #440]	; (80039ac <MX_ADC2_Init+0x1cc>)
 80037f4:	4a6e      	ldr	r2, [pc, #440]	; (80039b0 <MX_ADC2_Init+0x1d0>)
 80037f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037f8:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <MX_ADC2_Init+0x1cc>)
 80037fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003806:	4b69      	ldr	r3, [pc, #420]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003808:	2201      	movs	r2, #1
 800380a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800380c:	4b67      	ldr	r3, [pc, #412]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800380e:	2201      	movs	r2, #1
 8003810:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003812:	4b66      	ldr	r3, [pc, #408]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800381a:	4b64      	ldr	r3, [pc, #400]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800381c:	2200      	movs	r2, #0
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003820:	4b62      	ldr	r3, [pc, #392]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003822:	4a64      	ldr	r2, [pc, #400]	; (80039b4 <MX_ADC2_Init+0x1d4>)
 8003824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003826:	4b61      	ldr	r3, [pc, #388]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 800382c:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800382e:	220c      	movs	r2, #12
 8003830:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003832:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800383a:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800383c:	2201      	movs	r2, #1
 800383e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003840:	485a      	ldr	r0, [pc, #360]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003842:	f001 fc8d 	bl	8005160 <HAL_ADC_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800384c:	f000 fc4c 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003850:	2300      	movs	r3, #0
 8003852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003854:	2301      	movs	r3, #1
 8003856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003858:	2307      	movs	r3, #7
 800385a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800385c:	463b      	mov	r3, r7
 800385e:	4619      	mov	r1, r3
 8003860:	4852      	ldr	r0, [pc, #328]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003862:	f001 fdd1 	bl	8005408 <HAL_ADC_ConfigChannel>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800386c:	f000 fc3c 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003870:	2301      	movs	r3, #1
 8003872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003874:	2302      	movs	r3, #2
 8003876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003878:	463b      	mov	r3, r7
 800387a:	4619      	mov	r1, r3
 800387c:	484b      	ldr	r0, [pc, #300]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800387e:	f001 fdc3 	bl	8005408 <HAL_ADC_ConfigChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003888:	f000 fc2e 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800388c:	2302      	movs	r3, #2
 800388e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003890:	2303      	movs	r3, #3
 8003892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003894:	463b      	mov	r3, r7
 8003896:	4619      	mov	r1, r3
 8003898:	4844      	ldr	r0, [pc, #272]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800389a:	f001 fdb5 	bl	8005408 <HAL_ADC_ConfigChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80038a4:	f000 fc20 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80038a8:	2303      	movs	r3, #3
 80038aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80038ac:	2304      	movs	r3, #4
 80038ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038b0:	463b      	mov	r3, r7
 80038b2:	4619      	mov	r1, r3
 80038b4:	483d      	ldr	r0, [pc, #244]	; (80039ac <MX_ADC2_Init+0x1cc>)
 80038b6:	f001 fda7 	bl	8005408 <HAL_ADC_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80038c0:	f000 fc12 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80038c4:	2304      	movs	r3, #4
 80038c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80038c8:	2305      	movs	r3, #5
 80038ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038cc:	463b      	mov	r3, r7
 80038ce:	4619      	mov	r1, r3
 80038d0:	4836      	ldr	r0, [pc, #216]	; (80039ac <MX_ADC2_Init+0x1cc>)
 80038d2:	f001 fd99 	bl	8005408 <HAL_ADC_ConfigChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80038dc:	f000 fc04 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80038e0:	2305      	movs	r3, #5
 80038e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80038e4:	2306      	movs	r3, #6
 80038e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038e8:	463b      	mov	r3, r7
 80038ea:	4619      	mov	r1, r3
 80038ec:	482f      	ldr	r0, [pc, #188]	; (80039ac <MX_ADC2_Init+0x1cc>)
 80038ee:	f001 fd8b 	bl	8005408 <HAL_ADC_ConfigChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80038f8:	f000 fbf6 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80038fc:	2306      	movs	r3, #6
 80038fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003900:	2307      	movs	r3, #7
 8003902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003904:	463b      	mov	r3, r7
 8003906:	4619      	mov	r1, r3
 8003908:	4828      	ldr	r0, [pc, #160]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800390a:	f001 fd7d 	bl	8005408 <HAL_ADC_ConfigChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003914:	f000 fbe8 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003918:	2307      	movs	r3, #7
 800391a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800391c:	2308      	movs	r3, #8
 800391e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003920:	463b      	mov	r3, r7
 8003922:	4619      	mov	r1, r3
 8003924:	4821      	ldr	r0, [pc, #132]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003926:	f001 fd6f 	bl	8005408 <HAL_ADC_ConfigChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003930:	f000 fbda 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003934:	2308      	movs	r3, #8
 8003936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003938:	2309      	movs	r3, #9
 800393a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800393c:	463b      	mov	r3, r7
 800393e:	4619      	mov	r1, r3
 8003940:	481a      	ldr	r0, [pc, #104]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003942:	f001 fd61 	bl	8005408 <HAL_ADC_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 800394c:	f000 fbcc 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003950:	2309      	movs	r3, #9
 8003952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003954:	230a      	movs	r3, #10
 8003956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003958:	463b      	mov	r3, r7
 800395a:	4619      	mov	r1, r3
 800395c:	4813      	ldr	r0, [pc, #76]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800395e:	f001 fd53 	bl	8005408 <HAL_ADC_ConfigChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003968:	f000 fbbe 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800396c:	230e      	movs	r3, #14
 800396e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003970:	230b      	movs	r3, #11
 8003972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003974:	463b      	mov	r3, r7
 8003976:	4619      	mov	r1, r3
 8003978:	480c      	ldr	r0, [pc, #48]	; (80039ac <MX_ADC2_Init+0x1cc>)
 800397a:	f001 fd45 	bl	8005408 <HAL_ADC_ConfigChannel>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003984:	f000 fbb0 	bl	80040e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003988:	230f      	movs	r3, #15
 800398a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800398c:	230c      	movs	r3, #12
 800398e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003990:	463b      	mov	r3, r7
 8003992:	4619      	mov	r1, r3
 8003994:	4805      	ldr	r0, [pc, #20]	; (80039ac <MX_ADC2_Init+0x1cc>)
 8003996:	f001 fd37 	bl	8005408 <HAL_ADC_ConfigChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80039a0:	f000 fba2 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000c0c8 	.word	0x2000c0c8
 80039b0:	40012100 	.word	0x40012100
 80039b4:	0f000001 	.word	0x0f000001

080039b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039be:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <MX_I2C1_Init+0x54>)
 80039c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039c4:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <MX_I2C1_Init+0x58>)
 80039c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039de:	2200      	movs	r2, #0
 80039e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039f4:	4804      	ldr	r0, [pc, #16]	; (8003a08 <MX_I2C1_Init+0x50>)
 80039f6:	f002 ffdd 	bl	80069b4 <HAL_I2C_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a00:	f000 fb72 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	2000c200 	.word	0x2000c200
 8003a0c:	40005400 	.word	0x40005400
 8003a10:	000186a0 	.word	0x000186a0

08003a14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a48:	2228      	movs	r2, #40	; 0x28
 8003a4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a60:	220a      	movs	r2, #10
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a66:	f003 fd19 	bl	800749c <HAL_SPI_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a70:	f000 fb3a 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	2000c258 	.word	0x2000c258
 8003a7c:	40003c00 	.word	0x40003c00

08003a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b092      	sub	sp, #72	; 0x48
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
 8003aa0:	615a      	str	r2, [r3, #20]
 8003aa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f005 fdfb 	bl	80096a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003ab2:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <MX_TIM1_Init+0x100>)
 8003ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ab6:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abc:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8003ac2:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003ac4:	f240 3247 	movw	r2, #839	; 0x347
 8003ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003adc:	4827      	ldr	r0, [pc, #156]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003ade:	f004 fa80 	bl	8007fe2 <HAL_TIM_PWM_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003ae8:	f000 fafe 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003af4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003af8:	4619      	mov	r1, r3
 8003afa:	4820      	ldr	r0, [pc, #128]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003afc:	f005 f810 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003b06:	f000 faef 	bl	80040e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b0a:	2360      	movs	r3, #96	; 0x60
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b26:	220c      	movs	r2, #12
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4814      	ldr	r0, [pc, #80]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003b2c:	f004 fc94 	bl	8008458 <HAL_TIM_PWM_ConfigChannel>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8003b36:	f000 fad7 	bl	80040e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4807      	ldr	r0, [pc, #28]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003b5e:	f005 f85b 	bl	8008c18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8003b68:	f000 fabe 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b6c:	4803      	ldr	r0, [pc, #12]	; (8003b7c <MX_TIM1_Init+0xfc>)
 8003b6e:	f001 f857 	bl	8004c20 <HAL_TIM_MspPostInit>

}
 8003b72:	bf00      	nop
 8003b74:	3748      	adds	r7, #72	; 0x48
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000c390 	.word	0x2000c390
 8003b80:	40010000 	.word	0x40010000

08003b84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b8a:	f107 030c 	add.w	r3, r7, #12
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fd87 	bl	80096a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ba0:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003ba2:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <MX_TIM3_Init+0xa4>)
 8003ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bac:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bba:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bde:	2301      	movs	r3, #1
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003bea:	f107 030c 	add.w	r3, r7, #12
 8003bee:	4619      	mov	r1, r3
 8003bf0:	480c      	ldr	r0, [pc, #48]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003bf2:	f004 fa5f 	bl	80080b4 <HAL_TIM_Encoder_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003bfc:	f000 fa74 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c00:	2300      	movs	r3, #0
 8003c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c08:	1d3b      	adds	r3, r7, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4805      	ldr	r0, [pc, #20]	; (8003c24 <MX_TIM3_Init+0xa0>)
 8003c0e:	f004 ff87 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003c18:	f000 fa66 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c1c:	bf00      	nop
 8003c1e:	3730      	adds	r7, #48	; 0x30
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	2000c074 	.word	0x2000c074
 8003c28:	40000400 	.word	0x40000400

08003c2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	; 0x30
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 fd33 	bl	80096a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c4a:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <MX_TIM4_Init+0xa4>)
 8003c4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c76:	2301      	movs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c86:	2301      	movs	r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c92:	f107 030c 	add.w	r3, r7, #12
 8003c96:	4619      	mov	r1, r3
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003c9a:	f004 fa0b 	bl	80080b4 <HAL_TIM_Encoder_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003ca4:	f000 fa20 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_TIM4_Init+0xa0>)
 8003cb6:	f004 ff33 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003cc0:	f000 fa12 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	3730      	adds	r7, #48	; 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	2000c034 	.word	0x2000c034
 8003cd0:	40000800 	.word	0x40000800

08003cd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cda:	463b      	mov	r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <MX_TIM6_Init+0x68>)
 8003ce6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003cea:	2253      	movs	r2, #83	; 0x53
 8003cec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d02:	480d      	ldr	r0, [pc, #52]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003d04:	f004 f91e 	bl	8007f44 <HAL_TIM_Base_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003d0e:	f000 f9eb 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4806      	ldr	r0, [pc, #24]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003d20:	f004 fefe 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003d2a:	f000 f9dd 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000c350 	.word	0x2000c350
 8003d3c:	40001000 	.word	0x40001000

08003d40 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d46:	463b      	mov	r3, r7
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <MX_TIM7_Init+0x64>)
 8003d52:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d56:	2253      	movs	r2, #83	; 0x53
 8003d58:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d62:	2263      	movs	r2, #99	; 0x63
 8003d64:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003d6c:	480c      	ldr	r0, [pc, #48]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d6e:	f004 f8e9 	bl	8007f44 <HAL_TIM_Base_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003d78:	f000 f9b6 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003d84:	463b      	mov	r3, r7
 8003d86:	4619      	mov	r1, r3
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <MX_TIM7_Init+0x60>)
 8003d8a:	f004 fec9 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8003d94:	f000 f9a8 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003d98:	bf00      	nop
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	2000c438 	.word	0x2000c438
 8003da4:	40001400 	.word	0x40001400

08003da8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b092      	sub	sp, #72	; 0x48
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	611a      	str	r2, [r3, #16]
 8003dc8:	615a      	str	r2, [r3, #20]
 8003dca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	2220      	movs	r2, #32
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 fc67 	bl	80096a6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003dda:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <MX_TIM8_Init+0x11c>)
 8003ddc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8003dde:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003de0:	2203      	movs	r2, #3
 8003de2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8003dea:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003dec:	f240 628f 	movw	r2, #1679	; 0x68f
 8003df0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df2:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dfe:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e04:	482e      	ldr	r0, [pc, #184]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003e06:	f004 f8ec 	bl	8007fe2 <HAL_TIM_PWM_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003e10:	f000 f96a 	bl	80040e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e14:	2300      	movs	r3, #0
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e20:	4619      	mov	r1, r3
 8003e22:	4827      	ldr	r0, [pc, #156]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003e24:	f004 fe7c 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003e2e:	f000 f95b 	bl	80040e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e32:	2360      	movs	r3, #96	; 0x60
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e52:	2200      	movs	r2, #0
 8003e54:	4619      	mov	r1, r3
 8003e56:	481a      	ldr	r0, [pc, #104]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003e58:	f004 fafe 	bl	8008458 <HAL_TIM_PWM_ConfigChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003e62:	f000 f941 	bl	80040e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003e70:	f004 faf2 	bl	8008458 <HAL_TIM_PWM_ConfigChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003e7a:	f000 f935 	bl	80040e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4807      	ldr	r0, [pc, #28]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003ea2:	f004 feb9 	bl	8008c18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003eac:	f000 f91c 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003eb0:	4803      	ldr	r0, [pc, #12]	; (8003ec0 <MX_TIM8_Init+0x118>)
 8003eb2:	f000 feb5 	bl	8004c20 <HAL_TIM_MspPostInit>

}
 8003eb6:	bf00      	nop
 8003eb8:	3748      	adds	r7, #72	; 0x48
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000c1b8 	.word	0x2000c1b8
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <MX_USART1_UART_Init+0x50>)
 8003ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003ed4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003eee:	220c      	movs	r2, #12
 8003ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003efe:	4805      	ldr	r0, [pc, #20]	; (8003f14 <MX_USART1_UART_Init+0x4c>)
 8003f00:	f004 fef0 	bl	8008ce4 <HAL_UART_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f0a:	f000 f8ed 	bl	80040e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000c2b0 	.word	0x2000c2b0
 8003f18:	40011000 	.word	0x40011000

08003f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <MX_DMA_Init+0x4c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	4a0f      	ldr	r2, [pc, #60]	; (8003f68 <MX_DMA_Init+0x4c>)
 8003f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f30:	6313      	str	r3, [r2, #48]	; 0x30
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <MX_DMA_Init+0x4c>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	2038      	movs	r0, #56	; 0x38
 8003f44:	f001 fddb 	bl	8005afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003f48:	2038      	movs	r0, #56	; 0x38
 8003f4a:	f001 fdf4 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	203a      	movs	r0, #58	; 0x3a
 8003f54:	f001 fdd3 	bl	8005afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003f58:	203a      	movs	r0, #58	; 0x3a
 8003f5a:	f001 fdec 	bl	8005b36 <HAL_NVIC_EnableIRQ>

}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800

08003f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b50      	ldr	r3, [pc, #320]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a4b      	ldr	r2, [pc, #300]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b45      	ldr	r3, [pc, #276]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a44      	ldr	r2, [pc, #272]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a3d      	ldr	r2, [pc, #244]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a36      	ldr	r2, [pc, #216]	; (80040d4 <MX_GPIO_Init+0x168>)
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <MX_GPIO_Init+0x168>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 800400e:	2200      	movs	r2, #0
 8004010:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004014:	4830      	ldr	r0, [pc, #192]	; (80040d8 <MX_GPIO_Init+0x16c>)
 8004016:	f002 fcb3 	bl	8006980 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800401a:	2200      	movs	r2, #0
 800401c:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004020:	482e      	ldr	r0, [pc, #184]	; (80040dc <MX_GPIO_Init+0x170>)
 8004022:	f002 fcad 	bl	8006980 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8004026:	2200      	movs	r2, #0
 8004028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800402c:	482c      	ldr	r0, [pc, #176]	; (80040e0 <MX_GPIO_Init+0x174>)
 800402e:	f002 fca7 	bl	8006980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004032:	2200      	movs	r2, #0
 8004034:	2104      	movs	r1, #4
 8004036:	482b      	ldr	r0, [pc, #172]	; (80040e4 <MX_GPIO_Init+0x178>)
 8004038:	f002 fca2 	bl	8006980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 800403c:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004040:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2300      	movs	r3, #0
 800404c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	4619      	mov	r1, r3
 8004054:	4820      	ldr	r0, [pc, #128]	; (80040d8 <MX_GPIO_Init+0x16c>)
 8004056:	f002 fae1 	bl	800661c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800405a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800405e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004060:	2301      	movs	r3, #1
 8004062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	4619      	mov	r1, r3
 8004072:	481a      	ldr	r0, [pc, #104]	; (80040dc <MX_GPIO_Init+0x170>)
 8004074:	f002 fad2 	bl	800661c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004078:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800407c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	4814      	ldr	r0, [pc, #80]	; (80040e0 <MX_GPIO_Init+0x174>)
 800408e:	f002 fac5 	bl	800661c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004098:	2301      	movs	r3, #1
 800409a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	2300      	movs	r3, #0
 80040a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	4619      	mov	r1, r3
 80040aa:	480d      	ldr	r0, [pc, #52]	; (80040e0 <MX_GPIO_Init+0x174>)
 80040ac:	f002 fab6 	bl	800661c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040b0:	2304      	movs	r3, #4
 80040b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b4:	2301      	movs	r3, #1
 80040b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	4619      	mov	r1, r3
 80040c6:	4807      	ldr	r0, [pc, #28]	; (80040e4 <MX_GPIO_Init+0x178>)
 80040c8:	f002 faa8 	bl	800661c <HAL_GPIO_Init>

}
 80040cc:	bf00      	nop
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020400 	.word	0x40020400
 80040e0:	40020000 	.word	0x40020000
 80040e4:	40020c00 	.word	0x40020c00

080040e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040ee:	e7fe      	b.n	80040ee <Error_Handler+0x6>

080040f0 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 80040f4:	2100      	movs	r1, #0
 80040f6:	4808      	ldr	r0, [pc, #32]	; (8004118 <initMotor+0x28>)
 80040f8:	f003 ff9e 	bl	8008038 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 80040fc:	2108      	movs	r1, #8
 80040fe:	4806      	ldr	r0, [pc, #24]	; (8004118 <initMotor+0x28>)
 8004100:	f003 ff9a 	bl	8008038 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004104:	210c      	movs	r1, #12
 8004106:	4805      	ldr	r0, [pc, #20]	; (800411c <initMotor+0x2c>)
 8004108:	f003 ff96 	bl	8008038 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 800410c:	2064      	movs	r0, #100	; 0x64
 800410e:	f001 f805 	bl	800511c <HAL_Delay>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000c1b8 	.word	0x2000c1b8
 800411c:	2000c390 	.word	0x2000c390

08004120 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <motorCtrlFlip+0xb0>)
 8004128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800412c:	2b00      	cmp	r3, #0
 800412e:	db0d      	blt.n	800414c <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <motorCtrlFlip+0xb0>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <motorCtrlFlip+0xb4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800413e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004140:	2201      	movs	r2, #1
 8004142:	2180      	movs	r1, #128	; 0x80
 8004144:	4824      	ldr	r0, [pc, #144]	; (80041d8 <motorCtrlFlip+0xb8>)
 8004146:	f002 fc1b 	bl	8006980 <HAL_GPIO_WritePin>
 800414a:	e010      	b.n	800416e <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <motorCtrlFlip+0xb0>)
 800414e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004152:	b29b      	uxth	r3, r3
 8004154:	425b      	negs	r3, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <motorCtrlFlip+0xb4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004162:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004164:	2200      	movs	r2, #0
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	481b      	ldr	r0, [pc, #108]	; (80041d8 <motorCtrlFlip+0xb8>)
 800416a:	f002 fc09 	bl	8006980 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <motorCtrlFlip+0xbc>)
 8004170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0e      	blt.n	8004196 <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8004178:	4b18      	ldr	r3, [pc, #96]	; (80041dc <motorCtrlFlip+0xbc>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <motorCtrlFlip+0xb4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004188:	2201      	movs	r2, #1
 800418a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800418e:	4812      	ldr	r0, [pc, #72]	; (80041d8 <motorCtrlFlip+0xb8>)
 8004190:	f002 fbf6 	bl	8006980 <HAL_GPIO_WritePin>
 8004194:	e011      	b.n	80041ba <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <motorCtrlFlip+0xbc>)
 8004198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419c:	b29b      	uxth	r3, r3
 800419e:	425b      	negs	r3, r3
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <motorCtrlFlip+0xb4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80041ae:	2200      	movs	r2, #0
 80041b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041b4:	4808      	ldr	r0, [pc, #32]	; (80041d8 <motorCtrlFlip+0xb8>)
 80041b6:	f002 fbe3 	bl	8006980 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <motorCtrlFlip+0xc0>)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80041c0:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <motorCtrlFlip+0xc4>)
 80041c2:	88bb      	ldrh	r3, [r7, #4]
 80041c4:	8013      	strh	r3, [r2, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000bf5c 	.word	0x2000bf5c
 80041d4:	2000c1b8 	.word	0x2000c1b8
 80041d8:	40020800 	.word	0x40020800
 80041dc:	2000bf5e 	.word	0x2000bf5e
 80041e0:	2000c47c 	.word	0x2000c47c
 80041e4:	2000c47a 	.word	0x2000c47a

080041e8 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <suctionmotorCtrlFlip+0x1c>)
 80041ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <suctionmotorCtrlFlip+0x20>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000bf60 	.word	0x2000bf60
 8004208:	2000c390 	.word	0x2000c390

0800420c <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	460a      	mov	r2, r1
 8004216:	80fb      	strh	r3, [r7, #6]
 8004218:	4613      	mov	r3, r2
 800421a:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 800421c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004220:	f240 628e 	movw	r2, #1678	; 0x68e
 8004224:	4293      	cmp	r3, r2
 8004226:	dd03      	ble.n	8004230 <setMotor+0x24>
 8004228:	f240 638f 	movw	r3, #1679	; 0x68f
 800422c:	80fb      	strh	r3, [r7, #6]
 800422e:	e007      	b.n	8004240 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8004230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004234:	4a11      	ldr	r2, [pc, #68]	; (800427c <setMotor+0x70>)
 8004236:	4293      	cmp	r3, r2
 8004238:	da02      	bge.n	8004240 <setMotor+0x34>
 800423a:	f64f 1371 	movw	r3, #63857	; 0xf971
 800423e:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8004240:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004244:	f240 628e 	movw	r2, #1678	; 0x68e
 8004248:	4293      	cmp	r3, r2
 800424a:	dd03      	ble.n	8004254 <setMotor+0x48>
 800424c:	f240 638f 	movw	r3, #1679	; 0x68f
 8004250:	80bb      	strh	r3, [r7, #4]
 8004252:	e007      	b.n	8004264 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8004254:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <setMotor+0x70>)
 800425a:	4293      	cmp	r3, r2
 800425c:	da02      	bge.n	8004264 <setMotor+0x58>
 800425e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004262:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8004264:	4a06      	ldr	r2, [pc, #24]	; (8004280 <setMotor+0x74>)
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 800426a:	4a06      	ldr	r2, [pc, #24]	; (8004284 <setMotor+0x78>)
 800426c:	88bb      	ldrh	r3, [r7, #4]
 800426e:	8013      	strh	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	fffff972 	.word	0xfffff972
 8004280:	2000bf5c 	.word	0x2000bf5c
 8004284:	2000bf5e 	.word	0x2000bf5e

08004288 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8004292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	bfb8      	it	lt
 800429a:	425b      	neglt	r3, r3
 800429c:	b21a      	sxth	r2, r3
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <setsuctionMotor+0x38>)
 80042a0:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 80042a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a6:	f240 3246 	movw	r2, #838	; 0x346
 80042aa:	4293      	cmp	r3, r2
 80042ac:	dd02      	ble.n	80042b4 <setsuctionMotor+0x2c>
 80042ae:	f240 3347 	movw	r3, #839	; 0x347
 80042b2:	80fb      	strh	r3, [r7, #6]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	2000bf60 	.word	0x2000bf60

080042c4 <updateSideSensorStatus>:

uint16_t tsutsui = 0;

//white <= 1700 black >= 1700

void updateSideSensorStatus(){
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
	goal_timer++;
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <updateSideSensorStatus+0x64>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	4b15      	ldr	r3, [pc, #84]	; (8004328 <updateSideSensorStatus+0x64>)
 80042d2:	801a      	strh	r2, [r3, #0]

	if(goal_timer >= 10000){
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <updateSideSensorStatus+0x64>)
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80042dc:	4293      	cmp	r3, r2
 80042de:	d903      	bls.n	80042e8 <updateSideSensorStatus+0x24>
		goal_timer = 10000;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <updateSideSensorStatus+0x64>)
 80042e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80042e6:	801a      	strh	r2, [r3, #0]
	}

	if(side_sensorL <= 500){
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <updateSideSensorStatus+0x68>)
 80042ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042f2:	dc03      	bgt.n	80042fc <updateSideSensorStatus+0x38>
		side_sensor_l = true;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <updateSideSensorStatus+0x6c>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e002      	b.n	8004302 <updateSideSensorStatus+0x3e>
	}
	else{
		side_sensor_l = false;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <updateSideSensorStatus+0x6c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <updateSideSensorStatus+0x70>)
 8004304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004308:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800430c:	dc03      	bgt.n	8004316 <updateSideSensorStatus+0x52>
		side_sensor_r = true;
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <updateSideSensorStatus+0x74>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8004314:	e002      	b.n	800431c <updateSideSensorStatus+0x58>
		side_sensor_r = false;
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <updateSideSensorStatus+0x74>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	2000bf62 	.word	0x2000bf62
 800432c:	2000bffc 	.word	0x2000bffc
 8004330:	2000bf64 	.word	0x2000bf64
 8004334:	2000bf84 	.word	0x2000bf84
 8004338:	2000bf65 	.word	0x2000bf65

0800433c <setRunMode>:

void setRunMode(uint16_t num){
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	80fb      	strh	r3, [r7, #6]
	mode = num;
 8004346:	4a04      	ldr	r2, [pc, #16]	; (8004358 <setRunMode+0x1c>)
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	8013      	strh	r3, [r2, #0]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	2000c47e 	.word	0x2000c47e

0800435c <isTargetDistance>:

bool isTargetDistance(float target){
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 800436a:	f7fc fff5 	bl	8001358 <getDistance10mm>
 800436e:	eeb0 7a40 	vmov.f32	s14, s0
 8004372:	edd7 7a01 	vldr	s15, [r7, #4]
 8004376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437e:	d801      	bhi.n	8004384 <isTargetDistance+0x28>
		ret = true;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <running>:

void running(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	80fb      	strh	r3, [r7, #6]
	runningInit();
 800439a:	f000 f901 	bl	80045a0 <runningInit>
	startLineTrace();
 800439e:	f7fd fd09 	bl	8001db4 <startLineTrace>
	startVelocityControl();
 80043a2:	f7fe fea7 	bl	80030f4 <startVelocityControl>
	//setTargetVelocity(min_velocity);

	while(goal_flag == false){
 80043a6:	e0ba      	b.n	800451e <running+0x18e>
		switch(pattern){
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b14      	cmp	r3, #20
 80043ac:	f200 80ae 	bhi.w	800450c <running+0x17c>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <running+0x28>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	0800450d 	.word	0x0800450d
 80043c0:	0800450d 	.word	0x0800450d
 80043c4:	0800450d 	.word	0x0800450d
 80043c8:	0800450d 	.word	0x0800450d
 80043cc:	08004439 	.word	0x08004439
 80043d0:	0800450d 	.word	0x0800450d
 80043d4:	0800450d 	.word	0x0800450d
 80043d8:	0800450d 	.word	0x0800450d
 80043dc:	0800450d 	.word	0x0800450d
 80043e0:	0800444d 	.word	0x0800444d
 80043e4:	0800450d 	.word	0x0800450d
 80043e8:	0800450d 	.word	0x0800450d
 80043ec:	0800450d 	.word	0x0800450d
 80043f0:	0800450d 	.word	0x0800450d
 80043f4:	0800450d 	.word	0x0800450d
 80043f8:	0800450d 	.word	0x0800450d
 80043fc:	0800450d 	.word	0x0800450d
 8004400:	0800450d 	.word	0x0800450d
 8004404:	0800450d 	.word	0x0800450d
 8004408:	080044e1 	.word	0x080044e1

				  case 0:
					  if(getSideSensorStatusR() == true){
 800440c:	f000 f934 	bl	8004678 <getSideSensorStatusR>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d077      	beq.n	8004506 <running+0x176>
						  start_goal_line_cnt++;
 8004416:	4b48      	ldr	r3, [pc, #288]	; (8004538 <running+0x1a8>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <running+0x1a8>)
 8004420:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 8004422:	4b46      	ldr	r3, [pc, #280]	; (800453c <running+0x1ac>)
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <running+0x9e>
 800442a:	f000 f8f1 	bl	8004610 <startLogging>

						  clearGoalJudgeDistance();
 800442e:	f7fc ff71 	bl	8001314 <clearGoalJudgeDistance>
						  pattern = 5;
 8004432:	2305      	movs	r3, #5
 8004434:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8004436:	e066      	b.n	8004506 <running+0x176>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8004438:	f000 f91e 	bl	8004678 <getSideSensorStatusR>
 800443c:	4603      	mov	r3, r0
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <running+0xbc>
 8004448:	230a      	movs	r3, #10
 800444a:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 800444c:	f000 f908 	bl	8004660 <getSideSensorStatusL>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <running+0xd0>
						  goal_judge_flag = false;
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <running+0x1b0>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800445c:	f7fc ff5a 	bl	8001314 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <running+0x1b0>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f083 0301 	eor.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <running+0x10a>
 800446e:	f000 f903 	bl	8004678 <getSideSensorStatusR>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d010      	beq.n	800449a <running+0x10a>
 8004478:	f7fc ff30 	bl	80012dc <getGoalJudgeDistance>
 800447c:	eeb0 7a40 	vmov.f32	s14, s0
 8004480:	eddf 7a30 	vldr	s15, [pc, #192]	; 8004544 <running+0x1b4>
 8004484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	db05      	blt.n	800449a <running+0x10a>
						  goal_judge_flag = true;
 800448e:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <running+0x1b0>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004494:	f7fc ff3e 	bl	8001314 <clearGoalJudgeDistance>
 8004498:	e019      	b.n	80044ce <running+0x13e>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <running+0x1b0>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d015      	beq.n	80044ce <running+0x13e>
 80044a2:	f7fc ff1b 	bl	80012dc <getGoalJudgeDistance>
 80044a6:	eeb0 7a40 	vmov.f32	s14, s0
 80044aa:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004544 <running+0x1b4>
 80044ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	db0a      	blt.n	80044ce <running+0x13e>
						  start_goal_line_cnt++;
 80044b8:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <running+0x1a8>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <running+0x1a8>)
 80044c2:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <running+0x1b0>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 80044ca:	f7fc ff23 	bl	8001314 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 80044ce:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <running+0x1a8>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d919      	bls.n	800450a <running+0x17a>
						  stopLogging();
 80044d6:	f000 f8ab 	bl	8004630 <stopLogging>
						  pattern = 20;
 80044da:	2314      	movs	r3, #20
 80044dc:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 80044de:	e014      	b.n	800450a <running+0x17a>

				  case 20:

					  setTargetVelocity(-0.01);
 80044e0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8004548 <running+0x1b8>
 80044e4:	f7fe fd84 	bl	8002ff0 <setTargetVelocity>
					  HAL_Delay(30);
 80044e8:	201e      	movs	r0, #30
 80044ea:	f000 fe17 	bl	800511c <HAL_Delay>
					  setTargetVelocity(0);
 80044ee:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800454c <running+0x1bc>
 80044f2:	f7fe fd7d 	bl	8002ff0 <setTargetVelocity>
					  HAL_Delay(500);
 80044f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044fa:	f000 fe0f 	bl	800511c <HAL_Delay>

					  goal_flag = true;
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <running+0x1c0>)
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]

					  break;
 8004504:	e002      	b.n	800450c <running+0x17c>
					  break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <running+0x17c>
					  break;
 800450a:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 800450c:	f7fd fcd8 	bl	8001ec0 <getCouseOutFlag>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <running+0x18e>
		{
			stopLogging();
 8004516:	f000 f88b 	bl	8004630 <stopLogging>
		    pattern = 20;
 800451a:	2314      	movs	r3, #20
 800451c:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <running+0x1c0>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f af3d 	bne.w	80043a8 <running+0x18>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	2000bf69 	.word	0x2000bf69
 800453c:	2000c47e 	.word	0x2000c47e
 8004540:	2000bf67 	.word	0x2000bf67
 8004544:	428c0000 	.word	0x428c0000
 8004548:	bc23d70a 	.word	0xbc23d70a
 800454c:	00000000 	.word	0x00000000
 8004550:	2000bf66 	.word	0x2000bf66

08004554 <runningFlip>:

void runningFlip()
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <runningFlip+0x44>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d018      	beq.n	8004592 <runningFlip+0x3e>
		setLED('G');
 8004560:	2047      	movs	r0, #71	; 0x47
 8004562:	f7fd f8ad 	bl	80016c0 <setLED>
		if(isTargetDistance(10) == true){
 8004566:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800456a:	f7ff fef7 	bl	800435c <isTargetDistance>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <runningFlip+0x3e>
			tsutsui++;
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <runningFlip+0x48>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <runningFlip+0x48>)
 800457e:	801a      	strh	r2, [r3, #0]
			setLED2('B');
 8004580:	2042      	movs	r0, #66	; 0x42
 8004582:	f7fd f96b 	bl	800185c <setLED2>
			saveLog();
 8004586:	f000 f829 	bl	80045dc <saveLog>

			clearDistance10mm();
 800458a:	f7fc fef3 	bl	8001374 <clearDistance10mm>
			clearTheta10mm();
 800458e:	f7fd f889 	bl	80016a4 <clearTheta10mm>
		}
	}
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000bf68 	.word	0x2000bf68
 800459c:	2000bf6c 	.word	0x2000bf6c

080045a0 <runningInit>:

void runningInit()
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	if(mode == 1){
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <runningInit+0x2c>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d104      	bne.n	80045b6 <runningInit+0x16>
		setLED('W');
 80045ac:	2057      	movs	r0, #87	; 0x57
 80045ae:	f7fd f887 	bl	80016c0 <setLED>
		ereaseLog();
 80045b2:	f7fe fb03 	bl	8002bbc <ereaseLog>
	}
	start_goal_line_cnt = 0;
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <runningInit+0x30>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <runningInit+0x34>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <runningInit+0x38>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000c47e 	.word	0x2000c47e
 80045d0:	2000bf69 	.word	0x2000bf69
 80045d4:	2000bf67 	.word	0x2000bf67
 80045d8:	2000bf68 	.word	0x2000bf68

080045dc <saveLog>:

void saveLog(){
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <saveLog+0x30>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00f      	beq.n	8004608 <saveLog+0x2c>
		saveDistance(getDistance10mm());
 80045e8:	f7fc feb6 	bl	8001358 <getDistance10mm>
 80045ec:	eef0 7a40 	vmov.f32	s15, s0
 80045f0:	eeb0 0a67 	vmov.f32	s0, s15
 80045f4:	f7fe fab2 	bl	8002b5c <saveDistance>
		saveTheta(getTheta10mm());
 80045f8:	f7fd f846 	bl	8001688 <getTheta10mm>
 80045fc:	eef0 7a40 	vmov.f32	s15, s0
 8004600:	eeb0 0a67 	vmov.f32	s0, s15
 8004604:	f7fe fac2 	bl	8002b8c <saveTheta>
	}
}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}
 800460c:	2000bf6a 	.word	0x2000bf6a

08004610 <startLogging>:

void startLogging(){
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8004614:	f7fc feae 	bl	8001374 <clearDistance10mm>
	clearTheta10mm();
 8004618:	f7fd f844 	bl	80016a4 <clearTheta10mm>
	clearTotalDistance();
 800461c:	f7fc fe6c 	bl	80012f8 <clearTotalDistance>
	logging_flag = true;
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <startLogging+0x1c>)
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000bf6a 	.word	0x2000bf6a

08004630 <stopLogging>:

void stopLogging()
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
	logging_flag = false;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <stopLogging+0x14>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	2000bf6a 	.word	0x2000bf6a

08004648 <getgoalStatus>:

bool getgoalStatus()
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
	return goal_flag;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <getgoalStatus+0x14>)
 800464e:	781b      	ldrb	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	2000bf66 	.word	0x2000bf66

08004660 <getSideSensorStatusL>:
	max_velocity = max_vel;
}

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <getSideSensorStatusL+0x14>)
 8004666:	781b      	ldrb	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000bf64 	.word	0x2000bf64

08004678 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	return side_sensor_r;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <getSideSensorStatusR+0x14>)
 800467e:	781b      	ldrb	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	2000bf65 	.word	0x2000bf65

08004690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <HAL_MspInit+0x4c>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <HAL_MspInit+0x4c>)
 80046a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a4:	6453      	str	r3, [r2, #68]	; 0x44
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <HAL_MspInit+0x4c>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_MspInit+0x4c>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_MspInit+0x4c>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_MspInit+0x4c>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a79      	ldr	r2, [pc, #484]	; (80048e4 <HAL_ADC_MspInit+0x204>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d158      	bne.n	80047b4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	4b78      	ldr	r3, [pc, #480]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	4a77      	ldr	r2, [pc, #476]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6453      	str	r3, [r2, #68]	; 0x44
 8004712:	4b75      	ldr	r3, [pc, #468]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a70      	ldr	r2, [pc, #448]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b6e      	ldr	r3, [pc, #440]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800473a:	230e      	movs	r3, #14
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800473e:	2303      	movs	r3, #3
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800474a:	4619      	mov	r1, r3
 800474c:	4867      	ldr	r0, [pc, #412]	; (80048ec <HAL_ADC_MspInit+0x20c>)
 800474e:	f001 ff65 	bl	800661c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004752:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004754:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <HAL_ADC_MspInit+0x214>)
 8004756:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004758:	4b65      	ldr	r3, [pc, #404]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800475e:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004764:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004766:	2200      	movs	r2, #0
 8004768:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800476a:	4b61      	ldr	r3, [pc, #388]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 800476c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004770:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004772:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004778:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800477a:	4b5d      	ldr	r3, [pc, #372]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 800477c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004780:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004782:	4b5b      	ldr	r3, [pc, #364]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004788:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800478a:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 800478c:	2200      	movs	r2, #0
 800478e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004790:	4b57      	ldr	r3, [pc, #348]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004792:	2200      	movs	r2, #0
 8004794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004796:	4856      	ldr	r0, [pc, #344]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 8004798:	f001 f9e8 	bl	8005b6c <HAL_DMA_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80047a2:	f7ff fca1 	bl	80040e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a51      	ldr	r2, [pc, #324]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
 80047ac:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <HAL_ADC_MspInit+0x210>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047b2:	e092      	b.n	80048da <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a4f      	ldr	r2, [pc, #316]	; (80048f8 <HAL_ADC_MspInit+0x218>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f040 808d 	bne.w	80048da <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	4a47      	ldr	r2, [pc, #284]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ce:	6453      	str	r3, [r2, #68]	; 0x44
 80047d0:	4b45      	ldr	r3, [pc, #276]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6313      	str	r3, [r2, #48]	; 0x30
 80047ec:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	4b3a      	ldr	r3, [pc, #232]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	4a39      	ldr	r2, [pc, #228]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6313      	str	r3, [r2, #48]	; 0x30
 8004808:	4b37      	ldr	r3, [pc, #220]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	4a32      	ldr	r2, [pc, #200]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	6313      	str	r3, [r2, #48]	; 0x30
 8004824:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_ADC_MspInit+0x208>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004830:	23ff      	movs	r3, #255	; 0xff
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004834:	2303      	movs	r3, #3
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004840:	4619      	mov	r1, r3
 8004842:	482e      	ldr	r0, [pc, #184]	; (80048fc <HAL_ADC_MspInit+0x21c>)
 8004844:	f001 feea 	bl	800661c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004848:	2330      	movs	r3, #48	; 0x30
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800484c:	2303      	movs	r3, #3
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004858:	4619      	mov	r1, r3
 800485a:	4824      	ldr	r0, [pc, #144]	; (80048ec <HAL_ADC_MspInit+0x20c>)
 800485c:	f001 fede 	bl	800661c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004860:	2303      	movs	r3, #3
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004864:	2303      	movs	r3, #3
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004870:	4619      	mov	r1, r3
 8004872:	4823      	ldr	r0, [pc, #140]	; (8004900 <HAL_ADC_MspInit+0x220>)
 8004874:	f001 fed2 	bl	800661c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004878:	4b22      	ldr	r3, [pc, #136]	; (8004904 <HAL_ADC_MspInit+0x224>)
 800487a:	4a23      	ldr	r2, [pc, #140]	; (8004908 <HAL_ADC_MspInit+0x228>)
 800487c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_ADC_MspInit+0x224>)
 8004880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004884:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004886:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <HAL_ADC_MspInit+0x224>)
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_ADC_MspInit+0x224>)
 800488e:	2200      	movs	r2, #0
 8004890:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004892:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <HAL_ADC_MspInit+0x224>)
 8004894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004898:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_ADC_MspInit+0x224>)
 800489c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048a8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048b0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80048be:	4811      	ldr	r0, [pc, #68]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048c0:	f001 f954 	bl	8005b6c <HAL_DMA_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80048ca:	f7ff fc0d 	bl	80040e8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
 80048d4:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <HAL_ADC_MspInit+0x224>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80048da:	bf00      	nop
 80048dc:	3738      	adds	r7, #56	; 0x38
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40012000 	.word	0x40012000
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40020800 	.word	0x40020800
 80048f0:	2000c2f0 	.word	0x2000c2f0
 80048f4:	40026410 	.word	0x40026410
 80048f8:	40012100 	.word	0x40012100
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400
 8004904:	2000c3d8 	.word	0x2000c3d8
 8004908:	40026440 	.word	0x40026440

0800490c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_I2C_MspInit+0x84>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d12c      	bne.n	8004988 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <HAL_I2C_MspInit+0x88>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_I2C_MspInit+0x88>)
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <HAL_I2C_MspInit+0x88>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800494a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800494e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004950:	2312      	movs	r3, #18
 8004952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004954:	2301      	movs	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800495c:	2304      	movs	r3, #4
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4619      	mov	r1, r3
 8004966:	480c      	ldr	r0, [pc, #48]	; (8004998 <HAL_I2C_MspInit+0x8c>)
 8004968:	f001 fe58 	bl	800661c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_I2C_MspInit+0x88>)
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	4a07      	ldr	r2, [pc, #28]	; (8004994 <HAL_I2C_MspInit+0x88>)
 8004976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800497a:	6413      	str	r3, [r2, #64]	; 0x40
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_I2C_MspInit+0x88>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40005400 	.word	0x40005400
 8004994:	40023800 	.word	0x40023800
 8004998:	40020400 	.word	0x40020400

0800499c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_SPI_MspInit+0x84>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d12c      	bne.n	8004a18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_SPI_MspInit+0x88>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_SPI_MspInit+0x88>)
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_SPI_MspInit+0x88>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_SPI_MspInit+0x88>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <HAL_SPI_MspInit+0x88>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <HAL_SPI_MspInit+0x88>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80049f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fc:	2302      	movs	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a04:	2303      	movs	r3, #3
 8004a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a08:	2306      	movs	r3, #6
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	4619      	mov	r1, r3
 8004a12:	4805      	ldr	r0, [pc, #20]	; (8004a28 <HAL_SPI_MspInit+0x8c>)
 8004a14:	f001 fe02 	bl	800661c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004a18:	bf00      	nop
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40003c00 	.word	0x40003c00
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40020800 	.word	0x40020800

08004a2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_TIM_PWM_MspInit+0x64>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <HAL_TIM_PWM_MspInit+0x68>)
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <HAL_TIM_PWM_MspInit+0x68>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a4e:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <HAL_TIM_PWM_MspInit+0x68>)
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004a5a:	e012      	b.n	8004a82 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <HAL_TIM_PWM_MspInit+0x6c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <HAL_TIM_PWM_MspInit+0x68>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <HAL_TIM_PWM_MspInit+0x68>)
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	6453      	str	r3, [r2, #68]	; 0x44
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <HAL_TIM_PWM_MspInit+0x68>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40010400 	.word	0x40010400

08004a9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	; 0x30
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa4:	f107 031c 	add.w	r3, r7, #28
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
 8004ab2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a32      	ldr	r2, [pc, #200]	; (8004b84 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d12c      	bne.n	8004b18 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ace:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	4a29      	ldr	r2, [pc, #164]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004af6:	2330      	movs	r3, #48	; 0x30
 8004af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afa:	2302      	movs	r3, #2
 8004afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b06:	2302      	movs	r3, #2
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0a:	f107 031c 	add.w	r3, r7, #28
 8004b0e:	4619      	mov	r1, r3
 8004b10:	481e      	ldr	r0, [pc, #120]	; (8004b8c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004b12:	f001 fd83 	bl	800661c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b16:	e030      	b.n	8004b7a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d12b      	bne.n	8004b7a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b2c:	f043 0304 	orr.w	r3, r3, #4
 8004b30:	6413      	str	r3, [r2, #64]	; 0x40
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_TIM_Encoder_MspInit+0xec>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b5a:	23c0      	movs	r3, #192	; 0xc0
 8004b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6e:	f107 031c 	add.w	r3, r7, #28
 8004b72:	4619      	mov	r1, r3
 8004b74:	4805      	ldr	r0, [pc, #20]	; (8004b8c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004b76:	f001 fd51 	bl	800661c <HAL_GPIO_Init>
}
 8004b7a:	bf00      	nop
 8004b7c:	3730      	adds	r7, #48	; 0x30
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40020400 	.word	0x40020400
 8004b90:	40000800 	.word	0x40000800

08004b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <HAL_TIM_Base_MspInit+0x80>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d116      	bne.n	8004bd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <HAL_TIM_Base_MspInit+0x84>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_TIM_Base_MspInit+0x84>)
 8004bb0:	f043 0310 	orr.w	r3, r3, #16
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <HAL_TIM_Base_MspInit+0x84>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	2036      	movs	r0, #54	; 0x36
 8004bc8:	f000 ff99 	bl	8005afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004bcc:	2036      	movs	r0, #54	; 0x36
 8004bce:	f000 ffb2 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004bd2:	e01a      	b.n	8004c0a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <HAL_TIM_Base_MspInit+0x88>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d115      	bne.n	8004c0a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <HAL_TIM_Base_MspInit+0x84>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <HAL_TIM_Base_MspInit+0x84>)
 8004be8:	f043 0320 	orr.w	r3, r3, #32
 8004bec:	6413      	str	r3, [r2, #64]	; 0x40
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_TIM_Base_MspInit+0x84>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2037      	movs	r0, #55	; 0x37
 8004c00:	f000 ff7d 	bl	8005afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004c04:	2037      	movs	r0, #55	; 0x37
 8004c06:	f000 ff96 	bl	8005b36 <HAL_NVIC_EnableIRQ>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40001000 	.word	0x40001000
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40001400 	.word	0x40001400

08004c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	; (8004cd4 <HAL_TIM_MspPostInit+0xb4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d11f      	bne.n	8004c82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_TIM_MspPostInit+0xb8>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <HAL_TIM_MspPostInit+0xb8>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6313      	str	r3, [r2, #48]	; 0x30
 8004c52:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <HAL_TIM_MspPostInit+0xb8>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c70:	2301      	movs	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4818      	ldr	r0, [pc, #96]	; (8004cdc <HAL_TIM_MspPostInit+0xbc>)
 8004c7c:	f001 fcce 	bl	800661c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004c80:	e023      	b.n	8004cca <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIM_MspPostInit+0xc0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d11e      	bne.n	8004cca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_TIM_MspPostInit+0xb8>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <HAL_TIM_MspPostInit+0xb8>)
 8004c96:	f043 0304 	orr.w	r3, r3, #4
 8004c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <HAL_TIM_MspPostInit+0xb8>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8004ca8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4807      	ldr	r0, [pc, #28]	; (8004ce4 <HAL_TIM_MspPostInit+0xc4>)
 8004cc6:	f001 fca9 	bl	800661c <HAL_GPIO_Init>
}
 8004cca:	bf00      	nop
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40020000 	.word	0x40020000
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40020800 	.word	0x40020800

08004ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_UART_MspInit+0x84>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d12c      	bne.n	8004d64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <HAL_UART_MspInit+0x88>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <HAL_UART_MspInit+0x88>)
 8004d14:	f043 0310 	orr.w	r3, r3, #16
 8004d18:	6453      	str	r3, [r2, #68]	; 0x44
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_UART_MspInit+0x88>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_UART_MspInit+0x88>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <HAL_UART_MspInit+0x88>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <HAL_UART_MspInit+0x88>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d54:	2307      	movs	r3, #7
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4805      	ldr	r0, [pc, #20]	; (8004d74 <HAL_UART_MspInit+0x8c>)
 8004d60:	f001 fc5c 	bl	800661c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004d64:	bf00      	nop
 8004d66:	3728      	adds	r7, #40	; 0x28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40020000 	.word	0x40020000

08004d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d7c:	e7fe      	b.n	8004d7c <NMI_Handler+0x4>

08004d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d82:	e7fe      	b.n	8004d82 <HardFault_Handler+0x4>

08004d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d88:	e7fe      	b.n	8004d88 <MemManage_Handler+0x4>

08004d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d8e:	e7fe      	b.n	8004d8e <BusFault_Handler+0x4>

08004d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d94:	e7fe      	b.n	8004d94 <UsageFault_Handler+0x4>

08004d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db2:	b480      	push	{r7}
 8004db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dc4:	f000 f98a 	bl	80050dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004dd0:	4802      	ldr	r0, [pc, #8]	; (8004ddc <TIM6_DAC_IRQHandler+0x10>)
 8004dd2:	f003 fa38 	bl	8008246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	2000c350 	.word	0x2000c350

08004de0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004de4:	4802      	ldr	r0, [pc, #8]	; (8004df0 <TIM7_IRQHandler+0x10>)
 8004de6:	f003 fa2e 	bl	8008246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	2000c438 	.word	0x2000c438

08004df4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004df8:	4802      	ldr	r0, [pc, #8]	; (8004e04 <DMA2_Stream0_IRQHandler+0x10>)
 8004dfa:	f000 ffbd 	bl	8005d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	2000c2f0 	.word	0x2000c2f0

08004e08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <DMA2_Stream2_IRQHandler+0x10>)
 8004e0e:	f000 ffb3 	bl	8005d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2000c3d8 	.word	0x2000c3d8

08004e1c <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	2b52      	cmp	r3, #82	; 0x52
 8004e2e:	d10a      	bne.n	8004e46 <getSwitchStatus+0x2a>
 8004e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e34:	480d      	ldr	r0, [pc, #52]	; (8004e6c <getSwitchStatus+0x50>)
 8004e36:	f001 fd8b 	bl	8006950 <HAL_GPIO_ReadPin>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <getSwitchStatus+0x2a>
		ret = 1;
 8004e40:	2301      	movs	r3, #1
 8004e42:	81fb      	strh	r3, [r7, #14]
 8004e44:	e00c      	b.n	8004e60 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b4c      	cmp	r3, #76	; 0x4c
 8004e4a:	d109      	bne.n	8004e60 <getSwitchStatus+0x44>
 8004e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e50:	4806      	ldr	r0, [pc, #24]	; (8004e6c <getSwitchStatus+0x50>)
 8004e52:	f001 fd7d 	bl	8006950 <HAL_GPIO_ReadPin>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <getSwitchStatus+0x44>
		ret = 1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8004e60:	89fb      	ldrh	r3, [r7, #14]

}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40020000 	.word	0x40020000

08004e70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e00a      	b.n	8004e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e82:	f3af 8000 	nop.w
 8004e86:	4601      	mov	r1, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	60ba      	str	r2, [r7, #8]
 8004e8e:	b2ca      	uxtb	r2, r1
 8004e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3301      	adds	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	dbf0      	blt.n	8004e82 <_read+0x12>
	}

return len;
 8004ea0:	687b      	ldr	r3, [r7, #4]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e009      	b.n	8004ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	60ba      	str	r2, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe f933 	bl	8003130 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	dbf1      	blt.n	8004ebc <_write+0x12>
	}
	return len;
 8004ed8:	687b      	ldr	r3, [r7, #4]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_close>:

int _close(int file)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <_isatty>:

int _isatty(int file)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
	return 1;
 8004f22:	2301      	movs	r3, #1
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f54:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <_sbrk+0x5c>)
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <_sbrk+0x60>)
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <_sbrk+0x64>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <_sbrk+0x64>)
 8004f6a:	4a12      	ldr	r2, [pc, #72]	; (8004fb4 <_sbrk+0x68>)
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <_sbrk+0x64>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d207      	bcs.n	8004f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f7c:	f004 fb5e 	bl	800963c <__errno>
 8004f80:	4602      	mov	r2, r0
 8004f82:	230c      	movs	r3, #12
 8004f84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8a:	e009      	b.n	8004fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <_sbrk+0x64>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <_sbrk+0x64>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <_sbrk+0x64>)
 8004f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20020000 	.word	0x20020000
 8004fac:	00000400 	.word	0x00000400
 8004fb0:	2000bf70 	.word	0x2000bf70
 8004fb4:	2000c4a8 	.word	0x2000c4a8

08004fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <SystemInit+0x28>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <SystemInit+0x28>)
 8004fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <SystemInit+0x28>)
 8004fce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fd2:	609a      	str	r2, [r3, #8]
#endif
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800501c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fea:	e003      	b.n	8004ff4 <LoopCopyDataInit>

08004fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ff2:	3104      	adds	r1, #4

08004ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ff4:	480b      	ldr	r0, [pc, #44]	; (8005024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ffc:	d3f6      	bcc.n	8004fec <CopyDataInit>
  ldr  r2, =_sbss
 8004ffe:	4a0b      	ldr	r2, [pc, #44]	; (800502c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005000:	e002      	b.n	8005008 <LoopFillZerobss>

08005002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005004:	f842 3b04 	str.w	r3, [r2], #4

08005008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800500a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800500c:	d3f9      	bcc.n	8005002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800500e:	f7ff ffd3 	bl	8004fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005012:	f004 fb19 	bl	8009648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005016:	f7fe f907 	bl	8003228 <main>
  bx  lr    
 800501a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800501c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005020:	0800ded0 	.word	0x0800ded0
  ldr  r0, =_sdata
 8005024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005028:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 800502c:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8005030:	2000c4a8 	.word	0x2000c4a8

08005034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005034:	e7fe      	b.n	8005034 <ADC_IRQHandler>
	...

08005038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <HAL_Init+0x40>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0d      	ldr	r2, [pc, #52]	; (8005078 <HAL_Init+0x40>)
 8005042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_Init+0x40>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <HAL_Init+0x40>)
 800504e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005054:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_Init+0x40>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a07      	ldr	r2, [pc, #28]	; (8005078 <HAL_Init+0x40>)
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005060:	2003      	movs	r0, #3
 8005062:	f000 fd41 	bl	8005ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005066:	2000      	movs	r0, #0
 8005068:	f000 f808 	bl	800507c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800506c:	f7ff fb10 	bl	8004690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023c00 	.word	0x40023c00

0800507c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005084:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <HAL_InitTick+0x54>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <HAL_InitTick+0x58>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005092:	fbb3 f3f1 	udiv	r3, r3, r1
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fd59 	bl	8005b52 <HAL_SYSTICK_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00e      	b.n	80050c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d80a      	bhi.n	80050c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050b0:	2200      	movs	r2, #0
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	f000 fd21 	bl	8005afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050bc:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <HAL_InitTick+0x5c>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000034 	.word	0x20000034
 80050d4:	2000003c 	.word	0x2000003c
 80050d8:	20000038 	.word	0x20000038

080050dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_IncTick+0x20>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_IncTick+0x24>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <HAL_IncTick+0x24>)
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000003c 	.word	0x2000003c
 8005100:	2000c480 	.word	0x2000c480

08005104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return uwTick;
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <HAL_GetTick+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000c480 	.word	0x2000c480

0800511c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005124:	f7ff ffee 	bl	8005104 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d005      	beq.n	8005142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_Delay+0x40>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005142:	bf00      	nop
 8005144:	f7ff ffde 	bl	8005104 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d8f7      	bhi.n	8005144 <HAL_Delay+0x28>
  {
  }
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	2000003c 	.word	0x2000003c

08005160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e033      	b.n	80051de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff faae 	bl	80046e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d118      	bne.n	80051d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051a6:	f023 0302 	bic.w	r3, r3, #2
 80051aa:	f043 0202 	orr.w	r2, r3, #2
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa4a 	bl	800564c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	f043 0201 	orr.w	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
 80051ce:	e001      	b.n	80051d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_ADC_Start_DMA+0x1e>
 8005202:	2302      	movs	r3, #2
 8005204:	e0cc      	b.n	80053a0 <HAL_ADC_Start_DMA+0x1b8>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d018      	beq.n	800524e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800522c:	4b5e      	ldr	r3, [pc, #376]	; (80053a8 <HAL_ADC_Start_DMA+0x1c0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5e      	ldr	r2, [pc, #376]	; (80053ac <HAL_ADC_Start_DMA+0x1c4>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0c9a      	lsrs	r2, r3, #18
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005240:	e002      	b.n	8005248 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3b01      	subs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f9      	bne.n	8005242 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	f040 80a0 	bne.w	800539e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005288:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d106      	bne.n	80052ac <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f023 0206 	bic.w	r2, r3, #6
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
 80052aa:	e002      	b.n	80052b2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052ba:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <HAL_ADC_Start_DMA+0x1c8>)
 80052bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <HAL_ADC_Start_DMA+0x1cc>)
 80052c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	4a3b      	ldr	r2, [pc, #236]	; (80053b8 <HAL_ADC_Start_DMA+0x1d0>)
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	4a3a      	ldr	r2, [pc, #232]	; (80053bc <HAL_ADC_Start_DMA+0x1d4>)
 80052d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80052de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	334c      	adds	r3, #76	; 0x4c
 800530a:	4619      	mov	r1, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f000 fcda 	bl	8005cc8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2b00      	cmp	r3, #0
 800531e:	d12a      	bne.n	8005376 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <HAL_ADC_Start_DMA+0x1d8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d015      	beq.n	8005356 <HAL_ADC_Start_DMA+0x16e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <HAL_ADC_Start_DMA+0x1dc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d105      	bne.n	8005340 <HAL_ADC_Start_DMA+0x158>
 8005334:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <HAL_ADC_Start_DMA+0x1c8>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <HAL_ADC_Start_DMA+0x1e0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d129      	bne.n	800539e <HAL_ADC_Start_DMA+0x1b6>
 800534a:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <HAL_ADC_Start_DMA+0x1c8>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d823      	bhi.n	800539e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11c      	bne.n	800539e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	e013      	b.n	800539e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <HAL_ADC_Start_DMA+0x1d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10e      	bne.n	800539e <HAL_ADC_Start_DMA+0x1b6>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800539c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000034 	.word	0x20000034
 80053ac:	431bde83 	.word	0x431bde83
 80053b0:	40012300 	.word	0x40012300
 80053b4:	08005845 	.word	0x08005845
 80053b8:	080058ff 	.word	0x080058ff
 80053bc:	0800591b 	.word	0x0800591b
 80053c0:	40012000 	.word	0x40012000
 80053c4:	40012100 	.word	0x40012100
 80053c8:	40012200 	.word	0x40012200

080053cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x1c>
 8005420:	2302      	movs	r3, #2
 8005422:	e105      	b.n	8005630 <HAL_ADC_ConfigChannel+0x228>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b09      	cmp	r3, #9
 8005432:	d925      	bls.n	8005480 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68d9      	ldr	r1, [r3, #12]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	3b1e      	subs	r3, #30
 800544a:	2207      	movs	r2, #7
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	43da      	mvns	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	400a      	ands	r2, r1
 8005458:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68d9      	ldr	r1, [r3, #12]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	4618      	mov	r0, r3
 800546c:	4603      	mov	r3, r0
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4403      	add	r3, r0
 8005472:	3b1e      	subs	r3, #30
 8005474:	409a      	lsls	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	e022      	b.n	80054c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6919      	ldr	r1, [r3, #16]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	2207      	movs	r2, #7
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43da      	mvns	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	400a      	ands	r2, r1
 80054a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6919      	ldr	r1, [r3, #16]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4618      	mov	r0, r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4403      	add	r3, r0
 80054bc:	409a      	lsls	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d824      	bhi.n	8005518 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	3b05      	subs	r3, #5
 80054e0:	221f      	movs	r2, #31
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43da      	mvns	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	400a      	ands	r2, r1
 80054ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	4618      	mov	r0, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	3b05      	subs	r3, #5
 800550a:	fa00 f203 	lsl.w	r2, r0, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	635a      	str	r2, [r3, #52]	; 0x34
 8005516:	e04c      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d824      	bhi.n	800556a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	3b23      	subs	r3, #35	; 0x23
 8005532:	221f      	movs	r2, #31
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	43da      	mvns	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	400a      	ands	r2, r1
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	4618      	mov	r0, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	3b23      	subs	r3, #35	; 0x23
 800555c:	fa00 f203 	lsl.w	r2, r0, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
 8005568:	e023      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	3b41      	subs	r3, #65	; 0x41
 800557c:	221f      	movs	r2, #31
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43da      	mvns	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	400a      	ands	r2, r1
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	4618      	mov	r0, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	3b41      	subs	r3, #65	; 0x41
 80055a6:	fa00 f203 	lsl.w	r2, r0, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_ADC_ConfigChannel+0x234>)
 80055b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a21      	ldr	r2, [pc, #132]	; (8005640 <HAL_ADC_ConfigChannel+0x238>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d109      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x1cc>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b12      	cmp	r3, #18
 80055c6:	d105      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a19      	ldr	r2, [pc, #100]	; (8005640 <HAL_ADC_ConfigChannel+0x238>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d123      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x21e>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d003      	beq.n	80055ee <HAL_ADC_ConfigChannel+0x1e6>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b11      	cmp	r3, #17
 80055ec:	d11b      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d111      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <HAL_ADC_ConfigChannel+0x23c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <HAL_ADC_ConfigChannel+0x240>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	0c9a      	lsrs	r2, r3, #18
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005618:	e002      	b.n	8005620 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3b01      	subs	r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f9      	bne.n	800561a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40012300 	.word	0x40012300
 8005640:	40012000 	.word	0x40012000
 8005644:	20000034 	.word	0x20000034
 8005648:	431bde83 	.word	0x431bde83

0800564c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005654:	4b79      	ldr	r3, [pc, #484]	; (800583c <ADC_Init+0x1f0>)
 8005656:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	021a      	lsls	r2, r3, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6899      	ldr	r1, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4a58      	ldr	r2, [pc, #352]	; (8005840 <ADC_Init+0x1f4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6899      	ldr	r1, [r3, #8]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	e00f      	b.n	800574a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005748:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0202 	bic.w	r2, r2, #2
 8005758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6899      	ldr	r1, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7e1b      	ldrb	r3, [r3, #24]
 8005764:	005a      	lsls	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005786:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005796:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	3b01      	subs	r3, #1
 80057a4:	035a      	lsls	r2, r3, #13
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	e007      	b.n	80057c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	3b01      	subs	r3, #1
 80057dc:	051a      	lsls	r2, r3, #20
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005802:	025a      	lsls	r2, r3, #9
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6899      	ldr	r1, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	029a      	lsls	r2, r3, #10
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	40012300 	.word	0x40012300
 8005840:	0f000001 	.word	0x0f000001

08005844 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800585a:	2b00      	cmp	r3, #0
 800585c:	d13c      	bne.n	80058d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d12b      	bne.n	80058d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800587c:	2b00      	cmp	r3, #0
 800587e:	d127      	bne.n	80058d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005898:	2b00      	cmp	r3, #0
 800589a:	d119      	bne.n	80058d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0220 	bic.w	r2, r2, #32
 80058aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f043 0201 	orr.w	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff fd7b 	bl	80053cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058d6:	e00e      	b.n	80058f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff fd85 	bl	80053f4 <HAL_ADC_ErrorCallback>
}
 80058ea:	e004      	b.n	80058f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff fd67 	bl	80053e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2240      	movs	r2, #64	; 0x40
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	f043 0204 	orr.w	r2, r3, #4
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff fd5a 	bl	80053f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <__NVIC_SetPriorityGrouping+0x44>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005964:	4013      	ands	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800597a:	4a04      	ldr	r2, [pc, #16]	; (800598c <__NVIC_SetPriorityGrouping+0x44>)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	60d3      	str	r3, [r2, #12]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 0307 	and.w	r3, r3, #7
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	db0b      	blt.n	80059d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	f003 021f 	and.w	r2, r3, #31
 80059c4:	4907      	ldr	r1, [pc, #28]	; (80059e4 <__NVIC_EnableIRQ+0x38>)
 80059c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	2001      	movs	r0, #1
 80059ce:	fa00 f202 	lsl.w	r2, r0, r2
 80059d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	e000e100 	.word	0xe000e100

080059e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	db0a      	blt.n	8005a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	490c      	ldr	r1, [pc, #48]	; (8005a34 <__NVIC_SetPriority+0x4c>)
 8005a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a10:	e00a      	b.n	8005a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	4908      	ldr	r1, [pc, #32]	; (8005a38 <__NVIC_SetPriority+0x50>)
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	0112      	lsls	r2, r2, #4
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	440b      	add	r3, r1
 8005a26:	761a      	strb	r2, [r3, #24]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000e100 	.word	0xe000e100
 8005a38:	e000ed00 	.word	0xe000ed00

08005a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f1c3 0307 	rsb	r3, r3, #7
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	bf28      	it	cs
 8005a5a:	2304      	movcs	r3, #4
 8005a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d902      	bls.n	8005a6c <NVIC_EncodePriority+0x30>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3b03      	subs	r3, #3
 8005a6a:	e000      	b.n	8005a6e <NVIC_EncodePriority+0x32>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	401a      	ands	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a84:	f04f 31ff 	mov.w	r1, #4294967295
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	43d9      	mvns	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a94:	4313      	orrs	r3, r2
         );
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	; 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab4:	d301      	bcc.n	8005aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e00f      	b.n	8005ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <SysTick_Config+0x40>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	f7ff ff8e 	bl	80059e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <SysTick_Config+0x40>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <SysTick_Config+0x40>)
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	e000e010 	.word	0xe000e010

08005ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff29 	bl	8005948 <__NVIC_SetPriorityGrouping>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b10:	f7ff ff3e 	bl	8005990 <__NVIC_GetPriorityGrouping>
 8005b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	6978      	ldr	r0, [r7, #20]
 8005b1c:	f7ff ff8e 	bl	8005a3c <NVIC_EncodePriority>
 8005b20:	4602      	mov	r2, r0
 8005b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff5d 	bl	80059e8 <__NVIC_SetPriority>
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff31 	bl	80059ac <__NVIC_EnableIRQ>
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ffa2 	bl	8005aa4 <SysTick_Config>
 8005b60:	4603      	mov	r3, r0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b78:	f7ff fac4 	bl	8005104 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e099      	b.n	8005cbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0201 	bic.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ba8:	e00f      	b.n	8005bca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005baa:	f7ff faab 	bl	8005104 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	d908      	bls.n	8005bca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e078      	b.n	8005cbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e8      	bne.n	8005baa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <HAL_DMA_Init+0x158>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d107      	bne.n	8005c34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d117      	bne.n	8005c8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa6f 	bl	8006154 <DMA_CheckFifoParam>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e016      	b.n	8005cbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa26 	bl	80060e8 <DMA_CalcBaseAndBitshift>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca4:	223f      	movs	r2, #63	; 0x3f
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	f010803f 	.word	0xf010803f

08005cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_DMA_Start_IT+0x26>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e040      	b.n	8005d70 <HAL_DMA_Start_IT+0xa8>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d12f      	bne.n	8005d62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f9b8 	bl	800608c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	223f      	movs	r2, #63	; 0x3f
 8005d22:	409a      	lsls	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0216 	orr.w	r2, r2, #22
 8005d36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0208 	orr.w	r2, r2, #8
 8005d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e005      	b.n	8005d6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d84:	4b92      	ldr	r3, [pc, #584]	; (8005fd0 <HAL_DMA_IRQHandler+0x258>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a92      	ldr	r2, [pc, #584]	; (8005fd4 <HAL_DMA_IRQHandler+0x25c>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	0a9b      	lsrs	r3, r3, #10
 8005d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	2208      	movs	r2, #8
 8005da4:	409a      	lsls	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01a      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d013      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0204 	bic.w	r2, r2, #4
 8005dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	f043 0201 	orr.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d012      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	2201      	movs	r2, #1
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	f043 0202 	orr.w	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	2204      	movs	r2, #4
 8005e20:	409a      	lsls	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	2210      	movs	r2, #16
 8005e56:	409a      	lsls	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d043      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d03c      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e72:	2210      	movs	r2, #16
 8005e74:	409a      	lsls	r2, r3
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d024      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
 8005ea6:	e01f      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
 8005eb8:	e016      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0208 	bic.w	r2, r2, #8
 8005ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	2220      	movs	r2, #32
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 808e 	beq.w	8006016 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 8086 	beq.w	8006016 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	2220      	movs	r2, #32
 8005f10:	409a      	lsls	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d136      	bne.n	8005f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0216 	bic.w	r2, r2, #22
 8005f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <HAL_DMA_IRQHandler+0x1da>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0208 	bic.w	r2, r2, #8
 8005f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f66:	223f      	movs	r2, #63	; 0x3f
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d07d      	beq.n	8006082 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
        }
        return;
 8005f8e:	e078      	b.n	8006082 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d01c      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d108      	bne.n	8005fbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d030      	beq.n	8006016 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
 8005fbc:	e02b      	b.n	8006016 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d027      	beq.n	8006016 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
 8005fce:	e022      	b.n	8006016 <HAL_DMA_IRQHandler+0x29e>
 8005fd0:	20000034 	.word	0x20000034
 8005fd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0210 	bic.w	r2, r2, #16
 8005ff4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	2b00      	cmp	r3, #0
 800601c:	d032      	beq.n	8006084 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d022      	beq.n	8006070 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2205      	movs	r2, #5
 800602e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3301      	adds	r3, #1
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	429a      	cmp	r2, r3
 800604c:	d307      	bcc.n	800605e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f2      	bne.n	8006042 <HAL_DMA_IRQHandler+0x2ca>
 800605c:	e000      	b.n	8006060 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800605e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
 8006080:	e000      	b.n	8006084 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006082:	bf00      	nop
    }
  }
}
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop

0800608c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d108      	bne.n	80060cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060ca:	e007      	b.n	80060dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	60da      	str	r2, [r3, #12]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	3b10      	subs	r3, #16
 80060f8:	4a14      	ldr	r2, [pc, #80]	; (800614c <DMA_CalcBaseAndBitshift+0x64>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006102:	4a13      	ldr	r2, [pc, #76]	; (8006150 <DMA_CalcBaseAndBitshift+0x68>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b03      	cmp	r3, #3
 8006114:	d909      	bls.n	800612a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	1d1a      	adds	r2, r3, #4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	659a      	str	r2, [r3, #88]	; 0x58
 8006128:	e007      	b.n	800613a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	aaaaaaab 	.word	0xaaaaaaab
 8006150:	0800db98 	.word	0x0800db98

08006154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d11f      	bne.n	80061ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d855      	bhi.n	8006220 <DMA_CheckFifoParam+0xcc>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <DMA_CheckFifoParam+0x28>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800619f 	.word	0x0800619f
 8006184:	0800618d 	.word	0x0800618d
 8006188:	08006221 	.word	0x08006221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d045      	beq.n	8006224 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800619c:	e042      	b.n	8006224 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061a6:	d13f      	bne.n	8006228 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ac:	e03c      	b.n	8006228 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b6:	d121      	bne.n	80061fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d836      	bhi.n	800622c <DMA_CheckFifoParam+0xd8>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <DMA_CheckFifoParam+0x70>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061db 	.word	0x080061db
 80061cc:	080061d5 	.word	0x080061d5
 80061d0:	080061ed 	.word	0x080061ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
      break;
 80061d8:	e02f      	b.n	800623a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d024      	beq.n	8006230 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ea:	e021      	b.n	8006230 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061f4:	d11e      	bne.n	8006234 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061fa:	e01b      	b.n	8006234 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d902      	bls.n	8006208 <DMA_CheckFifoParam+0xb4>
 8006202:	2b03      	cmp	r3, #3
 8006204:	d003      	beq.n	800620e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006206:	e018      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e015      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
      break;
 800621e:	e00b      	b.n	8006238 <DMA_CheckFifoParam+0xe4>
      break;
 8006220:	bf00      	nop
 8006222:	e00a      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;
 8006224:	bf00      	nop
 8006226:	e008      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;
 8006228:	bf00      	nop
 800622a:	e006      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;
 800622c:	bf00      	nop
 800622e:	e004      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;
 8006230:	bf00      	nop
 8006232:	e002      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;   
 8006234:	bf00      	nop
 8006236:	e000      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;
 8006238:	bf00      	nop
    }
  } 
  
  return status; 
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_FLASH_Unlock+0x38>)
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	da0b      	bge.n	8006272 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_FLASH_Unlock+0x38>)
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <HAL_FLASH_Unlock+0x3c>)
 800625e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <HAL_FLASH_Unlock+0x38>)
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <HAL_FLASH_Unlock+0x40>)
 8006264:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <HAL_FLASH_Unlock+0x38>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	da01      	bge.n	8006272 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006272:	79fb      	ldrb	r3, [r7, #7]
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40023c00 	.word	0x40023c00
 8006284:	45670123 	.word	0x45670123
 8006288:	cdef89ab 	.word	0xcdef89ab

0800628c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006290:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <HAL_FLASH_Lock+0x1c>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <HAL_FLASH_Lock+0x1c>)
 8006296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40023c00 	.word	0x40023c00

080062ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062b8:	4b1a      	ldr	r3, [pc, #104]	; (8006324 <FLASH_WaitForLastOperation+0x78>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80062be:	f7fe ff21 	bl	8005104 <HAL_GetTick>
 80062c2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80062c4:	e010      	b.n	80062e8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d00c      	beq.n	80062e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <FLASH_WaitForLastOperation+0x38>
 80062d4:	f7fe ff16 	bl	8005104 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d201      	bcs.n	80062e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e019      	b.n	800631c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <FLASH_WaitForLastOperation+0x7c>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e8      	bne.n	80062c6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <FLASH_WaitForLastOperation+0x7c>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <FLASH_WaitForLastOperation+0x7c>)
 8006302:	2201      	movs	r2, #1
 8006304:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <FLASH_WaitForLastOperation+0x7c>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006312:	f000 f80b 	bl	800632c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
  
}  
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	2000c484 	.word	0x2000c484
 8006328:	40023c00 	.word	0x40023c00

0800632c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006330:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b00      	cmp	r3, #0
 800633a:	d008      	beq.n	800634e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800633c:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f043 0310 	orr.w	r3, r3, #16
 8006344:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 8006346:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 800634a:	2210      	movs	r2, #16
 800634c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800635a:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f043 0308 	orr.w	r3, r3, #8
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 8006364:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006366:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 8006368:	2220      	movs	r2, #32
 800636a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006378:	4b16      	ldr	r3, [pc, #88]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	4a14      	ldr	r2, [pc, #80]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 8006382:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006384:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 8006386:	2240      	movs	r2, #64	; 0x40
 8006388:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 80063a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <FLASH_SetErrorCode+0xa8>)
 80063be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <FLASH_SetErrorCode+0xa4>)
 80063c2:	2202      	movs	r2, #2
 80063c4:	60da      	str	r2, [r3, #12]
  }
}
 80063c6:	bf00      	nop
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	40023c00 	.word	0x40023c00
 80063d4:	2000c484 	.word	0x2000c484

080063d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063ea:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_FLASHEx_Erase+0xd8>)
 80063ec:	7e1b      	ldrb	r3, [r3, #24]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_FLASHEx_Erase+0x1e>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e058      	b.n	80064a8 <HAL_FLASHEx_Erase+0xd0>
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <HAL_FLASHEx_Erase+0xd8>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006400:	f7ff ff54 	bl	80062ac <FLASH_WaitForLastOperation>
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d148      	bne.n	80064a0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d115      	bne.n	800644a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f000 f844 	bl	80064b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006434:	f7ff ff3a 	bl	80062ac <FLASH_WaitForLastOperation>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800643c:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <HAL_FLASHEx_Erase+0xdc>)
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <HAL_FLASHEx_Erase+0xdc>)
 8006442:	f023 0304 	bic.w	r3, r3, #4
 8006446:	6113      	str	r3, [r2, #16]
 8006448:	e028      	b.n	800649c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	e01c      	b.n	800648c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4619      	mov	r1, r3
 800645a:	68b8      	ldr	r0, [r7, #8]
 800645c:	f000 f850 	bl	8006500 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006460:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006464:	f7ff ff22 	bl	80062ac <FLASH_WaitForLastOperation>
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <HAL_FLASHEx_Erase+0xdc>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <HAL_FLASHEx_Erase+0xdc>)
 8006472:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006476:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	601a      	str	r2, [r3, #0]
          break;
 8006484:	e00a      	b.n	800649c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3301      	adds	r3, #1
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	4413      	add	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d3da      	bcc.n	8006452 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800649c:	f000 f878 	bl	8006590 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <HAL_FLASHEx_Erase+0xd8>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	761a      	strb	r2, [r3, #24]

  return status;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	2000c484 	.word	0x2000c484
 80064b4:	40023c00 	.word	0x40023c00

080064b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064c4:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <FLASH_MassErase+0x44>)
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	4a0c      	ldr	r2, [pc, #48]	; (80064fc <FLASH_MassErase+0x44>)
 80064ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <FLASH_MassErase+0x44>)
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	4a09      	ldr	r2, [pc, #36]	; (80064fc <FLASH_MassErase+0x44>)
 80064d6:	f043 0304 	orr.w	r3, r3, #4
 80064da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <FLASH_MassErase+0x44>)
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	4313      	orrs	r3, r2
 80064e6:	4a05      	ldr	r2, [pc, #20]	; (80064fc <FLASH_MassErase+0x44>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ec:	6113      	str	r3, [r2, #16]
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40023c00 	.word	0x40023c00

08006500 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e010      	b.n	800653e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d103      	bne.n	800652a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e009      	b.n	800653e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d103      	bne.n	8006538 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e002      	b.n	800653e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006538:	f44f 7340 	mov.w	r3, #768	; 0x300
 800653c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <FLASH_Erase_Sector+0x8c>)
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	4a12      	ldr	r2, [pc, #72]	; (800658c <FLASH_Erase_Sector+0x8c>)
 8006544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006548:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <FLASH_Erase_Sector+0x8c>)
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	490f      	ldr	r1, [pc, #60]	; (800658c <FLASH_Erase_Sector+0x8c>)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <FLASH_Erase_Sector+0x8c>)
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	4a0c      	ldr	r2, [pc, #48]	; (800658c <FLASH_Erase_Sector+0x8c>)
 800655c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006560:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <FLASH_Erase_Sector+0x8c>)
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4313      	orrs	r3, r2
 800656c:	4a07      	ldr	r2, [pc, #28]	; (800658c <FLASH_Erase_Sector+0x8c>)
 800656e:	f043 0302 	orr.w	r3, r3, #2
 8006572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <FLASH_Erase_Sector+0x8c>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <FLASH_Erase_Sector+0x8c>)
 800657a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657e:	6113      	str	r3, [r2, #16]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40023c00 	.word	0x40023c00

08006590 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006594:	4b20      	ldr	r3, [pc, #128]	; (8006618 <FLASH_FlushCaches+0x88>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800659c:	2b00      	cmp	r3, #0
 800659e:	d017      	beq.n	80065d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80065a0:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a19      	ldr	r2, [pc, #100]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	4b17      	ldr	r3, [pc, #92]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a16      	ldr	r2, [pc, #88]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065c4:	4b14      	ldr	r3, [pc, #80]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ce:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80065d0:	4b11      	ldr	r3, [pc, #68]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80065e8:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a07      	ldr	r2, [pc, #28]	; (8006618 <FLASH_FlushCaches+0x88>)
 80065fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <FLASH_FlushCaches+0x88>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a04      	ldr	r2, [pc, #16]	; (8006618 <FLASH_FlushCaches+0x88>)
 8006606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800660a:	6013      	str	r3, [r2, #0]
  }
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00

0800661c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800661c:	b480      	push	{r7}
 800661e:	b089      	sub	sp, #36	; 0x24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	e16b      	b.n	8006910 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006638:	2201      	movs	r2, #1
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4013      	ands	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	429a      	cmp	r2, r3
 8006652:	f040 815a 	bne.w	800690a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d00b      	beq.n	8006676 <HAL_GPIO_Init+0x5a>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d007      	beq.n	8006676 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800666a:	2b11      	cmp	r3, #17
 800666c:	d003      	beq.n	8006676 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b12      	cmp	r3, #18
 8006674:	d130      	bne.n	80066d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	2203      	movs	r2, #3
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4313      	orrs	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066ac:	2201      	movs	r2, #1
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 0201 	and.w	r2, r3, #1
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	2203      	movs	r2, #3
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0xfc>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b12      	cmp	r3, #18
 8006716:	d123      	bne.n	8006760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	08da      	lsrs	r2, r3, #3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3208      	adds	r2, #8
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	220f      	movs	r2, #15
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	08da      	lsrs	r2, r3, #3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3208      	adds	r2, #8
 800675a:	69b9      	ldr	r1, [r7, #24]
 800675c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	2203      	movs	r2, #3
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	43db      	mvns	r3, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4013      	ands	r3, r2
 8006776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 0203 	and.w	r2, r3, #3
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	4313      	orrs	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80b4 	beq.w	800690a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	4b5f      	ldr	r3, [pc, #380]	; (8006924 <HAL_GPIO_Init+0x308>)
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	4a5e      	ldr	r2, [pc, #376]	; (8006924 <HAL_GPIO_Init+0x308>)
 80067ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067b0:	6453      	str	r3, [r2, #68]	; 0x44
 80067b2:	4b5c      	ldr	r3, [pc, #368]	; (8006924 <HAL_GPIO_Init+0x308>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067be:	4a5a      	ldr	r2, [pc, #360]	; (8006928 <HAL_GPIO_Init+0x30c>)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	089b      	lsrs	r3, r3, #2
 80067c4:	3302      	adds	r3, #2
 80067c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	220f      	movs	r2, #15
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	43db      	mvns	r3, r3
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	4013      	ands	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a51      	ldr	r2, [pc, #324]	; (800692c <HAL_GPIO_Init+0x310>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d02b      	beq.n	8006842 <HAL_GPIO_Init+0x226>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a50      	ldr	r2, [pc, #320]	; (8006930 <HAL_GPIO_Init+0x314>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d025      	beq.n	800683e <HAL_GPIO_Init+0x222>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a4f      	ldr	r2, [pc, #316]	; (8006934 <HAL_GPIO_Init+0x318>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01f      	beq.n	800683a <HAL_GPIO_Init+0x21e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a4e      	ldr	r2, [pc, #312]	; (8006938 <HAL_GPIO_Init+0x31c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d019      	beq.n	8006836 <HAL_GPIO_Init+0x21a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a4d      	ldr	r2, [pc, #308]	; (800693c <HAL_GPIO_Init+0x320>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <HAL_GPIO_Init+0x216>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a4c      	ldr	r2, [pc, #304]	; (8006940 <HAL_GPIO_Init+0x324>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00d      	beq.n	800682e <HAL_GPIO_Init+0x212>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a4b      	ldr	r2, [pc, #300]	; (8006944 <HAL_GPIO_Init+0x328>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <HAL_GPIO_Init+0x20e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a4a      	ldr	r2, [pc, #296]	; (8006948 <HAL_GPIO_Init+0x32c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_GPIO_Init+0x20a>
 8006822:	2307      	movs	r3, #7
 8006824:	e00e      	b.n	8006844 <HAL_GPIO_Init+0x228>
 8006826:	2308      	movs	r3, #8
 8006828:	e00c      	b.n	8006844 <HAL_GPIO_Init+0x228>
 800682a:	2306      	movs	r3, #6
 800682c:	e00a      	b.n	8006844 <HAL_GPIO_Init+0x228>
 800682e:	2305      	movs	r3, #5
 8006830:	e008      	b.n	8006844 <HAL_GPIO_Init+0x228>
 8006832:	2304      	movs	r3, #4
 8006834:	e006      	b.n	8006844 <HAL_GPIO_Init+0x228>
 8006836:	2303      	movs	r3, #3
 8006838:	e004      	b.n	8006844 <HAL_GPIO_Init+0x228>
 800683a:	2302      	movs	r3, #2
 800683c:	e002      	b.n	8006844 <HAL_GPIO_Init+0x228>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <HAL_GPIO_Init+0x228>
 8006842:	2300      	movs	r3, #0
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	f002 0203 	and.w	r2, r2, #3
 800684a:	0092      	lsls	r2, r2, #2
 800684c:	4093      	lsls	r3, r2
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	4313      	orrs	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006854:	4934      	ldr	r1, [pc, #208]	; (8006928 <HAL_GPIO_Init+0x30c>)
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	3302      	adds	r3, #2
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006862:	4b3a      	ldr	r3, [pc, #232]	; (800694c <HAL_GPIO_Init+0x330>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	43db      	mvns	r3, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4013      	ands	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006886:	4a31      	ldr	r2, [pc, #196]	; (800694c <HAL_GPIO_Init+0x330>)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800688c:	4b2f      	ldr	r3, [pc, #188]	; (800694c <HAL_GPIO_Init+0x330>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	43db      	mvns	r3, r3
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4013      	ands	r3, r2
 800689a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068b0:	4a26      	ldr	r2, [pc, #152]	; (800694c <HAL_GPIO_Init+0x330>)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068b6:	4b25      	ldr	r3, [pc, #148]	; (800694c <HAL_GPIO_Init+0x330>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	43db      	mvns	r3, r3
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	4013      	ands	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068da:	4a1c      	ldr	r2, [pc, #112]	; (800694c <HAL_GPIO_Init+0x330>)
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <HAL_GPIO_Init+0x330>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4013      	ands	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <HAL_GPIO_Init+0x330>)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	3301      	adds	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2b0f      	cmp	r3, #15
 8006914:	f67f ae90 	bls.w	8006638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006918:	bf00      	nop
 800691a:	3724      	adds	r7, #36	; 0x24
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40023800 	.word	0x40023800
 8006928:	40013800 	.word	0x40013800
 800692c:	40020000 	.word	0x40020000
 8006930:	40020400 	.word	0x40020400
 8006934:	40020800 	.word	0x40020800
 8006938:	40020c00 	.word	0x40020c00
 800693c:	40021000 	.word	0x40021000
 8006940:	40021400 	.word	0x40021400
 8006944:	40021800 	.word	0x40021800
 8006948:	40021c00 	.word	0x40021c00
 800694c:	40013c00 	.word	0x40013c00

08006950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	887b      	ldrh	r3, [r7, #2]
 8006962:	4013      	ands	r3, r2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e001      	b.n	8006972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	807b      	strh	r3, [r7, #2]
 800698c:	4613      	mov	r3, r2
 800698e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006990:	787b      	ldrb	r3, [r7, #1]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006996:	887a      	ldrh	r2, [r7, #2]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800699c:	e003      	b.n	80069a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800699e:	887b      	ldrh	r3, [r7, #2]
 80069a0:	041a      	lsls	r2, r3, #16
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	619a      	str	r2, [r3, #24]
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e11f      	b.n	8006c06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fd ff96 	bl	800490c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2224      	movs	r2, #36	; 0x24
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a18:	f000 fd18 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 8006a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4a7b      	ldr	r2, [pc, #492]	; (8006c10 <HAL_I2C_Init+0x25c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d807      	bhi.n	8006a38 <HAL_I2C_Init+0x84>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a7a      	ldr	r2, [pc, #488]	; (8006c14 <HAL_I2C_Init+0x260>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	bf94      	ite	ls
 8006a30:	2301      	movls	r3, #1
 8006a32:	2300      	movhi	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e006      	b.n	8006a46 <HAL_I2C_Init+0x92>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a77      	ldr	r2, [pc, #476]	; (8006c18 <HAL_I2C_Init+0x264>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	bf94      	ite	ls
 8006a40:	2301      	movls	r3, #1
 8006a42:	2300      	movhi	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e0db      	b.n	8006c06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a72      	ldr	r2, [pc, #456]	; (8006c1c <HAL_I2C_Init+0x268>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	0c9b      	lsrs	r3, r3, #18
 8006a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a64      	ldr	r2, [pc, #400]	; (8006c10 <HAL_I2C_Init+0x25c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d802      	bhi.n	8006a88 <HAL_I2C_Init+0xd4>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3301      	adds	r3, #1
 8006a86:	e009      	b.n	8006a9c <HAL_I2C_Init+0xe8>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	4a63      	ldr	r2, [pc, #396]	; (8006c20 <HAL_I2C_Init+0x26c>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	099b      	lsrs	r3, r3, #6
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4956      	ldr	r1, [pc, #344]	; (8006c10 <HAL_I2C_Init+0x25c>)
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	d80d      	bhi.n	8006ad8 <HAL_I2C_Init+0x124>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	1e59      	subs	r1, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aca:	3301      	adds	r3, #1
 8006acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	bf38      	it	cc
 8006ad4:	2304      	movcc	r3, #4
 8006ad6:	e04f      	b.n	8006b78 <HAL_I2C_Init+0x1c4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d111      	bne.n	8006b04 <HAL_I2C_Init+0x150>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1e58      	subs	r0, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	440b      	add	r3, r1
 8006aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006af2:	3301      	adds	r3, #1
 8006af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf0c      	ite	eq
 8006afc:	2301      	moveq	r3, #1
 8006afe:	2300      	movne	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e012      	b.n	8006b2a <HAL_I2C_Init+0x176>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	1e58      	subs	r0, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6859      	ldr	r1, [r3, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	0099      	lsls	r1, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bf0c      	ite	eq
 8006b24:	2301      	moveq	r3, #1
 8006b26:	2300      	movne	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <HAL_I2C_Init+0x17e>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e022      	b.n	8006b78 <HAL_I2C_Init+0x1c4>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10e      	bne.n	8006b58 <HAL_I2C_Init+0x1a4>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	1e58      	subs	r0, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	440b      	add	r3, r1
 8006b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b56:	e00f      	b.n	8006b78 <HAL_I2C_Init+0x1c4>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	1e58      	subs	r0, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6859      	ldr	r1, [r3, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	0099      	lsls	r1, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	6809      	ldr	r1, [r1, #0]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6911      	ldr	r1, [r2, #16]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68d2      	ldr	r2, [r2, #12]
 8006bb2:	4311      	orrs	r1, r2
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	000186a0 	.word	0x000186a0
 8006c14:	001e847f 	.word	0x001e847f
 8006c18:	003d08ff 	.word	0x003d08ff
 8006c1c:	431bde83 	.word	0x431bde83
 8006c20:	10624dd3 	.word	0x10624dd3

08006c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e25b      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d075      	beq.n	8006d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c42:	4ba3      	ldr	r3, [pc, #652]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 030c 	and.w	r3, r3, #12
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d00c      	beq.n	8006c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c4e:	4ba0      	ldr	r3, [pc, #640]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d112      	bne.n	8006c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c5a:	4b9d      	ldr	r3, [pc, #628]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c68:	4b99      	ldr	r3, [pc, #612]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d05b      	beq.n	8006d2c <HAL_RCC_OscConfig+0x108>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d157      	bne.n	8006d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e236      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c88:	d106      	bne.n	8006c98 <HAL_RCC_OscConfig+0x74>
 8006c8a:	4b91      	ldr	r3, [pc, #580]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a90      	ldr	r2, [pc, #576]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	e01d      	b.n	8006cd4 <HAL_RCC_OscConfig+0xb0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x98>
 8006ca2:	4b8b      	ldr	r3, [pc, #556]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a8a      	ldr	r2, [pc, #552]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4b88      	ldr	r3, [pc, #544]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a87      	ldr	r2, [pc, #540]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	e00b      	b.n	8006cd4 <HAL_RCC_OscConfig+0xb0>
 8006cbc:	4b84      	ldr	r3, [pc, #528]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a83      	ldr	r2, [pc, #524]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b81      	ldr	r3, [pc, #516]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a80      	ldr	r2, [pc, #512]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d013      	beq.n	8006d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cdc:	f7fe fa12 	bl	8005104 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ce4:	f7fe fa0e 	bl	8005104 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	; 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e1fb      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	4b76      	ldr	r3, [pc, #472]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0xc0>
 8006d02:	e014      	b.n	8006d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d04:	f7fe f9fe 	bl	8005104 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d0c:	f7fe f9fa 	bl	8005104 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	; 0x64
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e1e7      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1e:	4b6c      	ldr	r3, [pc, #432]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0xe8>
 8006d2a:	e000      	b.n	8006d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d063      	beq.n	8006e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d3a:	4b65      	ldr	r3, [pc, #404]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d46:	4b62      	ldr	r3, [pc, #392]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d11c      	bne.n	8006d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d52:	4b5f      	ldr	r3, [pc, #380]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d116      	bne.n	8006d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d5e:	4b5c      	ldr	r3, [pc, #368]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <HAL_RCC_OscConfig+0x152>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d001      	beq.n	8006d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e1bb      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d76:	4b56      	ldr	r3, [pc, #344]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4952      	ldr	r1, [pc, #328]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d8a:	e03a      	b.n	8006e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d020      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d94:	4b4f      	ldr	r3, [pc, #316]	; (8006ed4 <HAL_RCC_OscConfig+0x2b0>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9a:	f7fe f9b3 	bl	8005104 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006da2:	f7fe f9af 	bl	8005104 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e19c      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db4:	4b46      	ldr	r3, [pc, #280]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc0:	4b43      	ldr	r3, [pc, #268]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4940      	ldr	r1, [pc, #256]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	600b      	str	r3, [r1, #0]
 8006dd4:	e015      	b.n	8006e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dd6:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <HAL_RCC_OscConfig+0x2b0>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ddc:	f7fe f992 	bl	8005104 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006de4:	f7fe f98e 	bl	8005104 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e17b      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006df6:	4b36      	ldr	r3, [pc, #216]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d030      	beq.n	8006e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d016      	beq.n	8006e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e16:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <HAL_RCC_OscConfig+0x2b4>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1c:	f7fe f972 	bl	8005104 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e24:	f7fe f96e 	bl	8005104 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e15b      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e36:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f0      	beq.n	8006e24 <HAL_RCC_OscConfig+0x200>
 8006e42:	e015      	b.n	8006e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e44:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <HAL_RCC_OscConfig+0x2b4>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e4a:	f7fe f95b 	bl	8005104 <HAL_GetTick>
 8006e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e50:	e008      	b.n	8006e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e52:	f7fe f957 	bl	8005104 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e144      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e64:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f0      	bne.n	8006e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 80a0 	beq.w	8006fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e82:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10f      	bne.n	8006eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	4a0e      	ldr	r2, [pc, #56]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <HAL_RCC_OscConfig+0x2ac>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <HAL_RCC_OscConfig+0x2b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d121      	bne.n	8006efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <HAL_RCC_OscConfig+0x2b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a07      	ldr	r2, [pc, #28]	; (8006edc <HAL_RCC_OscConfig+0x2b8>)
 8006ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ec6:	f7fe f91d 	bl	8005104 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ecc:	e011      	b.n	8006ef2 <HAL_RCC_OscConfig+0x2ce>
 8006ece:	bf00      	nop
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	42470000 	.word	0x42470000
 8006ed8:	42470e80 	.word	0x42470e80
 8006edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee0:	f7fe f910 	bl	8005104 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e0fd      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef2:	4b81      	ldr	r3, [pc, #516]	; (80070f8 <HAL_RCC_OscConfig+0x4d4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d106      	bne.n	8006f14 <HAL_RCC_OscConfig+0x2f0>
 8006f06:	4b7d      	ldr	r3, [pc, #500]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	4a7c      	ldr	r2, [pc, #496]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	6713      	str	r3, [r2, #112]	; 0x70
 8006f12:	e01c      	b.n	8006f4e <HAL_RCC_OscConfig+0x32a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	d10c      	bne.n	8006f36 <HAL_RCC_OscConfig+0x312>
 8006f1c:	4b77      	ldr	r3, [pc, #476]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	4a76      	ldr	r2, [pc, #472]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f22:	f043 0304 	orr.w	r3, r3, #4
 8006f26:	6713      	str	r3, [r2, #112]	; 0x70
 8006f28:	4b74      	ldr	r3, [pc, #464]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2c:	4a73      	ldr	r2, [pc, #460]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	6713      	str	r3, [r2, #112]	; 0x70
 8006f34:	e00b      	b.n	8006f4e <HAL_RCC_OscConfig+0x32a>
 8006f36:	4b71      	ldr	r3, [pc, #452]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	4a70      	ldr	r2, [pc, #448]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	6713      	str	r3, [r2, #112]	; 0x70
 8006f42:	4b6e      	ldr	r3, [pc, #440]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	4a6d      	ldr	r2, [pc, #436]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f48:	f023 0304 	bic.w	r3, r3, #4
 8006f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d015      	beq.n	8006f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f56:	f7fe f8d5 	bl	8005104 <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f5e:	f7fe f8d1 	bl	8005104 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e0bc      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f74:	4b61      	ldr	r3, [pc, #388]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0ee      	beq.n	8006f5e <HAL_RCC_OscConfig+0x33a>
 8006f80:	e014      	b.n	8006fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f82:	f7fe f8bf 	bl	8005104 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f88:	e00a      	b.n	8006fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f8a:	f7fe f8bb 	bl	8005104 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e0a6      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa0:	4b56      	ldr	r3, [pc, #344]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1ee      	bne.n	8006f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb2:	4b52      	ldr	r3, [pc, #328]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	4a51      	ldr	r2, [pc, #324]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8092 	beq.w	80070ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fc8:	4b4c      	ldr	r3, [pc, #304]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 030c 	and.w	r3, r3, #12
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d05c      	beq.n	800708e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d141      	bne.n	8007060 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fdc:	4b48      	ldr	r3, [pc, #288]	; (8007100 <HAL_RCC_OscConfig+0x4dc>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe2:	f7fe f88f 	bl	8005104 <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fea:	f7fe f88b 	bl	8005104 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e078      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffc:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f0      	bne.n	8006fea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	019b      	lsls	r3, r3, #6
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	3b01      	subs	r3, #1
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	061b      	lsls	r3, r3, #24
 800702c:	4933      	ldr	r1, [pc, #204]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 800702e:	4313      	orrs	r3, r2
 8007030:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007032:	4b33      	ldr	r3, [pc, #204]	; (8007100 <HAL_RCC_OscConfig+0x4dc>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007038:	f7fe f864 	bl	8005104 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007040:	f7fe f860 	bl	8005104 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e04d      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007052:	4b2a      	ldr	r3, [pc, #168]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x41c>
 800705e:	e045      	b.n	80070ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <HAL_RCC_OscConfig+0x4dc>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007066:	f7fe f84d 	bl	8005104 <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800706e:	f7fe f849 	bl	8005104 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e036      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007080:	4b1e      	ldr	r3, [pc, #120]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f0      	bne.n	800706e <HAL_RCC_OscConfig+0x44a>
 800708c:	e02e      	b.n	80070ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e029      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800709a:	4b18      	ldr	r3, [pc, #96]	; (80070fc <HAL_RCC_OscConfig+0x4d8>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d11c      	bne.n	80070e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d115      	bne.n	80070e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070c2:	4013      	ands	r3, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10d      	bne.n	80070e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d106      	bne.n	80070e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d001      	beq.n	80070ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40007000 	.word	0x40007000
 80070fc:	40023800 	.word	0x40023800
 8007100:	42470060 	.word	0x42470060

08007104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0cc      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007118:	4b68      	ldr	r3, [pc, #416]	; (80072bc <HAL_RCC_ClockConfig+0x1b8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d90c      	bls.n	8007140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007126:	4b65      	ldr	r3, [pc, #404]	; (80072bc <HAL_RCC_ClockConfig+0x1b8>)
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712e:	4b63      	ldr	r3, [pc, #396]	; (80072bc <HAL_RCC_ClockConfig+0x1b8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d001      	beq.n	8007140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e0b8      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d020      	beq.n	800718e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007158:	4b59      	ldr	r3, [pc, #356]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a58      	ldr	r2, [pc, #352]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007170:	4b53      	ldr	r3, [pc, #332]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a52      	ldr	r2, [pc, #328]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800717a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800717c:	4b50      	ldr	r3, [pc, #320]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	494d      	ldr	r1, [pc, #308]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d044      	beq.n	8007224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d107      	bne.n	80071b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a2:	4b47      	ldr	r3, [pc, #284]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d119      	bne.n	80071e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e07f      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d003      	beq.n	80071c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d107      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071c2:	4b3f      	ldr	r3, [pc, #252]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e06f      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d2:	4b3b      	ldr	r3, [pc, #236]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e067      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071e2:	4b37      	ldr	r3, [pc, #220]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f023 0203 	bic.w	r2, r3, #3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	4934      	ldr	r1, [pc, #208]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071f4:	f7fd ff86 	bl	8005104 <HAL_GetTick>
 80071f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071fa:	e00a      	b.n	8007212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071fc:	f7fd ff82 	bl	8005104 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	f241 3288 	movw	r2, #5000	; 0x1388
 800720a:	4293      	cmp	r3, r2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e04f      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007212:	4b2b      	ldr	r3, [pc, #172]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 020c 	and.w	r2, r3, #12
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	429a      	cmp	r2, r3
 8007222:	d1eb      	bne.n	80071fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007224:	4b25      	ldr	r3, [pc, #148]	; (80072bc <HAL_RCC_ClockConfig+0x1b8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d20c      	bcs.n	800724c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007232:	4b22      	ldr	r3, [pc, #136]	; (80072bc <HAL_RCC_ClockConfig+0x1b8>)
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	4b20      	ldr	r3, [pc, #128]	; (80072bc <HAL_RCC_ClockConfig+0x1b8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d001      	beq.n	800724c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e032      	b.n	80072b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d008      	beq.n	800726a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007258:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	4916      	ldr	r1, [pc, #88]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	4313      	orrs	r3, r2
 8007268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d009      	beq.n	800728a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007276:	4b12      	ldr	r3, [pc, #72]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	490e      	ldr	r1, [pc, #56]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	4313      	orrs	r3, r2
 8007288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800728a:	f000 f821 	bl	80072d0 <HAL_RCC_GetSysClockFreq>
 800728e:	4601      	mov	r1, r0
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	4a0a      	ldr	r2, [pc, #40]	; (80072c4 <HAL_RCC_ClockConfig+0x1c0>)
 800729c:	5cd3      	ldrb	r3, [r2, r3]
 800729e:	fa21 f303 	lsr.w	r3, r1, r3
 80072a2:	4a09      	ldr	r2, [pc, #36]	; (80072c8 <HAL_RCC_ClockConfig+0x1c4>)
 80072a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072a6:	4b09      	ldr	r3, [pc, #36]	; (80072cc <HAL_RCC_ClockConfig+0x1c8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fee6 	bl	800507c <HAL_InitTick>

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	40023c00 	.word	0x40023c00
 80072c0:	40023800 	.word	0x40023800
 80072c4:	0800db80 	.word	0x0800db80
 80072c8:	20000034 	.word	0x20000034
 80072cc:	20000038 	.word	0x20000038

080072d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	2300      	movs	r3, #0
 80072e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072e6:	4b50      	ldr	r3, [pc, #320]	; (8007428 <HAL_RCC_GetSysClockFreq+0x158>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d007      	beq.n	8007302 <HAL_RCC_GetSysClockFreq+0x32>
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d008      	beq.n	8007308 <HAL_RCC_GetSysClockFreq+0x38>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 808d 	bne.w	8007416 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b4b      	ldr	r3, [pc, #300]	; (800742c <HAL_RCC_GetSysClockFreq+0x15c>)
 80072fe:	60bb      	str	r3, [r7, #8]
       break;
 8007300:	e08c      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007302:	4b4b      	ldr	r3, [pc, #300]	; (8007430 <HAL_RCC_GetSysClockFreq+0x160>)
 8007304:	60bb      	str	r3, [r7, #8]
      break;
 8007306:	e089      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007308:	4b47      	ldr	r3, [pc, #284]	; (8007428 <HAL_RCC_GetSysClockFreq+0x158>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007310:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007312:	4b45      	ldr	r3, [pc, #276]	; (8007428 <HAL_RCC_GetSysClockFreq+0x158>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d023      	beq.n	8007366 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800731e:	4b42      	ldr	r3, [pc, #264]	; (8007428 <HAL_RCC_GetSysClockFreq+0x158>)
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	099b      	lsrs	r3, r3, #6
 8007324:	f04f 0400 	mov.w	r4, #0
 8007328:	f240 11ff 	movw	r1, #511	; 0x1ff
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	ea03 0501 	and.w	r5, r3, r1
 8007334:	ea04 0602 	and.w	r6, r4, r2
 8007338:	4a3d      	ldr	r2, [pc, #244]	; (8007430 <HAL_RCC_GetSysClockFreq+0x160>)
 800733a:	fb02 f106 	mul.w	r1, r2, r6
 800733e:	2200      	movs	r2, #0
 8007340:	fb02 f205 	mul.w	r2, r2, r5
 8007344:	440a      	add	r2, r1
 8007346:	493a      	ldr	r1, [pc, #232]	; (8007430 <HAL_RCC_GetSysClockFreq+0x160>)
 8007348:	fba5 0101 	umull	r0, r1, r5, r1
 800734c:	1853      	adds	r3, r2, r1
 800734e:	4619      	mov	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f04f 0400 	mov.w	r4, #0
 8007356:	461a      	mov	r2, r3
 8007358:	4623      	mov	r3, r4
 800735a:	f7f9 fc95 	bl	8000c88 <__aeabi_uldivmod>
 800735e:	4603      	mov	r3, r0
 8007360:	460c      	mov	r4, r1
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e049      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007366:	4b30      	ldr	r3, [pc, #192]	; (8007428 <HAL_RCC_GetSysClockFreq+0x158>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	099b      	lsrs	r3, r3, #6
 800736c:	f04f 0400 	mov.w	r4, #0
 8007370:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	ea03 0501 	and.w	r5, r3, r1
 800737c:	ea04 0602 	and.w	r6, r4, r2
 8007380:	4629      	mov	r1, r5
 8007382:	4632      	mov	r2, r6
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	f04f 0400 	mov.w	r4, #0
 800738c:	0154      	lsls	r4, r2, #5
 800738e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007392:	014b      	lsls	r3, r1, #5
 8007394:	4619      	mov	r1, r3
 8007396:	4622      	mov	r2, r4
 8007398:	1b49      	subs	r1, r1, r5
 800739a:	eb62 0206 	sbc.w	r2, r2, r6
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	f04f 0400 	mov.w	r4, #0
 80073a6:	0194      	lsls	r4, r2, #6
 80073a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80073ac:	018b      	lsls	r3, r1, #6
 80073ae:	1a5b      	subs	r3, r3, r1
 80073b0:	eb64 0402 	sbc.w	r4, r4, r2
 80073b4:	f04f 0100 	mov.w	r1, #0
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	00e2      	lsls	r2, r4, #3
 80073be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80073c2:	00d9      	lsls	r1, r3, #3
 80073c4:	460b      	mov	r3, r1
 80073c6:	4614      	mov	r4, r2
 80073c8:	195b      	adds	r3, r3, r5
 80073ca:	eb44 0406 	adc.w	r4, r4, r6
 80073ce:	f04f 0100 	mov.w	r1, #0
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	02a2      	lsls	r2, r4, #10
 80073d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80073dc:	0299      	lsls	r1, r3, #10
 80073de:	460b      	mov	r3, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	4621      	mov	r1, r4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f04f 0400 	mov.w	r4, #0
 80073ec:	461a      	mov	r2, r3
 80073ee:	4623      	mov	r3, r4
 80073f0:	f7f9 fc4a 	bl	8000c88 <__aeabi_uldivmod>
 80073f4:	4603      	mov	r3, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073fa:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <HAL_RCC_GetSysClockFreq+0x158>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	3301      	adds	r3, #1
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007412:	60bb      	str	r3, [r7, #8]
      break;
 8007414:	e002      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007418:	60bb      	str	r3, [r7, #8]
      break;
 800741a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800741c:	68bb      	ldr	r3, [r7, #8]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007426:	bf00      	nop
 8007428:	40023800 	.word	0x40023800
 800742c:	00f42400 	.word	0x00f42400
 8007430:	00bebc20 	.word	0x00bebc20

08007434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007438:	4b03      	ldr	r3, [pc, #12]	; (8007448 <HAL_RCC_GetHCLKFreq+0x14>)
 800743a:	681b      	ldr	r3, [r3, #0]
}
 800743c:	4618      	mov	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20000034 	.word	0x20000034

0800744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007450:	f7ff fff0 	bl	8007434 <HAL_RCC_GetHCLKFreq>
 8007454:	4601      	mov	r1, r0
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	0a9b      	lsrs	r3, r3, #10
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4a03      	ldr	r2, [pc, #12]	; (8007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007462:	5cd3      	ldrb	r3, [r2, r3]
 8007464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40023800 	.word	0x40023800
 8007470:	0800db90 	.word	0x0800db90

08007474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007478:	f7ff ffdc 	bl	8007434 <HAL_RCC_GetHCLKFreq>
 800747c:	4601      	mov	r1, r0
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	0b5b      	lsrs	r3, r3, #13
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	4a03      	ldr	r2, [pc, #12]	; (8007498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800748a:	5cd3      	ldrb	r3, [r2, r3]
 800748c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40023800 	.word	0x40023800
 8007498:	0800db90 	.word	0x0800db90

0800749c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e056      	b.n	800755c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fd fa67 	bl	800499c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	ea42 0103 	orr.w	r1, r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 0104 	and.w	r1, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69da      	ldr	r2, [r3, #28]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800757e:	2b01      	cmp	r3, #1
 8007580:	d101      	bne.n	8007586 <HAL_SPI_Transmit+0x22>
 8007582:	2302      	movs	r3, #2
 8007584:	e11e      	b.n	80077c4 <HAL_SPI_Transmit+0x260>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800758e:	f7fd fdb9 	bl	8005104 <HAL_GetTick>
 8007592:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007594:	88fb      	ldrh	r3, [r7, #6]
 8007596:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d002      	beq.n	80075aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075a4:	2302      	movs	r3, #2
 80075a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075a8:	e103      	b.n	80077b2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_SPI_Transmit+0x52>
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075ba:	e0fa      	b.n	80077b2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2203      	movs	r2, #3
 80075c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88fa      	ldrh	r2, [r7, #6]
 80075d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	88fa      	ldrh	r2, [r7, #6]
 80075da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007602:	d107      	bne.n	8007614 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007612:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761e:	2b40      	cmp	r3, #64	; 0x40
 8007620:	d007      	beq.n	8007632 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007630:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763a:	d14b      	bne.n	80076d4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SPI_Transmit+0xe6>
 8007644:	8afb      	ldrh	r3, [r7, #22]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d13e      	bne.n	80076c8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800766e:	e02b      	b.n	80076c8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d112      	bne.n	80076a4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	881a      	ldrh	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80076a2:	e011      	b.n	80076c8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a4:	f7fd fd2e 	bl	8005104 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d803      	bhi.n	80076bc <HAL_SPI_Transmit+0x158>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ba:	d102      	bne.n	80076c2 <HAL_SPI_Transmit+0x15e>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076c6:	e074      	b.n	80077b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1ce      	bne.n	8007670 <HAL_SPI_Transmit+0x10c>
 80076d2:	e04c      	b.n	800776e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_SPI_Transmit+0x17e>
 80076dc:	8afb      	ldrh	r3, [r7, #22]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d140      	bne.n	8007764 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007708:	e02c      	b.n	8007764 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b02      	cmp	r3, #2
 8007716:	d113      	bne.n	8007740 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	86da      	strh	r2, [r3, #54]	; 0x36
 800773e:	e011      	b.n	8007764 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007740:	f7fd fce0 	bl	8005104 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d803      	bhi.n	8007758 <HAL_SPI_Transmit+0x1f4>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d102      	bne.n	800775e <HAL_SPI_Transmit+0x1fa>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007762:	e026      	b.n	80077b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1cd      	bne.n	800770a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fba4 	bl	8007ec0 <SPI_EndRxTxTransaction>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e000      	b.n	80077b2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80077b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e8:	d112      	bne.n	8007810 <HAL_SPI_Receive+0x44>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10e      	bne.n	8007810 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2204      	movs	r2, #4
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f8e9 	bl	80079de <HAL_SPI_TransmitReceive>
 800780c:	4603      	mov	r3, r0
 800780e:	e0e2      	b.n	80079d6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_SPI_Receive+0x52>
 800781a:	2302      	movs	r3, #2
 800781c:	e0db      	b.n	80079d6 <HAL_SPI_Receive+0x20a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007826:	f7fd fc6d 	bl	8005104 <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	d002      	beq.n	800783e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007838:	2302      	movs	r3, #2
 800783a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800783c:	e0c2      	b.n	80079c4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_SPI_Receive+0x7e>
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800784e:	e0b9      	b.n	80079c4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2204      	movs	r2, #4
 8007854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007896:	d107      	bne.n	80078a8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d007      	beq.n	80078c6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d162      	bne.n	8007994 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078ce:	e02e      	b.n	800792e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d115      	bne.n	800790a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f103 020c 	add.w	r2, r3, #12
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007908:	e011      	b.n	800792e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800790a:	f7fd fbfb 	bl	8005104 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d803      	bhi.n	8007922 <HAL_SPI_Receive+0x156>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d102      	bne.n	8007928 <HAL_SPI_Receive+0x15c>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800792c:	e04a      	b.n	80079c4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1cb      	bne.n	80078d0 <HAL_SPI_Receive+0x104>
 8007938:	e031      	b.n	800799e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b01      	cmp	r3, #1
 8007946:	d113      	bne.n	8007970 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	b292      	uxth	r2, r2
 8007954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800796e:	e011      	b.n	8007994 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007970:	f7fd fbc8 	bl	8005104 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d803      	bhi.n	8007988 <HAL_SPI_Receive+0x1bc>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d102      	bne.n	800798e <HAL_SPI_Receive+0x1c2>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007992:	e017      	b.n	80079c4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1cd      	bne.n	800793a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fa27 	bl	8007df6 <SPI_EndRxTransaction>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2220      	movs	r2, #32
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
 80079c0:	e000      	b.n	80079c4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80079c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b08c      	sub	sp, #48	; 0x30
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079ec:	2301      	movs	r3, #1
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_SPI_TransmitReceive+0x26>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e18a      	b.n	8007d1a <HAL_SPI_TransmitReceive+0x33c>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a0c:	f7fd fb7a 	bl	8005104 <HAL_GetTick>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a22:	887b      	ldrh	r3, [r7, #2]
 8007a24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d00f      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x70>
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a34:	d107      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x68>
 8007a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d003      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a46:	2302      	movs	r3, #2
 8007a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a4c:	e15b      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x82>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x82>
 8007a5a:	887b      	ldrh	r3, [r7, #2]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a66:	e14e      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d003      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2205      	movs	r2, #5
 8007a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	887a      	ldrh	r2, [r7, #2]
 8007a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	887a      	ldrh	r2, [r7, #2]
 8007a92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	887a      	ldrh	r2, [r7, #2]
 8007a9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abc:	2b40      	cmp	r3, #64	; 0x40
 8007abe:	d007      	beq.n	8007ad0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad8:	d178      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x10a>
 8007ae2:	8b7b      	ldrh	r3, [r7, #26]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d166      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	881a      	ldrh	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	1c9a      	adds	r2, r3, #2
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b0c:	e053      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d11b      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x176>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x176>
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d113      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	881a      	ldrh	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	1c9a      	adds	r2, r3, #2
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d119      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x1b8>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d014      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	b292      	uxth	r2, r2
 8007b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	1c9a      	adds	r2, r3, #2
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b92:	2301      	movs	r3, #1
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b96:	f7fd fab5 	bl	8005104 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d807      	bhi.n	8007bb6 <HAL_SPI_TransmitReceive+0x1d8>
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bac:	d003      	beq.n	8007bb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bb4:	e0a7      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1a6      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x130>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1a1      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x130>
 8007bca:	e07c      	b.n	8007cc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <HAL_SPI_TransmitReceive+0x1fc>
 8007bd4:	8b7b      	ldrh	r3, [r7, #26]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d16b      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c00:	e057      	b.n	8007cb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d11c      	bne.n	8007c4a <HAL_SPI_TransmitReceive+0x26c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d017      	beq.n	8007c4a <HAL_SPI_TransmitReceive+0x26c>
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d114      	bne.n	8007c4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d119      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x2ae>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d014      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c8c:	f7fd fa3a 	bl	8005104 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d803      	bhi.n	8007ca4 <HAL_SPI_TransmitReceive+0x2c6>
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d102      	bne.n	8007caa <HAL_SPI_TransmitReceive+0x2cc>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cb0:	e029      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1a2      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x224>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d19d      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f8f8 	bl	8007ec0 <SPI_EndRxTxTransaction>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d006      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ce2:	e010      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10b      	bne.n	8007d04 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cec:	2300      	movs	r3, #0
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	e000      	b.n	8007d06 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3730      	adds	r7, #48	; 0x30
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d32:	e04c      	b.n	8007dce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d048      	beq.n	8007dce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007d3c:	f7fd f9e2 	bl	8005104 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d902      	bls.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d13d      	bne.n	8007dce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d6a:	d111      	bne.n	8007d90 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d74:	d004      	beq.n	8007d80 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7e:	d107      	bne.n	8007d90 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d10f      	bne.n	8007dba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e00f      	b.n	8007dee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d1a3      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b086      	sub	sp, #24
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e0a:	d111      	bne.n	8007e30 <SPI_EndRxTransaction+0x3a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e14:	d004      	beq.n	8007e20 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1e:	d107      	bne.n	8007e30 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e38:	d12a      	bne.n	8007e90 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e42:	d012      	beq.n	8007e6a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff ff67 	bl	8007d22 <SPI_WaitFlagStateUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d02d      	beq.n	8007eb6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e026      	b.n	8007eb8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	2101      	movs	r1, #1
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff ff54 	bl	8007d22 <SPI_WaitFlagStateUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01a      	beq.n	8007eb6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e013      	b.n	8007eb8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	2101      	movs	r1, #1
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff ff41 	bl	8007d22 <SPI_WaitFlagStateUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e000      	b.n	8007eb8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ecc:	4b1b      	ldr	r3, [pc, #108]	; (8007f3c <SPI_EndRxTxTransaction+0x7c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <SPI_EndRxTxTransaction+0x80>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	0d5b      	lsrs	r3, r3, #21
 8007ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eea:	d112      	bne.n	8007f12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2180      	movs	r1, #128	; 0x80
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff ff13 	bl	8007d22 <SPI_WaitFlagStateUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f06:	f043 0220 	orr.w	r2, r3, #32
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e00f      	b.n	8007f32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f28:	2b80      	cmp	r3, #128	; 0x80
 8007f2a:	d0f2      	beq.n	8007f12 <SPI_EndRxTxTransaction+0x52>
 8007f2c:	e000      	b.n	8007f30 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f2e:	bf00      	nop
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000034 	.word	0x20000034
 8007f40:	165e9f81 	.word	0x165e9f81

08007f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e01d      	b.n	8007f92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fc fe12 	bl	8004b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f000 fb56 	bl	8008634 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b06      	cmp	r3, #6
 8007fc2:	d007      	beq.n	8007fd4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e01d      	b.n	8008030 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d106      	bne.n	800800e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7fc fd0f 	bl	8004a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f000 fb07 	bl	8008634 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2201      	movs	r2, #1
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fd42 	bl	8008ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a15      	ldr	r2, [pc, #84]	; (80080ac <HAL_TIM_PWM_Start+0x74>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_TIM_PWM_Start+0x2c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a14      	ldr	r2, [pc, #80]	; (80080b0 <HAL_TIM_PWM_Start+0x78>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d101      	bne.n	8008068 <HAL_TIM_PWM_Start+0x30>
 8008064:	2301      	movs	r3, #1
 8008066:	e000      	b.n	800806a <HAL_TIM_PWM_Start+0x32>
 8008068:	2300      	movs	r3, #0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800807c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b06      	cmp	r3, #6
 800808e:	d007      	beq.n	80080a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40010400 	.word	0x40010400

080080b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e083      	b.n	80081d0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7fc fcdd 	bl	8004a9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f8:	f023 0307 	bic.w	r3, r3, #7
 80080fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f000 fa93 	bl	8008634 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	4313      	orrs	r3, r2
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008154:	f023 030c 	bic.w	r3, r3, #12
 8008158:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	4313      	orrs	r3, r2
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	011a      	lsls	r2, r3, #4
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	031b      	lsls	r3, r3, #12
 8008184:	4313      	orrs	r3, r2
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800819a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	4313      	orrs	r3, r2
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_TIM_Encoder_Start+0x16>
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d008      	beq.n	80081fe <HAL_TIM_Encoder_Start+0x26>
 80081ec:	e00f      	b.n	800820e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2201      	movs	r2, #1
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fc6c 	bl	8008ad4 <TIM_CCxChannelCmd>
      break;
 80081fc:	e016      	b.n	800822c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2201      	movs	r2, #1
 8008204:	2104      	movs	r1, #4
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fc64 	bl	8008ad4 <TIM_CCxChannelCmd>
      break;
 800820c:	e00e      	b.n	800822c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2201      	movs	r2, #1
 8008214:	2100      	movs	r1, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fc5c 	bl	8008ad4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2201      	movs	r2, #1
 8008222:	2104      	movs	r1, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fc55 	bl	8008ad4 <TIM_CCxChannelCmd>
      break;
 800822a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b02      	cmp	r3, #2
 800825a:	d122      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b02      	cmp	r3, #2
 8008268:	d11b      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f06f 0202 	mvn.w	r2, #2
 8008272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9b5 	bl	80085f8 <HAL_TIM_IC_CaptureCallback>
 800828e:	e005      	b.n	800829c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9a7 	bl	80085e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f9b8 	bl	800860c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d122      	bne.n	80082f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d11b      	bne.n	80082f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f06f 0204 	mvn.w	r2, #4
 80082c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f98b 	bl	80085f8 <HAL_TIM_IC_CaptureCallback>
 80082e2:	e005      	b.n	80082f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f97d 	bl	80085e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f98e 	bl	800860c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b08      	cmp	r3, #8
 8008302:	d122      	bne.n	800834a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b08      	cmp	r3, #8
 8008310:	d11b      	bne.n	800834a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f06f 0208 	mvn.w	r2, #8
 800831a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2204      	movs	r2, #4
 8008320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f961 	bl	80085f8 <HAL_TIM_IC_CaptureCallback>
 8008336:	e005      	b.n	8008344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f953 	bl	80085e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f964 	bl	800860c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	2b10      	cmp	r3, #16
 8008356:	d122      	bne.n	800839e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b10      	cmp	r3, #16
 8008364:	d11b      	bne.n	800839e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f06f 0210 	mvn.w	r2, #16
 800836e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2208      	movs	r2, #8
 8008374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f937 	bl	80085f8 <HAL_TIM_IC_CaptureCallback>
 800838a:	e005      	b.n	8008398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f929 	bl	80085e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f93a 	bl	800860c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d10e      	bne.n	80083ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d107      	bne.n	80083ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f06f 0201 	mvn.w	r2, #1
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7fa fec5 	bl	8003154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d4:	2b80      	cmp	r3, #128	; 0x80
 80083d6:	d10e      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d107      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc6d 	bl	8008cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d10e      	bne.n	8008422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	d107      	bne.n	8008422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800841a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8ff 	bl	8008620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b20      	cmp	r3, #32
 800842e:	d10e      	bne.n	800844e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b20      	cmp	r3, #32
 800843c:	d107      	bne.n	800844e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f06f 0220 	mvn.w	r2, #32
 8008446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc37 	bl	8008cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800846e:	2302      	movs	r3, #2
 8008470:	e0b4      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2202      	movs	r2, #2
 800847e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b0c      	cmp	r3, #12
 8008486:	f200 809f 	bhi.w	80085c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084c5 	.word	0x080084c5
 8008494:	080085c9 	.word	0x080085c9
 8008498:	080085c9 	.word	0x080085c9
 800849c:	080085c9 	.word	0x080085c9
 80084a0:	08008505 	.word	0x08008505
 80084a4:	080085c9 	.word	0x080085c9
 80084a8:	080085c9 	.word	0x080085c9
 80084ac:	080085c9 	.word	0x080085c9
 80084b0:	08008547 	.word	0x08008547
 80084b4:	080085c9 	.word	0x080085c9
 80084b8:	080085c9 	.word	0x080085c9
 80084bc:	080085c9 	.word	0x080085c9
 80084c0:	08008587 	.word	0x08008587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f952 	bl	8008774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0208 	orr.w	r2, r2, #8
 80084de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0204 	bic.w	r2, r2, #4
 80084ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6999      	ldr	r1, [r3, #24]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	619a      	str	r2, [r3, #24]
      break;
 8008502:	e062      	b.n	80085ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f9a2 	bl	8008854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800851e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800852e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6999      	ldr	r1, [r3, #24]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	021a      	lsls	r2, r3, #8
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	619a      	str	r2, [r3, #24]
      break;
 8008544:	e041      	b.n	80085ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	4618      	mov	r0, r3
 800854e:	f000 f9f7 	bl	8008940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0208 	orr.w	r2, r2, #8
 8008560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0204 	bic.w	r2, r2, #4
 8008570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69d9      	ldr	r1, [r3, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	61da      	str	r2, [r3, #28]
      break;
 8008584:	e021      	b.n	80085ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fa4b 	bl	8008a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69d9      	ldr	r1, [r3, #28]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	021a      	lsls	r2, r3, #8
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	61da      	str	r2, [r3, #28]
      break;
 80085c6:	e000      	b.n	80085ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80085c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a40      	ldr	r2, [pc, #256]	; (8008748 <TIM_Base_SetConfig+0x114>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <TIM_Base_SetConfig+0x40>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008652:	d00f      	beq.n	8008674 <TIM_Base_SetConfig+0x40>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a3d      	ldr	r2, [pc, #244]	; (800874c <TIM_Base_SetConfig+0x118>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00b      	beq.n	8008674 <TIM_Base_SetConfig+0x40>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a3c      	ldr	r2, [pc, #240]	; (8008750 <TIM_Base_SetConfig+0x11c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d007      	beq.n	8008674 <TIM_Base_SetConfig+0x40>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a3b      	ldr	r2, [pc, #236]	; (8008754 <TIM_Base_SetConfig+0x120>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d003      	beq.n	8008674 <TIM_Base_SetConfig+0x40>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a3a      	ldr	r2, [pc, #232]	; (8008758 <TIM_Base_SetConfig+0x124>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d108      	bne.n	8008686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a2f      	ldr	r2, [pc, #188]	; (8008748 <TIM_Base_SetConfig+0x114>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d02b      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008694:	d027      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a2c      	ldr	r2, [pc, #176]	; (800874c <TIM_Base_SetConfig+0x118>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d023      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a2b      	ldr	r2, [pc, #172]	; (8008750 <TIM_Base_SetConfig+0x11c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01f      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a2a      	ldr	r2, [pc, #168]	; (8008754 <TIM_Base_SetConfig+0x120>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d01b      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a29      	ldr	r2, [pc, #164]	; (8008758 <TIM_Base_SetConfig+0x124>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d017      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a28      	ldr	r2, [pc, #160]	; (800875c <TIM_Base_SetConfig+0x128>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a27      	ldr	r2, [pc, #156]	; (8008760 <TIM_Base_SetConfig+0x12c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00f      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a26      	ldr	r2, [pc, #152]	; (8008764 <TIM_Base_SetConfig+0x130>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00b      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a25      	ldr	r2, [pc, #148]	; (8008768 <TIM_Base_SetConfig+0x134>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d007      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a24      	ldr	r2, [pc, #144]	; (800876c <TIM_Base_SetConfig+0x138>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_Base_SetConfig+0xb2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a23      	ldr	r2, [pc, #140]	; (8008770 <TIM_Base_SetConfig+0x13c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d108      	bne.n	80086f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a0a      	ldr	r2, [pc, #40]	; (8008748 <TIM_Base_SetConfig+0x114>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d003      	beq.n	800872c <TIM_Base_SetConfig+0xf8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a0c      	ldr	r2, [pc, #48]	; (8008758 <TIM_Base_SetConfig+0x124>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d103      	bne.n	8008734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	615a      	str	r2, [r3, #20]
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400
 8008764:	40014800 	.word	0x40014800
 8008768:	40001800 	.word	0x40001800
 800876c:	40001c00 	.word	0x40001c00
 8008770:	40002000 	.word	0x40002000

08008774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	f023 0201 	bic.w	r2, r3, #1
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f023 0302 	bic.w	r3, r3, #2
 80087bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a20      	ldr	r2, [pc, #128]	; (800884c <TIM_OC1_SetConfig+0xd8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_OC1_SetConfig+0x64>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a1f      	ldr	r2, [pc, #124]	; (8008850 <TIM_OC1_SetConfig+0xdc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d10c      	bne.n	80087f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f023 0308 	bic.w	r3, r3, #8
 80087de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a15      	ldr	r2, [pc, #84]	; (800884c <TIM_OC1_SetConfig+0xd8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <TIM_OC1_SetConfig+0x8e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <TIM_OC1_SetConfig+0xdc>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d111      	bne.n	8008826 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400

08008854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f023 0210 	bic.w	r2, r3, #16
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800888a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	021b      	lsls	r3, r3, #8
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f023 0320 	bic.w	r3, r3, #32
 800889e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a22      	ldr	r2, [pc, #136]	; (8008938 <TIM_OC2_SetConfig+0xe4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC2_SetConfig+0x68>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a21      	ldr	r2, [pc, #132]	; (800893c <TIM_OC2_SetConfig+0xe8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d10d      	bne.n	80088d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a17      	ldr	r2, [pc, #92]	; (8008938 <TIM_OC2_SetConfig+0xe4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_OC2_SetConfig+0x94>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a16      	ldr	r2, [pc, #88]	; (800893c <TIM_OC2_SetConfig+0xe8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d113      	bne.n	8008910 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4313      	orrs	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	621a      	str	r2, [r3, #32]
}
 800892a:	bf00      	nop
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40010000 	.word	0x40010000
 800893c:	40010400 	.word	0x40010400

08008940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a21      	ldr	r2, [pc, #132]	; (8008a20 <TIM_OC3_SetConfig+0xe0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_OC3_SetConfig+0x66>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a20      	ldr	r2, [pc, #128]	; (8008a24 <TIM_OC3_SetConfig+0xe4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d10d      	bne.n	80089c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <TIM_OC3_SetConfig+0xe0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC3_SetConfig+0x92>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <TIM_OC3_SetConfig+0xe4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d113      	bne.n	80089fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	621a      	str	r2, [r3, #32]
}
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40010400 	.word	0x40010400

08008a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	031b      	lsls	r3, r3, #12
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a12      	ldr	r2, [pc, #72]	; (8008acc <TIM_OC4_SetConfig+0xa4>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_OC4_SetConfig+0x68>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a11      	ldr	r2, [pc, #68]	; (8008ad0 <TIM_OC4_SetConfig+0xa8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d109      	bne.n	8008aa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	019b      	lsls	r3, r3, #6
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	621a      	str	r2, [r3, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40010400 	.word	0x40010400

08008ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a1a      	ldr	r2, [r3, #32]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	43db      	mvns	r3, r3
 8008af6:	401a      	ands	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a1a      	ldr	r2, [r3, #32]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e05a      	b.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d022      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b84:	d01d      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a1d      	ldr	r2, [pc, #116]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d018      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1b      	ldr	r2, [pc, #108]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d013      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1a      	ldr	r2, [pc, #104]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a18      	ldr	r2, [pc, #96]	; (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d009      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a17      	ldr	r2, [pc, #92]	; (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d004      	beq.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a15      	ldr	r2, [pc, #84]	; (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d10c      	bne.n	8008bdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40000400 	.word	0x40000400
 8008c04:	40000800 	.word	0x40000800
 8008c08:	40000c00 	.word	0x40000c00
 8008c0c:	40010400 	.word	0x40010400
 8008c10:	40014000 	.word	0x40014000
 8008c14:	40001800 	.word	0x40001800

08008c18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e03d      	b.n	8008cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e03f      	b.n	8008d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fb ffec 	bl	8004ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2224      	movs	r2, #36	; 0x24
 8008d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f90b 	bl	8008f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	691a      	ldr	r2, [r3, #16]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695a      	ldr	r2, [r3, #20]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b088      	sub	sp, #32
 8008d82:	af02      	add	r7, sp, #8
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	603b      	str	r3, [r7, #0]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	f040 8083 	bne.w	8008ea6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_UART_Transmit+0x2e>
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e07b      	b.n	8008ea8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_UART_Transmit+0x40>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e074      	b.n	8008ea8 <HAL_UART_Transmit+0x12a>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2221      	movs	r2, #33	; 0x21
 8008dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008dd4:	f7fc f996 	bl	8005104 <HAL_GetTick>
 8008dd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	88fa      	ldrh	r2, [r7, #6]
 8008dde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	88fa      	ldrh	r2, [r7, #6]
 8008de4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008dee:	e042      	b.n	8008e76 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e06:	d122      	bne.n	8008e4e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2180      	movs	r1, #128	; 0x80
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f84c 	bl	8008eb0 <UART_WaitOnFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e042      	b.n	8008ea8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d103      	bne.n	8008e46 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	3302      	adds	r3, #2
 8008e42:	60bb      	str	r3, [r7, #8]
 8008e44:	e017      	b.n	8008e76 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60bb      	str	r3, [r7, #8]
 8008e4c:	e013      	b.n	8008e76 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2200      	movs	r2, #0
 8008e56:	2180      	movs	r1, #128	; 0x80
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 f829 	bl	8008eb0 <UART_WaitOnFlagUntilTimeout>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e01f      	b.n	8008ea8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	60ba      	str	r2, [r7, #8]
 8008e6e:	781a      	ldrb	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1b7      	bne.n	8008df0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	2140      	movs	r1, #64	; 0x40
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 f810 	bl	8008eb0 <UART_WaitOnFlagUntilTimeout>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e006      	b.n	8008ea8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e000      	b.n	8008ea8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008ea6:	2302      	movs	r3, #2
  }
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec0:	e02c      	b.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d028      	beq.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d007      	beq.n	8008ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ed0:	f7fc f918 	bl	8005104 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d21d      	bcs.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008eee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695a      	ldr	r2, [r3, #20]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0201 	bic.w	r2, r2, #1
 8008efe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e00f      	b.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d0c3      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f86:	f023 030c 	bic.w	r3, r3, #12
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	430b      	orrs	r3, r1
 8008f92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fb2:	f040 818b 	bne.w	80092cc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4ac1      	ldr	r2, [pc, #772]	; (80092c0 <UART_SetConfig+0x37c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d005      	beq.n	8008fcc <UART_SetConfig+0x88>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4abf      	ldr	r2, [pc, #764]	; (80092c4 <UART_SetConfig+0x380>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	f040 80bd 	bne.w	8009146 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fcc:	f7fe fa52 	bl	8007474 <HAL_RCC_GetPCLK2Freq>
 8008fd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	461d      	mov	r5, r3
 8008fd6:	f04f 0600 	mov.w	r6, #0
 8008fda:	46a8      	mov	r8, r5
 8008fdc:	46b1      	mov	r9, r6
 8008fde:	eb18 0308 	adds.w	r3, r8, r8
 8008fe2:	eb49 0409 	adc.w	r4, r9, r9
 8008fe6:	4698      	mov	r8, r3
 8008fe8:	46a1      	mov	r9, r4
 8008fea:	eb18 0805 	adds.w	r8, r8, r5
 8008fee:	eb49 0906 	adc.w	r9, r9, r6
 8008ff2:	f04f 0100 	mov.w	r1, #0
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ffe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009002:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009006:	4688      	mov	r8, r1
 8009008:	4691      	mov	r9, r2
 800900a:	eb18 0005 	adds.w	r0, r8, r5
 800900e:	eb49 0106 	adc.w	r1, r9, r6
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	461d      	mov	r5, r3
 8009018:	f04f 0600 	mov.w	r6, #0
 800901c:	196b      	adds	r3, r5, r5
 800901e:	eb46 0406 	adc.w	r4, r6, r6
 8009022:	461a      	mov	r2, r3
 8009024:	4623      	mov	r3, r4
 8009026:	f7f7 fe2f 	bl	8000c88 <__aeabi_uldivmod>
 800902a:	4603      	mov	r3, r0
 800902c:	460c      	mov	r4, r1
 800902e:	461a      	mov	r2, r3
 8009030:	4ba5      	ldr	r3, [pc, #660]	; (80092c8 <UART_SetConfig+0x384>)
 8009032:	fba3 2302 	umull	r2, r3, r3, r2
 8009036:	095b      	lsrs	r3, r3, #5
 8009038:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	461d      	mov	r5, r3
 8009040:	f04f 0600 	mov.w	r6, #0
 8009044:	46a9      	mov	r9, r5
 8009046:	46b2      	mov	sl, r6
 8009048:	eb19 0309 	adds.w	r3, r9, r9
 800904c:	eb4a 040a 	adc.w	r4, sl, sl
 8009050:	4699      	mov	r9, r3
 8009052:	46a2      	mov	sl, r4
 8009054:	eb19 0905 	adds.w	r9, r9, r5
 8009058:	eb4a 0a06 	adc.w	sl, sl, r6
 800905c:	f04f 0100 	mov.w	r1, #0
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009068:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800906c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009070:	4689      	mov	r9, r1
 8009072:	4692      	mov	sl, r2
 8009074:	eb19 0005 	adds.w	r0, r9, r5
 8009078:	eb4a 0106 	adc.w	r1, sl, r6
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	461d      	mov	r5, r3
 8009082:	f04f 0600 	mov.w	r6, #0
 8009086:	196b      	adds	r3, r5, r5
 8009088:	eb46 0406 	adc.w	r4, r6, r6
 800908c:	461a      	mov	r2, r3
 800908e:	4623      	mov	r3, r4
 8009090:	f7f7 fdfa 	bl	8000c88 <__aeabi_uldivmod>
 8009094:	4603      	mov	r3, r0
 8009096:	460c      	mov	r4, r1
 8009098:	461a      	mov	r2, r3
 800909a:	4b8b      	ldr	r3, [pc, #556]	; (80092c8 <UART_SetConfig+0x384>)
 800909c:	fba3 1302 	umull	r1, r3, r3, r2
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	2164      	movs	r1, #100	; 0x64
 80090a4:	fb01 f303 	mul.w	r3, r1, r3
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	3332      	adds	r3, #50	; 0x32
 80090ae:	4a86      	ldr	r2, [pc, #536]	; (80092c8 <UART_SetConfig+0x384>)
 80090b0:	fba2 2303 	umull	r2, r3, r2, r3
 80090b4:	095b      	lsrs	r3, r3, #5
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090bc:	4498      	add	r8, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	461d      	mov	r5, r3
 80090c2:	f04f 0600 	mov.w	r6, #0
 80090c6:	46a9      	mov	r9, r5
 80090c8:	46b2      	mov	sl, r6
 80090ca:	eb19 0309 	adds.w	r3, r9, r9
 80090ce:	eb4a 040a 	adc.w	r4, sl, sl
 80090d2:	4699      	mov	r9, r3
 80090d4:	46a2      	mov	sl, r4
 80090d6:	eb19 0905 	adds.w	r9, r9, r5
 80090da:	eb4a 0a06 	adc.w	sl, sl, r6
 80090de:	f04f 0100 	mov.w	r1, #0
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090f2:	4689      	mov	r9, r1
 80090f4:	4692      	mov	sl, r2
 80090f6:	eb19 0005 	adds.w	r0, r9, r5
 80090fa:	eb4a 0106 	adc.w	r1, sl, r6
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	461d      	mov	r5, r3
 8009104:	f04f 0600 	mov.w	r6, #0
 8009108:	196b      	adds	r3, r5, r5
 800910a:	eb46 0406 	adc.w	r4, r6, r6
 800910e:	461a      	mov	r2, r3
 8009110:	4623      	mov	r3, r4
 8009112:	f7f7 fdb9 	bl	8000c88 <__aeabi_uldivmod>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	461a      	mov	r2, r3
 800911c:	4b6a      	ldr	r3, [pc, #424]	; (80092c8 <UART_SetConfig+0x384>)
 800911e:	fba3 1302 	umull	r1, r3, r3, r2
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	2164      	movs	r1, #100	; 0x64
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	3332      	adds	r3, #50	; 0x32
 8009130:	4a65      	ldr	r2, [pc, #404]	; (80092c8 <UART_SetConfig+0x384>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	f003 0207 	and.w	r2, r3, #7
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4442      	add	r2, r8
 8009142:	609a      	str	r2, [r3, #8]
 8009144:	e26f      	b.n	8009626 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009146:	f7fe f981 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800914a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	461d      	mov	r5, r3
 8009150:	f04f 0600 	mov.w	r6, #0
 8009154:	46a8      	mov	r8, r5
 8009156:	46b1      	mov	r9, r6
 8009158:	eb18 0308 	adds.w	r3, r8, r8
 800915c:	eb49 0409 	adc.w	r4, r9, r9
 8009160:	4698      	mov	r8, r3
 8009162:	46a1      	mov	r9, r4
 8009164:	eb18 0805 	adds.w	r8, r8, r5
 8009168:	eb49 0906 	adc.w	r9, r9, r6
 800916c:	f04f 0100 	mov.w	r1, #0
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009178:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800917c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009180:	4688      	mov	r8, r1
 8009182:	4691      	mov	r9, r2
 8009184:	eb18 0005 	adds.w	r0, r8, r5
 8009188:	eb49 0106 	adc.w	r1, r9, r6
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	461d      	mov	r5, r3
 8009192:	f04f 0600 	mov.w	r6, #0
 8009196:	196b      	adds	r3, r5, r5
 8009198:	eb46 0406 	adc.w	r4, r6, r6
 800919c:	461a      	mov	r2, r3
 800919e:	4623      	mov	r3, r4
 80091a0:	f7f7 fd72 	bl	8000c88 <__aeabi_uldivmod>
 80091a4:	4603      	mov	r3, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	461a      	mov	r2, r3
 80091aa:	4b47      	ldr	r3, [pc, #284]	; (80092c8 <UART_SetConfig+0x384>)
 80091ac:	fba3 2302 	umull	r2, r3, r3, r2
 80091b0:	095b      	lsrs	r3, r3, #5
 80091b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	461d      	mov	r5, r3
 80091ba:	f04f 0600 	mov.w	r6, #0
 80091be:	46a9      	mov	r9, r5
 80091c0:	46b2      	mov	sl, r6
 80091c2:	eb19 0309 	adds.w	r3, r9, r9
 80091c6:	eb4a 040a 	adc.w	r4, sl, sl
 80091ca:	4699      	mov	r9, r3
 80091cc:	46a2      	mov	sl, r4
 80091ce:	eb19 0905 	adds.w	r9, r9, r5
 80091d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80091d6:	f04f 0100 	mov.w	r1, #0
 80091da:	f04f 0200 	mov.w	r2, #0
 80091de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091ea:	4689      	mov	r9, r1
 80091ec:	4692      	mov	sl, r2
 80091ee:	eb19 0005 	adds.w	r0, r9, r5
 80091f2:	eb4a 0106 	adc.w	r1, sl, r6
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	461d      	mov	r5, r3
 80091fc:	f04f 0600 	mov.w	r6, #0
 8009200:	196b      	adds	r3, r5, r5
 8009202:	eb46 0406 	adc.w	r4, r6, r6
 8009206:	461a      	mov	r2, r3
 8009208:	4623      	mov	r3, r4
 800920a:	f7f7 fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800920e:	4603      	mov	r3, r0
 8009210:	460c      	mov	r4, r1
 8009212:	461a      	mov	r2, r3
 8009214:	4b2c      	ldr	r3, [pc, #176]	; (80092c8 <UART_SetConfig+0x384>)
 8009216:	fba3 1302 	umull	r1, r3, r3, r2
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	2164      	movs	r1, #100	; 0x64
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	3332      	adds	r3, #50	; 0x32
 8009228:	4a27      	ldr	r2, [pc, #156]	; (80092c8 <UART_SetConfig+0x384>)
 800922a:	fba2 2303 	umull	r2, r3, r2, r3
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009236:	4498      	add	r8, r3
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	461d      	mov	r5, r3
 800923c:	f04f 0600 	mov.w	r6, #0
 8009240:	46a9      	mov	r9, r5
 8009242:	46b2      	mov	sl, r6
 8009244:	eb19 0309 	adds.w	r3, r9, r9
 8009248:	eb4a 040a 	adc.w	r4, sl, sl
 800924c:	4699      	mov	r9, r3
 800924e:	46a2      	mov	sl, r4
 8009250:	eb19 0905 	adds.w	r9, r9, r5
 8009254:	eb4a 0a06 	adc.w	sl, sl, r6
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800926c:	4689      	mov	r9, r1
 800926e:	4692      	mov	sl, r2
 8009270:	eb19 0005 	adds.w	r0, r9, r5
 8009274:	eb4a 0106 	adc.w	r1, sl, r6
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	461d      	mov	r5, r3
 800927e:	f04f 0600 	mov.w	r6, #0
 8009282:	196b      	adds	r3, r5, r5
 8009284:	eb46 0406 	adc.w	r4, r6, r6
 8009288:	461a      	mov	r2, r3
 800928a:	4623      	mov	r3, r4
 800928c:	f7f7 fcfc 	bl	8000c88 <__aeabi_uldivmod>
 8009290:	4603      	mov	r3, r0
 8009292:	460c      	mov	r4, r1
 8009294:	461a      	mov	r2, r3
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <UART_SetConfig+0x384>)
 8009298:	fba3 1302 	umull	r1, r3, r3, r2
 800929c:	095b      	lsrs	r3, r3, #5
 800929e:	2164      	movs	r1, #100	; 0x64
 80092a0:	fb01 f303 	mul.w	r3, r1, r3
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	3332      	adds	r3, #50	; 0x32
 80092aa:	4a07      	ldr	r2, [pc, #28]	; (80092c8 <UART_SetConfig+0x384>)
 80092ac:	fba2 2303 	umull	r2, r3, r2, r3
 80092b0:	095b      	lsrs	r3, r3, #5
 80092b2:	f003 0207 	and.w	r2, r3, #7
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4442      	add	r2, r8
 80092bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80092be:	e1b2      	b.n	8009626 <UART_SetConfig+0x6e2>
 80092c0:	40011000 	.word	0x40011000
 80092c4:	40011400 	.word	0x40011400
 80092c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4ad7      	ldr	r2, [pc, #860]	; (8009630 <UART_SetConfig+0x6ec>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d005      	beq.n	80092e2 <UART_SetConfig+0x39e>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4ad6      	ldr	r2, [pc, #856]	; (8009634 <UART_SetConfig+0x6f0>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	f040 80d1 	bne.w	8009484 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80092e2:	f7fe f8c7 	bl	8007474 <HAL_RCC_GetPCLK2Freq>
 80092e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	469a      	mov	sl, r3
 80092ec:	f04f 0b00 	mov.w	fp, #0
 80092f0:	46d0      	mov	r8, sl
 80092f2:	46d9      	mov	r9, fp
 80092f4:	eb18 0308 	adds.w	r3, r8, r8
 80092f8:	eb49 0409 	adc.w	r4, r9, r9
 80092fc:	4698      	mov	r8, r3
 80092fe:	46a1      	mov	r9, r4
 8009300:	eb18 080a 	adds.w	r8, r8, sl
 8009304:	eb49 090b 	adc.w	r9, r9, fp
 8009308:	f04f 0100 	mov.w	r1, #0
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009314:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009318:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800931c:	4688      	mov	r8, r1
 800931e:	4691      	mov	r9, r2
 8009320:	eb1a 0508 	adds.w	r5, sl, r8
 8009324:	eb4b 0609 	adc.w	r6, fp, r9
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4619      	mov	r1, r3
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	f04f 0400 	mov.w	r4, #0
 800933a:	0094      	lsls	r4, r2, #2
 800933c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009340:	008b      	lsls	r3, r1, #2
 8009342:	461a      	mov	r2, r3
 8009344:	4623      	mov	r3, r4
 8009346:	4628      	mov	r0, r5
 8009348:	4631      	mov	r1, r6
 800934a:	f7f7 fc9d 	bl	8000c88 <__aeabi_uldivmod>
 800934e:	4603      	mov	r3, r0
 8009350:	460c      	mov	r4, r1
 8009352:	461a      	mov	r2, r3
 8009354:	4bb8      	ldr	r3, [pc, #736]	; (8009638 <UART_SetConfig+0x6f4>)
 8009356:	fba3 2302 	umull	r2, r3, r3, r2
 800935a:	095b      	lsrs	r3, r3, #5
 800935c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	469b      	mov	fp, r3
 8009364:	f04f 0c00 	mov.w	ip, #0
 8009368:	46d9      	mov	r9, fp
 800936a:	46e2      	mov	sl, ip
 800936c:	eb19 0309 	adds.w	r3, r9, r9
 8009370:	eb4a 040a 	adc.w	r4, sl, sl
 8009374:	4699      	mov	r9, r3
 8009376:	46a2      	mov	sl, r4
 8009378:	eb19 090b 	adds.w	r9, r9, fp
 800937c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009380:	f04f 0100 	mov.w	r1, #0
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800938c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009394:	4689      	mov	r9, r1
 8009396:	4692      	mov	sl, r2
 8009398:	eb1b 0509 	adds.w	r5, fp, r9
 800939c:	eb4c 060a 	adc.w	r6, ip, sl
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	4619      	mov	r1, r3
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	f04f 0300 	mov.w	r3, #0
 80093ae:	f04f 0400 	mov.w	r4, #0
 80093b2:	0094      	lsls	r4, r2, #2
 80093b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093b8:	008b      	lsls	r3, r1, #2
 80093ba:	461a      	mov	r2, r3
 80093bc:	4623      	mov	r3, r4
 80093be:	4628      	mov	r0, r5
 80093c0:	4631      	mov	r1, r6
 80093c2:	f7f7 fc61 	bl	8000c88 <__aeabi_uldivmod>
 80093c6:	4603      	mov	r3, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	461a      	mov	r2, r3
 80093cc:	4b9a      	ldr	r3, [pc, #616]	; (8009638 <UART_SetConfig+0x6f4>)
 80093ce:	fba3 1302 	umull	r1, r3, r3, r2
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	2164      	movs	r1, #100	; 0x64
 80093d6:	fb01 f303 	mul.w	r3, r1, r3
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	3332      	adds	r3, #50	; 0x32
 80093e0:	4a95      	ldr	r2, [pc, #596]	; (8009638 <UART_SetConfig+0x6f4>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	095b      	lsrs	r3, r3, #5
 80093e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ec:	4498      	add	r8, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	469b      	mov	fp, r3
 80093f2:	f04f 0c00 	mov.w	ip, #0
 80093f6:	46d9      	mov	r9, fp
 80093f8:	46e2      	mov	sl, ip
 80093fa:	eb19 0309 	adds.w	r3, r9, r9
 80093fe:	eb4a 040a 	adc.w	r4, sl, sl
 8009402:	4699      	mov	r9, r3
 8009404:	46a2      	mov	sl, r4
 8009406:	eb19 090b 	adds.w	r9, r9, fp
 800940a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800940e:	f04f 0100 	mov.w	r1, #0
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800941a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800941e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009422:	4689      	mov	r9, r1
 8009424:	4692      	mov	sl, r2
 8009426:	eb1b 0509 	adds.w	r5, fp, r9
 800942a:	eb4c 060a 	adc.w	r6, ip, sl
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	4619      	mov	r1, r3
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	f04f 0300 	mov.w	r3, #0
 800943c:	f04f 0400 	mov.w	r4, #0
 8009440:	0094      	lsls	r4, r2, #2
 8009442:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009446:	008b      	lsls	r3, r1, #2
 8009448:	461a      	mov	r2, r3
 800944a:	4623      	mov	r3, r4
 800944c:	4628      	mov	r0, r5
 800944e:	4631      	mov	r1, r6
 8009450:	f7f7 fc1a 	bl	8000c88 <__aeabi_uldivmod>
 8009454:	4603      	mov	r3, r0
 8009456:	460c      	mov	r4, r1
 8009458:	461a      	mov	r2, r3
 800945a:	4b77      	ldr	r3, [pc, #476]	; (8009638 <UART_SetConfig+0x6f4>)
 800945c:	fba3 1302 	umull	r1, r3, r3, r2
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	2164      	movs	r1, #100	; 0x64
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	3332      	adds	r3, #50	; 0x32
 800946e:	4a72      	ldr	r2, [pc, #456]	; (8009638 <UART_SetConfig+0x6f4>)
 8009470:	fba2 2303 	umull	r2, r3, r2, r3
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4442      	add	r2, r8
 8009480:	609a      	str	r2, [r3, #8]
 8009482:	e0d0      	b.n	8009626 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009484:	f7fd ffe2 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 8009488:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	469a      	mov	sl, r3
 800948e:	f04f 0b00 	mov.w	fp, #0
 8009492:	46d0      	mov	r8, sl
 8009494:	46d9      	mov	r9, fp
 8009496:	eb18 0308 	adds.w	r3, r8, r8
 800949a:	eb49 0409 	adc.w	r4, r9, r9
 800949e:	4698      	mov	r8, r3
 80094a0:	46a1      	mov	r9, r4
 80094a2:	eb18 080a 	adds.w	r8, r8, sl
 80094a6:	eb49 090b 	adc.w	r9, r9, fp
 80094aa:	f04f 0100 	mov.w	r1, #0
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80094b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80094ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80094be:	4688      	mov	r8, r1
 80094c0:	4691      	mov	r9, r2
 80094c2:	eb1a 0508 	adds.w	r5, sl, r8
 80094c6:	eb4b 0609 	adc.w	r6, fp, r9
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4619      	mov	r1, r3
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	f04f 0300 	mov.w	r3, #0
 80094d8:	f04f 0400 	mov.w	r4, #0
 80094dc:	0094      	lsls	r4, r2, #2
 80094de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094e2:	008b      	lsls	r3, r1, #2
 80094e4:	461a      	mov	r2, r3
 80094e6:	4623      	mov	r3, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	4631      	mov	r1, r6
 80094ec:	f7f7 fbcc 	bl	8000c88 <__aeabi_uldivmod>
 80094f0:	4603      	mov	r3, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	461a      	mov	r2, r3
 80094f6:	4b50      	ldr	r3, [pc, #320]	; (8009638 <UART_SetConfig+0x6f4>)
 80094f8:	fba3 2302 	umull	r2, r3, r3, r2
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	469b      	mov	fp, r3
 8009506:	f04f 0c00 	mov.w	ip, #0
 800950a:	46d9      	mov	r9, fp
 800950c:	46e2      	mov	sl, ip
 800950e:	eb19 0309 	adds.w	r3, r9, r9
 8009512:	eb4a 040a 	adc.w	r4, sl, sl
 8009516:	4699      	mov	r9, r3
 8009518:	46a2      	mov	sl, r4
 800951a:	eb19 090b 	adds.w	r9, r9, fp
 800951e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009522:	f04f 0100 	mov.w	r1, #0
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800952e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009532:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009536:	4689      	mov	r9, r1
 8009538:	4692      	mov	sl, r2
 800953a:	eb1b 0509 	adds.w	r5, fp, r9
 800953e:	eb4c 060a 	adc.w	r6, ip, sl
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	4619      	mov	r1, r3
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	f04f 0400 	mov.w	r4, #0
 8009554:	0094      	lsls	r4, r2, #2
 8009556:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800955a:	008b      	lsls	r3, r1, #2
 800955c:	461a      	mov	r2, r3
 800955e:	4623      	mov	r3, r4
 8009560:	4628      	mov	r0, r5
 8009562:	4631      	mov	r1, r6
 8009564:	f7f7 fb90 	bl	8000c88 <__aeabi_uldivmod>
 8009568:	4603      	mov	r3, r0
 800956a:	460c      	mov	r4, r1
 800956c:	461a      	mov	r2, r3
 800956e:	4b32      	ldr	r3, [pc, #200]	; (8009638 <UART_SetConfig+0x6f4>)
 8009570:	fba3 1302 	umull	r1, r3, r3, r2
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	2164      	movs	r1, #100	; 0x64
 8009578:	fb01 f303 	mul.w	r3, r1, r3
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	011b      	lsls	r3, r3, #4
 8009580:	3332      	adds	r3, #50	; 0x32
 8009582:	4a2d      	ldr	r2, [pc, #180]	; (8009638 <UART_SetConfig+0x6f4>)
 8009584:	fba2 2303 	umull	r2, r3, r2, r3
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800958e:	4498      	add	r8, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	469b      	mov	fp, r3
 8009594:	f04f 0c00 	mov.w	ip, #0
 8009598:	46d9      	mov	r9, fp
 800959a:	46e2      	mov	sl, ip
 800959c:	eb19 0309 	adds.w	r3, r9, r9
 80095a0:	eb4a 040a 	adc.w	r4, sl, sl
 80095a4:	4699      	mov	r9, r3
 80095a6:	46a2      	mov	sl, r4
 80095a8:	eb19 090b 	adds.w	r9, r9, fp
 80095ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	f04f 0200 	mov.w	r2, #0
 80095b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095c4:	4689      	mov	r9, r1
 80095c6:	4692      	mov	sl, r2
 80095c8:	eb1b 0509 	adds.w	r5, fp, r9
 80095cc:	eb4c 060a 	adc.w	r6, ip, sl
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4619      	mov	r1, r3
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	f04f 0400 	mov.w	r4, #0
 80095e2:	0094      	lsls	r4, r2, #2
 80095e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095e8:	008b      	lsls	r3, r1, #2
 80095ea:	461a      	mov	r2, r3
 80095ec:	4623      	mov	r3, r4
 80095ee:	4628      	mov	r0, r5
 80095f0:	4631      	mov	r1, r6
 80095f2:	f7f7 fb49 	bl	8000c88 <__aeabi_uldivmod>
 80095f6:	4603      	mov	r3, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	461a      	mov	r2, r3
 80095fc:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <UART_SetConfig+0x6f4>)
 80095fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	2164      	movs	r1, #100	; 0x64
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	3332      	adds	r3, #50	; 0x32
 8009610:	4a09      	ldr	r2, [pc, #36]	; (8009638 <UART_SetConfig+0x6f4>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4442      	add	r2, r8
 8009622:	609a      	str	r2, [r3, #8]
}
 8009624:	e7ff      	b.n	8009626 <UART_SetConfig+0x6e2>
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	40011000 	.word	0x40011000
 8009634:	40011400 	.word	0x40011400
 8009638:	51eb851f 	.word	0x51eb851f

0800963c <__errno>:
 800963c:	4b01      	ldr	r3, [pc, #4]	; (8009644 <__errno+0x8>)
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20000040 	.word	0x20000040

08009648 <__libc_init_array>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4e0d      	ldr	r6, [pc, #52]	; (8009680 <__libc_init_array+0x38>)
 800964c:	4c0d      	ldr	r4, [pc, #52]	; (8009684 <__libc_init_array+0x3c>)
 800964e:	1ba4      	subs	r4, r4, r6
 8009650:	10a4      	asrs	r4, r4, #2
 8009652:	2500      	movs	r5, #0
 8009654:	42a5      	cmp	r5, r4
 8009656:	d109      	bne.n	800966c <__libc_init_array+0x24>
 8009658:	4e0b      	ldr	r6, [pc, #44]	; (8009688 <__libc_init_array+0x40>)
 800965a:	4c0c      	ldr	r4, [pc, #48]	; (800968c <__libc_init_array+0x44>)
 800965c:	f004 fa5e 	bl	800db1c <_init>
 8009660:	1ba4      	subs	r4, r4, r6
 8009662:	10a4      	asrs	r4, r4, #2
 8009664:	2500      	movs	r5, #0
 8009666:	42a5      	cmp	r5, r4
 8009668:	d105      	bne.n	8009676 <__libc_init_array+0x2e>
 800966a:	bd70      	pop	{r4, r5, r6, pc}
 800966c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009670:	4798      	blx	r3
 8009672:	3501      	adds	r5, #1
 8009674:	e7ee      	b.n	8009654 <__libc_init_array+0xc>
 8009676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800967a:	4798      	blx	r3
 800967c:	3501      	adds	r5, #1
 800967e:	e7f2      	b.n	8009666 <__libc_init_array+0x1e>
 8009680:	0800dec8 	.word	0x0800dec8
 8009684:	0800dec8 	.word	0x0800dec8
 8009688:	0800dec8 	.word	0x0800dec8
 800968c:	0800decc 	.word	0x0800decc

08009690 <memcpy>:
 8009690:	b510      	push	{r4, lr}
 8009692:	1e43      	subs	r3, r0, #1
 8009694:	440a      	add	r2, r1
 8009696:	4291      	cmp	r1, r2
 8009698:	d100      	bne.n	800969c <memcpy+0xc>
 800969a:	bd10      	pop	{r4, pc}
 800969c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096a4:	e7f7      	b.n	8009696 <memcpy+0x6>

080096a6 <memset>:
 80096a6:	4402      	add	r2, r0
 80096a8:	4603      	mov	r3, r0
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d100      	bne.n	80096b0 <memset+0xa>
 80096ae:	4770      	bx	lr
 80096b0:	f803 1b01 	strb.w	r1, [r3], #1
 80096b4:	e7f9      	b.n	80096aa <memset+0x4>

080096b6 <__cvt>:
 80096b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ba:	ec55 4b10 	vmov	r4, r5, d0
 80096be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80096c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096c4:	2d00      	cmp	r5, #0
 80096c6:	460e      	mov	r6, r1
 80096c8:	4691      	mov	r9, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	bfb8      	it	lt
 80096ce:	4622      	movlt	r2, r4
 80096d0:	462b      	mov	r3, r5
 80096d2:	f027 0720 	bic.w	r7, r7, #32
 80096d6:	bfbb      	ittet	lt
 80096d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096dc:	461d      	movlt	r5, r3
 80096de:	2300      	movge	r3, #0
 80096e0:	232d      	movlt	r3, #45	; 0x2d
 80096e2:	bfb8      	it	lt
 80096e4:	4614      	movlt	r4, r2
 80096e6:	2f46      	cmp	r7, #70	; 0x46
 80096e8:	700b      	strb	r3, [r1, #0]
 80096ea:	d004      	beq.n	80096f6 <__cvt+0x40>
 80096ec:	2f45      	cmp	r7, #69	; 0x45
 80096ee:	d100      	bne.n	80096f2 <__cvt+0x3c>
 80096f0:	3601      	adds	r6, #1
 80096f2:	2102      	movs	r1, #2
 80096f4:	e000      	b.n	80096f8 <__cvt+0x42>
 80096f6:	2103      	movs	r1, #3
 80096f8:	ab03      	add	r3, sp, #12
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	ab02      	add	r3, sp, #8
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	4632      	mov	r2, r6
 8009702:	4653      	mov	r3, sl
 8009704:	ec45 4b10 	vmov	d0, r4, r5
 8009708:	f001 feb2 	bl	800b470 <_dtoa_r>
 800970c:	2f47      	cmp	r7, #71	; 0x47
 800970e:	4680      	mov	r8, r0
 8009710:	d102      	bne.n	8009718 <__cvt+0x62>
 8009712:	f019 0f01 	tst.w	r9, #1
 8009716:	d026      	beq.n	8009766 <__cvt+0xb0>
 8009718:	2f46      	cmp	r7, #70	; 0x46
 800971a:	eb08 0906 	add.w	r9, r8, r6
 800971e:	d111      	bne.n	8009744 <__cvt+0x8e>
 8009720:	f898 3000 	ldrb.w	r3, [r8]
 8009724:	2b30      	cmp	r3, #48	; 0x30
 8009726:	d10a      	bne.n	800973e <__cvt+0x88>
 8009728:	2200      	movs	r2, #0
 800972a:	2300      	movs	r3, #0
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7f7 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009734:	b918      	cbnz	r0, 800973e <__cvt+0x88>
 8009736:	f1c6 0601 	rsb	r6, r6, #1
 800973a:	f8ca 6000 	str.w	r6, [sl]
 800973e:	f8da 3000 	ldr.w	r3, [sl]
 8009742:	4499      	add	r9, r3
 8009744:	2200      	movs	r2, #0
 8009746:	2300      	movs	r3, #0
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f7 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009750:	b938      	cbnz	r0, 8009762 <__cvt+0xac>
 8009752:	2230      	movs	r2, #48	; 0x30
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	454b      	cmp	r3, r9
 8009758:	d205      	bcs.n	8009766 <__cvt+0xb0>
 800975a:	1c59      	adds	r1, r3, #1
 800975c:	9103      	str	r1, [sp, #12]
 800975e:	701a      	strb	r2, [r3, #0]
 8009760:	e7f8      	b.n	8009754 <__cvt+0x9e>
 8009762:	f8cd 900c 	str.w	r9, [sp, #12]
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800976a:	eba3 0308 	sub.w	r3, r3, r8
 800976e:	4640      	mov	r0, r8
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	b004      	add	sp, #16
 8009774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009778 <__exponent>:
 8009778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800977a:	2900      	cmp	r1, #0
 800977c:	4604      	mov	r4, r0
 800977e:	bfba      	itte	lt
 8009780:	4249      	neglt	r1, r1
 8009782:	232d      	movlt	r3, #45	; 0x2d
 8009784:	232b      	movge	r3, #43	; 0x2b
 8009786:	2909      	cmp	r1, #9
 8009788:	f804 2b02 	strb.w	r2, [r4], #2
 800978c:	7043      	strb	r3, [r0, #1]
 800978e:	dd20      	ble.n	80097d2 <__exponent+0x5a>
 8009790:	f10d 0307 	add.w	r3, sp, #7
 8009794:	461f      	mov	r7, r3
 8009796:	260a      	movs	r6, #10
 8009798:	fb91 f5f6 	sdiv	r5, r1, r6
 800979c:	fb06 1115 	mls	r1, r6, r5, r1
 80097a0:	3130      	adds	r1, #48	; 0x30
 80097a2:	2d09      	cmp	r5, #9
 80097a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80097ac:	4629      	mov	r1, r5
 80097ae:	dc09      	bgt.n	80097c4 <__exponent+0x4c>
 80097b0:	3130      	adds	r1, #48	; 0x30
 80097b2:	3b02      	subs	r3, #2
 80097b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80097b8:	42bb      	cmp	r3, r7
 80097ba:	4622      	mov	r2, r4
 80097bc:	d304      	bcc.n	80097c8 <__exponent+0x50>
 80097be:	1a10      	subs	r0, r2, r0
 80097c0:	b003      	add	sp, #12
 80097c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c4:	4613      	mov	r3, r2
 80097c6:	e7e7      	b.n	8009798 <__exponent+0x20>
 80097c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097cc:	f804 2b01 	strb.w	r2, [r4], #1
 80097d0:	e7f2      	b.n	80097b8 <__exponent+0x40>
 80097d2:	2330      	movs	r3, #48	; 0x30
 80097d4:	4419      	add	r1, r3
 80097d6:	7083      	strb	r3, [r0, #2]
 80097d8:	1d02      	adds	r2, r0, #4
 80097da:	70c1      	strb	r1, [r0, #3]
 80097dc:	e7ef      	b.n	80097be <__exponent+0x46>
	...

080097e0 <_printf_float>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	b08d      	sub	sp, #52	; 0x34
 80097e6:	460c      	mov	r4, r1
 80097e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80097ec:	4616      	mov	r6, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	4605      	mov	r5, r0
 80097f2:	f003 f89b 	bl	800c92c <_localeconv_r>
 80097f6:	6803      	ldr	r3, [r0, #0]
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7f6 fce8 	bl	80001d0 <strlen>
 8009800:	2300      	movs	r3, #0
 8009802:	930a      	str	r3, [sp, #40]	; 0x28
 8009804:	f8d8 3000 	ldr.w	r3, [r8]
 8009808:	9005      	str	r0, [sp, #20]
 800980a:	3307      	adds	r3, #7
 800980c:	f023 0307 	bic.w	r3, r3, #7
 8009810:	f103 0208 	add.w	r2, r3, #8
 8009814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009818:	f8d4 b000 	ldr.w	fp, [r4]
 800981c:	f8c8 2000 	str.w	r2, [r8]
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009828:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800982c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009830:	9307      	str	r3, [sp, #28]
 8009832:	f8cd 8018 	str.w	r8, [sp, #24]
 8009836:	f04f 32ff 	mov.w	r2, #4294967295
 800983a:	4ba7      	ldr	r3, [pc, #668]	; (8009ad8 <_printf_float+0x2f8>)
 800983c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009840:	f7f7 f974 	bl	8000b2c <__aeabi_dcmpun>
 8009844:	bb70      	cbnz	r0, 80098a4 <_printf_float+0xc4>
 8009846:	f04f 32ff 	mov.w	r2, #4294967295
 800984a:	4ba3      	ldr	r3, [pc, #652]	; (8009ad8 <_printf_float+0x2f8>)
 800984c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009850:	f7f7 f94e 	bl	8000af0 <__aeabi_dcmple>
 8009854:	bb30      	cbnz	r0, 80098a4 <_printf_float+0xc4>
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f7 f93d 	bl	8000adc <__aeabi_dcmplt>
 8009862:	b110      	cbz	r0, 800986a <_printf_float+0x8a>
 8009864:	232d      	movs	r3, #45	; 0x2d
 8009866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800986a:	4a9c      	ldr	r2, [pc, #624]	; (8009adc <_printf_float+0x2fc>)
 800986c:	4b9c      	ldr	r3, [pc, #624]	; (8009ae0 <_printf_float+0x300>)
 800986e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009872:	bf8c      	ite	hi
 8009874:	4690      	movhi	r8, r2
 8009876:	4698      	movls	r8, r3
 8009878:	2303      	movs	r3, #3
 800987a:	f02b 0204 	bic.w	r2, fp, #4
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	6022      	str	r2, [r4, #0]
 8009882:	f04f 0900 	mov.w	r9, #0
 8009886:	9700      	str	r7, [sp, #0]
 8009888:	4633      	mov	r3, r6
 800988a:	aa0b      	add	r2, sp, #44	; 0x2c
 800988c:	4621      	mov	r1, r4
 800988e:	4628      	mov	r0, r5
 8009890:	f000 f9e6 	bl	8009c60 <_printf_common>
 8009894:	3001      	adds	r0, #1
 8009896:	f040 808d 	bne.w	80099b4 <_printf_float+0x1d4>
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	b00d      	add	sp, #52	; 0x34
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	4642      	mov	r2, r8
 80098a6:	464b      	mov	r3, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f93e 	bl	8000b2c <__aeabi_dcmpun>
 80098b0:	b110      	cbz	r0, 80098b8 <_printf_float+0xd8>
 80098b2:	4a8c      	ldr	r2, [pc, #560]	; (8009ae4 <_printf_float+0x304>)
 80098b4:	4b8c      	ldr	r3, [pc, #560]	; (8009ae8 <_printf_float+0x308>)
 80098b6:	e7da      	b.n	800986e <_printf_float+0x8e>
 80098b8:	6861      	ldr	r1, [r4, #4]
 80098ba:	1c4b      	adds	r3, r1, #1
 80098bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80098c0:	a80a      	add	r0, sp, #40	; 0x28
 80098c2:	d13e      	bne.n	8009942 <_printf_float+0x162>
 80098c4:	2306      	movs	r3, #6
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	2300      	movs	r3, #0
 80098ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80098ce:	ab09      	add	r3, sp, #36	; 0x24
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	ec49 8b10 	vmov	d0, r8, r9
 80098d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098da:	6022      	str	r2, [r4, #0]
 80098dc:	f8cd a004 	str.w	sl, [sp, #4]
 80098e0:	6861      	ldr	r1, [r4, #4]
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7ff fee7 	bl	80096b6 <__cvt>
 80098e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80098ec:	2b47      	cmp	r3, #71	; 0x47
 80098ee:	4680      	mov	r8, r0
 80098f0:	d109      	bne.n	8009906 <_printf_float+0x126>
 80098f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f4:	1cd8      	adds	r0, r3, #3
 80098f6:	db02      	blt.n	80098fe <_printf_float+0x11e>
 80098f8:	6862      	ldr	r2, [r4, #4]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	dd47      	ble.n	800998e <_printf_float+0x1ae>
 80098fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8009902:	fa5f fa8a 	uxtb.w	sl, sl
 8009906:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800990a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800990c:	d824      	bhi.n	8009958 <_printf_float+0x178>
 800990e:	3901      	subs	r1, #1
 8009910:	4652      	mov	r2, sl
 8009912:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009916:	9109      	str	r1, [sp, #36]	; 0x24
 8009918:	f7ff ff2e 	bl	8009778 <__exponent>
 800991c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800991e:	1813      	adds	r3, r2, r0
 8009920:	2a01      	cmp	r2, #1
 8009922:	4681      	mov	r9, r0
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	dc02      	bgt.n	800992e <_printf_float+0x14e>
 8009928:	6822      	ldr	r2, [r4, #0]
 800992a:	07d1      	lsls	r1, r2, #31
 800992c:	d501      	bpl.n	8009932 <_printf_float+0x152>
 800992e:	3301      	adds	r3, #1
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0a5      	beq.n	8009886 <_printf_float+0xa6>
 800993a:	232d      	movs	r3, #45	; 0x2d
 800993c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009940:	e7a1      	b.n	8009886 <_printf_float+0xa6>
 8009942:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009946:	f000 8177 	beq.w	8009c38 <_printf_float+0x458>
 800994a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800994e:	d1bb      	bne.n	80098c8 <_printf_float+0xe8>
 8009950:	2900      	cmp	r1, #0
 8009952:	d1b9      	bne.n	80098c8 <_printf_float+0xe8>
 8009954:	2301      	movs	r3, #1
 8009956:	e7b6      	b.n	80098c6 <_printf_float+0xe6>
 8009958:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800995c:	d119      	bne.n	8009992 <_printf_float+0x1b2>
 800995e:	2900      	cmp	r1, #0
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	dd0c      	ble.n	800997e <_printf_float+0x19e>
 8009964:	6121      	str	r1, [r4, #16]
 8009966:	b913      	cbnz	r3, 800996e <_printf_float+0x18e>
 8009968:	6822      	ldr	r2, [r4, #0]
 800996a:	07d2      	lsls	r2, r2, #31
 800996c:	d502      	bpl.n	8009974 <_printf_float+0x194>
 800996e:	3301      	adds	r3, #1
 8009970:	440b      	add	r3, r1
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009976:	65a3      	str	r3, [r4, #88]	; 0x58
 8009978:	f04f 0900 	mov.w	r9, #0
 800997c:	e7d9      	b.n	8009932 <_printf_float+0x152>
 800997e:	b913      	cbnz	r3, 8009986 <_printf_float+0x1a6>
 8009980:	6822      	ldr	r2, [r4, #0]
 8009982:	07d0      	lsls	r0, r2, #31
 8009984:	d501      	bpl.n	800998a <_printf_float+0x1aa>
 8009986:	3302      	adds	r3, #2
 8009988:	e7f3      	b.n	8009972 <_printf_float+0x192>
 800998a:	2301      	movs	r3, #1
 800998c:	e7f1      	b.n	8009972 <_printf_float+0x192>
 800998e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009992:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009996:	4293      	cmp	r3, r2
 8009998:	db05      	blt.n	80099a6 <_printf_float+0x1c6>
 800999a:	6822      	ldr	r2, [r4, #0]
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	07d1      	lsls	r1, r2, #31
 80099a0:	d5e8      	bpl.n	8009974 <_printf_float+0x194>
 80099a2:	3301      	adds	r3, #1
 80099a4:	e7e5      	b.n	8009972 <_printf_float+0x192>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	bfd4      	ite	le
 80099aa:	f1c3 0302 	rsble	r3, r3, #2
 80099ae:	2301      	movgt	r3, #1
 80099b0:	4413      	add	r3, r2
 80099b2:	e7de      	b.n	8009972 <_printf_float+0x192>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	055a      	lsls	r2, r3, #21
 80099b8:	d407      	bmi.n	80099ca <_printf_float+0x1ea>
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	4642      	mov	r2, r8
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	d12b      	bne.n	8009a20 <_printf_float+0x240>
 80099c8:	e767      	b.n	800989a <_printf_float+0xba>
 80099ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80099ce:	f240 80dc 	bls.w	8009b8a <_printf_float+0x3aa>
 80099d2:	2200      	movs	r2, #0
 80099d4:	2300      	movs	r3, #0
 80099d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099da:	f7f7 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d033      	beq.n	8009a4a <_printf_float+0x26a>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4a41      	ldr	r2, [pc, #260]	; (8009aec <_printf_float+0x30c>)
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f af54 	beq.w	800989a <_printf_float+0xba>
 80099f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f6:	429a      	cmp	r2, r3
 80099f8:	db02      	blt.n	8009a00 <_printf_float+0x220>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	07d8      	lsls	r0, r3, #31
 80099fe:	d50f      	bpl.n	8009a20 <_printf_float+0x240>
 8009a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a04:	4631      	mov	r1, r6
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b8      	blx	r7
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	f43f af45 	beq.w	800989a <_printf_float+0xba>
 8009a10:	f04f 0800 	mov.w	r8, #0
 8009a14:	f104 091a 	add.w	r9, r4, #26
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	4543      	cmp	r3, r8
 8009a1e:	dc09      	bgt.n	8009a34 <_printf_float+0x254>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	079b      	lsls	r3, r3, #30
 8009a24:	f100 8103 	bmi.w	8009c2e <_printf_float+0x44e>
 8009a28:	68e0      	ldr	r0, [r4, #12]
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	4298      	cmp	r0, r3
 8009a2e:	bfb8      	it	lt
 8009a30:	4618      	movlt	r0, r3
 8009a32:	e734      	b.n	800989e <_printf_float+0xbe>
 8009a34:	2301      	movs	r3, #1
 8009a36:	464a      	mov	r2, r9
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af2b 	beq.w	800989a <_printf_float+0xba>
 8009a44:	f108 0801 	add.w	r8, r8, #1
 8009a48:	e7e6      	b.n	8009a18 <_printf_float+0x238>
 8009a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc2b      	bgt.n	8009aa8 <_printf_float+0x2c8>
 8009a50:	2301      	movs	r3, #1
 8009a52:	4a26      	ldr	r2, [pc, #152]	; (8009aec <_printf_float+0x30c>)
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	47b8      	blx	r7
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	f43f af1d 	beq.w	800989a <_printf_float+0xba>
 8009a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a62:	b923      	cbnz	r3, 8009a6e <_printf_float+0x28e>
 8009a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a66:	b913      	cbnz	r3, 8009a6e <_printf_float+0x28e>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	07d9      	lsls	r1, r3, #31
 8009a6c:	d5d8      	bpl.n	8009a20 <_printf_float+0x240>
 8009a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f af0e 	beq.w	800989a <_printf_float+0xba>
 8009a7e:	f04f 0900 	mov.w	r9, #0
 8009a82:	f104 0a1a 	add.w	sl, r4, #26
 8009a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a88:	425b      	negs	r3, r3
 8009a8a:	454b      	cmp	r3, r9
 8009a8c:	dc01      	bgt.n	8009a92 <_printf_float+0x2b2>
 8009a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a90:	e794      	b.n	80099bc <_printf_float+0x1dc>
 8009a92:	2301      	movs	r3, #1
 8009a94:	4652      	mov	r2, sl
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	f43f aefc 	beq.w	800989a <_printf_float+0xba>
 8009aa2:	f109 0901 	add.w	r9, r9, #1
 8009aa6:	e7ee      	b.n	8009a86 <_printf_float+0x2a6>
 8009aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aac:	429a      	cmp	r2, r3
 8009aae:	bfa8      	it	ge
 8009ab0:	461a      	movge	r2, r3
 8009ab2:	2a00      	cmp	r2, #0
 8009ab4:	4691      	mov	r9, r2
 8009ab6:	dd07      	ble.n	8009ac8 <_printf_float+0x2e8>
 8009ab8:	4613      	mov	r3, r2
 8009aba:	4631      	mov	r1, r6
 8009abc:	4642      	mov	r2, r8
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b8      	blx	r7
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	f43f aee9 	beq.w	800989a <_printf_float+0xba>
 8009ac8:	f104 031a 	add.w	r3, r4, #26
 8009acc:	f04f 0b00 	mov.w	fp, #0
 8009ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ad4:	9306      	str	r3, [sp, #24]
 8009ad6:	e015      	b.n	8009b04 <_printf_float+0x324>
 8009ad8:	7fefffff 	.word	0x7fefffff
 8009adc:	0800dba8 	.word	0x0800dba8
 8009ae0:	0800dba4 	.word	0x0800dba4
 8009ae4:	0800dbb0 	.word	0x0800dbb0
 8009ae8:	0800dbac 	.word	0x0800dbac
 8009aec:	0800dbb4 	.word	0x0800dbb4
 8009af0:	2301      	movs	r3, #1
 8009af2:	9a06      	ldr	r2, [sp, #24]
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	f43f aecd 	beq.w	800989a <_printf_float+0xba>
 8009b00:	f10b 0b01 	add.w	fp, fp, #1
 8009b04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009b08:	ebaa 0309 	sub.w	r3, sl, r9
 8009b0c:	455b      	cmp	r3, fp
 8009b0e:	dcef      	bgt.n	8009af0 <_printf_float+0x310>
 8009b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b14:	429a      	cmp	r2, r3
 8009b16:	44d0      	add	r8, sl
 8009b18:	db15      	blt.n	8009b46 <_printf_float+0x366>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	07da      	lsls	r2, r3, #31
 8009b1e:	d412      	bmi.n	8009b46 <_printf_float+0x366>
 8009b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b24:	eba3 020a 	sub.w	r2, r3, sl
 8009b28:	eba3 0a01 	sub.w	sl, r3, r1
 8009b2c:	4592      	cmp	sl, r2
 8009b2e:	bfa8      	it	ge
 8009b30:	4692      	movge	sl, r2
 8009b32:	f1ba 0f00 	cmp.w	sl, #0
 8009b36:	dc0e      	bgt.n	8009b56 <_printf_float+0x376>
 8009b38:	f04f 0800 	mov.w	r8, #0
 8009b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b40:	f104 091a 	add.w	r9, r4, #26
 8009b44:	e019      	b.n	8009b7a <_printf_float+0x39a>
 8009b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	d1e5      	bne.n	8009b20 <_printf_float+0x340>
 8009b54:	e6a1      	b.n	800989a <_printf_float+0xba>
 8009b56:	4653      	mov	r3, sl
 8009b58:	4642      	mov	r2, r8
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	d1e9      	bne.n	8009b38 <_printf_float+0x358>
 8009b64:	e699      	b.n	800989a <_printf_float+0xba>
 8009b66:	2301      	movs	r3, #1
 8009b68:	464a      	mov	r2, r9
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	47b8      	blx	r7
 8009b70:	3001      	adds	r0, #1
 8009b72:	f43f ae92 	beq.w	800989a <_printf_float+0xba>
 8009b76:	f108 0801 	add.w	r8, r8, #1
 8009b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	eba3 030a 	sub.w	r3, r3, sl
 8009b84:	4543      	cmp	r3, r8
 8009b86:	dcee      	bgt.n	8009b66 <_printf_float+0x386>
 8009b88:	e74a      	b.n	8009a20 <_printf_float+0x240>
 8009b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b8c:	2a01      	cmp	r2, #1
 8009b8e:	dc01      	bgt.n	8009b94 <_printf_float+0x3b4>
 8009b90:	07db      	lsls	r3, r3, #31
 8009b92:	d53a      	bpl.n	8009c0a <_printf_float+0x42a>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4642      	mov	r2, r8
 8009b98:	4631      	mov	r1, r6
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	47b8      	blx	r7
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	f43f ae7b 	beq.w	800989a <_printf_float+0xba>
 8009ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f108 0801 	add.w	r8, r8, #1
 8009bb4:	f43f ae71 	beq.w	800989a <_printf_float+0xba>
 8009bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f103 3aff 	add.w	sl, r3, #4294967295
 8009bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f7f6 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bca:	b9c8      	cbnz	r0, 8009c00 <_printf_float+0x420>
 8009bcc:	4653      	mov	r3, sl
 8009bce:	4642      	mov	r2, r8
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d10e      	bne.n	8009bf8 <_printf_float+0x418>
 8009bda:	e65e      	b.n	800989a <_printf_float+0xba>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	4652      	mov	r2, sl
 8009be0:	4631      	mov	r1, r6
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b8      	blx	r7
 8009be6:	3001      	adds	r0, #1
 8009be8:	f43f ae57 	beq.w	800989a <_printf_float+0xba>
 8009bec:	f108 0801 	add.w	r8, r8, #1
 8009bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	4543      	cmp	r3, r8
 8009bf6:	dcf1      	bgt.n	8009bdc <_printf_float+0x3fc>
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bfe:	e6de      	b.n	80099be <_printf_float+0x1de>
 8009c00:	f04f 0800 	mov.w	r8, #0
 8009c04:	f104 0a1a 	add.w	sl, r4, #26
 8009c08:	e7f2      	b.n	8009bf0 <_printf_float+0x410>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e7df      	b.n	8009bce <_printf_float+0x3ee>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	464a      	mov	r2, r9
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	f43f ae3e 	beq.w	800989a <_printf_float+0xba>
 8009c1e:	f108 0801 	add.w	r8, r8, #1
 8009c22:	68e3      	ldr	r3, [r4, #12]
 8009c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c26:	1a9b      	subs	r3, r3, r2
 8009c28:	4543      	cmp	r3, r8
 8009c2a:	dcf0      	bgt.n	8009c0e <_printf_float+0x42e>
 8009c2c:	e6fc      	b.n	8009a28 <_printf_float+0x248>
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	f104 0919 	add.w	r9, r4, #25
 8009c36:	e7f4      	b.n	8009c22 <_printf_float+0x442>
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	f43f ae8b 	beq.w	8009954 <_printf_float+0x174>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009c44:	ab09      	add	r3, sp, #36	; 0x24
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	ec49 8b10 	vmov	d0, r8, r9
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	f8cd a004 	str.w	sl, [sp, #4]
 8009c52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c56:	4628      	mov	r0, r5
 8009c58:	f7ff fd2d 	bl	80096b6 <__cvt>
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	e648      	b.n	80098f2 <_printf_float+0x112>

08009c60 <_printf_common>:
 8009c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	4691      	mov	r9, r2
 8009c66:	461f      	mov	r7, r3
 8009c68:	688a      	ldr	r2, [r1, #8]
 8009c6a:	690b      	ldr	r3, [r1, #16]
 8009c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c70:	4293      	cmp	r3, r2
 8009c72:	bfb8      	it	lt
 8009c74:	4613      	movlt	r3, r2
 8009c76:	f8c9 3000 	str.w	r3, [r9]
 8009c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460c      	mov	r4, r1
 8009c82:	b112      	cbz	r2, 8009c8a <_printf_common+0x2a>
 8009c84:	3301      	adds	r3, #1
 8009c86:	f8c9 3000 	str.w	r3, [r9]
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	0699      	lsls	r1, r3, #26
 8009c8e:	bf42      	ittt	mi
 8009c90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c94:	3302      	addmi	r3, #2
 8009c96:	f8c9 3000 	strmi.w	r3, [r9]
 8009c9a:	6825      	ldr	r5, [r4, #0]
 8009c9c:	f015 0506 	ands.w	r5, r5, #6
 8009ca0:	d107      	bne.n	8009cb2 <_printf_common+0x52>
 8009ca2:	f104 0a19 	add.w	sl, r4, #25
 8009ca6:	68e3      	ldr	r3, [r4, #12]
 8009ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8009cac:	1a9b      	subs	r3, r3, r2
 8009cae:	42ab      	cmp	r3, r5
 8009cb0:	dc28      	bgt.n	8009d04 <_printf_common+0xa4>
 8009cb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	3300      	adds	r3, #0
 8009cba:	bf18      	it	ne
 8009cbc:	2301      	movne	r3, #1
 8009cbe:	0692      	lsls	r2, r2, #26
 8009cc0:	d42d      	bmi.n	8009d1e <_printf_common+0xbe>
 8009cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	4630      	mov	r0, r6
 8009cca:	47c0      	blx	r8
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d020      	beq.n	8009d12 <_printf_common+0xb2>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	68e5      	ldr	r5, [r4, #12]
 8009cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cd8:	f003 0306 	and.w	r3, r3, #6
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	bf08      	it	eq
 8009ce0:	1aad      	subeq	r5, r5, r2
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	6922      	ldr	r2, [r4, #16]
 8009ce6:	bf0c      	ite	eq
 8009ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cec:	2500      	movne	r5, #0
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	bfc4      	itt	gt
 8009cf2:	1a9b      	subgt	r3, r3, r2
 8009cf4:	18ed      	addgt	r5, r5, r3
 8009cf6:	f04f 0900 	mov.w	r9, #0
 8009cfa:	341a      	adds	r4, #26
 8009cfc:	454d      	cmp	r5, r9
 8009cfe:	d11a      	bne.n	8009d36 <_printf_common+0xd6>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e008      	b.n	8009d16 <_printf_common+0xb6>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4652      	mov	r2, sl
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	47c0      	blx	r8
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d103      	bne.n	8009d1a <_printf_common+0xba>
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	3501      	adds	r5, #1
 8009d1c:	e7c3      	b.n	8009ca6 <_printf_common+0x46>
 8009d1e:	18e1      	adds	r1, r4, r3
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	2030      	movs	r0, #48	; 0x30
 8009d24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d28:	4422      	add	r2, r4
 8009d2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d32:	3302      	adds	r3, #2
 8009d34:	e7c5      	b.n	8009cc2 <_printf_common+0x62>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	47c0      	blx	r8
 8009d40:	3001      	adds	r0, #1
 8009d42:	d0e6      	beq.n	8009d12 <_printf_common+0xb2>
 8009d44:	f109 0901 	add.w	r9, r9, #1
 8009d48:	e7d8      	b.n	8009cfc <_printf_common+0x9c>
	...

08009d4c <_printf_i>:
 8009d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d54:	460c      	mov	r4, r1
 8009d56:	7e09      	ldrb	r1, [r1, #24]
 8009d58:	b085      	sub	sp, #20
 8009d5a:	296e      	cmp	r1, #110	; 0x6e
 8009d5c:	4617      	mov	r7, r2
 8009d5e:	4606      	mov	r6, r0
 8009d60:	4698      	mov	r8, r3
 8009d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d64:	f000 80b3 	beq.w	8009ece <_printf_i+0x182>
 8009d68:	d822      	bhi.n	8009db0 <_printf_i+0x64>
 8009d6a:	2963      	cmp	r1, #99	; 0x63
 8009d6c:	d036      	beq.n	8009ddc <_printf_i+0x90>
 8009d6e:	d80a      	bhi.n	8009d86 <_printf_i+0x3a>
 8009d70:	2900      	cmp	r1, #0
 8009d72:	f000 80b9 	beq.w	8009ee8 <_printf_i+0x19c>
 8009d76:	2958      	cmp	r1, #88	; 0x58
 8009d78:	f000 8083 	beq.w	8009e82 <_printf_i+0x136>
 8009d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d84:	e032      	b.n	8009dec <_printf_i+0xa0>
 8009d86:	2964      	cmp	r1, #100	; 0x64
 8009d88:	d001      	beq.n	8009d8e <_printf_i+0x42>
 8009d8a:	2969      	cmp	r1, #105	; 0x69
 8009d8c:	d1f6      	bne.n	8009d7c <_printf_i+0x30>
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	6813      	ldr	r3, [r2, #0]
 8009d92:	0605      	lsls	r5, r0, #24
 8009d94:	f103 0104 	add.w	r1, r3, #4
 8009d98:	d52a      	bpl.n	8009df0 <_printf_i+0xa4>
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6011      	str	r1, [r2, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da03      	bge.n	8009daa <_printf_i+0x5e>
 8009da2:	222d      	movs	r2, #45	; 0x2d
 8009da4:	425b      	negs	r3, r3
 8009da6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009daa:	486f      	ldr	r0, [pc, #444]	; (8009f68 <_printf_i+0x21c>)
 8009dac:	220a      	movs	r2, #10
 8009dae:	e039      	b.n	8009e24 <_printf_i+0xd8>
 8009db0:	2973      	cmp	r1, #115	; 0x73
 8009db2:	f000 809d 	beq.w	8009ef0 <_printf_i+0x1a4>
 8009db6:	d808      	bhi.n	8009dca <_printf_i+0x7e>
 8009db8:	296f      	cmp	r1, #111	; 0x6f
 8009dba:	d020      	beq.n	8009dfe <_printf_i+0xb2>
 8009dbc:	2970      	cmp	r1, #112	; 0x70
 8009dbe:	d1dd      	bne.n	8009d7c <_printf_i+0x30>
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	f043 0320 	orr.w	r3, r3, #32
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	e003      	b.n	8009dd2 <_printf_i+0x86>
 8009dca:	2975      	cmp	r1, #117	; 0x75
 8009dcc:	d017      	beq.n	8009dfe <_printf_i+0xb2>
 8009dce:	2978      	cmp	r1, #120	; 0x78
 8009dd0:	d1d4      	bne.n	8009d7c <_printf_i+0x30>
 8009dd2:	2378      	movs	r3, #120	; 0x78
 8009dd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dd8:	4864      	ldr	r0, [pc, #400]	; (8009f6c <_printf_i+0x220>)
 8009dda:	e055      	b.n	8009e88 <_printf_i+0x13c>
 8009ddc:	6813      	ldr	r3, [r2, #0]
 8009dde:	1d19      	adds	r1, r3, #4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6011      	str	r1, [r2, #0]
 8009de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dec:	2301      	movs	r3, #1
 8009dee:	e08c      	b.n	8009f0a <_printf_i+0x1be>
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6011      	str	r1, [r2, #0]
 8009df4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009df8:	bf18      	it	ne
 8009dfa:	b21b      	sxthne	r3, r3
 8009dfc:	e7cf      	b.n	8009d9e <_printf_i+0x52>
 8009dfe:	6813      	ldr	r3, [r2, #0]
 8009e00:	6825      	ldr	r5, [r4, #0]
 8009e02:	1d18      	adds	r0, r3, #4
 8009e04:	6010      	str	r0, [r2, #0]
 8009e06:	0628      	lsls	r0, r5, #24
 8009e08:	d501      	bpl.n	8009e0e <_printf_i+0xc2>
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	e002      	b.n	8009e14 <_printf_i+0xc8>
 8009e0e:	0668      	lsls	r0, r5, #25
 8009e10:	d5fb      	bpl.n	8009e0a <_printf_i+0xbe>
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	4854      	ldr	r0, [pc, #336]	; (8009f68 <_printf_i+0x21c>)
 8009e16:	296f      	cmp	r1, #111	; 0x6f
 8009e18:	bf14      	ite	ne
 8009e1a:	220a      	movne	r2, #10
 8009e1c:	2208      	moveq	r2, #8
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e24:	6865      	ldr	r5, [r4, #4]
 8009e26:	60a5      	str	r5, [r4, #8]
 8009e28:	2d00      	cmp	r5, #0
 8009e2a:	f2c0 8095 	blt.w	8009f58 <_printf_i+0x20c>
 8009e2e:	6821      	ldr	r1, [r4, #0]
 8009e30:	f021 0104 	bic.w	r1, r1, #4
 8009e34:	6021      	str	r1, [r4, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d13d      	bne.n	8009eb6 <_printf_i+0x16a>
 8009e3a:	2d00      	cmp	r5, #0
 8009e3c:	f040 808e 	bne.w	8009f5c <_printf_i+0x210>
 8009e40:	4665      	mov	r5, ip
 8009e42:	2a08      	cmp	r2, #8
 8009e44:	d10b      	bne.n	8009e5e <_printf_i+0x112>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	07db      	lsls	r3, r3, #31
 8009e4a:	d508      	bpl.n	8009e5e <_printf_i+0x112>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	bfde      	ittt	le
 8009e54:	2330      	movle	r3, #48	; 0x30
 8009e56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e5e:	ebac 0305 	sub.w	r3, ip, r5
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	f8cd 8000 	str.w	r8, [sp]
 8009e68:	463b      	mov	r3, r7
 8009e6a:	aa03      	add	r2, sp, #12
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7ff fef6 	bl	8009c60 <_printf_common>
 8009e74:	3001      	adds	r0, #1
 8009e76:	d14d      	bne.n	8009f14 <_printf_i+0x1c8>
 8009e78:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7c:	b005      	add	sp, #20
 8009e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e82:	4839      	ldr	r0, [pc, #228]	; (8009f68 <_printf_i+0x21c>)
 8009e84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e88:	6813      	ldr	r3, [r2, #0]
 8009e8a:	6821      	ldr	r1, [r4, #0]
 8009e8c:	1d1d      	adds	r5, r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6015      	str	r5, [r2, #0]
 8009e92:	060a      	lsls	r2, r1, #24
 8009e94:	d50b      	bpl.n	8009eae <_printf_i+0x162>
 8009e96:	07ca      	lsls	r2, r1, #31
 8009e98:	bf44      	itt	mi
 8009e9a:	f041 0120 	orrmi.w	r1, r1, #32
 8009e9e:	6021      	strmi	r1, [r4, #0]
 8009ea0:	b91b      	cbnz	r3, 8009eaa <_printf_i+0x15e>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	f022 0220 	bic.w	r2, r2, #32
 8009ea8:	6022      	str	r2, [r4, #0]
 8009eaa:	2210      	movs	r2, #16
 8009eac:	e7b7      	b.n	8009e1e <_printf_i+0xd2>
 8009eae:	064d      	lsls	r5, r1, #25
 8009eb0:	bf48      	it	mi
 8009eb2:	b29b      	uxthmi	r3, r3
 8009eb4:	e7ef      	b.n	8009e96 <_printf_i+0x14a>
 8009eb6:	4665      	mov	r5, ip
 8009eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ebc:	fb02 3311 	mls	r3, r2, r1, r3
 8009ec0:	5cc3      	ldrb	r3, [r0, r3]
 8009ec2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	d1f5      	bne.n	8009eb8 <_printf_i+0x16c>
 8009ecc:	e7b9      	b.n	8009e42 <_printf_i+0xf6>
 8009ece:	6813      	ldr	r3, [r2, #0]
 8009ed0:	6825      	ldr	r5, [r4, #0]
 8009ed2:	6961      	ldr	r1, [r4, #20]
 8009ed4:	1d18      	adds	r0, r3, #4
 8009ed6:	6010      	str	r0, [r2, #0]
 8009ed8:	0628      	lsls	r0, r5, #24
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	d501      	bpl.n	8009ee2 <_printf_i+0x196>
 8009ede:	6019      	str	r1, [r3, #0]
 8009ee0:	e002      	b.n	8009ee8 <_printf_i+0x19c>
 8009ee2:	066a      	lsls	r2, r5, #25
 8009ee4:	d5fb      	bpl.n	8009ede <_printf_i+0x192>
 8009ee6:	8019      	strh	r1, [r3, #0]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	4665      	mov	r5, ip
 8009eee:	e7b9      	b.n	8009e64 <_printf_i+0x118>
 8009ef0:	6813      	ldr	r3, [r2, #0]
 8009ef2:	1d19      	adds	r1, r3, #4
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	681d      	ldr	r5, [r3, #0]
 8009ef8:	6862      	ldr	r2, [r4, #4]
 8009efa:	2100      	movs	r1, #0
 8009efc:	4628      	mov	r0, r5
 8009efe:	f7f6 f96f 	bl	80001e0 <memchr>
 8009f02:	b108      	cbz	r0, 8009f08 <_printf_i+0x1bc>
 8009f04:	1b40      	subs	r0, r0, r5
 8009f06:	6060      	str	r0, [r4, #4]
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	6123      	str	r3, [r4, #16]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f12:	e7a7      	b.n	8009e64 <_printf_i+0x118>
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	462a      	mov	r2, r5
 8009f18:	4639      	mov	r1, r7
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	47c0      	blx	r8
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d0aa      	beq.n	8009e78 <_printf_i+0x12c>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	079b      	lsls	r3, r3, #30
 8009f26:	d413      	bmi.n	8009f50 <_printf_i+0x204>
 8009f28:	68e0      	ldr	r0, [r4, #12]
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	4298      	cmp	r0, r3
 8009f2e:	bfb8      	it	lt
 8009f30:	4618      	movlt	r0, r3
 8009f32:	e7a3      	b.n	8009e7c <_printf_i+0x130>
 8009f34:	2301      	movs	r3, #1
 8009f36:	464a      	mov	r2, r9
 8009f38:	4639      	mov	r1, r7
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	47c0      	blx	r8
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d09a      	beq.n	8009e78 <_printf_i+0x12c>
 8009f42:	3501      	adds	r5, #1
 8009f44:	68e3      	ldr	r3, [r4, #12]
 8009f46:	9a03      	ldr	r2, [sp, #12]
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	42ab      	cmp	r3, r5
 8009f4c:	dcf2      	bgt.n	8009f34 <_printf_i+0x1e8>
 8009f4e:	e7eb      	b.n	8009f28 <_printf_i+0x1dc>
 8009f50:	2500      	movs	r5, #0
 8009f52:	f104 0919 	add.w	r9, r4, #25
 8009f56:	e7f5      	b.n	8009f44 <_printf_i+0x1f8>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1ac      	bne.n	8009eb6 <_printf_i+0x16a>
 8009f5c:	7803      	ldrb	r3, [r0, #0]
 8009f5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f66:	e76c      	b.n	8009e42 <_printf_i+0xf6>
 8009f68:	0800dbb6 	.word	0x0800dbb6
 8009f6c:	0800dbc7 	.word	0x0800dbc7

08009f70 <_scanf_float>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	469a      	mov	sl, r3
 8009f76:	688b      	ldr	r3, [r1, #8]
 8009f78:	4616      	mov	r6, r2
 8009f7a:	1e5a      	subs	r2, r3, #1
 8009f7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f80:	b087      	sub	sp, #28
 8009f82:	bf83      	ittte	hi
 8009f84:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009f88:	189b      	addhi	r3, r3, r2
 8009f8a:	9301      	strhi	r3, [sp, #4]
 8009f8c:	2300      	movls	r3, #0
 8009f8e:	bf86      	itte	hi
 8009f90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f94:	608b      	strhi	r3, [r1, #8]
 8009f96:	9301      	strls	r3, [sp, #4]
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	4688      	mov	r8, r1
 8009f9c:	f04f 0b00 	mov.w	fp, #0
 8009fa0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009fa4:	f848 3b1c 	str.w	r3, [r8], #28
 8009fa8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009fac:	4607      	mov	r7, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4645      	mov	r5, r8
 8009fb2:	465a      	mov	r2, fp
 8009fb4:	46d9      	mov	r9, fp
 8009fb6:	f8cd b008 	str.w	fp, [sp, #8]
 8009fba:	68a1      	ldr	r1, [r4, #8]
 8009fbc:	b181      	cbz	r1, 8009fe0 <_scanf_float+0x70>
 8009fbe:	6833      	ldr	r3, [r6, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b49      	cmp	r3, #73	; 0x49
 8009fc4:	d071      	beq.n	800a0aa <_scanf_float+0x13a>
 8009fc6:	d84d      	bhi.n	800a064 <_scanf_float+0xf4>
 8009fc8:	2b39      	cmp	r3, #57	; 0x39
 8009fca:	d840      	bhi.n	800a04e <_scanf_float+0xde>
 8009fcc:	2b31      	cmp	r3, #49	; 0x31
 8009fce:	f080 8088 	bcs.w	800a0e2 <_scanf_float+0x172>
 8009fd2:	2b2d      	cmp	r3, #45	; 0x2d
 8009fd4:	f000 8090 	beq.w	800a0f8 <_scanf_float+0x188>
 8009fd8:	d815      	bhi.n	800a006 <_scanf_float+0x96>
 8009fda:	2b2b      	cmp	r3, #43	; 0x2b
 8009fdc:	f000 808c 	beq.w	800a0f8 <_scanf_float+0x188>
 8009fe0:	f1b9 0f00 	cmp.w	r9, #0
 8009fe4:	d003      	beq.n	8009fee <_scanf_float+0x7e>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	3a01      	subs	r2, #1
 8009ff0:	2a01      	cmp	r2, #1
 8009ff2:	f200 80ea 	bhi.w	800a1ca <_scanf_float+0x25a>
 8009ff6:	4545      	cmp	r5, r8
 8009ff8:	f200 80dc 	bhi.w	800a1b4 <_scanf_float+0x244>
 8009ffc:	2601      	movs	r6, #1
 8009ffe:	4630      	mov	r0, r6
 800a000:	b007      	add	sp, #28
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	2b2e      	cmp	r3, #46	; 0x2e
 800a008:	f000 809f 	beq.w	800a14a <_scanf_float+0x1da>
 800a00c:	2b30      	cmp	r3, #48	; 0x30
 800a00e:	d1e7      	bne.n	8009fe0 <_scanf_float+0x70>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a016:	d064      	beq.n	800a0e2 <_scanf_float+0x172>
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a01e:	6020      	str	r0, [r4, #0]
 800a020:	f109 0901 	add.w	r9, r9, #1
 800a024:	b11b      	cbz	r3, 800a02e <_scanf_float+0xbe>
 800a026:	3b01      	subs	r3, #1
 800a028:	3101      	adds	r1, #1
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	60a1      	str	r1, [r4, #8]
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	3b01      	subs	r3, #1
 800a032:	60a3      	str	r3, [r4, #8]
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	3301      	adds	r3, #1
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	6873      	ldr	r3, [r6, #4]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	6073      	str	r3, [r6, #4]
 800a042:	f340 80ac 	ble.w	800a19e <_scanf_float+0x22e>
 800a046:	6833      	ldr	r3, [r6, #0]
 800a048:	3301      	adds	r3, #1
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	e7b5      	b.n	8009fba <_scanf_float+0x4a>
 800a04e:	2b45      	cmp	r3, #69	; 0x45
 800a050:	f000 8085 	beq.w	800a15e <_scanf_float+0x1ee>
 800a054:	2b46      	cmp	r3, #70	; 0x46
 800a056:	d06a      	beq.n	800a12e <_scanf_float+0x1be>
 800a058:	2b41      	cmp	r3, #65	; 0x41
 800a05a:	d1c1      	bne.n	8009fe0 <_scanf_float+0x70>
 800a05c:	2a01      	cmp	r2, #1
 800a05e:	d1bf      	bne.n	8009fe0 <_scanf_float+0x70>
 800a060:	2202      	movs	r2, #2
 800a062:	e046      	b.n	800a0f2 <_scanf_float+0x182>
 800a064:	2b65      	cmp	r3, #101	; 0x65
 800a066:	d07a      	beq.n	800a15e <_scanf_float+0x1ee>
 800a068:	d818      	bhi.n	800a09c <_scanf_float+0x12c>
 800a06a:	2b54      	cmp	r3, #84	; 0x54
 800a06c:	d066      	beq.n	800a13c <_scanf_float+0x1cc>
 800a06e:	d811      	bhi.n	800a094 <_scanf_float+0x124>
 800a070:	2b4e      	cmp	r3, #78	; 0x4e
 800a072:	d1b5      	bne.n	8009fe0 <_scanf_float+0x70>
 800a074:	2a00      	cmp	r2, #0
 800a076:	d146      	bne.n	800a106 <_scanf_float+0x196>
 800a078:	f1b9 0f00 	cmp.w	r9, #0
 800a07c:	d145      	bne.n	800a10a <_scanf_float+0x19a>
 800a07e:	6821      	ldr	r1, [r4, #0]
 800a080:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a084:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a088:	d13f      	bne.n	800a10a <_scanf_float+0x19a>
 800a08a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a08e:	6021      	str	r1, [r4, #0]
 800a090:	2201      	movs	r2, #1
 800a092:	e02e      	b.n	800a0f2 <_scanf_float+0x182>
 800a094:	2b59      	cmp	r3, #89	; 0x59
 800a096:	d01e      	beq.n	800a0d6 <_scanf_float+0x166>
 800a098:	2b61      	cmp	r3, #97	; 0x61
 800a09a:	e7de      	b.n	800a05a <_scanf_float+0xea>
 800a09c:	2b6e      	cmp	r3, #110	; 0x6e
 800a09e:	d0e9      	beq.n	800a074 <_scanf_float+0x104>
 800a0a0:	d815      	bhi.n	800a0ce <_scanf_float+0x15e>
 800a0a2:	2b66      	cmp	r3, #102	; 0x66
 800a0a4:	d043      	beq.n	800a12e <_scanf_float+0x1be>
 800a0a6:	2b69      	cmp	r3, #105	; 0x69
 800a0a8:	d19a      	bne.n	8009fe0 <_scanf_float+0x70>
 800a0aa:	f1bb 0f00 	cmp.w	fp, #0
 800a0ae:	d138      	bne.n	800a122 <_scanf_float+0x1b2>
 800a0b0:	f1b9 0f00 	cmp.w	r9, #0
 800a0b4:	d197      	bne.n	8009fe6 <_scanf_float+0x76>
 800a0b6:	6821      	ldr	r1, [r4, #0]
 800a0b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a0bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a0c0:	d195      	bne.n	8009fee <_scanf_float+0x7e>
 800a0c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a0c6:	6021      	str	r1, [r4, #0]
 800a0c8:	f04f 0b01 	mov.w	fp, #1
 800a0cc:	e011      	b.n	800a0f2 <_scanf_float+0x182>
 800a0ce:	2b74      	cmp	r3, #116	; 0x74
 800a0d0:	d034      	beq.n	800a13c <_scanf_float+0x1cc>
 800a0d2:	2b79      	cmp	r3, #121	; 0x79
 800a0d4:	d184      	bne.n	8009fe0 <_scanf_float+0x70>
 800a0d6:	f1bb 0f07 	cmp.w	fp, #7
 800a0da:	d181      	bne.n	8009fe0 <_scanf_float+0x70>
 800a0dc:	f04f 0b08 	mov.w	fp, #8
 800a0e0:	e007      	b.n	800a0f2 <_scanf_float+0x182>
 800a0e2:	eb12 0f0b 	cmn.w	r2, fp
 800a0e6:	f47f af7b 	bne.w	8009fe0 <_scanf_float+0x70>
 800a0ea:	6821      	ldr	r1, [r4, #0]
 800a0ec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a0f0:	6021      	str	r1, [r4, #0]
 800a0f2:	702b      	strb	r3, [r5, #0]
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	e79a      	b.n	800a02e <_scanf_float+0xbe>
 800a0f8:	6821      	ldr	r1, [r4, #0]
 800a0fa:	0608      	lsls	r0, r1, #24
 800a0fc:	f57f af70 	bpl.w	8009fe0 <_scanf_float+0x70>
 800a100:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a104:	e7f4      	b.n	800a0f0 <_scanf_float+0x180>
 800a106:	2a02      	cmp	r2, #2
 800a108:	d047      	beq.n	800a19a <_scanf_float+0x22a>
 800a10a:	f1bb 0f01 	cmp.w	fp, #1
 800a10e:	d003      	beq.n	800a118 <_scanf_float+0x1a8>
 800a110:	f1bb 0f04 	cmp.w	fp, #4
 800a114:	f47f af64 	bne.w	8009fe0 <_scanf_float+0x70>
 800a118:	f10b 0b01 	add.w	fp, fp, #1
 800a11c:	fa5f fb8b 	uxtb.w	fp, fp
 800a120:	e7e7      	b.n	800a0f2 <_scanf_float+0x182>
 800a122:	f1bb 0f03 	cmp.w	fp, #3
 800a126:	d0f7      	beq.n	800a118 <_scanf_float+0x1a8>
 800a128:	f1bb 0f05 	cmp.w	fp, #5
 800a12c:	e7f2      	b.n	800a114 <_scanf_float+0x1a4>
 800a12e:	f1bb 0f02 	cmp.w	fp, #2
 800a132:	f47f af55 	bne.w	8009fe0 <_scanf_float+0x70>
 800a136:	f04f 0b03 	mov.w	fp, #3
 800a13a:	e7da      	b.n	800a0f2 <_scanf_float+0x182>
 800a13c:	f1bb 0f06 	cmp.w	fp, #6
 800a140:	f47f af4e 	bne.w	8009fe0 <_scanf_float+0x70>
 800a144:	f04f 0b07 	mov.w	fp, #7
 800a148:	e7d3      	b.n	800a0f2 <_scanf_float+0x182>
 800a14a:	6821      	ldr	r1, [r4, #0]
 800a14c:	0588      	lsls	r0, r1, #22
 800a14e:	f57f af47 	bpl.w	8009fe0 <_scanf_float+0x70>
 800a152:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a156:	6021      	str	r1, [r4, #0]
 800a158:	f8cd 9008 	str.w	r9, [sp, #8]
 800a15c:	e7c9      	b.n	800a0f2 <_scanf_float+0x182>
 800a15e:	6821      	ldr	r1, [r4, #0]
 800a160:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a164:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a168:	d006      	beq.n	800a178 <_scanf_float+0x208>
 800a16a:	0548      	lsls	r0, r1, #21
 800a16c:	f57f af38 	bpl.w	8009fe0 <_scanf_float+0x70>
 800a170:	f1b9 0f00 	cmp.w	r9, #0
 800a174:	f43f af3b 	beq.w	8009fee <_scanf_float+0x7e>
 800a178:	0588      	lsls	r0, r1, #22
 800a17a:	bf58      	it	pl
 800a17c:	9802      	ldrpl	r0, [sp, #8]
 800a17e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a182:	bf58      	it	pl
 800a184:	eba9 0000 	subpl.w	r0, r9, r0
 800a188:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a18c:	bf58      	it	pl
 800a18e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a192:	6021      	str	r1, [r4, #0]
 800a194:	f04f 0900 	mov.w	r9, #0
 800a198:	e7ab      	b.n	800a0f2 <_scanf_float+0x182>
 800a19a:	2203      	movs	r2, #3
 800a19c:	e7a9      	b.n	800a0f2 <_scanf_float+0x182>
 800a19e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1a2:	9205      	str	r2, [sp, #20]
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	4798      	blx	r3
 800a1aa:	9a05      	ldr	r2, [sp, #20]
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f43f af04 	beq.w	8009fba <_scanf_float+0x4a>
 800a1b2:	e715      	b.n	8009fe0 <_scanf_float+0x70>
 800a1b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a1bc:	4632      	mov	r2, r6
 800a1be:	4638      	mov	r0, r7
 800a1c0:	4798      	blx	r3
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	e715      	b.n	8009ff6 <_scanf_float+0x86>
 800a1ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a1ce:	2b06      	cmp	r3, #6
 800a1d0:	d80a      	bhi.n	800a1e8 <_scanf_float+0x278>
 800a1d2:	f1bb 0f02 	cmp.w	fp, #2
 800a1d6:	d968      	bls.n	800a2aa <_scanf_float+0x33a>
 800a1d8:	f1ab 0b03 	sub.w	fp, fp, #3
 800a1dc:	fa5f fb8b 	uxtb.w	fp, fp
 800a1e0:	eba5 0b0b 	sub.w	fp, r5, fp
 800a1e4:	455d      	cmp	r5, fp
 800a1e6:	d14b      	bne.n	800a280 <_scanf_float+0x310>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	05da      	lsls	r2, r3, #23
 800a1ec:	d51f      	bpl.n	800a22e <_scanf_float+0x2be>
 800a1ee:	055b      	lsls	r3, r3, #21
 800a1f0:	d468      	bmi.n	800a2c4 <_scanf_float+0x354>
 800a1f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	2965      	cmp	r1, #101	; 0x65
 800a1fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1fe:	f105 3bff 	add.w	fp, r5, #4294967295
 800a202:	6123      	str	r3, [r4, #16]
 800a204:	d00d      	beq.n	800a222 <_scanf_float+0x2b2>
 800a206:	2945      	cmp	r1, #69	; 0x45
 800a208:	d00b      	beq.n	800a222 <_scanf_float+0x2b2>
 800a20a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a20e:	4632      	mov	r2, r6
 800a210:	4638      	mov	r0, r7
 800a212:	4798      	blx	r3
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	f1a5 0b02 	sub.w	fp, r5, #2
 800a220:	6123      	str	r3, [r4, #16]
 800a222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a226:	4632      	mov	r2, r6
 800a228:	4638      	mov	r0, r7
 800a22a:	4798      	blx	r3
 800a22c:	465d      	mov	r5, fp
 800a22e:	6826      	ldr	r6, [r4, #0]
 800a230:	f016 0610 	ands.w	r6, r6, #16
 800a234:	d17a      	bne.n	800a32c <_scanf_float+0x3bc>
 800a236:	702e      	strb	r6, [r5, #0]
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a242:	d142      	bne.n	800a2ca <_scanf_float+0x35a>
 800a244:	9b02      	ldr	r3, [sp, #8]
 800a246:	eba9 0303 	sub.w	r3, r9, r3
 800a24a:	425a      	negs	r2, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d149      	bne.n	800a2e4 <_scanf_float+0x374>
 800a250:	2200      	movs	r2, #0
 800a252:	4641      	mov	r1, r8
 800a254:	4638      	mov	r0, r7
 800a256:	f000 ff1f 	bl	800b098 <_strtod_r>
 800a25a:	6825      	ldr	r5, [r4, #0]
 800a25c:	f8da 3000 	ldr.w	r3, [sl]
 800a260:	f015 0f02 	tst.w	r5, #2
 800a264:	f103 0204 	add.w	r2, r3, #4
 800a268:	ec59 8b10 	vmov	r8, r9, d0
 800a26c:	f8ca 2000 	str.w	r2, [sl]
 800a270:	d043      	beq.n	800a2fa <_scanf_float+0x38a>
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	e9c3 8900 	strd	r8, r9, [r3]
 800a278:	68e3      	ldr	r3, [r4, #12]
 800a27a:	3301      	adds	r3, #1
 800a27c:	60e3      	str	r3, [r4, #12]
 800a27e:	e6be      	b.n	8009ffe <_scanf_float+0x8e>
 800a280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a284:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a288:	4632      	mov	r2, r6
 800a28a:	4638      	mov	r0, r7
 800a28c:	4798      	blx	r3
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	3b01      	subs	r3, #1
 800a292:	6123      	str	r3, [r4, #16]
 800a294:	e7a6      	b.n	800a1e4 <_scanf_float+0x274>
 800a296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a29a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a29e:	4632      	mov	r2, r6
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	4798      	blx	r3
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	6123      	str	r3, [r4, #16]
 800a2aa:	4545      	cmp	r5, r8
 800a2ac:	d8f3      	bhi.n	800a296 <_scanf_float+0x326>
 800a2ae:	e6a5      	b.n	8009ffc <_scanf_float+0x8c>
 800a2b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	4798      	blx	r3
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	4545      	cmp	r5, r8
 800a2c6:	d8f3      	bhi.n	800a2b0 <_scanf_float+0x340>
 800a2c8:	e698      	b.n	8009ffc <_scanf_float+0x8c>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0bf      	beq.n	800a250 <_scanf_float+0x2e0>
 800a2d0:	9904      	ldr	r1, [sp, #16]
 800a2d2:	230a      	movs	r3, #10
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	3101      	adds	r1, #1
 800a2d8:	4638      	mov	r0, r7
 800a2da:	f000 ff69 	bl	800b1b0 <_strtol_r>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	9d04      	ldr	r5, [sp, #16]
 800a2e2:	1ac2      	subs	r2, r0, r3
 800a2e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2e8:	429d      	cmp	r5, r3
 800a2ea:	bf28      	it	cs
 800a2ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a2f0:	490f      	ldr	r1, [pc, #60]	; (800a330 <_scanf_float+0x3c0>)
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 f8a0 	bl	800a438 <siprintf>
 800a2f8:	e7aa      	b.n	800a250 <_scanf_float+0x2e0>
 800a2fa:	f015 0504 	ands.w	r5, r5, #4
 800a2fe:	d1b8      	bne.n	800a272 <_scanf_float+0x302>
 800a300:	681f      	ldr	r7, [r3, #0]
 800a302:	ee10 2a10 	vmov	r2, s0
 800a306:	464b      	mov	r3, r9
 800a308:	ee10 0a10 	vmov	r0, s0
 800a30c:	4649      	mov	r1, r9
 800a30e:	f7f6 fc0d 	bl	8000b2c <__aeabi_dcmpun>
 800a312:	b128      	cbz	r0, 800a320 <_scanf_float+0x3b0>
 800a314:	4628      	mov	r0, r5
 800a316:	f000 f889 	bl	800a42c <nanf>
 800a31a:	ed87 0a00 	vstr	s0, [r7]
 800a31e:	e7ab      	b.n	800a278 <_scanf_float+0x308>
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	f7f6 fc60 	bl	8000be8 <__aeabi_d2f>
 800a328:	6038      	str	r0, [r7, #0]
 800a32a:	e7a5      	b.n	800a278 <_scanf_float+0x308>
 800a32c:	2600      	movs	r6, #0
 800a32e:	e666      	b.n	8009ffe <_scanf_float+0x8e>
 800a330:	0800dbd8 	.word	0x0800dbd8

0800a334 <iprintf>:
 800a334:	b40f      	push	{r0, r1, r2, r3}
 800a336:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <iprintf+0x2c>)
 800a338:	b513      	push	{r0, r1, r4, lr}
 800a33a:	681c      	ldr	r4, [r3, #0]
 800a33c:	b124      	cbz	r4, 800a348 <iprintf+0x14>
 800a33e:	69a3      	ldr	r3, [r4, #24]
 800a340:	b913      	cbnz	r3, 800a348 <iprintf+0x14>
 800a342:	4620      	mov	r0, r4
 800a344:	f001 ff3c 	bl	800c1c0 <__sinit>
 800a348:	ab05      	add	r3, sp, #20
 800a34a:	9a04      	ldr	r2, [sp, #16]
 800a34c:	68a1      	ldr	r1, [r4, #8]
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	4620      	mov	r0, r4
 800a352:	f003 f9a9 	bl	800d6a8 <_vfiprintf_r>
 800a356:	b002      	add	sp, #8
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	b004      	add	sp, #16
 800a35e:	4770      	bx	lr
 800a360:	20000040 	.word	0x20000040

0800a364 <_puts_r>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	460e      	mov	r6, r1
 800a368:	4605      	mov	r5, r0
 800a36a:	b118      	cbz	r0, 800a374 <_puts_r+0x10>
 800a36c:	6983      	ldr	r3, [r0, #24]
 800a36e:	b90b      	cbnz	r3, 800a374 <_puts_r+0x10>
 800a370:	f001 ff26 	bl	800c1c0 <__sinit>
 800a374:	69ab      	ldr	r3, [r5, #24]
 800a376:	68ac      	ldr	r4, [r5, #8]
 800a378:	b913      	cbnz	r3, 800a380 <_puts_r+0x1c>
 800a37a:	4628      	mov	r0, r5
 800a37c:	f001 ff20 	bl	800c1c0 <__sinit>
 800a380:	4b23      	ldr	r3, [pc, #140]	; (800a410 <_puts_r+0xac>)
 800a382:	429c      	cmp	r4, r3
 800a384:	d117      	bne.n	800a3b6 <_puts_r+0x52>
 800a386:	686c      	ldr	r4, [r5, #4]
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	071b      	lsls	r3, r3, #28
 800a38c:	d51d      	bpl.n	800a3ca <_puts_r+0x66>
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	b1db      	cbz	r3, 800a3ca <_puts_r+0x66>
 800a392:	3e01      	subs	r6, #1
 800a394:	68a3      	ldr	r3, [r4, #8]
 800a396:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a39a:	3b01      	subs	r3, #1
 800a39c:	60a3      	str	r3, [r4, #8]
 800a39e:	b9e9      	cbnz	r1, 800a3dc <_puts_r+0x78>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	da2e      	bge.n	800a402 <_puts_r+0x9e>
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	210a      	movs	r1, #10
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f000 ff13 	bl	800b1d4 <__swbuf_r>
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d011      	beq.n	800a3d6 <_puts_r+0x72>
 800a3b2:	200a      	movs	r0, #10
 800a3b4:	e011      	b.n	800a3da <_puts_r+0x76>
 800a3b6:	4b17      	ldr	r3, [pc, #92]	; (800a414 <_puts_r+0xb0>)
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d101      	bne.n	800a3c0 <_puts_r+0x5c>
 800a3bc:	68ac      	ldr	r4, [r5, #8]
 800a3be:	e7e3      	b.n	800a388 <_puts_r+0x24>
 800a3c0:	4b15      	ldr	r3, [pc, #84]	; (800a418 <_puts_r+0xb4>)
 800a3c2:	429c      	cmp	r4, r3
 800a3c4:	bf08      	it	eq
 800a3c6:	68ec      	ldreq	r4, [r5, #12]
 800a3c8:	e7de      	b.n	800a388 <_puts_r+0x24>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f000 ff53 	bl	800b278 <__swsetup_r>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d0dd      	beq.n	800a392 <_puts_r+0x2e>
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	da04      	bge.n	800a3ea <_puts_r+0x86>
 800a3e0:	69a2      	ldr	r2, [r4, #24]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	dc06      	bgt.n	800a3f4 <_puts_r+0x90>
 800a3e6:	290a      	cmp	r1, #10
 800a3e8:	d004      	beq.n	800a3f4 <_puts_r+0x90>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	6022      	str	r2, [r4, #0]
 800a3f0:	7019      	strb	r1, [r3, #0]
 800a3f2:	e7cf      	b.n	800a394 <_puts_r+0x30>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f000 feec 	bl	800b1d4 <__swbuf_r>
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d1c9      	bne.n	800a394 <_puts_r+0x30>
 800a400:	e7e9      	b.n	800a3d6 <_puts_r+0x72>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	200a      	movs	r0, #10
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	7018      	strb	r0, [r3, #0]
 800a40c:	e7e5      	b.n	800a3da <_puts_r+0x76>
 800a40e:	bf00      	nop
 800a410:	0800dc60 	.word	0x0800dc60
 800a414:	0800dc80 	.word	0x0800dc80
 800a418:	0800dc40 	.word	0x0800dc40

0800a41c <puts>:
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <puts+0xc>)
 800a41e:	4601      	mov	r1, r0
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	f7ff bf9f 	b.w	800a364 <_puts_r>
 800a426:	bf00      	nop
 800a428:	20000040 	.word	0x20000040

0800a42c <nanf>:
 800a42c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a434 <nanf+0x8>
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	7fc00000 	.word	0x7fc00000

0800a438 <siprintf>:
 800a438:	b40e      	push	{r1, r2, r3}
 800a43a:	b500      	push	{lr}
 800a43c:	b09c      	sub	sp, #112	; 0x70
 800a43e:	ab1d      	add	r3, sp, #116	; 0x74
 800a440:	9002      	str	r0, [sp, #8]
 800a442:	9006      	str	r0, [sp, #24]
 800a444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a448:	4809      	ldr	r0, [pc, #36]	; (800a470 <siprintf+0x38>)
 800a44a:	9107      	str	r1, [sp, #28]
 800a44c:	9104      	str	r1, [sp, #16]
 800a44e:	4909      	ldr	r1, [pc, #36]	; (800a474 <siprintf+0x3c>)
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	9105      	str	r1, [sp, #20]
 800a456:	6800      	ldr	r0, [r0, #0]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	a902      	add	r1, sp, #8
 800a45c:	f003 f802 	bl	800d464 <_svfiprintf_r>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	b01c      	add	sp, #112	; 0x70
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	b003      	add	sp, #12
 800a46e:	4770      	bx	lr
 800a470:	20000040 	.word	0x20000040
 800a474:	ffff0208 	.word	0xffff0208

0800a478 <sulp>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	4604      	mov	r4, r0
 800a47c:	460d      	mov	r5, r1
 800a47e:	ec45 4b10 	vmov	d0, r4, r5
 800a482:	4616      	mov	r6, r2
 800a484:	f002 fdaa 	bl	800cfdc <__ulp>
 800a488:	ec51 0b10 	vmov	r0, r1, d0
 800a48c:	b17e      	cbz	r6, 800a4ae <sulp+0x36>
 800a48e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a492:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd09      	ble.n	800a4ae <sulp+0x36>
 800a49a:	051b      	lsls	r3, r3, #20
 800a49c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4a0:	2400      	movs	r4, #0
 800a4a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	f7f6 f8a5 	bl	80005f8 <__aeabi_dmul>
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}

0800a4b0 <_strtod_l>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	461f      	mov	r7, r3
 800a4b6:	b0a1      	sub	sp, #132	; 0x84
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4681      	mov	r9, r0
 800a4bc:	4638      	mov	r0, r7
 800a4be:	460e      	mov	r6, r1
 800a4c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4c2:	931c      	str	r3, [sp, #112]	; 0x70
 800a4c4:	f002 fa2f 	bl	800c926 <__localeconv_l>
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	6800      	ldr	r0, [r0, #0]
 800a4cc:	f7f5 fe80 	bl	80001d0 <strlen>
 800a4d0:	f04f 0a00 	mov.w	sl, #0
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	f04f 0b00 	mov.w	fp, #0
 800a4da:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	2a0d      	cmp	r2, #13
 800a4e2:	d832      	bhi.n	800a54a <_strtod_l+0x9a>
 800a4e4:	2a09      	cmp	r2, #9
 800a4e6:	d236      	bcs.n	800a556 <_strtod_l+0xa6>
 800a4e8:	2a00      	cmp	r2, #0
 800a4ea:	d03e      	beq.n	800a56a <_strtod_l+0xba>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a4f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a4f2:	782b      	ldrb	r3, [r5, #0]
 800a4f4:	2b30      	cmp	r3, #48	; 0x30
 800a4f6:	f040 80ac 	bne.w	800a652 <_strtod_l+0x1a2>
 800a4fa:	786b      	ldrb	r3, [r5, #1]
 800a4fc:	2b58      	cmp	r3, #88	; 0x58
 800a4fe:	d001      	beq.n	800a504 <_strtod_l+0x54>
 800a500:	2b78      	cmp	r3, #120	; 0x78
 800a502:	d167      	bne.n	800a5d4 <_strtod_l+0x124>
 800a504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	ab1c      	add	r3, sp, #112	; 0x70
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	9702      	str	r7, [sp, #8]
 800a50e:	ab1d      	add	r3, sp, #116	; 0x74
 800a510:	4a88      	ldr	r2, [pc, #544]	; (800a734 <_strtod_l+0x284>)
 800a512:	a91b      	add	r1, sp, #108	; 0x6c
 800a514:	4648      	mov	r0, r9
 800a516:	f001 ff2c 	bl	800c372 <__gethex>
 800a51a:	f010 0407 	ands.w	r4, r0, #7
 800a51e:	4606      	mov	r6, r0
 800a520:	d005      	beq.n	800a52e <_strtod_l+0x7e>
 800a522:	2c06      	cmp	r4, #6
 800a524:	d12b      	bne.n	800a57e <_strtod_l+0xce>
 800a526:	3501      	adds	r5, #1
 800a528:	2300      	movs	r3, #0
 800a52a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a52c:	930d      	str	r3, [sp, #52]	; 0x34
 800a52e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 859a 	bne.w	800b06a <_strtod_l+0xbba>
 800a536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a538:	b1e3      	cbz	r3, 800a574 <_strtod_l+0xc4>
 800a53a:	4652      	mov	r2, sl
 800a53c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a540:	ec43 2b10 	vmov	d0, r2, r3
 800a544:	b021      	add	sp, #132	; 0x84
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	2a2b      	cmp	r2, #43	; 0x2b
 800a54c:	d015      	beq.n	800a57a <_strtod_l+0xca>
 800a54e:	2a2d      	cmp	r2, #45	; 0x2d
 800a550:	d004      	beq.n	800a55c <_strtod_l+0xac>
 800a552:	2a20      	cmp	r2, #32
 800a554:	d1ca      	bne.n	800a4ec <_strtod_l+0x3c>
 800a556:	3301      	adds	r3, #1
 800a558:	931b      	str	r3, [sp, #108]	; 0x6c
 800a55a:	e7bf      	b.n	800a4dc <_strtod_l+0x2c>
 800a55c:	2201      	movs	r2, #1
 800a55e:	920d      	str	r2, [sp, #52]	; 0x34
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	921b      	str	r2, [sp, #108]	; 0x6c
 800a564:	785b      	ldrb	r3, [r3, #1]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1c2      	bne.n	800a4f0 <_strtod_l+0x40>
 800a56a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a56c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f040 8579 	bne.w	800b066 <_strtod_l+0xbb6>
 800a574:	4652      	mov	r2, sl
 800a576:	465b      	mov	r3, fp
 800a578:	e7e2      	b.n	800a540 <_strtod_l+0x90>
 800a57a:	2200      	movs	r2, #0
 800a57c:	e7ef      	b.n	800a55e <_strtod_l+0xae>
 800a57e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a580:	b13a      	cbz	r2, 800a592 <_strtod_l+0xe2>
 800a582:	2135      	movs	r1, #53	; 0x35
 800a584:	a81e      	add	r0, sp, #120	; 0x78
 800a586:	f002 fe21 	bl	800d1cc <__copybits>
 800a58a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a58c:	4648      	mov	r0, r9
 800a58e:	f002 fa8d 	bl	800caac <_Bfree>
 800a592:	3c01      	subs	r4, #1
 800a594:	2c04      	cmp	r4, #4
 800a596:	d806      	bhi.n	800a5a6 <_strtod_l+0xf6>
 800a598:	e8df f004 	tbb	[pc, r4]
 800a59c:	1714030a 	.word	0x1714030a
 800a5a0:	0a          	.byte	0x0a
 800a5a1:	00          	.byte	0x00
 800a5a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a5a6:	0730      	lsls	r0, r6, #28
 800a5a8:	d5c1      	bpl.n	800a52e <_strtod_l+0x7e>
 800a5aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a5ae:	e7be      	b.n	800a52e <_strtod_l+0x7e>
 800a5b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a5b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a5b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5c2:	e7f0      	b.n	800a5a6 <_strtod_l+0xf6>
 800a5c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a738 <_strtod_l+0x288>
 800a5c8:	e7ed      	b.n	800a5a6 <_strtod_l+0xf6>
 800a5ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a5ce:	f04f 3aff 	mov.w	sl, #4294967295
 800a5d2:	e7e8      	b.n	800a5a6 <_strtod_l+0xf6>
 800a5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	2b30      	cmp	r3, #48	; 0x30
 800a5de:	d0f9      	beq.n	800a5d4 <_strtod_l+0x124>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0a4      	beq.n	800a52e <_strtod_l+0x7e>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	2500      	movs	r5, #0
 800a5e8:	9306      	str	r3, [sp, #24]
 800a5ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5ec:	9308      	str	r3, [sp, #32]
 800a5ee:	9507      	str	r5, [sp, #28]
 800a5f0:	9505      	str	r5, [sp, #20]
 800a5f2:	220a      	movs	r2, #10
 800a5f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a5f6:	7807      	ldrb	r7, [r0, #0]
 800a5f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a5fc:	b2d9      	uxtb	r1, r3
 800a5fe:	2909      	cmp	r1, #9
 800a600:	d929      	bls.n	800a656 <_strtod_l+0x1a6>
 800a602:	4622      	mov	r2, r4
 800a604:	f8d8 1000 	ldr.w	r1, [r8]
 800a608:	f003 f9b7 	bl	800d97a <strncmp>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d031      	beq.n	800a674 <_strtod_l+0x1c4>
 800a610:	2000      	movs	r0, #0
 800a612:	9c05      	ldr	r4, [sp, #20]
 800a614:	9004      	str	r0, [sp, #16]
 800a616:	463b      	mov	r3, r7
 800a618:	4602      	mov	r2, r0
 800a61a:	2b65      	cmp	r3, #101	; 0x65
 800a61c:	d001      	beq.n	800a622 <_strtod_l+0x172>
 800a61e:	2b45      	cmp	r3, #69	; 0x45
 800a620:	d114      	bne.n	800a64c <_strtod_l+0x19c>
 800a622:	b924      	cbnz	r4, 800a62e <_strtod_l+0x17e>
 800a624:	b910      	cbnz	r0, 800a62c <_strtod_l+0x17c>
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d09e      	beq.n	800a56a <_strtod_l+0xba>
 800a62c:	2400      	movs	r4, #0
 800a62e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a630:	1c73      	adds	r3, r6, #1
 800a632:	931b      	str	r3, [sp, #108]	; 0x6c
 800a634:	7873      	ldrb	r3, [r6, #1]
 800a636:	2b2b      	cmp	r3, #43	; 0x2b
 800a638:	d078      	beq.n	800a72c <_strtod_l+0x27c>
 800a63a:	2b2d      	cmp	r3, #45	; 0x2d
 800a63c:	d070      	beq.n	800a720 <_strtod_l+0x270>
 800a63e:	f04f 0c00 	mov.w	ip, #0
 800a642:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a646:	2f09      	cmp	r7, #9
 800a648:	d97c      	bls.n	800a744 <_strtod_l+0x294>
 800a64a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a64c:	f04f 0e00 	mov.w	lr, #0
 800a650:	e09a      	b.n	800a788 <_strtod_l+0x2d8>
 800a652:	2300      	movs	r3, #0
 800a654:	e7c7      	b.n	800a5e6 <_strtod_l+0x136>
 800a656:	9905      	ldr	r1, [sp, #20]
 800a658:	2908      	cmp	r1, #8
 800a65a:	bfdd      	ittte	le
 800a65c:	9907      	ldrle	r1, [sp, #28]
 800a65e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a662:	9307      	strle	r3, [sp, #28]
 800a664:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a668:	9b05      	ldr	r3, [sp, #20]
 800a66a:	3001      	adds	r0, #1
 800a66c:	3301      	adds	r3, #1
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	901b      	str	r0, [sp, #108]	; 0x6c
 800a672:	e7bf      	b.n	800a5f4 <_strtod_l+0x144>
 800a674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a676:	191a      	adds	r2, r3, r4
 800a678:	921b      	str	r2, [sp, #108]	; 0x6c
 800a67a:	9a05      	ldr	r2, [sp, #20]
 800a67c:	5d1b      	ldrb	r3, [r3, r4]
 800a67e:	2a00      	cmp	r2, #0
 800a680:	d037      	beq.n	800a6f2 <_strtod_l+0x242>
 800a682:	9c05      	ldr	r4, [sp, #20]
 800a684:	4602      	mov	r2, r0
 800a686:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a68a:	2909      	cmp	r1, #9
 800a68c:	d913      	bls.n	800a6b6 <_strtod_l+0x206>
 800a68e:	2101      	movs	r1, #1
 800a690:	9104      	str	r1, [sp, #16]
 800a692:	e7c2      	b.n	800a61a <_strtod_l+0x16a>
 800a694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	921b      	str	r2, [sp, #108]	; 0x6c
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	3001      	adds	r0, #1
 800a69e:	2b30      	cmp	r3, #48	; 0x30
 800a6a0:	d0f8      	beq.n	800a694 <_strtod_l+0x1e4>
 800a6a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a6a6:	2a08      	cmp	r2, #8
 800a6a8:	f200 84e4 	bhi.w	800b074 <_strtod_l+0xbc4>
 800a6ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a6ae:	9208      	str	r2, [sp, #32]
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a6ba:	f100 0101 	add.w	r1, r0, #1
 800a6be:	d012      	beq.n	800a6e6 <_strtod_l+0x236>
 800a6c0:	440a      	add	r2, r1
 800a6c2:	eb00 0c04 	add.w	ip, r0, r4
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	270a      	movs	r7, #10
 800a6ca:	458c      	cmp	ip, r1
 800a6cc:	d113      	bne.n	800a6f6 <_strtod_l+0x246>
 800a6ce:	1821      	adds	r1, r4, r0
 800a6d0:	2908      	cmp	r1, #8
 800a6d2:	f104 0401 	add.w	r4, r4, #1
 800a6d6:	4404      	add	r4, r0
 800a6d8:	dc19      	bgt.n	800a70e <_strtod_l+0x25e>
 800a6da:	9b07      	ldr	r3, [sp, #28]
 800a6dc:	210a      	movs	r1, #10
 800a6de:	fb01 e303 	mla	r3, r1, r3, lr
 800a6e2:	9307      	str	r3, [sp, #28]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6e8:	1c58      	adds	r0, r3, #1
 800a6ea:	901b      	str	r0, [sp, #108]	; 0x6c
 800a6ec:	785b      	ldrb	r3, [r3, #1]
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	e7c9      	b.n	800a686 <_strtod_l+0x1d6>
 800a6f2:	9805      	ldr	r0, [sp, #20]
 800a6f4:	e7d3      	b.n	800a69e <_strtod_l+0x1ee>
 800a6f6:	2908      	cmp	r1, #8
 800a6f8:	f101 0101 	add.w	r1, r1, #1
 800a6fc:	dc03      	bgt.n	800a706 <_strtod_l+0x256>
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	437b      	muls	r3, r7
 800a702:	9307      	str	r3, [sp, #28]
 800a704:	e7e1      	b.n	800a6ca <_strtod_l+0x21a>
 800a706:	2910      	cmp	r1, #16
 800a708:	bfd8      	it	le
 800a70a:	437d      	mulle	r5, r7
 800a70c:	e7dd      	b.n	800a6ca <_strtod_l+0x21a>
 800a70e:	2c10      	cmp	r4, #16
 800a710:	bfdc      	itt	le
 800a712:	210a      	movle	r1, #10
 800a714:	fb01 e505 	mlale	r5, r1, r5, lr
 800a718:	e7e4      	b.n	800a6e4 <_strtod_l+0x234>
 800a71a:	2301      	movs	r3, #1
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	e781      	b.n	800a624 <_strtod_l+0x174>
 800a720:	f04f 0c01 	mov.w	ip, #1
 800a724:	1cb3      	adds	r3, r6, #2
 800a726:	931b      	str	r3, [sp, #108]	; 0x6c
 800a728:	78b3      	ldrb	r3, [r6, #2]
 800a72a:	e78a      	b.n	800a642 <_strtod_l+0x192>
 800a72c:	f04f 0c00 	mov.w	ip, #0
 800a730:	e7f8      	b.n	800a724 <_strtod_l+0x274>
 800a732:	bf00      	nop
 800a734:	0800dbe0 	.word	0x0800dbe0
 800a738:	7ff00000 	.word	0x7ff00000
 800a73c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a73e:	1c5f      	adds	r7, r3, #1
 800a740:	971b      	str	r7, [sp, #108]	; 0x6c
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	2b30      	cmp	r3, #48	; 0x30
 800a746:	d0f9      	beq.n	800a73c <_strtod_l+0x28c>
 800a748:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a74c:	2f08      	cmp	r7, #8
 800a74e:	f63f af7d 	bhi.w	800a64c <_strtod_l+0x19c>
 800a752:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a758:	930a      	str	r3, [sp, #40]	; 0x28
 800a75a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a75c:	1c5f      	adds	r7, r3, #1
 800a75e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a760:	785b      	ldrb	r3, [r3, #1]
 800a762:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a766:	f1b8 0f09 	cmp.w	r8, #9
 800a76a:	d937      	bls.n	800a7dc <_strtod_l+0x32c>
 800a76c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a76e:	1a7f      	subs	r7, r7, r1
 800a770:	2f08      	cmp	r7, #8
 800a772:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a776:	dc37      	bgt.n	800a7e8 <_strtod_l+0x338>
 800a778:	45be      	cmp	lr, r7
 800a77a:	bfa8      	it	ge
 800a77c:	46be      	movge	lr, r7
 800a77e:	f1bc 0f00 	cmp.w	ip, #0
 800a782:	d001      	beq.n	800a788 <_strtod_l+0x2d8>
 800a784:	f1ce 0e00 	rsb	lr, lr, #0
 800a788:	2c00      	cmp	r4, #0
 800a78a:	d151      	bne.n	800a830 <_strtod_l+0x380>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f47f aece 	bne.w	800a52e <_strtod_l+0x7e>
 800a792:	9a06      	ldr	r2, [sp, #24]
 800a794:	2a00      	cmp	r2, #0
 800a796:	f47f aeca 	bne.w	800a52e <_strtod_l+0x7e>
 800a79a:	9a04      	ldr	r2, [sp, #16]
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	f47f aee4 	bne.w	800a56a <_strtod_l+0xba>
 800a7a2:	2b4e      	cmp	r3, #78	; 0x4e
 800a7a4:	d027      	beq.n	800a7f6 <_strtod_l+0x346>
 800a7a6:	dc21      	bgt.n	800a7ec <_strtod_l+0x33c>
 800a7a8:	2b49      	cmp	r3, #73	; 0x49
 800a7aa:	f47f aede 	bne.w	800a56a <_strtod_l+0xba>
 800a7ae:	49a0      	ldr	r1, [pc, #640]	; (800aa30 <_strtod_l+0x580>)
 800a7b0:	a81b      	add	r0, sp, #108	; 0x6c
 800a7b2:	f002 f811 	bl	800c7d8 <__match>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f43f aed7 	beq.w	800a56a <_strtod_l+0xba>
 800a7bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7be:	499d      	ldr	r1, [pc, #628]	; (800aa34 <_strtod_l+0x584>)
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	a81b      	add	r0, sp, #108	; 0x6c
 800a7c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7c6:	f002 f807 	bl	800c7d8 <__match>
 800a7ca:	b910      	cbnz	r0, 800a7d2 <_strtod_l+0x322>
 800a7cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800aa48 <_strtod_l+0x598>
 800a7d6:	f04f 0a00 	mov.w	sl, #0
 800a7da:	e6a8      	b.n	800a52e <_strtod_l+0x7e>
 800a7dc:	210a      	movs	r1, #10
 800a7de:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a7e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a7e6:	e7b8      	b.n	800a75a <_strtod_l+0x2aa>
 800a7e8:	46be      	mov	lr, r7
 800a7ea:	e7c8      	b.n	800a77e <_strtod_l+0x2ce>
 800a7ec:	2b69      	cmp	r3, #105	; 0x69
 800a7ee:	d0de      	beq.n	800a7ae <_strtod_l+0x2fe>
 800a7f0:	2b6e      	cmp	r3, #110	; 0x6e
 800a7f2:	f47f aeba 	bne.w	800a56a <_strtod_l+0xba>
 800a7f6:	4990      	ldr	r1, [pc, #576]	; (800aa38 <_strtod_l+0x588>)
 800a7f8:	a81b      	add	r0, sp, #108	; 0x6c
 800a7fa:	f001 ffed 	bl	800c7d8 <__match>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f43f aeb3 	beq.w	800a56a <_strtod_l+0xba>
 800a804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b28      	cmp	r3, #40	; 0x28
 800a80a:	d10e      	bne.n	800a82a <_strtod_l+0x37a>
 800a80c:	aa1e      	add	r2, sp, #120	; 0x78
 800a80e:	498b      	ldr	r1, [pc, #556]	; (800aa3c <_strtod_l+0x58c>)
 800a810:	a81b      	add	r0, sp, #108	; 0x6c
 800a812:	f001 fff5 	bl	800c800 <__hexnan>
 800a816:	2805      	cmp	r0, #5
 800a818:	d107      	bne.n	800a82a <_strtod_l+0x37a>
 800a81a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a81c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a820:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a824:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a828:	e681      	b.n	800a52e <_strtod_l+0x7e>
 800a82a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800aa50 <_strtod_l+0x5a0>
 800a82e:	e7d2      	b.n	800a7d6 <_strtod_l+0x326>
 800a830:	ebae 0302 	sub.w	r3, lr, r2
 800a834:	9306      	str	r3, [sp, #24]
 800a836:	9b05      	ldr	r3, [sp, #20]
 800a838:	9807      	ldr	r0, [sp, #28]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bf08      	it	eq
 800a83e:	4623      	moveq	r3, r4
 800a840:	2c10      	cmp	r4, #16
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	46a0      	mov	r8, r4
 800a846:	bfa8      	it	ge
 800a848:	f04f 0810 	movge.w	r8, #16
 800a84c:	f7f5 fe5a 	bl	8000504 <__aeabi_ui2d>
 800a850:	2c09      	cmp	r4, #9
 800a852:	4682      	mov	sl, r0
 800a854:	468b      	mov	fp, r1
 800a856:	dc13      	bgt.n	800a880 <_strtod_l+0x3d0>
 800a858:	9b06      	ldr	r3, [sp, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f43f ae67 	beq.w	800a52e <_strtod_l+0x7e>
 800a860:	9b06      	ldr	r3, [sp, #24]
 800a862:	dd7a      	ble.n	800a95a <_strtod_l+0x4aa>
 800a864:	2b16      	cmp	r3, #22
 800a866:	dc61      	bgt.n	800a92c <_strtod_l+0x47c>
 800a868:	4a75      	ldr	r2, [pc, #468]	; (800aa40 <_strtod_l+0x590>)
 800a86a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a86e:	e9de 0100 	ldrd	r0, r1, [lr]
 800a872:	4652      	mov	r2, sl
 800a874:	465b      	mov	r3, fp
 800a876:	f7f5 febf 	bl	80005f8 <__aeabi_dmul>
 800a87a:	4682      	mov	sl, r0
 800a87c:	468b      	mov	fp, r1
 800a87e:	e656      	b.n	800a52e <_strtod_l+0x7e>
 800a880:	4b6f      	ldr	r3, [pc, #444]	; (800aa40 <_strtod_l+0x590>)
 800a882:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a886:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a88a:	f7f5 feb5 	bl	80005f8 <__aeabi_dmul>
 800a88e:	4606      	mov	r6, r0
 800a890:	4628      	mov	r0, r5
 800a892:	460f      	mov	r7, r1
 800a894:	f7f5 fe36 	bl	8000504 <__aeabi_ui2d>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	2c0f      	cmp	r4, #15
 800a8a6:	4682      	mov	sl, r0
 800a8a8:	468b      	mov	fp, r1
 800a8aa:	ddd5      	ble.n	800a858 <_strtod_l+0x3a8>
 800a8ac:	9b06      	ldr	r3, [sp, #24]
 800a8ae:	eba4 0808 	sub.w	r8, r4, r8
 800a8b2:	4498      	add	r8, r3
 800a8b4:	f1b8 0f00 	cmp.w	r8, #0
 800a8b8:	f340 8096 	ble.w	800a9e8 <_strtod_l+0x538>
 800a8bc:	f018 030f 	ands.w	r3, r8, #15
 800a8c0:	d00a      	beq.n	800a8d8 <_strtod_l+0x428>
 800a8c2:	495f      	ldr	r1, [pc, #380]	; (800aa40 <_strtod_l+0x590>)
 800a8c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8c8:	4652      	mov	r2, sl
 800a8ca:	465b      	mov	r3, fp
 800a8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8d0:	f7f5 fe92 	bl	80005f8 <__aeabi_dmul>
 800a8d4:	4682      	mov	sl, r0
 800a8d6:	468b      	mov	fp, r1
 800a8d8:	f038 080f 	bics.w	r8, r8, #15
 800a8dc:	d073      	beq.n	800a9c6 <_strtod_l+0x516>
 800a8de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a8e2:	dd47      	ble.n	800a974 <_strtod_l+0x4c4>
 800a8e4:	2400      	movs	r4, #0
 800a8e6:	46a0      	mov	r8, r4
 800a8e8:	9407      	str	r4, [sp, #28]
 800a8ea:	9405      	str	r4, [sp, #20]
 800a8ec:	2322      	movs	r3, #34	; 0x22
 800a8ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 800aa48 <_strtod_l+0x598>
 800a8f2:	f8c9 3000 	str.w	r3, [r9]
 800a8f6:	f04f 0a00 	mov.w	sl, #0
 800a8fa:	9b07      	ldr	r3, [sp, #28]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f43f ae16 	beq.w	800a52e <_strtod_l+0x7e>
 800a902:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a904:	4648      	mov	r0, r9
 800a906:	f002 f8d1 	bl	800caac <_Bfree>
 800a90a:	9905      	ldr	r1, [sp, #20]
 800a90c:	4648      	mov	r0, r9
 800a90e:	f002 f8cd 	bl	800caac <_Bfree>
 800a912:	4641      	mov	r1, r8
 800a914:	4648      	mov	r0, r9
 800a916:	f002 f8c9 	bl	800caac <_Bfree>
 800a91a:	9907      	ldr	r1, [sp, #28]
 800a91c:	4648      	mov	r0, r9
 800a91e:	f002 f8c5 	bl	800caac <_Bfree>
 800a922:	4621      	mov	r1, r4
 800a924:	4648      	mov	r0, r9
 800a926:	f002 f8c1 	bl	800caac <_Bfree>
 800a92a:	e600      	b.n	800a52e <_strtod_l+0x7e>
 800a92c:	9a06      	ldr	r2, [sp, #24]
 800a92e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a932:	4293      	cmp	r3, r2
 800a934:	dbba      	blt.n	800a8ac <_strtod_l+0x3fc>
 800a936:	4d42      	ldr	r5, [pc, #264]	; (800aa40 <_strtod_l+0x590>)
 800a938:	f1c4 040f 	rsb	r4, r4, #15
 800a93c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a940:	4652      	mov	r2, sl
 800a942:	465b      	mov	r3, fp
 800a944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a948:	f7f5 fe56 	bl	80005f8 <__aeabi_dmul>
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	1b1c      	subs	r4, r3, r4
 800a950:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a954:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a958:	e78d      	b.n	800a876 <_strtod_l+0x3c6>
 800a95a:	f113 0f16 	cmn.w	r3, #22
 800a95e:	dba5      	blt.n	800a8ac <_strtod_l+0x3fc>
 800a960:	4a37      	ldr	r2, [pc, #220]	; (800aa40 <_strtod_l+0x590>)
 800a962:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a966:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a96a:	4650      	mov	r0, sl
 800a96c:	4659      	mov	r1, fp
 800a96e:	f7f5 ff6d 	bl	800084c <__aeabi_ddiv>
 800a972:	e782      	b.n	800a87a <_strtod_l+0x3ca>
 800a974:	2300      	movs	r3, #0
 800a976:	4e33      	ldr	r6, [pc, #204]	; (800aa44 <_strtod_l+0x594>)
 800a978:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a97c:	4650      	mov	r0, sl
 800a97e:	4659      	mov	r1, fp
 800a980:	461d      	mov	r5, r3
 800a982:	f1b8 0f01 	cmp.w	r8, #1
 800a986:	dc21      	bgt.n	800a9cc <_strtod_l+0x51c>
 800a988:	b10b      	cbz	r3, 800a98e <_strtod_l+0x4de>
 800a98a:	4682      	mov	sl, r0
 800a98c:	468b      	mov	fp, r1
 800a98e:	4b2d      	ldr	r3, [pc, #180]	; (800aa44 <_strtod_l+0x594>)
 800a990:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a994:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a998:	4652      	mov	r2, sl
 800a99a:	465b      	mov	r3, fp
 800a99c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a9a0:	f7f5 fe2a 	bl	80005f8 <__aeabi_dmul>
 800a9a4:	4b28      	ldr	r3, [pc, #160]	; (800aa48 <_strtod_l+0x598>)
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	400b      	ands	r3, r1
 800a9aa:	4928      	ldr	r1, [pc, #160]	; (800aa4c <_strtod_l+0x59c>)
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	d898      	bhi.n	800a8e4 <_strtod_l+0x434>
 800a9b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9b6:	428b      	cmp	r3, r1
 800a9b8:	bf86      	itte	hi
 800a9ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aa54 <_strtod_l+0x5a4>
 800a9be:	f04f 3aff 	movhi.w	sl, #4294967295
 800a9c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	e077      	b.n	800aabc <_strtod_l+0x60c>
 800a9cc:	f018 0f01 	tst.w	r8, #1
 800a9d0:	d006      	beq.n	800a9e0 <_strtod_l+0x530>
 800a9d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f7f5 fe0d 	bl	80005f8 <__aeabi_dmul>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	3501      	adds	r5, #1
 800a9e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a9e6:	e7cc      	b.n	800a982 <_strtod_l+0x4d2>
 800a9e8:	d0ed      	beq.n	800a9c6 <_strtod_l+0x516>
 800a9ea:	f1c8 0800 	rsb	r8, r8, #0
 800a9ee:	f018 020f 	ands.w	r2, r8, #15
 800a9f2:	d00a      	beq.n	800aa0a <_strtod_l+0x55a>
 800a9f4:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <_strtod_l+0x590>)
 800a9f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	f7f5 ff23 	bl	800084c <__aeabi_ddiv>
 800aa06:	4682      	mov	sl, r0
 800aa08:	468b      	mov	fp, r1
 800aa0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa0e:	d0da      	beq.n	800a9c6 <_strtod_l+0x516>
 800aa10:	f1b8 0f1f 	cmp.w	r8, #31
 800aa14:	dd20      	ble.n	800aa58 <_strtod_l+0x5a8>
 800aa16:	2400      	movs	r4, #0
 800aa18:	46a0      	mov	r8, r4
 800aa1a:	9407      	str	r4, [sp, #28]
 800aa1c:	9405      	str	r4, [sp, #20]
 800aa1e:	2322      	movs	r3, #34	; 0x22
 800aa20:	f04f 0a00 	mov.w	sl, #0
 800aa24:	f04f 0b00 	mov.w	fp, #0
 800aa28:	f8c9 3000 	str.w	r3, [r9]
 800aa2c:	e765      	b.n	800a8fa <_strtod_l+0x44a>
 800aa2e:	bf00      	nop
 800aa30:	0800dba9 	.word	0x0800dba9
 800aa34:	0800dc33 	.word	0x0800dc33
 800aa38:	0800dbb1 	.word	0x0800dbb1
 800aa3c:	0800dbf4 	.word	0x0800dbf4
 800aa40:	0800dcd8 	.word	0x0800dcd8
 800aa44:	0800dcb0 	.word	0x0800dcb0
 800aa48:	7ff00000 	.word	0x7ff00000
 800aa4c:	7ca00000 	.word	0x7ca00000
 800aa50:	fff80000 	.word	0xfff80000
 800aa54:	7fefffff 	.word	0x7fefffff
 800aa58:	f018 0310 	ands.w	r3, r8, #16
 800aa5c:	bf18      	it	ne
 800aa5e:	236a      	movne	r3, #106	; 0x6a
 800aa60:	4da0      	ldr	r5, [pc, #640]	; (800ace4 <_strtod_l+0x834>)
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	4650      	mov	r0, sl
 800aa66:	4659      	mov	r1, fp
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f1b8 0f00 	cmp.w	r8, #0
 800aa6e:	f300 810a 	bgt.w	800ac86 <_strtod_l+0x7d6>
 800aa72:	b10b      	cbz	r3, 800aa78 <_strtod_l+0x5c8>
 800aa74:	4682      	mov	sl, r0
 800aa76:	468b      	mov	fp, r1
 800aa78:	9b04      	ldr	r3, [sp, #16]
 800aa7a:	b1bb      	cbz	r3, 800aaac <_strtod_l+0x5fc>
 800aa7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aa80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	4659      	mov	r1, fp
 800aa88:	dd10      	ble.n	800aaac <_strtod_l+0x5fc>
 800aa8a:	2b1f      	cmp	r3, #31
 800aa8c:	f340 8107 	ble.w	800ac9e <_strtod_l+0x7ee>
 800aa90:	2b34      	cmp	r3, #52	; 0x34
 800aa92:	bfde      	ittt	le
 800aa94:	3b20      	suble	r3, #32
 800aa96:	f04f 32ff 	movle.w	r2, #4294967295
 800aa9a:	fa02 f303 	lslle.w	r3, r2, r3
 800aa9e:	f04f 0a00 	mov.w	sl, #0
 800aaa2:	bfcc      	ite	gt
 800aaa4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aaa8:	ea03 0b01 	andle.w	fp, r3, r1
 800aaac:	2200      	movs	r2, #0
 800aaae:	2300      	movs	r3, #0
 800aab0:	4650      	mov	r0, sl
 800aab2:	4659      	mov	r1, fp
 800aab4:	f7f6 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d1ac      	bne.n	800aa16 <_strtod_l+0x566>
 800aabc:	9b07      	ldr	r3, [sp, #28]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	9a05      	ldr	r2, [sp, #20]
 800aac2:	9908      	ldr	r1, [sp, #32]
 800aac4:	4623      	mov	r3, r4
 800aac6:	4648      	mov	r0, r9
 800aac8:	f002 f842 	bl	800cb50 <__s2b>
 800aacc:	9007      	str	r0, [sp, #28]
 800aace:	2800      	cmp	r0, #0
 800aad0:	f43f af08 	beq.w	800a8e4 <_strtod_l+0x434>
 800aad4:	9a06      	ldr	r2, [sp, #24]
 800aad6:	9b06      	ldr	r3, [sp, #24]
 800aad8:	2a00      	cmp	r2, #0
 800aada:	f1c3 0300 	rsb	r3, r3, #0
 800aade:	bfa8      	it	ge
 800aae0:	2300      	movge	r3, #0
 800aae2:	930e      	str	r3, [sp, #56]	; 0x38
 800aae4:	2400      	movs	r4, #0
 800aae6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aaea:	9316      	str	r3, [sp, #88]	; 0x58
 800aaec:	46a0      	mov	r8, r4
 800aaee:	9b07      	ldr	r3, [sp, #28]
 800aaf0:	4648      	mov	r0, r9
 800aaf2:	6859      	ldr	r1, [r3, #4]
 800aaf4:	f001 ffa6 	bl	800ca44 <_Balloc>
 800aaf8:	9005      	str	r0, [sp, #20]
 800aafa:	2800      	cmp	r0, #0
 800aafc:	f43f aef6 	beq.w	800a8ec <_strtod_l+0x43c>
 800ab00:	9b07      	ldr	r3, [sp, #28]
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	3202      	adds	r2, #2
 800ab06:	f103 010c 	add.w	r1, r3, #12
 800ab0a:	0092      	lsls	r2, r2, #2
 800ab0c:	300c      	adds	r0, #12
 800ab0e:	f7fe fdbf 	bl	8009690 <memcpy>
 800ab12:	aa1e      	add	r2, sp, #120	; 0x78
 800ab14:	a91d      	add	r1, sp, #116	; 0x74
 800ab16:	ec4b ab10 	vmov	d0, sl, fp
 800ab1a:	4648      	mov	r0, r9
 800ab1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ab20:	f002 fad2 	bl	800d0c8 <__d2b>
 800ab24:	901c      	str	r0, [sp, #112]	; 0x70
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f43f aee0 	beq.w	800a8ec <_strtod_l+0x43c>
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4648      	mov	r0, r9
 800ab30:	f002 f89a 	bl	800cc68 <__i2b>
 800ab34:	4680      	mov	r8, r0
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f43f aed8 	beq.w	800a8ec <_strtod_l+0x43c>
 800ab3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ab3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	bfab      	itete	ge
 800ab44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ab46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ab48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ab4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ab4c:	bfac      	ite	ge
 800ab4e:	18f7      	addge	r7, r6, r3
 800ab50:	1b9d      	sublt	r5, r3, r6
 800ab52:	9b04      	ldr	r3, [sp, #16]
 800ab54:	1af6      	subs	r6, r6, r3
 800ab56:	4416      	add	r6, r2
 800ab58:	4b63      	ldr	r3, [pc, #396]	; (800ace8 <_strtod_l+0x838>)
 800ab5a:	3e01      	subs	r6, #1
 800ab5c:	429e      	cmp	r6, r3
 800ab5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab62:	f280 80af 	bge.w	800acc4 <_strtod_l+0x814>
 800ab66:	1b9b      	subs	r3, r3, r6
 800ab68:	2b1f      	cmp	r3, #31
 800ab6a:	eba2 0203 	sub.w	r2, r2, r3
 800ab6e:	f04f 0101 	mov.w	r1, #1
 800ab72:	f300 809b 	bgt.w	800acac <_strtod_l+0x7fc>
 800ab76:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab80:	18be      	adds	r6, r7, r2
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	42b7      	cmp	r7, r6
 800ab86:	4415      	add	r5, r2
 800ab88:	441d      	add	r5, r3
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	bfa8      	it	ge
 800ab8e:	4633      	movge	r3, r6
 800ab90:	42ab      	cmp	r3, r5
 800ab92:	bfa8      	it	ge
 800ab94:	462b      	movge	r3, r5
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfc2      	ittt	gt
 800ab9a:	1af6      	subgt	r6, r6, r3
 800ab9c:	1aed      	subgt	r5, r5, r3
 800ab9e:	1aff      	subgt	r7, r7, r3
 800aba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aba2:	b1bb      	cbz	r3, 800abd4 <_strtod_l+0x724>
 800aba4:	4641      	mov	r1, r8
 800aba6:	461a      	mov	r2, r3
 800aba8:	4648      	mov	r0, r9
 800abaa:	f002 f8fd 	bl	800cda8 <__pow5mult>
 800abae:	4680      	mov	r8, r0
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f43f ae9b 	beq.w	800a8ec <_strtod_l+0x43c>
 800abb6:	4601      	mov	r1, r0
 800abb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800abba:	4648      	mov	r0, r9
 800abbc:	f002 f85d 	bl	800cc7a <__multiply>
 800abc0:	900c      	str	r0, [sp, #48]	; 0x30
 800abc2:	2800      	cmp	r0, #0
 800abc4:	f43f ae92 	beq.w	800a8ec <_strtod_l+0x43c>
 800abc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abca:	4648      	mov	r0, r9
 800abcc:	f001 ff6e 	bl	800caac <_Bfree>
 800abd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abd2:	931c      	str	r3, [sp, #112]	; 0x70
 800abd4:	2e00      	cmp	r6, #0
 800abd6:	dc7a      	bgt.n	800acce <_strtod_l+0x81e>
 800abd8:	9b06      	ldr	r3, [sp, #24]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	dd08      	ble.n	800abf0 <_strtod_l+0x740>
 800abde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800abe0:	9905      	ldr	r1, [sp, #20]
 800abe2:	4648      	mov	r0, r9
 800abe4:	f002 f8e0 	bl	800cda8 <__pow5mult>
 800abe8:	9005      	str	r0, [sp, #20]
 800abea:	2800      	cmp	r0, #0
 800abec:	f43f ae7e 	beq.w	800a8ec <_strtod_l+0x43c>
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	dd08      	ble.n	800ac06 <_strtod_l+0x756>
 800abf4:	462a      	mov	r2, r5
 800abf6:	9905      	ldr	r1, [sp, #20]
 800abf8:	4648      	mov	r0, r9
 800abfa:	f002 f923 	bl	800ce44 <__lshift>
 800abfe:	9005      	str	r0, [sp, #20]
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f43f ae73 	beq.w	800a8ec <_strtod_l+0x43c>
 800ac06:	2f00      	cmp	r7, #0
 800ac08:	dd08      	ble.n	800ac1c <_strtod_l+0x76c>
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	463a      	mov	r2, r7
 800ac0e:	4648      	mov	r0, r9
 800ac10:	f002 f918 	bl	800ce44 <__lshift>
 800ac14:	4680      	mov	r8, r0
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f43f ae68 	beq.w	800a8ec <_strtod_l+0x43c>
 800ac1c:	9a05      	ldr	r2, [sp, #20]
 800ac1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac20:	4648      	mov	r0, r9
 800ac22:	f002 f97d 	bl	800cf20 <__mdiff>
 800ac26:	4604      	mov	r4, r0
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f43f ae5f 	beq.w	800a8ec <_strtod_l+0x43c>
 800ac2e:	68c3      	ldr	r3, [r0, #12]
 800ac30:	930c      	str	r3, [sp, #48]	; 0x30
 800ac32:	2300      	movs	r3, #0
 800ac34:	60c3      	str	r3, [r0, #12]
 800ac36:	4641      	mov	r1, r8
 800ac38:	f002 f958 	bl	800ceec <__mcmp>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	da55      	bge.n	800acec <_strtod_l+0x83c>
 800ac40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac42:	b9e3      	cbnz	r3, 800ac7e <_strtod_l+0x7ce>
 800ac44:	f1ba 0f00 	cmp.w	sl, #0
 800ac48:	d119      	bne.n	800ac7e <_strtod_l+0x7ce>
 800ac4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac4e:	b9b3      	cbnz	r3, 800ac7e <_strtod_l+0x7ce>
 800ac50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac54:	0d1b      	lsrs	r3, r3, #20
 800ac56:	051b      	lsls	r3, r3, #20
 800ac58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac5c:	d90f      	bls.n	800ac7e <_strtod_l+0x7ce>
 800ac5e:	6963      	ldr	r3, [r4, #20]
 800ac60:	b913      	cbnz	r3, 800ac68 <_strtod_l+0x7b8>
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	dd0a      	ble.n	800ac7e <_strtod_l+0x7ce>
 800ac68:	4621      	mov	r1, r4
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	4648      	mov	r0, r9
 800ac6e:	f002 f8e9 	bl	800ce44 <__lshift>
 800ac72:	4641      	mov	r1, r8
 800ac74:	4604      	mov	r4, r0
 800ac76:	f002 f939 	bl	800ceec <__mcmp>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	dc67      	bgt.n	800ad4e <_strtod_l+0x89e>
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d171      	bne.n	800ad68 <_strtod_l+0x8b8>
 800ac84:	e63d      	b.n	800a902 <_strtod_l+0x452>
 800ac86:	f018 0f01 	tst.w	r8, #1
 800ac8a:	d004      	beq.n	800ac96 <_strtod_l+0x7e6>
 800ac8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac90:	f7f5 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ac94:	2301      	movs	r3, #1
 800ac96:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac9a:	3508      	adds	r5, #8
 800ac9c:	e6e5      	b.n	800aa6a <_strtod_l+0x5ba>
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aca2:	fa02 f303 	lsl.w	r3, r2, r3
 800aca6:	ea03 0a0a 	and.w	sl, r3, sl
 800acaa:	e6ff      	b.n	800aaac <_strtod_l+0x5fc>
 800acac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800acb0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800acb4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800acb8:	36e2      	adds	r6, #226	; 0xe2
 800acba:	fa01 f306 	lsl.w	r3, r1, r6
 800acbe:	930a      	str	r3, [sp, #40]	; 0x28
 800acc0:	910f      	str	r1, [sp, #60]	; 0x3c
 800acc2:	e75d      	b.n	800ab80 <_strtod_l+0x6d0>
 800acc4:	2300      	movs	r3, #0
 800acc6:	930a      	str	r3, [sp, #40]	; 0x28
 800acc8:	2301      	movs	r3, #1
 800acca:	930f      	str	r3, [sp, #60]	; 0x3c
 800accc:	e758      	b.n	800ab80 <_strtod_l+0x6d0>
 800acce:	4632      	mov	r2, r6
 800acd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acd2:	4648      	mov	r0, r9
 800acd4:	f002 f8b6 	bl	800ce44 <__lshift>
 800acd8:	901c      	str	r0, [sp, #112]	; 0x70
 800acda:	2800      	cmp	r0, #0
 800acdc:	f47f af7c 	bne.w	800abd8 <_strtod_l+0x728>
 800ace0:	e604      	b.n	800a8ec <_strtod_l+0x43c>
 800ace2:	bf00      	nop
 800ace4:	0800dc08 	.word	0x0800dc08
 800ace8:	fffffc02 	.word	0xfffffc02
 800acec:	465d      	mov	r5, fp
 800acee:	f040 8086 	bne.w	800adfe <_strtod_l+0x94e>
 800acf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acf8:	b32a      	cbz	r2, 800ad46 <_strtod_l+0x896>
 800acfa:	4aaf      	ldr	r2, [pc, #700]	; (800afb8 <_strtod_l+0xb08>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d153      	bne.n	800ada8 <_strtod_l+0x8f8>
 800ad00:	9b04      	ldr	r3, [sp, #16]
 800ad02:	4650      	mov	r0, sl
 800ad04:	b1d3      	cbz	r3, 800ad3c <_strtod_l+0x88c>
 800ad06:	4aad      	ldr	r2, [pc, #692]	; (800afbc <_strtod_l+0xb0c>)
 800ad08:	402a      	ands	r2, r5
 800ad0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ad0e:	f04f 31ff 	mov.w	r1, #4294967295
 800ad12:	d816      	bhi.n	800ad42 <_strtod_l+0x892>
 800ad14:	0d12      	lsrs	r2, r2, #20
 800ad16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad1e:	4298      	cmp	r0, r3
 800ad20:	d142      	bne.n	800ada8 <_strtod_l+0x8f8>
 800ad22:	4ba7      	ldr	r3, [pc, #668]	; (800afc0 <_strtod_l+0xb10>)
 800ad24:	429d      	cmp	r5, r3
 800ad26:	d102      	bne.n	800ad2e <_strtod_l+0x87e>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f43f addf 	beq.w	800a8ec <_strtod_l+0x43c>
 800ad2e:	4ba3      	ldr	r3, [pc, #652]	; (800afbc <_strtod_l+0xb0c>)
 800ad30:	402b      	ands	r3, r5
 800ad32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ad36:	f04f 0a00 	mov.w	sl, #0
 800ad3a:	e7a0      	b.n	800ac7e <_strtod_l+0x7ce>
 800ad3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad40:	e7ed      	b.n	800ad1e <_strtod_l+0x86e>
 800ad42:	460b      	mov	r3, r1
 800ad44:	e7eb      	b.n	800ad1e <_strtod_l+0x86e>
 800ad46:	bb7b      	cbnz	r3, 800ada8 <_strtod_l+0x8f8>
 800ad48:	f1ba 0f00 	cmp.w	sl, #0
 800ad4c:	d12c      	bne.n	800ada8 <_strtod_l+0x8f8>
 800ad4e:	9904      	ldr	r1, [sp, #16]
 800ad50:	4a9a      	ldr	r2, [pc, #616]	; (800afbc <_strtod_l+0xb0c>)
 800ad52:	465b      	mov	r3, fp
 800ad54:	b1f1      	cbz	r1, 800ad94 <_strtod_l+0x8e4>
 800ad56:	ea02 010b 	and.w	r1, r2, fp
 800ad5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad5e:	dc19      	bgt.n	800ad94 <_strtod_l+0x8e4>
 800ad60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad64:	f77f ae5b 	ble.w	800aa1e <_strtod_l+0x56e>
 800ad68:	4a96      	ldr	r2, [pc, #600]	; (800afc4 <_strtod_l+0xb14>)
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad78:	f7f5 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	468b      	mov	fp, r1
 800ad80:	2900      	cmp	r1, #0
 800ad82:	f47f adbe 	bne.w	800a902 <_strtod_l+0x452>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f47f adbb 	bne.w	800a902 <_strtod_l+0x452>
 800ad8c:	2322      	movs	r3, #34	; 0x22
 800ad8e:	f8c9 3000 	str.w	r3, [r9]
 800ad92:	e5b6      	b.n	800a902 <_strtod_l+0x452>
 800ad94:	4013      	ands	r3, r2
 800ad96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ada2:	f04f 3aff 	mov.w	sl, #4294967295
 800ada6:	e76a      	b.n	800ac7e <_strtod_l+0x7ce>
 800ada8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adaa:	b193      	cbz	r3, 800add2 <_strtod_l+0x922>
 800adac:	422b      	tst	r3, r5
 800adae:	f43f af66 	beq.w	800ac7e <_strtod_l+0x7ce>
 800adb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adb4:	9a04      	ldr	r2, [sp, #16]
 800adb6:	4650      	mov	r0, sl
 800adb8:	4659      	mov	r1, fp
 800adba:	b173      	cbz	r3, 800adda <_strtod_l+0x92a>
 800adbc:	f7ff fb5c 	bl	800a478 <sulp>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adc8:	f7f5 fa60 	bl	800028c <__adddf3>
 800adcc:	4682      	mov	sl, r0
 800adce:	468b      	mov	fp, r1
 800add0:	e755      	b.n	800ac7e <_strtod_l+0x7ce>
 800add2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800add4:	ea13 0f0a 	tst.w	r3, sl
 800add8:	e7e9      	b.n	800adae <_strtod_l+0x8fe>
 800adda:	f7ff fb4d 	bl	800a478 <sulp>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ade6:	f7f5 fa4f 	bl	8000288 <__aeabi_dsub>
 800adea:	2200      	movs	r2, #0
 800adec:	2300      	movs	r3, #0
 800adee:	4682      	mov	sl, r0
 800adf0:	468b      	mov	fp, r1
 800adf2:	f7f5 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f47f ae11 	bne.w	800aa1e <_strtod_l+0x56e>
 800adfc:	e73f      	b.n	800ac7e <_strtod_l+0x7ce>
 800adfe:	4641      	mov	r1, r8
 800ae00:	4620      	mov	r0, r4
 800ae02:	f002 f9b0 	bl	800d166 <__ratio>
 800ae06:	ec57 6b10 	vmov	r6, r7, d0
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae10:	ee10 0a10 	vmov	r0, s0
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fe6b 	bl	8000af0 <__aeabi_dcmple>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d077      	beq.n	800af0e <_strtod_l+0xa5e>
 800ae1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d04a      	beq.n	800aeba <_strtod_l+0xa0a>
 800ae24:	4b68      	ldr	r3, [pc, #416]	; (800afc8 <_strtod_l+0xb18>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ae2c:	4f66      	ldr	r7, [pc, #408]	; (800afc8 <_strtod_l+0xb18>)
 800ae2e:	2600      	movs	r6, #0
 800ae30:	4b62      	ldr	r3, [pc, #392]	; (800afbc <_strtod_l+0xb0c>)
 800ae32:	402b      	ands	r3, r5
 800ae34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae38:	4b64      	ldr	r3, [pc, #400]	; (800afcc <_strtod_l+0xb1c>)
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	f040 80ce 	bne.w	800afdc <_strtod_l+0xb2c>
 800ae40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae48:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ae4c:	ec4b ab10 	vmov	d0, sl, fp
 800ae50:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ae54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ae58:	f002 f8c0 	bl	800cfdc <__ulp>
 800ae5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae60:	ec53 2b10 	vmov	r2, r3, d0
 800ae64:	f7f5 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ae68:	4652      	mov	r2, sl
 800ae6a:	465b      	mov	r3, fp
 800ae6c:	f7f5 fa0e 	bl	800028c <__adddf3>
 800ae70:	460b      	mov	r3, r1
 800ae72:	4952      	ldr	r1, [pc, #328]	; (800afbc <_strtod_l+0xb0c>)
 800ae74:	4a56      	ldr	r2, [pc, #344]	; (800afd0 <_strtod_l+0xb20>)
 800ae76:	4019      	ands	r1, r3
 800ae78:	4291      	cmp	r1, r2
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	d95b      	bls.n	800af36 <_strtod_l+0xa86>
 800ae7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d103      	bne.n	800ae90 <_strtod_l+0x9e0>
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f43f ad2e 	beq.w	800a8ec <_strtod_l+0x43c>
 800ae90:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800afc0 <_strtod_l+0xb10>
 800ae94:	f04f 3aff 	mov.w	sl, #4294967295
 800ae98:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae9a:	4648      	mov	r0, r9
 800ae9c:	f001 fe06 	bl	800caac <_Bfree>
 800aea0:	9905      	ldr	r1, [sp, #20]
 800aea2:	4648      	mov	r0, r9
 800aea4:	f001 fe02 	bl	800caac <_Bfree>
 800aea8:	4641      	mov	r1, r8
 800aeaa:	4648      	mov	r0, r9
 800aeac:	f001 fdfe 	bl	800caac <_Bfree>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	f001 fdfa 	bl	800caac <_Bfree>
 800aeb8:	e619      	b.n	800aaee <_strtod_l+0x63e>
 800aeba:	f1ba 0f00 	cmp.w	sl, #0
 800aebe:	d11a      	bne.n	800aef6 <_strtod_l+0xa46>
 800aec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aec4:	b9eb      	cbnz	r3, 800af02 <_strtod_l+0xa52>
 800aec6:	2200      	movs	r2, #0
 800aec8:	4b3f      	ldr	r3, [pc, #252]	; (800afc8 <_strtod_l+0xb18>)
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 fe05 	bl	8000adc <__aeabi_dcmplt>
 800aed2:	b9c8      	cbnz	r0, 800af08 <_strtod_l+0xa58>
 800aed4:	4630      	mov	r0, r6
 800aed6:	4639      	mov	r1, r7
 800aed8:	2200      	movs	r2, #0
 800aeda:	4b3e      	ldr	r3, [pc, #248]	; (800afd4 <_strtod_l+0xb24>)
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4606      	mov	r6, r0
 800aee2:	460f      	mov	r7, r1
 800aee4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aee8:	9618      	str	r6, [sp, #96]	; 0x60
 800aeea:	9319      	str	r3, [sp, #100]	; 0x64
 800aeec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800aef0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aef4:	e79c      	b.n	800ae30 <_strtod_l+0x980>
 800aef6:	f1ba 0f01 	cmp.w	sl, #1
 800aefa:	d102      	bne.n	800af02 <_strtod_l+0xa52>
 800aefc:	2d00      	cmp	r5, #0
 800aefe:	f43f ad8e 	beq.w	800aa1e <_strtod_l+0x56e>
 800af02:	2200      	movs	r2, #0
 800af04:	4b34      	ldr	r3, [pc, #208]	; (800afd8 <_strtod_l+0xb28>)
 800af06:	e78f      	b.n	800ae28 <_strtod_l+0x978>
 800af08:	2600      	movs	r6, #0
 800af0a:	4f32      	ldr	r7, [pc, #200]	; (800afd4 <_strtod_l+0xb24>)
 800af0c:	e7ea      	b.n	800aee4 <_strtod_l+0xa34>
 800af0e:	4b31      	ldr	r3, [pc, #196]	; (800afd4 <_strtod_l+0xb24>)
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	2200      	movs	r2, #0
 800af16:	f7f5 fb6f 	bl	80005f8 <__aeabi_dmul>
 800af1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af1c:	4606      	mov	r6, r0
 800af1e:	460f      	mov	r7, r1
 800af20:	b933      	cbnz	r3, 800af30 <_strtod_l+0xa80>
 800af22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af26:	9010      	str	r0, [sp, #64]	; 0x40
 800af28:	9311      	str	r3, [sp, #68]	; 0x44
 800af2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af2e:	e7df      	b.n	800aef0 <_strtod_l+0xa40>
 800af30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800af34:	e7f9      	b.n	800af2a <_strtod_l+0xa7a>
 800af36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800af3a:	9b04      	ldr	r3, [sp, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1ab      	bne.n	800ae98 <_strtod_l+0x9e8>
 800af40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af44:	0d1b      	lsrs	r3, r3, #20
 800af46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af48:	051b      	lsls	r3, r3, #20
 800af4a:	429a      	cmp	r2, r3
 800af4c:	465d      	mov	r5, fp
 800af4e:	d1a3      	bne.n	800ae98 <_strtod_l+0x9e8>
 800af50:	4639      	mov	r1, r7
 800af52:	4630      	mov	r0, r6
 800af54:	f7f5 fe00 	bl	8000b58 <__aeabi_d2iz>
 800af58:	f7f5 fae4 	bl	8000524 <__aeabi_i2d>
 800af5c:	460b      	mov	r3, r1
 800af5e:	4602      	mov	r2, r0
 800af60:	4639      	mov	r1, r7
 800af62:	4630      	mov	r0, r6
 800af64:	f7f5 f990 	bl	8000288 <__aeabi_dsub>
 800af68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	b933      	cbnz	r3, 800af7e <_strtod_l+0xace>
 800af70:	f1ba 0f00 	cmp.w	sl, #0
 800af74:	d103      	bne.n	800af7e <_strtod_l+0xace>
 800af76:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	d06d      	beq.n	800b05a <_strtod_l+0xbaa>
 800af7e:	a30a      	add	r3, pc, #40	; (adr r3, 800afa8 <_strtod_l+0xaf8>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	4630      	mov	r0, r6
 800af86:	4639      	mov	r1, r7
 800af88:	f7f5 fda8 	bl	8000adc <__aeabi_dcmplt>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f47f acb8 	bne.w	800a902 <_strtod_l+0x452>
 800af92:	a307      	add	r3, pc, #28	; (adr r3, 800afb0 <_strtod_l+0xb00>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	f43f af79 	beq.w	800ae98 <_strtod_l+0x9e8>
 800afa6:	e4ac      	b.n	800a902 <_strtod_l+0x452>
 800afa8:	94a03595 	.word	0x94a03595
 800afac:	3fdfffff 	.word	0x3fdfffff
 800afb0:	35afe535 	.word	0x35afe535
 800afb4:	3fe00000 	.word	0x3fe00000
 800afb8:	000fffff 	.word	0x000fffff
 800afbc:	7ff00000 	.word	0x7ff00000
 800afc0:	7fefffff 	.word	0x7fefffff
 800afc4:	39500000 	.word	0x39500000
 800afc8:	3ff00000 	.word	0x3ff00000
 800afcc:	7fe00000 	.word	0x7fe00000
 800afd0:	7c9fffff 	.word	0x7c9fffff
 800afd4:	3fe00000 	.word	0x3fe00000
 800afd8:	bff00000 	.word	0xbff00000
 800afdc:	9b04      	ldr	r3, [sp, #16]
 800afde:	b333      	cbz	r3, 800b02e <_strtod_l+0xb7e>
 800afe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afe2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800afe6:	d822      	bhi.n	800b02e <_strtod_l+0xb7e>
 800afe8:	a327      	add	r3, pc, #156	; (adr r3, 800b088 <_strtod_l+0xbd8>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fd7d 	bl	8000af0 <__aeabi_dcmple>
 800aff6:	b1a0      	cbz	r0, 800b022 <_strtod_l+0xb72>
 800aff8:	4639      	mov	r1, r7
 800affa:	4630      	mov	r0, r6
 800affc:	f7f5 fdd4 	bl	8000ba8 <__aeabi_d2uiz>
 800b000:	2800      	cmp	r0, #0
 800b002:	bf08      	it	eq
 800b004:	2001      	moveq	r0, #1
 800b006:	f7f5 fa7d 	bl	8000504 <__aeabi_ui2d>
 800b00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b00c:	4606      	mov	r6, r0
 800b00e:	460f      	mov	r7, r1
 800b010:	bb03      	cbnz	r3, 800b054 <_strtod_l+0xba4>
 800b012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b016:	9012      	str	r0, [sp, #72]	; 0x48
 800b018:	9313      	str	r3, [sp, #76]	; 0x4c
 800b01a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b01e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b026:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b02a:	1a9b      	subs	r3, r3, r2
 800b02c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b02e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b032:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b036:	f001 ffd1 	bl	800cfdc <__ulp>
 800b03a:	4650      	mov	r0, sl
 800b03c:	ec53 2b10 	vmov	r2, r3, d0
 800b040:	4659      	mov	r1, fp
 800b042:	f7f5 fad9 	bl	80005f8 <__aeabi_dmul>
 800b046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b04a:	f7f5 f91f 	bl	800028c <__adddf3>
 800b04e:	4682      	mov	sl, r0
 800b050:	468b      	mov	fp, r1
 800b052:	e772      	b.n	800af3a <_strtod_l+0xa8a>
 800b054:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b058:	e7df      	b.n	800b01a <_strtod_l+0xb6a>
 800b05a:	a30d      	add	r3, pc, #52	; (adr r3, 800b090 <_strtod_l+0xbe0>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800b064:	e79c      	b.n	800afa0 <_strtod_l+0xaf0>
 800b066:	2300      	movs	r3, #0
 800b068:	930d      	str	r3, [sp, #52]	; 0x34
 800b06a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b06c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	f7ff ba61 	b.w	800a536 <_strtod_l+0x86>
 800b074:	2b65      	cmp	r3, #101	; 0x65
 800b076:	f04f 0200 	mov.w	r2, #0
 800b07a:	f43f ab4e 	beq.w	800a71a <_strtod_l+0x26a>
 800b07e:	2101      	movs	r1, #1
 800b080:	4614      	mov	r4, r2
 800b082:	9104      	str	r1, [sp, #16]
 800b084:	f7ff bacb 	b.w	800a61e <_strtod_l+0x16e>
 800b088:	ffc00000 	.word	0xffc00000
 800b08c:	41dfffff 	.word	0x41dfffff
 800b090:	94a03595 	.word	0x94a03595
 800b094:	3fcfffff 	.word	0x3fcfffff

0800b098 <_strtod_r>:
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <_strtod_r+0x18>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	b410      	push	{r4}
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	4c04      	ldr	r4, [pc, #16]	; (800b0b4 <_strtod_r+0x1c>)
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	bf08      	it	eq
 800b0a6:	4623      	moveq	r3, r4
 800b0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ac:	f7ff ba00 	b.w	800a4b0 <_strtod_l>
 800b0b0:	20000040 	.word	0x20000040
 800b0b4:	200000a4 	.word	0x200000a4

0800b0b8 <_strtol_l.isra.0>:
 800b0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	4692      	mov	sl, r2
 800b0c2:	461e      	mov	r6, r3
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	463d      	mov	r5, r7
 800b0c8:	9808      	ldr	r0, [sp, #32]
 800b0ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0ce:	f001 fc27 	bl	800c920 <__locale_ctype_ptr_l>
 800b0d2:	4420      	add	r0, r4
 800b0d4:	7843      	ldrb	r3, [r0, #1]
 800b0d6:	f013 0308 	ands.w	r3, r3, #8
 800b0da:	d132      	bne.n	800b142 <_strtol_l.isra.0+0x8a>
 800b0dc:	2c2d      	cmp	r4, #45	; 0x2d
 800b0de:	d132      	bne.n	800b146 <_strtol_l.isra.0+0x8e>
 800b0e0:	787c      	ldrb	r4, [r7, #1]
 800b0e2:	1cbd      	adds	r5, r7, #2
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	2e00      	cmp	r6, #0
 800b0e8:	d05d      	beq.n	800b1a6 <_strtol_l.isra.0+0xee>
 800b0ea:	2e10      	cmp	r6, #16
 800b0ec:	d109      	bne.n	800b102 <_strtol_l.isra.0+0x4a>
 800b0ee:	2c30      	cmp	r4, #48	; 0x30
 800b0f0:	d107      	bne.n	800b102 <_strtol_l.isra.0+0x4a>
 800b0f2:	782b      	ldrb	r3, [r5, #0]
 800b0f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0f8:	2b58      	cmp	r3, #88	; 0x58
 800b0fa:	d14f      	bne.n	800b19c <_strtol_l.isra.0+0xe4>
 800b0fc:	786c      	ldrb	r4, [r5, #1]
 800b0fe:	2610      	movs	r6, #16
 800b100:	3502      	adds	r5, #2
 800b102:	2a00      	cmp	r2, #0
 800b104:	bf14      	ite	ne
 800b106:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b10a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b10e:	2700      	movs	r7, #0
 800b110:	fbb1 fcf6 	udiv	ip, r1, r6
 800b114:	4638      	mov	r0, r7
 800b116:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b11a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b11e:	2b09      	cmp	r3, #9
 800b120:	d817      	bhi.n	800b152 <_strtol_l.isra.0+0x9a>
 800b122:	461c      	mov	r4, r3
 800b124:	42a6      	cmp	r6, r4
 800b126:	dd23      	ble.n	800b170 <_strtol_l.isra.0+0xb8>
 800b128:	1c7b      	adds	r3, r7, #1
 800b12a:	d007      	beq.n	800b13c <_strtol_l.isra.0+0x84>
 800b12c:	4584      	cmp	ip, r0
 800b12e:	d31c      	bcc.n	800b16a <_strtol_l.isra.0+0xb2>
 800b130:	d101      	bne.n	800b136 <_strtol_l.isra.0+0x7e>
 800b132:	45a6      	cmp	lr, r4
 800b134:	db19      	blt.n	800b16a <_strtol_l.isra.0+0xb2>
 800b136:	fb00 4006 	mla	r0, r0, r6, r4
 800b13a:	2701      	movs	r7, #1
 800b13c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b140:	e7eb      	b.n	800b11a <_strtol_l.isra.0+0x62>
 800b142:	462f      	mov	r7, r5
 800b144:	e7bf      	b.n	800b0c6 <_strtol_l.isra.0+0xe>
 800b146:	2c2b      	cmp	r4, #43	; 0x2b
 800b148:	bf04      	itt	eq
 800b14a:	1cbd      	addeq	r5, r7, #2
 800b14c:	787c      	ldrbeq	r4, [r7, #1]
 800b14e:	461a      	mov	r2, r3
 800b150:	e7c9      	b.n	800b0e6 <_strtol_l.isra.0+0x2e>
 800b152:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b156:	2b19      	cmp	r3, #25
 800b158:	d801      	bhi.n	800b15e <_strtol_l.isra.0+0xa6>
 800b15a:	3c37      	subs	r4, #55	; 0x37
 800b15c:	e7e2      	b.n	800b124 <_strtol_l.isra.0+0x6c>
 800b15e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b162:	2b19      	cmp	r3, #25
 800b164:	d804      	bhi.n	800b170 <_strtol_l.isra.0+0xb8>
 800b166:	3c57      	subs	r4, #87	; 0x57
 800b168:	e7dc      	b.n	800b124 <_strtol_l.isra.0+0x6c>
 800b16a:	f04f 37ff 	mov.w	r7, #4294967295
 800b16e:	e7e5      	b.n	800b13c <_strtol_l.isra.0+0x84>
 800b170:	1c7b      	adds	r3, r7, #1
 800b172:	d108      	bne.n	800b186 <_strtol_l.isra.0+0xce>
 800b174:	2322      	movs	r3, #34	; 0x22
 800b176:	f8c8 3000 	str.w	r3, [r8]
 800b17a:	4608      	mov	r0, r1
 800b17c:	f1ba 0f00 	cmp.w	sl, #0
 800b180:	d107      	bne.n	800b192 <_strtol_l.isra.0+0xda>
 800b182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b186:	b102      	cbz	r2, 800b18a <_strtol_l.isra.0+0xd2>
 800b188:	4240      	negs	r0, r0
 800b18a:	f1ba 0f00 	cmp.w	sl, #0
 800b18e:	d0f8      	beq.n	800b182 <_strtol_l.isra.0+0xca>
 800b190:	b10f      	cbz	r7, 800b196 <_strtol_l.isra.0+0xde>
 800b192:	f105 39ff 	add.w	r9, r5, #4294967295
 800b196:	f8ca 9000 	str.w	r9, [sl]
 800b19a:	e7f2      	b.n	800b182 <_strtol_l.isra.0+0xca>
 800b19c:	2430      	movs	r4, #48	; 0x30
 800b19e:	2e00      	cmp	r6, #0
 800b1a0:	d1af      	bne.n	800b102 <_strtol_l.isra.0+0x4a>
 800b1a2:	2608      	movs	r6, #8
 800b1a4:	e7ad      	b.n	800b102 <_strtol_l.isra.0+0x4a>
 800b1a6:	2c30      	cmp	r4, #48	; 0x30
 800b1a8:	d0a3      	beq.n	800b0f2 <_strtol_l.isra.0+0x3a>
 800b1aa:	260a      	movs	r6, #10
 800b1ac:	e7a9      	b.n	800b102 <_strtol_l.isra.0+0x4a>
	...

0800b1b0 <_strtol_r>:
 800b1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1b2:	4c06      	ldr	r4, [pc, #24]	; (800b1cc <_strtol_r+0x1c>)
 800b1b4:	4d06      	ldr	r5, [pc, #24]	; (800b1d0 <_strtol_r+0x20>)
 800b1b6:	6824      	ldr	r4, [r4, #0]
 800b1b8:	6a24      	ldr	r4, [r4, #32]
 800b1ba:	2c00      	cmp	r4, #0
 800b1bc:	bf08      	it	eq
 800b1be:	462c      	moveq	r4, r5
 800b1c0:	9400      	str	r4, [sp, #0]
 800b1c2:	f7ff ff79 	bl	800b0b8 <_strtol_l.isra.0>
 800b1c6:	b003      	add	sp, #12
 800b1c8:	bd30      	pop	{r4, r5, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20000040 	.word	0x20000040
 800b1d0:	200000a4 	.word	0x200000a4

0800b1d4 <__swbuf_r>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	460e      	mov	r6, r1
 800b1d8:	4614      	mov	r4, r2
 800b1da:	4605      	mov	r5, r0
 800b1dc:	b118      	cbz	r0, 800b1e6 <__swbuf_r+0x12>
 800b1de:	6983      	ldr	r3, [r0, #24]
 800b1e0:	b90b      	cbnz	r3, 800b1e6 <__swbuf_r+0x12>
 800b1e2:	f000 ffed 	bl	800c1c0 <__sinit>
 800b1e6:	4b21      	ldr	r3, [pc, #132]	; (800b26c <__swbuf_r+0x98>)
 800b1e8:	429c      	cmp	r4, r3
 800b1ea:	d12a      	bne.n	800b242 <__swbuf_r+0x6e>
 800b1ec:	686c      	ldr	r4, [r5, #4]
 800b1ee:	69a3      	ldr	r3, [r4, #24]
 800b1f0:	60a3      	str	r3, [r4, #8]
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	071a      	lsls	r2, r3, #28
 800b1f6:	d52e      	bpl.n	800b256 <__swbuf_r+0x82>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	b363      	cbz	r3, 800b256 <__swbuf_r+0x82>
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	6820      	ldr	r0, [r4, #0]
 800b200:	1ac0      	subs	r0, r0, r3
 800b202:	6963      	ldr	r3, [r4, #20]
 800b204:	b2f6      	uxtb	r6, r6
 800b206:	4283      	cmp	r3, r0
 800b208:	4637      	mov	r7, r6
 800b20a:	dc04      	bgt.n	800b216 <__swbuf_r+0x42>
 800b20c:	4621      	mov	r1, r4
 800b20e:	4628      	mov	r0, r5
 800b210:	f000 ff6c 	bl	800c0ec <_fflush_r>
 800b214:	bb28      	cbnz	r0, 800b262 <__swbuf_r+0x8e>
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	3b01      	subs	r3, #1
 800b21a:	60a3      	str	r3, [r4, #8]
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	6022      	str	r2, [r4, #0]
 800b222:	701e      	strb	r6, [r3, #0]
 800b224:	6963      	ldr	r3, [r4, #20]
 800b226:	3001      	adds	r0, #1
 800b228:	4283      	cmp	r3, r0
 800b22a:	d004      	beq.n	800b236 <__swbuf_r+0x62>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	07db      	lsls	r3, r3, #31
 800b230:	d519      	bpl.n	800b266 <__swbuf_r+0x92>
 800b232:	2e0a      	cmp	r6, #10
 800b234:	d117      	bne.n	800b266 <__swbuf_r+0x92>
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 ff57 	bl	800c0ec <_fflush_r>
 800b23e:	b190      	cbz	r0, 800b266 <__swbuf_r+0x92>
 800b240:	e00f      	b.n	800b262 <__swbuf_r+0x8e>
 800b242:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <__swbuf_r+0x9c>)
 800b244:	429c      	cmp	r4, r3
 800b246:	d101      	bne.n	800b24c <__swbuf_r+0x78>
 800b248:	68ac      	ldr	r4, [r5, #8]
 800b24a:	e7d0      	b.n	800b1ee <__swbuf_r+0x1a>
 800b24c:	4b09      	ldr	r3, [pc, #36]	; (800b274 <__swbuf_r+0xa0>)
 800b24e:	429c      	cmp	r4, r3
 800b250:	bf08      	it	eq
 800b252:	68ec      	ldreq	r4, [r5, #12]
 800b254:	e7cb      	b.n	800b1ee <__swbuf_r+0x1a>
 800b256:	4621      	mov	r1, r4
 800b258:	4628      	mov	r0, r5
 800b25a:	f000 f80d 	bl	800b278 <__swsetup_r>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d0cc      	beq.n	800b1fc <__swbuf_r+0x28>
 800b262:	f04f 37ff 	mov.w	r7, #4294967295
 800b266:	4638      	mov	r0, r7
 800b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26a:	bf00      	nop
 800b26c:	0800dc60 	.word	0x0800dc60
 800b270:	0800dc80 	.word	0x0800dc80
 800b274:	0800dc40 	.word	0x0800dc40

0800b278 <__swsetup_r>:
 800b278:	4b32      	ldr	r3, [pc, #200]	; (800b344 <__swsetup_r+0xcc>)
 800b27a:	b570      	push	{r4, r5, r6, lr}
 800b27c:	681d      	ldr	r5, [r3, #0]
 800b27e:	4606      	mov	r6, r0
 800b280:	460c      	mov	r4, r1
 800b282:	b125      	cbz	r5, 800b28e <__swsetup_r+0x16>
 800b284:	69ab      	ldr	r3, [r5, #24]
 800b286:	b913      	cbnz	r3, 800b28e <__swsetup_r+0x16>
 800b288:	4628      	mov	r0, r5
 800b28a:	f000 ff99 	bl	800c1c0 <__sinit>
 800b28e:	4b2e      	ldr	r3, [pc, #184]	; (800b348 <__swsetup_r+0xd0>)
 800b290:	429c      	cmp	r4, r3
 800b292:	d10f      	bne.n	800b2b4 <__swsetup_r+0x3c>
 800b294:	686c      	ldr	r4, [r5, #4]
 800b296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	0715      	lsls	r5, r2, #28
 800b29e:	d42c      	bmi.n	800b2fa <__swsetup_r+0x82>
 800b2a0:	06d0      	lsls	r0, r2, #27
 800b2a2:	d411      	bmi.n	800b2c8 <__swsetup_r+0x50>
 800b2a4:	2209      	movs	r2, #9
 800b2a6:	6032      	str	r2, [r6, #0]
 800b2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	e03e      	b.n	800b332 <__swsetup_r+0xba>
 800b2b4:	4b25      	ldr	r3, [pc, #148]	; (800b34c <__swsetup_r+0xd4>)
 800b2b6:	429c      	cmp	r4, r3
 800b2b8:	d101      	bne.n	800b2be <__swsetup_r+0x46>
 800b2ba:	68ac      	ldr	r4, [r5, #8]
 800b2bc:	e7eb      	b.n	800b296 <__swsetup_r+0x1e>
 800b2be:	4b24      	ldr	r3, [pc, #144]	; (800b350 <__swsetup_r+0xd8>)
 800b2c0:	429c      	cmp	r4, r3
 800b2c2:	bf08      	it	eq
 800b2c4:	68ec      	ldreq	r4, [r5, #12]
 800b2c6:	e7e6      	b.n	800b296 <__swsetup_r+0x1e>
 800b2c8:	0751      	lsls	r1, r2, #29
 800b2ca:	d512      	bpl.n	800b2f2 <__swsetup_r+0x7a>
 800b2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ce:	b141      	cbz	r1, 800b2e2 <__swsetup_r+0x6a>
 800b2d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2d4:	4299      	cmp	r1, r3
 800b2d6:	d002      	beq.n	800b2de <__swsetup_r+0x66>
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f001 ffc1 	bl	800d260 <_free_r>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6363      	str	r3, [r4, #52]	; 0x34
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2e8:	81a3      	strh	r3, [r4, #12]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	6063      	str	r3, [r4, #4]
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	f043 0308 	orr.w	r3, r3, #8
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	b94b      	cbnz	r3, 800b312 <__swsetup_r+0x9a>
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b308:	d003      	beq.n	800b312 <__swsetup_r+0x9a>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4630      	mov	r0, r6
 800b30e:	f001 fb3f 	bl	800c990 <__smakebuf_r>
 800b312:	89a2      	ldrh	r2, [r4, #12]
 800b314:	f012 0301 	ands.w	r3, r2, #1
 800b318:	d00c      	beq.n	800b334 <__swsetup_r+0xbc>
 800b31a:	2300      	movs	r3, #0
 800b31c:	60a3      	str	r3, [r4, #8]
 800b31e:	6963      	ldr	r3, [r4, #20]
 800b320:	425b      	negs	r3, r3
 800b322:	61a3      	str	r3, [r4, #24]
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	b953      	cbnz	r3, 800b33e <__swsetup_r+0xc6>
 800b328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b32c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b330:	d1ba      	bne.n	800b2a8 <__swsetup_r+0x30>
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	0792      	lsls	r2, r2, #30
 800b336:	bf58      	it	pl
 800b338:	6963      	ldrpl	r3, [r4, #20]
 800b33a:	60a3      	str	r3, [r4, #8]
 800b33c:	e7f2      	b.n	800b324 <__swsetup_r+0xac>
 800b33e:	2000      	movs	r0, #0
 800b340:	e7f7      	b.n	800b332 <__swsetup_r+0xba>
 800b342:	bf00      	nop
 800b344:	20000040 	.word	0x20000040
 800b348:	0800dc60 	.word	0x0800dc60
 800b34c:	0800dc80 	.word	0x0800dc80
 800b350:	0800dc40 	.word	0x0800dc40

0800b354 <quorem>:
 800b354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	6903      	ldr	r3, [r0, #16]
 800b35a:	690c      	ldr	r4, [r1, #16]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	4680      	mov	r8, r0
 800b360:	f2c0 8082 	blt.w	800b468 <quorem+0x114>
 800b364:	3c01      	subs	r4, #1
 800b366:	f101 0714 	add.w	r7, r1, #20
 800b36a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b36e:	f100 0614 	add.w	r6, r0, #20
 800b372:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b376:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b37a:	eb06 030c 	add.w	r3, r6, ip
 800b37e:	3501      	adds	r5, #1
 800b380:	eb07 090c 	add.w	r9, r7, ip
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	fbb0 f5f5 	udiv	r5, r0, r5
 800b38a:	b395      	cbz	r5, 800b3f2 <quorem+0x9e>
 800b38c:	f04f 0a00 	mov.w	sl, #0
 800b390:	4638      	mov	r0, r7
 800b392:	46b6      	mov	lr, r6
 800b394:	46d3      	mov	fp, sl
 800b396:	f850 2b04 	ldr.w	r2, [r0], #4
 800b39a:	b293      	uxth	r3, r2
 800b39c:	fb05 a303 	mla	r3, r5, r3, sl
 800b3a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	ebab 0303 	sub.w	r3, fp, r3
 800b3aa:	0c12      	lsrs	r2, r2, #16
 800b3ac:	f8de b000 	ldr.w	fp, [lr]
 800b3b0:	fb05 a202 	mla	r2, r5, r2, sl
 800b3b4:	fa13 f38b 	uxtah	r3, r3, fp
 800b3b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b3bc:	fa1f fb82 	uxth.w	fp, r2
 800b3c0:	f8de 2000 	ldr.w	r2, [lr]
 800b3c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b3c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3d2:	4581      	cmp	r9, r0
 800b3d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b3d8:	f84e 3b04 	str.w	r3, [lr], #4
 800b3dc:	d2db      	bcs.n	800b396 <quorem+0x42>
 800b3de:	f856 300c 	ldr.w	r3, [r6, ip]
 800b3e2:	b933      	cbnz	r3, 800b3f2 <quorem+0x9e>
 800b3e4:	9b01      	ldr	r3, [sp, #4]
 800b3e6:	3b04      	subs	r3, #4
 800b3e8:	429e      	cmp	r6, r3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	d330      	bcc.n	800b450 <quorem+0xfc>
 800b3ee:	f8c8 4010 	str.w	r4, [r8, #16]
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	f001 fd7a 	bl	800ceec <__mcmp>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	db25      	blt.n	800b448 <quorem+0xf4>
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	4630      	mov	r0, r6
 800b400:	f04f 0c00 	mov.w	ip, #0
 800b404:	f857 2b04 	ldr.w	r2, [r7], #4
 800b408:	f8d0 e000 	ldr.w	lr, [r0]
 800b40c:	b293      	uxth	r3, r2
 800b40e:	ebac 0303 	sub.w	r3, ip, r3
 800b412:	0c12      	lsrs	r2, r2, #16
 800b414:	fa13 f38e 	uxtah	r3, r3, lr
 800b418:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b41c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b420:	b29b      	uxth	r3, r3
 800b422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b426:	45b9      	cmp	r9, r7
 800b428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b42c:	f840 3b04 	str.w	r3, [r0], #4
 800b430:	d2e8      	bcs.n	800b404 <quorem+0xb0>
 800b432:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b436:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b43a:	b92a      	cbnz	r2, 800b448 <quorem+0xf4>
 800b43c:	3b04      	subs	r3, #4
 800b43e:	429e      	cmp	r6, r3
 800b440:	461a      	mov	r2, r3
 800b442:	d30b      	bcc.n	800b45c <quorem+0x108>
 800b444:	f8c8 4010 	str.w	r4, [r8, #16]
 800b448:	4628      	mov	r0, r5
 800b44a:	b003      	add	sp, #12
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	3b04      	subs	r3, #4
 800b454:	2a00      	cmp	r2, #0
 800b456:	d1ca      	bne.n	800b3ee <quorem+0x9a>
 800b458:	3c01      	subs	r4, #1
 800b45a:	e7c5      	b.n	800b3e8 <quorem+0x94>
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	3b04      	subs	r3, #4
 800b460:	2a00      	cmp	r2, #0
 800b462:	d1ef      	bne.n	800b444 <quorem+0xf0>
 800b464:	3c01      	subs	r4, #1
 800b466:	e7ea      	b.n	800b43e <quorem+0xea>
 800b468:	2000      	movs	r0, #0
 800b46a:	e7ee      	b.n	800b44a <quorem+0xf6>
 800b46c:	0000      	movs	r0, r0
	...

0800b470 <_dtoa_r>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	ec57 6b10 	vmov	r6, r7, d0
 800b478:	b097      	sub	sp, #92	; 0x5c
 800b47a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b47c:	9106      	str	r1, [sp, #24]
 800b47e:	4604      	mov	r4, r0
 800b480:	920b      	str	r2, [sp, #44]	; 0x2c
 800b482:	9312      	str	r3, [sp, #72]	; 0x48
 800b484:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b488:	e9cd 6700 	strd	r6, r7, [sp]
 800b48c:	b93d      	cbnz	r5, 800b49e <_dtoa_r+0x2e>
 800b48e:	2010      	movs	r0, #16
 800b490:	f001 fabe 	bl	800ca10 <malloc>
 800b494:	6260      	str	r0, [r4, #36]	; 0x24
 800b496:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b49a:	6005      	str	r5, [r0, #0]
 800b49c:	60c5      	str	r5, [r0, #12]
 800b49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a0:	6819      	ldr	r1, [r3, #0]
 800b4a2:	b151      	cbz	r1, 800b4ba <_dtoa_r+0x4a>
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	604a      	str	r2, [r1, #4]
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4093      	lsls	r3, r2
 800b4ac:	608b      	str	r3, [r1, #8]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 fafc 	bl	800caac <_Bfree>
 800b4b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	1e3b      	subs	r3, r7, #0
 800b4bc:	bfbb      	ittet	lt
 800b4be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b4c2:	9301      	strlt	r3, [sp, #4]
 800b4c4:	2300      	movge	r3, #0
 800b4c6:	2201      	movlt	r2, #1
 800b4c8:	bfac      	ite	ge
 800b4ca:	f8c8 3000 	strge.w	r3, [r8]
 800b4ce:	f8c8 2000 	strlt.w	r2, [r8]
 800b4d2:	4baf      	ldr	r3, [pc, #700]	; (800b790 <_dtoa_r+0x320>)
 800b4d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b4d8:	ea33 0308 	bics.w	r3, r3, r8
 800b4dc:	d114      	bne.n	800b508 <_dtoa_r+0x98>
 800b4de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b4e4:	6013      	str	r3, [r2, #0]
 800b4e6:	9b00      	ldr	r3, [sp, #0]
 800b4e8:	b923      	cbnz	r3, 800b4f4 <_dtoa_r+0x84>
 800b4ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f000 8542 	beq.w	800bf78 <_dtoa_r+0xb08>
 800b4f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b7a4 <_dtoa_r+0x334>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8544 	beq.w	800bf88 <_dtoa_r+0xb18>
 800b500:	f10b 0303 	add.w	r3, fp, #3
 800b504:	f000 bd3e 	b.w	800bf84 <_dtoa_r+0xb14>
 800b508:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b50c:	2200      	movs	r2, #0
 800b50e:	2300      	movs	r3, #0
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b518:	4681      	mov	r9, r0
 800b51a:	b168      	cbz	r0, 800b538 <_dtoa_r+0xc8>
 800b51c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b51e:	2301      	movs	r3, #1
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 8524 	beq.w	800bf72 <_dtoa_r+0xb02>
 800b52a:	4b9a      	ldr	r3, [pc, #616]	; (800b794 <_dtoa_r+0x324>)
 800b52c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b52e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	f000 bd28 	b.w	800bf88 <_dtoa_r+0xb18>
 800b538:	aa14      	add	r2, sp, #80	; 0x50
 800b53a:	a915      	add	r1, sp, #84	; 0x54
 800b53c:	ec47 6b10 	vmov	d0, r6, r7
 800b540:	4620      	mov	r0, r4
 800b542:	f001 fdc1 	bl	800d0c8 <__d2b>
 800b546:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b54a:	9004      	str	r0, [sp, #16]
 800b54c:	2d00      	cmp	r5, #0
 800b54e:	d07c      	beq.n	800b64a <_dtoa_r+0x1da>
 800b550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b554:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b558:	46b2      	mov	sl, r6
 800b55a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b562:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b566:	2200      	movs	r2, #0
 800b568:	4b8b      	ldr	r3, [pc, #556]	; (800b798 <_dtoa_r+0x328>)
 800b56a:	4650      	mov	r0, sl
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f4 fe8b 	bl	8000288 <__aeabi_dsub>
 800b572:	a381      	add	r3, pc, #516	; (adr r3, 800b778 <_dtoa_r+0x308>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f5 f83e 	bl	80005f8 <__aeabi_dmul>
 800b57c:	a380      	add	r3, pc, #512	; (adr r3, 800b780 <_dtoa_r+0x310>)
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	f7f4 fe83 	bl	800028c <__adddf3>
 800b586:	4606      	mov	r6, r0
 800b588:	4628      	mov	r0, r5
 800b58a:	460f      	mov	r7, r1
 800b58c:	f7f4 ffca 	bl	8000524 <__aeabi_i2d>
 800b590:	a37d      	add	r3, pc, #500	; (adr r3, 800b788 <_dtoa_r+0x318>)
 800b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b596:	f7f5 f82f 	bl	80005f8 <__aeabi_dmul>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	f7f4 fe73 	bl	800028c <__adddf3>
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460f      	mov	r7, r1
 800b5aa:	f7f5 fad5 	bl	8000b58 <__aeabi_d2iz>
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	4639      	mov	r1, r7
 800b5b8:	f7f5 fa90 	bl	8000adc <__aeabi_dcmplt>
 800b5bc:	b148      	cbz	r0, 800b5d2 <_dtoa_r+0x162>
 800b5be:	4650      	mov	r0, sl
 800b5c0:	f7f4 ffb0 	bl	8000524 <__aeabi_i2d>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	463b      	mov	r3, r7
 800b5c8:	f7f5 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5cc:	b908      	cbnz	r0, 800b5d2 <_dtoa_r+0x162>
 800b5ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5d2:	f1ba 0f16 	cmp.w	sl, #22
 800b5d6:	d859      	bhi.n	800b68c <_dtoa_r+0x21c>
 800b5d8:	4970      	ldr	r1, [pc, #448]	; (800b79c <_dtoa_r+0x32c>)
 800b5da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b5de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e6:	f7f5 fa97 	bl	8000b18 <__aeabi_dcmpgt>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d050      	beq.n	800b690 <_dtoa_r+0x220>
 800b5ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5f8:	1b5d      	subs	r5, r3, r5
 800b5fa:	f1b5 0801 	subs.w	r8, r5, #1
 800b5fe:	bf49      	itett	mi
 800b600:	f1c5 0301 	rsbmi	r3, r5, #1
 800b604:	2300      	movpl	r3, #0
 800b606:	9305      	strmi	r3, [sp, #20]
 800b608:	f04f 0800 	movmi.w	r8, #0
 800b60c:	bf58      	it	pl
 800b60e:	9305      	strpl	r3, [sp, #20]
 800b610:	f1ba 0f00 	cmp.w	sl, #0
 800b614:	db3e      	blt.n	800b694 <_dtoa_r+0x224>
 800b616:	2300      	movs	r3, #0
 800b618:	44d0      	add	r8, sl
 800b61a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b61e:	9307      	str	r3, [sp, #28]
 800b620:	9b06      	ldr	r3, [sp, #24]
 800b622:	2b09      	cmp	r3, #9
 800b624:	f200 8090 	bhi.w	800b748 <_dtoa_r+0x2d8>
 800b628:	2b05      	cmp	r3, #5
 800b62a:	bfc4      	itt	gt
 800b62c:	3b04      	subgt	r3, #4
 800b62e:	9306      	strgt	r3, [sp, #24]
 800b630:	9b06      	ldr	r3, [sp, #24]
 800b632:	f1a3 0302 	sub.w	r3, r3, #2
 800b636:	bfcc      	ite	gt
 800b638:	2500      	movgt	r5, #0
 800b63a:	2501      	movle	r5, #1
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	f200 808f 	bhi.w	800b760 <_dtoa_r+0x2f0>
 800b642:	e8df f003 	tbb	[pc, r3]
 800b646:	7f7d      	.short	0x7f7d
 800b648:	7131      	.short	0x7131
 800b64a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b64e:	441d      	add	r5, r3
 800b650:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b654:	2820      	cmp	r0, #32
 800b656:	dd13      	ble.n	800b680 <_dtoa_r+0x210>
 800b658:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b65c:	9b00      	ldr	r3, [sp, #0]
 800b65e:	fa08 f800 	lsl.w	r8, r8, r0
 800b662:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b666:	fa23 f000 	lsr.w	r0, r3, r0
 800b66a:	ea48 0000 	orr.w	r0, r8, r0
 800b66e:	f7f4 ff49 	bl	8000504 <__aeabi_ui2d>
 800b672:	2301      	movs	r3, #1
 800b674:	4682      	mov	sl, r0
 800b676:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b67a:	3d01      	subs	r5, #1
 800b67c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b67e:	e772      	b.n	800b566 <_dtoa_r+0xf6>
 800b680:	9b00      	ldr	r3, [sp, #0]
 800b682:	f1c0 0020 	rsb	r0, r0, #32
 800b686:	fa03 f000 	lsl.w	r0, r3, r0
 800b68a:	e7f0      	b.n	800b66e <_dtoa_r+0x1fe>
 800b68c:	2301      	movs	r3, #1
 800b68e:	e7b1      	b.n	800b5f4 <_dtoa_r+0x184>
 800b690:	900f      	str	r0, [sp, #60]	; 0x3c
 800b692:	e7b0      	b.n	800b5f6 <_dtoa_r+0x186>
 800b694:	9b05      	ldr	r3, [sp, #20]
 800b696:	eba3 030a 	sub.w	r3, r3, sl
 800b69a:	9305      	str	r3, [sp, #20]
 800b69c:	f1ca 0300 	rsb	r3, sl, #0
 800b6a0:	9307      	str	r3, [sp, #28]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b6a6:	e7bb      	b.n	800b620 <_dtoa_r+0x1b0>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	dd59      	ble.n	800b766 <_dtoa_r+0x2f6>
 800b6b2:	9302      	str	r3, [sp, #8]
 800b6b4:	4699      	mov	r9, r3
 800b6b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	6072      	str	r2, [r6, #4]
 800b6bc:	2204      	movs	r2, #4
 800b6be:	f102 0014 	add.w	r0, r2, #20
 800b6c2:	4298      	cmp	r0, r3
 800b6c4:	6871      	ldr	r1, [r6, #4]
 800b6c6:	d953      	bls.n	800b770 <_dtoa_r+0x300>
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f001 f9bb 	bl	800ca44 <_Balloc>
 800b6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6d0:	6030      	str	r0, [r6, #0]
 800b6d2:	f1b9 0f0e 	cmp.w	r9, #14
 800b6d6:	f8d3 b000 	ldr.w	fp, [r3]
 800b6da:	f200 80e6 	bhi.w	800b8aa <_dtoa_r+0x43a>
 800b6de:	2d00      	cmp	r5, #0
 800b6e0:	f000 80e3 	beq.w	800b8aa <_dtoa_r+0x43a>
 800b6e4:	ed9d 7b00 	vldr	d7, [sp]
 800b6e8:	f1ba 0f00 	cmp.w	sl, #0
 800b6ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b6f0:	dd74      	ble.n	800b7dc <_dtoa_r+0x36c>
 800b6f2:	4a2a      	ldr	r2, [pc, #168]	; (800b79c <_dtoa_r+0x32c>)
 800b6f4:	f00a 030f 	and.w	r3, sl, #15
 800b6f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6fc:	ed93 7b00 	vldr	d7, [r3]
 800b700:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b704:	06f0      	lsls	r0, r6, #27
 800b706:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b70a:	d565      	bpl.n	800b7d8 <_dtoa_r+0x368>
 800b70c:	4b24      	ldr	r3, [pc, #144]	; (800b7a0 <_dtoa_r+0x330>)
 800b70e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b712:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b716:	f7f5 f899 	bl	800084c <__aeabi_ddiv>
 800b71a:	e9cd 0100 	strd	r0, r1, [sp]
 800b71e:	f006 060f 	and.w	r6, r6, #15
 800b722:	2503      	movs	r5, #3
 800b724:	4f1e      	ldr	r7, [pc, #120]	; (800b7a0 <_dtoa_r+0x330>)
 800b726:	e04c      	b.n	800b7c2 <_dtoa_r+0x352>
 800b728:	2301      	movs	r3, #1
 800b72a:	930a      	str	r3, [sp, #40]	; 0x28
 800b72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b72e:	4453      	add	r3, sl
 800b730:	f103 0901 	add.w	r9, r3, #1
 800b734:	9302      	str	r3, [sp, #8]
 800b736:	464b      	mov	r3, r9
 800b738:	2b01      	cmp	r3, #1
 800b73a:	bfb8      	it	lt
 800b73c:	2301      	movlt	r3, #1
 800b73e:	e7ba      	b.n	800b6b6 <_dtoa_r+0x246>
 800b740:	2300      	movs	r3, #0
 800b742:	e7b2      	b.n	800b6aa <_dtoa_r+0x23a>
 800b744:	2300      	movs	r3, #0
 800b746:	e7f0      	b.n	800b72a <_dtoa_r+0x2ba>
 800b748:	2501      	movs	r5, #1
 800b74a:	2300      	movs	r3, #0
 800b74c:	9306      	str	r3, [sp, #24]
 800b74e:	950a      	str	r5, [sp, #40]	; 0x28
 800b750:	f04f 33ff 	mov.w	r3, #4294967295
 800b754:	9302      	str	r3, [sp, #8]
 800b756:	4699      	mov	r9, r3
 800b758:	2200      	movs	r2, #0
 800b75a:	2312      	movs	r3, #18
 800b75c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b75e:	e7aa      	b.n	800b6b6 <_dtoa_r+0x246>
 800b760:	2301      	movs	r3, #1
 800b762:	930a      	str	r3, [sp, #40]	; 0x28
 800b764:	e7f4      	b.n	800b750 <_dtoa_r+0x2e0>
 800b766:	2301      	movs	r3, #1
 800b768:	9302      	str	r3, [sp, #8]
 800b76a:	4699      	mov	r9, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	e7f5      	b.n	800b75c <_dtoa_r+0x2ec>
 800b770:	3101      	adds	r1, #1
 800b772:	6071      	str	r1, [r6, #4]
 800b774:	0052      	lsls	r2, r2, #1
 800b776:	e7a2      	b.n	800b6be <_dtoa_r+0x24e>
 800b778:	636f4361 	.word	0x636f4361
 800b77c:	3fd287a7 	.word	0x3fd287a7
 800b780:	8b60c8b3 	.word	0x8b60c8b3
 800b784:	3fc68a28 	.word	0x3fc68a28
 800b788:	509f79fb 	.word	0x509f79fb
 800b78c:	3fd34413 	.word	0x3fd34413
 800b790:	7ff00000 	.word	0x7ff00000
 800b794:	0800dbb5 	.word	0x0800dbb5
 800b798:	3ff80000 	.word	0x3ff80000
 800b79c:	0800dcd8 	.word	0x0800dcd8
 800b7a0:	0800dcb0 	.word	0x0800dcb0
 800b7a4:	0800dc39 	.word	0x0800dc39
 800b7a8:	07f1      	lsls	r1, r6, #31
 800b7aa:	d508      	bpl.n	800b7be <_dtoa_r+0x34e>
 800b7ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7b4:	f7f4 ff20 	bl	80005f8 <__aeabi_dmul>
 800b7b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7bc:	3501      	adds	r5, #1
 800b7be:	1076      	asrs	r6, r6, #1
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	d1f0      	bne.n	800b7a8 <_dtoa_r+0x338>
 800b7c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7ce:	f7f5 f83d 	bl	800084c <__aeabi_ddiv>
 800b7d2:	e9cd 0100 	strd	r0, r1, [sp]
 800b7d6:	e01a      	b.n	800b80e <_dtoa_r+0x39e>
 800b7d8:	2502      	movs	r5, #2
 800b7da:	e7a3      	b.n	800b724 <_dtoa_r+0x2b4>
 800b7dc:	f000 80a0 	beq.w	800b920 <_dtoa_r+0x4b0>
 800b7e0:	f1ca 0600 	rsb	r6, sl, #0
 800b7e4:	4b9f      	ldr	r3, [pc, #636]	; (800ba64 <_dtoa_r+0x5f4>)
 800b7e6:	4fa0      	ldr	r7, [pc, #640]	; (800ba68 <_dtoa_r+0x5f8>)
 800b7e8:	f006 020f 	and.w	r2, r6, #15
 800b7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7f8:	f7f4 fefe 	bl	80005f8 <__aeabi_dmul>
 800b7fc:	e9cd 0100 	strd	r0, r1, [sp]
 800b800:	1136      	asrs	r6, r6, #4
 800b802:	2300      	movs	r3, #0
 800b804:	2502      	movs	r5, #2
 800b806:	2e00      	cmp	r6, #0
 800b808:	d17f      	bne.n	800b90a <_dtoa_r+0x49a>
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1e1      	bne.n	800b7d2 <_dtoa_r+0x362>
 800b80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 8087 	beq.w	800b924 <_dtoa_r+0x4b4>
 800b816:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b81a:	2200      	movs	r2, #0
 800b81c:	4b93      	ldr	r3, [pc, #588]	; (800ba6c <_dtoa_r+0x5fc>)
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f5 f95b 	bl	8000adc <__aeabi_dcmplt>
 800b826:	2800      	cmp	r0, #0
 800b828:	d07c      	beq.n	800b924 <_dtoa_r+0x4b4>
 800b82a:	f1b9 0f00 	cmp.w	r9, #0
 800b82e:	d079      	beq.n	800b924 <_dtoa_r+0x4b4>
 800b830:	9b02      	ldr	r3, [sp, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	dd35      	ble.n	800b8a2 <_dtoa_r+0x432>
 800b836:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b83a:	9308      	str	r3, [sp, #32]
 800b83c:	4639      	mov	r1, r7
 800b83e:	2200      	movs	r2, #0
 800b840:	4b8b      	ldr	r3, [pc, #556]	; (800ba70 <_dtoa_r+0x600>)
 800b842:	4630      	mov	r0, r6
 800b844:	f7f4 fed8 	bl	80005f8 <__aeabi_dmul>
 800b848:	e9cd 0100 	strd	r0, r1, [sp]
 800b84c:	9f02      	ldr	r7, [sp, #8]
 800b84e:	3501      	adds	r5, #1
 800b850:	4628      	mov	r0, r5
 800b852:	f7f4 fe67 	bl	8000524 <__aeabi_i2d>
 800b856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b85a:	f7f4 fecd 	bl	80005f8 <__aeabi_dmul>
 800b85e:	2200      	movs	r2, #0
 800b860:	4b84      	ldr	r3, [pc, #528]	; (800ba74 <_dtoa_r+0x604>)
 800b862:	f7f4 fd13 	bl	800028c <__adddf3>
 800b866:	4605      	mov	r5, r0
 800b868:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b86c:	2f00      	cmp	r7, #0
 800b86e:	d15d      	bne.n	800b92c <_dtoa_r+0x4bc>
 800b870:	2200      	movs	r2, #0
 800b872:	4b81      	ldr	r3, [pc, #516]	; (800ba78 <_dtoa_r+0x608>)
 800b874:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b878:	f7f4 fd06 	bl	8000288 <__aeabi_dsub>
 800b87c:	462a      	mov	r2, r5
 800b87e:	4633      	mov	r3, r6
 800b880:	e9cd 0100 	strd	r0, r1, [sp]
 800b884:	f7f5 f948 	bl	8000b18 <__aeabi_dcmpgt>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f040 8288 	bne.w	800bd9e <_dtoa_r+0x92e>
 800b88e:	462a      	mov	r2, r5
 800b890:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b894:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b898:	f7f5 f920 	bl	8000adc <__aeabi_dcmplt>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	f040 827c 	bne.w	800bd9a <_dtoa_r+0x92a>
 800b8a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8a6:	e9cd 2300 	strd	r2, r3, [sp]
 800b8aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f2c0 8150 	blt.w	800bb52 <_dtoa_r+0x6e2>
 800b8b2:	f1ba 0f0e 	cmp.w	sl, #14
 800b8b6:	f300 814c 	bgt.w	800bb52 <_dtoa_r+0x6e2>
 800b8ba:	4b6a      	ldr	r3, [pc, #424]	; (800ba64 <_dtoa_r+0x5f4>)
 800b8bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b8c0:	ed93 7b00 	vldr	d7, [r3]
 800b8c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8cc:	f280 80d8 	bge.w	800ba80 <_dtoa_r+0x610>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	f300 80d4 	bgt.w	800ba80 <_dtoa_r+0x610>
 800b8d8:	f040 825e 	bne.w	800bd98 <_dtoa_r+0x928>
 800b8dc:	2200      	movs	r2, #0
 800b8de:	4b66      	ldr	r3, [pc, #408]	; (800ba78 <_dtoa_r+0x608>)
 800b8e0:	ec51 0b17 	vmov	r0, r1, d7
 800b8e4:	f7f4 fe88 	bl	80005f8 <__aeabi_dmul>
 800b8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ec:	f7f5 f90a 	bl	8000b04 <__aeabi_dcmpge>
 800b8f0:	464f      	mov	r7, r9
 800b8f2:	464e      	mov	r6, r9
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f040 8234 	bne.w	800bd62 <_dtoa_r+0x8f2>
 800b8fa:	2331      	movs	r3, #49	; 0x31
 800b8fc:	f10b 0501 	add.w	r5, fp, #1
 800b900:	f88b 3000 	strb.w	r3, [fp]
 800b904:	f10a 0a01 	add.w	sl, sl, #1
 800b908:	e22f      	b.n	800bd6a <_dtoa_r+0x8fa>
 800b90a:	07f2      	lsls	r2, r6, #31
 800b90c:	d505      	bpl.n	800b91a <_dtoa_r+0x4aa>
 800b90e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b912:	f7f4 fe71 	bl	80005f8 <__aeabi_dmul>
 800b916:	3501      	adds	r5, #1
 800b918:	2301      	movs	r3, #1
 800b91a:	1076      	asrs	r6, r6, #1
 800b91c:	3708      	adds	r7, #8
 800b91e:	e772      	b.n	800b806 <_dtoa_r+0x396>
 800b920:	2502      	movs	r5, #2
 800b922:	e774      	b.n	800b80e <_dtoa_r+0x39e>
 800b924:	f8cd a020 	str.w	sl, [sp, #32]
 800b928:	464f      	mov	r7, r9
 800b92a:	e791      	b.n	800b850 <_dtoa_r+0x3e0>
 800b92c:	4b4d      	ldr	r3, [pc, #308]	; (800ba64 <_dtoa_r+0x5f4>)
 800b92e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b932:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d047      	beq.n	800b9cc <_dtoa_r+0x55c>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	2000      	movs	r0, #0
 800b942:	494e      	ldr	r1, [pc, #312]	; (800ba7c <_dtoa_r+0x60c>)
 800b944:	f7f4 ff82 	bl	800084c <__aeabi_ddiv>
 800b948:	462a      	mov	r2, r5
 800b94a:	4633      	mov	r3, r6
 800b94c:	f7f4 fc9c 	bl	8000288 <__aeabi_dsub>
 800b950:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b954:	465d      	mov	r5, fp
 800b956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b95a:	f7f5 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800b95e:	4606      	mov	r6, r0
 800b960:	f7f4 fde0 	bl	8000524 <__aeabi_i2d>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b96c:	f7f4 fc8c 	bl	8000288 <__aeabi_dsub>
 800b970:	3630      	adds	r6, #48	; 0x30
 800b972:	f805 6b01 	strb.w	r6, [r5], #1
 800b976:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b97a:	e9cd 0100 	strd	r0, r1, [sp]
 800b97e:	f7f5 f8ad 	bl	8000adc <__aeabi_dcmplt>
 800b982:	2800      	cmp	r0, #0
 800b984:	d163      	bne.n	800ba4e <_dtoa_r+0x5de>
 800b986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b98a:	2000      	movs	r0, #0
 800b98c:	4937      	ldr	r1, [pc, #220]	; (800ba6c <_dtoa_r+0x5fc>)
 800b98e:	f7f4 fc7b 	bl	8000288 <__aeabi_dsub>
 800b992:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b996:	f7f5 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	f040 80b7 	bne.w	800bb0e <_dtoa_r+0x69e>
 800b9a0:	eba5 030b 	sub.w	r3, r5, fp
 800b9a4:	429f      	cmp	r7, r3
 800b9a6:	f77f af7c 	ble.w	800b8a2 <_dtoa_r+0x432>
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	4b30      	ldr	r3, [pc, #192]	; (800ba70 <_dtoa_r+0x600>)
 800b9ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9b2:	f7f4 fe21 	bl	80005f8 <__aeabi_dmul>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9bc:	4b2c      	ldr	r3, [pc, #176]	; (800ba70 <_dtoa_r+0x600>)
 800b9be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9c2:	f7f4 fe19 	bl	80005f8 <__aeabi_dmul>
 800b9c6:	e9cd 0100 	strd	r0, r1, [sp]
 800b9ca:	e7c4      	b.n	800b956 <_dtoa_r+0x4e6>
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	4633      	mov	r3, r6
 800b9d0:	f7f4 fe12 	bl	80005f8 <__aeabi_dmul>
 800b9d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9d8:	eb0b 0507 	add.w	r5, fp, r7
 800b9dc:	465e      	mov	r6, fp
 800b9de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9e2:	f7f5 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	f7f4 fd9c 	bl	8000524 <__aeabi_i2d>
 800b9ec:	3730      	adds	r7, #48	; 0x30
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9f6:	f7f4 fc47 	bl	8000288 <__aeabi_dsub>
 800b9fa:	f806 7b01 	strb.w	r7, [r6], #1
 800b9fe:	42ae      	cmp	r6, r5
 800ba00:	e9cd 0100 	strd	r0, r1, [sp]
 800ba04:	f04f 0200 	mov.w	r2, #0
 800ba08:	d126      	bne.n	800ba58 <_dtoa_r+0x5e8>
 800ba0a:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <_dtoa_r+0x60c>)
 800ba0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba10:	f7f4 fc3c 	bl	800028c <__adddf3>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba1c:	f7f5 f87c 	bl	8000b18 <__aeabi_dcmpgt>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d174      	bne.n	800bb0e <_dtoa_r+0x69e>
 800ba24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4914      	ldr	r1, [pc, #80]	; (800ba7c <_dtoa_r+0x60c>)
 800ba2c:	f7f4 fc2c 	bl	8000288 <__aeabi_dsub>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba38:	f7f5 f850 	bl	8000adc <__aeabi_dcmplt>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f43f af30 	beq.w	800b8a2 <_dtoa_r+0x432>
 800ba42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba46:	2b30      	cmp	r3, #48	; 0x30
 800ba48:	f105 32ff 	add.w	r2, r5, #4294967295
 800ba4c:	d002      	beq.n	800ba54 <_dtoa_r+0x5e4>
 800ba4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ba52:	e04a      	b.n	800baea <_dtoa_r+0x67a>
 800ba54:	4615      	mov	r5, r2
 800ba56:	e7f4      	b.n	800ba42 <_dtoa_r+0x5d2>
 800ba58:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <_dtoa_r+0x600>)
 800ba5a:	f7f4 fdcd 	bl	80005f8 <__aeabi_dmul>
 800ba5e:	e9cd 0100 	strd	r0, r1, [sp]
 800ba62:	e7bc      	b.n	800b9de <_dtoa_r+0x56e>
 800ba64:	0800dcd8 	.word	0x0800dcd8
 800ba68:	0800dcb0 	.word	0x0800dcb0
 800ba6c:	3ff00000 	.word	0x3ff00000
 800ba70:	40240000 	.word	0x40240000
 800ba74:	401c0000 	.word	0x401c0000
 800ba78:	40140000 	.word	0x40140000
 800ba7c:	3fe00000 	.word	0x3fe00000
 800ba80:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba84:	465d      	mov	r5, fp
 800ba86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f4 fedd 	bl	800084c <__aeabi_ddiv>
 800ba92:	f7f5 f861 	bl	8000b58 <__aeabi_d2iz>
 800ba96:	4680      	mov	r8, r0
 800ba98:	f7f4 fd44 	bl	8000524 <__aeabi_i2d>
 800ba9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bab0:	f7f4 fbea 	bl	8000288 <__aeabi_dsub>
 800bab4:	f805 6b01 	strb.w	r6, [r5], #1
 800bab8:	eba5 060b 	sub.w	r6, r5, fp
 800babc:	45b1      	cmp	r9, r6
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	d139      	bne.n	800bb38 <_dtoa_r+0x6c8>
 800bac4:	f7f4 fbe2 	bl	800028c <__adddf3>
 800bac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	f7f5 f822 	bl	8000b18 <__aeabi_dcmpgt>
 800bad4:	b9c8      	cbnz	r0, 800bb0a <_dtoa_r+0x69a>
 800bad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bada:	4630      	mov	r0, r6
 800badc:	4639      	mov	r1, r7
 800bade:	f7f4 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae2:	b110      	cbz	r0, 800baea <_dtoa_r+0x67a>
 800bae4:	f018 0f01 	tst.w	r8, #1
 800bae8:	d10f      	bne.n	800bb0a <_dtoa_r+0x69a>
 800baea:	9904      	ldr	r1, [sp, #16]
 800baec:	4620      	mov	r0, r4
 800baee:	f000 ffdd 	bl	800caac <_Bfree>
 800baf2:	2300      	movs	r3, #0
 800baf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800baf6:	702b      	strb	r3, [r5, #0]
 800baf8:	f10a 0301 	add.w	r3, sl, #1
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 8241 	beq.w	800bf88 <_dtoa_r+0xb18>
 800bb06:	601d      	str	r5, [r3, #0]
 800bb08:	e23e      	b.n	800bf88 <_dtoa_r+0xb18>
 800bb0a:	f8cd a020 	str.w	sl, [sp, #32]
 800bb0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb12:	2a39      	cmp	r2, #57	; 0x39
 800bb14:	f105 33ff 	add.w	r3, r5, #4294967295
 800bb18:	d108      	bne.n	800bb2c <_dtoa_r+0x6bc>
 800bb1a:	459b      	cmp	fp, r3
 800bb1c:	d10a      	bne.n	800bb34 <_dtoa_r+0x6c4>
 800bb1e:	9b08      	ldr	r3, [sp, #32]
 800bb20:	3301      	adds	r3, #1
 800bb22:	9308      	str	r3, [sp, #32]
 800bb24:	2330      	movs	r3, #48	; 0x30
 800bb26:	f88b 3000 	strb.w	r3, [fp]
 800bb2a:	465b      	mov	r3, fp
 800bb2c:	781a      	ldrb	r2, [r3, #0]
 800bb2e:	3201      	adds	r2, #1
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	e78c      	b.n	800ba4e <_dtoa_r+0x5de>
 800bb34:	461d      	mov	r5, r3
 800bb36:	e7ea      	b.n	800bb0e <_dtoa_r+0x69e>
 800bb38:	2200      	movs	r2, #0
 800bb3a:	4b9b      	ldr	r3, [pc, #620]	; (800bda8 <_dtoa_r+0x938>)
 800bb3c:	f7f4 fd5c 	bl	80005f8 <__aeabi_dmul>
 800bb40:	2200      	movs	r2, #0
 800bb42:	2300      	movs	r3, #0
 800bb44:	4606      	mov	r6, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	f7f4 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d09a      	beq.n	800ba86 <_dtoa_r+0x616>
 800bb50:	e7cb      	b.n	800baea <_dtoa_r+0x67a>
 800bb52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	f000 808b 	beq.w	800bc70 <_dtoa_r+0x800>
 800bb5a:	9a06      	ldr	r2, [sp, #24]
 800bb5c:	2a01      	cmp	r2, #1
 800bb5e:	dc6e      	bgt.n	800bc3e <_dtoa_r+0x7ce>
 800bb60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	d067      	beq.n	800bc36 <_dtoa_r+0x7c6>
 800bb66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb6a:	9f07      	ldr	r7, [sp, #28]
 800bb6c:	9d05      	ldr	r5, [sp, #20]
 800bb6e:	9a05      	ldr	r2, [sp, #20]
 800bb70:	2101      	movs	r1, #1
 800bb72:	441a      	add	r2, r3
 800bb74:	4620      	mov	r0, r4
 800bb76:	9205      	str	r2, [sp, #20]
 800bb78:	4498      	add	r8, r3
 800bb7a:	f001 f875 	bl	800cc68 <__i2b>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	dd0c      	ble.n	800bb9e <_dtoa_r+0x72e>
 800bb84:	f1b8 0f00 	cmp.w	r8, #0
 800bb88:	dd09      	ble.n	800bb9e <_dtoa_r+0x72e>
 800bb8a:	4545      	cmp	r5, r8
 800bb8c:	9a05      	ldr	r2, [sp, #20]
 800bb8e:	462b      	mov	r3, r5
 800bb90:	bfa8      	it	ge
 800bb92:	4643      	movge	r3, r8
 800bb94:	1ad2      	subs	r2, r2, r3
 800bb96:	9205      	str	r2, [sp, #20]
 800bb98:	1aed      	subs	r5, r5, r3
 800bb9a:	eba8 0803 	sub.w	r8, r8, r3
 800bb9e:	9b07      	ldr	r3, [sp, #28]
 800bba0:	b1eb      	cbz	r3, 800bbde <_dtoa_r+0x76e>
 800bba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d067      	beq.n	800bc78 <_dtoa_r+0x808>
 800bba8:	b18f      	cbz	r7, 800bbce <_dtoa_r+0x75e>
 800bbaa:	4631      	mov	r1, r6
 800bbac:	463a      	mov	r2, r7
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f001 f8fa 	bl	800cda8 <__pow5mult>
 800bbb4:	9a04      	ldr	r2, [sp, #16]
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	4606      	mov	r6, r0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f001 f85d 	bl	800cc7a <__multiply>
 800bbc0:	9904      	ldr	r1, [sp, #16]
 800bbc2:	9008      	str	r0, [sp, #32]
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 ff71 	bl	800caac <_Bfree>
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	9304      	str	r3, [sp, #16]
 800bbce:	9b07      	ldr	r3, [sp, #28]
 800bbd0:	1bda      	subs	r2, r3, r7
 800bbd2:	d004      	beq.n	800bbde <_dtoa_r+0x76e>
 800bbd4:	9904      	ldr	r1, [sp, #16]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f001 f8e6 	bl	800cda8 <__pow5mult>
 800bbdc:	9004      	str	r0, [sp, #16]
 800bbde:	2101      	movs	r1, #1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f001 f841 	bl	800cc68 <__i2b>
 800bbe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbe8:	4607      	mov	r7, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 81d0 	beq.w	800bf90 <_dtoa_r+0xb20>
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f001 f8d7 	bl	800cda8 <__pow5mult>
 800bbfa:	9b06      	ldr	r3, [sp, #24]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	4607      	mov	r7, r0
 800bc00:	dc40      	bgt.n	800bc84 <_dtoa_r+0x814>
 800bc02:	9b00      	ldr	r3, [sp, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d139      	bne.n	800bc7c <_dtoa_r+0x80c>
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d136      	bne.n	800bc80 <_dtoa_r+0x810>
 800bc12:	9b01      	ldr	r3, [sp, #4]
 800bc14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc18:	0d1b      	lsrs	r3, r3, #20
 800bc1a:	051b      	lsls	r3, r3, #20
 800bc1c:	b12b      	cbz	r3, 800bc2a <_dtoa_r+0x7ba>
 800bc1e:	9b05      	ldr	r3, [sp, #20]
 800bc20:	3301      	adds	r3, #1
 800bc22:	9305      	str	r3, [sp, #20]
 800bc24:	f108 0801 	add.w	r8, r8, #1
 800bc28:	2301      	movs	r3, #1
 800bc2a:	9307      	str	r3, [sp, #28]
 800bc2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d12a      	bne.n	800bc88 <_dtoa_r+0x818>
 800bc32:	2001      	movs	r0, #1
 800bc34:	e030      	b.n	800bc98 <_dtoa_r+0x828>
 800bc36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc3c:	e795      	b.n	800bb6a <_dtoa_r+0x6fa>
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	f109 37ff 	add.w	r7, r9, #4294967295
 800bc44:	42bb      	cmp	r3, r7
 800bc46:	bfbf      	itttt	lt
 800bc48:	9b07      	ldrlt	r3, [sp, #28]
 800bc4a:	9707      	strlt	r7, [sp, #28]
 800bc4c:	1afa      	sublt	r2, r7, r3
 800bc4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bc50:	bfbb      	ittet	lt
 800bc52:	189b      	addlt	r3, r3, r2
 800bc54:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bc56:	1bdf      	subge	r7, r3, r7
 800bc58:	2700      	movlt	r7, #0
 800bc5a:	f1b9 0f00 	cmp.w	r9, #0
 800bc5e:	bfb5      	itete	lt
 800bc60:	9b05      	ldrlt	r3, [sp, #20]
 800bc62:	9d05      	ldrge	r5, [sp, #20]
 800bc64:	eba3 0509 	sublt.w	r5, r3, r9
 800bc68:	464b      	movge	r3, r9
 800bc6a:	bfb8      	it	lt
 800bc6c:	2300      	movlt	r3, #0
 800bc6e:	e77e      	b.n	800bb6e <_dtoa_r+0x6fe>
 800bc70:	9f07      	ldr	r7, [sp, #28]
 800bc72:	9d05      	ldr	r5, [sp, #20]
 800bc74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bc76:	e783      	b.n	800bb80 <_dtoa_r+0x710>
 800bc78:	9a07      	ldr	r2, [sp, #28]
 800bc7a:	e7ab      	b.n	800bbd4 <_dtoa_r+0x764>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e7d4      	b.n	800bc2a <_dtoa_r+0x7ba>
 800bc80:	9b00      	ldr	r3, [sp, #0]
 800bc82:	e7d2      	b.n	800bc2a <_dtoa_r+0x7ba>
 800bc84:	2300      	movs	r3, #0
 800bc86:	9307      	str	r3, [sp, #28]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bc8e:	6918      	ldr	r0, [r3, #16]
 800bc90:	f000 ff9c 	bl	800cbcc <__hi0bits>
 800bc94:	f1c0 0020 	rsb	r0, r0, #32
 800bc98:	4440      	add	r0, r8
 800bc9a:	f010 001f 	ands.w	r0, r0, #31
 800bc9e:	d047      	beq.n	800bd30 <_dtoa_r+0x8c0>
 800bca0:	f1c0 0320 	rsb	r3, r0, #32
 800bca4:	2b04      	cmp	r3, #4
 800bca6:	dd3b      	ble.n	800bd20 <_dtoa_r+0x8b0>
 800bca8:	9b05      	ldr	r3, [sp, #20]
 800bcaa:	f1c0 001c 	rsb	r0, r0, #28
 800bcae:	4403      	add	r3, r0
 800bcb0:	9305      	str	r3, [sp, #20]
 800bcb2:	4405      	add	r5, r0
 800bcb4:	4480      	add	r8, r0
 800bcb6:	9b05      	ldr	r3, [sp, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	dd05      	ble.n	800bcc8 <_dtoa_r+0x858>
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	9904      	ldr	r1, [sp, #16]
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f001 f8bf 	bl	800ce44 <__lshift>
 800bcc6:	9004      	str	r0, [sp, #16]
 800bcc8:	f1b8 0f00 	cmp.w	r8, #0
 800bccc:	dd05      	ble.n	800bcda <_dtoa_r+0x86a>
 800bcce:	4639      	mov	r1, r7
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f001 f8b6 	bl	800ce44 <__lshift>
 800bcd8:	4607      	mov	r7, r0
 800bcda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcdc:	b353      	cbz	r3, 800bd34 <_dtoa_r+0x8c4>
 800bcde:	4639      	mov	r1, r7
 800bce0:	9804      	ldr	r0, [sp, #16]
 800bce2:	f001 f903 	bl	800ceec <__mcmp>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	da24      	bge.n	800bd34 <_dtoa_r+0x8c4>
 800bcea:	2300      	movs	r3, #0
 800bcec:	220a      	movs	r2, #10
 800bcee:	9904      	ldr	r1, [sp, #16]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 fef2 	bl	800cada <__multadd>
 800bcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf8:	9004      	str	r0, [sp, #16]
 800bcfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 814d 	beq.w	800bf9e <_dtoa_r+0xb2e>
 800bd04:	2300      	movs	r3, #0
 800bd06:	4631      	mov	r1, r6
 800bd08:	220a      	movs	r2, #10
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f000 fee5 	bl	800cada <__multadd>
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	4606      	mov	r6, r0
 800bd16:	dc4f      	bgt.n	800bdb8 <_dtoa_r+0x948>
 800bd18:	9b06      	ldr	r3, [sp, #24]
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	dd4c      	ble.n	800bdb8 <_dtoa_r+0x948>
 800bd1e:	e011      	b.n	800bd44 <_dtoa_r+0x8d4>
 800bd20:	d0c9      	beq.n	800bcb6 <_dtoa_r+0x846>
 800bd22:	9a05      	ldr	r2, [sp, #20]
 800bd24:	331c      	adds	r3, #28
 800bd26:	441a      	add	r2, r3
 800bd28:	9205      	str	r2, [sp, #20]
 800bd2a:	441d      	add	r5, r3
 800bd2c:	4498      	add	r8, r3
 800bd2e:	e7c2      	b.n	800bcb6 <_dtoa_r+0x846>
 800bd30:	4603      	mov	r3, r0
 800bd32:	e7f6      	b.n	800bd22 <_dtoa_r+0x8b2>
 800bd34:	f1b9 0f00 	cmp.w	r9, #0
 800bd38:	dc38      	bgt.n	800bdac <_dtoa_r+0x93c>
 800bd3a:	9b06      	ldr	r3, [sp, #24]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	dd35      	ble.n	800bdac <_dtoa_r+0x93c>
 800bd40:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd44:	9b02      	ldr	r3, [sp, #8]
 800bd46:	b963      	cbnz	r3, 800bd62 <_dtoa_r+0x8f2>
 800bd48:	4639      	mov	r1, r7
 800bd4a:	2205      	movs	r2, #5
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 fec4 	bl	800cada <__multadd>
 800bd52:	4601      	mov	r1, r0
 800bd54:	4607      	mov	r7, r0
 800bd56:	9804      	ldr	r0, [sp, #16]
 800bd58:	f001 f8c8 	bl	800ceec <__mcmp>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f73f adcc 	bgt.w	800b8fa <_dtoa_r+0x48a>
 800bd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd64:	465d      	mov	r5, fp
 800bd66:	ea6f 0a03 	mvn.w	sl, r3
 800bd6a:	f04f 0900 	mov.w	r9, #0
 800bd6e:	4639      	mov	r1, r7
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 fe9b 	bl	800caac <_Bfree>
 800bd76:	2e00      	cmp	r6, #0
 800bd78:	f43f aeb7 	beq.w	800baea <_dtoa_r+0x67a>
 800bd7c:	f1b9 0f00 	cmp.w	r9, #0
 800bd80:	d005      	beq.n	800bd8e <_dtoa_r+0x91e>
 800bd82:	45b1      	cmp	r9, r6
 800bd84:	d003      	beq.n	800bd8e <_dtoa_r+0x91e>
 800bd86:	4649      	mov	r1, r9
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fe8f 	bl	800caac <_Bfree>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fe8b 	bl	800caac <_Bfree>
 800bd96:	e6a8      	b.n	800baea <_dtoa_r+0x67a>
 800bd98:	2700      	movs	r7, #0
 800bd9a:	463e      	mov	r6, r7
 800bd9c:	e7e1      	b.n	800bd62 <_dtoa_r+0x8f2>
 800bd9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bda2:	463e      	mov	r6, r7
 800bda4:	e5a9      	b.n	800b8fa <_dtoa_r+0x48a>
 800bda6:	bf00      	nop
 800bda8:	40240000 	.word	0x40240000
 800bdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdae:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 80fa 	beq.w	800bfac <_dtoa_r+0xb3c>
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	dd05      	ble.n	800bdc8 <_dtoa_r+0x958>
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	462a      	mov	r2, r5
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f001 f83f 	bl	800ce44 <__lshift>
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	9b07      	ldr	r3, [sp, #28]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d04c      	beq.n	800be68 <_dtoa_r+0x9f8>
 800bdce:	6871      	ldr	r1, [r6, #4]
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 fe37 	bl	800ca44 <_Balloc>
 800bdd6:	6932      	ldr	r2, [r6, #16]
 800bdd8:	3202      	adds	r2, #2
 800bdda:	4605      	mov	r5, r0
 800bddc:	0092      	lsls	r2, r2, #2
 800bdde:	f106 010c 	add.w	r1, r6, #12
 800bde2:	300c      	adds	r0, #12
 800bde4:	f7fd fc54 	bl	8009690 <memcpy>
 800bde8:	2201      	movs	r2, #1
 800bdea:	4629      	mov	r1, r5
 800bdec:	4620      	mov	r0, r4
 800bdee:	f001 f829 	bl	800ce44 <__lshift>
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	f8cd b014 	str.w	fp, [sp, #20]
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	46b1      	mov	r9, r6
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	4606      	mov	r6, r0
 800be02:	4639      	mov	r1, r7
 800be04:	9804      	ldr	r0, [sp, #16]
 800be06:	f7ff faa5 	bl	800b354 <quorem>
 800be0a:	4649      	mov	r1, r9
 800be0c:	4605      	mov	r5, r0
 800be0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800be12:	9804      	ldr	r0, [sp, #16]
 800be14:	f001 f86a 	bl	800ceec <__mcmp>
 800be18:	4632      	mov	r2, r6
 800be1a:	9000      	str	r0, [sp, #0]
 800be1c:	4639      	mov	r1, r7
 800be1e:	4620      	mov	r0, r4
 800be20:	f001 f87e 	bl	800cf20 <__mdiff>
 800be24:	68c3      	ldr	r3, [r0, #12]
 800be26:	4602      	mov	r2, r0
 800be28:	bb03      	cbnz	r3, 800be6c <_dtoa_r+0x9fc>
 800be2a:	4601      	mov	r1, r0
 800be2c:	9008      	str	r0, [sp, #32]
 800be2e:	9804      	ldr	r0, [sp, #16]
 800be30:	f001 f85c 	bl	800ceec <__mcmp>
 800be34:	9a08      	ldr	r2, [sp, #32]
 800be36:	4603      	mov	r3, r0
 800be38:	4611      	mov	r1, r2
 800be3a:	4620      	mov	r0, r4
 800be3c:	9308      	str	r3, [sp, #32]
 800be3e:	f000 fe35 	bl	800caac <_Bfree>
 800be42:	9b08      	ldr	r3, [sp, #32]
 800be44:	b9a3      	cbnz	r3, 800be70 <_dtoa_r+0xa00>
 800be46:	9a06      	ldr	r2, [sp, #24]
 800be48:	b992      	cbnz	r2, 800be70 <_dtoa_r+0xa00>
 800be4a:	9a07      	ldr	r2, [sp, #28]
 800be4c:	b982      	cbnz	r2, 800be70 <_dtoa_r+0xa00>
 800be4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be52:	d029      	beq.n	800bea8 <_dtoa_r+0xa38>
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	dd01      	ble.n	800be5e <_dtoa_r+0x9ee>
 800be5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800be5e:	9b05      	ldr	r3, [sp, #20]
 800be60:	1c5d      	adds	r5, r3, #1
 800be62:	f883 8000 	strb.w	r8, [r3]
 800be66:	e782      	b.n	800bd6e <_dtoa_r+0x8fe>
 800be68:	4630      	mov	r0, r6
 800be6a:	e7c2      	b.n	800bdf2 <_dtoa_r+0x982>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e7e3      	b.n	800be38 <_dtoa_r+0x9c8>
 800be70:	9a00      	ldr	r2, [sp, #0]
 800be72:	2a00      	cmp	r2, #0
 800be74:	db04      	blt.n	800be80 <_dtoa_r+0xa10>
 800be76:	d125      	bne.n	800bec4 <_dtoa_r+0xa54>
 800be78:	9a06      	ldr	r2, [sp, #24]
 800be7a:	bb1a      	cbnz	r2, 800bec4 <_dtoa_r+0xa54>
 800be7c:	9a07      	ldr	r2, [sp, #28]
 800be7e:	bb0a      	cbnz	r2, 800bec4 <_dtoa_r+0xa54>
 800be80:	2b00      	cmp	r3, #0
 800be82:	ddec      	ble.n	800be5e <_dtoa_r+0x9ee>
 800be84:	2201      	movs	r2, #1
 800be86:	9904      	ldr	r1, [sp, #16]
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 ffdb 	bl	800ce44 <__lshift>
 800be8e:	4639      	mov	r1, r7
 800be90:	9004      	str	r0, [sp, #16]
 800be92:	f001 f82b 	bl	800ceec <__mcmp>
 800be96:	2800      	cmp	r0, #0
 800be98:	dc03      	bgt.n	800bea2 <_dtoa_r+0xa32>
 800be9a:	d1e0      	bne.n	800be5e <_dtoa_r+0x9ee>
 800be9c:	f018 0f01 	tst.w	r8, #1
 800bea0:	d0dd      	beq.n	800be5e <_dtoa_r+0x9ee>
 800bea2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bea6:	d1d8      	bne.n	800be5a <_dtoa_r+0x9ea>
 800bea8:	9b05      	ldr	r3, [sp, #20]
 800beaa:	9a05      	ldr	r2, [sp, #20]
 800beac:	1c5d      	adds	r5, r3, #1
 800beae:	2339      	movs	r3, #57	; 0x39
 800beb0:	7013      	strb	r3, [r2, #0]
 800beb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800beb6:	2b39      	cmp	r3, #57	; 0x39
 800beb8:	f105 32ff 	add.w	r2, r5, #4294967295
 800bebc:	d04f      	beq.n	800bf5e <_dtoa_r+0xaee>
 800bebe:	3301      	adds	r3, #1
 800bec0:	7013      	strb	r3, [r2, #0]
 800bec2:	e754      	b.n	800bd6e <_dtoa_r+0x8fe>
 800bec4:	9a05      	ldr	r2, [sp, #20]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f102 0501 	add.w	r5, r2, #1
 800becc:	dd06      	ble.n	800bedc <_dtoa_r+0xa6c>
 800bece:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bed2:	d0e9      	beq.n	800bea8 <_dtoa_r+0xa38>
 800bed4:	f108 0801 	add.w	r8, r8, #1
 800bed8:	9b05      	ldr	r3, [sp, #20]
 800beda:	e7c2      	b.n	800be62 <_dtoa_r+0x9f2>
 800bedc:	9a02      	ldr	r2, [sp, #8]
 800bede:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bee2:	eba5 030b 	sub.w	r3, r5, fp
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d021      	beq.n	800bf2e <_dtoa_r+0xabe>
 800beea:	2300      	movs	r3, #0
 800beec:	220a      	movs	r2, #10
 800beee:	9904      	ldr	r1, [sp, #16]
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fdf2 	bl	800cada <__multadd>
 800bef6:	45b1      	cmp	r9, r6
 800bef8:	9004      	str	r0, [sp, #16]
 800befa:	f04f 0300 	mov.w	r3, #0
 800befe:	f04f 020a 	mov.w	r2, #10
 800bf02:	4649      	mov	r1, r9
 800bf04:	4620      	mov	r0, r4
 800bf06:	d105      	bne.n	800bf14 <_dtoa_r+0xaa4>
 800bf08:	f000 fde7 	bl	800cada <__multadd>
 800bf0c:	4681      	mov	r9, r0
 800bf0e:	4606      	mov	r6, r0
 800bf10:	9505      	str	r5, [sp, #20]
 800bf12:	e776      	b.n	800be02 <_dtoa_r+0x992>
 800bf14:	f000 fde1 	bl	800cada <__multadd>
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4681      	mov	r9, r0
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	220a      	movs	r2, #10
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 fdda 	bl	800cada <__multadd>
 800bf26:	4606      	mov	r6, r0
 800bf28:	e7f2      	b.n	800bf10 <_dtoa_r+0xaa0>
 800bf2a:	f04f 0900 	mov.w	r9, #0
 800bf2e:	2201      	movs	r2, #1
 800bf30:	9904      	ldr	r1, [sp, #16]
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 ff86 	bl	800ce44 <__lshift>
 800bf38:	4639      	mov	r1, r7
 800bf3a:	9004      	str	r0, [sp, #16]
 800bf3c:	f000 ffd6 	bl	800ceec <__mcmp>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	dcb6      	bgt.n	800beb2 <_dtoa_r+0xa42>
 800bf44:	d102      	bne.n	800bf4c <_dtoa_r+0xadc>
 800bf46:	f018 0f01 	tst.w	r8, #1
 800bf4a:	d1b2      	bne.n	800beb2 <_dtoa_r+0xa42>
 800bf4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf50:	2b30      	cmp	r3, #48	; 0x30
 800bf52:	f105 32ff 	add.w	r2, r5, #4294967295
 800bf56:	f47f af0a 	bne.w	800bd6e <_dtoa_r+0x8fe>
 800bf5a:	4615      	mov	r5, r2
 800bf5c:	e7f6      	b.n	800bf4c <_dtoa_r+0xadc>
 800bf5e:	4593      	cmp	fp, r2
 800bf60:	d105      	bne.n	800bf6e <_dtoa_r+0xafe>
 800bf62:	2331      	movs	r3, #49	; 0x31
 800bf64:	f10a 0a01 	add.w	sl, sl, #1
 800bf68:	f88b 3000 	strb.w	r3, [fp]
 800bf6c:	e6ff      	b.n	800bd6e <_dtoa_r+0x8fe>
 800bf6e:	4615      	mov	r5, r2
 800bf70:	e79f      	b.n	800beb2 <_dtoa_r+0xa42>
 800bf72:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bfd8 <_dtoa_r+0xb68>
 800bf76:	e007      	b.n	800bf88 <_dtoa_r+0xb18>
 800bf78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bfdc <_dtoa_r+0xb6c>
 800bf7e:	b11b      	cbz	r3, 800bf88 <_dtoa_r+0xb18>
 800bf80:	f10b 0308 	add.w	r3, fp, #8
 800bf84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	4658      	mov	r0, fp
 800bf8a:	b017      	add	sp, #92	; 0x5c
 800bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf90:	9b06      	ldr	r3, [sp, #24]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	f77f ae35 	ble.w	800bc02 <_dtoa_r+0x792>
 800bf98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf9a:	9307      	str	r3, [sp, #28]
 800bf9c:	e649      	b.n	800bc32 <_dtoa_r+0x7c2>
 800bf9e:	9b02      	ldr	r3, [sp, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc03      	bgt.n	800bfac <_dtoa_r+0xb3c>
 800bfa4:	9b06      	ldr	r3, [sp, #24]
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	f73f aecc 	bgt.w	800bd44 <_dtoa_r+0x8d4>
 800bfac:	465d      	mov	r5, fp
 800bfae:	4639      	mov	r1, r7
 800bfb0:	9804      	ldr	r0, [sp, #16]
 800bfb2:	f7ff f9cf 	bl	800b354 <quorem>
 800bfb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bfba:	f805 8b01 	strb.w	r8, [r5], #1
 800bfbe:	9a02      	ldr	r2, [sp, #8]
 800bfc0:	eba5 030b 	sub.w	r3, r5, fp
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	ddb0      	ble.n	800bf2a <_dtoa_r+0xaba>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	220a      	movs	r2, #10
 800bfcc:	9904      	ldr	r1, [sp, #16]
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 fd83 	bl	800cada <__multadd>
 800bfd4:	9004      	str	r0, [sp, #16]
 800bfd6:	e7ea      	b.n	800bfae <_dtoa_r+0xb3e>
 800bfd8:	0800dbb4 	.word	0x0800dbb4
 800bfdc:	0800dc30 	.word	0x0800dc30

0800bfe0 <__sflush_r>:
 800bfe0:	898a      	ldrh	r2, [r1, #12]
 800bfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	0710      	lsls	r0, r2, #28
 800bfea:	460c      	mov	r4, r1
 800bfec:	d458      	bmi.n	800c0a0 <__sflush_r+0xc0>
 800bfee:	684b      	ldr	r3, [r1, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	dc05      	bgt.n	800c000 <__sflush_r+0x20>
 800bff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	dc02      	bgt.n	800c000 <__sflush_r+0x20>
 800bffa:	2000      	movs	r0, #0
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c002:	2e00      	cmp	r6, #0
 800c004:	d0f9      	beq.n	800bffa <__sflush_r+0x1a>
 800c006:	2300      	movs	r3, #0
 800c008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c00c:	682f      	ldr	r7, [r5, #0]
 800c00e:	6a21      	ldr	r1, [r4, #32]
 800c010:	602b      	str	r3, [r5, #0]
 800c012:	d032      	beq.n	800c07a <__sflush_r+0x9a>
 800c014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	075a      	lsls	r2, r3, #29
 800c01a:	d505      	bpl.n	800c028 <__sflush_r+0x48>
 800c01c:	6863      	ldr	r3, [r4, #4]
 800c01e:	1ac0      	subs	r0, r0, r3
 800c020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c022:	b10b      	cbz	r3, 800c028 <__sflush_r+0x48>
 800c024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c026:	1ac0      	subs	r0, r0, r3
 800c028:	2300      	movs	r3, #0
 800c02a:	4602      	mov	r2, r0
 800c02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c02e:	6a21      	ldr	r1, [r4, #32]
 800c030:	4628      	mov	r0, r5
 800c032:	47b0      	blx	r6
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	d106      	bne.n	800c048 <__sflush_r+0x68>
 800c03a:	6829      	ldr	r1, [r5, #0]
 800c03c:	291d      	cmp	r1, #29
 800c03e:	d848      	bhi.n	800c0d2 <__sflush_r+0xf2>
 800c040:	4a29      	ldr	r2, [pc, #164]	; (800c0e8 <__sflush_r+0x108>)
 800c042:	40ca      	lsrs	r2, r1
 800c044:	07d6      	lsls	r6, r2, #31
 800c046:	d544      	bpl.n	800c0d2 <__sflush_r+0xf2>
 800c048:	2200      	movs	r2, #0
 800c04a:	6062      	str	r2, [r4, #4]
 800c04c:	04d9      	lsls	r1, r3, #19
 800c04e:	6922      	ldr	r2, [r4, #16]
 800c050:	6022      	str	r2, [r4, #0]
 800c052:	d504      	bpl.n	800c05e <__sflush_r+0x7e>
 800c054:	1c42      	adds	r2, r0, #1
 800c056:	d101      	bne.n	800c05c <__sflush_r+0x7c>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b903      	cbnz	r3, 800c05e <__sflush_r+0x7e>
 800c05c:	6560      	str	r0, [r4, #84]	; 0x54
 800c05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c060:	602f      	str	r7, [r5, #0]
 800c062:	2900      	cmp	r1, #0
 800c064:	d0c9      	beq.n	800bffa <__sflush_r+0x1a>
 800c066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c06a:	4299      	cmp	r1, r3
 800c06c:	d002      	beq.n	800c074 <__sflush_r+0x94>
 800c06e:	4628      	mov	r0, r5
 800c070:	f001 f8f6 	bl	800d260 <_free_r>
 800c074:	2000      	movs	r0, #0
 800c076:	6360      	str	r0, [r4, #52]	; 0x34
 800c078:	e7c0      	b.n	800bffc <__sflush_r+0x1c>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4628      	mov	r0, r5
 800c07e:	47b0      	blx	r6
 800c080:	1c41      	adds	r1, r0, #1
 800c082:	d1c8      	bne.n	800c016 <__sflush_r+0x36>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0c5      	beq.n	800c016 <__sflush_r+0x36>
 800c08a:	2b1d      	cmp	r3, #29
 800c08c:	d001      	beq.n	800c092 <__sflush_r+0xb2>
 800c08e:	2b16      	cmp	r3, #22
 800c090:	d101      	bne.n	800c096 <__sflush_r+0xb6>
 800c092:	602f      	str	r7, [r5, #0]
 800c094:	e7b1      	b.n	800bffa <__sflush_r+0x1a>
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	e7ad      	b.n	800bffc <__sflush_r+0x1c>
 800c0a0:	690f      	ldr	r7, [r1, #16]
 800c0a2:	2f00      	cmp	r7, #0
 800c0a4:	d0a9      	beq.n	800bffa <__sflush_r+0x1a>
 800c0a6:	0793      	lsls	r3, r2, #30
 800c0a8:	680e      	ldr	r6, [r1, #0]
 800c0aa:	bf08      	it	eq
 800c0ac:	694b      	ldreq	r3, [r1, #20]
 800c0ae:	600f      	str	r7, [r1, #0]
 800c0b0:	bf18      	it	ne
 800c0b2:	2300      	movne	r3, #0
 800c0b4:	eba6 0807 	sub.w	r8, r6, r7
 800c0b8:	608b      	str	r3, [r1, #8]
 800c0ba:	f1b8 0f00 	cmp.w	r8, #0
 800c0be:	dd9c      	ble.n	800bffa <__sflush_r+0x1a>
 800c0c0:	4643      	mov	r3, r8
 800c0c2:	463a      	mov	r2, r7
 800c0c4:	6a21      	ldr	r1, [r4, #32]
 800c0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	47b0      	blx	r6
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	dc06      	bgt.n	800c0de <__sflush_r+0xfe>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d6:	81a3      	strh	r3, [r4, #12]
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	e78e      	b.n	800bffc <__sflush_r+0x1c>
 800c0de:	4407      	add	r7, r0
 800c0e0:	eba8 0800 	sub.w	r8, r8, r0
 800c0e4:	e7e9      	b.n	800c0ba <__sflush_r+0xda>
 800c0e6:	bf00      	nop
 800c0e8:	20400001 	.word	0x20400001

0800c0ec <_fflush_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	690b      	ldr	r3, [r1, #16]
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	b1db      	cbz	r3, 800c12e <_fflush_r+0x42>
 800c0f6:	b118      	cbz	r0, 800c100 <_fflush_r+0x14>
 800c0f8:	6983      	ldr	r3, [r0, #24]
 800c0fa:	b90b      	cbnz	r3, 800c100 <_fflush_r+0x14>
 800c0fc:	f000 f860 	bl	800c1c0 <__sinit>
 800c100:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <_fflush_r+0x48>)
 800c102:	429c      	cmp	r4, r3
 800c104:	d109      	bne.n	800c11a <_fflush_r+0x2e>
 800c106:	686c      	ldr	r4, [r5, #4]
 800c108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c10c:	b17b      	cbz	r3, 800c12e <_fflush_r+0x42>
 800c10e:	4621      	mov	r1, r4
 800c110:	4628      	mov	r0, r5
 800c112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c116:	f7ff bf63 	b.w	800bfe0 <__sflush_r>
 800c11a:	4b07      	ldr	r3, [pc, #28]	; (800c138 <_fflush_r+0x4c>)
 800c11c:	429c      	cmp	r4, r3
 800c11e:	d101      	bne.n	800c124 <_fflush_r+0x38>
 800c120:	68ac      	ldr	r4, [r5, #8]
 800c122:	e7f1      	b.n	800c108 <_fflush_r+0x1c>
 800c124:	4b05      	ldr	r3, [pc, #20]	; (800c13c <_fflush_r+0x50>)
 800c126:	429c      	cmp	r4, r3
 800c128:	bf08      	it	eq
 800c12a:	68ec      	ldreq	r4, [r5, #12]
 800c12c:	e7ec      	b.n	800c108 <_fflush_r+0x1c>
 800c12e:	2000      	movs	r0, #0
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	bf00      	nop
 800c134:	0800dc60 	.word	0x0800dc60
 800c138:	0800dc80 	.word	0x0800dc80
 800c13c:	0800dc40 	.word	0x0800dc40

0800c140 <std>:
 800c140:	2300      	movs	r3, #0
 800c142:	b510      	push	{r4, lr}
 800c144:	4604      	mov	r4, r0
 800c146:	e9c0 3300 	strd	r3, r3, [r0]
 800c14a:	6083      	str	r3, [r0, #8]
 800c14c:	8181      	strh	r1, [r0, #12]
 800c14e:	6643      	str	r3, [r0, #100]	; 0x64
 800c150:	81c2      	strh	r2, [r0, #14]
 800c152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c156:	6183      	str	r3, [r0, #24]
 800c158:	4619      	mov	r1, r3
 800c15a:	2208      	movs	r2, #8
 800c15c:	305c      	adds	r0, #92	; 0x5c
 800c15e:	f7fd faa2 	bl	80096a6 <memset>
 800c162:	4b05      	ldr	r3, [pc, #20]	; (800c178 <std+0x38>)
 800c164:	6263      	str	r3, [r4, #36]	; 0x24
 800c166:	4b05      	ldr	r3, [pc, #20]	; (800c17c <std+0x3c>)
 800c168:	62a3      	str	r3, [r4, #40]	; 0x28
 800c16a:	4b05      	ldr	r3, [pc, #20]	; (800c180 <std+0x40>)
 800c16c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c16e:	4b05      	ldr	r3, [pc, #20]	; (800c184 <std+0x44>)
 800c170:	6224      	str	r4, [r4, #32]
 800c172:	6323      	str	r3, [r4, #48]	; 0x30
 800c174:	bd10      	pop	{r4, pc}
 800c176:	bf00      	nop
 800c178:	0800d8f5 	.word	0x0800d8f5
 800c17c:	0800d917 	.word	0x0800d917
 800c180:	0800d94f 	.word	0x0800d94f
 800c184:	0800d973 	.word	0x0800d973

0800c188 <_cleanup_r>:
 800c188:	4901      	ldr	r1, [pc, #4]	; (800c190 <_cleanup_r+0x8>)
 800c18a:	f000 b885 	b.w	800c298 <_fwalk_reent>
 800c18e:	bf00      	nop
 800c190:	0800c0ed 	.word	0x0800c0ed

0800c194 <__sfmoreglue>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	1e4a      	subs	r2, r1, #1
 800c198:	2568      	movs	r5, #104	; 0x68
 800c19a:	4355      	muls	r5, r2
 800c19c:	460e      	mov	r6, r1
 800c19e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1a2:	f001 f8ab 	bl	800d2fc <_malloc_r>
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	b140      	cbz	r0, 800c1bc <__sfmoreglue+0x28>
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	e9c0 1600 	strd	r1, r6, [r0]
 800c1b0:	300c      	adds	r0, #12
 800c1b2:	60a0      	str	r0, [r4, #8]
 800c1b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1b8:	f7fd fa75 	bl	80096a6 <memset>
 800c1bc:	4620      	mov	r0, r4
 800c1be:	bd70      	pop	{r4, r5, r6, pc}

0800c1c0 <__sinit>:
 800c1c0:	6983      	ldr	r3, [r0, #24]
 800c1c2:	b510      	push	{r4, lr}
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	bb33      	cbnz	r3, 800c216 <__sinit+0x56>
 800c1c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c1cc:	6503      	str	r3, [r0, #80]	; 0x50
 800c1ce:	4b12      	ldr	r3, [pc, #72]	; (800c218 <__sinit+0x58>)
 800c1d0:	4a12      	ldr	r2, [pc, #72]	; (800c21c <__sinit+0x5c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6282      	str	r2, [r0, #40]	; 0x28
 800c1d6:	4298      	cmp	r0, r3
 800c1d8:	bf04      	itt	eq
 800c1da:	2301      	moveq	r3, #1
 800c1dc:	6183      	streq	r3, [r0, #24]
 800c1de:	f000 f81f 	bl	800c220 <__sfp>
 800c1e2:	6060      	str	r0, [r4, #4]
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 f81b 	bl	800c220 <__sfp>
 800c1ea:	60a0      	str	r0, [r4, #8]
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 f817 	bl	800c220 <__sfp>
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	60e0      	str	r0, [r4, #12]
 800c1f6:	2104      	movs	r1, #4
 800c1f8:	6860      	ldr	r0, [r4, #4]
 800c1fa:	f7ff ffa1 	bl	800c140 <std>
 800c1fe:	2201      	movs	r2, #1
 800c200:	2109      	movs	r1, #9
 800c202:	68a0      	ldr	r0, [r4, #8]
 800c204:	f7ff ff9c 	bl	800c140 <std>
 800c208:	2202      	movs	r2, #2
 800c20a:	2112      	movs	r1, #18
 800c20c:	68e0      	ldr	r0, [r4, #12]
 800c20e:	f7ff ff97 	bl	800c140 <std>
 800c212:	2301      	movs	r3, #1
 800c214:	61a3      	str	r3, [r4, #24]
 800c216:	bd10      	pop	{r4, pc}
 800c218:	0800dba0 	.word	0x0800dba0
 800c21c:	0800c189 	.word	0x0800c189

0800c220 <__sfp>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	4b1b      	ldr	r3, [pc, #108]	; (800c290 <__sfp+0x70>)
 800c224:	681e      	ldr	r6, [r3, #0]
 800c226:	69b3      	ldr	r3, [r6, #24]
 800c228:	4607      	mov	r7, r0
 800c22a:	b913      	cbnz	r3, 800c232 <__sfp+0x12>
 800c22c:	4630      	mov	r0, r6
 800c22e:	f7ff ffc7 	bl	800c1c0 <__sinit>
 800c232:	3648      	adds	r6, #72	; 0x48
 800c234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c238:	3b01      	subs	r3, #1
 800c23a:	d503      	bpl.n	800c244 <__sfp+0x24>
 800c23c:	6833      	ldr	r3, [r6, #0]
 800c23e:	b133      	cbz	r3, 800c24e <__sfp+0x2e>
 800c240:	6836      	ldr	r6, [r6, #0]
 800c242:	e7f7      	b.n	800c234 <__sfp+0x14>
 800c244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c248:	b16d      	cbz	r5, 800c266 <__sfp+0x46>
 800c24a:	3468      	adds	r4, #104	; 0x68
 800c24c:	e7f4      	b.n	800c238 <__sfp+0x18>
 800c24e:	2104      	movs	r1, #4
 800c250:	4638      	mov	r0, r7
 800c252:	f7ff ff9f 	bl	800c194 <__sfmoreglue>
 800c256:	6030      	str	r0, [r6, #0]
 800c258:	2800      	cmp	r0, #0
 800c25a:	d1f1      	bne.n	800c240 <__sfp+0x20>
 800c25c:	230c      	movs	r3, #12
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	4604      	mov	r4, r0
 800c262:	4620      	mov	r0, r4
 800c264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c266:	4b0b      	ldr	r3, [pc, #44]	; (800c294 <__sfp+0x74>)
 800c268:	6665      	str	r5, [r4, #100]	; 0x64
 800c26a:	e9c4 5500 	strd	r5, r5, [r4]
 800c26e:	60a5      	str	r5, [r4, #8]
 800c270:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c274:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c278:	2208      	movs	r2, #8
 800c27a:	4629      	mov	r1, r5
 800c27c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c280:	f7fd fa11 	bl	80096a6 <memset>
 800c284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c28c:	e7e9      	b.n	800c262 <__sfp+0x42>
 800c28e:	bf00      	nop
 800c290:	0800dba0 	.word	0x0800dba0
 800c294:	ffff0001 	.word	0xffff0001

0800c298 <_fwalk_reent>:
 800c298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c29c:	4680      	mov	r8, r0
 800c29e:	4689      	mov	r9, r1
 800c2a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2a4:	2600      	movs	r6, #0
 800c2a6:	b914      	cbnz	r4, 800c2ae <_fwalk_reent+0x16>
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c2b2:	3f01      	subs	r7, #1
 800c2b4:	d501      	bpl.n	800c2ba <_fwalk_reent+0x22>
 800c2b6:	6824      	ldr	r4, [r4, #0]
 800c2b8:	e7f5      	b.n	800c2a6 <_fwalk_reent+0xe>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d907      	bls.n	800c2d0 <_fwalk_reent+0x38>
 800c2c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	d003      	beq.n	800c2d0 <_fwalk_reent+0x38>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	47c8      	blx	r9
 800c2ce:	4306      	orrs	r6, r0
 800c2d0:	3568      	adds	r5, #104	; 0x68
 800c2d2:	e7ee      	b.n	800c2b2 <_fwalk_reent+0x1a>

0800c2d4 <rshift>:
 800c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d6:	6906      	ldr	r6, [r0, #16]
 800c2d8:	114b      	asrs	r3, r1, #5
 800c2da:	429e      	cmp	r6, r3
 800c2dc:	f100 0414 	add.w	r4, r0, #20
 800c2e0:	dd30      	ble.n	800c344 <rshift+0x70>
 800c2e2:	f011 011f 	ands.w	r1, r1, #31
 800c2e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c2ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c2ee:	d108      	bne.n	800c302 <rshift+0x2e>
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	42b2      	cmp	r2, r6
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	d211      	bcs.n	800c31c <rshift+0x48>
 800c2f8:	f852 3b04 	ldr.w	r3, [r2], #4
 800c2fc:	f841 3b04 	str.w	r3, [r1], #4
 800c300:	e7f7      	b.n	800c2f2 <rshift+0x1e>
 800c302:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c306:	f1c1 0c20 	rsb	ip, r1, #32
 800c30a:	40cd      	lsrs	r5, r1
 800c30c:	3204      	adds	r2, #4
 800c30e:	4623      	mov	r3, r4
 800c310:	42b2      	cmp	r2, r6
 800c312:	4617      	mov	r7, r2
 800c314:	d30c      	bcc.n	800c330 <rshift+0x5c>
 800c316:	601d      	str	r5, [r3, #0]
 800c318:	b105      	cbz	r5, 800c31c <rshift+0x48>
 800c31a:	3304      	adds	r3, #4
 800c31c:	1b1a      	subs	r2, r3, r4
 800c31e:	42a3      	cmp	r3, r4
 800c320:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c324:	bf08      	it	eq
 800c326:	2300      	moveq	r3, #0
 800c328:	6102      	str	r2, [r0, #16]
 800c32a:	bf08      	it	eq
 800c32c:	6143      	streq	r3, [r0, #20]
 800c32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c330:	683f      	ldr	r7, [r7, #0]
 800c332:	fa07 f70c 	lsl.w	r7, r7, ip
 800c336:	433d      	orrs	r5, r7
 800c338:	f843 5b04 	str.w	r5, [r3], #4
 800c33c:	f852 5b04 	ldr.w	r5, [r2], #4
 800c340:	40cd      	lsrs	r5, r1
 800c342:	e7e5      	b.n	800c310 <rshift+0x3c>
 800c344:	4623      	mov	r3, r4
 800c346:	e7e9      	b.n	800c31c <rshift+0x48>

0800c348 <__hexdig_fun>:
 800c348:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c34c:	2b09      	cmp	r3, #9
 800c34e:	d802      	bhi.n	800c356 <__hexdig_fun+0xe>
 800c350:	3820      	subs	r0, #32
 800c352:	b2c0      	uxtb	r0, r0
 800c354:	4770      	bx	lr
 800c356:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	d801      	bhi.n	800c362 <__hexdig_fun+0x1a>
 800c35e:	3847      	subs	r0, #71	; 0x47
 800c360:	e7f7      	b.n	800c352 <__hexdig_fun+0xa>
 800c362:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c366:	2b05      	cmp	r3, #5
 800c368:	d801      	bhi.n	800c36e <__hexdig_fun+0x26>
 800c36a:	3827      	subs	r0, #39	; 0x27
 800c36c:	e7f1      	b.n	800c352 <__hexdig_fun+0xa>
 800c36e:	2000      	movs	r0, #0
 800c370:	4770      	bx	lr

0800c372 <__gethex>:
 800c372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c376:	b08b      	sub	sp, #44	; 0x2c
 800c378:	468a      	mov	sl, r1
 800c37a:	9002      	str	r0, [sp, #8]
 800c37c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c37e:	9306      	str	r3, [sp, #24]
 800c380:	4690      	mov	r8, r2
 800c382:	f000 fad0 	bl	800c926 <__localeconv_l>
 800c386:	6803      	ldr	r3, [r0, #0]
 800c388:	9303      	str	r3, [sp, #12]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f3 ff20 	bl	80001d0 <strlen>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	9001      	str	r0, [sp, #4]
 800c394:	4403      	add	r3, r0
 800c396:	f04f 0b00 	mov.w	fp, #0
 800c39a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c39e:	9307      	str	r3, [sp, #28]
 800c3a0:	f8da 3000 	ldr.w	r3, [sl]
 800c3a4:	3302      	adds	r3, #2
 800c3a6:	461f      	mov	r7, r3
 800c3a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c3ac:	2830      	cmp	r0, #48	; 0x30
 800c3ae:	d06c      	beq.n	800c48a <__gethex+0x118>
 800c3b0:	f7ff ffca 	bl	800c348 <__hexdig_fun>
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d16a      	bne.n	800c490 <__gethex+0x11e>
 800c3ba:	9a01      	ldr	r2, [sp, #4]
 800c3bc:	9903      	ldr	r1, [sp, #12]
 800c3be:	4638      	mov	r0, r7
 800c3c0:	f001 fadb 	bl	800d97a <strncmp>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d166      	bne.n	800c496 <__gethex+0x124>
 800c3c8:	9b01      	ldr	r3, [sp, #4]
 800c3ca:	5cf8      	ldrb	r0, [r7, r3]
 800c3cc:	18fe      	adds	r6, r7, r3
 800c3ce:	f7ff ffbb 	bl	800c348 <__hexdig_fun>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d062      	beq.n	800c49c <__gethex+0x12a>
 800c3d6:	4633      	mov	r3, r6
 800c3d8:	7818      	ldrb	r0, [r3, #0]
 800c3da:	2830      	cmp	r0, #48	; 0x30
 800c3dc:	461f      	mov	r7, r3
 800c3de:	f103 0301 	add.w	r3, r3, #1
 800c3e2:	d0f9      	beq.n	800c3d8 <__gethex+0x66>
 800c3e4:	f7ff ffb0 	bl	800c348 <__hexdig_fun>
 800c3e8:	fab0 f580 	clz	r5, r0
 800c3ec:	096d      	lsrs	r5, r5, #5
 800c3ee:	4634      	mov	r4, r6
 800c3f0:	f04f 0b01 	mov.w	fp, #1
 800c3f4:	463a      	mov	r2, r7
 800c3f6:	4616      	mov	r6, r2
 800c3f8:	3201      	adds	r2, #1
 800c3fa:	7830      	ldrb	r0, [r6, #0]
 800c3fc:	f7ff ffa4 	bl	800c348 <__hexdig_fun>
 800c400:	2800      	cmp	r0, #0
 800c402:	d1f8      	bne.n	800c3f6 <__gethex+0x84>
 800c404:	9a01      	ldr	r2, [sp, #4]
 800c406:	9903      	ldr	r1, [sp, #12]
 800c408:	4630      	mov	r0, r6
 800c40a:	f001 fab6 	bl	800d97a <strncmp>
 800c40e:	b950      	cbnz	r0, 800c426 <__gethex+0xb4>
 800c410:	b954      	cbnz	r4, 800c428 <__gethex+0xb6>
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	18f4      	adds	r4, r6, r3
 800c416:	4622      	mov	r2, r4
 800c418:	4616      	mov	r6, r2
 800c41a:	3201      	adds	r2, #1
 800c41c:	7830      	ldrb	r0, [r6, #0]
 800c41e:	f7ff ff93 	bl	800c348 <__hexdig_fun>
 800c422:	2800      	cmp	r0, #0
 800c424:	d1f8      	bne.n	800c418 <__gethex+0xa6>
 800c426:	b10c      	cbz	r4, 800c42c <__gethex+0xba>
 800c428:	1ba4      	subs	r4, r4, r6
 800c42a:	00a4      	lsls	r4, r4, #2
 800c42c:	7833      	ldrb	r3, [r6, #0]
 800c42e:	2b50      	cmp	r3, #80	; 0x50
 800c430:	d001      	beq.n	800c436 <__gethex+0xc4>
 800c432:	2b70      	cmp	r3, #112	; 0x70
 800c434:	d140      	bne.n	800c4b8 <__gethex+0x146>
 800c436:	7873      	ldrb	r3, [r6, #1]
 800c438:	2b2b      	cmp	r3, #43	; 0x2b
 800c43a:	d031      	beq.n	800c4a0 <__gethex+0x12e>
 800c43c:	2b2d      	cmp	r3, #45	; 0x2d
 800c43e:	d033      	beq.n	800c4a8 <__gethex+0x136>
 800c440:	1c71      	adds	r1, r6, #1
 800c442:	f04f 0900 	mov.w	r9, #0
 800c446:	7808      	ldrb	r0, [r1, #0]
 800c448:	f7ff ff7e 	bl	800c348 <__hexdig_fun>
 800c44c:	1e43      	subs	r3, r0, #1
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b18      	cmp	r3, #24
 800c452:	d831      	bhi.n	800c4b8 <__gethex+0x146>
 800c454:	f1a0 0210 	sub.w	r2, r0, #16
 800c458:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c45c:	f7ff ff74 	bl	800c348 <__hexdig_fun>
 800c460:	1e43      	subs	r3, r0, #1
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b18      	cmp	r3, #24
 800c466:	d922      	bls.n	800c4ae <__gethex+0x13c>
 800c468:	f1b9 0f00 	cmp.w	r9, #0
 800c46c:	d000      	beq.n	800c470 <__gethex+0xfe>
 800c46e:	4252      	negs	r2, r2
 800c470:	4414      	add	r4, r2
 800c472:	f8ca 1000 	str.w	r1, [sl]
 800c476:	b30d      	cbz	r5, 800c4bc <__gethex+0x14a>
 800c478:	f1bb 0f00 	cmp.w	fp, #0
 800c47c:	bf0c      	ite	eq
 800c47e:	2706      	moveq	r7, #6
 800c480:	2700      	movne	r7, #0
 800c482:	4638      	mov	r0, r7
 800c484:	b00b      	add	sp, #44	; 0x2c
 800c486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48a:	f10b 0b01 	add.w	fp, fp, #1
 800c48e:	e78a      	b.n	800c3a6 <__gethex+0x34>
 800c490:	2500      	movs	r5, #0
 800c492:	462c      	mov	r4, r5
 800c494:	e7ae      	b.n	800c3f4 <__gethex+0x82>
 800c496:	463e      	mov	r6, r7
 800c498:	2501      	movs	r5, #1
 800c49a:	e7c7      	b.n	800c42c <__gethex+0xba>
 800c49c:	4604      	mov	r4, r0
 800c49e:	e7fb      	b.n	800c498 <__gethex+0x126>
 800c4a0:	f04f 0900 	mov.w	r9, #0
 800c4a4:	1cb1      	adds	r1, r6, #2
 800c4a6:	e7ce      	b.n	800c446 <__gethex+0xd4>
 800c4a8:	f04f 0901 	mov.w	r9, #1
 800c4ac:	e7fa      	b.n	800c4a4 <__gethex+0x132>
 800c4ae:	230a      	movs	r3, #10
 800c4b0:	fb03 0202 	mla	r2, r3, r2, r0
 800c4b4:	3a10      	subs	r2, #16
 800c4b6:	e7cf      	b.n	800c458 <__gethex+0xe6>
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	e7da      	b.n	800c472 <__gethex+0x100>
 800c4bc:	1bf3      	subs	r3, r6, r7
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	2b07      	cmp	r3, #7
 800c4c4:	dc49      	bgt.n	800c55a <__gethex+0x1e8>
 800c4c6:	9802      	ldr	r0, [sp, #8]
 800c4c8:	f000 fabc 	bl	800ca44 <_Balloc>
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	f100 0914 	add.w	r9, r0, #20
 800c4d2:	f04f 0b00 	mov.w	fp, #0
 800c4d6:	f1c3 0301 	rsb	r3, r3, #1
 800c4da:	4605      	mov	r5, r0
 800c4dc:	f8cd 9010 	str.w	r9, [sp, #16]
 800c4e0:	46da      	mov	sl, fp
 800c4e2:	9308      	str	r3, [sp, #32]
 800c4e4:	42b7      	cmp	r7, r6
 800c4e6:	d33b      	bcc.n	800c560 <__gethex+0x1ee>
 800c4e8:	9804      	ldr	r0, [sp, #16]
 800c4ea:	f840 ab04 	str.w	sl, [r0], #4
 800c4ee:	eba0 0009 	sub.w	r0, r0, r9
 800c4f2:	1080      	asrs	r0, r0, #2
 800c4f4:	6128      	str	r0, [r5, #16]
 800c4f6:	0147      	lsls	r7, r0, #5
 800c4f8:	4650      	mov	r0, sl
 800c4fa:	f000 fb67 	bl	800cbcc <__hi0bits>
 800c4fe:	f8d8 6000 	ldr.w	r6, [r8]
 800c502:	1a3f      	subs	r7, r7, r0
 800c504:	42b7      	cmp	r7, r6
 800c506:	dd64      	ble.n	800c5d2 <__gethex+0x260>
 800c508:	1bbf      	subs	r7, r7, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 fe77 	bl	800d200 <__any_on>
 800c512:	4682      	mov	sl, r0
 800c514:	b178      	cbz	r0, 800c536 <__gethex+0x1c4>
 800c516:	1e7b      	subs	r3, r7, #1
 800c518:	1159      	asrs	r1, r3, #5
 800c51a:	f003 021f 	and.w	r2, r3, #31
 800c51e:	f04f 0a01 	mov.w	sl, #1
 800c522:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c526:	fa0a f202 	lsl.w	r2, sl, r2
 800c52a:	420a      	tst	r2, r1
 800c52c:	d003      	beq.n	800c536 <__gethex+0x1c4>
 800c52e:	4553      	cmp	r3, sl
 800c530:	dc46      	bgt.n	800c5c0 <__gethex+0x24e>
 800c532:	f04f 0a02 	mov.w	sl, #2
 800c536:	4639      	mov	r1, r7
 800c538:	4628      	mov	r0, r5
 800c53a:	f7ff fecb 	bl	800c2d4 <rshift>
 800c53e:	443c      	add	r4, r7
 800c540:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c544:	42a3      	cmp	r3, r4
 800c546:	da52      	bge.n	800c5ee <__gethex+0x27c>
 800c548:	4629      	mov	r1, r5
 800c54a:	9802      	ldr	r0, [sp, #8]
 800c54c:	f000 faae 	bl	800caac <_Bfree>
 800c550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c552:	2300      	movs	r3, #0
 800c554:	6013      	str	r3, [r2, #0]
 800c556:	27a3      	movs	r7, #163	; 0xa3
 800c558:	e793      	b.n	800c482 <__gethex+0x110>
 800c55a:	3101      	adds	r1, #1
 800c55c:	105b      	asrs	r3, r3, #1
 800c55e:	e7b0      	b.n	800c4c2 <__gethex+0x150>
 800c560:	1e73      	subs	r3, r6, #1
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	9a07      	ldr	r2, [sp, #28]
 800c566:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d018      	beq.n	800c5a0 <__gethex+0x22e>
 800c56e:	f1bb 0f20 	cmp.w	fp, #32
 800c572:	d107      	bne.n	800c584 <__gethex+0x212>
 800c574:	9b04      	ldr	r3, [sp, #16]
 800c576:	f8c3 a000 	str.w	sl, [r3]
 800c57a:	3304      	adds	r3, #4
 800c57c:	f04f 0a00 	mov.w	sl, #0
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	46d3      	mov	fp, sl
 800c584:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c588:	f7ff fede 	bl	800c348 <__hexdig_fun>
 800c58c:	f000 000f 	and.w	r0, r0, #15
 800c590:	fa00 f00b 	lsl.w	r0, r0, fp
 800c594:	ea4a 0a00 	orr.w	sl, sl, r0
 800c598:	f10b 0b04 	add.w	fp, fp, #4
 800c59c:	9b05      	ldr	r3, [sp, #20]
 800c59e:	e00d      	b.n	800c5bc <__gethex+0x24a>
 800c5a0:	9b05      	ldr	r3, [sp, #20]
 800c5a2:	9a08      	ldr	r2, [sp, #32]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	42bb      	cmp	r3, r7
 800c5a8:	d3e1      	bcc.n	800c56e <__gethex+0x1fc>
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	9a01      	ldr	r2, [sp, #4]
 800c5ae:	9903      	ldr	r1, [sp, #12]
 800c5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b2:	f001 f9e2 	bl	800d97a <strncmp>
 800c5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d1d8      	bne.n	800c56e <__gethex+0x1fc>
 800c5bc:	461e      	mov	r6, r3
 800c5be:	e791      	b.n	800c4e4 <__gethex+0x172>
 800c5c0:	1eb9      	subs	r1, r7, #2
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 fe1c 	bl	800d200 <__any_on>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d0b2      	beq.n	800c532 <__gethex+0x1c0>
 800c5cc:	f04f 0a03 	mov.w	sl, #3
 800c5d0:	e7b1      	b.n	800c536 <__gethex+0x1c4>
 800c5d2:	da09      	bge.n	800c5e8 <__gethex+0x276>
 800c5d4:	1bf7      	subs	r7, r6, r7
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	463a      	mov	r2, r7
 800c5da:	9802      	ldr	r0, [sp, #8]
 800c5dc:	f000 fc32 	bl	800ce44 <__lshift>
 800c5e0:	1be4      	subs	r4, r4, r7
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	f100 0914 	add.w	r9, r0, #20
 800c5e8:	f04f 0a00 	mov.w	sl, #0
 800c5ec:	e7a8      	b.n	800c540 <__gethex+0x1ce>
 800c5ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c5f2:	42a0      	cmp	r0, r4
 800c5f4:	dd6a      	ble.n	800c6cc <__gethex+0x35a>
 800c5f6:	1b04      	subs	r4, r0, r4
 800c5f8:	42a6      	cmp	r6, r4
 800c5fa:	dc2e      	bgt.n	800c65a <__gethex+0x2e8>
 800c5fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c600:	2b02      	cmp	r3, #2
 800c602:	d022      	beq.n	800c64a <__gethex+0x2d8>
 800c604:	2b03      	cmp	r3, #3
 800c606:	d024      	beq.n	800c652 <__gethex+0x2e0>
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d115      	bne.n	800c638 <__gethex+0x2c6>
 800c60c:	42a6      	cmp	r6, r4
 800c60e:	d113      	bne.n	800c638 <__gethex+0x2c6>
 800c610:	2e01      	cmp	r6, #1
 800c612:	dc0b      	bgt.n	800c62c <__gethex+0x2ba>
 800c614:	9a06      	ldr	r2, [sp, #24]
 800c616:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c61a:	6013      	str	r3, [r2, #0]
 800c61c:	2301      	movs	r3, #1
 800c61e:	612b      	str	r3, [r5, #16]
 800c620:	f8c9 3000 	str.w	r3, [r9]
 800c624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c626:	2762      	movs	r7, #98	; 0x62
 800c628:	601d      	str	r5, [r3, #0]
 800c62a:	e72a      	b.n	800c482 <__gethex+0x110>
 800c62c:	1e71      	subs	r1, r6, #1
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fde6 	bl	800d200 <__any_on>
 800c634:	2800      	cmp	r0, #0
 800c636:	d1ed      	bne.n	800c614 <__gethex+0x2a2>
 800c638:	4629      	mov	r1, r5
 800c63a:	9802      	ldr	r0, [sp, #8]
 800c63c:	f000 fa36 	bl	800caac <_Bfree>
 800c640:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c642:	2300      	movs	r3, #0
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	2750      	movs	r7, #80	; 0x50
 800c648:	e71b      	b.n	800c482 <__gethex+0x110>
 800c64a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0e1      	beq.n	800c614 <__gethex+0x2a2>
 800c650:	e7f2      	b.n	800c638 <__gethex+0x2c6>
 800c652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1dd      	bne.n	800c614 <__gethex+0x2a2>
 800c658:	e7ee      	b.n	800c638 <__gethex+0x2c6>
 800c65a:	1e67      	subs	r7, r4, #1
 800c65c:	f1ba 0f00 	cmp.w	sl, #0
 800c660:	d131      	bne.n	800c6c6 <__gethex+0x354>
 800c662:	b127      	cbz	r7, 800c66e <__gethex+0x2fc>
 800c664:	4639      	mov	r1, r7
 800c666:	4628      	mov	r0, r5
 800c668:	f000 fdca 	bl	800d200 <__any_on>
 800c66c:	4682      	mov	sl, r0
 800c66e:	117a      	asrs	r2, r7, #5
 800c670:	2301      	movs	r3, #1
 800c672:	f007 071f 	and.w	r7, r7, #31
 800c676:	fa03 f707 	lsl.w	r7, r3, r7
 800c67a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c67e:	4621      	mov	r1, r4
 800c680:	421f      	tst	r7, r3
 800c682:	4628      	mov	r0, r5
 800c684:	bf18      	it	ne
 800c686:	f04a 0a02 	orrne.w	sl, sl, #2
 800c68a:	1b36      	subs	r6, r6, r4
 800c68c:	f7ff fe22 	bl	800c2d4 <rshift>
 800c690:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c694:	2702      	movs	r7, #2
 800c696:	f1ba 0f00 	cmp.w	sl, #0
 800c69a:	d048      	beq.n	800c72e <__gethex+0x3bc>
 800c69c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d015      	beq.n	800c6d0 <__gethex+0x35e>
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d017      	beq.n	800c6d8 <__gethex+0x366>
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d109      	bne.n	800c6c0 <__gethex+0x34e>
 800c6ac:	f01a 0f02 	tst.w	sl, #2
 800c6b0:	d006      	beq.n	800c6c0 <__gethex+0x34e>
 800c6b2:	f8d9 3000 	ldr.w	r3, [r9]
 800c6b6:	ea4a 0a03 	orr.w	sl, sl, r3
 800c6ba:	f01a 0f01 	tst.w	sl, #1
 800c6be:	d10e      	bne.n	800c6de <__gethex+0x36c>
 800c6c0:	f047 0710 	orr.w	r7, r7, #16
 800c6c4:	e033      	b.n	800c72e <__gethex+0x3bc>
 800c6c6:	f04f 0a01 	mov.w	sl, #1
 800c6ca:	e7d0      	b.n	800c66e <__gethex+0x2fc>
 800c6cc:	2701      	movs	r7, #1
 800c6ce:	e7e2      	b.n	800c696 <__gethex+0x324>
 800c6d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6d2:	f1c3 0301 	rsb	r3, r3, #1
 800c6d6:	9315      	str	r3, [sp, #84]	; 0x54
 800c6d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d0f0      	beq.n	800c6c0 <__gethex+0x34e>
 800c6de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c6e2:	f105 0314 	add.w	r3, r5, #20
 800c6e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c6ea:	eb03 010a 	add.w	r1, r3, sl
 800c6ee:	f04f 0c00 	mov.w	ip, #0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6fc:	d01c      	beq.n	800c738 <__gethex+0x3c6>
 800c6fe:	3201      	adds	r2, #1
 800c700:	6002      	str	r2, [r0, #0]
 800c702:	2f02      	cmp	r7, #2
 800c704:	f105 0314 	add.w	r3, r5, #20
 800c708:	d138      	bne.n	800c77c <__gethex+0x40a>
 800c70a:	f8d8 2000 	ldr.w	r2, [r8]
 800c70e:	3a01      	subs	r2, #1
 800c710:	42b2      	cmp	r2, r6
 800c712:	d10a      	bne.n	800c72a <__gethex+0x3b8>
 800c714:	1171      	asrs	r1, r6, #5
 800c716:	2201      	movs	r2, #1
 800c718:	f006 061f 	and.w	r6, r6, #31
 800c71c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c720:	fa02 f606 	lsl.w	r6, r2, r6
 800c724:	421e      	tst	r6, r3
 800c726:	bf18      	it	ne
 800c728:	4617      	movne	r7, r2
 800c72a:	f047 0720 	orr.w	r7, r7, #32
 800c72e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c730:	601d      	str	r5, [r3, #0]
 800c732:	9b06      	ldr	r3, [sp, #24]
 800c734:	601c      	str	r4, [r3, #0]
 800c736:	e6a4      	b.n	800c482 <__gethex+0x110>
 800c738:	4299      	cmp	r1, r3
 800c73a:	f843 cc04 	str.w	ip, [r3, #-4]
 800c73e:	d8d8      	bhi.n	800c6f2 <__gethex+0x380>
 800c740:	68ab      	ldr	r3, [r5, #8]
 800c742:	4599      	cmp	r9, r3
 800c744:	db12      	blt.n	800c76c <__gethex+0x3fa>
 800c746:	6869      	ldr	r1, [r5, #4]
 800c748:	9802      	ldr	r0, [sp, #8]
 800c74a:	3101      	adds	r1, #1
 800c74c:	f000 f97a 	bl	800ca44 <_Balloc>
 800c750:	692a      	ldr	r2, [r5, #16]
 800c752:	3202      	adds	r2, #2
 800c754:	f105 010c 	add.w	r1, r5, #12
 800c758:	4683      	mov	fp, r0
 800c75a:	0092      	lsls	r2, r2, #2
 800c75c:	300c      	adds	r0, #12
 800c75e:	f7fc ff97 	bl	8009690 <memcpy>
 800c762:	4629      	mov	r1, r5
 800c764:	9802      	ldr	r0, [sp, #8]
 800c766:	f000 f9a1 	bl	800caac <_Bfree>
 800c76a:	465d      	mov	r5, fp
 800c76c:	692b      	ldr	r3, [r5, #16]
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c774:	612a      	str	r2, [r5, #16]
 800c776:	2201      	movs	r2, #1
 800c778:	615a      	str	r2, [r3, #20]
 800c77a:	e7c2      	b.n	800c702 <__gethex+0x390>
 800c77c:	692a      	ldr	r2, [r5, #16]
 800c77e:	454a      	cmp	r2, r9
 800c780:	dd0b      	ble.n	800c79a <__gethex+0x428>
 800c782:	2101      	movs	r1, #1
 800c784:	4628      	mov	r0, r5
 800c786:	f7ff fda5 	bl	800c2d4 <rshift>
 800c78a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c78e:	3401      	adds	r4, #1
 800c790:	42a3      	cmp	r3, r4
 800c792:	f6ff aed9 	blt.w	800c548 <__gethex+0x1d6>
 800c796:	2701      	movs	r7, #1
 800c798:	e7c7      	b.n	800c72a <__gethex+0x3b8>
 800c79a:	f016 061f 	ands.w	r6, r6, #31
 800c79e:	d0fa      	beq.n	800c796 <__gethex+0x424>
 800c7a0:	449a      	add	sl, r3
 800c7a2:	f1c6 0620 	rsb	r6, r6, #32
 800c7a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c7aa:	f000 fa0f 	bl	800cbcc <__hi0bits>
 800c7ae:	42b0      	cmp	r0, r6
 800c7b0:	dbe7      	blt.n	800c782 <__gethex+0x410>
 800c7b2:	e7f0      	b.n	800c796 <__gethex+0x424>

0800c7b4 <L_shift>:
 800c7b4:	f1c2 0208 	rsb	r2, r2, #8
 800c7b8:	0092      	lsls	r2, r2, #2
 800c7ba:	b570      	push	{r4, r5, r6, lr}
 800c7bc:	f1c2 0620 	rsb	r6, r2, #32
 800c7c0:	6843      	ldr	r3, [r0, #4]
 800c7c2:	6804      	ldr	r4, [r0, #0]
 800c7c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c7c8:	432c      	orrs	r4, r5
 800c7ca:	40d3      	lsrs	r3, r2
 800c7cc:	6004      	str	r4, [r0, #0]
 800c7ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7d2:	4288      	cmp	r0, r1
 800c7d4:	d3f4      	bcc.n	800c7c0 <L_shift+0xc>
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}

0800c7d8 <__match>:
 800c7d8:	b530      	push	{r4, r5, lr}
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e2:	b914      	cbnz	r4, 800c7ea <__match+0x12>
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	bd30      	pop	{r4, r5, pc}
 800c7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7f2:	2d19      	cmp	r5, #25
 800c7f4:	bf98      	it	ls
 800c7f6:	3220      	addls	r2, #32
 800c7f8:	42a2      	cmp	r2, r4
 800c7fa:	d0f0      	beq.n	800c7de <__match+0x6>
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	e7f3      	b.n	800c7e8 <__match+0x10>

0800c800 <__hexnan>:
 800c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	680b      	ldr	r3, [r1, #0]
 800c806:	6801      	ldr	r1, [r0, #0]
 800c808:	115f      	asrs	r7, r3, #5
 800c80a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c80e:	f013 031f 	ands.w	r3, r3, #31
 800c812:	b087      	sub	sp, #28
 800c814:	bf18      	it	ne
 800c816:	3704      	addne	r7, #4
 800c818:	2500      	movs	r5, #0
 800c81a:	1f3e      	subs	r6, r7, #4
 800c81c:	4682      	mov	sl, r0
 800c81e:	4690      	mov	r8, r2
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	f847 5c04 	str.w	r5, [r7, #-4]
 800c826:	46b1      	mov	r9, r6
 800c828:	4634      	mov	r4, r6
 800c82a:	9502      	str	r5, [sp, #8]
 800c82c:	46ab      	mov	fp, r5
 800c82e:	784a      	ldrb	r2, [r1, #1]
 800c830:	1c4b      	adds	r3, r1, #1
 800c832:	9303      	str	r3, [sp, #12]
 800c834:	b342      	cbz	r2, 800c888 <__hexnan+0x88>
 800c836:	4610      	mov	r0, r2
 800c838:	9105      	str	r1, [sp, #20]
 800c83a:	9204      	str	r2, [sp, #16]
 800c83c:	f7ff fd84 	bl	800c348 <__hexdig_fun>
 800c840:	2800      	cmp	r0, #0
 800c842:	d143      	bne.n	800c8cc <__hexnan+0xcc>
 800c844:	9a04      	ldr	r2, [sp, #16]
 800c846:	9905      	ldr	r1, [sp, #20]
 800c848:	2a20      	cmp	r2, #32
 800c84a:	d818      	bhi.n	800c87e <__hexnan+0x7e>
 800c84c:	9b02      	ldr	r3, [sp, #8]
 800c84e:	459b      	cmp	fp, r3
 800c850:	dd13      	ble.n	800c87a <__hexnan+0x7a>
 800c852:	454c      	cmp	r4, r9
 800c854:	d206      	bcs.n	800c864 <__hexnan+0x64>
 800c856:	2d07      	cmp	r5, #7
 800c858:	dc04      	bgt.n	800c864 <__hexnan+0x64>
 800c85a:	462a      	mov	r2, r5
 800c85c:	4649      	mov	r1, r9
 800c85e:	4620      	mov	r0, r4
 800c860:	f7ff ffa8 	bl	800c7b4 <L_shift>
 800c864:	4544      	cmp	r4, r8
 800c866:	d944      	bls.n	800c8f2 <__hexnan+0xf2>
 800c868:	2300      	movs	r3, #0
 800c86a:	f1a4 0904 	sub.w	r9, r4, #4
 800c86e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c872:	f8cd b008 	str.w	fp, [sp, #8]
 800c876:	464c      	mov	r4, r9
 800c878:	461d      	mov	r5, r3
 800c87a:	9903      	ldr	r1, [sp, #12]
 800c87c:	e7d7      	b.n	800c82e <__hexnan+0x2e>
 800c87e:	2a29      	cmp	r2, #41	; 0x29
 800c880:	d14a      	bne.n	800c918 <__hexnan+0x118>
 800c882:	3102      	adds	r1, #2
 800c884:	f8ca 1000 	str.w	r1, [sl]
 800c888:	f1bb 0f00 	cmp.w	fp, #0
 800c88c:	d044      	beq.n	800c918 <__hexnan+0x118>
 800c88e:	454c      	cmp	r4, r9
 800c890:	d206      	bcs.n	800c8a0 <__hexnan+0xa0>
 800c892:	2d07      	cmp	r5, #7
 800c894:	dc04      	bgt.n	800c8a0 <__hexnan+0xa0>
 800c896:	462a      	mov	r2, r5
 800c898:	4649      	mov	r1, r9
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7ff ff8a 	bl	800c7b4 <L_shift>
 800c8a0:	4544      	cmp	r4, r8
 800c8a2:	d928      	bls.n	800c8f6 <__hexnan+0xf6>
 800c8a4:	4643      	mov	r3, r8
 800c8a6:	f854 2b04 	ldr.w	r2, [r4], #4
 800c8aa:	f843 2b04 	str.w	r2, [r3], #4
 800c8ae:	42a6      	cmp	r6, r4
 800c8b0:	d2f9      	bcs.n	800c8a6 <__hexnan+0xa6>
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f843 2b04 	str.w	r2, [r3], #4
 800c8b8:	429e      	cmp	r6, r3
 800c8ba:	d2fb      	bcs.n	800c8b4 <__hexnan+0xb4>
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	b91b      	cbnz	r3, 800c8c8 <__hexnan+0xc8>
 800c8c0:	4546      	cmp	r6, r8
 800c8c2:	d127      	bne.n	800c914 <__hexnan+0x114>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	6033      	str	r3, [r6, #0]
 800c8c8:	2005      	movs	r0, #5
 800c8ca:	e026      	b.n	800c91a <__hexnan+0x11a>
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	2d08      	cmp	r5, #8
 800c8d0:	f10b 0b01 	add.w	fp, fp, #1
 800c8d4:	dd06      	ble.n	800c8e4 <__hexnan+0xe4>
 800c8d6:	4544      	cmp	r4, r8
 800c8d8:	d9cf      	bls.n	800c87a <__hexnan+0x7a>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8e0:	2501      	movs	r5, #1
 800c8e2:	3c04      	subs	r4, #4
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	f000 000f 	and.w	r0, r0, #15
 800c8ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8ee:	6020      	str	r0, [r4, #0]
 800c8f0:	e7c3      	b.n	800c87a <__hexnan+0x7a>
 800c8f2:	2508      	movs	r5, #8
 800c8f4:	e7c1      	b.n	800c87a <__hexnan+0x7a>
 800c8f6:	9b01      	ldr	r3, [sp, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0df      	beq.n	800c8bc <__hexnan+0xbc>
 800c8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c900:	f1c3 0320 	rsb	r3, r3, #32
 800c904:	fa22 f303 	lsr.w	r3, r2, r3
 800c908:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c90c:	401a      	ands	r2, r3
 800c90e:	f847 2c04 	str.w	r2, [r7, #-4]
 800c912:	e7d3      	b.n	800c8bc <__hexnan+0xbc>
 800c914:	3e04      	subs	r6, #4
 800c916:	e7d1      	b.n	800c8bc <__hexnan+0xbc>
 800c918:	2004      	movs	r0, #4
 800c91a:	b007      	add	sp, #28
 800c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c920 <__locale_ctype_ptr_l>:
 800c920:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c924:	4770      	bx	lr

0800c926 <__localeconv_l>:
 800c926:	30f0      	adds	r0, #240	; 0xf0
 800c928:	4770      	bx	lr
	...

0800c92c <_localeconv_r>:
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <_localeconv_r+0x14>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6a18      	ldr	r0, [r3, #32]
 800c932:	4b04      	ldr	r3, [pc, #16]	; (800c944 <_localeconv_r+0x18>)
 800c934:	2800      	cmp	r0, #0
 800c936:	bf08      	it	eq
 800c938:	4618      	moveq	r0, r3
 800c93a:	30f0      	adds	r0, #240	; 0xf0
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20000040 	.word	0x20000040
 800c944:	200000a4 	.word	0x200000a4

0800c948 <__swhatbuf_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460e      	mov	r6, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2900      	cmp	r1, #0
 800c952:	b096      	sub	sp, #88	; 0x58
 800c954:	4614      	mov	r4, r2
 800c956:	461d      	mov	r5, r3
 800c958:	da07      	bge.n	800c96a <__swhatbuf_r+0x22>
 800c95a:	2300      	movs	r3, #0
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	89b3      	ldrh	r3, [r6, #12]
 800c960:	061a      	lsls	r2, r3, #24
 800c962:	d410      	bmi.n	800c986 <__swhatbuf_r+0x3e>
 800c964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c968:	e00e      	b.n	800c988 <__swhatbuf_r+0x40>
 800c96a:	466a      	mov	r2, sp
 800c96c:	f001 f846 	bl	800d9fc <_fstat_r>
 800c970:	2800      	cmp	r0, #0
 800c972:	dbf2      	blt.n	800c95a <__swhatbuf_r+0x12>
 800c974:	9a01      	ldr	r2, [sp, #4]
 800c976:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c97a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c97e:	425a      	negs	r2, r3
 800c980:	415a      	adcs	r2, r3
 800c982:	602a      	str	r2, [r5, #0]
 800c984:	e7ee      	b.n	800c964 <__swhatbuf_r+0x1c>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	2000      	movs	r0, #0
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	b016      	add	sp, #88	; 0x58
 800c98e:	bd70      	pop	{r4, r5, r6, pc}

0800c990 <__smakebuf_r>:
 800c990:	898b      	ldrh	r3, [r1, #12]
 800c992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c994:	079d      	lsls	r5, r3, #30
 800c996:	4606      	mov	r6, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	d507      	bpl.n	800c9ac <__smakebuf_r+0x1c>
 800c99c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	6123      	str	r3, [r4, #16]
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	b002      	add	sp, #8
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	ab01      	add	r3, sp, #4
 800c9ae:	466a      	mov	r2, sp
 800c9b0:	f7ff ffca 	bl	800c948 <__swhatbuf_r>
 800c9b4:	9900      	ldr	r1, [sp, #0]
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f000 fc9f 	bl	800d2fc <_malloc_r>
 800c9be:	b948      	cbnz	r0, 800c9d4 <__smakebuf_r+0x44>
 800c9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c4:	059a      	lsls	r2, r3, #22
 800c9c6:	d4ef      	bmi.n	800c9a8 <__smakebuf_r+0x18>
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
 800c9cc:	f043 0302 	orr.w	r3, r3, #2
 800c9d0:	81a3      	strh	r3, [r4, #12]
 800c9d2:	e7e3      	b.n	800c99c <__smakebuf_r+0xc>
 800c9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <__smakebuf_r+0x7c>)
 800c9d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	6120      	str	r0, [r4, #16]
 800c9ea:	b15b      	cbz	r3, 800ca04 <__smakebuf_r+0x74>
 800c9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f001 f815 	bl	800da20 <_isatty_r>
 800c9f6:	b128      	cbz	r0, 800ca04 <__smakebuf_r+0x74>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	431d      	orrs	r5, r3
 800ca08:	81a5      	strh	r5, [r4, #12]
 800ca0a:	e7cd      	b.n	800c9a8 <__smakebuf_r+0x18>
 800ca0c:	0800c189 	.word	0x0800c189

0800ca10 <malloc>:
 800ca10:	4b02      	ldr	r3, [pc, #8]	; (800ca1c <malloc+0xc>)
 800ca12:	4601      	mov	r1, r0
 800ca14:	6818      	ldr	r0, [r3, #0]
 800ca16:	f000 bc71 	b.w	800d2fc <_malloc_r>
 800ca1a:	bf00      	nop
 800ca1c:	20000040 	.word	0x20000040

0800ca20 <__ascii_mbtowc>:
 800ca20:	b082      	sub	sp, #8
 800ca22:	b901      	cbnz	r1, 800ca26 <__ascii_mbtowc+0x6>
 800ca24:	a901      	add	r1, sp, #4
 800ca26:	b142      	cbz	r2, 800ca3a <__ascii_mbtowc+0x1a>
 800ca28:	b14b      	cbz	r3, 800ca3e <__ascii_mbtowc+0x1e>
 800ca2a:	7813      	ldrb	r3, [r2, #0]
 800ca2c:	600b      	str	r3, [r1, #0]
 800ca2e:	7812      	ldrb	r2, [r2, #0]
 800ca30:	1c10      	adds	r0, r2, #0
 800ca32:	bf18      	it	ne
 800ca34:	2001      	movne	r0, #1
 800ca36:	b002      	add	sp, #8
 800ca38:	4770      	bx	lr
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	e7fb      	b.n	800ca36 <__ascii_mbtowc+0x16>
 800ca3e:	f06f 0001 	mvn.w	r0, #1
 800ca42:	e7f8      	b.n	800ca36 <__ascii_mbtowc+0x16>

0800ca44 <_Balloc>:
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca48:	4604      	mov	r4, r0
 800ca4a:	460e      	mov	r6, r1
 800ca4c:	b93d      	cbnz	r5, 800ca5e <_Balloc+0x1a>
 800ca4e:	2010      	movs	r0, #16
 800ca50:	f7ff ffde 	bl	800ca10 <malloc>
 800ca54:	6260      	str	r0, [r4, #36]	; 0x24
 800ca56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca5a:	6005      	str	r5, [r0, #0]
 800ca5c:	60c5      	str	r5, [r0, #12]
 800ca5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca60:	68eb      	ldr	r3, [r5, #12]
 800ca62:	b183      	cbz	r3, 800ca86 <_Balloc+0x42>
 800ca64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ca6c:	b9b8      	cbnz	r0, 800ca9e <_Balloc+0x5a>
 800ca6e:	2101      	movs	r1, #1
 800ca70:	fa01 f506 	lsl.w	r5, r1, r6
 800ca74:	1d6a      	adds	r2, r5, #5
 800ca76:	0092      	lsls	r2, r2, #2
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f000 fbe2 	bl	800d242 <_calloc_r>
 800ca7e:	b160      	cbz	r0, 800ca9a <_Balloc+0x56>
 800ca80:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ca84:	e00e      	b.n	800caa4 <_Balloc+0x60>
 800ca86:	2221      	movs	r2, #33	; 0x21
 800ca88:	2104      	movs	r1, #4
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 fbd9 	bl	800d242 <_calloc_r>
 800ca90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca92:	60e8      	str	r0, [r5, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1e4      	bne.n	800ca64 <_Balloc+0x20>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	bd70      	pop	{r4, r5, r6, pc}
 800ca9e:	6802      	ldr	r2, [r0, #0]
 800caa0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800caa4:	2300      	movs	r3, #0
 800caa6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caaa:	e7f7      	b.n	800ca9c <_Balloc+0x58>

0800caac <_Bfree>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cab0:	4606      	mov	r6, r0
 800cab2:	460d      	mov	r5, r1
 800cab4:	b93c      	cbnz	r4, 800cac6 <_Bfree+0x1a>
 800cab6:	2010      	movs	r0, #16
 800cab8:	f7ff ffaa 	bl	800ca10 <malloc>
 800cabc:	6270      	str	r0, [r6, #36]	; 0x24
 800cabe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cac2:	6004      	str	r4, [r0, #0]
 800cac4:	60c4      	str	r4, [r0, #12]
 800cac6:	b13d      	cbz	r5, 800cad8 <_Bfree+0x2c>
 800cac8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800caca:	686a      	ldr	r2, [r5, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cad2:	6029      	str	r1, [r5, #0]
 800cad4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cad8:	bd70      	pop	{r4, r5, r6, pc}

0800cada <__multadd>:
 800cada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cade:	690d      	ldr	r5, [r1, #16]
 800cae0:	461f      	mov	r7, r3
 800cae2:	4606      	mov	r6, r0
 800cae4:	460c      	mov	r4, r1
 800cae6:	f101 0c14 	add.w	ip, r1, #20
 800caea:	2300      	movs	r3, #0
 800caec:	f8dc 0000 	ldr.w	r0, [ip]
 800caf0:	b281      	uxth	r1, r0
 800caf2:	fb02 7101 	mla	r1, r2, r1, r7
 800caf6:	0c0f      	lsrs	r7, r1, #16
 800caf8:	0c00      	lsrs	r0, r0, #16
 800cafa:	fb02 7000 	mla	r0, r2, r0, r7
 800cafe:	b289      	uxth	r1, r1
 800cb00:	3301      	adds	r3, #1
 800cb02:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cb06:	429d      	cmp	r5, r3
 800cb08:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cb0c:	f84c 1b04 	str.w	r1, [ip], #4
 800cb10:	dcec      	bgt.n	800caec <__multadd+0x12>
 800cb12:	b1d7      	cbz	r7, 800cb4a <__multadd+0x70>
 800cb14:	68a3      	ldr	r3, [r4, #8]
 800cb16:	42ab      	cmp	r3, r5
 800cb18:	dc12      	bgt.n	800cb40 <__multadd+0x66>
 800cb1a:	6861      	ldr	r1, [r4, #4]
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	3101      	adds	r1, #1
 800cb20:	f7ff ff90 	bl	800ca44 <_Balloc>
 800cb24:	6922      	ldr	r2, [r4, #16]
 800cb26:	3202      	adds	r2, #2
 800cb28:	f104 010c 	add.w	r1, r4, #12
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	0092      	lsls	r2, r2, #2
 800cb30:	300c      	adds	r0, #12
 800cb32:	f7fc fdad 	bl	8009690 <memcpy>
 800cb36:	4621      	mov	r1, r4
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff ffb7 	bl	800caac <_Bfree>
 800cb3e:	4644      	mov	r4, r8
 800cb40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb44:	3501      	adds	r5, #1
 800cb46:	615f      	str	r7, [r3, #20]
 800cb48:	6125      	str	r5, [r4, #16]
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb50 <__s2b>:
 800cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb54:	460c      	mov	r4, r1
 800cb56:	4615      	mov	r5, r2
 800cb58:	461f      	mov	r7, r3
 800cb5a:	2209      	movs	r2, #9
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	4606      	mov	r6, r0
 800cb60:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb64:	2100      	movs	r1, #0
 800cb66:	2201      	movs	r2, #1
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	db20      	blt.n	800cbae <__s2b+0x5e>
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff ff69 	bl	800ca44 <_Balloc>
 800cb72:	9b08      	ldr	r3, [sp, #32]
 800cb74:	6143      	str	r3, [r0, #20]
 800cb76:	2d09      	cmp	r5, #9
 800cb78:	f04f 0301 	mov.w	r3, #1
 800cb7c:	6103      	str	r3, [r0, #16]
 800cb7e:	dd19      	ble.n	800cbb4 <__s2b+0x64>
 800cb80:	f104 0809 	add.w	r8, r4, #9
 800cb84:	46c1      	mov	r9, r8
 800cb86:	442c      	add	r4, r5
 800cb88:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cb8c:	4601      	mov	r1, r0
 800cb8e:	3b30      	subs	r3, #48	; 0x30
 800cb90:	220a      	movs	r2, #10
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7ff ffa1 	bl	800cada <__multadd>
 800cb98:	45a1      	cmp	r9, r4
 800cb9a:	d1f5      	bne.n	800cb88 <__s2b+0x38>
 800cb9c:	eb08 0405 	add.w	r4, r8, r5
 800cba0:	3c08      	subs	r4, #8
 800cba2:	1b2d      	subs	r5, r5, r4
 800cba4:	1963      	adds	r3, r4, r5
 800cba6:	42bb      	cmp	r3, r7
 800cba8:	db07      	blt.n	800cbba <__s2b+0x6a>
 800cbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbae:	0052      	lsls	r2, r2, #1
 800cbb0:	3101      	adds	r1, #1
 800cbb2:	e7d9      	b.n	800cb68 <__s2b+0x18>
 800cbb4:	340a      	adds	r4, #10
 800cbb6:	2509      	movs	r5, #9
 800cbb8:	e7f3      	b.n	800cba2 <__s2b+0x52>
 800cbba:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	3b30      	subs	r3, #48	; 0x30
 800cbc2:	220a      	movs	r2, #10
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7ff ff88 	bl	800cada <__multadd>
 800cbca:	e7eb      	b.n	800cba4 <__s2b+0x54>

0800cbcc <__hi0bits>:
 800cbcc:	0c02      	lsrs	r2, r0, #16
 800cbce:	0412      	lsls	r2, r2, #16
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	b9b2      	cbnz	r2, 800cc02 <__hi0bits+0x36>
 800cbd4:	0403      	lsls	r3, r0, #16
 800cbd6:	2010      	movs	r0, #16
 800cbd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cbdc:	bf04      	itt	eq
 800cbde:	021b      	lsleq	r3, r3, #8
 800cbe0:	3008      	addeq	r0, #8
 800cbe2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cbe6:	bf04      	itt	eq
 800cbe8:	011b      	lsleq	r3, r3, #4
 800cbea:	3004      	addeq	r0, #4
 800cbec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cbf0:	bf04      	itt	eq
 800cbf2:	009b      	lsleq	r3, r3, #2
 800cbf4:	3002      	addeq	r0, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	db06      	blt.n	800cc08 <__hi0bits+0x3c>
 800cbfa:	005b      	lsls	r3, r3, #1
 800cbfc:	d503      	bpl.n	800cc06 <__hi0bits+0x3a>
 800cbfe:	3001      	adds	r0, #1
 800cc00:	4770      	bx	lr
 800cc02:	2000      	movs	r0, #0
 800cc04:	e7e8      	b.n	800cbd8 <__hi0bits+0xc>
 800cc06:	2020      	movs	r0, #32
 800cc08:	4770      	bx	lr

0800cc0a <__lo0bits>:
 800cc0a:	6803      	ldr	r3, [r0, #0]
 800cc0c:	f013 0207 	ands.w	r2, r3, #7
 800cc10:	4601      	mov	r1, r0
 800cc12:	d00b      	beq.n	800cc2c <__lo0bits+0x22>
 800cc14:	07da      	lsls	r2, r3, #31
 800cc16:	d423      	bmi.n	800cc60 <__lo0bits+0x56>
 800cc18:	0798      	lsls	r0, r3, #30
 800cc1a:	bf49      	itett	mi
 800cc1c:	085b      	lsrmi	r3, r3, #1
 800cc1e:	089b      	lsrpl	r3, r3, #2
 800cc20:	2001      	movmi	r0, #1
 800cc22:	600b      	strmi	r3, [r1, #0]
 800cc24:	bf5c      	itt	pl
 800cc26:	600b      	strpl	r3, [r1, #0]
 800cc28:	2002      	movpl	r0, #2
 800cc2a:	4770      	bx	lr
 800cc2c:	b298      	uxth	r0, r3
 800cc2e:	b9a8      	cbnz	r0, 800cc5c <__lo0bits+0x52>
 800cc30:	0c1b      	lsrs	r3, r3, #16
 800cc32:	2010      	movs	r0, #16
 800cc34:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc38:	bf04      	itt	eq
 800cc3a:	0a1b      	lsreq	r3, r3, #8
 800cc3c:	3008      	addeq	r0, #8
 800cc3e:	071a      	lsls	r2, r3, #28
 800cc40:	bf04      	itt	eq
 800cc42:	091b      	lsreq	r3, r3, #4
 800cc44:	3004      	addeq	r0, #4
 800cc46:	079a      	lsls	r2, r3, #30
 800cc48:	bf04      	itt	eq
 800cc4a:	089b      	lsreq	r3, r3, #2
 800cc4c:	3002      	addeq	r0, #2
 800cc4e:	07da      	lsls	r2, r3, #31
 800cc50:	d402      	bmi.n	800cc58 <__lo0bits+0x4e>
 800cc52:	085b      	lsrs	r3, r3, #1
 800cc54:	d006      	beq.n	800cc64 <__lo0bits+0x5a>
 800cc56:	3001      	adds	r0, #1
 800cc58:	600b      	str	r3, [r1, #0]
 800cc5a:	4770      	bx	lr
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	e7e9      	b.n	800cc34 <__lo0bits+0x2a>
 800cc60:	2000      	movs	r0, #0
 800cc62:	4770      	bx	lr
 800cc64:	2020      	movs	r0, #32
 800cc66:	4770      	bx	lr

0800cc68 <__i2b>:
 800cc68:	b510      	push	{r4, lr}
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	2101      	movs	r1, #1
 800cc6e:	f7ff fee9 	bl	800ca44 <_Balloc>
 800cc72:	2201      	movs	r2, #1
 800cc74:	6144      	str	r4, [r0, #20]
 800cc76:	6102      	str	r2, [r0, #16]
 800cc78:	bd10      	pop	{r4, pc}

0800cc7a <__multiply>:
 800cc7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7e:	4614      	mov	r4, r2
 800cc80:	690a      	ldr	r2, [r1, #16]
 800cc82:	6923      	ldr	r3, [r4, #16]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	bfb8      	it	lt
 800cc88:	460b      	movlt	r3, r1
 800cc8a:	4688      	mov	r8, r1
 800cc8c:	bfbc      	itt	lt
 800cc8e:	46a0      	movlt	r8, r4
 800cc90:	461c      	movlt	r4, r3
 800cc92:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc96:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cc9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cca2:	eb07 0609 	add.w	r6, r7, r9
 800cca6:	42b3      	cmp	r3, r6
 800cca8:	bfb8      	it	lt
 800ccaa:	3101      	addlt	r1, #1
 800ccac:	f7ff feca 	bl	800ca44 <_Balloc>
 800ccb0:	f100 0514 	add.w	r5, r0, #20
 800ccb4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ccb8:	462b      	mov	r3, r5
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4573      	cmp	r3, lr
 800ccbe:	d316      	bcc.n	800ccee <__multiply+0x74>
 800ccc0:	f104 0214 	add.w	r2, r4, #20
 800ccc4:	f108 0114 	add.w	r1, r8, #20
 800ccc8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cccc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	9b00      	ldr	r3, [sp, #0]
 800ccd4:	9201      	str	r2, [sp, #4]
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d80c      	bhi.n	800ccf4 <__multiply+0x7a>
 800ccda:	2e00      	cmp	r6, #0
 800ccdc:	dd03      	ble.n	800cce6 <__multiply+0x6c>
 800ccde:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d05d      	beq.n	800cda2 <__multiply+0x128>
 800cce6:	6106      	str	r6, [r0, #16]
 800cce8:	b003      	add	sp, #12
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	f843 2b04 	str.w	r2, [r3], #4
 800ccf2:	e7e3      	b.n	800ccbc <__multiply+0x42>
 800ccf4:	f8b2 b000 	ldrh.w	fp, [r2]
 800ccf8:	f1bb 0f00 	cmp.w	fp, #0
 800ccfc:	d023      	beq.n	800cd46 <__multiply+0xcc>
 800ccfe:	4689      	mov	r9, r1
 800cd00:	46ac      	mov	ip, r5
 800cd02:	f04f 0800 	mov.w	r8, #0
 800cd06:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd0a:	f8dc a000 	ldr.w	sl, [ip]
 800cd0e:	b2a3      	uxth	r3, r4
 800cd10:	fa1f fa8a 	uxth.w	sl, sl
 800cd14:	fb0b a303 	mla	r3, fp, r3, sl
 800cd18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cd1c:	f8dc 4000 	ldr.w	r4, [ip]
 800cd20:	4443      	add	r3, r8
 800cd22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd26:	fb0b 840a 	mla	r4, fp, sl, r8
 800cd2a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cd2e:	46e2      	mov	sl, ip
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd36:	454f      	cmp	r7, r9
 800cd38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd3c:	f84a 3b04 	str.w	r3, [sl], #4
 800cd40:	d82b      	bhi.n	800cd9a <__multiply+0x120>
 800cd42:	f8cc 8004 	str.w	r8, [ip, #4]
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cd4c:	3204      	adds	r2, #4
 800cd4e:	f1ba 0f00 	cmp.w	sl, #0
 800cd52:	d020      	beq.n	800cd96 <__multiply+0x11c>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	4689      	mov	r9, r1
 800cd58:	46a8      	mov	r8, r5
 800cd5a:	f04f 0b00 	mov.w	fp, #0
 800cd5e:	f8b9 c000 	ldrh.w	ip, [r9]
 800cd62:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cd66:	fb0a 440c 	mla	r4, sl, ip, r4
 800cd6a:	445c      	add	r4, fp
 800cd6c:	46c4      	mov	ip, r8
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd74:	f84c 3b04 	str.w	r3, [ip], #4
 800cd78:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd7c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cd80:	0c1b      	lsrs	r3, r3, #16
 800cd82:	fb0a b303 	mla	r3, sl, r3, fp
 800cd86:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cd8a:	454f      	cmp	r7, r9
 800cd8c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cd90:	d805      	bhi.n	800cd9e <__multiply+0x124>
 800cd92:	f8c8 3004 	str.w	r3, [r8, #4]
 800cd96:	3504      	adds	r5, #4
 800cd98:	e79b      	b.n	800ccd2 <__multiply+0x58>
 800cd9a:	46d4      	mov	ip, sl
 800cd9c:	e7b3      	b.n	800cd06 <__multiply+0x8c>
 800cd9e:	46e0      	mov	r8, ip
 800cda0:	e7dd      	b.n	800cd5e <__multiply+0xe4>
 800cda2:	3e01      	subs	r6, #1
 800cda4:	e799      	b.n	800ccda <__multiply+0x60>
	...

0800cda8 <__pow5mult>:
 800cda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdac:	4615      	mov	r5, r2
 800cdae:	f012 0203 	ands.w	r2, r2, #3
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460f      	mov	r7, r1
 800cdb6:	d007      	beq.n	800cdc8 <__pow5mult+0x20>
 800cdb8:	3a01      	subs	r2, #1
 800cdba:	4c21      	ldr	r4, [pc, #132]	; (800ce40 <__pow5mult+0x98>)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdc2:	f7ff fe8a 	bl	800cada <__multadd>
 800cdc6:	4607      	mov	r7, r0
 800cdc8:	10ad      	asrs	r5, r5, #2
 800cdca:	d035      	beq.n	800ce38 <__pow5mult+0x90>
 800cdcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cdce:	b93c      	cbnz	r4, 800cde0 <__pow5mult+0x38>
 800cdd0:	2010      	movs	r0, #16
 800cdd2:	f7ff fe1d 	bl	800ca10 <malloc>
 800cdd6:	6270      	str	r0, [r6, #36]	; 0x24
 800cdd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cddc:	6004      	str	r4, [r0, #0]
 800cdde:	60c4      	str	r4, [r0, #12]
 800cde0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cde4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cde8:	b94c      	cbnz	r4, 800cdfe <__pow5mult+0x56>
 800cdea:	f240 2171 	movw	r1, #625	; 0x271
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f7ff ff3a 	bl	800cc68 <__i2b>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	6003      	str	r3, [r0, #0]
 800cdfe:	f04f 0800 	mov.w	r8, #0
 800ce02:	07eb      	lsls	r3, r5, #31
 800ce04:	d50a      	bpl.n	800ce1c <__pow5mult+0x74>
 800ce06:	4639      	mov	r1, r7
 800ce08:	4622      	mov	r2, r4
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f7ff ff35 	bl	800cc7a <__multiply>
 800ce10:	4639      	mov	r1, r7
 800ce12:	4681      	mov	r9, r0
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7ff fe49 	bl	800caac <_Bfree>
 800ce1a:	464f      	mov	r7, r9
 800ce1c:	106d      	asrs	r5, r5, #1
 800ce1e:	d00b      	beq.n	800ce38 <__pow5mult+0x90>
 800ce20:	6820      	ldr	r0, [r4, #0]
 800ce22:	b938      	cbnz	r0, 800ce34 <__pow5mult+0x8c>
 800ce24:	4622      	mov	r2, r4
 800ce26:	4621      	mov	r1, r4
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7ff ff26 	bl	800cc7a <__multiply>
 800ce2e:	6020      	str	r0, [r4, #0]
 800ce30:	f8c0 8000 	str.w	r8, [r0]
 800ce34:	4604      	mov	r4, r0
 800ce36:	e7e4      	b.n	800ce02 <__pow5mult+0x5a>
 800ce38:	4638      	mov	r0, r7
 800ce3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3e:	bf00      	nop
 800ce40:	0800dda0 	.word	0x0800dda0

0800ce44 <__lshift>:
 800ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce48:	460c      	mov	r4, r1
 800ce4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	6849      	ldr	r1, [r1, #4]
 800ce52:	eb0a 0903 	add.w	r9, sl, r3
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	4607      	mov	r7, r0
 800ce5a:	4616      	mov	r6, r2
 800ce5c:	f109 0501 	add.w	r5, r9, #1
 800ce60:	42ab      	cmp	r3, r5
 800ce62:	db32      	blt.n	800ceca <__lshift+0x86>
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7ff fded 	bl	800ca44 <_Balloc>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	4680      	mov	r8, r0
 800ce6e:	f100 0114 	add.w	r1, r0, #20
 800ce72:	461a      	mov	r2, r3
 800ce74:	4553      	cmp	r3, sl
 800ce76:	db2b      	blt.n	800ced0 <__lshift+0x8c>
 800ce78:	6920      	ldr	r0, [r4, #16]
 800ce7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce7e:	f104 0314 	add.w	r3, r4, #20
 800ce82:	f016 021f 	ands.w	r2, r6, #31
 800ce86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce8e:	d025      	beq.n	800cedc <__lshift+0x98>
 800ce90:	f1c2 0e20 	rsb	lr, r2, #32
 800ce94:	2000      	movs	r0, #0
 800ce96:	681e      	ldr	r6, [r3, #0]
 800ce98:	468a      	mov	sl, r1
 800ce9a:	4096      	lsls	r6, r2
 800ce9c:	4330      	orrs	r0, r6
 800ce9e:	f84a 0b04 	str.w	r0, [sl], #4
 800cea2:	f853 0b04 	ldr.w	r0, [r3], #4
 800cea6:	459c      	cmp	ip, r3
 800cea8:	fa20 f00e 	lsr.w	r0, r0, lr
 800ceac:	d814      	bhi.n	800ced8 <__lshift+0x94>
 800ceae:	6048      	str	r0, [r1, #4]
 800ceb0:	b108      	cbz	r0, 800ceb6 <__lshift+0x72>
 800ceb2:	f109 0502 	add.w	r5, r9, #2
 800ceb6:	3d01      	subs	r5, #1
 800ceb8:	4638      	mov	r0, r7
 800ceba:	f8c8 5010 	str.w	r5, [r8, #16]
 800cebe:	4621      	mov	r1, r4
 800cec0:	f7ff fdf4 	bl	800caac <_Bfree>
 800cec4:	4640      	mov	r0, r8
 800cec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceca:	3101      	adds	r1, #1
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	e7c7      	b.n	800ce60 <__lshift+0x1c>
 800ced0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ced4:	3301      	adds	r3, #1
 800ced6:	e7cd      	b.n	800ce74 <__lshift+0x30>
 800ced8:	4651      	mov	r1, sl
 800ceda:	e7dc      	b.n	800ce96 <__lshift+0x52>
 800cedc:	3904      	subs	r1, #4
 800cede:	f853 2b04 	ldr.w	r2, [r3], #4
 800cee2:	f841 2f04 	str.w	r2, [r1, #4]!
 800cee6:	459c      	cmp	ip, r3
 800cee8:	d8f9      	bhi.n	800cede <__lshift+0x9a>
 800ceea:	e7e4      	b.n	800ceb6 <__lshift+0x72>

0800ceec <__mcmp>:
 800ceec:	6903      	ldr	r3, [r0, #16]
 800ceee:	690a      	ldr	r2, [r1, #16]
 800cef0:	1a9b      	subs	r3, r3, r2
 800cef2:	b530      	push	{r4, r5, lr}
 800cef4:	d10c      	bne.n	800cf10 <__mcmp+0x24>
 800cef6:	0092      	lsls	r2, r2, #2
 800cef8:	3014      	adds	r0, #20
 800cefa:	3114      	adds	r1, #20
 800cefc:	1884      	adds	r4, r0, r2
 800cefe:	4411      	add	r1, r2
 800cf00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf08:	4295      	cmp	r5, r2
 800cf0a:	d003      	beq.n	800cf14 <__mcmp+0x28>
 800cf0c:	d305      	bcc.n	800cf1a <__mcmp+0x2e>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	4618      	mov	r0, r3
 800cf12:	bd30      	pop	{r4, r5, pc}
 800cf14:	42a0      	cmp	r0, r4
 800cf16:	d3f3      	bcc.n	800cf00 <__mcmp+0x14>
 800cf18:	e7fa      	b.n	800cf10 <__mcmp+0x24>
 800cf1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1e:	e7f7      	b.n	800cf10 <__mcmp+0x24>

0800cf20 <__mdiff>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	460d      	mov	r5, r1
 800cf26:	4607      	mov	r7, r0
 800cf28:	4611      	mov	r1, r2
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	4614      	mov	r4, r2
 800cf2e:	f7ff ffdd 	bl	800ceec <__mcmp>
 800cf32:	1e06      	subs	r6, r0, #0
 800cf34:	d108      	bne.n	800cf48 <__mdiff+0x28>
 800cf36:	4631      	mov	r1, r6
 800cf38:	4638      	mov	r0, r7
 800cf3a:	f7ff fd83 	bl	800ca44 <_Balloc>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf48:	bfa4      	itt	ge
 800cf4a:	4623      	movge	r3, r4
 800cf4c:	462c      	movge	r4, r5
 800cf4e:	4638      	mov	r0, r7
 800cf50:	6861      	ldr	r1, [r4, #4]
 800cf52:	bfa6      	itte	ge
 800cf54:	461d      	movge	r5, r3
 800cf56:	2600      	movge	r6, #0
 800cf58:	2601      	movlt	r6, #1
 800cf5a:	f7ff fd73 	bl	800ca44 <_Balloc>
 800cf5e:	692b      	ldr	r3, [r5, #16]
 800cf60:	60c6      	str	r6, [r0, #12]
 800cf62:	6926      	ldr	r6, [r4, #16]
 800cf64:	f105 0914 	add.w	r9, r5, #20
 800cf68:	f104 0214 	add.w	r2, r4, #20
 800cf6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cf70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cf74:	f100 0514 	add.w	r5, r0, #20
 800cf78:	f04f 0e00 	mov.w	lr, #0
 800cf7c:	f852 ab04 	ldr.w	sl, [r2], #4
 800cf80:	f859 4b04 	ldr.w	r4, [r9], #4
 800cf84:	fa1e f18a 	uxtah	r1, lr, sl
 800cf88:	b2a3      	uxth	r3, r4
 800cf8a:	1ac9      	subs	r1, r1, r3
 800cf8c:	0c23      	lsrs	r3, r4, #16
 800cf8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cf92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cf96:	b289      	uxth	r1, r1
 800cf98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cf9c:	45c8      	cmp	r8, r9
 800cf9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cfa2:	4694      	mov	ip, r2
 800cfa4:	f845 3b04 	str.w	r3, [r5], #4
 800cfa8:	d8e8      	bhi.n	800cf7c <__mdiff+0x5c>
 800cfaa:	45bc      	cmp	ip, r7
 800cfac:	d304      	bcc.n	800cfb8 <__mdiff+0x98>
 800cfae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cfb2:	b183      	cbz	r3, 800cfd6 <__mdiff+0xb6>
 800cfb4:	6106      	str	r6, [r0, #16]
 800cfb6:	e7c5      	b.n	800cf44 <__mdiff+0x24>
 800cfb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cfbc:	fa1e f381 	uxtah	r3, lr, r1
 800cfc0:	141a      	asrs	r2, r3, #16
 800cfc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfcc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cfd0:	f845 3b04 	str.w	r3, [r5], #4
 800cfd4:	e7e9      	b.n	800cfaa <__mdiff+0x8a>
 800cfd6:	3e01      	subs	r6, #1
 800cfd8:	e7e9      	b.n	800cfae <__mdiff+0x8e>
	...

0800cfdc <__ulp>:
 800cfdc:	4b12      	ldr	r3, [pc, #72]	; (800d028 <__ulp+0x4c>)
 800cfde:	ee10 2a90 	vmov	r2, s1
 800cfe2:	401a      	ands	r2, r3
 800cfe4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	dd04      	ble.n	800cff6 <__ulp+0x1a>
 800cfec:	2000      	movs	r0, #0
 800cfee:	4619      	mov	r1, r3
 800cff0:	ec41 0b10 	vmov	d0, r0, r1
 800cff4:	4770      	bx	lr
 800cff6:	425b      	negs	r3, r3
 800cff8:	151b      	asrs	r3, r3, #20
 800cffa:	2b13      	cmp	r3, #19
 800cffc:	f04f 0000 	mov.w	r0, #0
 800d000:	f04f 0100 	mov.w	r1, #0
 800d004:	dc04      	bgt.n	800d010 <__ulp+0x34>
 800d006:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d00a:	fa42 f103 	asr.w	r1, r2, r3
 800d00e:	e7ef      	b.n	800cff0 <__ulp+0x14>
 800d010:	3b14      	subs	r3, #20
 800d012:	2b1e      	cmp	r3, #30
 800d014:	f04f 0201 	mov.w	r2, #1
 800d018:	bfda      	itte	le
 800d01a:	f1c3 031f 	rsble	r3, r3, #31
 800d01e:	fa02 f303 	lslle.w	r3, r2, r3
 800d022:	4613      	movgt	r3, r2
 800d024:	4618      	mov	r0, r3
 800d026:	e7e3      	b.n	800cff0 <__ulp+0x14>
 800d028:	7ff00000 	.word	0x7ff00000

0800d02c <__b2d>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	6905      	ldr	r5, [r0, #16]
 800d030:	f100 0714 	add.w	r7, r0, #20
 800d034:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d038:	1f2e      	subs	r6, r5, #4
 800d03a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d03e:	4620      	mov	r0, r4
 800d040:	f7ff fdc4 	bl	800cbcc <__hi0bits>
 800d044:	f1c0 0320 	rsb	r3, r0, #32
 800d048:	280a      	cmp	r0, #10
 800d04a:	600b      	str	r3, [r1, #0]
 800d04c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d0c4 <__b2d+0x98>
 800d050:	dc14      	bgt.n	800d07c <__b2d+0x50>
 800d052:	f1c0 0e0b 	rsb	lr, r0, #11
 800d056:	fa24 f10e 	lsr.w	r1, r4, lr
 800d05a:	42b7      	cmp	r7, r6
 800d05c:	ea41 030c 	orr.w	r3, r1, ip
 800d060:	bf34      	ite	cc
 800d062:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d066:	2100      	movcs	r1, #0
 800d068:	3015      	adds	r0, #21
 800d06a:	fa04 f000 	lsl.w	r0, r4, r0
 800d06e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d072:	ea40 0201 	orr.w	r2, r0, r1
 800d076:	ec43 2b10 	vmov	d0, r2, r3
 800d07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d07c:	42b7      	cmp	r7, r6
 800d07e:	bf3a      	itte	cc
 800d080:	f1a5 0608 	subcc.w	r6, r5, #8
 800d084:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d088:	2100      	movcs	r1, #0
 800d08a:	380b      	subs	r0, #11
 800d08c:	d015      	beq.n	800d0ba <__b2d+0x8e>
 800d08e:	4084      	lsls	r4, r0
 800d090:	f1c0 0520 	rsb	r5, r0, #32
 800d094:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d098:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d09c:	42be      	cmp	r6, r7
 800d09e:	fa21 fc05 	lsr.w	ip, r1, r5
 800d0a2:	ea44 030c 	orr.w	r3, r4, ip
 800d0a6:	bf8c      	ite	hi
 800d0a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d0ac:	2400      	movls	r4, #0
 800d0ae:	fa01 f000 	lsl.w	r0, r1, r0
 800d0b2:	40ec      	lsrs	r4, r5
 800d0b4:	ea40 0204 	orr.w	r2, r0, r4
 800d0b8:	e7dd      	b.n	800d076 <__b2d+0x4a>
 800d0ba:	ea44 030c 	orr.w	r3, r4, ip
 800d0be:	460a      	mov	r2, r1
 800d0c0:	e7d9      	b.n	800d076 <__b2d+0x4a>
 800d0c2:	bf00      	nop
 800d0c4:	3ff00000 	.word	0x3ff00000

0800d0c8 <__d2b>:
 800d0c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0cc:	460e      	mov	r6, r1
 800d0ce:	2101      	movs	r1, #1
 800d0d0:	ec59 8b10 	vmov	r8, r9, d0
 800d0d4:	4615      	mov	r5, r2
 800d0d6:	f7ff fcb5 	bl	800ca44 <_Balloc>
 800d0da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d0de:	4607      	mov	r7, r0
 800d0e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0e4:	bb34      	cbnz	r4, 800d134 <__d2b+0x6c>
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0ec:	d027      	beq.n	800d13e <__d2b+0x76>
 800d0ee:	a802      	add	r0, sp, #8
 800d0f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d0f4:	f7ff fd89 	bl	800cc0a <__lo0bits>
 800d0f8:	9900      	ldr	r1, [sp, #0]
 800d0fa:	b1f0      	cbz	r0, 800d13a <__d2b+0x72>
 800d0fc:	9a01      	ldr	r2, [sp, #4]
 800d0fe:	f1c0 0320 	rsb	r3, r0, #32
 800d102:	fa02 f303 	lsl.w	r3, r2, r3
 800d106:	430b      	orrs	r3, r1
 800d108:	40c2      	lsrs	r2, r0
 800d10a:	617b      	str	r3, [r7, #20]
 800d10c:	9201      	str	r2, [sp, #4]
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	61bb      	str	r3, [r7, #24]
 800d112:	2b00      	cmp	r3, #0
 800d114:	bf14      	ite	ne
 800d116:	2102      	movne	r1, #2
 800d118:	2101      	moveq	r1, #1
 800d11a:	6139      	str	r1, [r7, #16]
 800d11c:	b1c4      	cbz	r4, 800d150 <__d2b+0x88>
 800d11e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d122:	4404      	add	r4, r0
 800d124:	6034      	str	r4, [r6, #0]
 800d126:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d12a:	6028      	str	r0, [r5, #0]
 800d12c:	4638      	mov	r0, r7
 800d12e:	b003      	add	sp, #12
 800d130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d138:	e7d5      	b.n	800d0e6 <__d2b+0x1e>
 800d13a:	6179      	str	r1, [r7, #20]
 800d13c:	e7e7      	b.n	800d10e <__d2b+0x46>
 800d13e:	a801      	add	r0, sp, #4
 800d140:	f7ff fd63 	bl	800cc0a <__lo0bits>
 800d144:	9b01      	ldr	r3, [sp, #4]
 800d146:	617b      	str	r3, [r7, #20]
 800d148:	2101      	movs	r1, #1
 800d14a:	6139      	str	r1, [r7, #16]
 800d14c:	3020      	adds	r0, #32
 800d14e:	e7e5      	b.n	800d11c <__d2b+0x54>
 800d150:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d158:	6030      	str	r0, [r6, #0]
 800d15a:	6918      	ldr	r0, [r3, #16]
 800d15c:	f7ff fd36 	bl	800cbcc <__hi0bits>
 800d160:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d164:	e7e1      	b.n	800d12a <__d2b+0x62>

0800d166 <__ratio>:
 800d166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16a:	4688      	mov	r8, r1
 800d16c:	4669      	mov	r1, sp
 800d16e:	4681      	mov	r9, r0
 800d170:	f7ff ff5c 	bl	800d02c <__b2d>
 800d174:	a901      	add	r1, sp, #4
 800d176:	4640      	mov	r0, r8
 800d178:	ec57 6b10 	vmov	r6, r7, d0
 800d17c:	f7ff ff56 	bl	800d02c <__b2d>
 800d180:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d184:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d188:	eba3 0c02 	sub.w	ip, r3, r2
 800d18c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d190:	1a9b      	subs	r3, r3, r2
 800d192:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d196:	ec5b ab10 	vmov	sl, fp, d0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bfce      	itee	gt
 800d19e:	463a      	movgt	r2, r7
 800d1a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1a4:	465a      	movle	r2, fp
 800d1a6:	4659      	mov	r1, fp
 800d1a8:	463d      	mov	r5, r7
 800d1aa:	bfd4      	ite	le
 800d1ac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d1b0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	ee10 2a10 	vmov	r2, s0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f3 fb45 	bl	800084c <__aeabi_ddiv>
 800d1c2:	ec41 0b10 	vmov	d0, r0, r1
 800d1c6:	b003      	add	sp, #12
 800d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1cc <__copybits>:
 800d1cc:	3901      	subs	r1, #1
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	1149      	asrs	r1, r1, #5
 800d1d2:	6914      	ldr	r4, [r2, #16]
 800d1d4:	3101      	adds	r1, #1
 800d1d6:	f102 0314 	add.w	r3, r2, #20
 800d1da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1e2:	42a3      	cmp	r3, r4
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	d303      	bcc.n	800d1f0 <__copybits+0x24>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	428a      	cmp	r2, r1
 800d1ec:	d305      	bcc.n	800d1fa <__copybits+0x2e>
 800d1ee:	bd10      	pop	{r4, pc}
 800d1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f4:	f840 2b04 	str.w	r2, [r0], #4
 800d1f8:	e7f3      	b.n	800d1e2 <__copybits+0x16>
 800d1fa:	f842 3b04 	str.w	r3, [r2], #4
 800d1fe:	e7f4      	b.n	800d1ea <__copybits+0x1e>

0800d200 <__any_on>:
 800d200:	f100 0214 	add.w	r2, r0, #20
 800d204:	6900      	ldr	r0, [r0, #16]
 800d206:	114b      	asrs	r3, r1, #5
 800d208:	4298      	cmp	r0, r3
 800d20a:	b510      	push	{r4, lr}
 800d20c:	db11      	blt.n	800d232 <__any_on+0x32>
 800d20e:	dd0a      	ble.n	800d226 <__any_on+0x26>
 800d210:	f011 011f 	ands.w	r1, r1, #31
 800d214:	d007      	beq.n	800d226 <__any_on+0x26>
 800d216:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d21a:	fa24 f001 	lsr.w	r0, r4, r1
 800d21e:	fa00 f101 	lsl.w	r1, r0, r1
 800d222:	428c      	cmp	r4, r1
 800d224:	d10b      	bne.n	800d23e <__any_on+0x3e>
 800d226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d803      	bhi.n	800d236 <__any_on+0x36>
 800d22e:	2000      	movs	r0, #0
 800d230:	bd10      	pop	{r4, pc}
 800d232:	4603      	mov	r3, r0
 800d234:	e7f7      	b.n	800d226 <__any_on+0x26>
 800d236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d23a:	2900      	cmp	r1, #0
 800d23c:	d0f5      	beq.n	800d22a <__any_on+0x2a>
 800d23e:	2001      	movs	r0, #1
 800d240:	e7f6      	b.n	800d230 <__any_on+0x30>

0800d242 <_calloc_r>:
 800d242:	b538      	push	{r3, r4, r5, lr}
 800d244:	fb02 f401 	mul.w	r4, r2, r1
 800d248:	4621      	mov	r1, r4
 800d24a:	f000 f857 	bl	800d2fc <_malloc_r>
 800d24e:	4605      	mov	r5, r0
 800d250:	b118      	cbz	r0, 800d25a <_calloc_r+0x18>
 800d252:	4622      	mov	r2, r4
 800d254:	2100      	movs	r1, #0
 800d256:	f7fc fa26 	bl	80096a6 <memset>
 800d25a:	4628      	mov	r0, r5
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d260 <_free_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4605      	mov	r5, r0
 800d264:	2900      	cmp	r1, #0
 800d266:	d045      	beq.n	800d2f4 <_free_r+0x94>
 800d268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d26c:	1f0c      	subs	r4, r1, #4
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bfb8      	it	lt
 800d272:	18e4      	addlt	r4, r4, r3
 800d274:	f000 fc0f 	bl	800da96 <__malloc_lock>
 800d278:	4a1f      	ldr	r2, [pc, #124]	; (800d2f8 <_free_r+0x98>)
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	4610      	mov	r0, r2
 800d27e:	b933      	cbnz	r3, 800d28e <_free_r+0x2e>
 800d280:	6063      	str	r3, [r4, #4]
 800d282:	6014      	str	r4, [r2, #0]
 800d284:	4628      	mov	r0, r5
 800d286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d28a:	f000 bc05 	b.w	800da98 <__malloc_unlock>
 800d28e:	42a3      	cmp	r3, r4
 800d290:	d90c      	bls.n	800d2ac <_free_r+0x4c>
 800d292:	6821      	ldr	r1, [r4, #0]
 800d294:	1862      	adds	r2, r4, r1
 800d296:	4293      	cmp	r3, r2
 800d298:	bf04      	itt	eq
 800d29a:	681a      	ldreq	r2, [r3, #0]
 800d29c:	685b      	ldreq	r3, [r3, #4]
 800d29e:	6063      	str	r3, [r4, #4]
 800d2a0:	bf04      	itt	eq
 800d2a2:	1852      	addeq	r2, r2, r1
 800d2a4:	6022      	streq	r2, [r4, #0]
 800d2a6:	6004      	str	r4, [r0, #0]
 800d2a8:	e7ec      	b.n	800d284 <_free_r+0x24>
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	b10a      	cbz	r2, 800d2b4 <_free_r+0x54>
 800d2b0:	42a2      	cmp	r2, r4
 800d2b2:	d9fa      	bls.n	800d2aa <_free_r+0x4a>
 800d2b4:	6819      	ldr	r1, [r3, #0]
 800d2b6:	1858      	adds	r0, r3, r1
 800d2b8:	42a0      	cmp	r0, r4
 800d2ba:	d10b      	bne.n	800d2d4 <_free_r+0x74>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	4401      	add	r1, r0
 800d2c0:	1858      	adds	r0, r3, r1
 800d2c2:	4282      	cmp	r2, r0
 800d2c4:	6019      	str	r1, [r3, #0]
 800d2c6:	d1dd      	bne.n	800d284 <_free_r+0x24>
 800d2c8:	6810      	ldr	r0, [r2, #0]
 800d2ca:	6852      	ldr	r2, [r2, #4]
 800d2cc:	605a      	str	r2, [r3, #4]
 800d2ce:	4401      	add	r1, r0
 800d2d0:	6019      	str	r1, [r3, #0]
 800d2d2:	e7d7      	b.n	800d284 <_free_r+0x24>
 800d2d4:	d902      	bls.n	800d2dc <_free_r+0x7c>
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	e7d3      	b.n	800d284 <_free_r+0x24>
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	1821      	adds	r1, r4, r0
 800d2e0:	428a      	cmp	r2, r1
 800d2e2:	bf04      	itt	eq
 800d2e4:	6811      	ldreq	r1, [r2, #0]
 800d2e6:	6852      	ldreq	r2, [r2, #4]
 800d2e8:	6062      	str	r2, [r4, #4]
 800d2ea:	bf04      	itt	eq
 800d2ec:	1809      	addeq	r1, r1, r0
 800d2ee:	6021      	streq	r1, [r4, #0]
 800d2f0:	605c      	str	r4, [r3, #4]
 800d2f2:	e7c7      	b.n	800d284 <_free_r+0x24>
 800d2f4:	bd38      	pop	{r3, r4, r5, pc}
 800d2f6:	bf00      	nop
 800d2f8:	2000bf74 	.word	0x2000bf74

0800d2fc <_malloc_r>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	1ccd      	adds	r5, r1, #3
 800d300:	f025 0503 	bic.w	r5, r5, #3
 800d304:	3508      	adds	r5, #8
 800d306:	2d0c      	cmp	r5, #12
 800d308:	bf38      	it	cc
 800d30a:	250c      	movcc	r5, #12
 800d30c:	2d00      	cmp	r5, #0
 800d30e:	4606      	mov	r6, r0
 800d310:	db01      	blt.n	800d316 <_malloc_r+0x1a>
 800d312:	42a9      	cmp	r1, r5
 800d314:	d903      	bls.n	800d31e <_malloc_r+0x22>
 800d316:	230c      	movs	r3, #12
 800d318:	6033      	str	r3, [r6, #0]
 800d31a:	2000      	movs	r0, #0
 800d31c:	bd70      	pop	{r4, r5, r6, pc}
 800d31e:	f000 fbba 	bl	800da96 <__malloc_lock>
 800d322:	4a21      	ldr	r2, [pc, #132]	; (800d3a8 <_malloc_r+0xac>)
 800d324:	6814      	ldr	r4, [r2, #0]
 800d326:	4621      	mov	r1, r4
 800d328:	b991      	cbnz	r1, 800d350 <_malloc_r+0x54>
 800d32a:	4c20      	ldr	r4, [pc, #128]	; (800d3ac <_malloc_r+0xb0>)
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	b91b      	cbnz	r3, 800d338 <_malloc_r+0x3c>
 800d330:	4630      	mov	r0, r6
 800d332:	f000 facf 	bl	800d8d4 <_sbrk_r>
 800d336:	6020      	str	r0, [r4, #0]
 800d338:	4629      	mov	r1, r5
 800d33a:	4630      	mov	r0, r6
 800d33c:	f000 faca 	bl	800d8d4 <_sbrk_r>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d124      	bne.n	800d38e <_malloc_r+0x92>
 800d344:	230c      	movs	r3, #12
 800d346:	6033      	str	r3, [r6, #0]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 fba5 	bl	800da98 <__malloc_unlock>
 800d34e:	e7e4      	b.n	800d31a <_malloc_r+0x1e>
 800d350:	680b      	ldr	r3, [r1, #0]
 800d352:	1b5b      	subs	r3, r3, r5
 800d354:	d418      	bmi.n	800d388 <_malloc_r+0x8c>
 800d356:	2b0b      	cmp	r3, #11
 800d358:	d90f      	bls.n	800d37a <_malloc_r+0x7e>
 800d35a:	600b      	str	r3, [r1, #0]
 800d35c:	50cd      	str	r5, [r1, r3]
 800d35e:	18cc      	adds	r4, r1, r3
 800d360:	4630      	mov	r0, r6
 800d362:	f000 fb99 	bl	800da98 <__malloc_unlock>
 800d366:	f104 000b 	add.w	r0, r4, #11
 800d36a:	1d23      	adds	r3, r4, #4
 800d36c:	f020 0007 	bic.w	r0, r0, #7
 800d370:	1ac3      	subs	r3, r0, r3
 800d372:	d0d3      	beq.n	800d31c <_malloc_r+0x20>
 800d374:	425a      	negs	r2, r3
 800d376:	50e2      	str	r2, [r4, r3]
 800d378:	e7d0      	b.n	800d31c <_malloc_r+0x20>
 800d37a:	428c      	cmp	r4, r1
 800d37c:	684b      	ldr	r3, [r1, #4]
 800d37e:	bf16      	itet	ne
 800d380:	6063      	strne	r3, [r4, #4]
 800d382:	6013      	streq	r3, [r2, #0]
 800d384:	460c      	movne	r4, r1
 800d386:	e7eb      	b.n	800d360 <_malloc_r+0x64>
 800d388:	460c      	mov	r4, r1
 800d38a:	6849      	ldr	r1, [r1, #4]
 800d38c:	e7cc      	b.n	800d328 <_malloc_r+0x2c>
 800d38e:	1cc4      	adds	r4, r0, #3
 800d390:	f024 0403 	bic.w	r4, r4, #3
 800d394:	42a0      	cmp	r0, r4
 800d396:	d005      	beq.n	800d3a4 <_malloc_r+0xa8>
 800d398:	1a21      	subs	r1, r4, r0
 800d39a:	4630      	mov	r0, r6
 800d39c:	f000 fa9a 	bl	800d8d4 <_sbrk_r>
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d0cf      	beq.n	800d344 <_malloc_r+0x48>
 800d3a4:	6025      	str	r5, [r4, #0]
 800d3a6:	e7db      	b.n	800d360 <_malloc_r+0x64>
 800d3a8:	2000bf74 	.word	0x2000bf74
 800d3ac:	2000bf78 	.word	0x2000bf78

0800d3b0 <__ssputs_r>:
 800d3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b4:	688e      	ldr	r6, [r1, #8]
 800d3b6:	429e      	cmp	r6, r3
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	4690      	mov	r8, r2
 800d3be:	4699      	mov	r9, r3
 800d3c0:	d837      	bhi.n	800d432 <__ssputs_r+0x82>
 800d3c2:	898a      	ldrh	r2, [r1, #12]
 800d3c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3c8:	d031      	beq.n	800d42e <__ssputs_r+0x7e>
 800d3ca:	6825      	ldr	r5, [r4, #0]
 800d3cc:	6909      	ldr	r1, [r1, #16]
 800d3ce:	1a6f      	subs	r7, r5, r1
 800d3d0:	6965      	ldr	r5, [r4, #20]
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d3dc:	f109 0301 	add.w	r3, r9, #1
 800d3e0:	443b      	add	r3, r7
 800d3e2:	429d      	cmp	r5, r3
 800d3e4:	bf38      	it	cc
 800d3e6:	461d      	movcc	r5, r3
 800d3e8:	0553      	lsls	r3, r2, #21
 800d3ea:	d530      	bpl.n	800d44e <__ssputs_r+0x9e>
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f7ff ff85 	bl	800d2fc <_malloc_r>
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	b950      	cbnz	r0, 800d40c <__ssputs_r+0x5c>
 800d3f6:	230c      	movs	r3, #12
 800d3f8:	f8ca 3000 	str.w	r3, [sl]
 800d3fc:	89a3      	ldrh	r3, [r4, #12]
 800d3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	f04f 30ff 	mov.w	r0, #4294967295
 800d408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40c:	463a      	mov	r2, r7
 800d40e:	6921      	ldr	r1, [r4, #16]
 800d410:	f7fc f93e 	bl	8009690 <memcpy>
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d41a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d41e:	81a3      	strh	r3, [r4, #12]
 800d420:	6126      	str	r6, [r4, #16]
 800d422:	6165      	str	r5, [r4, #20]
 800d424:	443e      	add	r6, r7
 800d426:	1bed      	subs	r5, r5, r7
 800d428:	6026      	str	r6, [r4, #0]
 800d42a:	60a5      	str	r5, [r4, #8]
 800d42c:	464e      	mov	r6, r9
 800d42e:	454e      	cmp	r6, r9
 800d430:	d900      	bls.n	800d434 <__ssputs_r+0x84>
 800d432:	464e      	mov	r6, r9
 800d434:	4632      	mov	r2, r6
 800d436:	4641      	mov	r1, r8
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	f000 fb13 	bl	800da64 <memmove>
 800d43e:	68a3      	ldr	r3, [r4, #8]
 800d440:	1b9b      	subs	r3, r3, r6
 800d442:	60a3      	str	r3, [r4, #8]
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	441e      	add	r6, r3
 800d448:	6026      	str	r6, [r4, #0]
 800d44a:	2000      	movs	r0, #0
 800d44c:	e7dc      	b.n	800d408 <__ssputs_r+0x58>
 800d44e:	462a      	mov	r2, r5
 800d450:	f000 fb23 	bl	800da9a <_realloc_r>
 800d454:	4606      	mov	r6, r0
 800d456:	2800      	cmp	r0, #0
 800d458:	d1e2      	bne.n	800d420 <__ssputs_r+0x70>
 800d45a:	6921      	ldr	r1, [r4, #16]
 800d45c:	4650      	mov	r0, sl
 800d45e:	f7ff feff 	bl	800d260 <_free_r>
 800d462:	e7c8      	b.n	800d3f6 <__ssputs_r+0x46>

0800d464 <_svfiprintf_r>:
 800d464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d468:	461d      	mov	r5, r3
 800d46a:	898b      	ldrh	r3, [r1, #12]
 800d46c:	061f      	lsls	r7, r3, #24
 800d46e:	b09d      	sub	sp, #116	; 0x74
 800d470:	4680      	mov	r8, r0
 800d472:	460c      	mov	r4, r1
 800d474:	4616      	mov	r6, r2
 800d476:	d50f      	bpl.n	800d498 <_svfiprintf_r+0x34>
 800d478:	690b      	ldr	r3, [r1, #16]
 800d47a:	b96b      	cbnz	r3, 800d498 <_svfiprintf_r+0x34>
 800d47c:	2140      	movs	r1, #64	; 0x40
 800d47e:	f7ff ff3d 	bl	800d2fc <_malloc_r>
 800d482:	6020      	str	r0, [r4, #0]
 800d484:	6120      	str	r0, [r4, #16]
 800d486:	b928      	cbnz	r0, 800d494 <_svfiprintf_r+0x30>
 800d488:	230c      	movs	r3, #12
 800d48a:	f8c8 3000 	str.w	r3, [r8]
 800d48e:	f04f 30ff 	mov.w	r0, #4294967295
 800d492:	e0c8      	b.n	800d626 <_svfiprintf_r+0x1c2>
 800d494:	2340      	movs	r3, #64	; 0x40
 800d496:	6163      	str	r3, [r4, #20]
 800d498:	2300      	movs	r3, #0
 800d49a:	9309      	str	r3, [sp, #36]	; 0x24
 800d49c:	2320      	movs	r3, #32
 800d49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4a2:	2330      	movs	r3, #48	; 0x30
 800d4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4a8:	9503      	str	r5, [sp, #12]
 800d4aa:	f04f 0b01 	mov.w	fp, #1
 800d4ae:	4637      	mov	r7, r6
 800d4b0:	463d      	mov	r5, r7
 800d4b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d4b6:	b10b      	cbz	r3, 800d4bc <_svfiprintf_r+0x58>
 800d4b8:	2b25      	cmp	r3, #37	; 0x25
 800d4ba:	d13e      	bne.n	800d53a <_svfiprintf_r+0xd6>
 800d4bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800d4c0:	d00b      	beq.n	800d4da <_svfiprintf_r+0x76>
 800d4c2:	4653      	mov	r3, sl
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	f7ff ff71 	bl	800d3b0 <__ssputs_r>
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	f000 80a4 	beq.w	800d61c <_svfiprintf_r+0x1b8>
 800d4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d6:	4453      	add	r3, sl
 800d4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4da:	783b      	ldrb	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 809d 	beq.w	800d61c <_svfiprintf_r+0x1b8>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f6:	462f      	mov	r7, r5
 800d4f8:	2205      	movs	r2, #5
 800d4fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d4fe:	4850      	ldr	r0, [pc, #320]	; (800d640 <_svfiprintf_r+0x1dc>)
 800d500:	f7f2 fe6e 	bl	80001e0 <memchr>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	b9d0      	cbnz	r0, 800d53e <_svfiprintf_r+0xda>
 800d508:	06d9      	lsls	r1, r3, #27
 800d50a:	bf44      	itt	mi
 800d50c:	2220      	movmi	r2, #32
 800d50e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d512:	071a      	lsls	r2, r3, #28
 800d514:	bf44      	itt	mi
 800d516:	222b      	movmi	r2, #43	; 0x2b
 800d518:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d51c:	782a      	ldrb	r2, [r5, #0]
 800d51e:	2a2a      	cmp	r2, #42	; 0x2a
 800d520:	d015      	beq.n	800d54e <_svfiprintf_r+0xea>
 800d522:	9a07      	ldr	r2, [sp, #28]
 800d524:	462f      	mov	r7, r5
 800d526:	2000      	movs	r0, #0
 800d528:	250a      	movs	r5, #10
 800d52a:	4639      	mov	r1, r7
 800d52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d530:	3b30      	subs	r3, #48	; 0x30
 800d532:	2b09      	cmp	r3, #9
 800d534:	d94d      	bls.n	800d5d2 <_svfiprintf_r+0x16e>
 800d536:	b1b8      	cbz	r0, 800d568 <_svfiprintf_r+0x104>
 800d538:	e00f      	b.n	800d55a <_svfiprintf_r+0xf6>
 800d53a:	462f      	mov	r7, r5
 800d53c:	e7b8      	b.n	800d4b0 <_svfiprintf_r+0x4c>
 800d53e:	4a40      	ldr	r2, [pc, #256]	; (800d640 <_svfiprintf_r+0x1dc>)
 800d540:	1a80      	subs	r0, r0, r2
 800d542:	fa0b f000 	lsl.w	r0, fp, r0
 800d546:	4318      	orrs	r0, r3
 800d548:	9004      	str	r0, [sp, #16]
 800d54a:	463d      	mov	r5, r7
 800d54c:	e7d3      	b.n	800d4f6 <_svfiprintf_r+0x92>
 800d54e:	9a03      	ldr	r2, [sp, #12]
 800d550:	1d11      	adds	r1, r2, #4
 800d552:	6812      	ldr	r2, [r2, #0]
 800d554:	9103      	str	r1, [sp, #12]
 800d556:	2a00      	cmp	r2, #0
 800d558:	db01      	blt.n	800d55e <_svfiprintf_r+0xfa>
 800d55a:	9207      	str	r2, [sp, #28]
 800d55c:	e004      	b.n	800d568 <_svfiprintf_r+0x104>
 800d55e:	4252      	negs	r2, r2
 800d560:	f043 0302 	orr.w	r3, r3, #2
 800d564:	9207      	str	r2, [sp, #28]
 800d566:	9304      	str	r3, [sp, #16]
 800d568:	783b      	ldrb	r3, [r7, #0]
 800d56a:	2b2e      	cmp	r3, #46	; 0x2e
 800d56c:	d10c      	bne.n	800d588 <_svfiprintf_r+0x124>
 800d56e:	787b      	ldrb	r3, [r7, #1]
 800d570:	2b2a      	cmp	r3, #42	; 0x2a
 800d572:	d133      	bne.n	800d5dc <_svfiprintf_r+0x178>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	1d1a      	adds	r2, r3, #4
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	9203      	str	r2, [sp, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bfb8      	it	lt
 800d580:	f04f 33ff 	movlt.w	r3, #4294967295
 800d584:	3702      	adds	r7, #2
 800d586:	9305      	str	r3, [sp, #20]
 800d588:	4d2e      	ldr	r5, [pc, #184]	; (800d644 <_svfiprintf_r+0x1e0>)
 800d58a:	7839      	ldrb	r1, [r7, #0]
 800d58c:	2203      	movs	r2, #3
 800d58e:	4628      	mov	r0, r5
 800d590:	f7f2 fe26 	bl	80001e0 <memchr>
 800d594:	b138      	cbz	r0, 800d5a6 <_svfiprintf_r+0x142>
 800d596:	2340      	movs	r3, #64	; 0x40
 800d598:	1b40      	subs	r0, r0, r5
 800d59a:	fa03 f000 	lsl.w	r0, r3, r0
 800d59e:	9b04      	ldr	r3, [sp, #16]
 800d5a0:	4303      	orrs	r3, r0
 800d5a2:	3701      	adds	r7, #1
 800d5a4:	9304      	str	r3, [sp, #16]
 800d5a6:	7839      	ldrb	r1, [r7, #0]
 800d5a8:	4827      	ldr	r0, [pc, #156]	; (800d648 <_svfiprintf_r+0x1e4>)
 800d5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5ae:	2206      	movs	r2, #6
 800d5b0:	1c7e      	adds	r6, r7, #1
 800d5b2:	f7f2 fe15 	bl	80001e0 <memchr>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d038      	beq.n	800d62c <_svfiprintf_r+0x1c8>
 800d5ba:	4b24      	ldr	r3, [pc, #144]	; (800d64c <_svfiprintf_r+0x1e8>)
 800d5bc:	bb13      	cbnz	r3, 800d604 <_svfiprintf_r+0x1a0>
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	3307      	adds	r3, #7
 800d5c2:	f023 0307 	bic.w	r3, r3, #7
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	9303      	str	r3, [sp, #12]
 800d5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5cc:	444b      	add	r3, r9
 800d5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d0:	e76d      	b.n	800d4ae <_svfiprintf_r+0x4a>
 800d5d2:	fb05 3202 	mla	r2, r5, r2, r3
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	460f      	mov	r7, r1
 800d5da:	e7a6      	b.n	800d52a <_svfiprintf_r+0xc6>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	3701      	adds	r7, #1
 800d5e0:	9305      	str	r3, [sp, #20]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	250a      	movs	r5, #10
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ec:	3a30      	subs	r2, #48	; 0x30
 800d5ee:	2a09      	cmp	r2, #9
 800d5f0:	d903      	bls.n	800d5fa <_svfiprintf_r+0x196>
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d0c8      	beq.n	800d588 <_svfiprintf_r+0x124>
 800d5f6:	9105      	str	r1, [sp, #20]
 800d5f8:	e7c6      	b.n	800d588 <_svfiprintf_r+0x124>
 800d5fa:	fb05 2101 	mla	r1, r5, r1, r2
 800d5fe:	2301      	movs	r3, #1
 800d600:	4607      	mov	r7, r0
 800d602:	e7f0      	b.n	800d5e6 <_svfiprintf_r+0x182>
 800d604:	ab03      	add	r3, sp, #12
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	4622      	mov	r2, r4
 800d60a:	4b11      	ldr	r3, [pc, #68]	; (800d650 <_svfiprintf_r+0x1ec>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	4640      	mov	r0, r8
 800d610:	f7fc f8e6 	bl	80097e0 <_printf_float>
 800d614:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d618:	4681      	mov	r9, r0
 800d61a:	d1d6      	bne.n	800d5ca <_svfiprintf_r+0x166>
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	065b      	lsls	r3, r3, #25
 800d620:	f53f af35 	bmi.w	800d48e <_svfiprintf_r+0x2a>
 800d624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d626:	b01d      	add	sp, #116	; 0x74
 800d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62c:	ab03      	add	r3, sp, #12
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	4622      	mov	r2, r4
 800d632:	4b07      	ldr	r3, [pc, #28]	; (800d650 <_svfiprintf_r+0x1ec>)
 800d634:	a904      	add	r1, sp, #16
 800d636:	4640      	mov	r0, r8
 800d638:	f7fc fb88 	bl	8009d4c <_printf_i>
 800d63c:	e7ea      	b.n	800d614 <_svfiprintf_r+0x1b0>
 800d63e:	bf00      	nop
 800d640:	0800ddac 	.word	0x0800ddac
 800d644:	0800ddb2 	.word	0x0800ddb2
 800d648:	0800ddb6 	.word	0x0800ddb6
 800d64c:	080097e1 	.word	0x080097e1
 800d650:	0800d3b1 	.word	0x0800d3b1

0800d654 <__sfputc_r>:
 800d654:	6893      	ldr	r3, [r2, #8]
 800d656:	3b01      	subs	r3, #1
 800d658:	2b00      	cmp	r3, #0
 800d65a:	b410      	push	{r4}
 800d65c:	6093      	str	r3, [r2, #8]
 800d65e:	da08      	bge.n	800d672 <__sfputc_r+0x1e>
 800d660:	6994      	ldr	r4, [r2, #24]
 800d662:	42a3      	cmp	r3, r4
 800d664:	db01      	blt.n	800d66a <__sfputc_r+0x16>
 800d666:	290a      	cmp	r1, #10
 800d668:	d103      	bne.n	800d672 <__sfputc_r+0x1e>
 800d66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d66e:	f7fd bdb1 	b.w	800b1d4 <__swbuf_r>
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	1c58      	adds	r0, r3, #1
 800d676:	6010      	str	r0, [r2, #0]
 800d678:	7019      	strb	r1, [r3, #0]
 800d67a:	4608      	mov	r0, r1
 800d67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d680:	4770      	bx	lr

0800d682 <__sfputs_r>:
 800d682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d684:	4606      	mov	r6, r0
 800d686:	460f      	mov	r7, r1
 800d688:	4614      	mov	r4, r2
 800d68a:	18d5      	adds	r5, r2, r3
 800d68c:	42ac      	cmp	r4, r5
 800d68e:	d101      	bne.n	800d694 <__sfputs_r+0x12>
 800d690:	2000      	movs	r0, #0
 800d692:	e007      	b.n	800d6a4 <__sfputs_r+0x22>
 800d694:	463a      	mov	r2, r7
 800d696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69a:	4630      	mov	r0, r6
 800d69c:	f7ff ffda 	bl	800d654 <__sfputc_r>
 800d6a0:	1c43      	adds	r3, r0, #1
 800d6a2:	d1f3      	bne.n	800d68c <__sfputs_r+0xa>
 800d6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6a8 <_vfiprintf_r>:
 800d6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ac:	460c      	mov	r4, r1
 800d6ae:	b09d      	sub	sp, #116	; 0x74
 800d6b0:	4617      	mov	r7, r2
 800d6b2:	461d      	mov	r5, r3
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	b118      	cbz	r0, 800d6c0 <_vfiprintf_r+0x18>
 800d6b8:	6983      	ldr	r3, [r0, #24]
 800d6ba:	b90b      	cbnz	r3, 800d6c0 <_vfiprintf_r+0x18>
 800d6bc:	f7fe fd80 	bl	800c1c0 <__sinit>
 800d6c0:	4b7c      	ldr	r3, [pc, #496]	; (800d8b4 <_vfiprintf_r+0x20c>)
 800d6c2:	429c      	cmp	r4, r3
 800d6c4:	d158      	bne.n	800d778 <_vfiprintf_r+0xd0>
 800d6c6:	6874      	ldr	r4, [r6, #4]
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	0718      	lsls	r0, r3, #28
 800d6cc:	d55e      	bpl.n	800d78c <_vfiprintf_r+0xe4>
 800d6ce:	6923      	ldr	r3, [r4, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d05b      	beq.n	800d78c <_vfiprintf_r+0xe4>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d8:	2320      	movs	r3, #32
 800d6da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6de:	2330      	movs	r3, #48	; 0x30
 800d6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e4:	9503      	str	r5, [sp, #12]
 800d6e6:	f04f 0b01 	mov.w	fp, #1
 800d6ea:	46b8      	mov	r8, r7
 800d6ec:	4645      	mov	r5, r8
 800d6ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d6f2:	b10b      	cbz	r3, 800d6f8 <_vfiprintf_r+0x50>
 800d6f4:	2b25      	cmp	r3, #37	; 0x25
 800d6f6:	d154      	bne.n	800d7a2 <_vfiprintf_r+0xfa>
 800d6f8:	ebb8 0a07 	subs.w	sl, r8, r7
 800d6fc:	d00b      	beq.n	800d716 <_vfiprintf_r+0x6e>
 800d6fe:	4653      	mov	r3, sl
 800d700:	463a      	mov	r2, r7
 800d702:	4621      	mov	r1, r4
 800d704:	4630      	mov	r0, r6
 800d706:	f7ff ffbc 	bl	800d682 <__sfputs_r>
 800d70a:	3001      	adds	r0, #1
 800d70c:	f000 80c2 	beq.w	800d894 <_vfiprintf_r+0x1ec>
 800d710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d712:	4453      	add	r3, sl
 800d714:	9309      	str	r3, [sp, #36]	; 0x24
 800d716:	f898 3000 	ldrb.w	r3, [r8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f000 80ba 	beq.w	800d894 <_vfiprintf_r+0x1ec>
 800d720:	2300      	movs	r3, #0
 800d722:	f04f 32ff 	mov.w	r2, #4294967295
 800d726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	9307      	str	r3, [sp, #28]
 800d72e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d732:	931a      	str	r3, [sp, #104]	; 0x68
 800d734:	46a8      	mov	r8, r5
 800d736:	2205      	movs	r2, #5
 800d738:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d73c:	485e      	ldr	r0, [pc, #376]	; (800d8b8 <_vfiprintf_r+0x210>)
 800d73e:	f7f2 fd4f 	bl	80001e0 <memchr>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	bb78      	cbnz	r0, 800d7a6 <_vfiprintf_r+0xfe>
 800d746:	06d9      	lsls	r1, r3, #27
 800d748:	bf44      	itt	mi
 800d74a:	2220      	movmi	r2, #32
 800d74c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d750:	071a      	lsls	r2, r3, #28
 800d752:	bf44      	itt	mi
 800d754:	222b      	movmi	r2, #43	; 0x2b
 800d756:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d75a:	782a      	ldrb	r2, [r5, #0]
 800d75c:	2a2a      	cmp	r2, #42	; 0x2a
 800d75e:	d02a      	beq.n	800d7b6 <_vfiprintf_r+0x10e>
 800d760:	9a07      	ldr	r2, [sp, #28]
 800d762:	46a8      	mov	r8, r5
 800d764:	2000      	movs	r0, #0
 800d766:	250a      	movs	r5, #10
 800d768:	4641      	mov	r1, r8
 800d76a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d76e:	3b30      	subs	r3, #48	; 0x30
 800d770:	2b09      	cmp	r3, #9
 800d772:	d969      	bls.n	800d848 <_vfiprintf_r+0x1a0>
 800d774:	b360      	cbz	r0, 800d7d0 <_vfiprintf_r+0x128>
 800d776:	e024      	b.n	800d7c2 <_vfiprintf_r+0x11a>
 800d778:	4b50      	ldr	r3, [pc, #320]	; (800d8bc <_vfiprintf_r+0x214>)
 800d77a:	429c      	cmp	r4, r3
 800d77c:	d101      	bne.n	800d782 <_vfiprintf_r+0xda>
 800d77e:	68b4      	ldr	r4, [r6, #8]
 800d780:	e7a2      	b.n	800d6c8 <_vfiprintf_r+0x20>
 800d782:	4b4f      	ldr	r3, [pc, #316]	; (800d8c0 <_vfiprintf_r+0x218>)
 800d784:	429c      	cmp	r4, r3
 800d786:	bf08      	it	eq
 800d788:	68f4      	ldreq	r4, [r6, #12]
 800d78a:	e79d      	b.n	800d6c8 <_vfiprintf_r+0x20>
 800d78c:	4621      	mov	r1, r4
 800d78e:	4630      	mov	r0, r6
 800d790:	f7fd fd72 	bl	800b278 <__swsetup_r>
 800d794:	2800      	cmp	r0, #0
 800d796:	d09d      	beq.n	800d6d4 <_vfiprintf_r+0x2c>
 800d798:	f04f 30ff 	mov.w	r0, #4294967295
 800d79c:	b01d      	add	sp, #116	; 0x74
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a2:	46a8      	mov	r8, r5
 800d7a4:	e7a2      	b.n	800d6ec <_vfiprintf_r+0x44>
 800d7a6:	4a44      	ldr	r2, [pc, #272]	; (800d8b8 <_vfiprintf_r+0x210>)
 800d7a8:	1a80      	subs	r0, r0, r2
 800d7aa:	fa0b f000 	lsl.w	r0, fp, r0
 800d7ae:	4318      	orrs	r0, r3
 800d7b0:	9004      	str	r0, [sp, #16]
 800d7b2:	4645      	mov	r5, r8
 800d7b4:	e7be      	b.n	800d734 <_vfiprintf_r+0x8c>
 800d7b6:	9a03      	ldr	r2, [sp, #12]
 800d7b8:	1d11      	adds	r1, r2, #4
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	9103      	str	r1, [sp, #12]
 800d7be:	2a00      	cmp	r2, #0
 800d7c0:	db01      	blt.n	800d7c6 <_vfiprintf_r+0x11e>
 800d7c2:	9207      	str	r2, [sp, #28]
 800d7c4:	e004      	b.n	800d7d0 <_vfiprintf_r+0x128>
 800d7c6:	4252      	negs	r2, r2
 800d7c8:	f043 0302 	orr.w	r3, r3, #2
 800d7cc:	9207      	str	r2, [sp, #28]
 800d7ce:	9304      	str	r3, [sp, #16]
 800d7d0:	f898 3000 	ldrb.w	r3, [r8]
 800d7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7d6:	d10e      	bne.n	800d7f6 <_vfiprintf_r+0x14e>
 800d7d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d7de:	d138      	bne.n	800d852 <_vfiprintf_r+0x1aa>
 800d7e0:	9b03      	ldr	r3, [sp, #12]
 800d7e2:	1d1a      	adds	r2, r3, #4
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	9203      	str	r2, [sp, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	bfb8      	it	lt
 800d7ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7f0:	f108 0802 	add.w	r8, r8, #2
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	4d33      	ldr	r5, [pc, #204]	; (800d8c4 <_vfiprintf_r+0x21c>)
 800d7f8:	f898 1000 	ldrb.w	r1, [r8]
 800d7fc:	2203      	movs	r2, #3
 800d7fe:	4628      	mov	r0, r5
 800d800:	f7f2 fcee 	bl	80001e0 <memchr>
 800d804:	b140      	cbz	r0, 800d818 <_vfiprintf_r+0x170>
 800d806:	2340      	movs	r3, #64	; 0x40
 800d808:	1b40      	subs	r0, r0, r5
 800d80a:	fa03 f000 	lsl.w	r0, r3, r0
 800d80e:	9b04      	ldr	r3, [sp, #16]
 800d810:	4303      	orrs	r3, r0
 800d812:	f108 0801 	add.w	r8, r8, #1
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	f898 1000 	ldrb.w	r1, [r8]
 800d81c:	482a      	ldr	r0, [pc, #168]	; (800d8c8 <_vfiprintf_r+0x220>)
 800d81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d822:	2206      	movs	r2, #6
 800d824:	f108 0701 	add.w	r7, r8, #1
 800d828:	f7f2 fcda 	bl	80001e0 <memchr>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d037      	beq.n	800d8a0 <_vfiprintf_r+0x1f8>
 800d830:	4b26      	ldr	r3, [pc, #152]	; (800d8cc <_vfiprintf_r+0x224>)
 800d832:	bb1b      	cbnz	r3, 800d87c <_vfiprintf_r+0x1d4>
 800d834:	9b03      	ldr	r3, [sp, #12]
 800d836:	3307      	adds	r3, #7
 800d838:	f023 0307 	bic.w	r3, r3, #7
 800d83c:	3308      	adds	r3, #8
 800d83e:	9303      	str	r3, [sp, #12]
 800d840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d842:	444b      	add	r3, r9
 800d844:	9309      	str	r3, [sp, #36]	; 0x24
 800d846:	e750      	b.n	800d6ea <_vfiprintf_r+0x42>
 800d848:	fb05 3202 	mla	r2, r5, r2, r3
 800d84c:	2001      	movs	r0, #1
 800d84e:	4688      	mov	r8, r1
 800d850:	e78a      	b.n	800d768 <_vfiprintf_r+0xc0>
 800d852:	2300      	movs	r3, #0
 800d854:	f108 0801 	add.w	r8, r8, #1
 800d858:	9305      	str	r3, [sp, #20]
 800d85a:	4619      	mov	r1, r3
 800d85c:	250a      	movs	r5, #10
 800d85e:	4640      	mov	r0, r8
 800d860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d864:	3a30      	subs	r2, #48	; 0x30
 800d866:	2a09      	cmp	r2, #9
 800d868:	d903      	bls.n	800d872 <_vfiprintf_r+0x1ca>
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d0c3      	beq.n	800d7f6 <_vfiprintf_r+0x14e>
 800d86e:	9105      	str	r1, [sp, #20]
 800d870:	e7c1      	b.n	800d7f6 <_vfiprintf_r+0x14e>
 800d872:	fb05 2101 	mla	r1, r5, r1, r2
 800d876:	2301      	movs	r3, #1
 800d878:	4680      	mov	r8, r0
 800d87a:	e7f0      	b.n	800d85e <_vfiprintf_r+0x1b6>
 800d87c:	ab03      	add	r3, sp, #12
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	4622      	mov	r2, r4
 800d882:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <_vfiprintf_r+0x228>)
 800d884:	a904      	add	r1, sp, #16
 800d886:	4630      	mov	r0, r6
 800d888:	f7fb ffaa 	bl	80097e0 <_printf_float>
 800d88c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d890:	4681      	mov	r9, r0
 800d892:	d1d5      	bne.n	800d840 <_vfiprintf_r+0x198>
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	065b      	lsls	r3, r3, #25
 800d898:	f53f af7e 	bmi.w	800d798 <_vfiprintf_r+0xf0>
 800d89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d89e:	e77d      	b.n	800d79c <_vfiprintf_r+0xf4>
 800d8a0:	ab03      	add	r3, sp, #12
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <_vfiprintf_r+0x228>)
 800d8a8:	a904      	add	r1, sp, #16
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7fc fa4e 	bl	8009d4c <_printf_i>
 800d8b0:	e7ec      	b.n	800d88c <_vfiprintf_r+0x1e4>
 800d8b2:	bf00      	nop
 800d8b4:	0800dc60 	.word	0x0800dc60
 800d8b8:	0800ddac 	.word	0x0800ddac
 800d8bc:	0800dc80 	.word	0x0800dc80
 800d8c0:	0800dc40 	.word	0x0800dc40
 800d8c4:	0800ddb2 	.word	0x0800ddb2
 800d8c8:	0800ddb6 	.word	0x0800ddb6
 800d8cc:	080097e1 	.word	0x080097e1
 800d8d0:	0800d683 	.word	0x0800d683

0800d8d4 <_sbrk_r>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	4c06      	ldr	r4, [pc, #24]	; (800d8f0 <_sbrk_r+0x1c>)
 800d8d8:	2300      	movs	r3, #0
 800d8da:	4605      	mov	r5, r0
 800d8dc:	4608      	mov	r0, r1
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	f7f7 fb34 	bl	8004f4c <_sbrk>
 800d8e4:	1c43      	adds	r3, r0, #1
 800d8e6:	d102      	bne.n	800d8ee <_sbrk_r+0x1a>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	b103      	cbz	r3, 800d8ee <_sbrk_r+0x1a>
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	bd38      	pop	{r3, r4, r5, pc}
 800d8f0:	2000c4a4 	.word	0x2000c4a4

0800d8f4 <__sread>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8fc:	f000 f8f4 	bl	800dae8 <_read_r>
 800d900:	2800      	cmp	r0, #0
 800d902:	bfab      	itete	ge
 800d904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d906:	89a3      	ldrhlt	r3, [r4, #12]
 800d908:	181b      	addge	r3, r3, r0
 800d90a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d90e:	bfac      	ite	ge
 800d910:	6563      	strge	r3, [r4, #84]	; 0x54
 800d912:	81a3      	strhlt	r3, [r4, #12]
 800d914:	bd10      	pop	{r4, pc}

0800d916 <__swrite>:
 800d916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d91a:	461f      	mov	r7, r3
 800d91c:	898b      	ldrh	r3, [r1, #12]
 800d91e:	05db      	lsls	r3, r3, #23
 800d920:	4605      	mov	r5, r0
 800d922:	460c      	mov	r4, r1
 800d924:	4616      	mov	r6, r2
 800d926:	d505      	bpl.n	800d934 <__swrite+0x1e>
 800d928:	2302      	movs	r3, #2
 800d92a:	2200      	movs	r2, #0
 800d92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d930:	f000 f886 	bl	800da40 <_lseek_r>
 800d934:	89a3      	ldrh	r3, [r4, #12]
 800d936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d93e:	81a3      	strh	r3, [r4, #12]
 800d940:	4632      	mov	r2, r6
 800d942:	463b      	mov	r3, r7
 800d944:	4628      	mov	r0, r5
 800d946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d94a:	f000 b835 	b.w	800d9b8 <_write_r>

0800d94e <__sseek>:
 800d94e:	b510      	push	{r4, lr}
 800d950:	460c      	mov	r4, r1
 800d952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d956:	f000 f873 	bl	800da40 <_lseek_r>
 800d95a:	1c43      	adds	r3, r0, #1
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	bf15      	itete	ne
 800d960:	6560      	strne	r0, [r4, #84]	; 0x54
 800d962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d96a:	81a3      	strheq	r3, [r4, #12]
 800d96c:	bf18      	it	ne
 800d96e:	81a3      	strhne	r3, [r4, #12]
 800d970:	bd10      	pop	{r4, pc}

0800d972 <__sclose>:
 800d972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d976:	f000 b831 	b.w	800d9dc <_close_r>

0800d97a <strncmp>:
 800d97a:	b510      	push	{r4, lr}
 800d97c:	b16a      	cbz	r2, 800d99a <strncmp+0x20>
 800d97e:	3901      	subs	r1, #1
 800d980:	1884      	adds	r4, r0, r2
 800d982:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d986:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d103      	bne.n	800d996 <strncmp+0x1c>
 800d98e:	42a0      	cmp	r0, r4
 800d990:	d001      	beq.n	800d996 <strncmp+0x1c>
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1f5      	bne.n	800d982 <strncmp+0x8>
 800d996:	1a98      	subs	r0, r3, r2
 800d998:	bd10      	pop	{r4, pc}
 800d99a:	4610      	mov	r0, r2
 800d99c:	e7fc      	b.n	800d998 <strncmp+0x1e>

0800d99e <__ascii_wctomb>:
 800d99e:	b149      	cbz	r1, 800d9b4 <__ascii_wctomb+0x16>
 800d9a0:	2aff      	cmp	r2, #255	; 0xff
 800d9a2:	bf85      	ittet	hi
 800d9a4:	238a      	movhi	r3, #138	; 0x8a
 800d9a6:	6003      	strhi	r3, [r0, #0]
 800d9a8:	700a      	strbls	r2, [r1, #0]
 800d9aa:	f04f 30ff 	movhi.w	r0, #4294967295
 800d9ae:	bf98      	it	ls
 800d9b0:	2001      	movls	r0, #1
 800d9b2:	4770      	bx	lr
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4770      	bx	lr

0800d9b8 <_write_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4c07      	ldr	r4, [pc, #28]	; (800d9d8 <_write_r+0x20>)
 800d9bc:	4605      	mov	r5, r0
 800d9be:	4608      	mov	r0, r1
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	6022      	str	r2, [r4, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f7f7 fa6f 	bl	8004eaa <_write>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_write_r+0x1e>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_write_r+0x1e>
 800d9d4:	602b      	str	r3, [r5, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	2000c4a4 	.word	0x2000c4a4

0800d9dc <_close_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4c06      	ldr	r4, [pc, #24]	; (800d9f8 <_close_r+0x1c>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	f7f7 fa7b 	bl	8004ee2 <_close>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_close_r+0x1a>
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_close_r+0x1a>
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	2000c4a4 	.word	0x2000c4a4

0800d9fc <_fstat_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4c07      	ldr	r4, [pc, #28]	; (800da1c <_fstat_r+0x20>)
 800da00:	2300      	movs	r3, #0
 800da02:	4605      	mov	r5, r0
 800da04:	4608      	mov	r0, r1
 800da06:	4611      	mov	r1, r2
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	f7f7 fa76 	bl	8004efa <_fstat>
 800da0e:	1c43      	adds	r3, r0, #1
 800da10:	d102      	bne.n	800da18 <_fstat_r+0x1c>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	b103      	cbz	r3, 800da18 <_fstat_r+0x1c>
 800da16:	602b      	str	r3, [r5, #0]
 800da18:	bd38      	pop	{r3, r4, r5, pc}
 800da1a:	bf00      	nop
 800da1c:	2000c4a4 	.word	0x2000c4a4

0800da20 <_isatty_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4c06      	ldr	r4, [pc, #24]	; (800da3c <_isatty_r+0x1c>)
 800da24:	2300      	movs	r3, #0
 800da26:	4605      	mov	r5, r0
 800da28:	4608      	mov	r0, r1
 800da2a:	6023      	str	r3, [r4, #0]
 800da2c:	f7f7 fa75 	bl	8004f1a <_isatty>
 800da30:	1c43      	adds	r3, r0, #1
 800da32:	d102      	bne.n	800da3a <_isatty_r+0x1a>
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	b103      	cbz	r3, 800da3a <_isatty_r+0x1a>
 800da38:	602b      	str	r3, [r5, #0]
 800da3a:	bd38      	pop	{r3, r4, r5, pc}
 800da3c:	2000c4a4 	.word	0x2000c4a4

0800da40 <_lseek_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4c07      	ldr	r4, [pc, #28]	; (800da60 <_lseek_r+0x20>)
 800da44:	4605      	mov	r5, r0
 800da46:	4608      	mov	r0, r1
 800da48:	4611      	mov	r1, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	6022      	str	r2, [r4, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	f7f7 fa6e 	bl	8004f30 <_lseek>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d102      	bne.n	800da5e <_lseek_r+0x1e>
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	b103      	cbz	r3, 800da5e <_lseek_r+0x1e>
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	2000c4a4 	.word	0x2000c4a4

0800da64 <memmove>:
 800da64:	4288      	cmp	r0, r1
 800da66:	b510      	push	{r4, lr}
 800da68:	eb01 0302 	add.w	r3, r1, r2
 800da6c:	d807      	bhi.n	800da7e <memmove+0x1a>
 800da6e:	1e42      	subs	r2, r0, #1
 800da70:	4299      	cmp	r1, r3
 800da72:	d00a      	beq.n	800da8a <memmove+0x26>
 800da74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da78:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da7c:	e7f8      	b.n	800da70 <memmove+0xc>
 800da7e:	4283      	cmp	r3, r0
 800da80:	d9f5      	bls.n	800da6e <memmove+0xa>
 800da82:	1881      	adds	r1, r0, r2
 800da84:	1ad2      	subs	r2, r2, r3
 800da86:	42d3      	cmn	r3, r2
 800da88:	d100      	bne.n	800da8c <memmove+0x28>
 800da8a:	bd10      	pop	{r4, pc}
 800da8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da94:	e7f7      	b.n	800da86 <memmove+0x22>

0800da96 <__malloc_lock>:
 800da96:	4770      	bx	lr

0800da98 <__malloc_unlock>:
 800da98:	4770      	bx	lr

0800da9a <_realloc_r>:
 800da9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9c:	4607      	mov	r7, r0
 800da9e:	4614      	mov	r4, r2
 800daa0:	460e      	mov	r6, r1
 800daa2:	b921      	cbnz	r1, 800daae <_realloc_r+0x14>
 800daa4:	4611      	mov	r1, r2
 800daa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800daaa:	f7ff bc27 	b.w	800d2fc <_malloc_r>
 800daae:	b922      	cbnz	r2, 800daba <_realloc_r+0x20>
 800dab0:	f7ff fbd6 	bl	800d260 <_free_r>
 800dab4:	4625      	mov	r5, r4
 800dab6:	4628      	mov	r0, r5
 800dab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daba:	f000 f827 	bl	800db0c <_malloc_usable_size_r>
 800dabe:	42a0      	cmp	r0, r4
 800dac0:	d20f      	bcs.n	800dae2 <_realloc_r+0x48>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7ff fc19 	bl	800d2fc <_malloc_r>
 800daca:	4605      	mov	r5, r0
 800dacc:	2800      	cmp	r0, #0
 800dace:	d0f2      	beq.n	800dab6 <_realloc_r+0x1c>
 800dad0:	4631      	mov	r1, r6
 800dad2:	4622      	mov	r2, r4
 800dad4:	f7fb fddc 	bl	8009690 <memcpy>
 800dad8:	4631      	mov	r1, r6
 800dada:	4638      	mov	r0, r7
 800dadc:	f7ff fbc0 	bl	800d260 <_free_r>
 800dae0:	e7e9      	b.n	800dab6 <_realloc_r+0x1c>
 800dae2:	4635      	mov	r5, r6
 800dae4:	e7e7      	b.n	800dab6 <_realloc_r+0x1c>
	...

0800dae8 <_read_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4c07      	ldr	r4, [pc, #28]	; (800db08 <_read_r+0x20>)
 800daec:	4605      	mov	r5, r0
 800daee:	4608      	mov	r0, r1
 800daf0:	4611      	mov	r1, r2
 800daf2:	2200      	movs	r2, #0
 800daf4:	6022      	str	r2, [r4, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	f7f7 f9ba 	bl	8004e70 <_read>
 800dafc:	1c43      	adds	r3, r0, #1
 800dafe:	d102      	bne.n	800db06 <_read_r+0x1e>
 800db00:	6823      	ldr	r3, [r4, #0]
 800db02:	b103      	cbz	r3, 800db06 <_read_r+0x1e>
 800db04:	602b      	str	r3, [r5, #0]
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	2000c4a4 	.word	0x2000c4a4

0800db0c <_malloc_usable_size_r>:
 800db0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db10:	1f18      	subs	r0, r3, #4
 800db12:	2b00      	cmp	r3, #0
 800db14:	bfbc      	itt	lt
 800db16:	580b      	ldrlt	r3, [r1, r0]
 800db18:	18c0      	addlt	r0, r0, r3
 800db1a:	4770      	bx	lr

0800db1c <_init>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	bf00      	nop
 800db20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db22:	bc08      	pop	{r3}
 800db24:	469e      	mov	lr, r3
 800db26:	4770      	bx	lr

0800db28 <_fini>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	bf00      	nop
 800db2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2e:	bc08      	pop	{r3}
 800db30:	469e      	mov	lr, r3
 800db32:	4770      	bx	lr

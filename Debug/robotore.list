
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800f0c0  0800f0c0  0001f0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f458  0800f458  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f458  0800f458  0001f458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f460  0800f460  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f460  0800f460  0001f460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f464  0800f464  0001f464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f6b4  20000210  0800f678  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f8c4  0800f678  0002f8c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021840  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046d0  00000000  00000000  00041a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001930  00000000  00000000  00046150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  00047a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002464a  00000000  00000000  000491d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167e9  00000000  00000000  0006d81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb21b  00000000  00000000  00084003  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f21e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a74  00000000  00000000  0014f29c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0a4 	.word	0x0800f0a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f0a4 	.word	0x0800f0a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc05 	bl	80017b0 <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fb36 	bl	800975c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fb32 	bl	800975c <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001f484 	.word	0x2001f484
 8001110:	2001f444 	.word	0x2001f444
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <updateEncoderCnt+0x160>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <updateEncoderCnt+0x164>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <updateEncoderCnt+0x168>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <updateEncoderCnt+0x16c>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <updateEncoderCnt+0x170>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <updateEncoderCnt+0x164>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <updateEncoderCnt+0x170>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <updateEncoderCnt+0x174>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <updateEncoderCnt+0x16c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <updateEncoderCnt+0x174>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <updateEncoderCnt+0x164>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <updateEncoderCnt+0x16c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a338      	add	r3, pc, #224	; (adr r3, 8001278 <updateEncoderCnt+0x158>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <updateEncoderCnt+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <updateEncoderCnt+0x17c>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <updateEncoderCnt+0x178>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <updateEncoderCnt+0x17c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <updateEncoderCnt+0x180>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <updateEncoderCnt+0x178>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <updateEncoderCnt+0x180>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <updateEncoderCnt+0x184>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <updateEncoderCnt+0x178>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <updateEncoderCnt+0x184>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <updateEncoderCnt+0x188>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <updateEncoderCnt+0x178>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <updateEncoderCnt+0x188>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <updateEncoderCnt+0x18c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateEncoderCnt+0x178>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <updateEncoderCnt+0x18c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <updateEncoderCnt+0x190>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <updateEncoderCnt+0x178>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <updateEncoderCnt+0x190>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <updateEncoderCnt+0x194>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateEncoderCnt+0x178>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <updateEncoderCnt+0x194>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <updateEncoderCnt+0x160>)
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <updateEncoderCnt+0x168>)
 800126a:	f242 7210 	movw	r2, #10000	; 0x2710
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001270:	bf00      	nop
 8001272:	bd98      	pop	{r3, r4, r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	31e7b585 	.word	0x31e7b585
 800127c:	3f8e28c7 	.word	0x3f8e28c7
 8001280:	40000400 	.word	0x40000400
 8001284:	20000244 	.word	0x20000244
 8001288:	40000800 	.word	0x40000800
 800128c:	20000246 	.word	0x20000246
 8001290:	20000248 	.word	0x20000248
 8001294:	2000024a 	.word	0x2000024a
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000250 	.word	0x20000250
 80012a0:	20000254 	.word	0x20000254
 80012a4:	20000258 	.word	0x20000258
 80012a8:	2000025c 	.word	0x2000025c
 80012ac:	20000260 	.word	0x20000260
 80012b0:	20000264 	.word	0x20000264
 80012b4:	20000268 	.word	0x20000268

080012b8 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <getEncoderCnt+0x2c>)
 80012c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <getEncoderCnt+0x30>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000244 	.word	0x20000244
 80012e8:	20000246 	.word	0x20000246

080012ec <getTotalDistance>:

float getTotalDistance(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return total_distance;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <getTotalDistance+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000258 	.word	0x20000258

08001308 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getGoalJudgeDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getSideLineJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <setTotalDistance>:

void setTotalDistance(float distance)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <setTotalDistance+0x1c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000258 	.word	0x20000258

08001360 <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <getCrossLineIgnoreDistance+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000264 	.word	0x20000264

0800137c <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	total_distance = 0;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <clearTotalDistance+0x18>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000258 	.word	0x20000258

08001398 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearGoalJudgeDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearSideLineJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearCrossLineIgnoreDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearSideLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	return distance_10mm;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <getDistance10mm+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000250 	.word	0x20000250

08001424 <clearDistance10mm>:

void clearDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <clearDistance10mm+0x18>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000250 	.word	0x20000250

08001440 <getspeedcount>:

float getspeedcount(void){
 8001440:	b598      	push	{r3, r4, r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <getspeedcount+0x60>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	db16      	blt.n	8001486 <getspeedcount+0x46>
		speed_cnt += 0.1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <getspeedcount+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	a30d      	add	r3, pc, #52	; (adr r3, 8001498 <getspeedcount+0x58>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7fe ff10 	bl	800028c <__adddf3>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4618      	mov	r0, r3
 8001472:	4621      	mov	r1, r4
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <getspeedcount+0x64>)
 800147c:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <getspeedcount+0x60>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <getspeedcount+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
}
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	bd98      	pop	{r3, r4, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fb99999 	.word	0x3fb99999
 80014a0:	20000254 	.word	0x20000254
 80014a4:	2000026c 	.word	0x2000026c

080014a8 <clearspeedcount>:

void clearspeedcount(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <clearspeedcount+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <clearspeedcount+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000026c 	.word	0x2000026c
 80014c0:	3dcccccd 	.word	0x3dcccccd

080014c4 <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_Unlock+0x20>)
 80014cc:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <FLASH_Unlock+0x24>)
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	45670123 	.word	0x45670123
 80014e8:	cdef89ab 	.word	0xcdef89ab

080014ec <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <FLASH_Lock+0x1c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <FLASH_Lock+0x1c>)
 80014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	6113      	str	r3, [r2, #16]

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001510:	bf00      	nop
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <FLASH_WaitBusy+0x1c>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <FLASH_WaitBusy+0x6>
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8001536:	f006 f949 	bl	80077cc <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f006 f9ff 	bl	800795c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800155e:	f006 f957 	bl	8007810 <HAL_FLASH_Lock>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001578:	f7ff ffa4 	bl	80014c4 <FLASH_Unlock>

	FLASH_WaitBusy();
 800157c:	f7ff ffc6 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_Write_Word_F+0x50>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800159e:	f7ff ffb5 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80015ae:	f7ff ff9d 	bl	80014ec <FLASH_Lock>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <initGyro>:
int16_t xg_, yg_, zg_;
float omega;
float theta_10mm;
float ang_average = 0;

uint8_t initGyro(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 80015c6:	f001 fe4b 	bl	8003260 <IMU_init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f005 f865 	bl	80066a0 <HAL_Delay>

	return who_i_am;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <updateIMUValue>:

void updateIMUValue(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	read_gyro_data();
 80015e6:	f001 fe5f 	bl	80032a8 <read_gyro_data>
	zg_ = zg;
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <updateIMUValue+0x148>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <updateIMUValue+0x14c>)
 80015f2:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <updateIMUValue+0x148>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <updateIMUValue+0x150>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fa92 	bl	8000b58 <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <updateIMUValue+0x14c>)
 800163a:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <updateIMUValue+0x14c>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <updateIMUValue+0x154>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <updateIMUValue+0x14c>)
 8001660:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <updateIMUValue+0x14c>)
 8001664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <updateIMUValue+0x150>)
 800166a:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <updateIMUValue+0x14c>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	a322      	add	r3, pc, #136	; (adr r3, 8001710 <updateIMUValue+0x130>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	a320      	add	r3, pc, #128	; (adr r3, 8001718 <updateIMUValue+0x138>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <updateIMUValue+0x158>)
 80016ae:	f7ff f8cd 	bl	800084c <__aeabi_ddiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	f7ff fa95 	bl	8000be8 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <updateIMUValue+0x15c>)
 80016c2:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <updateIMUValue+0x160>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3d 	bl	8000548 <__aeabi_f2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <updateIMUValue+0x15c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a310      	add	r3, pc, #64	; (adr r3, 8001720 <updateIMUValue+0x140>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdcd 	bl	800028c <__adddf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	4618      	mov	r0, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <updateIMUValue+0x160>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	66666666 	.word	0x66666666
 8001714:	40306666 	.word	0x40306666
 8001718:	54411744 	.word	0x54411744
 800171c:	400921fb 	.word	0x400921fb
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	2001f5a8 	.word	0x2001f5a8
 800172c:	2001f4c4 	.word	0x2001f4c4
 8001730:	20000274 	.word	0x20000274
 8001734:	20000270 	.word	0x20000270
 8001738:	40668000 	.word	0x40668000
 800173c:	2001f4d0 	.word	0x2001f4d0
 8001740:	2001f4cc 	.word	0x2001f4cc

08001744 <IMU_average>:

void IMU_average(){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	float average = 0;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e015      	b.n	8001782 <IMU_average+0x3e>
		average = average+zg;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <IMU_average+0x60>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ed97 7a01 	vldr	s14, [r7, #4]
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f004 ff95 	bl	80066a0 <HAL_Delay>
		setLED2('A');
 8001776:	2041      	movs	r0, #65	; 0x41
 8001778:	f000 f904 	bl	8001984 <setLED2>
	for(int i=0;i<=1000;i++){
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001788:	dde5      	ble.n	8001756 <IMU_average+0x12>
	}
	ang_average = average/1000;
 800178a:	ed97 7a01 	vldr	s14, [r7, #4]
 800178e:	eddf 6a06 	vldr	s13, [pc, #24]	; 80017a8 <IMU_average+0x64>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <IMU_average+0x68>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2001f5a8 	.word	0x2001f5a8
 80017a8:	447a0000 	.word	0x447a0000
 80017ac:	20000270 	.word	0x20000270

080017b0 <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	return theta_10mm;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <getTheta10mm+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
}
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	2001f4cc 	.word	0x2001f4cc

080017cc <clearTheta10mm>:

void clearTheta10mm()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <clearTheta10mm+0x18>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2001f4cc 	.word	0x2001f4cc

080017e8 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b52      	cmp	r3, #82	; 0x52
 80017f6:	d112      	bne.n	800181e <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4860      	ldr	r0, [pc, #384]	; (8001980 <setLED+0x198>)
 8001800:	f006 fb80 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <setLED+0x198>)
 800180c:	f006 fb7a 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	485a      	ldr	r0, [pc, #360]	; (8001980 <setLED+0x198>)
 8001818:	f006 fb74 	bl	8007f04 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 800181c:	e0ab      	b.n	8001976 <setLED+0x18e>
	else if(color == 'G'){
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b47      	cmp	r3, #71	; 0x47
 8001822:	d112      	bne.n	800184a <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	4855      	ldr	r0, [pc, #340]	; (8001980 <setLED+0x198>)
 800182c:	f006 fb6a 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001836:	4852      	ldr	r0, [pc, #328]	; (8001980 <setLED+0x198>)
 8001838:	f006 fb64 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	484f      	ldr	r0, [pc, #316]	; (8001980 <setLED+0x198>)
 8001844:	f006 fb5e 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001848:	e095      	b.n	8001976 <setLED+0x18e>
	else if(color == 'B'){
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b42      	cmp	r3, #66	; 0x42
 800184e:	d112      	bne.n	8001876 <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	484a      	ldr	r0, [pc, #296]	; (8001980 <setLED+0x198>)
 8001858:	f006 fb54 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <setLED+0x198>)
 8001864:	f006 fb4e 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186e:	4844      	ldr	r0, [pc, #272]	; (8001980 <setLED+0x198>)
 8001870:	f006 fb48 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001874:	e07f      	b.n	8001976 <setLED+0x18e>
	else if(color == 'M'){
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b4d      	cmp	r3, #77	; 0x4d
 800187a:	d112      	bne.n	80018a2 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	483f      	ldr	r0, [pc, #252]	; (8001980 <setLED+0x198>)
 8001884:	f006 fb3e 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <setLED+0x198>)
 8001890:	f006 fb38 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	4839      	ldr	r0, [pc, #228]	; (8001980 <setLED+0x198>)
 800189c:	f006 fb32 	bl	8007f04 <HAL_GPIO_WritePin>
}
 80018a0:	e069      	b.n	8001976 <setLED+0x18e>
	else if(color == 'Y'){
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b59      	cmp	r3, #89	; 0x59
 80018a6:	d112      	bne.n	80018ce <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4834      	ldr	r0, [pc, #208]	; (8001980 <setLED+0x198>)
 80018b0:	f006 fb28 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ba:	4831      	ldr	r0, [pc, #196]	; (8001980 <setLED+0x198>)
 80018bc:	f006 fb22 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482e      	ldr	r0, [pc, #184]	; (8001980 <setLED+0x198>)
 80018c8:	f006 fb1c 	bl	8007f04 <HAL_GPIO_WritePin>
}
 80018cc:	e053      	b.n	8001976 <setLED+0x18e>
	else if(color == 'C'){
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b43      	cmp	r3, #67	; 0x43
 80018d2:	d112      	bne.n	80018fa <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <setLED+0x198>)
 80018dc:	f006 fb12 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <setLED+0x198>)
 80018e8:	f006 fb0c 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <setLED+0x198>)
 80018f4:	f006 fb06 	bl	8007f04 <HAL_GPIO_WritePin>
}
 80018f8:	e03d      	b.n	8001976 <setLED+0x18e>
	else if(color == 'W'){
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b57      	cmp	r3, #87	; 0x57
 80018fe:	d112      	bne.n	8001926 <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	481e      	ldr	r0, [pc, #120]	; (8001980 <setLED+0x198>)
 8001908:	f006 fafc 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <setLED+0x198>)
 8001914:	f006 faf6 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191e:	4818      	ldr	r0, [pc, #96]	; (8001980 <setLED+0x198>)
 8001920:	f006 faf0 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001924:	e027      	b.n	8001976 <setLED+0x18e>
	else if(color == 'N'){
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b4e      	cmp	r3, #78	; 0x4e
 800192a:	d112      	bne.n	8001952 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <setLED+0x198>)
 8001934:	f006 fae6 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <setLED+0x198>)
 8001940:	f006 fae0 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <setLED+0x198>)
 800194c:	f006 fada 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001950:	e011      	b.n	8001976 <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <setLED+0x198>)
 800195a:	f006 fad3 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <setLED+0x198>)
 8001966:	f006 facd 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <setLED+0x198>)
 8001972:	f006 fac7 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020800 	.word	0x40020800

08001984 <setLED2>:

void setLED2(uint8_t color2)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b52      	cmp	r3, #82	; 0x52
 8001992:	d124      	bne.n	80019de <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	489d      	ldr	r0, [pc, #628]	; (8001c10 <setLED2+0x28c>)
 800199c:	f006 fab2 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a6:	489b      	ldr	r0, [pc, #620]	; (8001c14 <setLED2+0x290>)
 80019a8:	f006 faac 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	4898      	ldr	r0, [pc, #608]	; (8001c14 <setLED2+0x290>)
 80019b4:	f006 faa6 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4895      	ldr	r0, [pc, #596]	; (8001c14 <setLED2+0x290>)
 80019c0:	f006 faa0 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	4892      	ldr	r0, [pc, #584]	; (8001c14 <setLED2+0x290>)
 80019cc:	f006 fa9a 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d6:	488f      	ldr	r0, [pc, #572]	; (8001c14 <setLED2+0x290>)
 80019d8:	f006 fa94 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 80019dc:	e113      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'G'){
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b47      	cmp	r3, #71	; 0x47
 80019e2:	d124      	bne.n	8001a2e <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ea:	4889      	ldr	r0, [pc, #548]	; (8001c10 <setLED2+0x28c>)
 80019ec:	f006 fa8a 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	4887      	ldr	r0, [pc, #540]	; (8001c14 <setLED2+0x290>)
 80019f8:	f006 fa84 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a02:	4884      	ldr	r0, [pc, #528]	; (8001c14 <setLED2+0x290>)
 8001a04:	f006 fa7e 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <setLED2+0x290>)
 8001a10:	f006 fa78 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	487e      	ldr	r0, [pc, #504]	; (8001c14 <setLED2+0x290>)
 8001a1c:	f006 fa72 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a26:	487b      	ldr	r0, [pc, #492]	; (8001c14 <setLED2+0x290>)
 8001a28:	f006 fa6c 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001a2c:	e0eb      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'B'){
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b42      	cmp	r3, #66	; 0x42
 8001a32:	d124      	bne.n	8001a7e <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3a:	4875      	ldr	r0, [pc, #468]	; (8001c10 <setLED2+0x28c>)
 8001a3c:	f006 fa62 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a46:	4873      	ldr	r0, [pc, #460]	; (8001c14 <setLED2+0x290>)
 8001a48:	f006 fa5c 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4870      	ldr	r0, [pc, #448]	; (8001c14 <setLED2+0x290>)
 8001a54:	f006 fa56 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5e:	486d      	ldr	r0, [pc, #436]	; (8001c14 <setLED2+0x290>)
 8001a60:	f006 fa50 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	486a      	ldr	r0, [pc, #424]	; (8001c14 <setLED2+0x290>)
 8001a6c:	f006 fa4a 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a76:	4867      	ldr	r0, [pc, #412]	; (8001c14 <setLED2+0x290>)
 8001a78:	f006 fa44 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001a7c:	e0c3      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'W'){
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b57      	cmp	r3, #87	; 0x57
 8001a82:	d124      	bne.n	8001ace <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8a:	4861      	ldr	r0, [pc, #388]	; (8001c10 <setLED2+0x28c>)
 8001a8c:	f006 fa3a 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a96:	485f      	ldr	r0, [pc, #380]	; (8001c14 <setLED2+0x290>)
 8001a98:	f006 fa34 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa2:	485c      	ldr	r0, [pc, #368]	; (8001c14 <setLED2+0x290>)
 8001aa4:	f006 fa2e 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	4859      	ldr	r0, [pc, #356]	; (8001c14 <setLED2+0x290>)
 8001ab0:	f006 fa28 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4856      	ldr	r0, [pc, #344]	; (8001c14 <setLED2+0x290>)
 8001abc:	f006 fa22 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	4853      	ldr	r0, [pc, #332]	; (8001c14 <setLED2+0x290>)
 8001ac8:	f006 fa1c 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001acc:	e09b      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'Y'){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b59      	cmp	r3, #89	; 0x59
 8001ad2:	d124      	bne.n	8001b1e <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ada:	484d      	ldr	r0, [pc, #308]	; (8001c10 <setLED2+0x28c>)
 8001adc:	f006 fa12 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	484b      	ldr	r0, [pc, #300]	; (8001c14 <setLED2+0x290>)
 8001ae8:	f006 fa0c 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4848      	ldr	r0, [pc, #288]	; (8001c14 <setLED2+0x290>)
 8001af4:	f006 fa06 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	4845      	ldr	r0, [pc, #276]	; (8001c14 <setLED2+0x290>)
 8001b00:	f006 fa00 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0a:	4842      	ldr	r0, [pc, #264]	; (8001c14 <setLED2+0x290>)
 8001b0c:	f006 f9fa 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b16:	483f      	ldr	r0, [pc, #252]	; (8001c14 <setLED2+0x290>)
 8001b18:	f006 f9f4 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001b1c:	e073      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'X'){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b58      	cmp	r3, #88	; 0x58
 8001b22:	d124      	bne.n	8001b6e <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2a:	4839      	ldr	r0, [pc, #228]	; (8001c10 <setLED2+0x28c>)
 8001b2c:	f006 f9ea 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	4837      	ldr	r0, [pc, #220]	; (8001c14 <setLED2+0x290>)
 8001b38:	f006 f9e4 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	4834      	ldr	r0, [pc, #208]	; (8001c14 <setLED2+0x290>)
 8001b44:	f006 f9de 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	4831      	ldr	r0, [pc, #196]	; (8001c14 <setLED2+0x290>)
 8001b50:	f006 f9d8 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	482e      	ldr	r0, [pc, #184]	; (8001c14 <setLED2+0x290>)
 8001b5c:	f006 f9d2 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b66:	482b      	ldr	r0, [pc, #172]	; (8001c14 <setLED2+0x290>)
 8001b68:	f006 f9cc 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001b6c:	e04b      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'A'){
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b41      	cmp	r3, #65	; 0x41
 8001b72:	d124      	bne.n	8001bbe <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7a:	4825      	ldr	r0, [pc, #148]	; (8001c10 <setLED2+0x28c>)
 8001b7c:	f006 f9c2 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <setLED2+0x290>)
 8001b88:	f006 f9bc 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4820      	ldr	r0, [pc, #128]	; (8001c14 <setLED2+0x290>)
 8001b94:	f006 f9b6 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <setLED2+0x290>)
 8001ba0:	f006 f9b0 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <setLED2+0x290>)
 8001bac:	f006 f9aa 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <setLED2+0x290>)
 8001bb8:	f006 f9a4 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001bbc:	e023      	b.n	8001c06 <setLED2+0x282>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <setLED2+0x28c>)
 8001bc6:	f006 f99d 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <setLED2+0x290>)
 8001bd2:	f006 f997 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <setLED2+0x290>)
 8001bde:	f006 f991 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <setLED2+0x290>)
 8001bea:	f006 f98b 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <setLED2+0x290>)
 8001bf6:	f006 f985 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <setLED2+0x290>)
 8001c02:	f006 f97f 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400

08001c18 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 4.5, kd = 0.045;//kp = 1.5, kd = 0.0015  //kp = 3.0, kd = 0.005
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <calculateLineFollowingTermFlip+0x138>)
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <calculateLineFollowingTermFlip+0x13c>)
 8001c24:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <calculateLineFollowingTermFlip+0x140>)
 8001c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 8081 	bne.w	8001d3a <calculateLineFollowingTermFlip+0x122>
		if(i_clear_flag == 1){
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <calculateLineFollowingTermFlip+0x144>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <calculateLineFollowingTermFlip+0x36>
			i = 0;
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <calculateLineFollowingTermFlip+0x148>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <calculateLineFollowingTermFlip+0x144>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );
 8001c4e:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c60:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c68:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c70:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c78:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <calculateLineFollowingTermFlip+0x150>)
 8001c80:	fb82 1203 	smull	r1, r2, r2, r3
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c96:	440b      	add	r3, r1
 8001c98:	4932      	ldr	r1, [pc, #200]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c9a:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	4930      	ldr	r1, [pc, #192]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001ca2:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	492e      	ldr	r1, [pc, #184]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001caa:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8001cae:	440b      	add	r3, r1
 8001cb0:	492c      	ldr	r1, [pc, #176]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001cb2:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	492b      	ldr	r1, [pc, #172]	; (8001d68 <calculateLineFollowingTermFlip+0x150>)
 8001cba:	fb81 0103 	smull	r0, r1, r1, r3
 8001cbe:	17db      	asrs	r3, r3, #31
 8001cc0:	1a5b      	subs	r3, r3, r1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	edc7 7a03 	vstr	s15, [r7, #12]

		p = kp * diff; //P制御
 8001cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <calculateLineFollowingTermFlip+0x154>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fc25 	bl	8000548 <__aeabi_f2d>
 8001cfe:	a312      	add	r3, pc, #72	; (adr r3, 8001d48 <calculateLineFollowingTermFlip+0x130>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fda2 	bl	800084c <__aeabi_ddiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe ff6a 	bl	8000be8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <calculateLineFollowingTermFlip+0x148>)
 8001d1a:	ed93 7a00 	vldr	s14, [r3]
 8001d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <calculateLineFollowingTermFlip+0x158>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <calculateLineFollowingTermFlip+0x154>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6013      	str	r3, [r2, #0]
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d4c:	3f50624d 	.word	0x3f50624d
 8001d50:	40900000 	.word	0x40900000
 8001d54:	3d3851ec 	.word	0x3d3851ec
 8001d58:	20000276 	.word	0x20000276
 8001d5c:	20000277 	.word	0x20000277
 8001d60:	20000284 	.word	0x20000284
 8001d64:	2001f3f0 	.word	0x2001f3f0
 8001d68:	2aaaaaab 	.word	0x2aaaaaab
 8001d6c:	20000280 	.word	0x20000280
 8001d70:	20000278 	.word	0x20000278

08001d74 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8001d7a:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <lineTraceFlip+0x150>)
 8001d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	f040 8097 	bne.w	8001eb4 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 8001d86:	f001 fb5f 	bl	8003448 <getVelocityControlTerm>
 8001d8a:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.8;
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <lineTraceFlip+0x154>)
 8001d90:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 8001d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	db02      	blt.n	8001daa <lineTraceFlip+0x36>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e010      	b.n	8001dcc <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 8001daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dae:	eef1 7a67 	vneg.f32	s15, s15
 8001db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d805      	bhi.n	8001dcc <lineTraceFlip+0x58>
 8001dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc4:	eef1 7a67 	vneg.f32	s15, s15
 8001dc8:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <lineTraceFlip+0x158>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ed0 <lineTraceFlip+0x15c>
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	db0d      	blt.n	8001e0a <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <lineTraceFlip+0x158>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ed0 <lineTraceFlip+0x15c>
 8001e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e04:	edc7 7a04 	vstr	s15, [r7, #16]
 8001e08:	e01a      	b.n	8001e40 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <lineTraceFlip+0x158>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ed4 <lineTraceFlip+0x160>
 8001e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d80c      	bhi.n	8001e40 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <lineTraceFlip+0x158>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ed4 <lineTraceFlip+0x160>
 8001e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3c:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 8001e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <lineTraceFlip+0x158>)
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <lineTraceFlip+0x158>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <lineTraceFlip+0x158>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <lineTraceFlip+0x158>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	edc7 7a01 	vstr	s15, [r7, #4]
		/*
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/

		mon_velo_term = velocity_control_term;
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <lineTraceFlip+0x164>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 8001e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	ee17 2a90 	vmov	r2, s15
 8001ea8:	b212      	sxth	r2, r2
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fd65 	bl	800497c <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001eb2:	e003      	b.n	8001ebc <lineTraceFlip+0x148>
		setMotor(0, 0);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f002 fd60 	bl	800497c <setMotor>
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000276 	.word	0x20000276
 8001ec8:	44a7e666 	.word	0x44a7e666
 8001ecc:	20000278 	.word	0x20000278
 8001ed0:	44d1e000 	.word	0x44d1e000
 8001ed4:	c4d1e000 	.word	0xc4d1e000
 8001ed8:	2001f4d4 	.word	0x2001f4d4

08001edc <startLineTrace>:

void startLineTrace()
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <startLineTrace+0x1c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <startLineTrace+0x20>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000276 	.word	0x20000276
 8001efc:	20000277 	.word	0x20000277

08001f00 <stopLineTrace>:

void stopLineTrace()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <stopLineTrace+0x1c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <stopLineTrace+0x20>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000276 	.word	0x20000276
 8001f20:	20000278 	.word	0x20000278

08001f24 <checkCourseOut>:

void checkCourseOut(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f3c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f44:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f4c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f54:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f5c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f64:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f6c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f74:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f7c:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f84:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <checkCourseOut+0xb8>)
 8001f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f90:	1052      	asrs	r2, r2, #1
 8001f92:	17db      	asrs	r3, r3, #31
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f9e:	d906      	bls.n	8001fae <checkCourseOut+0x8a>
		dark_cnt++;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <checkCourseOut+0xbc>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e002      	b.n	8001fb4 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	2b13      	cmp	r3, #19
 8001fba:	d903      	bls.n	8001fc4 <checkCourseOut+0xa0>
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <checkCourseOut+0xc0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001fc2:	e002      	b.n	8001fca <checkCourseOut+0xa6>
	else dark_flag = false;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <checkCourseOut+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2001f3f0 	.word	0x2001f3f0
 8001fdc:	2aaaaaab 	.word	0x2aaaaaab
 8001fe0:	20000288 	.word	0x20000288
 8001fe4:	2000027c 	.word	0x2000027c

08001fe8 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return dark_flag;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <getCouseOutFlag+0x14>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000027c 	.word	0x2000027c

08002000 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002004:	2202      	movs	r2, #2
 8002006:	4905      	ldr	r1, [pc, #20]	; (800201c <initADC+0x1c>)
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <initADC+0x20>)
 800200a:	f004 fbaf 	bl	800676c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800200e:	220c      	movs	r2, #12
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <initADC+0x24>)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <initADC+0x28>)
 8002014:	f004 fbaa 	bl	800676c <HAL_ADC_Start_DMA>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200002a4 	.word	0x200002a4
 8002020:	2001f528 	.word	0x2001f528
 8002024:	2000028c 	.word	0x2000028c
 8002028:	2001f4d8 	.word	0x2001f4d8

0800202c <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002030:	4bc9      	ldr	r3, [pc, #804]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002032:	885b      	ldrh	r3, [r3, #2]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	4bc7      	ldr	r3, [pc, #796]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800203e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002042:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002046:	4bc6      	ldr	r3, [pc, #792]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002048:	ed93 7a01 	vldr	s14, [r3, #4]
 800204c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002050:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002058:	4bc3      	ldr	r3, [pc, #780]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	b219      	sxth	r1, r3
 8002068:	4bc0      	ldr	r3, [pc, #768]	; (800236c <storeAnalogSensorBuffer+0x340>)
 800206a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800206e:	4bba      	ldr	r3, [pc, #744]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207a:	4bb8      	ldr	r3, [pc, #736]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002084:	4bb6      	ldr	r3, [pc, #728]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002096:	4bb4      	ldr	r3, [pc, #720]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b219      	sxth	r1, r3
 80020a6:	4bb2      	ldr	r3, [pc, #712]	; (8002370 <storeAnalogSensorBuffer+0x344>)
 80020a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80020ac:	4baa      	ldr	r3, [pc, #680]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80020ae:	889b      	ldrh	r3, [r3, #4]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b8:	4ba8      	ldr	r3, [pc, #672]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80020ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80020be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c2:	4ba7      	ldr	r3, [pc, #668]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80020c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80020d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d4:	4ba4      	ldr	r3, [pc, #656]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020de:	ee17 3a90 	vmov	r3, s15
 80020e2:	b219      	sxth	r1, r3
 80020e4:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <storeAnalogSensorBuffer+0x348>)
 80020e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80020ea:	4b9b      	ldr	r3, [pc, #620]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80020ec:	88db      	ldrh	r3, [r3, #6]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	4b99      	ldr	r3, [pc, #612]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80020f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80020fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002100:	4b97      	ldr	r3, [pc, #604]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002102:	ed93 7a03 	vldr	s14, [r3, #12]
 8002106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	4b95      	ldr	r3, [pc, #596]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	b219      	sxth	r1, r3
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <storeAnalogSensorBuffer+0x34c>)
 8002124:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002128:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 800212a:	891b      	ldrh	r3, [r3, #8]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <storeAnalogSensorBuffer+0x330>)
 8002136:	edd3 7a04 	vldr	s15, [r3, #16]
 800213a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002140:	ed93 7a04 	vldr	s14, [r3, #16]
 8002144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002148:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215a:	ee17 3a90 	vmov	r3, s15
 800215e:	b219      	sxth	r1, r3
 8002160:	4b86      	ldr	r3, [pc, #536]	; (800237c <storeAnalogSensorBuffer+0x350>)
 8002162:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002166:	4b7c      	ldr	r3, [pc, #496]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002168:	895b      	ldrh	r3, [r3, #10]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	4b7a      	ldr	r3, [pc, #488]	; (800235c <storeAnalogSensorBuffer+0x330>)
 8002174:	edd3 7a05 	vldr	s15, [r3, #20]
 8002178:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217c:	4b78      	ldr	r3, [pc, #480]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 800217e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002186:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800218a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002198:	ee17 3a90 	vmov	r3, s15
 800219c:	b219      	sxth	r1, r3
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <storeAnalogSensorBuffer+0x354>)
 80021a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80021b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80021b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021ba:	4b69      	ldr	r3, [pc, #420]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80021bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80021c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80021c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d6:	ee17 3a90 	vmov	r3, s15
 80021da:	b219      	sxth	r1, r3
 80021dc:	4b69      	ldr	r3, [pc, #420]	; (8002384 <storeAnalogSensorBuffer+0x358>)
 80021de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80021e4:	89db      	ldrh	r3, [r3, #14]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80021f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80021fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80021fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002202:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b219      	sxth	r1, r3
 800221a:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <storeAnalogSensorBuffer+0x35c>)
 800221c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002220:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002222:	8a1b      	ldrh	r3, [r3, #16]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800222e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002232:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002238:	ed93 7a08 	vldr	s14, [r3, #32]
 800223c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002240:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002252:	ee17 3a90 	vmov	r3, s15
 8002256:	b219      	sxth	r1, r3
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <storeAnalogSensorBuffer+0x360>)
 800225a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800225e:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002260:	8a5b      	ldrh	r3, [r3, #18]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800226c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002270:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002276:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800227a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002286:	4b38      	ldr	r3, [pc, #224]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	b219      	sxth	r1, r3
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <storeAnalogSensorBuffer+0x364>)
 8002298:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 800229e:	8a9b      	ldrh	r3, [r3, #20]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80022aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80022b4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80022c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ce:	ee17 3a90 	vmov	r3, s15
 80022d2:	b219      	sxth	r1, r3
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <storeAnalogSensorBuffer+0x368>)
 80022d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80022dc:	8adb      	ldrh	r3, [r3, #22]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80022e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80022f2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80022f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230c:	ee17 3a90 	vmov	r3, s15
 8002310:	b219      	sxth	r1, r3
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <storeAnalogSensorBuffer+0x36c>)
 8002314:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <storeAnalogSensorBuffer+0x370>)
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <storeAnalogSensorBuffer+0x374>)
 8002326:	edd3 7a01 	vldr	s15, [r3, #4]
 800232a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <storeAnalogSensorBuffer+0x378>)
 8002330:	ed93 7a01 	vldr	s14, [r3, #4]
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	b219      	sxth	r1, r3
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <storeAnalogSensorBuffer+0x37c>)
 8002352:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002356:	e029      	b.n	80023ac <storeAnalogSensorBuffer+0x380>
 8002358:	2000028c 	.word	0x2000028c
 800235c:	2001f3b0 	.word	0x2001f3b0
 8002360:	2001f414 	.word	0x2001f414
 8002364:	447a0000 	.word	0x447a0000
 8002368:	20000030 	.word	0x20000030
 800236c:	200002bc 	.word	0x200002bc
 8002370:	200002a8 	.word	0x200002a8
 8002374:	200002d0 	.word	0x200002d0
 8002378:	200002e4 	.word	0x200002e4
 800237c:	200002f8 	.word	0x200002f8
 8002380:	2000030c 	.word	0x2000030c
 8002384:	20000320 	.word	0x20000320
 8002388:	20000334 	.word	0x20000334
 800238c:	20000348 	.word	0x20000348
 8002390:	2000035c 	.word	0x2000035c
 8002394:	20000370 	.word	0x20000370
 8002398:	20000384 	.word	0x20000384
 800239c:	200002a4 	.word	0x200002a4
 80023a0:	2001f3a8 	.word	0x2001f3a8
 80023a4:	2001f3e8 	.word	0x2001f3e8
 80023a8:	20000398 	.word	0x20000398
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <storeAnalogSensorBuffer+0x3d4>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <storeAnalogSensorBuffer+0x3d8>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <storeAnalogSensorBuffer+0x3dc>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800240c <storeAnalogSensorBuffer+0x3e0>
 80023d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	b219      	sxth	r1, r3
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <storeAnalogSensorBuffer+0x3e8>)
 80023e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023f4:	701a      	strb	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	200002a4 	.word	0x200002a4
 8002404:	2001f3a8 	.word	0x2001f3a8
 8002408:	2001f3e8 	.word	0x2001f3e8
 800240c:	447a0000 	.word	0x447a0000
 8002410:	20000030 	.word	0x20000030
 8002414:	200003ac 	.word	0x200003ac

08002418 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800241e:	4bc9      	ldr	r3, [pc, #804]	; (8002744 <updateAnalogSensor+0x32c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242a:	4bc7      	ldr	r3, [pc, #796]	; (8002748 <updateAnalogSensor+0x330>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002434:	4bc5      	ldr	r3, [pc, #788]	; (800274c <updateAnalogSensor+0x334>)
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002750 <updateAnalogSensor+0x338>
 8002442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244a:	ee17 3a90 	vmov	r3, s15
 800244e:	b21a      	sxth	r2, r3
 8002450:	4bc0      	ldr	r3, [pc, #768]	; (8002754 <updateAnalogSensor+0x33c>)
 8002452:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002454:	4bbb      	ldr	r3, [pc, #748]	; (8002744 <updateAnalogSensor+0x32c>)
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002460:	4bb9      	ldr	r3, [pc, #740]	; (8002748 <updateAnalogSensor+0x330>)
 8002462:	edd3 7a01 	vldr	s15, [r3, #4]
 8002466:	ee77 6a67 	vsub.f32	s13, s14, s15
 800246a:	4bb8      	ldr	r3, [pc, #736]	; (800274c <updateAnalogSensor+0x334>)
 800246c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002474:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002750 <updateAnalogSensor+0x338>
 8002478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002480:	ee17 3a90 	vmov	r3, s15
 8002484:	b21a      	sxth	r2, r3
 8002486:	4bb3      	ldr	r3, [pc, #716]	; (8002754 <updateAnalogSensor+0x33c>)
 8002488:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800248a:	4bae      	ldr	r3, [pc, #696]	; (8002744 <updateAnalogSensor+0x32c>)
 800248c:	889b      	ldrh	r3, [r3, #4]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	4bac      	ldr	r3, [pc, #688]	; (8002748 <updateAnalogSensor+0x330>)
 8002498:	edd3 7a02 	vldr	s15, [r3, #8]
 800249c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024a0:	4baa      	ldr	r3, [pc, #680]	; (800274c <updateAnalogSensor+0x334>)
 80024a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024aa:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002750 <updateAnalogSensor+0x338>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b6:	ee17 3a90 	vmov	r3, s15
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	4ba5      	ldr	r3, [pc, #660]	; (8002754 <updateAnalogSensor+0x33c>)
 80024be:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <updateAnalogSensor+0x32c>)
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b9e      	ldr	r3, [pc, #632]	; (8002748 <updateAnalogSensor+0x330>)
 80024ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b9d      	ldr	r3, [pc, #628]	; (800274c <updateAnalogSensor+0x334>)
 80024d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002750 <updateAnalogSensor+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ec:	ee17 3a90 	vmov	r3, s15
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	4b98      	ldr	r3, [pc, #608]	; (8002754 <updateAnalogSensor+0x33c>)
 80024f4:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80024f6:	4b93      	ldr	r3, [pc, #588]	; (8002744 <updateAnalogSensor+0x32c>)
 80024f8:	891b      	ldrh	r3, [r3, #8]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	4b91      	ldr	r3, [pc, #580]	; (8002748 <updateAnalogSensor+0x330>)
 8002504:	edd3 7a04 	vldr	s15, [r3, #16]
 8002508:	ee77 6a67 	vsub.f32	s13, s14, s15
 800250c:	4b8f      	ldr	r3, [pc, #572]	; (800274c <updateAnalogSensor+0x334>)
 800250e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002516:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002750 <updateAnalogSensor+0x338>
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002522:	ee17 3a90 	vmov	r3, s15
 8002526:	b21a      	sxth	r2, r3
 8002528:	4b8a      	ldr	r3, [pc, #552]	; (8002754 <updateAnalogSensor+0x33c>)
 800252a:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800252c:	4b85      	ldr	r3, [pc, #532]	; (8002744 <updateAnalogSensor+0x32c>)
 800252e:	895b      	ldrh	r3, [r3, #10]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002538:	4b83      	ldr	r3, [pc, #524]	; (8002748 <updateAnalogSensor+0x330>)
 800253a:	edd3 7a05 	vldr	s15, [r3, #20]
 800253e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002542:	4b82      	ldr	r3, [pc, #520]	; (800274c <updateAnalogSensor+0x334>)
 8002544:	ed93 7a05 	vldr	s14, [r3, #20]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002750 <updateAnalogSensor+0x338>
 8002550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002558:	ee17 3a90 	vmov	r3, s15
 800255c:	b21a      	sxth	r2, r3
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <updateAnalogSensor+0x33c>)
 8002560:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <updateAnalogSensor+0x32c>)
 8002564:	899b      	ldrh	r3, [r3, #12]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <updateAnalogSensor+0x330>)
 8002570:	edd3 7a06 	vldr	s15, [r3, #24]
 8002574:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002578:	4b74      	ldr	r3, [pc, #464]	; (800274c <updateAnalogSensor+0x334>)
 800257a:	ed93 7a06 	vldr	s14, [r3, #24]
 800257e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002582:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002750 <updateAnalogSensor+0x338>
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258e:	ee17 3a90 	vmov	r3, s15
 8002592:	b21a      	sxth	r2, r3
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <updateAnalogSensor+0x33c>)
 8002596:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <updateAnalogSensor+0x32c>)
 800259a:	89db      	ldrh	r3, [r3, #14]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <updateAnalogSensor+0x330>)
 80025a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80025aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <updateAnalogSensor+0x334>)
 80025b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80025b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002750 <updateAnalogSensor+0x338>
 80025bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c4:	ee17 3a90 	vmov	r3, s15
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <updateAnalogSensor+0x33c>)
 80025cc:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <updateAnalogSensor+0x32c>)
 80025d0:	8a1b      	ldrh	r3, [r3, #16]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <updateAnalogSensor+0x330>)
 80025dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80025e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <updateAnalogSensor+0x334>)
 80025e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80025ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ee:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002750 <updateAnalogSensor+0x338>
 80025f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fa:	ee17 3a90 	vmov	r3, s15
 80025fe:	b21a      	sxth	r2, r3
 8002600:	4b54      	ldr	r3, [pc, #336]	; (8002754 <updateAnalogSensor+0x33c>)
 8002602:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <updateAnalogSensor+0x32c>)
 8002606:	8a5b      	ldrh	r3, [r3, #18]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <updateAnalogSensor+0x330>)
 8002612:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <updateAnalogSensor+0x334>)
 800261c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002624:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002750 <updateAnalogSensor+0x338>
 8002628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	b21a      	sxth	r2, r3
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <updateAnalogSensor+0x33c>)
 8002638:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <updateAnalogSensor+0x32c>)
 800263c:	8a9b      	ldrh	r3, [r3, #20]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <updateAnalogSensor+0x330>)
 8002648:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800264c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002650:	4b3e      	ldr	r3, [pc, #248]	; (800274c <updateAnalogSensor+0x334>)
 8002652:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002750 <updateAnalogSensor+0x338>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b21a      	sxth	r2, r3
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <updateAnalogSensor+0x33c>)
 800266e:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <updateAnalogSensor+0x32c>)
 8002672:	8adb      	ldrh	r3, [r3, #22]
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <updateAnalogSensor+0x330>)
 800267e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002682:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <updateAnalogSensor+0x334>)
 8002688:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800268c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002690:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002750 <updateAnalogSensor+0x338>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <updateAnalogSensor+0x33c>)
 80026a4:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <updateAnalogSensor+0x340>)
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <updateAnalogSensor+0x340>)
 80026b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a28      	ldr	r2, [pc, #160]	; (8002758 <updateAnalogSensor+0x340>)
 80026b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a26      	ldr	r2, [pc, #152]	; (8002758 <updateAnalogSensor+0x340>)
 80026c0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a24      	ldr	r2, [pc, #144]	; (8002758 <updateAnalogSensor+0x340>)
 80026c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <updateAnalogSensor+0x340>)
 80026d0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <updateAnalogSensor+0x340>)
 80026d8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <updateAnalogSensor+0x340>)
 80026e0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <updateAnalogSensor+0x340>)
 80026e8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <updateAnalogSensor+0x340>)
 80026f0:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <updateAnalogSensor+0x344>)
 80026f8:	fb82 1203 	smull	r1, r2, r2, r3
 80026fc:	1092      	asrs	r2, r2, #2
 80026fe:	17db      	asrs	r3, r3, #31
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b21a      	sxth	r2, r3
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <updateAnalogSensor+0x348>)
 8002706:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <updateAnalogSensor+0x34c>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	461a      	mov	r2, r3
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <updateAnalogSensor+0x34c>)
 8002712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002716:	4413      	add	r3, r2
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <updateAnalogSensor+0x34c>)
 800271a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800271e:	4413      	add	r3, r2
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <updateAnalogSensor+0x34c>)
 8002722:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002726:	4413      	add	r3, r2
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <updateAnalogSensor+0x34c>)
 800272a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800272e:	4413      	add	r3, r2
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <updateAnalogSensor+0x34c>)
 8002732:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002736:	4413      	add	r3, r2
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <updateAnalogSensor+0x34c>)
 800273a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800273e:	4413      	add	r3, r2
 8002740:	e012      	b.n	8002768 <updateAnalogSensor+0x350>
 8002742:	bf00      	nop
 8002744:	2000028c 	.word	0x2000028c
 8002748:	2001f3b0 	.word	0x2001f3b0
 800274c:	2001f414 	.word	0x2001f414
 8002750:	447a0000 	.word	0x447a0000
 8002754:	2001f3f0 	.word	0x2001f3f0
 8002758:	20000398 	.word	0x20000398
 800275c:	66666667 	.word	0x66666667
 8002760:	2001f394 	.word	0x2001f394
 8002764:	200003ac 	.word	0x200003ac
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <updateAnalogSensor+0x3d0>)
 800276a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800276e:	4413      	add	r3, r2
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <updateAnalogSensor+0x3d0>)
 8002772:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002776:	4413      	add	r3, r2
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <updateAnalogSensor+0x3d0>)
 800277a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800277e:	4413      	add	r3, r2
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <updateAnalogSensor+0x3d4>)
 8002782:	fb82 1203 	smull	r1, r2, r2, r3
 8002786:	1092      	asrs	r2, r2, #2
 8002788:	17db      	asrs	r3, r3, #31
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <updateAnalogSensor+0x3d8>)
 8002790:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	e01a      	b.n	80027ce <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <updateAnalogSensor+0x3dc>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a4:	db05      	blt.n	80027b2 <updateAnalogSensor+0x39a>
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	dc04      	bgt.n	80027c8 <updateAnalogSensor+0x3b0>
 80027be:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2100      	movs	r1, #0
 80027c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3301      	adds	r3, #1
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0b      	cmp	r3, #11
 80027d2:	dde1      	ble.n	8002798 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <updateAnalogSensor+0x3e0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]

}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200003ac 	.word	0x200003ac
 80027ec:	66666667 	.word	0x66666667
 80027f0:	2001f40c 	.word	0x2001f40c
 80027f4:	2001f3f0 	.word	0x2001f3f0
 80027f8:	20000030 	.word	0x20000030

080027fc <sensorCalibration>:

void sensorCalibration()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a0      	sub	sp, #128	; 0x80
 8002800:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002806:	2230      	movs	r2, #48	; 0x30
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f008 fa0d 	bl	800ac2a <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	2230      	movs	r2, #48	; 0x30
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f008 fa06 	bl	800ac2a <memset>
 800281e:	4bd8      	ldr	r3, [pc, #864]	; (8002b80 <sensorCalibration+0x384>)
 8002820:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002822:	2300      	movs	r3, #0
 8002824:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002828:	e026      	b.n	8002878 <sensorCalibration+0x7c>
		max_values[i] = 00;
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	4ad5      	ldr	r2, [pc, #852]	; (8002b84 <sensorCalibration+0x388>)
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 800283a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800283e:	4ad2      	ldr	r2, [pc, #840]	; (8002b88 <sensorCalibration+0x38c>)
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	4ad1      	ldr	r2, [pc, #836]	; (8002b8c <sensorCalibration+0x390>)
 8002846:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002848:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002852:	4413      	add	r3, r2
 8002854:	3b40      	subs	r3, #64	; 0x40
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 800285c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002866:	4413      	add	r3, r2
 8002868:	3b70      	subs	r3, #112	; 0x70
 800286a:	4ac8      	ldr	r2, [pc, #800]	; (8002b8c <sensorCalibration+0x390>)
 800286c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800286e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002872:	3301      	adds	r3, #1
 8002874:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002878:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800287c:	2b0b      	cmp	r3, #11
 800287e:	d9d4      	bls.n	800282a <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002886:	e013      	b.n	80028b0 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002888:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800288c:	4ac0      	ldr	r2, [pc, #768]	; (8002b90 <sensorCalibration+0x394>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002898:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289c:	4abd      	ldr	r2, [pc, #756]	; (8002b94 <sensorCalibration+0x398>)
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	4aba      	ldr	r2, [pc, #744]	; (8002b8c <sensorCalibration+0x390>)
 80028a4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80028a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d9e7      	bls.n	8002888 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 80028b8:	e0f5      	b.n	8002aa6 <sensorCalibration+0x2aa>

		setLED2('X');
 80028ba:	2058      	movs	r0, #88	; 0x58
 80028bc:	f7ff f862 	bl	8001984 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028c6:	e06e      	b.n	80029a6 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 80028c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028cc:	4ab2      	ldr	r2, [pc, #712]	; (8002b98 <sensorCalibration+0x39c>)
 80028ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028d6:	ee07 2a90 	vmov	s15, r2
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028e4:	4413      	add	r3, r2
 80028e6:	3b40      	subs	r3, #64	; 0x40
 80028e8:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 80028ec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028f0:	4aa9      	ldr	r2, [pc, #676]	; (8002b98 <sensorCalibration+0x39c>)
 80028f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028fa:	ee07 2a90 	vmov	s15, r2
 80028fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002908:	4413      	add	r3, r2
 800290a:	3b70      	subs	r3, #112	; 0x70
 800290c:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002910:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800291a:	4413      	add	r3, r2
 800291c:	3b40      	subs	r3, #64	; 0x40
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002926:	4a97      	ldr	r2, [pc, #604]	; (8002b84 <sensorCalibration+0x388>)
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd0d      	ble.n	8002956 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 800293a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800293e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002948:	440a      	add	r2, r1
 800294a:	3a40      	subs	r2, #64	; 0x40
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	498d      	ldr	r1, [pc, #564]	; (8002b84 <sensorCalibration+0x388>)
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002960:	4413      	add	r3, r2
 8002962:	3b70      	subs	r3, #112	; 0x70
 8002964:	ed93 7a00 	vldr	s14, [r3]
 8002968:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296c:	4a86      	ldr	r2, [pc, #536]	; (8002b88 <sensorCalibration+0x38c>)
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d50d      	bpl.n	800299c <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002980:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002984:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800298e:	440a      	add	r2, r1
 8002990:	3a70      	subs	r2, #112	; 0x70
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	497c      	ldr	r1, [pc, #496]	; (8002b88 <sensorCalibration+0x38c>)
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800299c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029aa:	2b0b      	cmp	r3, #11
 80029ac:	d98c      	bls.n	80028c8 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b4:	e073      	b.n	8002a9e <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 80029b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ba:	4a78      	ldr	r2, [pc, #480]	; (8002b9c <sensorCalibration+0x3a0>)
 80029bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c4:	ee07 2a90 	vmov	s15, r2
 80029c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029d2:	4413      	add	r3, r2
 80029d4:	3b78      	subs	r3, #120	; 0x78
 80029d6:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 80029da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <sensorCalibration+0x3a0>)
 80029e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029e8:	ee07 2a90 	vmov	s15, r2
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029f6:	4413      	add	r3, r2
 80029f8:	3b80      	subs	r3, #128	; 0x80
 80029fa:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 80029fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b78      	subs	r3, #120	; 0x78
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a14:	4a5e      	ldr	r2, [pc, #376]	; (8002b90 <sensorCalibration+0x394>)
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	dd10      	ble.n	8002a4a <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002a28:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a2c:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <sensorCalibration+0x3a0>)
 8002a2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a36:	ee07 2a90 	vmov	s15, r2
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <sensorCalibration+0x394>)
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	edc3 7a00 	vstr	s15, [r3]
 8002a48:	e024      	b.n	8002a94 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002a4a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a54:	4413      	add	r3, r2
 8002a56:	3b80      	subs	r3, #128	; 0x80
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <sensorCalibration+0x398>)
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d50f      	bpl.n	8002a94 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002a74:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <sensorCalibration+0x3a0>)
 8002a7a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a7e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a82:	ee07 2a90 	vmov	s15, r2
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <sensorCalibration+0x398>)
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a94:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002a9e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d987      	bls.n	80029b6 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002aa6:	204c      	movs	r0, #76	; 0x4c
 8002aa8:	f003 fc7a 	bl	80063a0 <getSwitchStatus>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f43f af03 	beq.w	80028ba <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002aba:	e01b      	b.n	8002af4 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002abc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <sensorCalibration+0x388>)
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ed93 7a00 	vldr	s14, [r3]
 8002aca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <sensorCalibration+0x38c>)
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <sensorCalibration+0x3a4>)
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002aea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002af4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002af8:	2b0b      	cmp	r3, #11
 8002afa:	d9df      	bls.n	8002abc <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002b02:	e010      	b.n	8002b26 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002b04:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002b08:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b0c:	491e      	ldr	r1, [pc, #120]	; (8002b88 <sensorCalibration+0x38c>)
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	440a      	add	r2, r1
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4923      	ldr	r1, [pc, #140]	; (8002ba4 <sensorCalibration+0x3a8>)
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b1c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002b26:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b2a:	2b0b      	cmp	r3, #11
 8002b2c:	d9ea      	bls.n	8002b04 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002b34:	e01b      	b.n	8002b6e <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002b36:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <sensorCalibration+0x394>)
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <sensorCalibration+0x398>)
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <sensorCalibration+0x3ac>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b64:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002b6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d9df      	bls.n	8002b36 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002b7c:	e027      	b.n	8002bce <sensorCalibration+0x3d2>
 8002b7e:	bf00      	nop
 8002b80:	447a0000 	.word	0x447a0000
 8002b84:	2001f570 	.word	0x2001f570
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	44bb8000 	.word	0x44bb8000
 8002b90:	2001f520 	.word	0x2001f520
 8002b94:	2001f5a0 	.word	0x2001f5a0
 8002b98:	2000028c 	.word	0x2000028c
 8002b9c:	200002a4 	.word	0x200002a4
 8002ba0:	2001f414 	.word	0x2001f414
 8002ba4:	2001f3b0 	.word	0x2001f3b0
 8002ba8:	2001f3e8 	.word	0x2001f3e8
		side_offset_values[i] = side_min_values[i];
 8002bac:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002bb0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bb4:	490a      	ldr	r1, [pc, #40]	; (8002be0 <sensorCalibration+0x3e4>)
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	440a      	add	r2, r1
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	4909      	ldr	r1, [pc, #36]	; (8002be4 <sensorCalibration+0x3e8>)
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002bce:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d9ea      	bls.n	8002bac <sensorCalibration+0x3b0>
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	3780      	adds	r7, #128	; 0x80
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2001f5a0 	.word	0x2001f5a0
 8002be4:	2001f3a8 	.word	0x2001f3a8

08002be8 <initLog>:
static float log_debug[12000];
static float log_distance[6000];
static float log_theta[6000];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <initLog+0x60>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <initLog+0x64>)
 8002bf2:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <initLog+0x68>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <initLog+0x6c>)
 8002bfa:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <initLog+0x70>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <initLog+0x74>)
 8002c02:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <initLog+0x78>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <initLog+0x7c>)
 8002c0a:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <initLog+0x80>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <initLog+0x84>)
 8002c12:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <initLog+0x60>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <initLog+0x88>)
 8002c1a:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <initLog+0x68>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <initLog+0x8c>)
 8002c22:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <initLog+0x70>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <initLog+0x90>)
 8002c2a:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <initLog+0x78>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <initLog+0x94>)
 8002c32:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <initLog+0x80>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <initLog+0x98>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	0800f104 	.word	0x0800f104
 8002c4c:	2001f390 	.word	0x2001f390
 8002c50:	0800f108 	.word	0x0800f108
 8002c54:	2001f3e4 	.word	0x2001f3e4
 8002c58:	0800f10c 	.word	0x0800f10c
 8002c5c:	2001f3a0 	.word	0x2001f3a0
 8002c60:	0800f110 	.word	0x0800f110
 8002c64:	2001f38c 	.word	0x2001f38c
 8002c68:	0800f114 	.word	0x0800f114
 8002c6c:	2001f39c 	.word	0x2001f39c
 8002c70:	2001f398 	.word	0x2001f398
 8002c74:	2001f3a4 	.word	0x2001f3a4
 8002c78:	2001f410 	.word	0x2001f410
 8002c7c:	2001f408 	.word	0x2001f408
 8002c80:	2001f3e0 	.word	0x2001f3e0

08002c84 <saveDistance>:

void saveDistance(float distance){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <saveDistance+0x2c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fc68 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <saveDistance+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <saveDistance+0x2c>)
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2001f390 	.word	0x2001f390

08002cb4 <saveTheta>:

void saveTheta(float theta){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <saveTheta+0x2c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fc50 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <saveTheta+0x2c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <saveTheta+0x2c>)
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2001f3e4 	.word	0x2001f3e4

08002ce4 <saveCross>:

void saveCross(float cross){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <saveCross+0x2c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc38 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <saveCross+0x2c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <saveCross+0x2c>)
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2001f3a0 	.word	0x2001f3a0

08002d14 <saveSide>:

void saveSide(float side){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <saveSide+0x2c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fc20 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <saveSide+0x2c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3304      	adds	r3, #4
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <saveSide+0x2c>)
 8002d34:	6013      	str	r3, [r2, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2001f38c 	.word	0x2001f38c

08002d44 <saveDebug>:

void saveDebug(float value){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <saveDebug+0x2c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fc08 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <saveDebug+0x2c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <saveDebug+0x2c>)
 8002d64:	6013      	str	r3, [r2, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2001f39c 	.word	0x2001f39c

08002d74 <ereaseLog>:


void ereaseLog(){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8002d78:	2007      	movs	r0, #7
 8002d7a:	f7fe fbd7 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8002d7e:	2008      	movs	r0, #8
 8002d80:	f7fe fbd4 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8002d84:	2009      	movs	r0, #9
 8002d86:	f7fe fbd1 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f7fe fbce 	bl	800152c <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002d90:	200b      	movs	r0, #11
 8002d92:	f7fe fbcb 	bl	800152c <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <ereaseLog+0x50>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <ereaseLog+0x54>)
 8002d9c:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <ereaseLog+0x58>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <ereaseLog+0x5c>)
 8002da4:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <ereaseLog+0x60>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <ereaseLog+0x64>)
 8002dac:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <ereaseLog+0x68>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <ereaseLog+0x6c>)
 8002db4:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <ereaseLog+0x70>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <ereaseLog+0x74>)
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800f104 	.word	0x0800f104
 8002dc8:	2001f390 	.word	0x2001f390
 8002dcc:	0800f108 	.word	0x0800f108
 8002dd0:	2001f3e4 	.word	0x2001f3e4
 8002dd4:	0800f10c 	.word	0x0800f10c
 8002dd8:	2001f3a0 	.word	0x2001f3a0
 8002ddc:	0800f110 	.word	0x0800f110
 8002de0:	2001f38c 	.word	0x2001f38c
 8002de4:	0800f114 	.word	0x0800f114
 8002de8:	2001f39c 	.word	0x2001f39c

08002dec <ereaseDebugLog>:

void ereaseDebugLog(){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002df0:	200b      	movs	r0, #11
 8002df2:	f7fe fb9b 	bl	800152c <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <ereaseDebugLog+0x18>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <ereaseDebugLog+0x1c>)
 8002dfc:	6013      	str	r3, [r2, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	0800f114 	.word	0x0800f114
 8002e08:	2001f39c 	.word	0x2001f39c

08002e0c <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <getDistanceLogSize+0x14>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20017de0 	.word	0x20017de0

08002e24 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <getCrossLogSize+0x14>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20017de4 	.word	0x20017de4

08002e3c <getSideLogSize>:

uint16_t getSideLogSize(){
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	return log_side_cnt;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <getSideLogSize+0x14>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20017de6 	.word	0x20017de6

08002e54 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <getDebugLogSize+0x14>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20017de8 	.word	0x20017de8

08002e6c <loadDistance>:


void loadDistance(){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <loadDistance+0x6c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <loadDistance+0x70>)
 8002e7c:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <loadDistance+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <loadDistance+0x70>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4915      	ldr	r1, [pc, #84]	; (8002ee4 <loadDistance+0x78>)
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <loadDistance+0x78>)
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eef4 7a67 	vcmp.f32	s15, s15
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d60e      	bvs.n	8002eca <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <loadDistance+0x74>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <loadDistance+0x74>)
 8002eb6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <loadDistance+0x70>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <loadDistance+0x70>)
 8002ec0:	6013      	str	r3, [r2, #0]
		i++;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 8002ec8:	e7dc      	b.n	8002e84 <loadDistance+0x18>
			break;
 8002eca:	bf00      	nop
	}
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	0800f104 	.word	0x0800f104
 8002edc:	2001f398 	.word	0x2001f398
 8002ee0:	20017de0 	.word	0x20017de0
 8002ee4:	2000c260 	.word	0x2000c260

08002ee8 <loadTheta>:

void loadTheta(){
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <loadTheta+0x6c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <loadTheta+0x70>)
 8002ef8:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <loadTheta+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <loadTheta+0x70>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4915      	ldr	r1, [pc, #84]	; (8002f60 <loadTheta+0x78>)
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <loadTheta+0x78>)
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	eef4 7a67 	vcmp.f32	s15, s15
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d60e      	bvs.n	8002f46 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <loadTheta+0x74>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <loadTheta+0x74>)
 8002f32:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <loadTheta+0x70>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <loadTheta+0x70>)
 8002f3c:	6013      	str	r3, [r2, #0]
		i++;
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	3301      	adds	r3, #1
 8002f42:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8002f44:	e7dc      	b.n	8002f00 <loadTheta+0x18>
			break;
 8002f46:	bf00      	nop
	}
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	0800f108 	.word	0x0800f108
 8002f58:	2001f3a4 	.word	0x2001f3a4
 8002f5c:	20017de2 	.word	0x20017de2
 8002f60:	20012020 	.word	0x20012020

08002f64 <loadCross>:

void loadCross(){
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <loadCross+0x6c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <loadCross+0x70>)
 8002f74:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <loadCross+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <loadCross+0x70>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	4915      	ldr	r1, [pc, #84]	; (8002fdc <loadCross+0x78>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <loadCross+0x78>)
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eef4 7a67 	vcmp.f32	s15, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d60e      	bvs.n	8002fc2 <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <loadCross+0x74>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <loadCross+0x74>)
 8002fae:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <loadCross+0x70>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <loadCross+0x70>)
 8002fb8:	6013      	str	r3, [r2, #0]
		i++;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 8002fc0:	e7dc      	b.n	8002f7c <loadCross+0x18>
			break;
 8002fc2:	bf00      	nop
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	0800f10c 	.word	0x0800f10c
 8002fd4:	2001f410 	.word	0x2001f410
 8002fd8:	20017de4 	.word	0x20017de4
 8002fdc:	200003c0 	.word	0x200003c0

08002fe0 <loadSide>:

void loadSide(){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <loadSide+0x6c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <loadSide+0x70>)
 8002ff0:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <loadSide+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <loadSide+0x70>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	4915      	ldr	r1, [pc, #84]	; (8003058 <loadSide+0x78>)
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <loadSide+0x78>)
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	eef4 7a67 	vcmp.f32	s15, s15
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d60e      	bvs.n	800303e <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <loadSide+0x74>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <loadSide+0x74>)
 800302a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <loadSide+0x70>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3304      	adds	r3, #4
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <loadSide+0x70>)
 8003034:	6013      	str	r3, [r2, #0]
		i++;
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	3301      	adds	r3, #1
 800303a:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 800303c:	e7dc      	b.n	8002ff8 <loadSide+0x18>
			break;
 800303e:	bf00      	nop
	}
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	0800f110 	.word	0x0800f110
 8003050:	2001f408 	.word	0x2001f408
 8003054:	20017de6 	.word	0x20017de6
 8003058:	20000550 	.word	0x20000550

0800305c <loadDebug>:

void loadDebug(){
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <loadDebug+0x6c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <loadDebug+0x70>)
 800306c:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <loadDebug+0x74>)
 8003070:	2200      	movs	r2, #0
 8003072:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <loadDebug+0x70>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	4915      	ldr	r1, [pc, #84]	; (80030d4 <loadDebug+0x78>)
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <loadDebug+0x78>)
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eef4 7a67 	vcmp.f32	s15, s15
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d60e      	bvs.n	80030ba <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <loadDebug+0x74>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <loadDebug+0x74>)
 80030a6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <loadDebug+0x70>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <loadDebug+0x70>)
 80030b0:	6013      	str	r3, [r2, #0]
		i++;
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	3301      	adds	r3, #1
 80030b6:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80030b8:	e7dc      	b.n	8003074 <loadDebug+0x18>
			break;
 80030ba:	bf00      	nop
	}
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	0800f114 	.word	0x0800f114
 80030cc:	2001f3e0 	.word	0x2001f3e0
 80030d0:	20017de8 	.word	0x20017de8
 80030d4:	200006e0 	.word	0x200006e0

080030d8 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
	return log_distance;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <getDistanceArrayPointer+0x10>)
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	2000c260 	.word	0x2000c260

080030ec <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	return log_theta;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <getThetaArrayPointer+0x10>)
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20012020 	.word	0x20012020

08003100 <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <getDistanceLog+0x28>)
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	ee07 3a90 	vmov	s15, r3
}
 8003118:	eeb0 0a67 	vmov.f32	s0, s15
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000c260 	.word	0x2000c260

0800312c <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <getCrossLog+0x28>)
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
}
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200003c0 	.word	0x200003c0

08003158 <getSideLog>:

float getSideLog(uint16_t idx){
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <getSideLog+0x28>)
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	ee07 3a90 	vmov	s15, r3
}
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000550 	.word	0x20000550

08003184 <getDebugLog>:

float getDebugLog(uint16_t idx){
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	4a06      	ldr	r2, [pc, #24]	; (80031ac <getDebugLog+0x28>)
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	ee07 3a90 	vmov	s15, r3
}
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200006e0 	.word	0x200006e0

080031b0 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80031c4:	2200      	movs	r2, #0
 80031c6:	2104      	movs	r1, #4
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <read_byte+0x50>)
 80031ca:	f004 fe9b 	bl	8007f04 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80031ce:	f107 010f 	add.w	r1, r7, #15
 80031d2:	2364      	movs	r3, #100	; 0x64
 80031d4:	2201      	movs	r2, #1
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <read_byte+0x54>)
 80031d8:	f005 fc86 	bl	8008ae8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80031dc:	f107 010e 	add.w	r1, r7, #14
 80031e0:	2364      	movs	r3, #100	; 0x64
 80031e2:	2201      	movs	r2, #1
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <read_byte+0x54>)
 80031e6:	f005 fdb3 	bl	8008d50 <HAL_SPI_Receive>
		CS_SET;
 80031ea:	2201      	movs	r2, #1
 80031ec:	2104      	movs	r1, #4
 80031ee:	4804      	ldr	r0, [pc, #16]	; (8003200 <read_byte+0x50>)
 80031f0:	f004 fe88 	bl	8007f04 <HAL_GPIO_WritePin>

	return val;
 80031f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40020c00 	.word	0x40020c00
 8003204:	2001f66c 	.word	0x2001f66c

08003208 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	460a      	mov	r2, r1
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	4613      	mov	r3, r2
 8003216:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321e:	b2db      	uxtb	r3, r3
 8003220:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8003222:	2200      	movs	r2, #0
 8003224:	2104      	movs	r1, #4
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <write_byte+0x50>)
 8003228:	f004 fe6c 	bl	8007f04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800322c:	f107 010f 	add.w	r1, r7, #15
 8003230:	2364      	movs	r3, #100	; 0x64
 8003232:	2201      	movs	r2, #1
 8003234:	4809      	ldr	r0, [pc, #36]	; (800325c <write_byte+0x54>)
 8003236:	f005 fc57 	bl	8008ae8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800323a:	1db9      	adds	r1, r7, #6
 800323c:	2364      	movs	r3, #100	; 0x64
 800323e:	2201      	movs	r2, #1
 8003240:	4806      	ldr	r0, [pc, #24]	; (800325c <write_byte+0x54>)
 8003242:	f005 fd85 	bl	8008d50 <HAL_SPI_Receive>
	CS_SET;
 8003246:	2201      	movs	r2, #1
 8003248:	2104      	movs	r1, #4
 800324a:	4803      	ldr	r0, [pc, #12]	; (8003258 <write_byte+0x50>)
 800324c:	f004 fe5a 	bl	8007f04 <HAL_GPIO_WritePin>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40020c00 	.word	0x40020c00
 800325c:	2001f66c 	.word	0x2001f66c

08003260 <IMU_init>:

uint8_t IMU_init() {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 800326a:	2075      	movs	r0, #117	; 0x75
 800326c:	f7ff ffa0 	bl	80031b0 <read_byte>
 8003270:	4603      	mov	r3, r0
 8003272:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	2b70      	cmp	r3, #112	; 0x70
 8003278:	d110      	bne.n	800329c <IMU_init+0x3c>
		ret = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800327e:	2100      	movs	r1, #0
 8003280:	206b      	movs	r0, #107	; 0x6b
 8003282:	f7ff ffc1 	bl	8003208 <write_byte>
		HAL_Delay(100);
 8003286:	2064      	movs	r0, #100	; 0x64
 8003288:	f003 fa0a 	bl	80066a0 <HAL_Delay>
		write_byte(0x1A, 0x00);
 800328c:	2100      	movs	r1, #0
 800328e:	201a      	movs	r0, #26
 8003290:	f7ff ffba 	bl	8003208 <write_byte>
		write_byte(0x1B, 0x18);
 8003294:	2118      	movs	r1, #24
 8003296:	201b      	movs	r0, #27
 8003298:	f7ff ffb6 	bl	8003208 <write_byte>
	}
	return ret;
 800329c:	79fb      	ldrb	r3, [r7, #7]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <read_gyro_data>:

void read_gyro_data() {
 80032a8:	b598      	push	{r3, r4, r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80032ac:	2047      	movs	r0, #71	; 0x47
 80032ae:	f7ff ff7f 	bl	80031b0 <read_byte>
 80032b2:	4603      	mov	r3, r0
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	b21c      	sxth	r4, r3
 80032b8:	2048      	movs	r0, #72	; 0x48
 80032ba:	f7ff ff79 	bl	80031b0 <read_byte>
 80032be:	4603      	mov	r3, r0
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	4323      	orrs	r3, r4
 80032c4:	b21a      	sxth	r2, r3
 80032c6:	4b02      	ldr	r3, [pc, #8]	; (80032d0 <read_gyro_data+0x28>)
 80032c8:	801a      	strh	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	bd98      	pop	{r3, r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2001f5a8 	.word	0x2001f5a8
 80032d4:	00000000 	.word	0x00000000

080032d8 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1550, ki = 20000, kd = 0.0;
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <calculateVelocityControlFlip+0x140>)
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	4b4e      	ldr	r3, [pc, #312]	; (800341c <calculateVelocityControlFlip+0x144>)
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 80032f2:	f000 f92d 	bl	8003550 <getCurrentVelocity>
 80032f6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <calculateVelocityControlFlip+0x148>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d17f      	bne.n	8003402 <calculateVelocityControlFlip+0x12a>
		if(i_clear_flag == 1){
 8003302:	4b48      	ldr	r3, [pc, #288]	; (8003424 <calculateVelocityControlFlip+0x14c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <calculateVelocityControlFlip+0x40>
			i = 0;
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <calculateVelocityControlFlip+0x150>)
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003312:	4b44      	ldr	r3, [pc, #272]	; (8003424 <calculateVelocityControlFlip+0x14c>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003318:	f000 f8e6 	bl	80034e8 <setvariablespeed>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	edd7 7a03 	vldr	s15, [r7, #12]
 8003324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003328:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 800332c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003330:	edd7 7a04 	vldr	s15, [r7, #16]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <calculateVelocityControlFlip+0x150>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f901 	bl	8000548 <__aeabi_f2d>
 8003346:	4604      	mov	r4, r0
 8003348:	460d      	mov	r5, r1
 800334a:	ed97 7a06 	vldr	s14, [r7, #24]
 800334e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	ee17 0a90 	vmov	r0, s15
 800335a:	f7fd f8f5 	bl	8000548 <__aeabi_f2d>
 800335e:	a32c      	add	r3, pc, #176	; (adr r3, 8003410 <calculateVelocityControlFlip+0x138>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f948 	bl	80005f8 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fc ff8c 	bl	800028c <__adddf3>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4618      	mov	r0, r3
 800337a:	4621      	mov	r1, r4
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2f>
 8003380:	4602      	mov	r2, r0
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <calculateVelocityControlFlip+0x150>)
 8003384:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <calculateVelocityControlFlip+0x150>)
 8003388:	ed93 7a00 	vldr	s14, [r3]
 800338c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <calculateVelocityControlFlip+0x154>)
 8003396:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 800339a:	4a25      	ldr	r2, [pc, #148]	; (8003430 <calculateVelocityControlFlip+0x158>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <calculateVelocityControlFlip+0x150>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a23      	ldr	r2, [pc, #140]	; (8003434 <calculateVelocityControlFlip+0x15c>)
 80033a6:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		if(mode == 1){
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <calculateVelocityControlFlip+0x160>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10e      	bne.n	80033ce <calculateVelocityControlFlip+0xf6>
		    velocity_control_term = p + i + d;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <calculateVelocityControlFlip+0x150>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033be:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	4b1d      	ldr	r3, [pc, #116]	; (800343c <calculateVelocityControlFlip+0x164>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]
 80033cc:	e016      	b.n	80033fc <calculateVelocityControlFlip+0x124>
		}
		else if(mode == 2){
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <calculateVelocityControlFlip+0x160>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d112      	bne.n	80033fc <calculateVelocityControlFlip+0x124>
			velocity_control_term = p + i + d + target_acceleration;
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <calculateVelocityControlFlip+0x150>)
 80033d8:	ed93 7a00 	vldr	s14, [r3]
 80033dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <calculateVelocityControlFlip+0x168>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <calculateVelocityControlFlip+0x164>)
 80033f8:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <calculateVelocityControlFlip+0x16c>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6013      	str	r3, [r2, #0]

	}

}
 8003402:	bf00      	nop
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bdb0      	pop	{r4, r5, r7, pc}
 800340a:	bf00      	nop
 800340c:	f3af 8000 	nop.w
 8003410:	d2f1a9fc 	.word	0xd2f1a9fc
 8003414:	3f50624d 	.word	0x3f50624d
 8003418:	44c1c000 	.word	0x44c1c000
 800341c:	469c4000 	.word	0x469c4000
 8003420:	20017dea 	.word	0x20017dea
 8003424:	20017deb 	.word	0x20017deb
 8003428:	20017e00 	.word	0x20017e00
 800342c:	20017dfc 	.word	0x20017dfc
 8003430:	2001f5c4 	.word	0x2001f5c4
 8003434:	2001f5bc 	.word	0x2001f5bc
 8003438:	2001f5b4 	.word	0x2001f5b4
 800343c:	20017dec 	.word	0x20017dec
 8003440:	20017df4 	.word	0x20017df4
 8003444:	20017e04 	.word	0x20017e04

08003448 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
	return velocity_control_term;
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <getVelocityControlTerm+0x18>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	ee07 3a90 	vmov	s15, r3
}
 8003454:	eeb0 0a67 	vmov.f32	s0, s15
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	20017dec 	.word	0x20017dec

08003464 <getpidplus>:

float getpidplus(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	return pid_plus;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <getpidplus+0x18>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	ee07 3a90 	vmov	s15, r3
}
 8003470:	eeb0 0a67 	vmov.f32	s0, s15
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	20017dfc 	.word	0x20017dfc

08003480 <getTargetAcceleration>:

float getTargetAcceleration(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
	return target_acceleration;
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <getTargetAcceleration+0x18>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	20017df4 	.word	0x20017df4

0800349c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <setTargetVelocity+0x1c>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	20017df0 	.word	0x20017df0

080034bc <setTargetAcceleration>:

void setTargetAcceleration(float acceleration)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	ed87 0a01 	vstr	s0, [r7, #4]
	target_acceleration = acceleration / 10;
 80034c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80034ca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80034ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <setTargetAcceleration+0x28>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	20017df4 	.word	0x20017df4

080034e8 <setvariablespeed>:

float setvariablespeed(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 80034ec:	f7fd ffa8 	bl	8001440 <getspeedcount>
 80034f0:	eeb0 7a40 	vmov.f32	s14, s0
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <setvariablespeed+0x5c>)
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	db04      	blt.n	800350e <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <setvariablespeed+0x5c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <setvariablespeed+0x60>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e012      	b.n	8003534 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 800350e:	f7fd ff97 	bl	8001440 <getspeedcount>
 8003512:	eeb0 7a40 	vmov.f32	s14, s0
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <setvariablespeed+0x5c>)
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003524:	d506      	bpl.n	8003534 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 8003526:	f7fd ff8b 	bl	8001440 <getspeedcount>
 800352a:	eef0 7a40 	vmov.f32	s15, s0
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <setvariablespeed+0x60>)
 8003530:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <setvariablespeed+0x60>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	ee07 3a90 	vmov	s15, r3
}
 800353c:	eeb0 0a67 	vmov.f32	s0, s15
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20017df0 	.word	0x20017df0
 8003548:	20017df8 	.word	0x20017df8
 800354c:	00000000 	.word	0x00000000

08003550 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	80fb      	strh	r3, [r7, #6]
 800355a:	2300      	movs	r3, #0
 800355c:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 800355e:	1d3a      	adds	r2, r7, #4
 8003560:	1dbb      	adds	r3, r7, #6
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fea7 	bl	80012b8 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	461a      	mov	r2, r3
 8003570:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	0fda      	lsrs	r2, r3, #31
 8003578:	4413      	add	r3, r2
 800357a:	105b      	asrs	r3, r3, #1
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003584:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7fc ffdd 	bl	8000548 <__aeabi_f2d>
 800358e:	a30d      	add	r3, pc, #52	; (adr r3, 80035c4 <getCurrentVelocity+0x74>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fd f830 	bl	80005f8 <__aeabi_dmul>
 8003598:	4603      	mov	r3, r0
 800359a:	460c      	mov	r4, r1
 800359c:	4618      	mov	r0, r3
 800359e:	4621      	mov	r1, r4
 80035a0:	f7fd fb22 	bl	8000be8 <__aeabi_d2f>
 80035a4:	4603      	mov	r3, r0
 80035a6:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 80035a8:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <getCurrentVelocity+0x70>)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	6013      	str	r3, [r2, #0]

	return current_velocity;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	ee07 3a90 	vmov	s15, r3
}
 80035b4:	eeb0 0a67 	vmov.f32	s0, s15
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	2001f5b8 	.word	0x2001f5b8
 80035c4:	31e7b585 	.word	0x31e7b585
 80035c8:	3f8e28c7 	.word	0x3f8e28c7

080035cc <startVelocityControl>:
{
	return target_velocity;
}

void startVelocityControl(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <startVelocityControl+0x1c>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <startVelocityControl+0x20>)
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20017dea 	.word	0x20017dea
 80035ec:	20017deb 	.word	0x20017deb

080035f0 <stopVelocityControl>:

void stopVelocityControl(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <stopVelocityControl+0x14>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	20017dea 	.word	0x20017dea

08003608 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <setClearFlagOfVelocityControlI+0x14>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20017deb 	.word	0x20017deb

08003620 <setrunmode>:

void setrunmode(uint16_t num){
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
	mode = num;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <setrunmode+0x1c>)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	8013      	strh	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	2001f5b4 	.word	0x2001f5b4

08003640 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003648:	1d39      	adds	r1, r7, #4
 800364a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364e:	2201      	movs	r2, #1
 8003650:	4803      	ldr	r0, [pc, #12]	; (8003660 <__io_putchar+0x20>)
 8003652:	f006 fe56 	bl	800a302 <HAL_UART_Transmit>
	return ch;
 8003656:	687b      	ldr	r3, [r7, #4]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2001f6c4 	.word	0x2001f6c4

08003664 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d121      	bne.n	80036ba <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800367e:	6013      	str	r3, [r2, #0]
      timer2++;
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003688:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 800368a:	f7fd fd49 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 800368e:	f7fd ffa7 	bl	80015e0 <updateIMUValue>
      updateAnalogSensor();
 8003692:	f7fe fec1 	bl	8002418 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003696:	f7fe fabf 	bl	8001c18 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 800369a:	f7ff fe1d 	bl	80032d8 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 800369e:	f7fd fc73 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 80036a2:	f7fe fb67 	bl	8001d74 <lineTraceFlip>
      runningFlip();
 80036a6:	f001 fbc5 	bl	8004e34 <runningFlip>
      motorCtrlFlip();
 80036aa:	f001 f8f1 	bl	8004890 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 80036ae:	f001 f953 	bl	8004958 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 80036b2:	f001 f9bf 	bl	8004a34 <updateSideSensorStatus>

      checkCourseOut();
 80036b6:	f7fe fc35 	bl	8001f24 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d106      	bne.n	80036d2 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 80036cc:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 80036ce:	f7fe fcad 	bl	800202c <storeAnalogSensorBuffer>

   }
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40001000 	.word	0x40001000
 80036e0:	2001f5c8 	.word	0x2001f5c8
 80036e4:	2001f610 	.word	0x2001f610
 80036e8:	40001400 	.word	0x40001400
 80036ec:	2001f7e8 	.word	0x2001f7e8

080036f0 <init>:

void init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
	  initADC();
 80036f4:	f7fe fc84 	bl	8002000 <initADC>
	  initEncoder();
 80036f8:	f7fd fcf4 	bl	80010e4 <initEncoder>
	  initLog();
 80036fc:	f7ff fa74 	bl	8002be8 <initLog>
	  initGyro();
 8003700:	f7fd ff5e 	bl	80015c0 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003704:	4809      	ldr	r0, [pc, #36]	; (800372c <init+0x3c>)
 8003706:	f005 ff0a 	bl	800951e <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 800370a:	4809      	ldr	r0, [pc, #36]	; (8003730 <init+0x40>)
 800370c:	f005 ff07 	bl	800951e <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003710:	f001 f8a6 	bl	8004860 <initMotor>

	  setLED('R');
 8003714:	2052      	movs	r0, #82	; 0x52
 8003716:	f7fe f867 	bl	80017e8 <setLED>

	  sensorCalibration();
 800371a:	f7ff f86f 	bl	80027fc <sensorCalibration>

	  HAL_Delay(1000);
 800371e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003722:	f002 ffbd 	bl	80066a0 <HAL_Delay>

}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2001f764 	.word	0x2001f764
 8003730:	2001f84c 	.word	0x2001f84c

08003734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b085      	sub	sp, #20
 8003738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800373a:	f002 ff3f 	bl	80065bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800373e:	f000 fb3d 	bl	8003dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003742:	f000 ffcb 	bl	80046dc <MX_GPIO_Init>
  MX_DMA_Init();
 8003746:	f000 ffa1 	bl	800468c <MX_DMA_Init>
  MX_TIM1_Init();
 800374a:	f000 fd51 	bl	80041f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800374e:	f000 fdd1 	bl	80042f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003752:	f000 fe23 	bl	800439c <MX_TIM4_Init>
  MX_TIM8_Init();
 8003756:	f000 fedf 	bl	8004518 <MX_TIM8_Init>
  MX_ADC1_Init();
 800375a:	f000 fb99 	bl	8003e90 <MX_ADC1_Init>
  MX_I2C1_Init();
 800375e:	f000 fce3 	bl	8004128 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003762:	f000 fd0f 	bl	8004184 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003766:	f000 ff67 	bl	8004638 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800376a:	f000 fe6b 	bl	8004444 <MX_TIM6_Init>
  MX_TIM7_Init();
 800376e:	f000 fe9f 	bl	80044b0 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003772:	f000 fbed 	bl	8003f50 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003776:	f7ff ffbb 	bl	80036f0 <init>

  bool running_flag = false;
 800377a:	2300      	movs	r3, #0
 800377c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 800377e:	204c      	movs	r0, #76	; 0x4c
 8003780:	f002 fe0e 	bl	80063a0 <getSwitchStatus>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d109      	bne.n	800379e <main+0x6a>
 800378a:	4bc6      	ldr	r3, [pc, #792]	; (8003aa4 <main+0x370>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <main+0x6a>
		  timer = 0;
 8003792:	4bc5      	ldr	r3, [pc, #788]	; (8003aa8 <main+0x374>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003798:	4bc2      	ldr	r3, [pc, #776]	; (8003aa4 <main+0x370>)
 800379a:	2201      	movs	r2, #1
 800379c:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 800379e:	204c      	movs	r0, #76	; 0x4c
 80037a0:	f002 fdfe 	bl	80063a0 <getSwitchStatus>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10a      	bne.n	80037c0 <main+0x8c>
 80037aa:	4bbf      	ldr	r3, [pc, #764]	; (8003aa8 <main+0x374>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b14      	cmp	r3, #20
 80037b0:	d906      	bls.n	80037c0 <main+0x8c>
 80037b2:	4bbc      	ldr	r3, [pc, #752]	; (8003aa4 <main+0x370>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <main+0x8c>
		  sw = 2;
 80037ba:	4bba      	ldr	r3, [pc, #744]	; (8003aa4 <main+0x370>)
 80037bc:	2202      	movs	r2, #2
 80037be:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 80037c0:	4bb9      	ldr	r3, [pc, #740]	; (8003aa8 <main+0x374>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b28      	cmp	r3, #40	; 0x28
 80037c6:	d906      	bls.n	80037d6 <main+0xa2>
 80037c8:	4bb6      	ldr	r3, [pc, #728]	; (8003aa4 <main+0x370>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <main+0xa2>
		  sw = 0;
 80037d0:	4bb4      	ldr	r3, [pc, #720]	; (8003aa4 <main+0x370>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 80037d6:	204c      	movs	r0, #76	; 0x4c
 80037d8:	f002 fde2 	bl	80063a0 <getSwitchStatus>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <main+0xc8>
 80037e2:	4bb0      	ldr	r3, [pc, #704]	; (8003aa4 <main+0x370>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d108      	bne.n	80037fc <main+0xc8>
		  //mode_selector++;
		  soiya++;
 80037ea:	4bb0      	ldr	r3, [pc, #704]	; (8003aac <main+0x378>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	4bae      	ldr	r3, [pc, #696]	; (8003aac <main+0x378>)
 80037f4:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 80037f6:	4bab      	ldr	r3, [pc, #684]	; (8003aa4 <main+0x370>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 80037fc:	2052      	movs	r0, #82	; 0x52
 80037fe:	f002 fdcf 	bl	80063a0 <getSwitchStatus>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d109      	bne.n	800381c <main+0xe8>
 8003808:	4ba9      	ldr	r3, [pc, #676]	; (8003ab0 <main+0x37c>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <main+0xe8>
	  	  timer = 0;
 8003810:	4ba5      	ldr	r3, [pc, #660]	; (8003aa8 <main+0x374>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003816:	4ba6      	ldr	r3, [pc, #664]	; (8003ab0 <main+0x37c>)
 8003818:	2201      	movs	r2, #1
 800381a:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 800381c:	2052      	movs	r0, #82	; 0x52
 800381e:	f002 fdbf 	bl	80063a0 <getSwitchStatus>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10a      	bne.n	800383e <main+0x10a>
 8003828:	4b9f      	ldr	r3, [pc, #636]	; (8003aa8 <main+0x374>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b14      	cmp	r3, #20
 800382e:	d906      	bls.n	800383e <main+0x10a>
 8003830:	4b9f      	ldr	r3, [pc, #636]	; (8003ab0 <main+0x37c>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <main+0x10a>
	  	  sw2 = 2;
 8003838:	4b9d      	ldr	r3, [pc, #628]	; (8003ab0 <main+0x37c>)
 800383a:	2202      	movs	r2, #2
 800383c:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 800383e:	4b9a      	ldr	r3, [pc, #616]	; (8003aa8 <main+0x374>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b28      	cmp	r3, #40	; 0x28
 8003844:	d906      	bls.n	8003854 <main+0x120>
 8003846:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <main+0x37c>)
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <main+0x120>
	  	  sw2 = 0;
 800384e:	4b98      	ldr	r3, [pc, #608]	; (8003ab0 <main+0x37c>)
 8003850:	2200      	movs	r2, #0
 8003852:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003854:	2052      	movs	r0, #82	; 0x52
 8003856:	f002 fda3 	bl	80063a0 <getSwitchStatus>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10c      	bne.n	800387a <main+0x146>
 8003860:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <main+0x37c>)
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d108      	bne.n	800387a <main+0x146>
	  	  cnt++;
 8003868:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <main+0x380>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	4b90      	ldr	r3, [pc, #576]	; (8003ab4 <main+0x380>)
 8003872:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003874:	4b8e      	ldr	r3, [pc, #568]	; (8003ab0 <main+0x37c>)
 8003876:	2200      	movs	r2, #0
 8003878:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 800387a:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <main+0x380>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d902      	bls.n	8003888 <main+0x154>
		  cnt = 0;
 8003882:	4b8c      	ldr	r3, [pc, #560]	; (8003ab4 <main+0x380>)
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003888:	4b8a      	ldr	r3, [pc, #552]	; (8003ab4 <main+0x380>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <main+0x174>
		  HAL_Delay(1000);
 8003890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003894:	f002 ff04 	bl	80066a0 <HAL_Delay>
		  running_flag = true;
 8003898:	2301      	movs	r3, #1
 800389a:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 800389c:	4b86      	ldr	r3, [pc, #536]	; (8003ab8 <main+0x384>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 80038a2:	4b84      	ldr	r3, [pc, #528]	; (8003ab4 <main+0x380>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f083 0301 	eor.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <main+0x188>
		  stopLineTrace();
 80038b4:	f7fe fb24 	bl	8001f00 <stopLineTrace>
		  stopVelocityControl();
 80038b8:	f7ff fe9a 	bl	80035f0 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){  //goal判?��?
 80038bc:	f002 f946 	bl	8005b4c <getgoalStatus>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <main+0x1a2>
		  running_flag = false;
 80038c6:	2300      	movs	r3, #0
 80038c8:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 80038ca:	4b7a      	ldr	r3, [pc, #488]	; (8003ab4 <main+0x380>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 80038d0:	2000      	movs	r0, #0
 80038d2:	f001 f891 	bl	80049f8 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 13){
 80038d6:	4b75      	ldr	r3, [pc, #468]	; (8003aac <main+0x378>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d902      	bls.n	80038e4 <main+0x1b0>
		  soiya = 0;
 80038de:	4b73      	ldr	r3, [pc, #460]	; (8003aac <main+0x378>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 80038e4:	4b71      	ldr	r3, [pc, #452]	; (8003aac <main+0x378>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	f200 8243 	bhi.w	8003d74 <main+0x640>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <main+0x1c0>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003953 	.word	0x08003953
 80038fc:	08003987 	.word	0x08003987
 8003900:	080039bd 	.word	0x080039bd
 8003904:	08003a01 	.word	0x08003a01
 8003908:	08003a4b 	.word	0x08003a4b
 800390c:	08003add 	.word	0x08003add
 8003910:	08003b37 	.word	0x08003b37
 8003914:	08003b91 	.word	0x08003b91
 8003918:	08003beb 	.word	0x08003beb
 800391c:	08003c3f 	.word	0x08003c3f
 8003920:	08003c93 	.word	0x08003c93
 8003924:	08003ce1 	.word	0x08003ce1

			  case 0:
				  setLED('W');
 8003928:	2057      	movs	r0, #87	; 0x57
 800392a:	f7fd ff5d 	bl	80017e8 <setLED>
				  setLED2('R');
 800392e:	2052      	movs	r0, #82	; 0x52
 8003930:	f7fe f828 	bl	8001984 <setLED2>
				  printf("0\r\n");
 8003934:	4861      	ldr	r0, [pc, #388]	; (8003abc <main+0x388>)
 8003936:	f008 f833 	bl	800b9a0 <puts>

				  if(running_flag == true){
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 821b 	beq.w	8003d78 <main+0x644>
					  setLED('G');
 8003942:	2047      	movs	r0, #71	; 0x47
 8003944:	f7fd ff50 	bl	80017e8 <setLED>

				  		  setsuctionMotor(400);
 8003948:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800394c:	f001 f854 	bl	80049f8 <setsuctionMotor>

				  }

				  break;
 8003950:	e212      	b.n	8003d78 <main+0x644>

			  case 1:
				  setLED('G');
 8003952:	2047      	movs	r0, #71	; 0x47
 8003954:	f7fd ff48 	bl	80017e8 <setLED>
				  setLED2('G');
 8003958:	2047      	movs	r0, #71	; 0x47
 800395a:	f7fe f813 	bl	8001984 <setLED2>

				  if(running_flag == true){
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 820b 	beq.w	8003d7c <main+0x648>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003966:	f7fd fd9f 	bl	80014a8 <clearspeedcount>

						  setTargetVelocity(0.0);
 800396a:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003ac0 <main+0x38c>
 800396e:	f7ff fd95 	bl	800349c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(0);
 8003972:	2000      	movs	r0, #0
 8003974:	f001 f840 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800397c:	f002 fe90 	bl	80066a0 <HAL_Delay>

						  running();
 8003980:	f001 f968 	bl	8004c54 <running>
				  }

				  break;
 8003984:	e1fa      	b.n	8003d7c <main+0x648>

			  case 2:
				  setLED('B');
 8003986:	2042      	movs	r0, #66	; 0x42
 8003988:	f7fd ff2e 	bl	80017e8 <setLED>
				  setLED2('B');
 800398c:	2042      	movs	r0, #66	; 0x42
 800398e:	f7fd fff9 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 81f3 	beq.w	8003d80 <main+0x64c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800399a:	f7fd fd85 	bl	80014a8 <clearspeedcount>

						  setTargetVelocity(1.5);
 800399e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80039a2:	f7ff fd7b 	bl	800349c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(300);
 80039a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039aa:	f001 f825 	bl	80049f8 <setsuctionMotor>
						  HAL_Delay(1000);
 80039ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039b2:	f002 fe75 	bl	80066a0 <HAL_Delay>

						  running();
 80039b6:	f001 f94d 	bl	8004c54 <running>
				  }

				  break;
 80039ba:	e1e1      	b.n	8003d80 <main+0x64c>

			  case 3:
				  setLED('Y');
 80039bc:	2059      	movs	r0, #89	; 0x59
 80039be:	f7fd ff13 	bl	80017e8 <setLED>
				  setLED2('R');
 80039c2:	2052      	movs	r0, #82	; 0x52
 80039c4:	f7fd ffde 	bl	8001984 <setLED2>

				  if(running_flag == true){
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 81da 	beq.w	8003d84 <main+0x650>
						  //startLineTrace();

					      clearspeedcount();
 80039d0:	f7fd fd6a 	bl	80014a8 <clearspeedcount>

					      IMU_average();
 80039d4:	f7fd feb6 	bl	8001744 <IMU_average>

					      setRunMode(1);
 80039d8:	2001      	movs	r0, #1
 80039da:	f001 f855 	bl	8004a88 <setRunMode>

					      setVelocityRange(1.4, 1.4);
 80039de:	eddf 0a39 	vldr	s1, [pc, #228]	; 8003ac4 <main+0x390>
 80039e2:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003ac4 <main+0x390>
 80039e6:	f002 f8bd 	bl	8005b64 <setVelocityRange>

						  setsuctionMotor(350);
 80039ea:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80039ee:	f001 f803 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 80039f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f6:	f002 fe53 	bl	80066a0 <HAL_Delay>

						  running();
 80039fa:	f001 f92b 	bl	8004c54 <running>
				  }

				  break;
 80039fe:	e1c1      	b.n	8003d84 <main+0x650>

			  case 4:
				  setLED('Y');
 8003a00:	2059      	movs	r0, #89	; 0x59
 8003a02:	f7fd fef1 	bl	80017e8 <setLED>
				  setLED2('G');
 8003a06:	2047      	movs	r0, #71	; 0x47
 8003a08:	f7fd ffbc 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 81ba 	beq.w	8003d88 <main+0x654>
						  //startLineTrace();

						  clearspeedcount();
 8003a14:	f7fd fd48 	bl	80014a8 <clearspeedcount>

						  IMU_average();
 8003a18:	f7fd fe94 	bl	8001744 <IMU_average>

						  setRunMode(1);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f001 f833 	bl	8004a88 <setRunMode>
						  setrunmode(1);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7ff fdfc 	bl	8003620 <setrunmode>

						  setVelocityRange(1.8, 1.8);
 8003a28:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8003ad4 <main+0x3a0>
 8003a2c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003ad4 <main+0x3a0>
 8003a30:	f002 f898 	bl	8005b64 <setVelocityRange>

						  setsuctionMotor(350);
 8003a34:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003a38:	f000 ffde 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a40:	f002 fe2e 	bl	80066a0 <HAL_Delay>

						  running();
 8003a44:	f001 f906 	bl	8004c54 <running>
				  }

				  break;
 8003a48:	e19e      	b.n	8003d88 <main+0x654>

			  case 5:
				  setLED('C');
 8003a4a:	2043      	movs	r0, #67	; 0x43
 8003a4c:	f7fd fecc 	bl	80017e8 <setLED>
				  setLED2('R');
 8003a50:	2052      	movs	r0, #82	; 0x52
 8003a52:	f7fd ff97 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8197 	beq.w	8003d8c <main+0x658>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003a5e:	f7fd fd23 	bl	80014a8 <clearspeedcount>

					      setRunMode(2);
 8003a62:	2002      	movs	r0, #2
 8003a64:	f001 f810 	bl	8004a88 <setRunMode>
					      setrunmode(2);
 8003a68:	2002      	movs	r0, #2
 8003a6a:	f7ff fdd9 	bl	8003620 <setrunmode>

					      setVelocityRange(1.8, 5.0);
 8003a6e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003a72:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8003ad4 <main+0x3a0>
 8003a76:	f002 f875 	bl	8005b64 <setVelocityRange>
					      setAccDec(4, 2);
 8003a7a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003a7e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8003a82:	f002 f887 	bl	8005b94 <setAccDec>
					      setStraightRadius(1000); //Do Not Change
 8003a86:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003ad8 <main+0x3a4>
 8003a8a:	f002 f89b 	bl	8005bc4 <setStraightRadius>

						  setsuctionMotor(350);
 8003a8e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003a92:	f000 ffb1 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a9a:	f002 fe01 	bl	80066a0 <HAL_Delay>

						  running();
 8003a9e:	f001 f8d9 	bl	8004c54 <running>
				  }

				  break;
 8003aa2:	e173      	b.n	8003d8c <main+0x658>
 8003aa4:	2001f7e4 	.word	0x2001f7e4
 8003aa8:	2001f5c8 	.word	0x2001f5c8
 8003aac:	20017e0a 	.word	0x20017e0a
 8003ab0:	20017e08 	.word	0x20017e08
 8003ab4:	2001f668 	.word	0x2001f668
 8003ab8:	2001f610 	.word	0x2001f610
 8003abc:	0800f0c0 	.word	0x0800f0c0
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	3fb33333 	.word	0x3fb33333
 8003ac8:	400ccccd 	.word	0x400ccccd
 8003acc:	40133333 	.word	0x40133333
 8003ad0:	40066666 	.word	0x40066666
 8003ad4:	3fe66666 	.word	0x3fe66666
 8003ad8:	447a0000 	.word	0x447a0000

			  case 6:
				  setLED('C');
 8003adc:	2043      	movs	r0, #67	; 0x43
 8003ade:	f7fd fe83 	bl	80017e8 <setLED>
				  setLED2('G');
 8003ae2:	2047      	movs	r0, #71	; 0x47
 8003ae4:	f7fd ff4e 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8150 	beq.w	8003d90 <main+0x65c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003af0:	f7fd fcda 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003af4:	2002      	movs	r0, #2
 8003af6:	f000 ffc7 	bl	8004a88 <setRunMode>
						  setrunmode(2);
 8003afa:	2002      	movs	r0, #2
 8003afc:	f7ff fd90 	bl	8003620 <setrunmode>

						  setVelocityRange(2.0, 5.0);
 8003b00:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003b04:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003b08:	f002 f82c 	bl	8005b64 <setVelocityRange>
						  setAccDec(3, 2);
 8003b0c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003b10:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003b14:	f002 f83e 	bl	8005b94 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003b18:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8003ad8 <main+0x3a4>
 8003b1c:	f002 f852 	bl	8005bc4 <setStraightRadius>

						  setsuctionMotor(350);
 8003b20:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003b24:	f000 ff68 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b2c:	f002 fdb8 	bl	80066a0 <HAL_Delay>

						  running();
 8003b30:	f001 f890 	bl	8004c54 <running>
				  }

				  break;
 8003b34:	e12c      	b.n	8003d90 <main+0x65c>

			  case 7:
				  setLED('C');
 8003b36:	2043      	movs	r0, #67	; 0x43
 8003b38:	f7fd fe56 	bl	80017e8 <setLED>
				  setLED2('B');
 8003b3c:	2042      	movs	r0, #66	; 0x42
 8003b3e:	f7fd ff21 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8125 	beq.w	8003d94 <main+0x660>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003b4a:	f7fd fcad 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f000 ff9a 	bl	8004a88 <setRunMode>
						  setrunmode(2);
 8003b54:	2002      	movs	r0, #2
 8003b56:	f7ff fd63 	bl	8003620 <setrunmode>

						  setVelocityRange(2.2, 4.5);
 8003b5a:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 8003b5e:	ed1f 0a26 	vldr	s0, [pc, #-152]	; 8003ac8 <main+0x394>
 8003b62:	f001 ffff 	bl	8005b64 <setVelocityRange>
						  setAccDec(5, 1);
 8003b66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b6a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003b6e:	f002 f811 	bl	8005b94 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003b72:	ed1f 0a27 	vldr	s0, [pc, #-156]	; 8003ad8 <main+0x3a4>
 8003b76:	f002 f825 	bl	8005bc4 <setStraightRadius>

						  setsuctionMotor(350);
 8003b7a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003b7e:	f000 ff3b 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b86:	f002 fd8b 	bl	80066a0 <HAL_Delay>

						  running();
 8003b8a:	f001 f863 	bl	8004c54 <running>
				  }

				  break;
 8003b8e:	e101      	b.n	8003d94 <main+0x660>

			  case 8:
				  setLED('C');
 8003b90:	2043      	movs	r0, #67	; 0x43
 8003b92:	f7fd fe29 	bl	80017e8 <setLED>
				  setLED2('W');
 8003b96:	2057      	movs	r0, #87	; 0x57
 8003b98:	f7fd fef4 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80fa 	beq.w	8003d98 <main+0x664>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003ba4:	f7fd fc80 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003ba8:	2002      	movs	r0, #2
 8003baa:	f000 ff6d 	bl	8004a88 <setRunMode>
						  setrunmode(2);
 8003bae:	2002      	movs	r0, #2
 8003bb0:	f7ff fd36 	bl	8003620 <setrunmode>

						  setVelocityRange(2.0, 6.5);
 8003bb4:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8003bb8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003bbc:	f001 ffd2 	bl	8005b64 <setVelocityRange>
						  setAccDec(5, 2);
 8003bc0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003bc4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003bc8:	f001 ffe4 	bl	8005b94 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003bcc:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 8003ad8 <main+0x3a4>
 8003bd0:	f001 fff8 	bl	8005bc4 <setStraightRadius>

						  setsuctionMotor(350);
 8003bd4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003bd8:	f000 ff0e 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be0:	f002 fd5e 	bl	80066a0 <HAL_Delay>

						  running();
 8003be4:	f001 f836 	bl	8004c54 <running>
				  }

				  break;
 8003be8:	e0d6      	b.n	8003d98 <main+0x664>

			  case 9:
				  setLED('C');
 8003bea:	2043      	movs	r0, #67	; 0x43
 8003bec:	f7fd fdfc 	bl	80017e8 <setLED>
				  setLED2('Y');
 8003bf0:	2059      	movs	r0, #89	; 0x59
 8003bf2:	f7fd fec7 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80cf 	beq.w	8003d9c <main+0x668>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003bfe:	f7fd fc53 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003c02:	2002      	movs	r0, #2
 8003c04:	f000 ff40 	bl	8004a88 <setRunMode>

						  setVelocityRange(2.3, 8.0);
 8003c08:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8003c0c:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 8003acc <main+0x398>
 8003c10:	f001 ffa8 	bl	8005b64 <setVelocityRange>
						  setAccDec(10, 3);
 8003c14:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003c18:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003c1c:	f001 ffba 	bl	8005b94 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003c20:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 8003ad8 <main+0x3a4>
 8003c24:	f001 ffce 	bl	8005bc4 <setStraightRadius>

						  setsuctionMotor(350);
 8003c28:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003c2c:	f000 fee4 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c34:	f002 fd34 	bl	80066a0 <HAL_Delay>

						  running();
 8003c38:	f001 f80c 	bl	8004c54 <running>
				  }

			  	  break;
 8003c3c:	e0ae      	b.n	8003d9c <main+0x668>

			  case 10:
				  setLED('C');
 8003c3e:	2043      	movs	r0, #67	; 0x43
 8003c40:	f7fd fdd2 	bl	80017e8 <setLED>
				  setLED2('X');
 8003c44:	2058      	movs	r0, #88	; 0x58
 8003c46:	f7fd fe9d 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a7 	beq.w	8003da0 <main+0x66c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003c52:	f7fd fc29 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003c56:	2002      	movs	r0, #2
 8003c58:	f000 ff16 	bl	8004a88 <setRunMode>

						  setVelocityRange(2.1, 7.0);
 8003c5c:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8003c60:	ed1f 0a65 	vldr	s0, [pc, #-404]	; 8003ad0 <main+0x39c>
 8003c64:	f001 ff7e 	bl	8005b64 <setVelocityRange>
						  setAccDec(7, 2);
 8003c68:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003c6c:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003c70:	f001 ff90 	bl	8005b94 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003c74:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 8003ad8 <main+0x3a4>
 8003c78:	f001 ffa4 	bl	8005bc4 <setStraightRadius>

						  setsuctionMotor(350);
 8003c7c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003c80:	f000 feba 	bl	80049f8 <setsuctionMotor>

						  HAL_Delay(1000);
 8003c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c88:	f002 fd0a 	bl	80066a0 <HAL_Delay>

						  running();
 8003c8c:	f000 ffe2 	bl	8004c54 <running>
				  }

				  break;
 8003c90:	e086      	b.n	8003da0 <main+0x66c>

			  case 11:
				  setLED('R');
 8003c92:	2052      	movs	r0, #82	; 0x52
 8003c94:	f7fd fda8 	bl	80017e8 <setLED>
				  setLED2('A');
 8003c98:	2041      	movs	r0, #65	; 0x41
 8003c9a:	f7fd fe73 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d07f      	beq.n	8003da4 <main+0x670>
					  setLED('G');
 8003ca4:	2047      	movs	r0, #71	; 0x47
 8003ca6:	f7fd fd9f 	bl	80017e8 <setLED>
					  setRunMode(2);
 8003caa:	2002      	movs	r0, #2
 8003cac:	f000 feec 	bl	8004a88 <setRunMode>
					  setVelocityRange(1.8, 5.0);
 8003cb0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003cb4:	ed1f 0a79 	vldr	s0, [pc, #-484]	; 8003ad4 <main+0x3a0>
 8003cb8:	f001 ff54 	bl	8005b64 <setVelocityRange>
					  setAccDec(4, 2);
 8003cbc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003cc0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8003cc4:	f001 ff66 	bl	8005b94 <setAccDec>
					  setStraightRadius(1000); //Do Not Change
 8003cc8:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 8003ad8 <main+0x3a4>
 8003ccc:	f001 ff7a 	bl	8005bc4 <setStraightRadius>
					  runningInit();
 8003cd0:	f001 f9b2 	bl	8005038 <runningInit>
					  setLED('W');
 8003cd4:	2057      	movs	r0, #87	; 0x57
 8003cd6:	f7fd fd87 	bl	80017e8 <setLED>
					  SaveVelocityTable();
 8003cda:	f001 ff07 	bl	8005aec <SaveVelocityTable>
				  }

				  break;
 8003cde:	e061      	b.n	8003da4 <main+0x670>

			  case 12:
				  setLED('W');
 8003ce0:	2057      	movs	r0, #87	; 0x57
 8003ce2:	f7fd fd81 	bl	80017e8 <setLED>
				  setLED2('A');
 8003ce6:	2041      	movs	r0, #65	; 0x41
 8003ce8:	f7fd fe4c 	bl	8001984 <setLED2>
				  printf("6\r\n");
 8003cec:	482f      	ldr	r0, [pc, #188]	; (8003dac <main+0x678>)
 8003cee:	f007 fe57 	bl	800b9a0 <puts>

				  if(running_flag == true){
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d057      	beq.n	8003da8 <main+0x674>
					  loadDistance();
 8003cf8:	f7ff f8b8 	bl	8002e6c <loadDistance>
					  loadTheta();
 8003cfc:	f7ff f8f4 	bl	8002ee8 <loadTheta>
					  loadCross();
 8003d00:	f7ff f930 	bl	8002f64 <loadCross>
					  loadSide();
 8003d04:	f7ff f96c 	bl	8002fe0 <loadSide>
					  loadDebug();
 8003d08:	f7ff f9a8 	bl	800305c <loadDebug>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 8003d0c:	4828      	ldr	r0, [pc, #160]	; (8003db0 <main+0x67c>)
 8003d0e:	f007 fe47 	bl	800b9a0 <puts>
					  uint16_t size = getDebugLogSize();
 8003d12:	f7ff f89f 	bl	8002e54 <getDebugLogSize>
 8003d16:	4603      	mov	r3, r0
 8003d18:	807b      	strh	r3, [r7, #2]
					  for(uint16_t i = 0; i < size; i = i+2){
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	80bb      	strh	r3, [r7, #4]
 8003d1e:	e021      	b.n	8003d64 <main+0x630>
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
 8003d20:	88bb      	ldrh	r3, [r7, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fa2e 	bl	8003184 <getDebugLog>
 8003d28:	ee10 3a10 	vmov	r3, s0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fc fc0b 	bl	8000548 <__aeabi_f2d>
 8003d32:	4605      	mov	r5, r0
 8003d34:	460e      	mov	r6, r1
 8003d36:	88bb      	ldrh	r3, [r7, #4]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fa21 	bl	8003184 <getDebugLog>
 8003d42:	ee10 3a10 	vmov	r3, s0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fbfe 	bl	8000548 <__aeabi_f2d>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	e9cd 3400 	strd	r3, r4, [sp]
 8003d54:	462a      	mov	r2, r5
 8003d56:	4633      	mov	r3, r6
 8003d58:	4816      	ldr	r0, [pc, #88]	; (8003db4 <main+0x680>)
 8003d5a:	f007 fdad 	bl	800b8b8 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+2){
 8003d5e:	88bb      	ldrh	r3, [r7, #4]
 8003d60:	3302      	adds	r3, #2
 8003d62:	80bb      	strh	r3, [r7, #4]
 8003d64:	88ba      	ldrh	r2, [r7, #4]
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3d9      	bcc.n	8003d20 <main+0x5ec>
					  }

					  printf("9999, 9999\r\n");
 8003d6c:	4812      	ldr	r0, [pc, #72]	; (8003db8 <main+0x684>)
 8003d6e:	f007 fe17 	bl	800b9a0 <puts>
				  }

				  break;
 8003d72:	e019      	b.n	8003da8 <main+0x674>

			  default:
				  break;
 8003d74:	bf00      	nop
 8003d76:	e502      	b.n	800377e <main+0x4a>
				  break;
 8003d78:	bf00      	nop
 8003d7a:	e500      	b.n	800377e <main+0x4a>
				  break;
 8003d7c:	bf00      	nop
 8003d7e:	e4fe      	b.n	800377e <main+0x4a>
				  break;
 8003d80:	bf00      	nop
 8003d82:	e4fc      	b.n	800377e <main+0x4a>
				  break;
 8003d84:	bf00      	nop
 8003d86:	e4fa      	b.n	800377e <main+0x4a>
				  break;
 8003d88:	bf00      	nop
 8003d8a:	e4f8      	b.n	800377e <main+0x4a>
				  break;
 8003d8c:	bf00      	nop
 8003d8e:	e4f6      	b.n	800377e <main+0x4a>
				  break;
 8003d90:	bf00      	nop
 8003d92:	e4f4      	b.n	800377e <main+0x4a>
				  break;
 8003d94:	bf00      	nop
 8003d96:	e4f2      	b.n	800377e <main+0x4a>
				  break;
 8003d98:	bf00      	nop
 8003d9a:	e4f0      	b.n	800377e <main+0x4a>
			  	  break;
 8003d9c:	bf00      	nop
 8003d9e:	e4ee      	b.n	800377e <main+0x4a>
				  break;
 8003da0:	bf00      	nop
 8003da2:	e4ec      	b.n	800377e <main+0x4a>
				  break;
 8003da4:	bf00      	nop
 8003da6:	e4ea      	b.n	800377e <main+0x4a>
				  break;
 8003da8:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003daa:	e4e8      	b.n	800377e <main+0x4a>
 8003dac:	0800f0c4 	.word	0x0800f0c4
 8003db0:	0800f0c8 	.word	0x0800f0c8
 8003db4:	0800f0ec 	.word	0x0800f0ec
 8003db8:	0800f0f8 	.word	0x0800f0f8

08003dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b094      	sub	sp, #80	; 0x50
 8003dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dc2:	f107 0320 	add.w	r3, r7, #32
 8003dc6:	2230      	movs	r2, #48	; 0x30
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f006 ff2d 	bl	800ac2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <SystemClock_Config+0xcc>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <SystemClock_Config+0xcc>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	6413      	str	r3, [r2, #64]	; 0x40
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <SystemClock_Config+0xcc>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <SystemClock_Config+0xd0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <SystemClock_Config+0xd0>)
 8003e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <SystemClock_Config+0xd0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e20:	2310      	movs	r3, #16
 8003e22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e24:	2302      	movs	r3, #2
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e30:	23a8      	movs	r3, #168	; 0xa8
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e34:	2302      	movs	r3, #2
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e38:	2304      	movs	r3, #4
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e3c:	f107 0320 	add.w	r3, r7, #32
 8003e40:	4618      	mov	r0, r3
 8003e42:	f004 f9b1 	bl	80081a8 <HAL_RCC_OscConfig>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e4c:	f000 fd04 	bl	8004858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e50:	230f      	movs	r3, #15
 8003e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e54:	2302      	movs	r3, #2
 8003e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	2105      	movs	r1, #5
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f004 fc0a 	bl	8008688 <HAL_RCC_ClockConfig>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e7a:	f000 fced 	bl	8004858 <Error_Handler>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3750      	adds	r7, #80	; 0x50
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000

08003e90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e96:	463b      	mov	r3, r7
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ea2:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <MX_ADC1_Init+0xb8>)
 8003ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003eaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ec2:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <MX_ADC1_Init+0xbc>)
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ede:	2202      	movs	r2, #2
 8003ee0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003ee2:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ef0:	4814      	ldr	r0, [pc, #80]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003ef2:	f002 fbf7 	bl	80066e4 <HAL_ADC_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003efc:	f000 fcac 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003f00:	230c      	movs	r3, #12
 8003f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f08:	2307      	movs	r3, #7
 8003f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4619      	mov	r1, r3
 8003f10:	480c      	ldr	r0, [pc, #48]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003f12:	f002 fd3b 	bl	800698c <HAL_ADC_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003f1c:	f000 fc9c 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003f20:	230d      	movs	r3, #13
 8003f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003f24:	2302      	movs	r3, #2
 8003f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f28:	463b      	mov	r3, r7
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4805      	ldr	r0, [pc, #20]	; (8003f44 <MX_ADC1_Init+0xb4>)
 8003f2e:	f002 fd2d 	bl	800698c <HAL_ADC_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003f38:	f000 fc8e 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	2001f528 	.word	0x2001f528
 8003f48:	40012000 	.word	0x40012000
 8003f4c:	0f000001 	.word	0x0f000001

08003f50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f56:	463b      	mov	r3, r7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003f62:	4b6e      	ldr	r3, [pc, #440]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f64:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <MX_ADC2_Init+0x1d0>)
 8003f66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f68:	4b6c      	ldr	r3, [pc, #432]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f6e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f70:	4b6a      	ldr	r3, [pc, #424]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003f76:	4b69      	ldr	r3, [pc, #420]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003f7c:	4b67      	ldr	r3, [pc, #412]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f82:	4b66      	ldr	r3, [pc, #408]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f8a:	4b64      	ldr	r3, [pc, #400]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f90:	4b62      	ldr	r3, [pc, #392]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f92:	4a64      	ldr	r2, [pc, #400]	; (8004124 <MX_ADC2_Init+0x1d4>)
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f96:	4b61      	ldr	r3, [pc, #388]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8003f9c:	4b5f      	ldr	r3, [pc, #380]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003fa2:	4b5e      	ldr	r3, [pc, #376]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003faa:	4b5c      	ldr	r3, [pc, #368]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003fb0:	485a      	ldr	r0, [pc, #360]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003fb2:	f002 fb97 	bl	80066e4 <HAL_ADC_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003fbc:	f000 fc4c 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003fc8:	2307      	movs	r3, #7
 8003fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fcc:	463b      	mov	r3, r7
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4852      	ldr	r0, [pc, #328]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003fd2:	f002 fcdb 	bl	800698c <HAL_ADC_ConfigChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003fdc:	f000 fc3c 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fe8:	463b      	mov	r3, r7
 8003fea:	4619      	mov	r1, r3
 8003fec:	484b      	ldr	r0, [pc, #300]	; (800411c <MX_ADC2_Init+0x1cc>)
 8003fee:	f002 fccd 	bl	800698c <HAL_ADC_ConfigChannel>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003ff8:	f000 fc2e 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004000:	2303      	movs	r3, #3
 8004002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004004:	463b      	mov	r3, r7
 8004006:	4619      	mov	r1, r3
 8004008:	4844      	ldr	r0, [pc, #272]	; (800411c <MX_ADC2_Init+0x1cc>)
 800400a:	f002 fcbf 	bl	800698c <HAL_ADC_ConfigChannel>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004014:	f000 fc20 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004018:	2303      	movs	r3, #3
 800401a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800401c:	2304      	movs	r3, #4
 800401e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004020:	463b      	mov	r3, r7
 8004022:	4619      	mov	r1, r3
 8004024:	483d      	ldr	r0, [pc, #244]	; (800411c <MX_ADC2_Init+0x1cc>)
 8004026:	f002 fcb1 	bl	800698c <HAL_ADC_ConfigChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004030:	f000 fc12 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004034:	2304      	movs	r3, #4
 8004036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004038:	2305      	movs	r3, #5
 800403a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800403c:	463b      	mov	r3, r7
 800403e:	4619      	mov	r1, r3
 8004040:	4836      	ldr	r0, [pc, #216]	; (800411c <MX_ADC2_Init+0x1cc>)
 8004042:	f002 fca3 	bl	800698c <HAL_ADC_ConfigChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800404c:	f000 fc04 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004050:	2305      	movs	r3, #5
 8004052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004054:	2306      	movs	r3, #6
 8004056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004058:	463b      	mov	r3, r7
 800405a:	4619      	mov	r1, r3
 800405c:	482f      	ldr	r0, [pc, #188]	; (800411c <MX_ADC2_Init+0x1cc>)
 800405e:	f002 fc95 	bl	800698c <HAL_ADC_ConfigChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004068:	f000 fbf6 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800406c:	2306      	movs	r3, #6
 800406e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004070:	2307      	movs	r3, #7
 8004072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004074:	463b      	mov	r3, r7
 8004076:	4619      	mov	r1, r3
 8004078:	4828      	ldr	r0, [pc, #160]	; (800411c <MX_ADC2_Init+0x1cc>)
 800407a:	f002 fc87 	bl	800698c <HAL_ADC_ConfigChannel>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004084:	f000 fbe8 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004088:	2307      	movs	r3, #7
 800408a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800408c:	2308      	movs	r3, #8
 800408e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004090:	463b      	mov	r3, r7
 8004092:	4619      	mov	r1, r3
 8004094:	4821      	ldr	r0, [pc, #132]	; (800411c <MX_ADC2_Init+0x1cc>)
 8004096:	f002 fc79 	bl	800698c <HAL_ADC_ConfigChannel>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80040a0:	f000 fbda 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80040a4:	2308      	movs	r3, #8
 80040a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80040a8:	2309      	movs	r3, #9
 80040aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040ac:	463b      	mov	r3, r7
 80040ae:	4619      	mov	r1, r3
 80040b0:	481a      	ldr	r0, [pc, #104]	; (800411c <MX_ADC2_Init+0x1cc>)
 80040b2:	f002 fc6b 	bl	800698c <HAL_ADC_ConfigChannel>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80040bc:	f000 fbcc 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80040c0:	2309      	movs	r3, #9
 80040c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80040c4:	230a      	movs	r3, #10
 80040c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040c8:	463b      	mov	r3, r7
 80040ca:	4619      	mov	r1, r3
 80040cc:	4813      	ldr	r0, [pc, #76]	; (800411c <MX_ADC2_Init+0x1cc>)
 80040ce:	f002 fc5d 	bl	800698c <HAL_ADC_ConfigChannel>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80040d8:	f000 fbbe 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80040dc:	230e      	movs	r3, #14
 80040de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80040e0:	230b      	movs	r3, #11
 80040e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040e4:	463b      	mov	r3, r7
 80040e6:	4619      	mov	r1, r3
 80040e8:	480c      	ldr	r0, [pc, #48]	; (800411c <MX_ADC2_Init+0x1cc>)
 80040ea:	f002 fc4f 	bl	800698c <HAL_ADC_ConfigChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80040f4:	f000 fbb0 	bl	8004858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80040f8:	230f      	movs	r3, #15
 80040fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80040fc:	230c      	movs	r3, #12
 80040fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004100:	463b      	mov	r3, r7
 8004102:	4619      	mov	r1, r3
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <MX_ADC2_Init+0x1cc>)
 8004106:	f002 fc41 	bl	800698c <HAL_ADC_ConfigChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004110:	f000 fba2 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	2001f4d8 	.word	0x2001f4d8
 8004120:	40012100 	.word	0x40012100
 8004124:	0f000001 	.word	0x0f000001

08004128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <MX_I2C1_Init+0x50>)
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <MX_I2C1_Init+0x54>)
 8004130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <MX_I2C1_Init+0x50>)
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <MX_I2C1_Init+0x58>)
 8004136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <MX_I2C1_Init+0x50>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <MX_I2C1_Init+0x50>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <MX_I2C1_Init+0x50>)
 8004146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800414a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <MX_I2C1_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <MX_I2C1_Init+0x50>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <MX_I2C1_Init+0x50>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <MX_I2C1_Init+0x50>)
 8004160:	2200      	movs	r2, #0
 8004162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004164:	4804      	ldr	r0, [pc, #16]	; (8004178 <MX_I2C1_Init+0x50>)
 8004166:	f003 fee7 	bl	8007f38 <HAL_I2C_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004170:	f000 fb72 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}
 8004178:	2001f614 	.word	0x2001f614
 800417c:	40005400 	.word	0x40005400
 8004180:	000186a0 	.word	0x000186a0

08004184 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <MX_SPI3_Init+0x64>)
 800418a:	4a18      	ldr	r2, [pc, #96]	; (80041ec <MX_SPI3_Init+0x68>)
 800418c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <MX_SPI3_Init+0x64>)
 8004190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004194:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <MX_SPI3_Init+0x64>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <MX_SPI3_Init+0x64>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041b8:	2228      	movs	r2, #40	; 0x28
 80041ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041be:	2200      	movs	r2, #0
 80041c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041d0:	220a      	movs	r2, #10
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80041d4:	4804      	ldr	r0, [pc, #16]	; (80041e8 <MX_SPI3_Init+0x64>)
 80041d6:	f004 fc23 	bl	8008a20 <HAL_SPI_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80041e0:	f000 fb3a 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	2001f66c 	.word	0x2001f66c
 80041ec:	40003c00 	.word	0x40003c00

080041f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b092      	sub	sp, #72	; 0x48
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
 8004210:	615a      	str	r2, [r3, #20]
 8004212:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2220      	movs	r2, #32
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f006 fd05 	bl	800ac2a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004220:	4b32      	ldr	r3, [pc, #200]	; (80042ec <MX_TIM1_Init+0xfc>)
 8004222:	4a33      	ldr	r2, [pc, #204]	; (80042f0 <MX_TIM1_Init+0x100>)
 8004224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004226:	4b31      	ldr	r3, [pc, #196]	; (80042ec <MX_TIM1_Init+0xfc>)
 8004228:	2200      	movs	r2, #0
 800422a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <MX_TIM1_Init+0xfc>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004232:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <MX_TIM1_Init+0xfc>)
 8004234:	f240 3247 	movw	r2, #839	; 0x347
 8004238:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800423a:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <MX_TIM1_Init+0xfc>)
 800423c:	2200      	movs	r2, #0
 800423e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004240:	4b2a      	ldr	r3, [pc, #168]	; (80042ec <MX_TIM1_Init+0xfc>)
 8004242:	2200      	movs	r2, #0
 8004244:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <MX_TIM1_Init+0xfc>)
 8004248:	2200      	movs	r2, #0
 800424a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800424c:	4827      	ldr	r0, [pc, #156]	; (80042ec <MX_TIM1_Init+0xfc>)
 800424e:	f005 f98a 	bl	8009566 <HAL_TIM_PWM_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004258:	f000 fafe 	bl	8004858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004268:	4619      	mov	r1, r3
 800426a:	4820      	ldr	r0, [pc, #128]	; (80042ec <MX_TIM1_Init+0xfc>)
 800426c:	f005 ff1a 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004276:	f000 faef 	bl	8004858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427a:	2360      	movs	r3, #96	; 0x60
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004286:	2300      	movs	r3, #0
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004296:	220c      	movs	r2, #12
 8004298:	4619      	mov	r1, r3
 800429a:	4814      	ldr	r0, [pc, #80]	; (80042ec <MX_TIM1_Init+0xfc>)
 800429c:	f005 fb9e 	bl	80099dc <HAL_TIM_PWM_ConfigChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80042a6:	f000 fad7 	bl	8004858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4807      	ldr	r0, [pc, #28]	; (80042ec <MX_TIM1_Init+0xfc>)
 80042ce:	f005 ff65 	bl	800a19c <HAL_TIMEx_ConfigBreakDeadTime>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80042d8:	f000 fabe 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042dc:	4803      	ldr	r0, [pc, #12]	; (80042ec <MX_TIM1_Init+0xfc>)
 80042de:	f001 ff61 	bl	80061a4 <HAL_TIM_MspPostInit>

}
 80042e2:	bf00      	nop
 80042e4:	3748      	adds	r7, #72	; 0x48
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2001f7a4 	.word	0x2001f7a4
 80042f0:	40010000 	.word	0x40010000

080042f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042fa:	f107 030c 	add.w	r3, r7, #12
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f006 fc91 	bl	800ac2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <MX_TIM3_Init+0xa0>)
 8004312:	4a21      	ldr	r2, [pc, #132]	; (8004398 <MX_TIM3_Init+0xa4>)
 8004314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004316:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <MX_TIM3_Init+0xa0>)
 8004318:	2200      	movs	r2, #0
 800431a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <MX_TIM3_Init+0xa0>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <MX_TIM3_Init+0xa0>)
 8004324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004328:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <MX_TIM3_Init+0xa0>)
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <MX_TIM3_Init+0xa0>)
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004336:	2301      	movs	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800433e:	2301      	movs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800434e:	2301      	movs	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004352:	2300      	movs	r3, #0
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	4619      	mov	r1, r3
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <MX_TIM3_Init+0xa0>)
 8004362:	f005 f969 	bl	8009638 <HAL_TIM_Encoder_Init>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800436c:	f000 fa74 	bl	8004858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004370:	2300      	movs	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_TIM3_Init+0xa0>)
 800437e:	f005 fe91 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004388:	f000 fa66 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800438c:	bf00      	nop
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	2001f484 	.word	0x2001f484
 8004398:	40000400 	.word	0x40000400

0800439c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	; 0x30
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043a2:	f107 030c 	add.w	r3, r7, #12
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f006 fc3d 	bl	800ac2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043b8:	4b20      	ldr	r3, [pc, #128]	; (800443c <MX_TIM4_Init+0xa0>)
 80043ba:	4a21      	ldr	r2, [pc, #132]	; (8004440 <MX_TIM4_Init+0xa4>)
 80043bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80043be:	4b1f      	ldr	r3, [pc, #124]	; (800443c <MX_TIM4_Init+0xa0>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <MX_TIM4_Init+0xa0>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <MX_TIM4_Init+0xa0>)
 80043cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <MX_TIM4_Init+0xa0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <MX_TIM4_Init+0xa0>)
 80043da:	2200      	movs	r2, #0
 80043dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80043de:	2301      	movs	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043e6:	2301      	movs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043f6:	2301      	movs	r3, #1
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043fa:	2300      	movs	r3, #0
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004402:	f107 030c 	add.w	r3, r7, #12
 8004406:	4619      	mov	r1, r3
 8004408:	480c      	ldr	r0, [pc, #48]	; (800443c <MX_TIM4_Init+0xa0>)
 800440a:	f005 f915 	bl	8009638 <HAL_TIM_Encoder_Init>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004414:	f000 fa20 	bl	8004858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004418:	2300      	movs	r3, #0
 800441a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4805      	ldr	r0, [pc, #20]	; (800443c <MX_TIM4_Init+0xa0>)
 8004426:	f005 fe3d 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004430:	f000 fa12 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004434:	bf00      	nop
 8004436:	3730      	adds	r7, #48	; 0x30
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2001f444 	.word	0x2001f444
 8004440:	40000800 	.word	0x40000800

08004444 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444a:	463b      	mov	r3, r7
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <MX_TIM6_Init+0x64>)
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <MX_TIM6_Init+0x68>)
 8004456:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <MX_TIM6_Init+0x64>)
 800445a:	2253      	movs	r2, #83	; 0x53
 800445c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <MX_TIM6_Init+0x64>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <MX_TIM6_Init+0x64>)
 8004466:	f240 32e7 	movw	r2, #999	; 0x3e7
 800446a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_TIM6_Init+0x64>)
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004472:	480d      	ldr	r0, [pc, #52]	; (80044a8 <MX_TIM6_Init+0x64>)
 8004474:	f005 f828 	bl	80094c8 <HAL_TIM_Base_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800447e:	f000 f9eb 	bl	8004858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800448a:	463b      	mov	r3, r7
 800448c:	4619      	mov	r1, r3
 800448e:	4806      	ldr	r0, [pc, #24]	; (80044a8 <MX_TIM6_Init+0x64>)
 8004490:	f005 fe08 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800449a:	f000 f9dd 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2001f764 	.word	0x2001f764
 80044ac:	40001000 	.word	0x40001000

080044b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b6:	463b      	mov	r3, r7
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80044be:	4b14      	ldr	r3, [pc, #80]	; (8004510 <MX_TIM7_Init+0x60>)
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <MX_TIM7_Init+0x64>)
 80044c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80044c4:	4b12      	ldr	r3, [pc, #72]	; (8004510 <MX_TIM7_Init+0x60>)
 80044c6:	2253      	movs	r2, #83	; 0x53
 80044c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <MX_TIM7_Init+0x60>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <MX_TIM7_Init+0x60>)
 80044d2:	2263      	movs	r2, #99	; 0x63
 80044d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <MX_TIM7_Init+0x60>)
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80044dc:	480c      	ldr	r0, [pc, #48]	; (8004510 <MX_TIM7_Init+0x60>)
 80044de:	f004 fff3 	bl	80094c8 <HAL_TIM_Base_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80044e8:	f000 f9b6 	bl	8004858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ec:	2300      	movs	r3, #0
 80044ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80044f4:	463b      	mov	r3, r7
 80044f6:	4619      	mov	r1, r3
 80044f8:	4805      	ldr	r0, [pc, #20]	; (8004510 <MX_TIM7_Init+0x60>)
 80044fa:	f005 fdd3 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004504:	f000 f9a8 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2001f84c 	.word	0x2001f84c
 8004514:	40001400 	.word	0x40001400

08004518 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b092      	sub	sp, #72	; 0x48
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800451e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
 8004538:	615a      	str	r2, [r3, #20]
 800453a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	2220      	movs	r2, #32
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f006 fb71 	bl	800ac2a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004548:	4b39      	ldr	r3, [pc, #228]	; (8004630 <MX_TIM8_Init+0x118>)
 800454a:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <MX_TIM8_Init+0x11c>)
 800454c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 800454e:	4b38      	ldr	r3, [pc, #224]	; (8004630 <MX_TIM8_Init+0x118>)
 8004550:	2203      	movs	r2, #3
 8004552:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <MX_TIM8_Init+0x118>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800455a:	4b35      	ldr	r3, [pc, #212]	; (8004630 <MX_TIM8_Init+0x118>)
 800455c:	f240 628f 	movw	r2, #1679	; 0x68f
 8004560:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004562:	4b33      	ldr	r3, [pc, #204]	; (8004630 <MX_TIM8_Init+0x118>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <MX_TIM8_Init+0x118>)
 800456a:	2200      	movs	r2, #0
 800456c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <MX_TIM8_Init+0x118>)
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004574:	482e      	ldr	r0, [pc, #184]	; (8004630 <MX_TIM8_Init+0x118>)
 8004576:	f004 fff6 	bl	8009566 <HAL_TIM_PWM_Init>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004580:	f000 f96a 	bl	8004858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800458c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004590:	4619      	mov	r1, r3
 8004592:	4827      	ldr	r0, [pc, #156]	; (8004630 <MX_TIM8_Init+0x118>)
 8004594:	f005 fd86 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800459e:	f000 f95b 	bl	8004858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a2:	2360      	movs	r3, #96	; 0x60
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80045ae:	2300      	movs	r3, #0
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80045b6:	2300      	movs	r3, #0
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c2:	2200      	movs	r2, #0
 80045c4:	4619      	mov	r1, r3
 80045c6:	481a      	ldr	r0, [pc, #104]	; (8004630 <MX_TIM8_Init+0x118>)
 80045c8:	f005 fa08 	bl	80099dc <HAL_TIM_PWM_ConfigChannel>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80045d2:	f000 f941 	bl	8004858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045da:	2208      	movs	r2, #8
 80045dc:	4619      	mov	r1, r3
 80045de:	4814      	ldr	r0, [pc, #80]	; (8004630 <MX_TIM8_Init+0x118>)
 80045e0:	f005 f9fc 	bl	80099dc <HAL_TIM_PWM_ConfigChannel>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80045ea:	f000 f935 	bl	8004858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004608:	2300      	movs	r3, #0
 800460a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4807      	ldr	r0, [pc, #28]	; (8004630 <MX_TIM8_Init+0x118>)
 8004612:	f005 fdc3 	bl	800a19c <HAL_TIMEx_ConfigBreakDeadTime>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800461c:	f000 f91c 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004620:	4803      	ldr	r0, [pc, #12]	; (8004630 <MX_TIM8_Init+0x118>)
 8004622:	f001 fdbf 	bl	80061a4 <HAL_TIM_MspPostInit>

}
 8004626:	bf00      	nop
 8004628:	3748      	adds	r7, #72	; 0x48
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2001f5cc 	.word	0x2001f5cc
 8004634:	40010400 	.word	0x40010400

08004638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <MX_USART1_UART_Init+0x50>)
 8004640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 8004644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 800465e:	220c      	movs	r2, #12
 8004660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800466e:	4805      	ldr	r0, [pc, #20]	; (8004684 <MX_USART1_UART_Init+0x4c>)
 8004670:	f005 fdfa 	bl	800a268 <HAL_UART_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800467a:	f000 f8ed 	bl	8004858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2001f6c4 	.word	0x2001f6c4
 8004688:	40011000 	.word	0x40011000

0800468c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <MX_DMA_Init+0x4c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <MX_DMA_Init+0x4c>)
 800469c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <MX_DMA_Init+0x4c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	2038      	movs	r0, #56	; 0x38
 80046b4:	f002 fce5 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80046b8:	2038      	movs	r0, #56	; 0x38
 80046ba:	f002 fcfe 	bl	80070ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	203a      	movs	r0, #58	; 0x3a
 80046c4:	f002 fcdd 	bl	8007082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80046c8:	203a      	movs	r0, #58	; 0x3a
 80046ca:	f002 fcf6 	bl	80070ba <HAL_NVIC_EnableIRQ>

}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800

080046dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	609a      	str	r2, [r3, #8]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	4b53      	ldr	r3, [pc, #332]	; (8004844 <MX_GPIO_Init+0x168>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4a52      	ldr	r2, [pc, #328]	; (8004844 <MX_GPIO_Init+0x168>)
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b50      	ldr	r3, [pc, #320]	; (8004844 <MX_GPIO_Init+0x168>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	4b4c      	ldr	r3, [pc, #304]	; (8004844 <MX_GPIO_Init+0x168>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <MX_GPIO_Init+0x168>)
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	6313      	str	r3, [r2, #48]	; 0x30
 800471e:	4b49      	ldr	r3, [pc, #292]	; (8004844 <MX_GPIO_Init+0x168>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	4b45      	ldr	r3, [pc, #276]	; (8004844 <MX_GPIO_Init+0x168>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	4a44      	ldr	r2, [pc, #272]	; (8004844 <MX_GPIO_Init+0x168>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6313      	str	r3, [r2, #48]	; 0x30
 800473a:	4b42      	ldr	r3, [pc, #264]	; (8004844 <MX_GPIO_Init+0x168>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <MX_GPIO_Init+0x168>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	4a3d      	ldr	r2, [pc, #244]	; (8004844 <MX_GPIO_Init+0x168>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6313      	str	r3, [r2, #48]	; 0x30
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <MX_GPIO_Init+0x168>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4b37      	ldr	r3, [pc, #220]	; (8004844 <MX_GPIO_Init+0x168>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	4a36      	ldr	r2, [pc, #216]	; (8004844 <MX_GPIO_Init+0x168>)
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	6313      	str	r3, [r2, #48]	; 0x30
 8004772:	4b34      	ldr	r3, [pc, #208]	; (8004844 <MX_GPIO_Init+0x168>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 800477e:	2200      	movs	r2, #0
 8004780:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004784:	4830      	ldr	r0, [pc, #192]	; (8004848 <MX_GPIO_Init+0x16c>)
 8004786:	f003 fbbd 	bl	8007f04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800478a:	2200      	movs	r2, #0
 800478c:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004790:	482e      	ldr	r0, [pc, #184]	; (800484c <MX_GPIO_Init+0x170>)
 8004792:	f003 fbb7 	bl	8007f04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8004796:	2200      	movs	r2, #0
 8004798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800479c:	482c      	ldr	r0, [pc, #176]	; (8004850 <MX_GPIO_Init+0x174>)
 800479e:	f003 fbb1 	bl	8007f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80047a2:	2200      	movs	r2, #0
 80047a4:	2104      	movs	r1, #4
 80047a6:	482b      	ldr	r0, [pc, #172]	; (8004854 <MX_GPIO_Init+0x178>)
 80047a8:	f003 fbac 	bl	8007f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80047ac:	f24e 2380 	movw	r3, #57984	; 0xe280
 80047b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047b2:	2301      	movs	r3, #1
 80047b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	4619      	mov	r1, r3
 80047c4:	4820      	ldr	r0, [pc, #128]	; (8004848 <MX_GPIO_Init+0x16c>)
 80047c6:	f003 f9eb 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80047ca:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80047ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d0:	2301      	movs	r3, #1
 80047d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d8:	2300      	movs	r3, #0
 80047da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4619      	mov	r1, r3
 80047e2:	481a      	ldr	r0, [pc, #104]	; (800484c <MX_GPIO_Init+0x170>)
 80047e4:	f003 f9dc 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80047e8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80047ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	4619      	mov	r1, r3
 80047fc:	4814      	ldr	r0, [pc, #80]	; (8004850 <MX_GPIO_Init+0x174>)
 80047fe:	f003 f9cf 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004808:	2301      	movs	r3, #1
 800480a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004810:	2300      	movs	r3, #0
 8004812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4619      	mov	r1, r3
 800481a:	480d      	ldr	r0, [pc, #52]	; (8004850 <MX_GPIO_Init+0x174>)
 800481c:	f003 f9c0 	bl	8007ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004820:	2304      	movs	r3, #4
 8004822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004824:	2301      	movs	r3, #1
 8004826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	4619      	mov	r1, r3
 8004836:	4807      	ldr	r0, [pc, #28]	; (8004854 <MX_GPIO_Init+0x178>)
 8004838:	f003 f9b2 	bl	8007ba0 <HAL_GPIO_Init>

}
 800483c:	bf00      	nop
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	40020800 	.word	0x40020800
 800484c:	40020400 	.word	0x40020400
 8004850:	40020000 	.word	0x40020000
 8004854:	40020c00 	.word	0x40020c00

08004858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800485c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800485e:	e7fe      	b.n	800485e <Error_Handler+0x6>

08004860 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8004864:	2100      	movs	r1, #0
 8004866:	4808      	ldr	r0, [pc, #32]	; (8004888 <initMotor+0x28>)
 8004868:	f004 fea8 	bl	80095bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 800486c:	2108      	movs	r1, #8
 800486e:	4806      	ldr	r0, [pc, #24]	; (8004888 <initMotor+0x28>)
 8004870:	f004 fea4 	bl	80095bc <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004874:	210c      	movs	r1, #12
 8004876:	4805      	ldr	r0, [pc, #20]	; (800488c <initMotor+0x2c>)
 8004878:	f004 fea0 	bl	80095bc <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	f001 ff0f 	bl	80066a0 <HAL_Delay>
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2001f5cc 	.word	0x2001f5cc
 800488c:	2001f7a4 	.word	0x2001f7a4

08004890 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8004896:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <motorCtrlFlip+0xb0>)
 8004898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db0d      	blt.n	80048bc <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <motorCtrlFlip+0xb0>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <motorCtrlFlip+0xb4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048ae:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80048b0:	2201      	movs	r2, #1
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	4824      	ldr	r0, [pc, #144]	; (8004948 <motorCtrlFlip+0xb8>)
 80048b6:	f003 fb25 	bl	8007f04 <HAL_GPIO_WritePin>
 80048ba:	e010      	b.n	80048de <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <motorCtrlFlip+0xb0>)
 80048be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	425b      	negs	r3, r3
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80048ca:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <motorCtrlFlip+0xb4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048d2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	481b      	ldr	r0, [pc, #108]	; (8004948 <motorCtrlFlip+0xb8>)
 80048da:	f003 fb13 	bl	8007f04 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <motorCtrlFlip+0xbc>)
 80048e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db0e      	blt.n	8004906 <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80048e8:	4b18      	ldr	r3, [pc, #96]	; (800494c <motorCtrlFlip+0xbc>)
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <motorCtrlFlip+0xb4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80048f8:	2201      	movs	r2, #1
 80048fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048fe:	4812      	ldr	r0, [pc, #72]	; (8004948 <motorCtrlFlip+0xb8>)
 8004900:	f003 fb00 	bl	8007f04 <HAL_GPIO_WritePin>
 8004904:	e011      	b.n	800492a <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <motorCtrlFlip+0xbc>)
 8004908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800490c:	b29b      	uxth	r3, r3
 800490e:	425b      	negs	r3, r3
 8004910:	b29b      	uxth	r3, r3
 8004912:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <motorCtrlFlip+0xb4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800491e:	2200      	movs	r2, #0
 8004920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004924:	4808      	ldr	r0, [pc, #32]	; (8004948 <motorCtrlFlip+0xb8>)
 8004926:	f003 faed 	bl	8007f04 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <motorCtrlFlip+0xc0>)
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <motorCtrlFlip+0xc4>)
 8004932:	88bb      	ldrh	r3, [r7, #4]
 8004934:	8013      	strh	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20017e0c 	.word	0x20017e0c
 8004944:	2001f5cc 	.word	0x2001f5cc
 8004948:	40020800 	.word	0x40020800
 800494c:	20017e0e 	.word	0x20017e0e
 8004950:	2001f890 	.word	0x2001f890
 8004954:	2001f88e 	.word	0x2001f88e

08004958 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <suctionmotorCtrlFlip+0x1c>)
 800495e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <suctionmotorCtrlFlip+0x20>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20017e10 	.word	0x20017e10
 8004978:	2001f7a4 	.word	0x2001f7a4

0800497c <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	460a      	mov	r2, r1
 8004986:	80fb      	strh	r3, [r7, #6]
 8004988:	4613      	mov	r3, r2
 800498a:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 800498c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004990:	f240 628e 	movw	r2, #1678	; 0x68e
 8004994:	4293      	cmp	r3, r2
 8004996:	dd03      	ble.n	80049a0 <setMotor+0x24>
 8004998:	f240 638f 	movw	r3, #1679	; 0x68f
 800499c:	80fb      	strh	r3, [r7, #6]
 800499e:	e007      	b.n	80049b0 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 80049a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <setMotor+0x70>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	da02      	bge.n	80049b0 <setMotor+0x34>
 80049aa:	f64f 1371 	movw	r3, #63857	; 0xf971
 80049ae:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 80049b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049b4:	f240 628e 	movw	r2, #1678	; 0x68e
 80049b8:	4293      	cmp	r3, r2
 80049ba:	dd03      	ble.n	80049c4 <setMotor+0x48>
 80049bc:	f240 638f 	movw	r3, #1679	; 0x68f
 80049c0:	80bb      	strh	r3, [r7, #4]
 80049c2:	e007      	b.n	80049d4 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 80049c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <setMotor+0x70>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	da02      	bge.n	80049d4 <setMotor+0x58>
 80049ce:	f64f 1371 	movw	r3, #63857	; 0xf971
 80049d2:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 80049d4:	4a06      	ldr	r2, [pc, #24]	; (80049f0 <setMotor+0x74>)
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 80049da:	4a06      	ldr	r2, [pc, #24]	; (80049f4 <setMotor+0x78>)
 80049dc:	88bb      	ldrh	r3, [r7, #4]
 80049de:	8013      	strh	r3, [r2, #0]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	fffff972 	.word	0xfffff972
 80049f0:	20017e0c 	.word	0x20017e0c
 80049f4:	20017e0e 	.word	0x20017e0e

080049f8 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8004a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bfb8      	it	lt
 8004a0a:	425b      	neglt	r3, r3
 8004a0c:	b21a      	sxth	r2, r3
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <setsuctionMotor+0x38>)
 8004a10:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8004a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a16:	f240 3246 	movw	r2, #838	; 0x346
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	dd02      	ble.n	8004a24 <setsuctionMotor+0x2c>
 8004a1e:	f240 3347 	movw	r3, #839	; 0x347
 8004a22:	80fb      	strh	r3, [r7, #6]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20017e10 	.word	0x20017e10

08004a34 <updateSideSensorStatus>:

static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;

void updateSideSensorStatus(){
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <updateSideSensorStatus+0x44>)
 8004a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a42:	dc03      	bgt.n	8004a4c <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <updateSideSensorStatus+0x48>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <updateSideSensorStatus+0x48>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <updateSideSensorStatus+0x4c>)
 8004a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a5c:	dc03      	bgt.n	8004a66 <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <updateSideSensorStatus+0x50>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8004a64:	e002      	b.n	8004a6c <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <updateSideSensorStatus+0x50>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	2001f40c 	.word	0x2001f40c
 8004a7c:	2001f350 	.word	0x2001f350
 8004a80:	2001f394 	.word	0x2001f394
 8004a84:	2001f351 	.word	0x2001f351

08004a88 <setRunMode>:

void setRunMode(uint16_t num){
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	80fb      	strh	r3, [r7, #6]
	mode = num;
 8004a92:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <setRunMode+0x1c>)
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	8013      	strh	r3, [r2, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	2001f5b4 	.word	0x2001f5b4

08004aa8 <isCrossLine>:

bool isCrossLine()
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8004aae:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <isCrossLine+0x88>)
 8004ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abc:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <isCrossLine+0x88>)
 8004ac2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8004ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ad6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004b34 <isCrossLine+0x8c>
 8004ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	d50f      	bpl.n	8004b04 <isCrossLine+0x5c>
 8004ae4:	edd7 7a00 	vldr	s15, [r7]
 8004ae8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004b34 <isCrossLine+0x8c>
 8004aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	d506      	bpl.n	8004b04 <isCrossLine+0x5c>
		cnt++;
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <isCrossLine+0x90>)
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	3301      	adds	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <isCrossLine+0x90>)
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <isCrossLine+0x90>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <isCrossLine+0x90>)
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d903      	bls.n	8004b1a <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <isCrossLine+0x94>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <isCrossLine+0x94>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <isCrossLine+0x94>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	2001f3f0 	.word	0x2001f3f0
 8004b34:	442f0000 	.word	0x442f0000
 8004b38:	2001f370 	.word	0x2001f370
 8004b3c:	2001f372 	.word	0x2001f372

08004b40 <isContinuousCurvature>:

bool isContinuousCurvature()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	ed2d 8b02 	vpush	{d8}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8004b4e:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <isContinuousCurvature+0xc8>)
 8004b50:	ed93 8a00 	vldr	s16, [r3]
 8004b54:	f7fc fe2c 	bl	80017b0 <getTheta10mm>
 8004b58:	eef0 7a40 	vmov.f32	s15, s0
 8004b5c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004b60:	eef0 7ae7 	vabs.f32	s15, s15
 8004b64:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8004b68:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <isContinuousCurvature+0xcc>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <isContinuousCurvature+0xcc>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8004b7e:	6838      	ldr	r0, [r7, #0]
 8004b80:	f7fb fce2 	bl	8000548 <__aeabi_f2d>
 8004b84:	a31e      	add	r3, pc, #120	; (adr r3, 8004c00 <isContinuousCurvature+0xc0>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb ffb1 	bl	8000af0 <__aeabi_dcmple>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <isContinuousCurvature+0x6a>
 8004b94:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004b96:	edd3 7a00 	vldr	s15, [r3]
 8004b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004ba4:	edc3 7a00 	vstr	s15, [r3]
 8004ba8:	e003      	b.n	8004bb2 <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004bb4:	edd3 7a00 	vldr	s15, [r3]
 8004bb8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004c14 <isContinuousCurvature+0xd4>
 8004bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	db01      	blt.n	8004bca <isContinuousCurvature+0x8a>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004c18 <isContinuousCurvature+0xd8>
 8004bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	db02      	blt.n	8004be4 <isContinuousCurvature+0xa4>
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <isContinuousCurvature+0xd0>)
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <isContinuousCurvature+0xdc>)
 8004be2:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8004be4:	f7fc fde4 	bl	80017b0 <getTheta10mm>
 8004be8:	eef0 7a40 	vmov.f32	s15, s0
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <isContinuousCurvature+0xc8>)
 8004bee:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	ecbd 8b02 	vpop	{d8}
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	47ae147b 	.word	0x47ae147b
 8004c04:	3f947ae1 	.word	0x3f947ae1
 8004c08:	2001f374 	.word	0x2001f374
 8004c0c:	2001f354 	.word	0x2001f354
 8004c10:	2001f378 	.word	0x2001f378
 8004c14:	42200000 	.word	0x42200000
 8004c18:	447a0000 	.word	0x447a0000
 8004c1c:	447a0000 	.word	0x447a0000

08004c20 <isTargetDistance>:

bool isTargetDistance(float target){
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8004c2e:	f7fc fbeb 	bl	8001408 <getDistance10mm>
 8004c32:	eeb0 7a40 	vmov.f32	s14, s0
 8004c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d801      	bhi.n	8004c48 <isTargetDistance+0x28>
		ret = true;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <running>:

void running(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8004c5e:	f000 f9eb 	bl	8005038 <runningInit>
	startLineTrace();
 8004c62:	f7fd f93b 	bl	8001edc <startLineTrace>
	startVelocityControl();
 8004c66:	f7fe fcb1 	bl	80035cc <startVelocityControl>
	setTargetVelocity(min_velocity);
 8004c6a:	4b6b      	ldr	r3, [pc, #428]	; (8004e18 <running+0x1c4>)
 8004c6c:	edd3 7a00 	vldr	s15, [r3]
 8004c70:	eeb0 0a67 	vmov.f32	s0, s15
 8004c74:	f7fe fc12 	bl	800349c <setTargetVelocity>

	while(goal_flag == false){
 8004c78:	e0c2      	b.n	8004e00 <running+0x1ac>
		switch(pattern){
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b14      	cmp	r3, #20
 8004c7e:	f200 80b4 	bhi.w	8004dea <running+0x196>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <running+0x34>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004deb 	.word	0x08004deb
 8004c90:	08004deb 	.word	0x08004deb
 8004c94:	08004deb 	.word	0x08004deb
 8004c98:	08004deb 	.word	0x08004deb
 8004c9c:	08004d13 	.word	0x08004d13
 8004ca0:	08004deb 	.word	0x08004deb
 8004ca4:	08004deb 	.word	0x08004deb
 8004ca8:	08004deb 	.word	0x08004deb
 8004cac:	08004deb 	.word	0x08004deb
 8004cb0:	08004d27 	.word	0x08004d27
 8004cb4:	08004deb 	.word	0x08004deb
 8004cb8:	08004deb 	.word	0x08004deb
 8004cbc:	08004deb 	.word	0x08004deb
 8004cc0:	08004deb 	.word	0x08004deb
 8004cc4:	08004deb 	.word	0x08004deb
 8004cc8:	08004deb 	.word	0x08004deb
 8004ccc:	08004deb 	.word	0x08004deb
 8004cd0:	08004deb 	.word	0x08004deb
 8004cd4:	08004deb 	.word	0x08004deb
 8004cd8:	08004dbf 	.word	0x08004dbf

				  case 0:
					  if(getSideSensorStatusR() == true){
 8004cdc:	f000 ff8e 	bl	8005bfc <getSideSensorStatusR>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d07e      	beq.n	8004de4 <running+0x190>
						  start_goal_line_cnt++;
 8004ce6:	4b4d      	ldr	r3, [pc, #308]	; (8004e1c <running+0x1c8>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <running+0x1c8>)
 8004cf0:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <running+0x1cc>)
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d102      	bne.n	8004d00 <running+0xac>
 8004cfa:	f000 fa15 	bl	8005128 <startLogging>
 8004cfe:	e001      	b.n	8004d04 <running+0xb0>
						  else startVelocityUpdate();
 8004d00:	f000 fa2e 	bl	8005160 <startVelocityUpdate>

						  clearGoalJudgeDistance();
 8004d04:	f7fc fb48 	bl	8001398 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8004d08:	f7fc fb54 	bl	80013b4 <clearSideLineJudgeDistance>
						  pattern = 5;
 8004d0c:	2305      	movs	r3, #5
 8004d0e:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8004d10:	e068      	b.n	8004de4 <running+0x190>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8004d12:	f000 ff73 	bl	8005bfc <getSideSensorStatusR>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f083 0301 	eor.w	r3, r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <running+0xd2>
 8004d22:	230a      	movs	r3, #10
 8004d24:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8004d26:	f000 ff5d 	bl	8005be4 <getSideSensorStatusL>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <running+0xe6>
						  goal_judge_flag = false;
 8004d30:	4b3c      	ldr	r3, [pc, #240]	; (8004e24 <running+0x1d0>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004d36:	f7fc fb2f 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8004d3a:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <running+0x1d0>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	f083 0301 	eor.w	r3, r3, #1
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d015      	beq.n	8004d74 <running+0x120>
 8004d48:	f000 ff58 	bl	8005bfc <getSideSensorStatusR>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <running+0x120>
 8004d52:	f7fc fad9 	bl	8001308 <getGoalJudgeDistance>
 8004d56:	eeb0 7a40 	vmov.f32	s14, s0
 8004d5a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8004e28 <running+0x1d4>
 8004d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	db05      	blt.n	8004d74 <running+0x120>
						  goal_judge_flag = true;
 8004d68:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <running+0x1d0>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004d6e:	f7fc fb13 	bl	8001398 <clearGoalJudgeDistance>
 8004d72:	e019      	b.n	8004da8 <running+0x154>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8004d74:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <running+0x1d0>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <running+0x154>
 8004d7c:	f7fc fac4 	bl	8001308 <getGoalJudgeDistance>
 8004d80:	eeb0 7a40 	vmov.f32	s14, s0
 8004d84:	eddf 7a28 	vldr	s15, [pc, #160]	; 8004e28 <running+0x1d4>
 8004d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	db0a      	blt.n	8004da8 <running+0x154>
						  start_goal_line_cnt++;
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <running+0x1c8>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <running+0x1c8>)
 8004d9c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8004d9e:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <running+0x1d0>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004da4:	f7fc faf8 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8004da8:	4b1c      	ldr	r3, [pc, #112]	; (8004e1c <running+0x1c8>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d91b      	bls.n	8004de8 <running+0x194>
						  stopLogging();
 8004db0:	f000 f9ca 	bl	8005148 <stopLogging>
						  stopVelocityUpdate();
 8004db4:	f000 f9f6 	bl	80051a4 <stopVelocityUpdate>
						  pattern = 20;
 8004db8:	2314      	movs	r3, #20
 8004dba:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8004dbc:	e014      	b.n	8004de8 <running+0x194>

				  case 20:

					  setTargetVelocity(1.0);
 8004dbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004dc2:	f7fe fb6b 	bl	800349c <setTargetVelocity>
					  HAL_Delay(100);
 8004dc6:	2064      	movs	r0, #100	; 0x64
 8004dc8:	f001 fc6a 	bl	80066a0 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 8004dcc:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004e2c <running+0x1d8>
 8004dd0:	f7fe fb64 	bl	800349c <setTargetVelocity>
					  HAL_Delay(500);
 8004dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004dd8:	f001 fc62 	bl	80066a0 <HAL_Delay>

					  goal_flag = true;
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <running+0x1dc>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]

					  break;
 8004de2:	e002      	b.n	8004dea <running+0x196>
					  break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <running+0x196>
					  break;
 8004de8:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8004dea:	f7fd f8fd 	bl	8001fe8 <getCouseOutFlag>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <running+0x1ac>
		{
			stopLogging();
 8004df4:	f000 f9a8 	bl	8005148 <stopLogging>
			stopVelocityUpdate();
 8004df8:	f000 f9d4 	bl	80051a4 <stopVelocityUpdate>
		    pattern = 20;
 8004dfc:	2314      	movs	r3, #20
 8004dfe:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <running+0x1dc>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f47f af35 	bne.w	8004c7a <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	2001f35c 	.word	0x2001f35c
 8004e1c:	2001f344 	.word	0x2001f344
 8004e20:	2001f5b4 	.word	0x2001f5b4
 8004e24:	2001f353 	.word	0x2001f353
 8004e28:	428c0000 	.word	0x428c0000
 8004e2c:	00000000 	.word	0x00000000
 8004e30:	2001f352 	.word	0x2001f352

08004e34 <runningFlip>:

void runningFlip()
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8004e38:	4b75      	ldr	r3, [pc, #468]	; (8005010 <runningFlip+0x1dc>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80e5 	beq.w	800500c <runningFlip+0x1d8>
		setLED('G');
 8004e42:	2047      	movs	r0, #71	; 0x47
 8004e44:	f7fc fcd0 	bl	80017e8 <setLED>
		updateTargetVelocity();
 8004e48:	f000 fcf4 	bl	8005834 <updateTargetVelocity>

		if(isTargetDistance(10) == true){
 8004e4c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004e50:	f7ff fee6 	bl	8004c20 <isTargetDistance>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <runningFlip+0x42>
			saveLog();
 8004e5a:	f000 f933 	bl	80050c4 <saveLog>

			if(isContinuousCurvature() == true){
 8004e5e:	f7ff fe6f 	bl	8004b40 <isContinuousCurvature>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <runningFlip+0x3a>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <runningFlip+0x1e0>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8004e6e:	f7fc fad9 	bl	8001424 <clearDistance10mm>
			clearTheta10mm();
 8004e72:	f7fc fcab 	bl	80017cc <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8004e76:	f7ff fe17 	bl	8004aa8 <isCrossLine>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d026      	beq.n	8004ece <runningFlip+0x9a>
 8004e80:	4b65      	ldr	r3, [pc, #404]	; (8005018 <runningFlip+0x1e4>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f083 0301 	eor.w	r3, r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01f      	beq.n	8004ece <runningFlip+0x9a>
			cross_line_ignore_flag = true;
 8004e8e:	4b62      	ldr	r3, [pc, #392]	; (8005018 <runningFlip+0x1e4>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8004e94:	4b5f      	ldr	r3, [pc, #380]	; (8005014 <runningFlip+0x1e0>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8004e9a:	f7fc fa99 	bl	80013d0 <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8004e9e:	f7fc faa5 	bl	80013ec <clearSideLineIgnoreDistance>

			if(mode == 1){
 8004ea2:	4b5e      	ldr	r3, [pc, #376]	; (800501c <runningFlip+0x1e8>)
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d10b      	bne.n	8004ec2 <runningFlip+0x8e>
				correction_check_cnt_cross = 0;
 8004eaa:	4b5d      	ldr	r3, [pc, #372]	; (8005020 <runningFlip+0x1ec>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8004eb0:	f7fc fa1c 	bl	80012ec <getTotalDistance>
 8004eb4:	eef0 7a40 	vmov.f32	s15, s0
 8004eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ebc:	f7fd ff12 	bl	8002ce4 <saveCross>
			if(mode == 1){
 8004ec0:	e017      	b.n	8004ef2 <runningFlip+0xbe>
			}
			else{
				correction_check_cnt_cross = 0;
 8004ec2:	4b57      	ldr	r3, [pc, #348]	; (8005020 <runningFlip+0x1ec>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8004ec8:	f000 fd2a 	bl	8005920 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 8004ecc:	e011      	b.n	8004ef2 <runningFlip+0xbe>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 8004ece:	4b52      	ldr	r3, [pc, #328]	; (8005018 <runningFlip+0x1e4>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <runningFlip+0xbe>
 8004ed6:	f7fc fa43 	bl	8001360 <getCrossLineIgnoreDistance>
 8004eda:	eeb0 7a40 	vmov.f32	s14, s0
 8004ede:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005024 <runningFlip+0x1f0>
 8004ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	db02      	blt.n	8004ef2 <runningFlip+0xbe>
			cross_line_ignore_flag = false;
 8004eec:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <runningFlip+0x1e4>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 8004ef2:	f000 fe83 	bl	8005bfc <getSideSensorStatusR>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <runningFlip+0xd2>
			side_line_judge_flag = false;
 8004efc:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <runningFlip+0x1f4>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8004f02:	f7fc fa57 	bl	80013b4 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag== false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <runningFlip+0x1f4>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f083 0301 	eor.w	r3, r3, #1
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <runningFlip+0x10c>
 8004f14:	f000 fe66 	bl	8005be4 <getSideSensorStatusL>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <runningFlip+0x10c>
 8004f1e:	f7fc fa01 	bl	8001324 <getSideLineJudgeDistance>
 8004f22:	eeb0 7a40 	vmov.f32	s14, s0
 8004f26:	eddf 7a41 	vldr	s15, [pc, #260]	; 800502c <runningFlip+0x1f8>
 8004f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	db05      	blt.n	8004f40 <runningFlip+0x10c>
			side_line_judge_flag= true;
 8004f34:	4b3c      	ldr	r3, [pc, #240]	; (8005028 <runningFlip+0x1f4>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8004f3a:	f7fc fa3b 	bl	80013b4 <clearSideLineJudgeDistance>
 8004f3e:	e02f      	b.n	8004fa0 <runningFlip+0x16c>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8004f40:	4b39      	ldr	r3, [pc, #228]	; (8005028 <runningFlip+0x1f4>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02b      	beq.n	8004fa0 <runningFlip+0x16c>
 8004f48:	f7fc f9ec 	bl	8001324 <getSideLineJudgeDistance>
 8004f4c:	eeb0 7a40 	vmov.f32	s14, s0
 8004f50:	eddf 7a36 	vldr	s15, [pc, #216]	; 800502c <runningFlip+0x1f8>
 8004f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	db20      	blt.n	8004fa0 <runningFlip+0x16c>
			clearSideLineJudgeDistance();
 8004f5e:	f7fc fa29 	bl	80013b4 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 8004f62:	4b31      	ldr	r3, [pc, #196]	; (8005028 <runningFlip+0x1f4>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <runningFlip+0x1e0>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d017      	beq.n	8004fa0 <runningFlip+0x16c>
				continuous_curve_flag = false;
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <runningFlip+0x1e0>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <runningFlip+0x1fc>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <runningFlip+0x1e8>)
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10b      	bne.n	8004f9c <runningFlip+0x168>
					correction_check_cnt_side = 0;
 8004f84:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <runningFlip+0x200>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8004f8a:	f7fc f9af 	bl	80012ec <getTotalDistance>
 8004f8e:	eef0 7a40 	vmov.f32	s15, s0
 8004f92:	eeb0 0a67 	vmov.f32	s0, s15
 8004f96:	f7fd febd 	bl	8002d14 <saveSide>
 8004f9a:	e001      	b.n	8004fa0 <runningFlip+0x16c>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8004f9c:	f000 fd16 	bl	80059cc <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 8004fa0:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <runningFlip+0x1ec>)
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <runningFlip+0x1ec>)
 8004faa:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <runningFlip+0x200>)
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <runningFlip+0x200>)
 8004fb6:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <runningFlip+0x1ec>)
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d903      	bls.n	8004fcc <runningFlip+0x198>
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <runningFlip+0x1ec>)
 8004fc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fca:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <runningFlip+0x200>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d903      	bls.n	8004fe0 <runningFlip+0x1ac>
 8004fd8:	4b16      	ldr	r3, [pc, #88]	; (8005034 <runningFlip+0x200>)
 8004fda:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fde:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <runningFlip+0x200>)
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	2b96      	cmp	r3, #150	; 0x96
 8004fe6:	d803      	bhi.n	8004ff0 <runningFlip+0x1bc>
 8004fe8:	2047      	movs	r0, #71	; 0x47
 8004fea:	f7fc fccb 	bl	8001984 <setLED2>
 8004fee:	e002      	b.n	8004ff6 <runningFlip+0x1c2>
	    else setLED2('N');
 8004ff0:	204e      	movs	r0, #78	; 0x4e
 8004ff2:	f7fc fcc7 	bl	8001984 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <runningFlip+0x200>)
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	2b96      	cmp	r3, #150	; 0x96
 8004ffc:	d803      	bhi.n	8005006 <runningFlip+0x1d2>
 8004ffe:	2042      	movs	r0, #66	; 0x42
 8005000:	f7fc fbf2 	bl	80017e8 <setLED>
	    else setLED('G');
	}
}
 8005004:	e002      	b.n	800500c <runningFlip+0x1d8>
	    else setLED('G');
 8005006:	2047      	movs	r0, #71	; 0x47
 8005008:	f7fc fbee 	bl	80017e8 <setLED>
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2001f356 	.word	0x2001f356
 8005014:	2001f355 	.word	0x2001f355
 8005018:	2001f34e 	.word	0x2001f34e
 800501c:	2001f5b4 	.word	0x2001f5b4
 8005020:	2001f34a 	.word	0x2001f34a
 8005024:	42480000 	.word	0x42480000
 8005028:	2001f34f 	.word	0x2001f34f
 800502c:	42700000 	.word	0x42700000
 8005030:	2001f354 	.word	0x2001f354
 8005034:	2001f34c 	.word	0x2001f34c

08005038 <runningInit>:

void runningInit()
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
	if(mode == 1){
 800503c:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <runningInit+0x6c>)
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <runningInit+0x18>
		setLED('W');
 8005044:	2057      	movs	r0, #87	; 0x57
 8005046:	f7fc fbcf 	bl	80017e8 <setLED>
		ereaseLog();
 800504a:	f7fd fe93 	bl	8002d74 <ereaseLog>
 800504e:	e00e      	b.n	800506e <runningInit+0x36>
	}
	else
	{
		loadDistance();
 8005050:	f7fd ff0c 	bl	8002e6c <loadDistance>
		loadTheta();
 8005054:	f7fd ff48 	bl	8002ee8 <loadTheta>
		loadCross();
 8005058:	f7fd ff84 	bl	8002f64 <loadCross>
		loadSide();
 800505c:	f7fd ffc0 	bl	8002fe0 <loadSide>
		createVelocityTable();
 8005060:	f000 f8ac 	bl	80051bc <createVelocityTable>

		ereaseDebugLog();
 8005064:	f7fd fec2 	bl	8002dec <ereaseDebugLog>
		setLED2('G');
 8005068:	2047      	movs	r0, #71	; 0x47
 800506a:	f7fc fc8b 	bl	8001984 <setLED2>
	}

	clearCrossLineIgnoreDistance();
 800506e:	f7fc f9af 	bl	80013d0 <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005072:	f7fc f9bb 	bl	80013ec <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <runningInit+0x70>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <runningInit+0x74>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <runningInit+0x78>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <runningInit+0x7c>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <runningInit+0x80>)
 8005090:	2201      	movs	r2, #1
 8005092:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <runningInit+0x84>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <runningInit+0x88>)
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
}
 80050a0:	bf00      	nop
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2001f5b4 	.word	0x2001f5b4
 80050a8:	2001f344 	.word	0x2001f344
 80050ac:	2001f34e 	.word	0x2001f34e
 80050b0:	2001f34f 	.word	0x2001f34f
 80050b4:	2001f353 	.word	0x2001f353
 80050b8:	2001f354 	.word	0x2001f354
 80050bc:	2001f355 	.word	0x2001f355
 80050c0:	2001f356 	.word	0x2001f356

080050c4 <saveLog>:

void saveLog(){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80050c8:	4b15      	ldr	r3, [pc, #84]	; (8005120 <saveLog+0x5c>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 80050d0:	f7fc f99a 	bl	8001408 <getDistance10mm>
 80050d4:	eef0 7a40 	vmov.f32	s15, s0
 80050d8:	eeb0 0a67 	vmov.f32	s0, s15
 80050dc:	f7fd fdd2 	bl	8002c84 <saveDistance>
		saveTheta(getTheta10mm());
 80050e0:	f7fc fb66 	bl	80017b0 <getTheta10mm>
 80050e4:	eef0 7a40 	vmov.f32	s15, s0
 80050e8:	eeb0 0a67 	vmov.f32	s0, s15
 80050ec:	f7fd fde2 	bl	8002cb4 <saveTheta>
		//saveDebug(getTargetVelocity());
		//saveDebug(getCurrentVelocity());
		saveDebug(getpidplus());
		saveDebug(getTargetAcceleration());
	}
}
 80050f0:	e013      	b.n	800511a <saveLog+0x56>
	else if(velocity_update_flag == true){
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <saveLog+0x60>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00f      	beq.n	800511a <saveLog+0x56>
		saveDebug(getpidplus());
 80050fa:	f7fe f9b3 	bl	8003464 <getpidplus>
 80050fe:	eef0 7a40 	vmov.f32	s15, s0
 8005102:	eeb0 0a67 	vmov.f32	s0, s15
 8005106:	f7fd fe1d 	bl	8002d44 <saveDebug>
		saveDebug(getTargetAcceleration());
 800510a:	f7fe f9b9 	bl	8003480 <getTargetAcceleration>
 800510e:	eef0 7a40 	vmov.f32	s15, s0
 8005112:	eeb0 0a67 	vmov.f32	s0, s15
 8005116:	f7fd fe15 	bl	8002d44 <saveDebug>
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	2001f357 	.word	0x2001f357
 8005124:	2001f358 	.word	0x2001f358

08005128 <startLogging>:

void startLogging(){
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	clearDistance10mm();
 800512c:	f7fc f97a 	bl	8001424 <clearDistance10mm>
	clearTheta10mm();
 8005130:	f7fc fb4c 	bl	80017cc <clearTheta10mm>
	clearTotalDistance();
 8005134:	f7fc f922 	bl	800137c <clearTotalDistance>
	logging_flag = true;
 8005138:	4b02      	ldr	r3, [pc, #8]	; (8005144 <startLogging+0x1c>)
 800513a:	2201      	movs	r2, #1
 800513c:	701a      	strb	r2, [r3, #0]
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2001f357 	.word	0x2001f357

08005148 <stopLogging>:

void stopLogging()
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
	logging_flag = false;
 800514c:	4b03      	ldr	r3, [pc, #12]	; (800515c <stopLogging+0x14>)
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
}
 8005152:	bf00      	nop
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	2001f357 	.word	0x2001f357

08005160 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005164:	f7fc f95e 	bl	8001424 <clearDistance10mm>
	clearTotalDistance();
 8005168:	f7fc f908 	bl	800137c <clearTotalDistance>
	velocity_table_idx = 0;
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <startVelocityUpdate+0x30>)
 800516e:	2200      	movs	r2, #0
 8005170:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <startVelocityUpdate+0x34>)
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <startVelocityUpdate+0x38>)
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <startVelocityUpdate+0x3c>)
 8005182:	2200      	movs	r2, #0
 8005184:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <startVelocityUpdate+0x40>)
 8005188:	2200      	movs	r2, #0
 800518a:	801a      	strh	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	bd80      	pop	{r7, pc}
 8005190:	2001f898 	.word	0x2001f898
 8005194:	2001f894 	.word	0x2001f894
 8005198:	2001f358 	.word	0x2001f358
 800519c:	2001f346 	.word	0x2001f346
 80051a0:	2001f348 	.word	0x2001f348

080051a4 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <stopVelocityUpdate+0x14>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	2001f358 	.word	0x2001f358

080051bc <createVelocityTable>:

void createVelocityTable(){
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b08d      	sub	sp, #52	; 0x34
 80051c0:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80051c2:	f7fd ff89 	bl	80030d8 <getDistanceArrayPointer>
 80051c6:	6178      	str	r0, [r7, #20]
	p_theta = getThetaArrayPointer();
 80051c8:	f7fd ff90 	bl	80030ec <getThetaArrayPointer>
 80051cc:	6138      	str	r0, [r7, #16]
	float temp_distance, temp_theta;

	uint16_t log_size = getDistanceLogSize();
 80051ce:	f7fd fe1d 	bl	8002e0c <getDistanceLogSize>
 80051d2:	4603      	mov	r3, r0
 80051d4:	81fb      	strh	r3, [r7, #14]

	uint16_t crossline_idx = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	857b      	strh	r3, [r7, #42]	; 0x2a
	float total_distance = 0;
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i = 0; i < log_size; i++){
 80051e0:	2300      	movs	r3, #0
 80051e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80051e4:	e079      	b.n	80052da <createVelocityTable+0x11e>
		temp_distance = p_distance[i];
 80051e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4413      	add	r3, r2
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80051f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_theta == 0) temp_theta = 0.00001;
 80051fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005202:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	d101      	bne.n	8005210 <createVelocityTable+0x54>
 800520c:	4b4f      	ldr	r3, [pc, #316]	; (800534c <createVelocityTable+0x190>)
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
		float radius = fabs(temp_distance / temp_theta);
 8005210:	edd7 6a02 	vldr	s13, [r7, #8]
 8005214:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521c:	eef0 7ae7 	vabs.f32	s15, s15
 8005220:	edc7 7a07 	vstr	s15, [r7, #28]
		if(radius >= straight_radius) radius = straight_radius;
 8005224:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <createVelocityTable+0x194>)
 8005226:	edd3 7a00 	vldr	s15, [r3]
 800522a:	ed97 7a07 	vldr	s14, [r7, #28]
 800522e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	db02      	blt.n	800523e <createVelocityTable+0x82>
 8005238:	4b45      	ldr	r3, [pc, #276]	; (8005350 <createVelocityTable+0x194>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	61fb      	str	r3, [r7, #28]
		velocity_table[i] = radius2Velocity(radius);
 800523e:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8005240:	ed97 0a07 	vldr	s0, [r7, #28]
 8005244:	f000 f894 	bl	8005370 <radius2Velocity>
 8005248:	eef0 7a40 	vmov.f32	s15, s0
 800524c:	4a41      	ldr	r2, [pc, #260]	; (8005354 <createVelocityTable+0x198>)
 800524e:	00a3      	lsls	r3, r4, #2
 8005250:	4413      	add	r3, r2
 8005252:	edc3 7a00 	vstr	s15, [r3]

		//Forced maximum speed on the crossline
		total_distance += temp_distance;
 8005256:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800525a:	edd7 7a02 	vldr	s15, [r7, #8]
 800525e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005262:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float crossline_distance = getCrossLog(crossline_idx);
 8005266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005268:	4618      	mov	r0, r3
 800526a:	f7fd ff5f 	bl	800312c <getCrossLog>
 800526e:	ed87 0a01 	vstr	s0, [r7, #4]
		if(crossline_distance + 60 >= total_distance && total_distance >= crossline_distance - 60){
 8005272:	edd7 7a01 	vldr	s15, [r7, #4]
 8005276:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005358 <createVelocityTable+0x19c>
 800527a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800527e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528a:	d813      	bhi.n	80052b4 <createVelocityTable+0xf8>
 800528c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005290:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005358 <createVelocityTable+0x19c>
 8005294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005298:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800529c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	db06      	blt.n	80052b4 <createVelocityTable+0xf8>
			 velocity_table[i] = max_velocity;
 80052a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052a8:	4a2c      	ldr	r2, [pc, #176]	; (800535c <createVelocityTable+0x1a0>)
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	4929      	ldr	r1, [pc, #164]	; (8005354 <createVelocityTable+0x198>)
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	601a      	str	r2, [r3, #0]
		}

		if(total_distance >= crossline_distance + 60){
 80052b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80052b8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005358 <createVelocityTable+0x19c>
 80052bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80052c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052cc:	db02      	blt.n	80052d4 <createVelocityTable+0x118>
			crossline_idx++;
 80052ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052d0:	3301      	adds	r3, #1
 80052d2:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t i = 0; i < log_size; i++){
 80052d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052d6:	3301      	adds	r3, #1
 80052d8:	847b      	strh	r3, [r7, #34]	; 0x22
 80052da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d381      	bcc.n	80051e6 <createVelocityTable+0x2a>
		}

	}
	for(uint16_t i = log_size; i < 6000; i++){
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	837b      	strh	r3, [r7, #26]
 80052e6:	e008      	b.n	80052fa <createVelocityTable+0x13e>
		velocity_table[i] = 1.8;
 80052e8:	8b7b      	ldrh	r3, [r7, #26]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <createVelocityTable+0x198>)
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <createVelocityTable+0x1a4>)
 80052f2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = log_size; i < 6000; i++){
 80052f4:	8b7b      	ldrh	r3, [r7, #26]
 80052f6:	3301      	adds	r3, #1
 80052f8:	837b      	strh	r3, [r7, #26]
 80052fa:	8b7b      	ldrh	r3, [r7, #26]
 80052fc:	f241 726f 	movw	r2, #5999	; 0x176f
 8005300:	4293      	cmp	r3, r2
 8005302:	d9f1      	bls.n	80052e8 <createVelocityTable+0x12c>
	}


	addDecelerationDistanceMergin(velocity_table, 15); //8
 8005304:	210f      	movs	r1, #15
 8005306:	4813      	ldr	r0, [pc, #76]	; (8005354 <createVelocityTable+0x198>)
 8005308:	f000 f8b6 	bl	8005478 <addDecelerationDistanceMergin>
	addAccelerationDistanceMergin(velocity_table, 5); //15
 800530c:	2105      	movs	r1, #5
 800530e:	4811      	ldr	r0, [pc, #68]	; (8005354 <createVelocityTable+0x198>)
 8005310:	f000 f900 	bl	8005514 <addAccelerationDistanceMergin>
	//shiftVelocityTable(velocity_table, 1);

	velocity_table[0] = min_velocity;
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <createVelocityTable+0x1a8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <createVelocityTable+0x198>)
 800531a:	6013      	str	r3, [r2, #0]

	decelerateProcessing(deceleration, p_distance);
 800531c:	4b12      	ldr	r3, [pc, #72]	; (8005368 <createVelocityTable+0x1ac>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	6978      	ldr	r0, [r7, #20]
 8005324:	eeb0 0a67 	vmov.f32	s0, s15
 8005328:	f000 f946 	bl	80055b8 <decelerateProcessing>
	accelerateProcessing(acceleration, p_distance);
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <createVelocityTable+0x1b0>)
 800532e:	edd3 7a00 	vldr	s15, [r3]
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	eeb0 0a67 	vmov.f32	s0, s15
 8005338:	f000 f9de 	bl	80056f8 <accelerateProcessing>

	CreateAcceleration(p_distance);
 800533c:	6978      	ldr	r0, [r7, #20]
 800533e:	f000 fb9b 	bl	8005a78 <CreateAcceleration>

}
 8005342:	bf00      	nop
 8005344:	3734      	adds	r7, #52	; 0x34
 8005346:	46bd      	mov	sp, r7
 8005348:	bd90      	pop	{r4, r7, pc}
 800534a:	bf00      	nop
 800534c:	3727c5ac 	.word	0x3727c5ac
 8005350:	2001f36c 	.word	0x2001f36c
 8005354:	20017e14 	.word	0x20017e14
 8005358:	42700000 	.word	0x42700000
 800535c:	2001f360 	.word	0x2001f360
 8005360:	3fe66666 	.word	0x3fe66666
 8005364:	2001f35c 	.word	0x2001f35c
 8005368:	2001f368 	.word	0x2001f368
 800536c:	2001f364 	.word	0x2001f364

08005370 <radius2Velocity>:

float radius2Velocity(float radius){
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	ed87 0a01 	vstr	s0, [r7, #4]
	float velocity;

	if(mode == 2){
 800537a:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <radius2Velocity+0xf8>)
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d118      	bne.n	80053b4 <radius2Velocity+0x44>
		velocity = radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 8005382:	4b3a      	ldr	r3, [pc, #232]	; (800546c <radius2Velocity+0xfc>)
 8005384:	ed93 7a00 	vldr	s14, [r3]
 8005388:	4b39      	ldr	r3, [pc, #228]	; (8005470 <radius2Velocity+0x100>)
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005392:	4b38      	ldr	r3, [pc, #224]	; (8005474 <radius2Velocity+0x104>)
 8005394:	edd3 7a00 	vldr	s15, [r3]
 8005398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539c:	edd7 7a01 	vldr	s15, [r7, #4]
 80053a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053a4:	4b32      	ldr	r3, [pc, #200]	; (8005470 <radius2Velocity+0x100>)
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ae:	edc7 7a03 	vstr	s15, [r7, #12]
 80053b2:	e04a      	b.n	800544a <radius2Velocity+0xda>
	}
	else if(mode == 3){
 80053b4:	4b2c      	ldr	r3, [pc, #176]	; (8005468 <radius2Velocity+0xf8>)
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d146      	bne.n	800544a <radius2Velocity+0xda>
		velocity = 1e-3 * radius * radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fb f8c3 	bl	8000548 <__aeabi_f2d>
 80053c2:	a327      	add	r3, pc, #156	; (adr r3, 8005460 <radius2Velocity+0xf0>)
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f7fb f916 	bl	80005f8 <__aeabi_dmul>
 80053cc:	4603      	mov	r3, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	4625      	mov	r5, r4
 80053d2:	461c      	mov	r4, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fb f8b7 	bl	8000548 <__aeabi_f2d>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb f909 	bl	80005f8 <__aeabi_dmul>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	4625      	mov	r5, r4
 80053ec:	461c      	mov	r4, r3
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <radius2Velocity+0xfc>)
 80053f0:	ed93 7a00 	vldr	s14, [r3]
 80053f4:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <radius2Velocity+0x100>)
 80053f6:	edd3 7a00 	vldr	s15, [r3]
 80053fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <radius2Velocity+0x104>)
 8005400:	edd3 7a00 	vldr	s15, [r3]
 8005404:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005408:	ee16 0a90 	vmov	r0, s13
 800540c:	f7fb f89c 	bl	8000548 <__aeabi_f2d>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4620      	mov	r0, r4
 8005416:	4629      	mov	r1, r5
 8005418:	f7fb f8ee 	bl	80005f8 <__aeabi_dmul>
 800541c:	4603      	mov	r3, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4625      	mov	r5, r4
 8005422:	461c      	mov	r4, r3
 8005424:	4b12      	ldr	r3, [pc, #72]	; (8005470 <radius2Velocity+0x100>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f7fb f88d 	bl	8000548 <__aeabi_f2d>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	f7fa ff29 	bl	800028c <__adddf3>
 800543a:	4603      	mov	r3, r0
 800543c:	460c      	mov	r4, r1
 800543e:	4618      	mov	r0, r3
 8005440:	4621      	mov	r1, r4
 8005442:	f7fb fbd1 	bl	8000be8 <__aeabi_d2f>
 8005446:	4603      	mov	r3, r0
 8005448:	60fb      	str	r3, [r7, #12]
	}

	return velocity;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	ee07 3a90 	vmov	s15, r3
}
 8005450:	eeb0 0a67 	vmov.f32	s0, s15
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bdb0      	pop	{r4, r5, r7, pc}
 800545a:	bf00      	nop
 800545c:	f3af 8000 	nop.w
 8005460:	d2f1a9fc 	.word	0xd2f1a9fc
 8005464:	3f50624d 	.word	0x3f50624d
 8005468:	2001f5b4 	.word	0x2001f5b4
 800546c:	2001f360 	.word	0x2001f360
 8005470:	2001f35c 	.word	0x2001f35c
 8005474:	2001f36c 	.word	0x2001f36c

08005478 <addDecelerationDistanceMergin>:

void addDecelerationDistanceMergin(float *table, int16_t mergin_size)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
	uint16_t idx = mergin_size;
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8005488:	8afb      	ldrh	r3, [r7, #22]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	4413      	add	r3, r2
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1){
 8005494:	e033      	b.n	80054fe <addDecelerationDistanceMergin+0x86>
		if(pre_target_velocity > table[idx]){
 8005496:	8afb      	ldrh	r3, [r7, #22]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	edd3 7a00 	vldr	s15, [r3]
 80054a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80054a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ae:	dd1d      	ble.n	80054ec <addDecelerationDistanceMergin+0x74>
			float low_velocity = table[idx];
 80054b0:	8afb      	ldrh	r3, [r7, #22]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	4413      	add	r3, r2
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	8afa      	ldrh	r2, [r7, #22]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	81fb      	strh	r3, [r7, #14]
 80054c4:	e008      	b.n	80054d8 <addDecelerationDistanceMergin+0x60>
				table[i] = low_velocity;
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 80054d2:	89fb      	ldrh	r3, [r7, #14]
 80054d4:	3301      	adds	r3, #1
 80054d6:	81fb      	strh	r3, [r7, #14]
 80054d8:	89fa      	ldrh	r2, [r7, #14]
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d3f2      	bcc.n	80054c6 <addDecelerationDistanceMergin+0x4e>
			}
			pre_target_velocity = table[idx];
 80054e0:	8afb      	ldrh	r3, [r7, #22]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 80054ec:	8afb      	ldrh	r3, [r7, #22]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	613b      	str	r3, [r7, #16]

		idx++;
 80054f8:	8afb      	ldrh	r3, [r7, #22]
 80054fa:	3301      	adds	r3, #1
 80054fc:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1){
 80054fe:	8afb      	ldrh	r3, [r7, #22]
 8005500:	f241 726f 	movw	r2, #5999	; 0x176f
 8005504:	4293      	cmp	r3, r2
 8005506:	d9c6      	bls.n	8005496 <addDecelerationDistanceMergin+0x1e>
	}
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <addAccelerationDistanceMergin>:

void addAccelerationDistanceMergin(float *table, int16_t mergin_size)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8005524:	8afb      	ldrh	r3, [r7, #22]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4413      	add	r3, r2
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1 - mergin_size){
 8005530:	e034      	b.n	800559c <addAccelerationDistanceMergin+0x88>
		if(pre_target_velocity < table[idx]){
 8005532:	8afb      	ldrh	r3, [r7, #22]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	edd3 7a00 	vldr	s15, [r3]
 800553e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	d51e      	bpl.n	800558a <addAccelerationDistanceMergin+0x76>
			float low_velocity = pre_target_velocity;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 8005550:	8afb      	ldrh	r3, [r7, #22]
 8005552:	81fb      	strh	r3, [r7, #14]
 8005554:	e008      	b.n	8005568 <addAccelerationDistanceMergin+0x54>
				table[i] = low_velocity;
 8005556:	89fb      	ldrh	r3, [r7, #14]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	3301      	adds	r3, #1
 8005566:	81fb      	strh	r3, [r7, #14]
 8005568:	89fa      	ldrh	r2, [r7, #14]
 800556a:	8af9      	ldrh	r1, [r7, #22]
 800556c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005570:	440b      	add	r3, r1
 8005572:	429a      	cmp	r2, r3
 8005574:	dbef      	blt.n	8005556 <addAccelerationDistanceMergin+0x42>
			}
			idx += mergin_size;
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	8afb      	ldrh	r3, [r7, #22]
 800557a:	4413      	add	r3, r2
 800557c:	82fb      	strh	r3, [r7, #22]
			pre_target_velocity = table[idx];
 800557e:	8afb      	ldrh	r3, [r7, #22]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 800558a:	8afb      	ldrh	r3, [r7, #22]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	613b      	str	r3, [r7, #16]

		idx++;
 8005596:	8afb      	ldrh	r3, [r7, #22]
 8005598:	3301      	adds	r3, #1
 800559a:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1 - mergin_size){
 800559c:	8afa      	ldrh	r2, [r7, #22]
 800559e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055a2:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 80055a6:	330f      	adds	r3, #15
 80055a8:	429a      	cmp	r2, r3
 80055aa:	ddc2      	ble.n	8005532 <addAccelerationDistanceMergin+0x1e>
	}
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <decelerateProcessing>:

void decelerateProcessing(const float am, const float *p_distance){
 80055b8:	b5b0      	push	{r4, r5, r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	ed87 0a01 	vstr	s0, [r7, #4]
 80055c2:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 80055c4:	f7fd fc22 	bl	8002e0c <getDistanceLogSize>
 80055c8:	4603      	mov	r3, r0
 80055ca:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 80055cc:	8abb      	ldrh	r3, [r7, #20]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	82fb      	strh	r3, [r7, #22]
 80055d2:	e07f      	b.n	80056d4 <decelerateProcessing+0x11c>
		float v_diff = velocity_table[i-1] - velocity_table[i];
 80055d4:	8afb      	ldrh	r3, [r7, #22]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	4a45      	ldr	r2, [pc, #276]	; (80056f0 <decelerateProcessing+0x138>)
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	ed93 7a00 	vldr	s14, [r3]
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	4a42      	ldr	r2, [pc, #264]	; (80056f0 <decelerateProcessing+0x138>)
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	edd3 7a00 	vldr	s15, [r3]
 80055ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f2:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 80055f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80055fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005602:	dd64      	ble.n	80056ce <decelerateProcessing+0x116>
			float t = p_distance[i]*1e-3 / v_diff;
 8005604:	8afb      	ldrh	r3, [r7, #22]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fa ff9a 	bl	8000548 <__aeabi_f2d>
 8005614:	a334      	add	r3, pc, #208	; (adr r3, 80056e8 <decelerateProcessing+0x130>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa ffed 	bl	80005f8 <__aeabi_dmul>
 800561e:	4603      	mov	r3, r0
 8005620:	460c      	mov	r4, r1
 8005622:	4625      	mov	r5, r4
 8005624:	461c      	mov	r4, r3
 8005626:	6938      	ldr	r0, [r7, #16]
 8005628:	f7fa ff8e 	bl	8000548 <__aeabi_f2d>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4620      	mov	r0, r4
 8005632:	4629      	mov	r1, r5
 8005634:	f7fb f90a 	bl	800084c <__aeabi_ddiv>
 8005638:	4603      	mov	r3, r0
 800563a:	460c      	mov	r4, r1
 800563c:	4618      	mov	r0, r3
 800563e:	4621      	mov	r1, r4
 8005640:	f7fb fad2 	bl	8000be8 <__aeabi_d2f>
 8005644:	4603      	mov	r3, r0
 8005646:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 8005648:	edd7 6a04 	vldr	s13, [r7, #16]
 800564c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005654:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 8005658:	ed97 7a02 	vldr	s14, [r7, #8]
 800565c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005668:	dd31      	ble.n	80056ce <decelerateProcessing+0x116>
				velocity_table[i-1] = velocity_table[i] + am * p_distance[i]*1e-3;
 800566a:	8afb      	ldrh	r3, [r7, #22]
 800566c:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <decelerateProcessing+0x138>)
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fa ff67 	bl	8000548 <__aeabi_f2d>
 800567a:	4604      	mov	r4, r0
 800567c:	460d      	mov	r5, r1
 800567e:	8afb      	ldrh	r3, [r7, #22]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	ed93 7a00 	vldr	s14, [r3]
 800568a:	edd7 7a01 	vldr	s15, [r7, #4]
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	ee17 0a90 	vmov	r0, s15
 8005696:	f7fa ff57 	bl	8000548 <__aeabi_f2d>
 800569a:	a313      	add	r3, pc, #76	; (adr r3, 80056e8 <decelerateProcessing+0x130>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ffaa 	bl	80005f8 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa fdee 	bl	800028c <__adddf3>
 80056b0:	4603      	mov	r3, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	4619      	mov	r1, r3
 80056b6:	4622      	mov	r2, r4
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	1e5c      	subs	r4, r3, #1
 80056bc:	4608      	mov	r0, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	f7fb fa92 	bl	8000be8 <__aeabi_d2f>
 80056c4:	4601      	mov	r1, r0
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <decelerateProcessing+0x138>)
 80056c8:	00a3      	lsls	r3, r4, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	6019      	str	r1, [r3, #0]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	82fb      	strh	r3, [r7, #22]
 80056d4:	8afb      	ldrh	r3, [r7, #22]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f47f af7c 	bne.w	80055d4 <decelerateProcessing+0x1c>
			}
		}
	}
}
 80056dc:	bf00      	nop
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bdb0      	pop	{r4, r5, r7, pc}
 80056e4:	f3af 8000 	nop.w
 80056e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80056ec:	3f50624d 	.word	0x3f50624d
 80056f0:	20017e14 	.word	0x20017e14
 80056f4:	00000000 	.word	0x00000000

080056f8 <accelerateProcessing>:

void accelerateProcessing(const float am, const float *p_distance){
 80056f8:	b5b0      	push	{r4, r5, r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005702:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 8005704:	f7fd fb82 	bl	8002e0c <getDistanceLogSize>
 8005708:	4603      	mov	r3, r0
 800570a:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 800570c:	2300      	movs	r3, #0
 800570e:	82fb      	strh	r3, [r7, #22]
 8005710:	e07f      	b.n	8005812 <accelerateProcessing+0x11a>
		float v_diff = velocity_table[i+1] - velocity_table[i];
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	3301      	adds	r3, #1
 8005716:	4a46      	ldr	r2, [pc, #280]	; (8005830 <accelerateProcessing+0x138>)
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	ed93 7a00 	vldr	s14, [r3]
 8005720:	8afb      	ldrh	r3, [r7, #22]
 8005722:	4a43      	ldr	r2, [pc, #268]	; (8005830 <accelerateProcessing+0x138>)
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	edd3 7a00 	vldr	s15, [r3]
 800572c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005730:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 8005734:	edd7 7a04 	vldr	s15, [r7, #16]
 8005738:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005740:	dd64      	ble.n	800580c <accelerateProcessing+0x114>
			float t = p_distance[i]*1e-3 / v_diff;
 8005742:	8afb      	ldrh	r3, [r7, #22]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	4413      	add	r3, r2
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f7fa fefb 	bl	8000548 <__aeabi_f2d>
 8005752:	a335      	add	r3, pc, #212	; (adr r3, 8005828 <accelerateProcessing+0x130>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f7fa ff4e 	bl	80005f8 <__aeabi_dmul>
 800575c:	4603      	mov	r3, r0
 800575e:	460c      	mov	r4, r1
 8005760:	4625      	mov	r5, r4
 8005762:	461c      	mov	r4, r3
 8005764:	6938      	ldr	r0, [r7, #16]
 8005766:	f7fa feef 	bl	8000548 <__aeabi_f2d>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fb f86b 	bl	800084c <__aeabi_ddiv>
 8005776:	4603      	mov	r3, r0
 8005778:	460c      	mov	r4, r1
 800577a:	4618      	mov	r0, r3
 800577c:	4621      	mov	r1, r4
 800577e:	f7fb fa33 	bl	8000be8 <__aeabi_d2f>
 8005782:	4603      	mov	r3, r0
 8005784:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 8005786:	edd7 6a04 	vldr	s13, [r7, #16]
 800578a:	ed97 7a03 	vldr	s14, [r7, #12]
 800578e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005792:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 8005796:	ed97 7a02 	vldr	s14, [r7, #8]
 800579a:	edd7 7a01 	vldr	s15, [r7, #4]
 800579e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	dd31      	ble.n	800580c <accelerateProcessing+0x114>
				velocity_table[i+1] = velocity_table[i] + am * p_distance[i]*1e-3;
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <accelerateProcessing+0x138>)
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fa fec8 	bl	8000548 <__aeabi_f2d>
 80057b8:	4604      	mov	r4, r0
 80057ba:	460d      	mov	r5, r1
 80057bc:	8afb      	ldrh	r3, [r7, #22]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	4413      	add	r3, r2
 80057c4:	ed93 7a00 	vldr	s14, [r3]
 80057c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80057cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d0:	ee17 0a90 	vmov	r0, s15
 80057d4:	f7fa feb8 	bl	8000548 <__aeabi_f2d>
 80057d8:	a313      	add	r3, pc, #76	; (adr r3, 8005828 <accelerateProcessing+0x130>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa ff0b 	bl	80005f8 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa fd4f 	bl	800028c <__adddf3>
 80057ee:	4603      	mov	r3, r0
 80057f0:	460c      	mov	r4, r1
 80057f2:	4619      	mov	r1, r3
 80057f4:	4622      	mov	r2, r4
 80057f6:	8afb      	ldrh	r3, [r7, #22]
 80057f8:	1c5c      	adds	r4, r3, #1
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	f7fb f9f3 	bl	8000be8 <__aeabi_d2f>
 8005802:	4601      	mov	r1, r0
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <accelerateProcessing+0x138>)
 8005806:	00a3      	lsls	r3, r4, #2
 8005808:	4413      	add	r3, r2
 800580a:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 800580c:	8afb      	ldrh	r3, [r7, #22]
 800580e:	3301      	adds	r3, #1
 8005810:	82fb      	strh	r3, [r7, #22]
 8005812:	8afa      	ldrh	r2, [r7, #22]
 8005814:	8abb      	ldrh	r3, [r7, #20]
 8005816:	3b01      	subs	r3, #1
 8005818:	429a      	cmp	r2, r3
 800581a:	f77f af7a 	ble.w	8005712 <accelerateProcessing+0x1a>
			}
		}
	}
}
 800581e:	bf00      	nop
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bdb0      	pop	{r4, r5, r7, pc}
 8005826:	bf00      	nop
 8005828:	d2f1a9fc 	.word	0xd2f1a9fc
 800582c:	3f50624d 	.word	0x3f50624d
 8005830:	20017e14 	.word	0x20017e14

08005834 <updateTargetVelocity>:

void updateTargetVelocity(){
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005838:	4b33      	ldr	r3, [pc, #204]	; (8005908 <updateTargetVelocity+0xd4>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d061      	beq.n	8005904 <updateTargetVelocity+0xd0>
		if(getTotalDistance() >= ref_distance){
 8005840:	f7fb fd54 	bl	80012ec <getTotalDistance>
 8005844:	eeb0 7a40 	vmov.f32	s14, s0
 8005848:	4b30      	ldr	r3, [pc, #192]	; (800590c <updateTargetVelocity+0xd8>)
 800584a:	edd3 7a00 	vldr	s15, [r3]
 800584e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005856:	db14      	blt.n	8005882 <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005858:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <updateTargetVelocity+0xdc>)
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fd fc4f 	bl	8003100 <getDistanceLog>
 8005862:	eeb0 7a40 	vmov.f32	s14, s0
 8005866:	4b29      	ldr	r3, [pc, #164]	; (800590c <updateTargetVelocity+0xd8>)
 8005868:	edd3 7a00 	vldr	s15, [r3]
 800586c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005870:	4b26      	ldr	r3, [pc, #152]	; (800590c <updateTargetVelocity+0xd8>)
 8005872:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <updateTargetVelocity+0xdc>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	4b24      	ldr	r3, [pc, #144]	; (8005910 <updateTargetVelocity+0xdc>)
 8005880:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005882:	f7fd fac3 	bl	8002e0c <getDistanceLogSize>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	4b21      	ldr	r3, [pc, #132]	; (8005910 <updateTargetVelocity+0xdc>)
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d806      	bhi.n	80058a0 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005892:	f7fd fabb 	bl	8002e0c <getDistanceLogSize>
 8005896:	4603      	mov	r3, r0
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <updateTargetVelocity+0xdc>)
 800589e:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <updateTargetVelocity+0xdc>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <updateTargetVelocity+0xe0>)
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	edd3 7a00 	vldr	s15, [r3]
 80058ae:	eeb0 0a67 	vmov.f32	s0, s15
 80058b2:	f7fd fdf3 	bl	800349c <setTargetVelocity>
		setTargetAcceleration(acceleration_table[velocity_table_idx]);
 80058b6:	4b16      	ldr	r3, [pc, #88]	; (8005910 <updateTargetVelocity+0xdc>)
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <updateTargetVelocity+0xe4>)
 80058be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ca:	eeb0 0a67 	vmov.f32	s0, s15
 80058ce:	f7fd fdf5 	bl	80034bc <setTargetAcceleration>

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 80058d2:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <updateTargetVelocity+0xdc>)
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <updateTargetVelocity+0xe0>)
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	ed93 7a00 	vldr	s14, [r3]
 80058e0:	4b0e      	ldr	r3, [pc, #56]	; (800591c <updateTargetVelocity+0xe8>)
 80058e2:	edd3 7a00 	vldr	s15, [r3]
 80058e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ee:	d501      	bpl.n	80058f4 <updateTargetVelocity+0xc0>
			setClearFlagOfVelocityControlI();
 80058f0:	f7fd fe8a 	bl	8003608 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <updateTargetVelocity+0xdc>)
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	4a06      	ldr	r2, [pc, #24]	; (8005914 <updateTargetVelocity+0xe0>)
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a06      	ldr	r2, [pc, #24]	; (800591c <updateTargetVelocity+0xe8>)
 8005902:	6013      	str	r3, [r2, #0]
	}
}
 8005904:	bf00      	nop
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2001f358 	.word	0x2001f358
 800590c:	2001f894 	.word	0x2001f894
 8005910:	2001f898 	.word	0x2001f898
 8005914:	20017e14 	.word	0x20017e14
 8005918:	2001cc34 	.word	0x2001cc34
 800591c:	2001f37c 	.word	0x2001f37c

08005920 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005926:	e03f      	b.n	80059a8 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005928:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7fd fbfd 	bl	800312c <getCrossLog>
 8005932:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005936:	f7fb fcd9 	bl	80012ec <getTotalDistance>
 800593a:	eeb0 7a40 	vmov.f32	s14, s0
 800593e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005946:	eef0 7ae7 	vabs.f32	s15, s15
 800594a:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 800594e:	edd7 7a00 	vldr	s15, [r7]
 8005952:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80059c4 <correctionTotalDistanceFromCrossLine+0xa4>
 8005956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595e:	d80d      	bhi.n	800597c <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005962:	2200      	movs	r2, #0
 8005964:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005966:	ed97 0a01 	vldr	s0, [r7, #4]
 800596a:	f7fb fce9 	bl	8001340 <setTotalDistance>
			cross_line_idx++;
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005978:	801a      	strh	r2, [r3, #0]
			break;
 800597a:	e01d      	b.n	80059b8 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005986:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005988:	f7fd fa4c 	bl	8002e24 <getCrossLogSize>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d807      	bhi.n	80059a8 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005998:	f7fd fa44 	bl	8002e24 <getCrossLogSize>
 800599c:	4603      	mov	r3, r0
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 80059a4:	801a      	strh	r2, [r3, #0]
			break;
 80059a6:	e007      	b.n	80059b8 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 80059a8:	f7fd fa3c 	bl	8002e24 <getCrossLogSize>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <correctionTotalDistanceFromCrossLine+0xa0>)
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d2b7      	bcs.n	8005928 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	2001f346 	.word	0x2001f346
 80059c4:	437a0000 	.word	0x437a0000
 80059c8:	2001f34a 	.word	0x2001f34a

080059cc <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 80059d2:	e03f      	b.n	8005a54 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fd fbbd 	bl	8003158 <getSideLog>
 80059de:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 80059e2:	f7fb fc83 	bl	80012ec <getTotalDistance>
 80059e6:	eeb0 7a40 	vmov.f32	s14, s0
 80059ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80059ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059f2:	eef0 7ae7 	vabs.f32	s15, s15
 80059f6:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 80059fa:	edd7 7a00 	vldr	s15, [r7]
 80059fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005a70 <correctionTotalDistanceFromSideLine+0xa4>
 8005a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0a:	d80d      	bhi.n	8005a28 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <correctionTotalDistanceFromSideLine+0xa8>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005a12:	ed97 0a01 	vldr	s0, [r7, #4]
 8005a16:	f7fb fc93 	bl	8001340 <setTotalDistance>
			side_line_idx++;
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a24:	801a      	strh	r2, [r3, #0]
			break;
 8005a26:	e01d      	b.n	8005a64 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005a28:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a32:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005a34:	f7fd fa02 	bl	8002e3c <getSideLogSize>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d807      	bhi.n	8005a54 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005a44:	f7fd f9fa 	bl	8002e3c <getSideLogSize>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a50:	801a      	strh	r2, [r3, #0]
			break;
 8005a52:	e007      	b.n	8005a64 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005a54:	f7fd f9f2 	bl	8002e3c <getSideLogSize>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <correctionTotalDistanceFromSideLine+0xa0>)
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d2b7      	bcs.n	80059d4 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2001f348 	.word	0x2001f348
 8005a70:	437a0000 	.word	0x437a0000
 8005a74:	2001f34c 	.word	0x2001f34c

08005a78 <CreateAcceleration>:

void CreateAcceleration(const float *p_distance)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	uint16_t log_size = getDistanceLogSize();
 8005a80:	f7fd f9c4 	bl	8002e0c <getDistanceLogSize>
 8005a84:	4603      	mov	r3, r0
 8005a86:	82bb      	strh	r3, [r7, #20]
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005a88:	2300      	movs	r3, #0
 8005a8a:	82fb      	strh	r3, [r7, #22]
 8005a8c:	e01f      	b.n	8005ace <CreateAcceleration+0x56>

    	float v_counter = velocity_table[i] * own_ms_CP;
 8005a8e:	8afb      	ldrh	r3, [r7, #22]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <CreateAcceleration+0x68>)
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	edd3 7a00 	vldr	s15, [r3]
 8005a9a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005ae4 <CreateAcceleration+0x6c>
 8005a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aa2:	edc7 7a04 	vstr	s15, [r7, #16]
    	uint16_t V_motor = v_counter * 10;
 8005aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aaa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ab6:	ee17 3a90 	vmov	r3, s15
 8005aba:	81fb      	strh	r3, [r7, #14]

		acceleration_table[i] = V_motor;
 8005abc:	8afb      	ldrh	r3, [r7, #22]
 8005abe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <CreateAcceleration+0x70>)
 8005ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005ac8:	8afb      	ldrh	r3, [r7, #22]
 8005aca:	3301      	adds	r3, #1
 8005acc:	82fb      	strh	r3, [r7, #22]
 8005ace:	8afa      	ldrh	r2, [r7, #22]
 8005ad0:	8abb      	ldrh	r3, [r7, #20]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	ddda      	ble.n	8005a8e <CreateAcceleration+0x16>
    }
}
 8005ad8:	bf00      	nop
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20017e14 	.word	0x20017e14
 8005ae4:	43340000 	.word	0x43340000
 8005ae8:	2001cc34 	.word	0x2001cc34

08005aec <SaveVelocityTable>:

void SaveVelocityTable()
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
	uint16_t log_size = getDistanceLogSize();
 8005af2:	f7fd f98b 	bl	8002e0c <getDistanceLogSize>
 8005af6:	4603      	mov	r3, r0
 8005af8:	80bb      	strh	r3, [r7, #4]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8005afa:	2300      	movs	r3, #0
 8005afc:	80fb      	strh	r3, [r7, #6]
 8005afe:	e018      	b.n	8005b32 <SaveVelocityTable+0x46>
		saveDebug(velocity_table[i]);
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	4a10      	ldr	r2, [pc, #64]	; (8005b44 <SaveVelocityTable+0x58>)
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	edd3 7a00 	vldr	s15, [r3]
 8005b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b10:	f7fd f918 	bl	8002d44 <saveDebug>
		saveDebug(acceleration_table[i]);
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <SaveVelocityTable+0x5c>)
 8005b18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b24:	eeb0 0a67 	vmov.f32	s0, s15
 8005b28:	f7fd f90c 	bl	8002d44 <saveDebug>
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	80fb      	strh	r3, [r7, #6]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	88bb      	ldrh	r3, [r7, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	dde1      	ble.n	8005b00 <SaveVelocityTable+0x14>
	}
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20017e14 	.word	0x20017e14
 8005b48:	2001cc34 	.word	0x2001cc34

08005b4c <getgoalStatus>:

bool getgoalStatus()
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
	return goal_flag;
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <getgoalStatus+0x14>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	2001f352 	.word	0x2001f352

08005b64 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b6e:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005b72:	4a06      	ldr	r2, [pc, #24]	; (8005b8c <setVelocityRange+0x28>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005b78:	4a05      	ldr	r2, [pc, #20]	; (8005b90 <setVelocityRange+0x2c>)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6013      	str	r3, [r2, #0]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	2001f35c 	.word	0x2001f35c
 8005b90:	2001f360 	.word	0x2001f360

08005b94 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b9e:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005ba2:	4a06      	ldr	r2, [pc, #24]	; (8005bbc <setAccDec+0x28>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005ba8:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <setAccDec+0x2c>)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6013      	str	r3, [r2, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	2001f364 	.word	0x2001f364
 8005bc0:	2001f368 	.word	0x2001f368

08005bc4 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005bce:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <setStraightRadius+0x1c>)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	2001f36c 	.word	0x2001f36c

08005be4 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <getSideSensorStatusL+0x14>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2001f350 	.word	0x2001f350

08005bfc <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <getSideSensorStatusR+0x14>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	2001f351 	.word	0x2001f351

08005c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c28:	6453      	str	r3, [r2, #68]	; 0x44
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	603b      	str	r3, [r7, #0]
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800

08005c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	; 0x38
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a79      	ldr	r2, [pc, #484]	; (8005e68 <HAL_ADC_MspInit+0x204>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d158      	bne.n	8005d38 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c86:	2300      	movs	r3, #0
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	4b78      	ldr	r3, [pc, #480]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	4a77      	ldr	r2, [pc, #476]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c94:	6453      	str	r3, [r2, #68]	; 0x44
 8005c96:	4b75      	ldr	r3, [pc, #468]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	4b71      	ldr	r3, [pc, #452]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	4a70      	ldr	r2, [pc, #448]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005cac:	f043 0304 	orr.w	r3, r3, #4
 8005cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005cb2:	4b6e      	ldr	r3, [pc, #440]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005cbe:	230e      	movs	r3, #14
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4867      	ldr	r0, [pc, #412]	; (8005e70 <HAL_ADC_MspInit+0x20c>)
 8005cd2:	f001 ff65 	bl	8007ba0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005cd6:	4b67      	ldr	r3, [pc, #412]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005cd8:	4a67      	ldr	r2, [pc, #412]	; (8005e78 <HAL_ADC_MspInit+0x214>)
 8005cda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005cdc:	4b65      	ldr	r3, [pc, #404]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ce2:	4b64      	ldr	r3, [pc, #400]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ce8:	4b62      	ldr	r3, [pc, #392]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005cee:	4b61      	ldr	r3, [pc, #388]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005cf6:	4b5f      	ldr	r3, [pc, #380]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005cfe:	4b5d      	ldr	r3, [pc, #372]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005d06:	4b5b      	ldr	r3, [pc, #364]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005d0e:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d14:	4b57      	ldr	r3, [pc, #348]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d1a:	4856      	ldr	r0, [pc, #344]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d1c:	f001 f9e8 	bl	80070f0 <HAL_DMA_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005d26:	f7fe fd97 	bl	8004858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a51      	ldr	r2, [pc, #324]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8005d30:	4a50      	ldr	r2, [pc, #320]	; (8005e74 <HAL_ADC_MspInit+0x210>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005d36:	e092      	b.n	8005e5e <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a4f      	ldr	r2, [pc, #316]	; (8005e7c <HAL_ADC_MspInit+0x218>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f040 808d 	bne.w	8005e5e <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	4a47      	ldr	r2, [pc, #284]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d52:	6453      	str	r3, [r2, #68]	; 0x44
 8005d54:	4b45      	ldr	r3, [pc, #276]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4a40      	ldr	r2, [pc, #256]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d70:	4b3e      	ldr	r3, [pc, #248]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	4b3a      	ldr	r3, [pc, #232]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	4a39      	ldr	r2, [pc, #228]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d86:	f043 0304 	orr.w	r3, r3, #4
 8005d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d8c:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	4b33      	ldr	r3, [pc, #204]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	4a32      	ldr	r2, [pc, #200]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005da2:	f043 0302 	orr.w	r3, r3, #2
 8005da6:	6313      	str	r3, [r2, #48]	; 0x30
 8005da8:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <HAL_ADC_MspInit+0x208>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005db4:	23ff      	movs	r3, #255	; 0xff
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005db8:	2303      	movs	r3, #3
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	482e      	ldr	r0, [pc, #184]	; (8005e80 <HAL_ADC_MspInit+0x21c>)
 8005dc8:	f001 feea 	bl	8007ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005dcc:	2330      	movs	r3, #48	; 0x30
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4824      	ldr	r0, [pc, #144]	; (8005e70 <HAL_ADC_MspInit+0x20c>)
 8005de0:	f001 fede 	bl	8007ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005de4:	2303      	movs	r3, #3
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005de8:	2303      	movs	r3, #3
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df4:	4619      	mov	r1, r3
 8005df6:	4823      	ldr	r0, [pc, #140]	; (8005e84 <HAL_ADC_MspInit+0x220>)
 8005df8:	f001 fed2 	bl	8007ba0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <HAL_ADC_MspInit+0x228>)
 8005e00:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005e02:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e08:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e1c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e24:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e26:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e2c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005e2e:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e34:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e3c:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e42:	4811      	ldr	r0, [pc, #68]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e44:	f001 f954 	bl	80070f0 <HAL_DMA_Init>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005e4e:	f7fe fd03 	bl	8004858 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38
 8005e58:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <HAL_ADC_MspInit+0x224>)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005e5e:	bf00      	nop
 8005e60:	3738      	adds	r7, #56	; 0x38
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40012000 	.word	0x40012000
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40020800 	.word	0x40020800
 8005e74:	2001f704 	.word	0x2001f704
 8005e78:	40026410 	.word	0x40026410
 8005e7c:	40012100 	.word	0x40012100
 8005e80:	40020000 	.word	0x40020000
 8005e84:	40020400 	.word	0x40020400
 8005e88:	2001f7ec 	.word	0x2001f7ec
 8005e8c:	40026440 	.word	0x40026440

08005e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <HAL_I2C_MspInit+0x84>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d12c      	bne.n	8005f0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <HAL_I2C_MspInit+0x88>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <HAL_I2C_MspInit+0x88>)
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <HAL_I2C_MspInit+0x88>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ece:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ed4:	2312      	movs	r3, #18
 8005ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005edc:	2303      	movs	r3, #3
 8005ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	4619      	mov	r1, r3
 8005eea:	480c      	ldr	r0, [pc, #48]	; (8005f1c <HAL_I2C_MspInit+0x8c>)
 8005eec:	f001 fe58 	bl	8007ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <HAL_I2C_MspInit+0x88>)
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	4a07      	ldr	r2, [pc, #28]	; (8005f18 <HAL_I2C_MspInit+0x88>)
 8005efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005efe:	6413      	str	r3, [r2, #64]	; 0x40
 8005f00:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_I2C_MspInit+0x88>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f0c:	bf00      	nop
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40005400 	.word	0x40005400
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40020400 	.word	0x40020400

08005f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <HAL_SPI_MspInit+0x84>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d12c      	bne.n	8005f9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <HAL_SPI_MspInit+0x88>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <HAL_SPI_MspInit+0x88>)
 8005f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f50:	6413      	str	r3, [r2, #64]	; 0x40
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_SPI_MspInit+0x88>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <HAL_SPI_MspInit+0x88>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <HAL_SPI_MspInit+0x88>)
 8005f68:	f043 0304 	orr.w	r3, r3, #4
 8005f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <HAL_SPI_MspInit+0x88>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005f7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f80:	2302      	movs	r3, #2
 8005f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005f8c:	2306      	movs	r3, #6
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	4619      	mov	r1, r3
 8005f96:	4805      	ldr	r0, [pc, #20]	; (8005fac <HAL_SPI_MspInit+0x8c>)
 8005f98:	f001 fe02 	bl	8007ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005f9c:	bf00      	nop
 8005f9e:	3728      	adds	r7, #40	; 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40003c00 	.word	0x40003c00
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40020800 	.word	0x40020800

08005fb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	; (8006014 <HAL_TIM_PWM_MspInit+0x64>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10e      	bne.n	8005fe0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <HAL_TIM_PWM_MspInit+0x68>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <HAL_TIM_PWM_MspInit+0x68>)
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd2:	4b11      	ldr	r3, [pc, #68]	; (8006018 <HAL_TIM_PWM_MspInit+0x68>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005fde:	e012      	b.n	8006006 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <HAL_TIM_PWM_MspInit+0x6c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10d      	bne.n	8006006 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_TIM_PWM_MspInit+0x68>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	4a09      	ldr	r2, [pc, #36]	; (8006018 <HAL_TIM_PWM_MspInit+0x68>)
 8005ff4:	f043 0302 	orr.w	r3, r3, #2
 8005ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffa:	4b07      	ldr	r3, [pc, #28]	; (8006018 <HAL_TIM_PWM_MspInit+0x68>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40010000 	.word	0x40010000
 8006018:	40023800 	.word	0x40023800
 800601c:	40010400 	.word	0x40010400

08006020 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	f107 031c 	add.w	r3, r7, #28
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a32      	ldr	r2, [pc, #200]	; (8006108 <HAL_TIM_Encoder_MspInit+0xe8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d12c      	bne.n	800609c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	4b31      	ldr	r3, [pc, #196]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	4a30      	ldr	r2, [pc, #192]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	6413      	str	r3, [r2, #64]	; 0x40
 8006052:	4b2e      	ldr	r3, [pc, #184]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	4a29      	ldr	r2, [pc, #164]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 8006068:	f043 0302 	orr.w	r3, r3, #2
 800606c:	6313      	str	r3, [r2, #48]	; 0x30
 800606e:	4b27      	ldr	r3, [pc, #156]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800607a:	2330      	movs	r3, #48	; 0x30
 800607c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607e:	2302      	movs	r3, #2
 8006080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006086:	2300      	movs	r3, #0
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800608a:	2302      	movs	r3, #2
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608e:	f107 031c 	add.w	r3, r7, #28
 8006092:	4619      	mov	r1, r3
 8006094:	481e      	ldr	r0, [pc, #120]	; (8006110 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006096:	f001 fd83 	bl	8007ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800609a:	e030      	b.n	80060fe <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_TIM_Encoder_MspInit+0xf4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d12b      	bne.n	80060fe <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	4a17      	ldr	r2, [pc, #92]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 80060b0:	f043 0304 	orr.w	r3, r3, #4
 80060b4:	6413      	str	r3, [r2, #64]	; 0x40
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	4a10      	ldr	r2, [pc, #64]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	6313      	str	r3, [r2, #48]	; 0x30
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_TIM_Encoder_MspInit+0xec>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060de:	23c0      	movs	r3, #192	; 0xc0
 80060e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e2:	2302      	movs	r3, #2
 80060e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ea:	2300      	movs	r3, #0
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80060ee:	2302      	movs	r3, #2
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f2:	f107 031c 	add.w	r3, r7, #28
 80060f6:	4619      	mov	r1, r3
 80060f8:	4805      	ldr	r0, [pc, #20]	; (8006110 <HAL_TIM_Encoder_MspInit+0xf0>)
 80060fa:	f001 fd51 	bl	8007ba0 <HAL_GPIO_Init>
}
 80060fe:	bf00      	nop
 8006100:	3730      	adds	r7, #48	; 0x30
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40000400 	.word	0x40000400
 800610c:	40023800 	.word	0x40023800
 8006110:	40020400 	.word	0x40020400
 8006114:	40000800 	.word	0x40000800

08006118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_TIM_Base_MspInit+0x80>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d116      	bne.n	8006158 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	4b1b      	ldr	r3, [pc, #108]	; (800619c <HAL_TIM_Base_MspInit+0x84>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_TIM_Base_MspInit+0x84>)
 8006134:	f043 0310 	orr.w	r3, r3, #16
 8006138:	6413      	str	r3, [r2, #64]	; 0x40
 800613a:	4b18      	ldr	r3, [pc, #96]	; (800619c <HAL_TIM_Base_MspInit+0x84>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006146:	2200      	movs	r2, #0
 8006148:	2101      	movs	r1, #1
 800614a:	2036      	movs	r0, #54	; 0x36
 800614c:	f000 ff99 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006150:	2036      	movs	r0, #54	; 0x36
 8006152:	f000 ffb2 	bl	80070ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006156:	e01a      	b.n	800618e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a10      	ldr	r2, [pc, #64]	; (80061a0 <HAL_TIM_Base_MspInit+0x88>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d115      	bne.n	800618e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_TIM_Base_MspInit+0x84>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <HAL_TIM_Base_MspInit+0x84>)
 800616c:	f043 0320 	orr.w	r3, r3, #32
 8006170:	6413      	str	r3, [r2, #64]	; 0x40
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <HAL_TIM_Base_MspInit+0x84>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	2037      	movs	r0, #55	; 0x37
 8006184:	f000 ff7d 	bl	8007082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006188:	2037      	movs	r0, #55	; 0x37
 800618a:	f000 ff96 	bl	80070ba <HAL_NVIC_EnableIRQ>
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40001000 	.word	0x40001000
 800619c:	40023800 	.word	0x40023800
 80061a0:	40001400 	.word	0x40001400

080061a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ac:	f107 0314 	add.w	r3, r7, #20
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_TIM_MspPostInit+0xb4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d11f      	bne.n	8006206 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	4b24      	ldr	r3, [pc, #144]	; (800625c <HAL_TIM_MspPostInit+0xb8>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a23      	ldr	r2, [pc, #140]	; (800625c <HAL_TIM_MspPostInit+0xb8>)
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30
 80061d6:	4b21      	ldr	r3, [pc, #132]	; (800625c <HAL_TIM_MspPostInit+0xb8>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80061e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e8:	2302      	movs	r3, #2
 80061ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f0:	2300      	movs	r3, #0
 80061f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80061f4:	2301      	movs	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	4619      	mov	r1, r3
 80061fe:	4818      	ldr	r0, [pc, #96]	; (8006260 <HAL_TIM_MspPostInit+0xbc>)
 8006200:	f001 fcce 	bl	8007ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006204:	e023      	b.n	800624e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a16      	ldr	r2, [pc, #88]	; (8006264 <HAL_TIM_MspPostInit+0xc0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d11e      	bne.n	800624e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	4b11      	ldr	r3, [pc, #68]	; (800625c <HAL_TIM_MspPostInit+0xb8>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	4a10      	ldr	r2, [pc, #64]	; (800625c <HAL_TIM_MspPostInit+0xb8>)
 800621a:	f043 0304 	orr.w	r3, r3, #4
 800621e:	6313      	str	r3, [r2, #48]	; 0x30
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <HAL_TIM_MspPostInit+0xb8>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800622c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006232:	2302      	movs	r3, #2
 8006234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800623e:	2303      	movs	r3, #3
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006242:	f107 0314 	add.w	r3, r7, #20
 8006246:	4619      	mov	r1, r3
 8006248:	4807      	ldr	r0, [pc, #28]	; (8006268 <HAL_TIM_MspPostInit+0xc4>)
 800624a:	f001 fca9 	bl	8007ba0 <HAL_GPIO_Init>
}
 800624e:	bf00      	nop
 8006250:	3728      	adds	r7, #40	; 0x28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40023800 	.word	0x40023800
 8006260:	40020000 	.word	0x40020000
 8006264:	40010400 	.word	0x40010400
 8006268:	40020800 	.word	0x40020800

0800626c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006274:	f107 0314 	add.w	r3, r7, #20
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	605a      	str	r2, [r3, #4]
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	60da      	str	r2, [r3, #12]
 8006282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <HAL_UART_MspInit+0x84>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d12c      	bne.n	80062e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <HAL_UART_MspInit+0x88>)
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <HAL_UART_MspInit+0x88>)
 8006298:	f043 0310 	orr.w	r3, r3, #16
 800629c:	6453      	str	r3, [r2, #68]	; 0x44
 800629e:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <HAL_UART_MspInit+0x88>)
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_UART_MspInit+0x88>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <HAL_UART_MspInit+0x88>)
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <HAL_UART_MspInit+0x88>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80062c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80062ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062cc:	2302      	movs	r3, #2
 80062ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d4:	2303      	movs	r3, #3
 80062d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80062d8:	2307      	movs	r3, #7
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062dc:	f107 0314 	add.w	r3, r7, #20
 80062e0:	4619      	mov	r1, r3
 80062e2:	4805      	ldr	r0, [pc, #20]	; (80062f8 <HAL_UART_MspInit+0x8c>)
 80062e4:	f001 fc5c 	bl	8007ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80062e8:	bf00      	nop
 80062ea:	3728      	adds	r7, #40	; 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40011000 	.word	0x40011000
 80062f4:	40023800 	.word	0x40023800
 80062f8:	40020000 	.word	0x40020000

080062fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006300:	e7fe      	b.n	8006300 <NMI_Handler+0x4>

08006302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006302:	b480      	push	{r7}
 8006304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006306:	e7fe      	b.n	8006306 <HardFault_Handler+0x4>

08006308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800630c:	e7fe      	b.n	800630c <MemManage_Handler+0x4>

0800630e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800630e:	b480      	push	{r7}
 8006310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006312:	e7fe      	b.n	8006312 <BusFault_Handler+0x4>

08006314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006318:	e7fe      	b.n	8006318 <UsageFault_Handler+0x4>

0800631a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800631a:	b480      	push	{r7}
 800631c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800631e:	bf00      	nop
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006336:	b480      	push	{r7}
 8006338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006348:	f000 f98a 	bl	8006660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800634c:	bf00      	nop
 800634e:	bd80      	pop	{r7, pc}

08006350 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006354:	4802      	ldr	r0, [pc, #8]	; (8006360 <TIM6_DAC_IRQHandler+0x10>)
 8006356:	f003 fa38 	bl	80097ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	2001f764 	.word	0x2001f764

08006364 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006368:	4802      	ldr	r0, [pc, #8]	; (8006374 <TIM7_IRQHandler+0x10>)
 800636a:	f003 fa2e 	bl	80097ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2001f84c 	.word	0x2001f84c

08006378 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800637c:	4802      	ldr	r0, [pc, #8]	; (8006388 <DMA2_Stream0_IRQHandler+0x10>)
 800637e:	f000 ffbd 	bl	80072fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2001f704 	.word	0x2001f704

0800638c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006390:	4802      	ldr	r0, [pc, #8]	; (800639c <DMA2_Stream2_IRQHandler+0x10>)
 8006392:	f000 ffb3 	bl	80072fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006396:	bf00      	nop
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2001f7ec 	.word	0x2001f7ec

080063a0 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	2b52      	cmp	r3, #82	; 0x52
 80063b2:	d10a      	bne.n	80063ca <getSwitchStatus+0x2a>
 80063b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063b8:	480d      	ldr	r0, [pc, #52]	; (80063f0 <getSwitchStatus+0x50>)
 80063ba:	f001 fd8b 	bl	8007ed4 <HAL_GPIO_ReadPin>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <getSwitchStatus+0x2a>
		ret = 1;
 80063c4:	2301      	movs	r3, #1
 80063c6:	81fb      	strh	r3, [r7, #14]
 80063c8:	e00c      	b.n	80063e4 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b4c      	cmp	r3, #76	; 0x4c
 80063ce:	d109      	bne.n	80063e4 <getSwitchStatus+0x44>
 80063d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063d4:	4806      	ldr	r0, [pc, #24]	; (80063f0 <getSwitchStatus+0x50>)
 80063d6:	f001 fd7d 	bl	8007ed4 <HAL_GPIO_ReadPin>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <getSwitchStatus+0x44>
		ret = 1;
 80063e0:	2301      	movs	r3, #1
 80063e2:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 80063e4:	89fb      	ldrh	r3, [r7, #14]

}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40020000 	.word	0x40020000

080063f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e00a      	b.n	800641c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006406:	f3af 8000 	nop.w
 800640a:	4601      	mov	r1, r0
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	60ba      	str	r2, [r7, #8]
 8006412:	b2ca      	uxtb	r2, r1
 8006414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	3301      	adds	r3, #1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	dbf0      	blt.n	8006406 <_read+0x12>
	}

return len;
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	e009      	b.n	8006454 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	60ba      	str	r2, [r7, #8]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7fd f8f9 	bl	8003640 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	3301      	adds	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	dbf1      	blt.n	8006440 <_write+0x12>
	}
	return len;
 800645c:	687b      	ldr	r3, [r7, #4]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <_close>:

int _close(int file)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
	return -1;
 800646e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800648e:	605a      	str	r2, [r3, #4]
	return 0;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <_isatty>:

int _isatty(int file)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
	return 1;
 80064a6:	2301      	movs	r3, #1
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
	return 0;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064d8:	4a14      	ldr	r2, [pc, #80]	; (800652c <_sbrk+0x5c>)
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <_sbrk+0x60>)
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <_sbrk+0x64>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <_sbrk+0x64>)
 80064ee:	4a12      	ldr	r2, [pc, #72]	; (8006538 <_sbrk+0x68>)
 80064f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <_sbrk+0x64>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d207      	bcs.n	8006510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006500:	f004 fb5e 	bl	800abc0 <__errno>
 8006504:	4602      	mov	r2, r0
 8006506:	230c      	movs	r3, #12
 8006508:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800650a:	f04f 33ff 	mov.w	r3, #4294967295
 800650e:	e009      	b.n	8006524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <_sbrk+0x64>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <_sbrk+0x64>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	4a05      	ldr	r2, [pc, #20]	; (8006534 <_sbrk+0x64>)
 8006520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20020000 	.word	0x20020000
 8006530:	00000400 	.word	0x00000400
 8006534:	2001f380 	.word	0x2001f380
 8006538:	2001f8c8 	.word	0x2001f8c8

0800653c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <SystemInit+0x28>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	4a07      	ldr	r2, [pc, #28]	; (8006564 <SystemInit+0x28>)
 8006548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800654c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006550:	4b04      	ldr	r3, [pc, #16]	; (8006564 <SystemInit+0x28>)
 8006552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006556:	609a      	str	r2, [r3, #8]
#endif
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	e000ed00 	.word	0xe000ed00

08006568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800656c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800656e:	e003      	b.n	8006578 <LoopCopyDataInit>

08006570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006576:	3104      	adds	r1, #4

08006578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006578:	480b      	ldr	r0, [pc, #44]	; (80065a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800657c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800657e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006580:	d3f6      	bcc.n	8006570 <CopyDataInit>
  ldr  r2, =_sbss
 8006582:	4a0b      	ldr	r2, [pc, #44]	; (80065b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006584:	e002      	b.n	800658c <LoopFillZerobss>

08006586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006588:	f842 3b04 	str.w	r3, [r2], #4

0800658c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800658e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006590:	d3f9      	bcc.n	8006586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006592:	f7ff ffd3 	bl	800653c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006596:	f004 fb19 	bl	800abcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800659a:	f7fd f8cb 	bl	8003734 <main>
  bx  lr    
 800659e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80065a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80065a4:	0800f468 	.word	0x0800f468
  ldr  r0, =_sdata
 80065a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065ac:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80065b0:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80065b4:	2001f8c4 	.word	0x2001f8c4

080065b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065b8:	e7fe      	b.n	80065b8 <ADC_IRQHandler>
	...

080065bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <HAL_Init+0x40>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <HAL_Init+0x40>)
 80065c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <HAL_Init+0x40>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <HAL_Init+0x40>)
 80065d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065d8:	4b08      	ldr	r3, [pc, #32]	; (80065fc <HAL_Init+0x40>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a07      	ldr	r2, [pc, #28]	; (80065fc <HAL_Init+0x40>)
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065e4:	2003      	movs	r0, #3
 80065e6:	f000 fd41 	bl	800706c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065ea:	2000      	movs	r0, #0
 80065ec:	f000 f808 	bl	8006600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065f0:	f7ff fb10 	bl	8005c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40023c00 	.word	0x40023c00

08006600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006608:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_InitTick+0x54>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <HAL_InitTick+0x58>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006616:	fbb3 f3f1 	udiv	r3, r3, r1
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fd59 	bl	80070d6 <HAL_SYSTICK_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e00e      	b.n	800664c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b0f      	cmp	r3, #15
 8006632:	d80a      	bhi.n	800664a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006634:	2200      	movs	r2, #0
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	f000 fd21 	bl	8007082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006640:	4a06      	ldr	r2, [pc, #24]	; (800665c <HAL_InitTick+0x5c>)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e000      	b.n	800664c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000034 	.word	0x20000034
 8006658:	2000003c 	.word	0x2000003c
 800665c:	20000038 	.word	0x20000038

08006660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <HAL_IncTick+0x20>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_IncTick+0x24>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4413      	add	r3, r2
 8006670:	4a04      	ldr	r2, [pc, #16]	; (8006684 <HAL_IncTick+0x24>)
 8006672:	6013      	str	r3, [r2, #0]
}
 8006674:	bf00      	nop
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	2000003c 	.word	0x2000003c
 8006684:	2001f89c 	.word	0x2001f89c

08006688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return uwTick;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <HAL_GetTick+0x14>)
 800668e:	681b      	ldr	r3, [r3, #0]
}
 8006690:	4618      	mov	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2001f89c 	.word	0x2001f89c

080066a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066a8:	f7ff ffee 	bl	8006688 <HAL_GetTick>
 80066ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d005      	beq.n	80066c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066ba:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <HAL_Delay+0x40>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066c6:	bf00      	nop
 80066c8:	f7ff ffde 	bl	8006688 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d8f7      	bhi.n	80066c8 <HAL_Delay+0x28>
  {
  }
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	2000003c 	.word	0x2000003c

080066e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e033      	b.n	8006762 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff faae 	bl	8005c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b00      	cmp	r3, #0
 8006720:	d118      	bne.n	8006754 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800672a:	f023 0302 	bic.w	r3, r3, #2
 800672e:	f043 0202 	orr.w	r2, r3, #2
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa4a 	bl	8006bd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	641a      	str	r2, [r3, #64]	; 0x40
 8006752:	e001      	b.n	8006758 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_ADC_Start_DMA+0x1e>
 8006786:	2302      	movs	r3, #2
 8006788:	e0cc      	b.n	8006924 <HAL_ADC_Start_DMA+0x1b8>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d018      	beq.n	80067d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80067b0:	4b5e      	ldr	r3, [pc, #376]	; (800692c <HAL_ADC_Start_DMA+0x1c0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a5e      	ldr	r2, [pc, #376]	; (8006930 <HAL_ADC_Start_DMA+0x1c4>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	0c9a      	lsrs	r2, r3, #18
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80067c4:	e002      	b.n	80067cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f9      	bne.n	80067c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 80a0 	bne.w	8006922 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	2b00      	cmp	r3, #0
 8006802:	d007      	beq.n	8006814 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800680c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006820:	d106      	bne.n	8006830 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f023 0206 	bic.w	r2, r3, #6
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
 800682e:	e002      	b.n	8006836 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800683e:	4b3d      	ldr	r3, [pc, #244]	; (8006934 <HAL_ADC_Start_DMA+0x1c8>)
 8006840:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	4a3c      	ldr	r2, [pc, #240]	; (8006938 <HAL_ADC_Start_DMA+0x1cc>)
 8006848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	4a3b      	ldr	r2, [pc, #236]	; (800693c <HAL_ADC_Start_DMA+0x1d0>)
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	4a3a      	ldr	r2, [pc, #232]	; (8006940 <HAL_ADC_Start_DMA+0x1d4>)
 8006858:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006862:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006872:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006882:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	334c      	adds	r3, #76	; 0x4c
 800688e:	4619      	mov	r1, r3
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f000 fcda 	bl	800724c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d12a      	bne.n	80068fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a26      	ldr	r2, [pc, #152]	; (8006944 <HAL_ADC_Start_DMA+0x1d8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d015      	beq.n	80068da <HAL_ADC_Start_DMA+0x16e>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a25      	ldr	r2, [pc, #148]	; (8006948 <HAL_ADC_Start_DMA+0x1dc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d105      	bne.n	80068c4 <HAL_ADC_Start_DMA+0x158>
 80068b8:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <HAL_ADC_Start_DMA+0x1c8>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a20      	ldr	r2, [pc, #128]	; (800694c <HAL_ADC_Start_DMA+0x1e0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d129      	bne.n	8006922 <HAL_ADC_Start_DMA+0x1b6>
 80068ce:	4b19      	ldr	r3, [pc, #100]	; (8006934 <HAL_ADC_Start_DMA+0x1c8>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	d823      	bhi.n	8006922 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11c      	bne.n	8006922 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	e013      	b.n	8006922 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a11      	ldr	r2, [pc, #68]	; (8006944 <HAL_ADC_Start_DMA+0x1d8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10e      	bne.n	8006922 <HAL_ADC_Start_DMA+0x1b6>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d107      	bne.n	8006922 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006920:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000034 	.word	0x20000034
 8006930:	431bde83 	.word	0x431bde83
 8006934:	40012300 	.word	0x40012300
 8006938:	08006dc9 	.word	0x08006dc9
 800693c:	08006e83 	.word	0x08006e83
 8006940:	08006e9f 	.word	0x08006e9f
 8006944:	40012000 	.word	0x40012000
 8006948:	40012100 	.word	0x40012100
 800694c:	40012200 	.word	0x40012200

08006950 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_ADC_ConfigChannel+0x1c>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e105      	b.n	8006bb4 <HAL_ADC_ConfigChannel+0x228>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d925      	bls.n	8006a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68d9      	ldr	r1, [r3, #12]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	3b1e      	subs	r3, #30
 80069ce:	2207      	movs	r2, #7
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	43da      	mvns	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	400a      	ands	r2, r1
 80069dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68d9      	ldr	r1, [r3, #12]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4618      	mov	r0, r3
 80069f0:	4603      	mov	r3, r0
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	4403      	add	r3, r0
 80069f6:	3b1e      	subs	r3, #30
 80069f8:	409a      	lsls	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	e022      	b.n	8006a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6919      	ldr	r1, [r3, #16]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	4613      	mov	r3, r2
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	4413      	add	r3, r2
 8006a18:	2207      	movs	r2, #7
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	400a      	ands	r2, r1
 8006a26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6919      	ldr	r1, [r3, #16]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	4618      	mov	r0, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4403      	add	r3, r0
 8006a40:	409a      	lsls	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b06      	cmp	r3, #6
 8006a50:	d824      	bhi.n	8006a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	3b05      	subs	r3, #5
 8006a64:	221f      	movs	r2, #31
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	400a      	ands	r2, r1
 8006a72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4618      	mov	r0, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3b05      	subs	r3, #5
 8006a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34
 8006a9a:	e04c      	b.n	8006b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b0c      	cmp	r3, #12
 8006aa2:	d824      	bhi.n	8006aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3b23      	subs	r3, #35	; 0x23
 8006ab6:	221f      	movs	r2, #31
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43da      	mvns	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	3b23      	subs	r3, #35	; 0x23
 8006ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
 8006aec:	e023      	b.n	8006b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	3b41      	subs	r3, #65	; 0x41
 8006b00:	221f      	movs	r2, #31
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43da      	mvns	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	3b41      	subs	r3, #65	; 0x41
 8006b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b36:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <HAL_ADC_ConfigChannel+0x234>)
 8006b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a21      	ldr	r2, [pc, #132]	; (8006bc4 <HAL_ADC_ConfigChannel+0x238>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x1cc>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b12      	cmp	r3, #18
 8006b4a:	d105      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_ADC_ConfigChannel+0x238>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d123      	bne.n	8006baa <HAL_ADC_ConfigChannel+0x21e>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d003      	beq.n	8006b72 <HAL_ADC_ConfigChannel+0x1e6>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b11      	cmp	r3, #17
 8006b70:	d11b      	bne.n	8006baa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d111      	bne.n	8006baa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b86:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_ADC_ConfigChannel+0x23c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <HAL_ADC_ConfigChannel+0x240>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	0c9a      	lsrs	r2, r3, #18
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b9c:	e002      	b.n	8006ba4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f9      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012300 	.word	0x40012300
 8006bc4:	40012000 	.word	0x40012000
 8006bc8:	20000034 	.word	0x20000034
 8006bcc:	431bde83 	.word	0x431bde83

08006bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bd8:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <ADC_Init+0x1f0>)
 8006bda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6859      	ldr	r1, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	021a      	lsls	r2, r3, #8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6899      	ldr	r1, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	4a58      	ldr	r2, [pc, #352]	; (8006dc4 <ADC_Init+0x1f4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d022      	beq.n	8006cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6899      	ldr	r1, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6899      	ldr	r1, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	e00f      	b.n	8006cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0202 	bic.w	r2, r2, #2
 8006cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6899      	ldr	r1, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7e1b      	ldrb	r3, [r3, #24]
 8006ce8:	005a      	lsls	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01b      	beq.n	8006d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	3b01      	subs	r3, #1
 8006d28:	035a      	lsls	r2, r3, #13
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
 8006d32:	e007      	b.n	8006d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	051a      	lsls	r2, r3, #20
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6899      	ldr	r1, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d86:	025a      	lsls	r2, r3, #9
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6899      	ldr	r1, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	029a      	lsls	r2, r3, #10
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	40012300 	.word	0x40012300
 8006dc4:	0f000001 	.word	0x0f000001

08006dc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d13c      	bne.n	8006e5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d12b      	bne.n	8006e54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d127      	bne.n	8006e54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d119      	bne.n	8006e54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0220 	bic.w	r2, r2, #32
 8006e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	f043 0201 	orr.w	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fd7b 	bl	8006950 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e5a:	e00e      	b.n	8006e7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff fd85 	bl	8006978 <HAL_ADC_ErrorCallback>
}
 8006e6e:	e004      	b.n	8006e7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff fd67 	bl	8006964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2240      	movs	r2, #64	; 0x40
 8006eb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff fd5a 	bl	8006978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <__NVIC_SetPriorityGrouping+0x44>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006efe:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <__NVIC_SetPriorityGrouping+0x44>)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	60d3      	str	r3, [r2, #12]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	e000ed00 	.word	0xe000ed00

08006f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__NVIC_GetPriorityGrouping+0x18>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	f003 0307 	and.w	r3, r3, #7
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	e000ed00 	.word	0xe000ed00

08006f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	db0b      	blt.n	8006f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	f003 021f 	and.w	r2, r3, #31
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <__NVIC_EnableIRQ+0x38>)
 8006f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2001      	movs	r0, #1
 8006f52:	fa00 f202 	lsl.w	r2, r0, r2
 8006f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	e000e100 	.word	0xe000e100

08006f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db0a      	blt.n	8006f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	490c      	ldr	r1, [pc, #48]	; (8006fb8 <__NVIC_SetPriority+0x4c>)
 8006f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8a:	0112      	lsls	r2, r2, #4
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	440b      	add	r3, r1
 8006f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f94:	e00a      	b.n	8006fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	4908      	ldr	r1, [pc, #32]	; (8006fbc <__NVIC_SetPriority+0x50>)
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	3b04      	subs	r3, #4
 8006fa4:	0112      	lsls	r2, r2, #4
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	440b      	add	r3, r1
 8006faa:	761a      	strb	r2, [r3, #24]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e000e100 	.word	0xe000e100
 8006fbc:	e000ed00 	.word	0xe000ed00

08006fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f1c3 0307 	rsb	r3, r3, #7
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	bf28      	it	cs
 8006fde:	2304      	movcs	r3, #4
 8006fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d902      	bls.n	8006ff0 <NVIC_EncodePriority+0x30>
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3b03      	subs	r3, #3
 8006fee:	e000      	b.n	8006ff2 <NVIC_EncodePriority+0x32>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43da      	mvns	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	401a      	ands	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007008:	f04f 31ff 	mov.w	r1, #4294967295
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	fa01 f303 	lsl.w	r3, r1, r3
 8007012:	43d9      	mvns	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007018:	4313      	orrs	r3, r2
         );
}
 800701a:	4618      	mov	r0, r3
 800701c:	3724      	adds	r7, #36	; 0x24
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3b01      	subs	r3, #1
 8007034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007038:	d301      	bcc.n	800703e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800703a:	2301      	movs	r3, #1
 800703c:	e00f      	b.n	800705e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800703e:	4a0a      	ldr	r2, [pc, #40]	; (8007068 <SysTick_Config+0x40>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3b01      	subs	r3, #1
 8007044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007046:	210f      	movs	r1, #15
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	f7ff ff8e 	bl	8006f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <SysTick_Config+0x40>)
 8007052:	2200      	movs	r2, #0
 8007054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007056:	4b04      	ldr	r3, [pc, #16]	; (8007068 <SysTick_Config+0x40>)
 8007058:	2207      	movs	r2, #7
 800705a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	e000e010 	.word	0xe000e010

0800706c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ff29 	bl	8006ecc <__NVIC_SetPriorityGrouping>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	4603      	mov	r3, r0
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007094:	f7ff ff3e 	bl	8006f14 <__NVIC_GetPriorityGrouping>
 8007098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	6978      	ldr	r0, [r7, #20]
 80070a0:	f7ff ff8e 	bl	8006fc0 <NVIC_EncodePriority>
 80070a4:	4602      	mov	r2, r0
 80070a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff ff5d 	bl	8006f6c <__NVIC_SetPriority>
}
 80070b2:	bf00      	nop
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	4603      	mov	r3, r0
 80070c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ff31 	bl	8006f30 <__NVIC_EnableIRQ>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff ffa2 	bl	8007028 <SysTick_Config>
 80070e4:	4603      	mov	r3, r0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070fc:	f7ff fac4 	bl	8006688 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e099      	b.n	8007240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800712c:	e00f      	b.n	800714e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800712e:	f7ff faab 	bl	8006688 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b05      	cmp	r3, #5
 800713a:	d908      	bls.n	800714e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2203      	movs	r2, #3
 8007146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e078      	b.n	8007240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e8      	bne.n	800712e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4b38      	ldr	r3, [pc, #224]	; (8007248 <HAL_DMA_Init+0x158>)
 8007168:	4013      	ands	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800717a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d107      	bne.n	80071b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	4313      	orrs	r3, r2
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d117      	bne.n	8007212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00e      	beq.n	8007212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa6f 	bl	80076d8 <DMA_CheckFifoParam>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2240      	movs	r2, #64	; 0x40
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800720e:	2301      	movs	r3, #1
 8007210:	e016      	b.n	8007240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa26 	bl	800766c <DMA_CalcBaseAndBitshift>
 8007220:	4603      	mov	r3, r0
 8007222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007228:	223f      	movs	r2, #63	; 0x3f
 800722a:	409a      	lsls	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	f010803f 	.word	0xf010803f

0800724c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_DMA_Start_IT+0x26>
 800726e:	2302      	movs	r3, #2
 8007270:	e040      	b.n	80072f4 <HAL_DMA_Start_IT+0xa8>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d12f      	bne.n	80072e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f9b8 	bl	8007610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	223f      	movs	r2, #63	; 0x3f
 80072a6:	409a      	lsls	r2, r3
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0216 	orr.w	r2, r2, #22
 80072ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0208 	orr.w	r2, r2, #8
 80072d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0201 	orr.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e005      	b.n	80072f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
 80072f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007308:	4b92      	ldr	r3, [pc, #584]	; (8007554 <HAL_DMA_IRQHandler+0x258>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a92      	ldr	r2, [pc, #584]	; (8007558 <HAL_DMA_IRQHandler+0x25c>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	0a9b      	lsrs	r3, r3, #10
 8007314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007326:	2208      	movs	r2, #8
 8007328:	409a      	lsls	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4013      	ands	r3, r2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01a      	beq.n	8007368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d013      	beq.n	8007368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0204 	bic.w	r2, r2, #4
 800734e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007354:	2208      	movs	r2, #8
 8007356:	409a      	lsls	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	f043 0201 	orr.w	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736c:	2201      	movs	r2, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4013      	ands	r3, r2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d012      	beq.n	800739e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738a:	2201      	movs	r2, #1
 800738c:	409a      	lsls	r2, r3
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f043 0202 	orr.w	r2, r3, #2
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a2:	2204      	movs	r2, #4
 80073a4:	409a      	lsls	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d012      	beq.n	80073d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c0:	2204      	movs	r2, #4
 80073c2:	409a      	lsls	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073cc:	f043 0204 	orr.w	r2, r3, #4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d8:	2210      	movs	r2, #16
 80073da:	409a      	lsls	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d043      	beq.n	800746c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d03c      	beq.n	800746c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	2210      	movs	r2, #16
 80073f8:	409a      	lsls	r2, r3
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d018      	beq.n	800743e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d024      	beq.n	800746c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
 800742a:	e01f      	b.n	800746c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01b      	beq.n	800746c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	e016      	b.n	800746c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d107      	bne.n	800745c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0208 	bic.w	r2, r2, #8
 800745a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007470:	2220      	movs	r2, #32
 8007472:	409a      	lsls	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 808e 	beq.w	800759a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8086 	beq.w	800759a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007492:	2220      	movs	r2, #32
 8007494:	409a      	lsls	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d136      	bne.n	8007514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0216 	bic.w	r2, r2, #22
 80074b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <HAL_DMA_IRQHandler+0x1da>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0208 	bic.w	r2, r2, #8
 80074e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ea:	223f      	movs	r2, #63	; 0x3f
 80074ec:	409a      	lsls	r2, r3
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007506:	2b00      	cmp	r3, #0
 8007508:	d07d      	beq.n	8007606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
        }
        return;
 8007512:	e078      	b.n	8007606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01c      	beq.n	800755c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d108      	bne.n	8007542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007534:	2b00      	cmp	r3, #0
 8007536:	d030      	beq.n	800759a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
 8007540:	e02b      	b.n	800759a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d027      	beq.n	800759a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
 8007552:	e022      	b.n	800759a <HAL_DMA_IRQHandler+0x29e>
 8007554:	20000034 	.word	0x20000034
 8007558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0210 	bic.w	r2, r2, #16
 8007578:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d032      	beq.n	8007608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d022      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2205      	movs	r2, #5
 80075b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	3301      	adds	r3, #1
 80075ca:	60bb      	str	r3, [r7, #8]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d307      	bcc.n	80075e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1f2      	bne.n	80075c6 <HAL_DMA_IRQHandler+0x2ca>
 80075e0:	e000      	b.n	80075e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80075e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
 8007604:	e000      	b.n	8007608 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007606:	bf00      	nop
    }
  }
}
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop

08007610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800762c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d108      	bne.n	8007650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800764e:	e007      	b.n	8007660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	60da      	str	r2, [r3, #12]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	3b10      	subs	r3, #16
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <DMA_CalcBaseAndBitshift+0x64>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007686:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <DMA_CalcBaseAndBitshift+0x68>)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d909      	bls.n	80076ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076a2:	f023 0303 	bic.w	r3, r3, #3
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	659a      	str	r2, [r3, #88]	; 0x58
 80076ac:	e007      	b.n	80076be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	aaaaaaab 	.word	0xaaaaaaab
 80076d4:	0800f130 	.word	0x0800f130

080076d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11f      	bne.n	8007732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d855      	bhi.n	80077a4 <DMA_CheckFifoParam+0xcc>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <DMA_CheckFifoParam+0x28>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007711 	.word	0x08007711
 8007704:	08007723 	.word	0x08007723
 8007708:	08007711 	.word	0x08007711
 800770c:	080077a5 	.word	0x080077a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d045      	beq.n	80077a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007720:	e042      	b.n	80077a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800772a:	d13f      	bne.n	80077ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007730:	e03c      	b.n	80077ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773a:	d121      	bne.n	8007780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d836      	bhi.n	80077b0 <DMA_CheckFifoParam+0xd8>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <DMA_CheckFifoParam+0x70>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007759 	.word	0x08007759
 800774c:	0800775f 	.word	0x0800775f
 8007750:	08007759 	.word	0x08007759
 8007754:	08007771 	.word	0x08007771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e02f      	b.n	80077be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d024      	beq.n	80077b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800776e:	e021      	b.n	80077b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007778:	d11e      	bne.n	80077b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800777e:	e01b      	b.n	80077b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d902      	bls.n	800778c <DMA_CheckFifoParam+0xb4>
 8007786:	2b03      	cmp	r3, #3
 8007788:	d003      	beq.n	8007792 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800778a:	e018      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
      break;
 8007790:	e015      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
      break;
 80077a2:	e00b      	b.n	80077bc <DMA_CheckFifoParam+0xe4>
      break;
 80077a4:	bf00      	nop
 80077a6:	e00a      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077a8:	bf00      	nop
 80077aa:	e008      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077ac:	bf00      	nop
 80077ae:	e006      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077b0:	bf00      	nop
 80077b2:	e004      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077b4:	bf00      	nop
 80077b6:	e002      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;   
 80077b8:	bf00      	nop
 80077ba:	e000      	b.n	80077be <DMA_CheckFifoParam+0xe6>
      break;
 80077bc:	bf00      	nop
    }
  } 
  
  return status; 
 80077be:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <HAL_FLASH_Unlock+0x38>)
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	da0b      	bge.n	80077f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <HAL_FLASH_Unlock+0x38>)
 80077e0:	4a09      	ldr	r2, [pc, #36]	; (8007808 <HAL_FLASH_Unlock+0x3c>)
 80077e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <HAL_FLASH_Unlock+0x38>)
 80077e6:	4a09      	ldr	r2, [pc, #36]	; (800780c <HAL_FLASH_Unlock+0x40>)
 80077e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80077ea:	4b06      	ldr	r3, [pc, #24]	; (8007804 <HAL_FLASH_Unlock+0x38>)
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da01      	bge.n	80077f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80077f6:	79fb      	ldrb	r3, [r7, #7]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	40023c00 	.word	0x40023c00
 8007808:	45670123 	.word	0x45670123
 800780c:	cdef89ab 	.word	0xcdef89ab

08007810 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <HAL_FLASH_Lock+0x1c>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	4a04      	ldr	r2, [pc, #16]	; (800782c <HAL_FLASH_Lock+0x1c>)
 800781a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800781e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	40023c00 	.word	0x40023c00

08007830 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800783c:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <FLASH_WaitForLastOperation+0x78>)
 800783e:	2200      	movs	r2, #0
 8007840:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007842:	f7fe ff21 	bl	8006688 <HAL_GetTick>
 8007846:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007848:	e010      	b.n	800786c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d00c      	beq.n	800786c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <FLASH_WaitForLastOperation+0x38>
 8007858:	f7fe ff16 	bl	8006688 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	429a      	cmp	r2, r3
 8007866:	d201      	bcs.n	800786c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e019      	b.n	80078a0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <FLASH_WaitForLastOperation+0x7c>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e8      	bne.n	800784a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <FLASH_WaitForLastOperation+0x7c>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007884:	4b09      	ldr	r3, [pc, #36]	; (80078ac <FLASH_WaitForLastOperation+0x7c>)
 8007886:	2201      	movs	r2, #1
 8007888:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800788a:	4b08      	ldr	r3, [pc, #32]	; (80078ac <FLASH_WaitForLastOperation+0x7c>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007896:	f000 f80b 	bl	80078b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
  
}  
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	2001f8a0 	.word	0x2001f8a0
 80078ac:	40023c00 	.word	0x40023c00

080078b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80078b4:	4b27      	ldr	r3, [pc, #156]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80078c0:	4b25      	ldr	r3, [pc, #148]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f043 0310 	orr.w	r3, r3, #16
 80078c8:	4a23      	ldr	r2, [pc, #140]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 80078ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80078cc:	4b21      	ldr	r3, [pc, #132]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 80078ce:	2210      	movs	r2, #16
 80078d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80078de:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f043 0308 	orr.w	r3, r3, #8
 80078e6:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 80078e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80078ea:	4b1a      	ldr	r3, [pc, #104]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 80078ec:	2220      	movs	r2, #32
 80078ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80078f0:	4b18      	ldr	r3, [pc, #96]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f043 0304 	orr.w	r3, r3, #4
 8007904:	4a14      	ldr	r2, [pc, #80]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 8007906:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007908:	4b12      	ldr	r3, [pc, #72]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 800790a:	2240      	movs	r2, #64	; 0x40
 800790c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800790e:	4b11      	ldr	r3, [pc, #68]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800791a:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f043 0302 	orr.w	r3, r3, #2
 8007922:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 8007924:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 8007928:	2280      	movs	r2, #128	; 0x80
 800792a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f043 0320 	orr.w	r3, r3, #32
 8007940:	4a05      	ldr	r2, [pc, #20]	; (8007958 <FLASH_SetErrorCode+0xa8>)
 8007942:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007944:	4b03      	ldr	r3, [pc, #12]	; (8007954 <FLASH_SetErrorCode+0xa4>)
 8007946:	2202      	movs	r2, #2
 8007948:	60da      	str	r2, [r3, #12]
  }
}
 800794a:	bf00      	nop
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40023c00 	.word	0x40023c00
 8007958:	2001f8a0 	.word	0x2001f8a0

0800795c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800796e:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <HAL_FLASHEx_Erase+0xd8>)
 8007970:	7e1b      	ldrb	r3, [r3, #24]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_FLASHEx_Erase+0x1e>
 8007976:	2302      	movs	r3, #2
 8007978:	e058      	b.n	8007a2c <HAL_FLASHEx_Erase+0xd0>
 800797a:	4b2e      	ldr	r3, [pc, #184]	; (8007a34 <HAL_FLASHEx_Erase+0xd8>)
 800797c:	2201      	movs	r2, #1
 800797e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007980:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007984:	f7ff ff54 	bl	8007830 <FLASH_WaitForLastOperation>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d148      	bne.n	8007a24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f04f 32ff 	mov.w	r2, #4294967295
 8007998:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d115      	bne.n	80079ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f000 f844 	bl	8007a3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079b8:	f7ff ff3a 	bl	8007830 <FLASH_WaitForLastOperation>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80079c0:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <HAL_FLASHEx_Erase+0xdc>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <HAL_FLASHEx_Erase+0xdc>)
 80079c6:	f023 0304 	bic.w	r3, r3, #4
 80079ca:	6113      	str	r3, [r2, #16]
 80079cc:	e028      	b.n	8007a20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	e01c      	b.n	8007a10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	68b8      	ldr	r0, [r7, #8]
 80079e0:	f000 f850 	bl	8007a84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079e8:	f7ff ff22 	bl	8007830 <FLASH_WaitForLastOperation>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80079f0:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <HAL_FLASHEx_Erase+0xdc>)
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	4a10      	ldr	r2, [pc, #64]	; (8007a38 <HAL_FLASHEx_Erase+0xdc>)
 80079f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80079fa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	601a      	str	r2, [r3, #0]
          break;
 8007a08:	e00a      	b.n	8007a20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d3da      	bcc.n	80079d6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007a20:	f000 f878 	bl	8007b14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <HAL_FLASHEx_Erase+0xd8>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	761a      	strb	r2, [r3, #24]

  return status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	2001f8a0 	.word	0x2001f8a0
 8007a38:	40023c00 	.word	0x40023c00

08007a3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a48:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <FLASH_MassErase+0x44>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	4a0c      	ldr	r2, [pc, #48]	; (8007a80 <FLASH_MassErase+0x44>)
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <FLASH_MassErase+0x44>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <FLASH_MassErase+0x44>)
 8007a5a:	f043 0304 	orr.w	r3, r3, #4
 8007a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <FLASH_MassErase+0x44>)
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	4a05      	ldr	r2, [pc, #20]	; (8007a80 <FLASH_MassErase+0x44>)
 8007a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a70:	6113      	str	r3, [r2, #16]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40023c00 	.word	0x40023c00

08007a84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e010      	b.n	8007ac2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d103      	bne.n	8007aae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	e009      	b.n	8007ac2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d103      	bne.n	8007abc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e002      	b.n	8007ac2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ac0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	4a12      	ldr	r2, [pc, #72]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007acc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007ace:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	490f      	ldr	r1, [pc, #60]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4a0c      	ldr	r2, [pc, #48]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007ae0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ae4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007af2:	f043 0302 	orr.w	r3, r3, #2
 8007af6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <FLASH_Erase_Sector+0x8c>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b02:	6113      	str	r3, [r2, #16]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40023c00 	.word	0x40023c00

08007b14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007b18:	4b20      	ldr	r3, [pc, #128]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d017      	beq.n	8007b54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007b24:	4b1d      	ldr	r3, [pc, #116]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007b30:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b48:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a13      	ldr	r2, [pc, #76]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007b54:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d017      	beq.n	8007b90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007b60:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a07      	ldr	r2, [pc, #28]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a04      	ldr	r2, [pc, #16]	; (8007b9c <FLASH_FlushCaches+0x88>)
 8007b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b8e:	6013      	str	r3, [r2, #0]
  }
}
 8007b90:	bf00      	nop
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40023c00 	.word	0x40023c00

08007ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b089      	sub	sp, #36	; 0x24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	e16b      	b.n	8007e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	f040 815a 	bne.w	8007e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d00b      	beq.n	8007bfa <HAL_GPIO_Init+0x5a>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d007      	beq.n	8007bfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007bee:	2b11      	cmp	r3, #17
 8007bf0:	d003      	beq.n	8007bfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b12      	cmp	r3, #18
 8007bf8:	d130      	bne.n	8007c5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	2203      	movs	r2, #3
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c30:	2201      	movs	r2, #1
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	fa02 f303 	lsl.w	r3, r2, r3
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 0201 	and.w	r2, r3, #1
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	2203      	movs	r2, #3
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4013      	ands	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d003      	beq.n	8007c9c <HAL_GPIO_Init+0xfc>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b12      	cmp	r3, #18
 8007c9a:	d123      	bne.n	8007ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	08da      	lsrs	r2, r3, #3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3208      	adds	r2, #8
 8007ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	220f      	movs	r2, #15
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	08da      	lsrs	r2, r3, #3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3208      	adds	r2, #8
 8007cde:	69b9      	ldr	r1, [r7, #24]
 8007ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	2203      	movs	r2, #3
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f003 0203 	and.w	r2, r3, #3
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 80b4 	beq.w	8007e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ea8 <HAL_GPIO_Init+0x308>)
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	4a5e      	ldr	r2, [pc, #376]	; (8007ea8 <HAL_GPIO_Init+0x308>)
 8007d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d34:	6453      	str	r3, [r2, #68]	; 0x44
 8007d36:	4b5c      	ldr	r3, [pc, #368]	; (8007ea8 <HAL_GPIO_Init+0x308>)
 8007d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d42:	4a5a      	ldr	r2, [pc, #360]	; (8007eac <HAL_GPIO_Init+0x30c>)
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	089b      	lsrs	r3, r3, #2
 8007d48:	3302      	adds	r3, #2
 8007d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	220f      	movs	r2, #15
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	4013      	ands	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a51      	ldr	r2, [pc, #324]	; (8007eb0 <HAL_GPIO_Init+0x310>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d02b      	beq.n	8007dc6 <HAL_GPIO_Init+0x226>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a50      	ldr	r2, [pc, #320]	; (8007eb4 <HAL_GPIO_Init+0x314>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d025      	beq.n	8007dc2 <HAL_GPIO_Init+0x222>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a4f      	ldr	r2, [pc, #316]	; (8007eb8 <HAL_GPIO_Init+0x318>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d01f      	beq.n	8007dbe <HAL_GPIO_Init+0x21e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a4e      	ldr	r2, [pc, #312]	; (8007ebc <HAL_GPIO_Init+0x31c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d019      	beq.n	8007dba <HAL_GPIO_Init+0x21a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a4d      	ldr	r2, [pc, #308]	; (8007ec0 <HAL_GPIO_Init+0x320>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <HAL_GPIO_Init+0x216>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a4c      	ldr	r2, [pc, #304]	; (8007ec4 <HAL_GPIO_Init+0x324>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00d      	beq.n	8007db2 <HAL_GPIO_Init+0x212>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a4b      	ldr	r2, [pc, #300]	; (8007ec8 <HAL_GPIO_Init+0x328>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d007      	beq.n	8007dae <HAL_GPIO_Init+0x20e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a4a      	ldr	r2, [pc, #296]	; (8007ecc <HAL_GPIO_Init+0x32c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d101      	bne.n	8007daa <HAL_GPIO_Init+0x20a>
 8007da6:	2307      	movs	r3, #7
 8007da8:	e00e      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007daa:	2308      	movs	r3, #8
 8007dac:	e00c      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007dae:	2306      	movs	r3, #6
 8007db0:	e00a      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007db2:	2305      	movs	r3, #5
 8007db4:	e008      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007db6:	2304      	movs	r3, #4
 8007db8:	e006      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e004      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e002      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <HAL_GPIO_Init+0x228>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	f002 0203 	and.w	r2, r2, #3
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	4093      	lsls	r3, r2
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007dd8:	4934      	ldr	r1, [pc, #208]	; (8007eac <HAL_GPIO_Init+0x30c>)
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	089b      	lsrs	r3, r3, #2
 8007dde:	3302      	adds	r3, #2
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007de6:	4b3a      	ldr	r3, [pc, #232]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	43db      	mvns	r3, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4013      	ands	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e0a:	4a31      	ldr	r2, [pc, #196]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e10:	4b2f      	ldr	r3, [pc, #188]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e34:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e3a:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	43db      	mvns	r3, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4013      	ands	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e64:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	4013      	ands	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e88:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <HAL_GPIO_Init+0x330>)
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	3301      	adds	r3, #1
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b0f      	cmp	r3, #15
 8007e98:	f67f ae90 	bls.w	8007bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	3724      	adds	r7, #36	; 0x24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	40013800 	.word	0x40013800
 8007eb0:	40020000 	.word	0x40020000
 8007eb4:	40020400 	.word	0x40020400
 8007eb8:	40020800 	.word	0x40020800
 8007ebc:	40020c00 	.word	0x40020c00
 8007ec0:	40021000 	.word	0x40021000
 8007ec4:	40021400 	.word	0x40021400
 8007ec8:	40021800 	.word	0x40021800
 8007ecc:	40021c00 	.word	0x40021c00
 8007ed0:	40013c00 	.word	0x40013c00

08007ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	887b      	ldrh	r3, [r7, #2]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007eec:	2301      	movs	r3, #1
 8007eee:	73fb      	strb	r3, [r7, #15]
 8007ef0:	e001      	b.n	8007ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
 8007f10:	4613      	mov	r3, r2
 8007f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f14:	787b      	ldrb	r3, [r7, #1]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f1a:	887a      	ldrh	r2, [r7, #2]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f20:	e003      	b.n	8007f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f22:	887b      	ldrh	r3, [r7, #2]
 8007f24:	041a      	lsls	r2, r3, #16
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	619a      	str	r2, [r3, #24]
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e11f      	b.n	800818a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fd ff96 	bl	8005e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2224      	movs	r2, #36	; 0x24
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0201 	bic.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f000 fd18 	bl	80089d0 <HAL_RCC_GetPCLK1Freq>
 8007fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	4a7b      	ldr	r2, [pc, #492]	; (8008194 <HAL_I2C_Init+0x25c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d807      	bhi.n	8007fbc <HAL_I2C_Init+0x84>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a7a      	ldr	r2, [pc, #488]	; (8008198 <HAL_I2C_Init+0x260>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	bf94      	ite	ls
 8007fb4:	2301      	movls	r3, #1
 8007fb6:	2300      	movhi	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e006      	b.n	8007fca <HAL_I2C_Init+0x92>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a77      	ldr	r2, [pc, #476]	; (800819c <HAL_I2C_Init+0x264>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bf94      	ite	ls
 8007fc4:	2301      	movls	r3, #1
 8007fc6:	2300      	movhi	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e0db      	b.n	800818a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a72      	ldr	r2, [pc, #456]	; (80081a0 <HAL_I2C_Init+0x268>)
 8007fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fda:	0c9b      	lsrs	r3, r3, #18
 8007fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4a64      	ldr	r2, [pc, #400]	; (8008194 <HAL_I2C_Init+0x25c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d802      	bhi.n	800800c <HAL_I2C_Init+0xd4>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3301      	adds	r3, #1
 800800a:	e009      	b.n	8008020 <HAL_I2C_Init+0xe8>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008012:	fb02 f303 	mul.w	r3, r2, r3
 8008016:	4a63      	ldr	r2, [pc, #396]	; (80081a4 <HAL_I2C_Init+0x26c>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	099b      	lsrs	r3, r3, #6
 800801e:	3301      	adds	r3, #1
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	430b      	orrs	r3, r1
 8008026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	4956      	ldr	r1, [pc, #344]	; (8008194 <HAL_I2C_Init+0x25c>)
 800803c:	428b      	cmp	r3, r1
 800803e:	d80d      	bhi.n	800805c <HAL_I2C_Init+0x124>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	1e59      	subs	r1, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	fbb1 f3f3 	udiv	r3, r1, r3
 800804e:	3301      	adds	r3, #1
 8008050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008054:	2b04      	cmp	r3, #4
 8008056:	bf38      	it	cc
 8008058:	2304      	movcc	r3, #4
 800805a:	e04f      	b.n	80080fc <HAL_I2C_Init+0x1c4>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d111      	bne.n	8008088 <HAL_I2C_Init+0x150>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	1e58      	subs	r0, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	440b      	add	r3, r1
 8008072:	fbb0 f3f3 	udiv	r3, r0, r3
 8008076:	3301      	adds	r3, #1
 8008078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800807c:	2b00      	cmp	r3, #0
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	e012      	b.n	80080ae <HAL_I2C_Init+0x176>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1e58      	subs	r0, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6859      	ldr	r1, [r3, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	0099      	lsls	r1, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	fbb0 f3f3 	udiv	r3, r0, r3
 800809e:	3301      	adds	r3, #1
 80080a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_I2C_Init+0x17e>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e022      	b.n	80080fc <HAL_I2C_Init+0x1c4>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10e      	bne.n	80080dc <HAL_I2C_Init+0x1a4>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1e58      	subs	r0, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6859      	ldr	r1, [r3, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	440b      	add	r3, r1
 80080cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80080d0:	3301      	adds	r3, #1
 80080d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080da:	e00f      	b.n	80080fc <HAL_I2C_Init+0x1c4>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	1e58      	subs	r0, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6859      	ldr	r1, [r3, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	0099      	lsls	r1, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	6809      	ldr	r1, [r1, #0]
 8008100:	4313      	orrs	r3, r2
 8008102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69da      	ldr	r2, [r3, #28]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800812a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6911      	ldr	r1, [r2, #16]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68d2      	ldr	r2, [r2, #12]
 8008136:	4311      	orrs	r1, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6812      	ldr	r2, [r2, #0]
 800813c:	430b      	orrs	r3, r1
 800813e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	000186a0 	.word	0x000186a0
 8008198:	001e847f 	.word	0x001e847f
 800819c:	003d08ff 	.word	0x003d08ff
 80081a0:	431bde83 	.word	0x431bde83
 80081a4:	10624dd3 	.word	0x10624dd3

080081a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e25b      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d075      	beq.n	80082b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081c6:	4ba3      	ldr	r3, [pc, #652]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d00c      	beq.n	80081ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081d2:	4ba0      	ldr	r3, [pc, #640]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081da:	2b08      	cmp	r3, #8
 80081dc:	d112      	bne.n	8008204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081de:	4b9d      	ldr	r3, [pc, #628]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081ea:	d10b      	bne.n	8008204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ec:	4b99      	ldr	r3, [pc, #612]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d05b      	beq.n	80082b0 <HAL_RCC_OscConfig+0x108>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d157      	bne.n	80082b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e236      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800820c:	d106      	bne.n	800821c <HAL_RCC_OscConfig+0x74>
 800820e:	4b91      	ldr	r3, [pc, #580]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a90      	ldr	r2, [pc, #576]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e01d      	b.n	8008258 <HAL_RCC_OscConfig+0xb0>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008224:	d10c      	bne.n	8008240 <HAL_RCC_OscConfig+0x98>
 8008226:	4b8b      	ldr	r3, [pc, #556]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a8a      	ldr	r2, [pc, #552]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800822c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	4b88      	ldr	r3, [pc, #544]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a87      	ldr	r2, [pc, #540]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e00b      	b.n	8008258 <HAL_RCC_OscConfig+0xb0>
 8008240:	4b84      	ldr	r3, [pc, #528]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a83      	ldr	r2, [pc, #524]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	4b81      	ldr	r3, [pc, #516]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a80      	ldr	r2, [pc, #512]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d013      	beq.n	8008288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008260:	f7fe fa12 	bl	8006688 <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008268:	f7fe fa0e 	bl	8006688 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b64      	cmp	r3, #100	; 0x64
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e1fb      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827a:	4b76      	ldr	r3, [pc, #472]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0xc0>
 8008286:	e014      	b.n	80082b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008288:	f7fe f9fe 	bl	8006688 <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008290:	f7fe f9fa 	bl	8006688 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b64      	cmp	r3, #100	; 0x64
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e1e7      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082a2:	4b6c      	ldr	r3, [pc, #432]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f0      	bne.n	8008290 <HAL_RCC_OscConfig+0xe8>
 80082ae:	e000      	b.n	80082b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d063      	beq.n	8008386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082be:	4b65      	ldr	r3, [pc, #404]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 030c 	and.w	r3, r3, #12
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ca:	4b62      	ldr	r3, [pc, #392]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d11c      	bne.n	8008310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082d6:	4b5f      	ldr	r3, [pc, #380]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d116      	bne.n	8008310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082e2:	4b5c      	ldr	r3, [pc, #368]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_RCC_OscConfig+0x152>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e1bb      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082fa:	4b56      	ldr	r3, [pc, #344]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	4952      	ldr	r1, [pc, #328]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800830a:	4313      	orrs	r3, r2
 800830c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800830e:	e03a      	b.n	8008386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d020      	beq.n	800835a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008318:	4b4f      	ldr	r3, [pc, #316]	; (8008458 <HAL_RCC_OscConfig+0x2b0>)
 800831a:	2201      	movs	r2, #1
 800831c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831e:	f7fe f9b3 	bl	8006688 <HAL_GetTick>
 8008322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008326:	f7fe f9af 	bl	8006688 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e19c      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008338:	4b46      	ldr	r3, [pc, #280]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0f0      	beq.n	8008326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008344:	4b43      	ldr	r3, [pc, #268]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	4940      	ldr	r1, [pc, #256]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008354:	4313      	orrs	r3, r2
 8008356:	600b      	str	r3, [r1, #0]
 8008358:	e015      	b.n	8008386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800835a:	4b3f      	ldr	r3, [pc, #252]	; (8008458 <HAL_RCC_OscConfig+0x2b0>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008360:	f7fe f992 	bl	8006688 <HAL_GetTick>
 8008364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008368:	f7fe f98e 	bl	8006688 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e17b      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800837a:	4b36      	ldr	r3, [pc, #216]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f0      	bne.n	8008368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d030      	beq.n	80083f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d016      	beq.n	80083c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <HAL_RCC_OscConfig+0x2b4>)
 800839c:	2201      	movs	r2, #1
 800839e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a0:	f7fe f972 	bl	8006688 <HAL_GetTick>
 80083a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083a6:	e008      	b.n	80083ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083a8:	f7fe f96e 	bl	8006688 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e15b      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083ba:	4b26      	ldr	r3, [pc, #152]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80083bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0f0      	beq.n	80083a8 <HAL_RCC_OscConfig+0x200>
 80083c6:	e015      	b.n	80083f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083c8:	4b24      	ldr	r3, [pc, #144]	; (800845c <HAL_RCC_OscConfig+0x2b4>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ce:	f7fe f95b 	bl	8006688 <HAL_GetTick>
 80083d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083d4:	e008      	b.n	80083e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083d6:	f7fe f957 	bl	8006688 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e144      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083e8:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 80083ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1f0      	bne.n	80083d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 80a0 	beq.w	8008542 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10f      	bne.n	8008432 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	4a0e      	ldr	r2, [pc, #56]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 800841c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008420:	6413      	str	r3, [r2, #64]	; 0x40
 8008422:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <HAL_RCC_OscConfig+0x2ac>)
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842a:	60bb      	str	r3, [r7, #8]
 800842c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <HAL_RCC_OscConfig+0x2b8>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d121      	bne.n	8008482 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800843e:	4b08      	ldr	r3, [pc, #32]	; (8008460 <HAL_RCC_OscConfig+0x2b8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a07      	ldr	r2, [pc, #28]	; (8008460 <HAL_RCC_OscConfig+0x2b8>)
 8008444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800844a:	f7fe f91d 	bl	8006688 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008450:	e011      	b.n	8008476 <HAL_RCC_OscConfig+0x2ce>
 8008452:	bf00      	nop
 8008454:	40023800 	.word	0x40023800
 8008458:	42470000 	.word	0x42470000
 800845c:	42470e80 	.word	0x42470e80
 8008460:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008464:	f7fe f910 	bl	8006688 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e0fd      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008476:	4b81      	ldr	r3, [pc, #516]	; (800867c <HAL_RCC_OscConfig+0x4d4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d106      	bne.n	8008498 <HAL_RCC_OscConfig+0x2f0>
 800848a:	4b7d      	ldr	r3, [pc, #500]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	4a7c      	ldr	r2, [pc, #496]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	6713      	str	r3, [r2, #112]	; 0x70
 8008496:	e01c      	b.n	80084d2 <HAL_RCC_OscConfig+0x32a>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b05      	cmp	r3, #5
 800849e:	d10c      	bne.n	80084ba <HAL_RCC_OscConfig+0x312>
 80084a0:	4b77      	ldr	r3, [pc, #476]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	4a76      	ldr	r2, [pc, #472]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084a6:	f043 0304 	orr.w	r3, r3, #4
 80084aa:	6713      	str	r3, [r2, #112]	; 0x70
 80084ac:	4b74      	ldr	r3, [pc, #464]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	4a73      	ldr	r2, [pc, #460]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	6713      	str	r3, [r2, #112]	; 0x70
 80084b8:	e00b      	b.n	80084d2 <HAL_RCC_OscConfig+0x32a>
 80084ba:	4b71      	ldr	r3, [pc, #452]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084be:	4a70      	ldr	r2, [pc, #448]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	6713      	str	r3, [r2, #112]	; 0x70
 80084c6:	4b6e      	ldr	r3, [pc, #440]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ca:	4a6d      	ldr	r2, [pc, #436]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084cc:	f023 0304 	bic.w	r3, r3, #4
 80084d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d015      	beq.n	8008506 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084da:	f7fe f8d5 	bl	8006688 <HAL_GetTick>
 80084de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e0:	e00a      	b.n	80084f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084e2:	f7fe f8d1 	bl	8006688 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e0bc      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084f8:	4b61      	ldr	r3, [pc, #388]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80084fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0ee      	beq.n	80084e2 <HAL_RCC_OscConfig+0x33a>
 8008504:	e014      	b.n	8008530 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008506:	f7fe f8bf 	bl	8006688 <HAL_GetTick>
 800850a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800850c:	e00a      	b.n	8008524 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800850e:	f7fe f8bb 	bl	8006688 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f241 3288 	movw	r2, #5000	; 0x1388
 800851c:	4293      	cmp	r3, r2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e0a6      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008524:	4b56      	ldr	r3, [pc, #344]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 8008526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1ee      	bne.n	800850e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d105      	bne.n	8008542 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008536:	4b52      	ldr	r3, [pc, #328]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	4a51      	ldr	r2, [pc, #324]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 800853c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8092 	beq.w	8008670 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800854c:	4b4c      	ldr	r3, [pc, #304]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 030c 	and.w	r3, r3, #12
 8008554:	2b08      	cmp	r3, #8
 8008556:	d05c      	beq.n	8008612 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d141      	bne.n	80085e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008560:	4b48      	ldr	r3, [pc, #288]	; (8008684 <HAL_RCC_OscConfig+0x4dc>)
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008566:	f7fe f88f 	bl	8006688 <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800856e:	f7fe f88b 	bl	8006688 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e078      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008580:	4b3f      	ldr	r3, [pc, #252]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f0      	bne.n	800856e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	019b      	lsls	r3, r3, #6
 800859c:	431a      	orrs	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	3b01      	subs	r3, #1
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	431a      	orrs	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	061b      	lsls	r3, r3, #24
 80085b0:	4933      	ldr	r1, [pc, #204]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085b6:	4b33      	ldr	r3, [pc, #204]	; (8008684 <HAL_RCC_OscConfig+0x4dc>)
 80085b8:	2201      	movs	r2, #1
 80085ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085bc:	f7fe f864 	bl	8006688 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085c4:	f7fe f860 	bl	8006688 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e04d      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085d6:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0f0      	beq.n	80085c4 <HAL_RCC_OscConfig+0x41c>
 80085e2:	e045      	b.n	8008670 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e4:	4b27      	ldr	r3, [pc, #156]	; (8008684 <HAL_RCC_OscConfig+0x4dc>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ea:	f7fe f84d 	bl	8006688 <HAL_GetTick>
 80085ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f0:	e008      	b.n	8008604 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085f2:	f7fe f849 	bl	8006688 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e036      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008604:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1f0      	bne.n	80085f2 <HAL_RCC_OscConfig+0x44a>
 8008610:	e02e      	b.n	8008670 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e029      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800861e:	4b18      	ldr	r3, [pc, #96]	; (8008680 <HAL_RCC_OscConfig+0x4d8>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	429a      	cmp	r2, r3
 8008630:	d11c      	bne.n	800866c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863c:	429a      	cmp	r2, r3
 800863e:	d115      	bne.n	800866c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008646:	4013      	ands	r3, r2
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800864c:	4293      	cmp	r3, r2
 800864e:	d10d      	bne.n	800866c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800865a:	429a      	cmp	r2, r3
 800865c:	d106      	bne.n	800866c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d001      	beq.n	8008670 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40007000 	.word	0x40007000
 8008680:	40023800 	.word	0x40023800
 8008684:	42470060 	.word	0x42470060

08008688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e0cc      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800869c:	4b68      	ldr	r3, [pc, #416]	; (8008840 <HAL_RCC_ClockConfig+0x1b8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d90c      	bls.n	80086c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086aa:	4b65      	ldr	r3, [pc, #404]	; (8008840 <HAL_RCC_ClockConfig+0x1b8>)
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086b2:	4b63      	ldr	r3, [pc, #396]	; (8008840 <HAL_RCC_ClockConfig+0x1b8>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d001      	beq.n	80086c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e0b8      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d020      	beq.n	8008712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086dc:	4b59      	ldr	r3, [pc, #356]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	4a58      	ldr	r2, [pc, #352]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80086e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086f4:	4b53      	ldr	r3, [pc, #332]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	4a52      	ldr	r2, [pc, #328]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80086fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008700:	4b50      	ldr	r3, [pc, #320]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	494d      	ldr	r1, [pc, #308]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 800870e:	4313      	orrs	r3, r2
 8008710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d044      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d107      	bne.n	8008736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008726:	4b47      	ldr	r3, [pc, #284]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d119      	bne.n	8008766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e07f      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d003      	beq.n	8008746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008742:	2b03      	cmp	r3, #3
 8008744:	d107      	bne.n	8008756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008746:	4b3f      	ldr	r3, [pc, #252]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e06f      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008756:	4b3b      	ldr	r3, [pc, #236]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e067      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008766:	4b37      	ldr	r3, [pc, #220]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f023 0203 	bic.w	r2, r3, #3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	4934      	ldr	r1, [pc, #208]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008774:	4313      	orrs	r3, r2
 8008776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008778:	f7fd ff86 	bl	8006688 <HAL_GetTick>
 800877c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800877e:	e00a      	b.n	8008796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008780:	f7fd ff82 	bl	8006688 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	f241 3288 	movw	r2, #5000	; 0x1388
 800878e:	4293      	cmp	r3, r2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e04f      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008796:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 020c 	and.w	r2, r3, #12
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d1eb      	bne.n	8008780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <HAL_RCC_ClockConfig+0x1b8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d20c      	bcs.n	80087d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b6:	4b22      	ldr	r3, [pc, #136]	; (8008840 <HAL_RCC_ClockConfig+0x1b8>)
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <HAL_RCC_ClockConfig+0x1b8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d001      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e032      	b.n	8008836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d008      	beq.n	80087ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087dc:	4b19      	ldr	r3, [pc, #100]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4916      	ldr	r1, [pc, #88]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087fa:	4b12      	ldr	r3, [pc, #72]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	490e      	ldr	r1, [pc, #56]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 800880a:	4313      	orrs	r3, r2
 800880c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800880e:	f000 f821 	bl	8008854 <HAL_RCC_GetSysClockFreq>
 8008812:	4601      	mov	r1, r0
 8008814:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <HAL_RCC_ClockConfig+0x1bc>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	091b      	lsrs	r3, r3, #4
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	4a0a      	ldr	r2, [pc, #40]	; (8008848 <HAL_RCC_ClockConfig+0x1c0>)
 8008820:	5cd3      	ldrb	r3, [r2, r3]
 8008822:	fa21 f303 	lsr.w	r3, r1, r3
 8008826:	4a09      	ldr	r2, [pc, #36]	; (800884c <HAL_RCC_ClockConfig+0x1c4>)
 8008828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <HAL_RCC_ClockConfig+0x1c8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd fee6 	bl	8006600 <HAL_InitTick>

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40023c00 	.word	0x40023c00
 8008844:	40023800 	.word	0x40023800
 8008848:	0800f118 	.word	0x0800f118
 800884c:	20000034 	.word	0x20000034
 8008850:	20000038 	.word	0x20000038

08008854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	2300      	movs	r3, #0
 8008864:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800886a:	4b50      	ldr	r3, [pc, #320]	; (80089ac <HAL_RCC_GetSysClockFreq+0x158>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f003 030c 	and.w	r3, r3, #12
 8008872:	2b04      	cmp	r3, #4
 8008874:	d007      	beq.n	8008886 <HAL_RCC_GetSysClockFreq+0x32>
 8008876:	2b08      	cmp	r3, #8
 8008878:	d008      	beq.n	800888c <HAL_RCC_GetSysClockFreq+0x38>
 800887a:	2b00      	cmp	r3, #0
 800887c:	f040 808d 	bne.w	800899a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008880:	4b4b      	ldr	r3, [pc, #300]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008882:	60bb      	str	r3, [r7, #8]
       break;
 8008884:	e08c      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008886:	4b4b      	ldr	r3, [pc, #300]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008888:	60bb      	str	r3, [r7, #8]
      break;
 800888a:	e089      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800888c:	4b47      	ldr	r3, [pc, #284]	; (80089ac <HAL_RCC_GetSysClockFreq+0x158>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008894:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008896:	4b45      	ldr	r3, [pc, #276]	; (80089ac <HAL_RCC_GetSysClockFreq+0x158>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d023      	beq.n	80088ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088a2:	4b42      	ldr	r3, [pc, #264]	; (80089ac <HAL_RCC_GetSysClockFreq+0x158>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	099b      	lsrs	r3, r3, #6
 80088a8:	f04f 0400 	mov.w	r4, #0
 80088ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80088b0:	f04f 0200 	mov.w	r2, #0
 80088b4:	ea03 0501 	and.w	r5, r3, r1
 80088b8:	ea04 0602 	and.w	r6, r4, r2
 80088bc:	4a3d      	ldr	r2, [pc, #244]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80088be:	fb02 f106 	mul.w	r1, r2, r6
 80088c2:	2200      	movs	r2, #0
 80088c4:	fb02 f205 	mul.w	r2, r2, r5
 80088c8:	440a      	add	r2, r1
 80088ca:	493a      	ldr	r1, [pc, #232]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80088cc:	fba5 0101 	umull	r0, r1, r5, r1
 80088d0:	1853      	adds	r3, r2, r1
 80088d2:	4619      	mov	r1, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f04f 0400 	mov.w	r4, #0
 80088da:	461a      	mov	r2, r3
 80088dc:	4623      	mov	r3, r4
 80088de:	f7f8 f9d3 	bl	8000c88 <__aeabi_uldivmod>
 80088e2:	4603      	mov	r3, r0
 80088e4:	460c      	mov	r4, r1
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e049      	b.n	800897e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088ea:	4b30      	ldr	r3, [pc, #192]	; (80089ac <HAL_RCC_GetSysClockFreq+0x158>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	099b      	lsrs	r3, r3, #6
 80088f0:	f04f 0400 	mov.w	r4, #0
 80088f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	ea03 0501 	and.w	r5, r3, r1
 8008900:	ea04 0602 	and.w	r6, r4, r2
 8008904:	4629      	mov	r1, r5
 8008906:	4632      	mov	r2, r6
 8008908:	f04f 0300 	mov.w	r3, #0
 800890c:	f04f 0400 	mov.w	r4, #0
 8008910:	0154      	lsls	r4, r2, #5
 8008912:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008916:	014b      	lsls	r3, r1, #5
 8008918:	4619      	mov	r1, r3
 800891a:	4622      	mov	r2, r4
 800891c:	1b49      	subs	r1, r1, r5
 800891e:	eb62 0206 	sbc.w	r2, r2, r6
 8008922:	f04f 0300 	mov.w	r3, #0
 8008926:	f04f 0400 	mov.w	r4, #0
 800892a:	0194      	lsls	r4, r2, #6
 800892c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008930:	018b      	lsls	r3, r1, #6
 8008932:	1a5b      	subs	r3, r3, r1
 8008934:	eb64 0402 	sbc.w	r4, r4, r2
 8008938:	f04f 0100 	mov.w	r1, #0
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	00e2      	lsls	r2, r4, #3
 8008942:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008946:	00d9      	lsls	r1, r3, #3
 8008948:	460b      	mov	r3, r1
 800894a:	4614      	mov	r4, r2
 800894c:	195b      	adds	r3, r3, r5
 800894e:	eb44 0406 	adc.w	r4, r4, r6
 8008952:	f04f 0100 	mov.w	r1, #0
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	02a2      	lsls	r2, r4, #10
 800895c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008960:	0299      	lsls	r1, r3, #10
 8008962:	460b      	mov	r3, r1
 8008964:	4614      	mov	r4, r2
 8008966:	4618      	mov	r0, r3
 8008968:	4621      	mov	r1, r4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f04f 0400 	mov.w	r4, #0
 8008970:	461a      	mov	r2, r3
 8008972:	4623      	mov	r3, r4
 8008974:	f7f8 f988 	bl	8000c88 <__aeabi_uldivmod>
 8008978:	4603      	mov	r3, r0
 800897a:	460c      	mov	r4, r1
 800897c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800897e:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <HAL_RCC_GetSysClockFreq+0x158>)
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	3301      	adds	r3, #1
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	fbb2 f3f3 	udiv	r3, r2, r3
 8008996:	60bb      	str	r3, [r7, #8]
      break;
 8008998:	e002      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800899c:	60bb      	str	r3, [r7, #8]
      break;
 800899e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089a0:	68bb      	ldr	r3, [r7, #8]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40023800 	.word	0x40023800
 80089b0:	00f42400 	.word	0x00f42400
 80089b4:	00bebc20 	.word	0x00bebc20

080089b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089bc:	4b03      	ldr	r3, [pc, #12]	; (80089cc <HAL_RCC_GetHCLKFreq+0x14>)
 80089be:	681b      	ldr	r3, [r3, #0]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000034 	.word	0x20000034

080089d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089d4:	f7ff fff0 	bl	80089b8 <HAL_RCC_GetHCLKFreq>
 80089d8:	4601      	mov	r1, r0
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	0a9b      	lsrs	r3, r3, #10
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	4a03      	ldr	r2, [pc, #12]	; (80089f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089e6:	5cd3      	ldrb	r3, [r2, r3]
 80089e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	40023800 	.word	0x40023800
 80089f4:	0800f128 	.word	0x0800f128

080089f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089fc:	f7ff ffdc 	bl	80089b8 <HAL_RCC_GetHCLKFreq>
 8008a00:	4601      	mov	r1, r0
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	0b5b      	lsrs	r3, r3, #13
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	4a03      	ldr	r2, [pc, #12]	; (8008a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a0e:	5cd3      	ldrb	r3, [r2, r3]
 8008a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	0800f128 	.word	0x0800f128

08008a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e056      	b.n	8008ae0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7fd fa67 	bl	8005f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	ea42 0103 	orr.w	r1, r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	f003 0104 	and.w	r1, r3, #4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69da      	ldr	r2, [r3, #28]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ace:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_SPI_Transmit+0x22>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e11e      	b.n	8008d48 <HAL_SPI_Transmit+0x260>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b12:	f7fd fdb9 	bl	8006688 <HAL_GetTick>
 8008b16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b18:	88fb      	ldrh	r3, [r7, #6]
 8008b1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d002      	beq.n	8008b2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b2c:	e103      	b.n	8008d36 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <HAL_SPI_Transmit+0x52>
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b3e:	e0fa      	b.n	8008d36 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	88fa      	ldrh	r2, [r7, #6]
 8008b5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b86:	d107      	bne.n	8008b98 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d007      	beq.n	8008bb6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bbe:	d14b      	bne.n	8008c58 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_SPI_Transmit+0xe6>
 8008bc8:	8afb      	ldrh	r3, [r7, #22]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d13e      	bne.n	8008c4c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	881a      	ldrh	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	1c9a      	adds	r2, r3, #2
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bf2:	e02b      	b.n	8008c4c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d112      	bne.n	8008c28 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	881a      	ldrh	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	1c9a      	adds	r2, r3, #2
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c26:	e011      	b.n	8008c4c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c28:	f7fd fd2e 	bl	8006688 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d803      	bhi.n	8008c40 <HAL_SPI_Transmit+0x158>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d102      	bne.n	8008c46 <HAL_SPI_Transmit+0x15e>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c4a:	e074      	b.n	8008d36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1ce      	bne.n	8008bf4 <HAL_SPI_Transmit+0x10c>
 8008c56:	e04c      	b.n	8008cf2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <HAL_SPI_Transmit+0x17e>
 8008c60:	8afb      	ldrh	r3, [r7, #22]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d140      	bne.n	8008ce8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	330c      	adds	r3, #12
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c8c:	e02c      	b.n	8008ce8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d113      	bne.n	8008cc4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	7812      	ldrb	r2, [r2, #0]
 8008ca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cc2:	e011      	b.n	8008ce8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cc4:	f7fd fce0 	bl	8006688 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d803      	bhi.n	8008cdc <HAL_SPI_Transmit+0x1f4>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d102      	bne.n	8008ce2 <HAL_SPI_Transmit+0x1fa>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d102      	bne.n	8008ce8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ce6:	e026      	b.n	8008d36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1cd      	bne.n	8008c8e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 fba4 	bl	8009444 <SPI_EndRxTxTransaction>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2220      	movs	r2, #32
 8008d06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d10:	2300      	movs	r3, #0
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	77fb      	strb	r3, [r7, #31]
 8008d32:	e000      	b.n	8008d36 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008d34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d6c:	d112      	bne.n	8008d94 <HAL_SPI_Receive+0x44>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10e      	bne.n	8008d94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2204      	movs	r2, #4
 8008d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d7e:	88fa      	ldrh	r2, [r7, #6]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f8e9 	bl	8008f62 <HAL_SPI_TransmitReceive>
 8008d90:	4603      	mov	r3, r0
 8008d92:	e0e2      	b.n	8008f5a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_SPI_Receive+0x52>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e0db      	b.n	8008f5a <HAL_SPI_Receive+0x20a>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008daa:	f7fd fc6d 	bl	8006688 <HAL_GetTick>
 8008dae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d002      	beq.n	8008dc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dc0:	e0c2      	b.n	8008f48 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_SPI_Receive+0x7e>
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dd2:	e0b9      	b.n	8008f48 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e1a:	d107      	bne.n	8008e2c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d007      	beq.n	8008e4a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d162      	bne.n	8008f18 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e52:	e02e      	b.n	8008eb2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d115      	bne.n	8008e8e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f103 020c 	add.w	r2, r3, #12
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	b2d2      	uxtb	r2, r2
 8008e72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e8c:	e011      	b.n	8008eb2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e8e:	f7fd fbfb 	bl	8006688 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d803      	bhi.n	8008ea6 <HAL_SPI_Receive+0x156>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d102      	bne.n	8008eac <HAL_SPI_Receive+0x15c>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008eb0:	e04a      	b.n	8008f48 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1cb      	bne.n	8008e54 <HAL_SPI_Receive+0x104>
 8008ebc:	e031      	b.n	8008f22 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d113      	bne.n	8008ef4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	1c9a      	adds	r2, r3, #2
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ef2:	e011      	b.n	8008f18 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ef4:	f7fd fbc8 	bl	8006688 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d803      	bhi.n	8008f0c <HAL_SPI_Receive+0x1bc>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	d102      	bne.n	8008f12 <HAL_SPI_Receive+0x1c2>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f16:	e017      	b.n	8008f48 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1cd      	bne.n	8008ebe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 fa27 	bl	800937a <SPI_EndRxTransaction>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2220      	movs	r2, #32
 8008f36:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
 8008f44:	e000      	b.n	8008f48 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b08c      	sub	sp, #48	; 0x30
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	607a      	str	r2, [r7, #4]
 8008f6e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f70:	2301      	movs	r3, #1
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_SPI_TransmitReceive+0x26>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e18a      	b.n	800929e <HAL_SPI_TransmitReceive+0x33c>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f90:	f7fd fb7a 	bl	8006688 <HAL_GetTick>
 8008f94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008fa6:	887b      	ldrh	r3, [r7, #2]
 8008fa8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d00f      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0x70>
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fb8:	d107      	bne.n	8008fca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <HAL_SPI_TransmitReceive+0x68>
 8008fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	d003      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fd0:	e15b      	b.n	800928a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_SPI_TransmitReceive+0x82>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <HAL_SPI_TransmitReceive+0x82>
 8008fde:	887b      	ldrh	r3, [r7, #2]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fea:	e14e      	b.n	800928a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d003      	beq.n	8009000 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2205      	movs	r2, #5
 8008ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	887a      	ldrh	r2, [r7, #2]
 8009010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	887a      	ldrh	r2, [r7, #2]
 8009016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	887a      	ldrh	r2, [r7, #2]
 8009022:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	887a      	ldrh	r2, [r7, #2]
 8009028:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009040:	2b40      	cmp	r3, #64	; 0x40
 8009042:	d007      	beq.n	8009054 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800905c:	d178      	bne.n	8009150 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <HAL_SPI_TransmitReceive+0x10a>
 8009066:	8b7b      	ldrh	r3, [r7, #26]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d166      	bne.n	800913a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	881a      	ldrh	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907c:	1c9a      	adds	r2, r3, #2
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009090:	e053      	b.n	800913a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b02      	cmp	r3, #2
 800909e:	d11b      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x176>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d016      	beq.n	80090d8 <HAL_SPI_TransmitReceive+0x176>
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d113      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b4:	881a      	ldrh	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	1c9a      	adds	r2, r3, #2
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d119      	bne.n	800911a <HAL_SPI_TransmitReceive+0x1b8>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d014      	beq.n	800911a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	b292      	uxth	r2, r2
 80090fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	1c9a      	adds	r2, r3, #2
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800910c:	b29b      	uxth	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009116:	2301      	movs	r3, #1
 8009118:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800911a:	f7fd fab5 	bl	8006688 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009126:	429a      	cmp	r2, r3
 8009128:	d807      	bhi.n	800913a <HAL_SPI_TransmitReceive+0x1d8>
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009130:	d003      	beq.n	800913a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009138:	e0a7      	b.n	800928a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800913e:	b29b      	uxth	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1a6      	bne.n	8009092 <HAL_SPI_TransmitReceive+0x130>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1a1      	bne.n	8009092 <HAL_SPI_TransmitReceive+0x130>
 800914e:	e07c      	b.n	800924a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <HAL_SPI_TransmitReceive+0x1fc>
 8009158:	8b7b      	ldrh	r3, [r7, #26]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d16b      	bne.n	8009236 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	330c      	adds	r3, #12
 8009168:	7812      	ldrb	r2, [r2, #0]
 800916a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009184:	e057      	b.n	8009236 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b02      	cmp	r3, #2
 8009192:	d11c      	bne.n	80091ce <HAL_SPI_TransmitReceive+0x26c>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d017      	beq.n	80091ce <HAL_SPI_TransmitReceive+0x26c>
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d114      	bne.n	80091ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d119      	bne.n	8009210 <HAL_SPI_TransmitReceive+0x2ae>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d014      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	b2d2      	uxtb	r2, r2
 80091f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800920c:	2301      	movs	r3, #1
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009210:	f7fd fa3a 	bl	8006688 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800921c:	429a      	cmp	r2, r3
 800921e:	d803      	bhi.n	8009228 <HAL_SPI_TransmitReceive+0x2c6>
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d102      	bne.n	800922e <HAL_SPI_TransmitReceive+0x2cc>
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009234:	e029      	b.n	800928a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1a2      	bne.n	8009186 <HAL_SPI_TransmitReceive+0x224>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009244:	b29b      	uxth	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d19d      	bne.n	8009186 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800924a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 f8f8 	bl	8009444 <SPI_EndRxTxTransaction>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d006      	beq.n	8009268 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2220      	movs	r2, #32
 8009264:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009266:	e010      	b.n	800928a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	e000      	b.n	800928a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800929a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3730      	adds	r7, #48	; 0x30
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	603b      	str	r3, [r7, #0]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092b6:	e04c      	b.n	8009352 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	d048      	beq.n	8009352 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80092c0:	f7fd f9e2 	bl	8006688 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d902      	bls.n	80092d6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d13d      	bne.n	8009352 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ee:	d111      	bne.n	8009314 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f8:	d004      	beq.n	8009304 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009302:	d107      	bne.n	8009314 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009312:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800931c:	d10f      	bne.n	800933e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800933c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e00f      	b.n	8009372 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4013      	ands	r3, r2
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	429a      	cmp	r2, r3
 8009360:	bf0c      	ite	eq
 8009362:	2301      	moveq	r3, #1
 8009364:	2300      	movne	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	461a      	mov	r2, r3
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	429a      	cmp	r2, r3
 800936e:	d1a3      	bne.n	80092b8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af02      	add	r7, sp, #8
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800938e:	d111      	bne.n	80093b4 <SPI_EndRxTransaction+0x3a>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009398:	d004      	beq.n	80093a4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a2:	d107      	bne.n	80093b4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093bc:	d12a      	bne.n	8009414 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093c6:	d012      	beq.n	80093ee <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2200      	movs	r2, #0
 80093d0:	2180      	movs	r1, #128	; 0x80
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff ff67 	bl	80092a6 <SPI_WaitFlagStateUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d02d      	beq.n	800943a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e026      	b.n	800943c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	2101      	movs	r1, #1
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff ff54 	bl	80092a6 <SPI_WaitFlagStateUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d01a      	beq.n	800943a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	f043 0220 	orr.w	r2, r3, #32
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e013      	b.n	800943c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	2101      	movs	r1, #1
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff ff41 	bl	80092a6 <SPI_WaitFlagStateUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f043 0220 	orr.w	r2, r3, #32
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e000      	b.n	800943c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af02      	add	r7, sp, #8
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009450:	4b1b      	ldr	r3, [pc, #108]	; (80094c0 <SPI_EndRxTxTransaction+0x7c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <SPI_EndRxTxTransaction+0x80>)
 8009456:	fba2 2303 	umull	r2, r3, r2, r3
 800945a:	0d5b      	lsrs	r3, r3, #21
 800945c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009460:	fb02 f303 	mul.w	r3, r2, r3
 8009464:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800946e:	d112      	bne.n	8009496 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	2180      	movs	r1, #128	; 0x80
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff ff13 	bl	80092a6 <SPI_WaitFlagStateUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d016      	beq.n	80094b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	f043 0220 	orr.w	r2, r3, #32
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e00f      	b.n	80094b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	3b01      	subs	r3, #1
 80094a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ac:	2b80      	cmp	r3, #128	; 0x80
 80094ae:	d0f2      	beq.n	8009496 <SPI_EndRxTxTransaction+0x52>
 80094b0:	e000      	b.n	80094b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80094b2:	bf00      	nop
  }

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000034 	.word	0x20000034
 80094c4:	165e9f81 	.word	0x165e9f81

080094c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e01d      	b.n	8009516 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fc fe12 	bl	8006118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3304      	adds	r3, #4
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f000 fb56 	bl	8009bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0201 	orr.w	r2, r2, #1
 8009534:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f003 0307 	and.w	r3, r3, #7
 8009540:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b06      	cmp	r3, #6
 8009546:	d007      	beq.n	8009558 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e01d      	b.n	80095b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7fc fd0f 	bl	8005fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2202      	movs	r2, #2
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f000 fb07 	bl	8009bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2201      	movs	r2, #1
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fd42 	bl	800a058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a15      	ldr	r2, [pc, #84]	; (8009630 <HAL_TIM_PWM_Start+0x74>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d004      	beq.n	80095e8 <HAL_TIM_PWM_Start+0x2c>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a14      	ldr	r2, [pc, #80]	; (8009634 <HAL_TIM_PWM_Start+0x78>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d101      	bne.n	80095ec <HAL_TIM_PWM_Start+0x30>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <HAL_TIM_PWM_Start+0x32>
 80095ec:	2300      	movs	r3, #0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b06      	cmp	r3, #6
 8009612:	d007      	beq.n	8009624 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	40010000 	.word	0x40010000
 8009634:	40010400 	.word	0x40010400

08009638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e083      	b.n	8009754 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d106      	bne.n	8009666 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7fc fcdd 	bl	8006020 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	6812      	ldr	r2, [r2, #0]
 8009678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3304      	adds	r3, #4
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f000 fa93 	bl	8009bb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6a1b      	ldr	r3, [r3, #32]
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	4313      	orrs	r3, r2
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80096d8:	f023 030c 	bic.w	r3, r3, #12
 80096dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	4313      	orrs	r3, r2
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	011a      	lsls	r2, r3, #4
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	031b      	lsls	r3, r3, #12
 8009708:	4313      	orrs	r3, r2
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009716:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800971e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	011b      	lsls	r3, r3, #4
 800972a:	4313      	orrs	r3, r2
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <HAL_TIM_Encoder_Start+0x16>
 800976c:	2b04      	cmp	r3, #4
 800976e:	d008      	beq.n	8009782 <HAL_TIM_Encoder_Start+0x26>
 8009770:	e00f      	b.n	8009792 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2201      	movs	r2, #1
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fc6c 	bl	800a058 <TIM_CCxChannelCmd>
      break;
 8009780:	e016      	b.n	80097b0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2201      	movs	r2, #1
 8009788:	2104      	movs	r1, #4
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fc64 	bl	800a058 <TIM_CCxChannelCmd>
      break;
 8009790:	e00e      	b.n	80097b0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2201      	movs	r2, #1
 8009798:	2100      	movs	r1, #0
 800979a:	4618      	mov	r0, r3
 800979c:	f000 fc5c 	bl	800a058 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2201      	movs	r2, #1
 80097a6:	2104      	movs	r1, #4
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fc55 	bl	800a058 <TIM_CCxChannelCmd>
      break;
 80097ae:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d122      	bne.n	8009826 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d11b      	bne.n	8009826 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f06f 0202 	mvn.w	r2, #2
 80097f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9b5 	bl	8009b7c <HAL_TIM_IC_CaptureCallback>
 8009812:	e005      	b.n	8009820 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f9a7 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f9b8 	bl	8009b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b04      	cmp	r3, #4
 8009832:	d122      	bne.n	800987a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b04      	cmp	r3, #4
 8009840:	d11b      	bne.n	800987a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f06f 0204 	mvn.w	r2, #4
 800984a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f98b 	bl	8009b7c <HAL_TIM_IC_CaptureCallback>
 8009866:	e005      	b.n	8009874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f97d 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f98e 	bl	8009b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b08      	cmp	r3, #8
 8009886:	d122      	bne.n	80098ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b08      	cmp	r3, #8
 8009894:	d11b      	bne.n	80098ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f06f 0208 	mvn.w	r2, #8
 800989e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2204      	movs	r2, #4
 80098a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f961 	bl	8009b7c <HAL_TIM_IC_CaptureCallback>
 80098ba:	e005      	b.n	80098c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f953 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f964 	bl	8009b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d122      	bne.n	8009922 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0310 	and.w	r3, r3, #16
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d11b      	bne.n	8009922 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f06f 0210 	mvn.w	r2, #16
 80098f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2208      	movs	r2, #8
 80098f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f937 	bl	8009b7c <HAL_TIM_IC_CaptureCallback>
 800990e:	e005      	b.n	800991c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f929 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f93a 	bl	8009b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b01      	cmp	r3, #1
 800992e:	d10e      	bne.n	800994e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b01      	cmp	r3, #1
 800993c:	d107      	bne.n	800994e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f06f 0201 	mvn.w	r2, #1
 8009946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7f9 fe8b 	bl	8003664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009958:	2b80      	cmp	r3, #128	; 0x80
 800995a:	d10e      	bne.n	800997a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009966:	2b80      	cmp	r3, #128	; 0x80
 8009968:	d107      	bne.n	800997a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fc6d 	bl	800a254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b40      	cmp	r3, #64	; 0x40
 8009986:	d10e      	bne.n	80099a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b40      	cmp	r3, #64	; 0x40
 8009994:	d107      	bne.n	80099a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800999e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f8ff 	bl	8009ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d10e      	bne.n	80099d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d107      	bne.n	80099d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f06f 0220 	mvn.w	r2, #32
 80099ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fc37 	bl	800a240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80099f2:	2302      	movs	r3, #2
 80099f4:	e0b4      	b.n	8009b60 <HAL_TIM_PWM_ConfigChannel+0x184>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b0c      	cmp	r3, #12
 8009a0a:	f200 809f 	bhi.w	8009b4c <HAL_TIM_PWM_ConfigChannel+0x170>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a49 	.word	0x08009a49
 8009a18:	08009b4d 	.word	0x08009b4d
 8009a1c:	08009b4d 	.word	0x08009b4d
 8009a20:	08009b4d 	.word	0x08009b4d
 8009a24:	08009a89 	.word	0x08009a89
 8009a28:	08009b4d 	.word	0x08009b4d
 8009a2c:	08009b4d 	.word	0x08009b4d
 8009a30:	08009b4d 	.word	0x08009b4d
 8009a34:	08009acb 	.word	0x08009acb
 8009a38:	08009b4d 	.word	0x08009b4d
 8009a3c:	08009b4d 	.word	0x08009b4d
 8009a40:	08009b4d 	.word	0x08009b4d
 8009a44:	08009b0b 	.word	0x08009b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f952 	bl	8009cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0208 	orr.w	r2, r2, #8
 8009a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0204 	bic.w	r2, r2, #4
 8009a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6999      	ldr	r1, [r3, #24]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	619a      	str	r2, [r3, #24]
      break;
 8009a86:	e062      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f9a2 	bl	8009dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6999      	ldr	r1, [r3, #24]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	021a      	lsls	r2, r3, #8
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	619a      	str	r2, [r3, #24]
      break;
 8009ac8:	e041      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 f9f7 	bl	8009ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0208 	orr.w	r2, r2, #8
 8009ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0204 	bic.w	r2, r2, #4
 8009af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69d9      	ldr	r1, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	61da      	str	r2, [r3, #28]
      break;
 8009b08:	e021      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fa4b 	bl	8009fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69da      	ldr	r2, [r3, #28]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69d9      	ldr	r1, [r3, #28]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	021a      	lsls	r2, r3, #8
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	61da      	str	r2, [r3, #28]
      break;
 8009b4a:	e000      	b.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009b4c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a40      	ldr	r2, [pc, #256]	; (8009ccc <TIM_Base_SetConfig+0x114>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d013      	beq.n	8009bf8 <TIM_Base_SetConfig+0x40>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd6:	d00f      	beq.n	8009bf8 <TIM_Base_SetConfig+0x40>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a3d      	ldr	r2, [pc, #244]	; (8009cd0 <TIM_Base_SetConfig+0x118>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d00b      	beq.n	8009bf8 <TIM_Base_SetConfig+0x40>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a3c      	ldr	r2, [pc, #240]	; (8009cd4 <TIM_Base_SetConfig+0x11c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d007      	beq.n	8009bf8 <TIM_Base_SetConfig+0x40>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a3b      	ldr	r2, [pc, #236]	; (8009cd8 <TIM_Base_SetConfig+0x120>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d003      	beq.n	8009bf8 <TIM_Base_SetConfig+0x40>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a3a      	ldr	r2, [pc, #232]	; (8009cdc <TIM_Base_SetConfig+0x124>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d108      	bne.n	8009c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a2f      	ldr	r2, [pc, #188]	; (8009ccc <TIM_Base_SetConfig+0x114>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d02b      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c18:	d027      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a2c      	ldr	r2, [pc, #176]	; (8009cd0 <TIM_Base_SetConfig+0x118>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d023      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a2b      	ldr	r2, [pc, #172]	; (8009cd4 <TIM_Base_SetConfig+0x11c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d01f      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a2a      	ldr	r2, [pc, #168]	; (8009cd8 <TIM_Base_SetConfig+0x120>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d01b      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a29      	ldr	r2, [pc, #164]	; (8009cdc <TIM_Base_SetConfig+0x124>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d017      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a28      	ldr	r2, [pc, #160]	; (8009ce0 <TIM_Base_SetConfig+0x128>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d013      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a27      	ldr	r2, [pc, #156]	; (8009ce4 <TIM_Base_SetConfig+0x12c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00f      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a26      	ldr	r2, [pc, #152]	; (8009ce8 <TIM_Base_SetConfig+0x130>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00b      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a25      	ldr	r2, [pc, #148]	; (8009cec <TIM_Base_SetConfig+0x134>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a24      	ldr	r2, [pc, #144]	; (8009cf0 <TIM_Base_SetConfig+0x138>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_Base_SetConfig+0xb2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a23      	ldr	r2, [pc, #140]	; (8009cf4 <TIM_Base_SetConfig+0x13c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d108      	bne.n	8009c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	689a      	ldr	r2, [r3, #8]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <TIM_Base_SetConfig+0x114>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d003      	beq.n	8009cb0 <TIM_Base_SetConfig+0xf8>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <TIM_Base_SetConfig+0x124>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d103      	bne.n	8009cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	691a      	ldr	r2, [r3, #16]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	615a      	str	r2, [r3, #20]
}
 8009cbe:	bf00      	nop
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	40010000 	.word	0x40010000
 8009cd0:	40000400 	.word	0x40000400
 8009cd4:	40000800 	.word	0x40000800
 8009cd8:	40000c00 	.word	0x40000c00
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40014400 	.word	0x40014400
 8009ce8:	40014800 	.word	0x40014800
 8009cec:	40001800 	.word	0x40001800
 8009cf0:	40001c00 	.word	0x40001c00
 8009cf4:	40002000 	.word	0x40002000

08009cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f023 0201 	bic.w	r2, r3, #1
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f023 0302 	bic.w	r3, r3, #2
 8009d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a20      	ldr	r2, [pc, #128]	; (8009dd0 <TIM_OC1_SetConfig+0xd8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_OC1_SetConfig+0x64>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a1f      	ldr	r2, [pc, #124]	; (8009dd4 <TIM_OC1_SetConfig+0xdc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d10c      	bne.n	8009d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f023 0308 	bic.w	r3, r3, #8
 8009d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f023 0304 	bic.w	r3, r3, #4
 8009d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a15      	ldr	r2, [pc, #84]	; (8009dd0 <TIM_OC1_SetConfig+0xd8>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d003      	beq.n	8009d86 <TIM_OC1_SetConfig+0x8e>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a14      	ldr	r2, [pc, #80]	; (8009dd4 <TIM_OC1_SetConfig+0xdc>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d111      	bne.n	8009daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	621a      	str	r2, [r3, #32]
}
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	40010000 	.word	0x40010000
 8009dd4:	40010400 	.word	0x40010400

08009dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	f023 0210 	bic.w	r2, r3, #16
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	021b      	lsls	r3, r3, #8
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f023 0320 	bic.w	r3, r3, #32
 8009e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a22      	ldr	r2, [pc, #136]	; (8009ebc <TIM_OC2_SetConfig+0xe4>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_OC2_SetConfig+0x68>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a21      	ldr	r2, [pc, #132]	; (8009ec0 <TIM_OC2_SetConfig+0xe8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10d      	bne.n	8009e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a17      	ldr	r2, [pc, #92]	; (8009ebc <TIM_OC2_SetConfig+0xe4>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_OC2_SetConfig+0x94>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a16      	ldr	r2, [pc, #88]	; (8009ec0 <TIM_OC2_SetConfig+0xe8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d113      	bne.n	8009e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	621a      	str	r2, [r3, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40010000 	.word	0x40010000
 8009ec0:	40010400 	.word	0x40010400

08009ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0303 	bic.w	r3, r3, #3
 8009efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a21      	ldr	r2, [pc, #132]	; (8009fa4 <TIM_OC3_SetConfig+0xe0>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d003      	beq.n	8009f2a <TIM_OC3_SetConfig+0x66>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a20      	ldr	r2, [pc, #128]	; (8009fa8 <TIM_OC3_SetConfig+0xe4>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d10d      	bne.n	8009f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a16      	ldr	r2, [pc, #88]	; (8009fa4 <TIM_OC3_SetConfig+0xe0>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_OC3_SetConfig+0x92>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a15      	ldr	r2, [pc, #84]	; (8009fa8 <TIM_OC3_SetConfig+0xe4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d113      	bne.n	8009f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	621a      	str	r2, [r3, #32]
}
 8009f98:	bf00      	nop
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	40010000 	.word	0x40010000
 8009fa8:	40010400 	.word	0x40010400

08009fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	031b      	lsls	r3, r3, #12
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a12      	ldr	r2, [pc, #72]	; (800a050 <TIM_OC4_SetConfig+0xa4>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_OC4_SetConfig+0x68>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a11      	ldr	r2, [pc, #68]	; (800a054 <TIM_OC4_SetConfig+0xa8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d109      	bne.n	800a028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a01a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	019b      	lsls	r3, r3, #6
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	621a      	str	r2, [r3, #32]
}
 800a042:	bf00      	nop
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	40010000 	.word	0x40010000
 800a054:	40010400 	.word	0x40010400

0800a058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	f003 031f 	and.w	r3, r3, #31
 800a06a:	2201      	movs	r2, #1
 800a06c:	fa02 f303 	lsl.w	r3, r2, r3
 800a070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1a      	ldr	r2, [r3, #32]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	43db      	mvns	r3, r3
 800a07a:	401a      	ands	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a1a      	ldr	r2, [r3, #32]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f003 031f 	and.w	r3, r3, #31
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	fa01 f303 	lsl.w	r3, r1, r3
 800a090:	431a      	orrs	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	621a      	str	r2, [r3, #32]
}
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e05a      	b.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a21      	ldr	r2, [pc, #132]	; (800a180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d022      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a108:	d01d      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a1d      	ldr	r2, [pc, #116]	; (800a184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d018      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1b      	ldr	r2, [pc, #108]	; (800a188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d013      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a1a      	ldr	r2, [pc, #104]	; (800a18c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d00e      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a18      	ldr	r2, [pc, #96]	; (800a190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d009      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a17      	ldr	r2, [pc, #92]	; (800a194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d004      	beq.n	800a146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a15      	ldr	r2, [pc, #84]	; (800a198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d10c      	bne.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	4313      	orrs	r3, r2
 800a156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	40010000 	.word	0x40010000
 800a184:	40000400 	.word	0x40000400
 800a188:	40000800 	.word	0x40000800
 800a18c:	40000c00 	.word	0x40000c00
 800a190:	40010400 	.word	0x40010400
 800a194:	40014000 	.word	0x40014000
 800a198:	40001800 	.word	0x40001800

0800a19c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e03d      	b.n	800a234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e03f      	b.n	800a2fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fb ffec 	bl	800626c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2224      	movs	r2, #36	; 0x24
 800a298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f90b 	bl	800a4c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691a      	ldr	r2, [r3, #16]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b088      	sub	sp, #32
 800a306:	af02      	add	r7, sp, #8
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	4613      	mov	r3, r2
 800a310:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b20      	cmp	r3, #32
 800a320:	f040 8083 	bne.w	800a42a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <HAL_UART_Transmit+0x2e>
 800a32a:	88fb      	ldrh	r3, [r7, #6]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e07b      	b.n	800a42c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d101      	bne.n	800a342 <HAL_UART_Transmit+0x40>
 800a33e:	2302      	movs	r3, #2
 800a340:	e074      	b.n	800a42c <HAL_UART_Transmit+0x12a>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2221      	movs	r2, #33	; 0x21
 800a354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a358:	f7fc f996 	bl	8006688 <HAL_GetTick>
 800a35c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a372:	e042      	b.n	800a3fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a378:	b29b      	uxth	r3, r3
 800a37a:	3b01      	subs	r3, #1
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38a:	d122      	bne.n	800a3d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2200      	movs	r2, #0
 800a394:	2180      	movs	r1, #128	; 0x80
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 f84c 	bl	800a434 <UART_WaitOnFlagUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e042      	b.n	800a42c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d103      	bne.n	800a3ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	3302      	adds	r3, #2
 800a3c6:	60bb      	str	r3, [r7, #8]
 800a3c8:	e017      	b.n	800a3fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60bb      	str	r3, [r7, #8]
 800a3d0:	e013      	b.n	800a3fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2180      	movs	r1, #128	; 0x80
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 f829 	bl	800a434 <UART_WaitOnFlagUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e01f      	b.n	800a42c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	60ba      	str	r2, [r7, #8]
 800a3f2:	781a      	ldrb	r2, [r3, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1b7      	bne.n	800a374 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2200      	movs	r2, #0
 800a40c:	2140      	movs	r1, #64	; 0x40
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f810 	bl	800a434 <UART_WaitOnFlagUntilTimeout>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e006      	b.n	800a42c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2220      	movs	r2, #32
 800a422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	e000      	b.n	800a42c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a42a:	2302      	movs	r3, #2
  }
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	4613      	mov	r3, r2
 800a442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a444:	e02c      	b.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44c:	d028      	beq.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <UART_WaitOnFlagUntilTimeout+0x30>
 800a454:	f7fc f918 	bl	8006688 <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	429a      	cmp	r2, r3
 800a462:	d21d      	bcs.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a472:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695a      	ldr	r2, [r3, #20]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0201 	bic.w	r2, r2, #1
 800a482:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2220      	movs	r2, #32
 800a490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e00f      	b.n	800a4c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	bf0c      	ite	eq
 800a4b0:	2301      	moveq	r3, #1
 800a4b2:	2300      	movne	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d0c3      	beq.n	800a446 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a50a:	f023 030c 	bic.w	r3, r3, #12
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	68f9      	ldr	r1, [r7, #12]
 800a514:	430b      	orrs	r3, r1
 800a516:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699a      	ldr	r2, [r3, #24]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a536:	f040 818b 	bne.w	800a850 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4ac1      	ldr	r2, [pc, #772]	; (800a844 <UART_SetConfig+0x37c>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d005      	beq.n	800a550 <UART_SetConfig+0x88>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4abf      	ldr	r2, [pc, #764]	; (800a848 <UART_SetConfig+0x380>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	f040 80bd 	bne.w	800a6ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a550:	f7fe fa52 	bl	80089f8 <HAL_RCC_GetPCLK2Freq>
 800a554:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	461d      	mov	r5, r3
 800a55a:	f04f 0600 	mov.w	r6, #0
 800a55e:	46a8      	mov	r8, r5
 800a560:	46b1      	mov	r9, r6
 800a562:	eb18 0308 	adds.w	r3, r8, r8
 800a566:	eb49 0409 	adc.w	r4, r9, r9
 800a56a:	4698      	mov	r8, r3
 800a56c:	46a1      	mov	r9, r4
 800a56e:	eb18 0805 	adds.w	r8, r8, r5
 800a572:	eb49 0906 	adc.w	r9, r9, r6
 800a576:	f04f 0100 	mov.w	r1, #0
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a582:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a586:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a58a:	4688      	mov	r8, r1
 800a58c:	4691      	mov	r9, r2
 800a58e:	eb18 0005 	adds.w	r0, r8, r5
 800a592:	eb49 0106 	adc.w	r1, r9, r6
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	461d      	mov	r5, r3
 800a59c:	f04f 0600 	mov.w	r6, #0
 800a5a0:	196b      	adds	r3, r5, r5
 800a5a2:	eb46 0406 	adc.w	r4, r6, r6
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	f7f6 fb6d 	bl	8000c88 <__aeabi_uldivmod>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4ba5      	ldr	r3, [pc, #660]	; (800a84c <UART_SetConfig+0x384>)
 800a5b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	461d      	mov	r5, r3
 800a5c4:	f04f 0600 	mov.w	r6, #0
 800a5c8:	46a9      	mov	r9, r5
 800a5ca:	46b2      	mov	sl, r6
 800a5cc:	eb19 0309 	adds.w	r3, r9, r9
 800a5d0:	eb4a 040a 	adc.w	r4, sl, sl
 800a5d4:	4699      	mov	r9, r3
 800a5d6:	46a2      	mov	sl, r4
 800a5d8:	eb19 0905 	adds.w	r9, r9, r5
 800a5dc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a5e0:	f04f 0100 	mov.w	r1, #0
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a5f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a5f4:	4689      	mov	r9, r1
 800a5f6:	4692      	mov	sl, r2
 800a5f8:	eb19 0005 	adds.w	r0, r9, r5
 800a5fc:	eb4a 0106 	adc.w	r1, sl, r6
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	461d      	mov	r5, r3
 800a606:	f04f 0600 	mov.w	r6, #0
 800a60a:	196b      	adds	r3, r5, r5
 800a60c:	eb46 0406 	adc.w	r4, r6, r6
 800a610:	461a      	mov	r2, r3
 800a612:	4623      	mov	r3, r4
 800a614:	f7f6 fb38 	bl	8000c88 <__aeabi_uldivmod>
 800a618:	4603      	mov	r3, r0
 800a61a:	460c      	mov	r4, r1
 800a61c:	461a      	mov	r2, r3
 800a61e:	4b8b      	ldr	r3, [pc, #556]	; (800a84c <UART_SetConfig+0x384>)
 800a620:	fba3 1302 	umull	r1, r3, r3, r2
 800a624:	095b      	lsrs	r3, r3, #5
 800a626:	2164      	movs	r1, #100	; 0x64
 800a628:	fb01 f303 	mul.w	r3, r1, r3
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	3332      	adds	r3, #50	; 0x32
 800a632:	4a86      	ldr	r2, [pc, #536]	; (800a84c <UART_SetConfig+0x384>)
 800a634:	fba2 2303 	umull	r2, r3, r2, r3
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a640:	4498      	add	r8, r3
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	461d      	mov	r5, r3
 800a646:	f04f 0600 	mov.w	r6, #0
 800a64a:	46a9      	mov	r9, r5
 800a64c:	46b2      	mov	sl, r6
 800a64e:	eb19 0309 	adds.w	r3, r9, r9
 800a652:	eb4a 040a 	adc.w	r4, sl, sl
 800a656:	4699      	mov	r9, r3
 800a658:	46a2      	mov	sl, r4
 800a65a:	eb19 0905 	adds.w	r9, r9, r5
 800a65e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a662:	f04f 0100 	mov.w	r1, #0
 800a666:	f04f 0200 	mov.w	r2, #0
 800a66a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a66e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a676:	4689      	mov	r9, r1
 800a678:	4692      	mov	sl, r2
 800a67a:	eb19 0005 	adds.w	r0, r9, r5
 800a67e:	eb4a 0106 	adc.w	r1, sl, r6
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	461d      	mov	r5, r3
 800a688:	f04f 0600 	mov.w	r6, #0
 800a68c:	196b      	adds	r3, r5, r5
 800a68e:	eb46 0406 	adc.w	r4, r6, r6
 800a692:	461a      	mov	r2, r3
 800a694:	4623      	mov	r3, r4
 800a696:	f7f6 faf7 	bl	8000c88 <__aeabi_uldivmod>
 800a69a:	4603      	mov	r3, r0
 800a69c:	460c      	mov	r4, r1
 800a69e:	461a      	mov	r2, r3
 800a6a0:	4b6a      	ldr	r3, [pc, #424]	; (800a84c <UART_SetConfig+0x384>)
 800a6a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	2164      	movs	r1, #100	; 0x64
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	3332      	adds	r3, #50	; 0x32
 800a6b4:	4a65      	ldr	r2, [pc, #404]	; (800a84c <UART_SetConfig+0x384>)
 800a6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ba:	095b      	lsrs	r3, r3, #5
 800a6bc:	f003 0207 	and.w	r2, r3, #7
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4442      	add	r2, r8
 800a6c6:	609a      	str	r2, [r3, #8]
 800a6c8:	e26f      	b.n	800abaa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6ca:	f7fe f981 	bl	80089d0 <HAL_RCC_GetPCLK1Freq>
 800a6ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	461d      	mov	r5, r3
 800a6d4:	f04f 0600 	mov.w	r6, #0
 800a6d8:	46a8      	mov	r8, r5
 800a6da:	46b1      	mov	r9, r6
 800a6dc:	eb18 0308 	adds.w	r3, r8, r8
 800a6e0:	eb49 0409 	adc.w	r4, r9, r9
 800a6e4:	4698      	mov	r8, r3
 800a6e6:	46a1      	mov	r9, r4
 800a6e8:	eb18 0805 	adds.w	r8, r8, r5
 800a6ec:	eb49 0906 	adc.w	r9, r9, r6
 800a6f0:	f04f 0100 	mov.w	r1, #0
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a6fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a700:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a704:	4688      	mov	r8, r1
 800a706:	4691      	mov	r9, r2
 800a708:	eb18 0005 	adds.w	r0, r8, r5
 800a70c:	eb49 0106 	adc.w	r1, r9, r6
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	461d      	mov	r5, r3
 800a716:	f04f 0600 	mov.w	r6, #0
 800a71a:	196b      	adds	r3, r5, r5
 800a71c:	eb46 0406 	adc.w	r4, r6, r6
 800a720:	461a      	mov	r2, r3
 800a722:	4623      	mov	r3, r4
 800a724:	f7f6 fab0 	bl	8000c88 <__aeabi_uldivmod>
 800a728:	4603      	mov	r3, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	461a      	mov	r2, r3
 800a72e:	4b47      	ldr	r3, [pc, #284]	; (800a84c <UART_SetConfig+0x384>)
 800a730:	fba3 2302 	umull	r2, r3, r3, r2
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	461d      	mov	r5, r3
 800a73e:	f04f 0600 	mov.w	r6, #0
 800a742:	46a9      	mov	r9, r5
 800a744:	46b2      	mov	sl, r6
 800a746:	eb19 0309 	adds.w	r3, r9, r9
 800a74a:	eb4a 040a 	adc.w	r4, sl, sl
 800a74e:	4699      	mov	r9, r3
 800a750:	46a2      	mov	sl, r4
 800a752:	eb19 0905 	adds.w	r9, r9, r5
 800a756:	eb4a 0a06 	adc.w	sl, sl, r6
 800a75a:	f04f 0100 	mov.w	r1, #0
 800a75e:	f04f 0200 	mov.w	r2, #0
 800a762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a76a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a76e:	4689      	mov	r9, r1
 800a770:	4692      	mov	sl, r2
 800a772:	eb19 0005 	adds.w	r0, r9, r5
 800a776:	eb4a 0106 	adc.w	r1, sl, r6
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	461d      	mov	r5, r3
 800a780:	f04f 0600 	mov.w	r6, #0
 800a784:	196b      	adds	r3, r5, r5
 800a786:	eb46 0406 	adc.w	r4, r6, r6
 800a78a:	461a      	mov	r2, r3
 800a78c:	4623      	mov	r3, r4
 800a78e:	f7f6 fa7b 	bl	8000c88 <__aeabi_uldivmod>
 800a792:	4603      	mov	r3, r0
 800a794:	460c      	mov	r4, r1
 800a796:	461a      	mov	r2, r3
 800a798:	4b2c      	ldr	r3, [pc, #176]	; (800a84c <UART_SetConfig+0x384>)
 800a79a:	fba3 1302 	umull	r1, r3, r3, r2
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	2164      	movs	r1, #100	; 0x64
 800a7a2:	fb01 f303 	mul.w	r3, r1, r3
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	3332      	adds	r3, #50	; 0x32
 800a7ac:	4a27      	ldr	r2, [pc, #156]	; (800a84c <UART_SetConfig+0x384>)
 800a7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b2:	095b      	lsrs	r3, r3, #5
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7ba:	4498      	add	r8, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	461d      	mov	r5, r3
 800a7c0:	f04f 0600 	mov.w	r6, #0
 800a7c4:	46a9      	mov	r9, r5
 800a7c6:	46b2      	mov	sl, r6
 800a7c8:	eb19 0309 	adds.w	r3, r9, r9
 800a7cc:	eb4a 040a 	adc.w	r4, sl, sl
 800a7d0:	4699      	mov	r9, r3
 800a7d2:	46a2      	mov	sl, r4
 800a7d4:	eb19 0905 	adds.w	r9, r9, r5
 800a7d8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7dc:	f04f 0100 	mov.w	r1, #0
 800a7e0:	f04f 0200 	mov.w	r2, #0
 800a7e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7f0:	4689      	mov	r9, r1
 800a7f2:	4692      	mov	sl, r2
 800a7f4:	eb19 0005 	adds.w	r0, r9, r5
 800a7f8:	eb4a 0106 	adc.w	r1, sl, r6
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	461d      	mov	r5, r3
 800a802:	f04f 0600 	mov.w	r6, #0
 800a806:	196b      	adds	r3, r5, r5
 800a808:	eb46 0406 	adc.w	r4, r6, r6
 800a80c:	461a      	mov	r2, r3
 800a80e:	4623      	mov	r3, r4
 800a810:	f7f6 fa3a 	bl	8000c88 <__aeabi_uldivmod>
 800a814:	4603      	mov	r3, r0
 800a816:	460c      	mov	r4, r1
 800a818:	461a      	mov	r2, r3
 800a81a:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <UART_SetConfig+0x384>)
 800a81c:	fba3 1302 	umull	r1, r3, r3, r2
 800a820:	095b      	lsrs	r3, r3, #5
 800a822:	2164      	movs	r1, #100	; 0x64
 800a824:	fb01 f303 	mul.w	r3, r1, r3
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	3332      	adds	r3, #50	; 0x32
 800a82e:	4a07      	ldr	r2, [pc, #28]	; (800a84c <UART_SetConfig+0x384>)
 800a830:	fba2 2303 	umull	r2, r3, r2, r3
 800a834:	095b      	lsrs	r3, r3, #5
 800a836:	f003 0207 	and.w	r2, r3, #7
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4442      	add	r2, r8
 800a840:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a842:	e1b2      	b.n	800abaa <UART_SetConfig+0x6e2>
 800a844:	40011000 	.word	0x40011000
 800a848:	40011400 	.word	0x40011400
 800a84c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4ad7      	ldr	r2, [pc, #860]	; (800abb4 <UART_SetConfig+0x6ec>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d005      	beq.n	800a866 <UART_SetConfig+0x39e>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4ad6      	ldr	r2, [pc, #856]	; (800abb8 <UART_SetConfig+0x6f0>)
 800a860:	4293      	cmp	r3, r2
 800a862:	f040 80d1 	bne.w	800aa08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a866:	f7fe f8c7 	bl	80089f8 <HAL_RCC_GetPCLK2Freq>
 800a86a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	469a      	mov	sl, r3
 800a870:	f04f 0b00 	mov.w	fp, #0
 800a874:	46d0      	mov	r8, sl
 800a876:	46d9      	mov	r9, fp
 800a878:	eb18 0308 	adds.w	r3, r8, r8
 800a87c:	eb49 0409 	adc.w	r4, r9, r9
 800a880:	4698      	mov	r8, r3
 800a882:	46a1      	mov	r9, r4
 800a884:	eb18 080a 	adds.w	r8, r8, sl
 800a888:	eb49 090b 	adc.w	r9, r9, fp
 800a88c:	f04f 0100 	mov.w	r1, #0
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a898:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a89c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8a0:	4688      	mov	r8, r1
 800a8a2:	4691      	mov	r9, r2
 800a8a4:	eb1a 0508 	adds.w	r5, sl, r8
 800a8a8:	eb4b 0609 	adc.w	r6, fp, r9
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f04f 0200 	mov.w	r2, #0
 800a8b6:	f04f 0300 	mov.w	r3, #0
 800a8ba:	f04f 0400 	mov.w	r4, #0
 800a8be:	0094      	lsls	r4, r2, #2
 800a8c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a8c4:	008b      	lsls	r3, r1, #2
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	f7f6 f9db 	bl	8000c88 <__aeabi_uldivmod>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	4bb8      	ldr	r3, [pc, #736]	; (800abbc <UART_SetConfig+0x6f4>)
 800a8da:	fba3 2302 	umull	r2, r3, r3, r2
 800a8de:	095b      	lsrs	r3, r3, #5
 800a8e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	469b      	mov	fp, r3
 800a8e8:	f04f 0c00 	mov.w	ip, #0
 800a8ec:	46d9      	mov	r9, fp
 800a8ee:	46e2      	mov	sl, ip
 800a8f0:	eb19 0309 	adds.w	r3, r9, r9
 800a8f4:	eb4a 040a 	adc.w	r4, sl, sl
 800a8f8:	4699      	mov	r9, r3
 800a8fa:	46a2      	mov	sl, r4
 800a8fc:	eb19 090b 	adds.w	r9, r9, fp
 800a900:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a904:	f04f 0100 	mov.w	r1, #0
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a910:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a914:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a918:	4689      	mov	r9, r1
 800a91a:	4692      	mov	sl, r2
 800a91c:	eb1b 0509 	adds.w	r5, fp, r9
 800a920:	eb4c 060a 	adc.w	r6, ip, sl
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	4619      	mov	r1, r3
 800a92a:	f04f 0200 	mov.w	r2, #0
 800a92e:	f04f 0300 	mov.w	r3, #0
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	0094      	lsls	r4, r2, #2
 800a938:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a93c:	008b      	lsls	r3, r1, #2
 800a93e:	461a      	mov	r2, r3
 800a940:	4623      	mov	r3, r4
 800a942:	4628      	mov	r0, r5
 800a944:	4631      	mov	r1, r6
 800a946:	f7f6 f99f 	bl	8000c88 <__aeabi_uldivmod>
 800a94a:	4603      	mov	r3, r0
 800a94c:	460c      	mov	r4, r1
 800a94e:	461a      	mov	r2, r3
 800a950:	4b9a      	ldr	r3, [pc, #616]	; (800abbc <UART_SetConfig+0x6f4>)
 800a952:	fba3 1302 	umull	r1, r3, r3, r2
 800a956:	095b      	lsrs	r3, r3, #5
 800a958:	2164      	movs	r1, #100	; 0x64
 800a95a:	fb01 f303 	mul.w	r3, r1, r3
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	011b      	lsls	r3, r3, #4
 800a962:	3332      	adds	r3, #50	; 0x32
 800a964:	4a95      	ldr	r2, [pc, #596]	; (800abbc <UART_SetConfig+0x6f4>)
 800a966:	fba2 2303 	umull	r2, r3, r2, r3
 800a96a:	095b      	lsrs	r3, r3, #5
 800a96c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a970:	4498      	add	r8, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	469b      	mov	fp, r3
 800a976:	f04f 0c00 	mov.w	ip, #0
 800a97a:	46d9      	mov	r9, fp
 800a97c:	46e2      	mov	sl, ip
 800a97e:	eb19 0309 	adds.w	r3, r9, r9
 800a982:	eb4a 040a 	adc.w	r4, sl, sl
 800a986:	4699      	mov	r9, r3
 800a988:	46a2      	mov	sl, r4
 800a98a:	eb19 090b 	adds.w	r9, r9, fp
 800a98e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a992:	f04f 0100 	mov.w	r1, #0
 800a996:	f04f 0200 	mov.w	r2, #0
 800a99a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a99e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9a6:	4689      	mov	r9, r1
 800a9a8:	4692      	mov	sl, r2
 800a9aa:	eb1b 0509 	adds.w	r5, fp, r9
 800a9ae:	eb4c 060a 	adc.w	r6, ip, sl
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	f04f 0300 	mov.w	r3, #0
 800a9c0:	f04f 0400 	mov.w	r4, #0
 800a9c4:	0094      	lsls	r4, r2, #2
 800a9c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9ca:	008b      	lsls	r3, r1, #2
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	f7f6 f958 	bl	8000c88 <__aeabi_uldivmod>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4b77      	ldr	r3, [pc, #476]	; (800abbc <UART_SetConfig+0x6f4>)
 800a9e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e4:	095b      	lsrs	r3, r3, #5
 800a9e6:	2164      	movs	r1, #100	; 0x64
 800a9e8:	fb01 f303 	mul.w	r3, r1, r3
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	3332      	adds	r3, #50	; 0x32
 800a9f2:	4a72      	ldr	r2, [pc, #456]	; (800abbc <UART_SetConfig+0x6f4>)
 800a9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f8:	095b      	lsrs	r3, r3, #5
 800a9fa:	f003 020f 	and.w	r2, r3, #15
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4442      	add	r2, r8
 800aa04:	609a      	str	r2, [r3, #8]
 800aa06:	e0d0      	b.n	800abaa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa08:	f7fd ffe2 	bl	80089d0 <HAL_RCC_GetPCLK1Freq>
 800aa0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	469a      	mov	sl, r3
 800aa12:	f04f 0b00 	mov.w	fp, #0
 800aa16:	46d0      	mov	r8, sl
 800aa18:	46d9      	mov	r9, fp
 800aa1a:	eb18 0308 	adds.w	r3, r8, r8
 800aa1e:	eb49 0409 	adc.w	r4, r9, r9
 800aa22:	4698      	mov	r8, r3
 800aa24:	46a1      	mov	r9, r4
 800aa26:	eb18 080a 	adds.w	r8, r8, sl
 800aa2a:	eb49 090b 	adc.w	r9, r9, fp
 800aa2e:	f04f 0100 	mov.w	r1, #0
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa42:	4688      	mov	r8, r1
 800aa44:	4691      	mov	r9, r2
 800aa46:	eb1a 0508 	adds.w	r5, sl, r8
 800aa4a:	eb4b 0609 	adc.w	r6, fp, r9
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	4619      	mov	r1, r3
 800aa54:	f04f 0200 	mov.w	r2, #0
 800aa58:	f04f 0300 	mov.w	r3, #0
 800aa5c:	f04f 0400 	mov.w	r4, #0
 800aa60:	0094      	lsls	r4, r2, #2
 800aa62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa66:	008b      	lsls	r3, r1, #2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4623      	mov	r3, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	4631      	mov	r1, r6
 800aa70:	f7f6 f90a 	bl	8000c88 <__aeabi_uldivmod>
 800aa74:	4603      	mov	r3, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4b50      	ldr	r3, [pc, #320]	; (800abbc <UART_SetConfig+0x6f4>)
 800aa7c:	fba3 2302 	umull	r2, r3, r3, r2
 800aa80:	095b      	lsrs	r3, r3, #5
 800aa82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	469b      	mov	fp, r3
 800aa8a:	f04f 0c00 	mov.w	ip, #0
 800aa8e:	46d9      	mov	r9, fp
 800aa90:	46e2      	mov	sl, ip
 800aa92:	eb19 0309 	adds.w	r3, r9, r9
 800aa96:	eb4a 040a 	adc.w	r4, sl, sl
 800aa9a:	4699      	mov	r9, r3
 800aa9c:	46a2      	mov	sl, r4
 800aa9e:	eb19 090b 	adds.w	r9, r9, fp
 800aaa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aaa6:	f04f 0100 	mov.w	r1, #0
 800aaaa:	f04f 0200 	mov.w	r2, #0
 800aaae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aaba:	4689      	mov	r9, r1
 800aabc:	4692      	mov	sl, r2
 800aabe:	eb1b 0509 	adds.w	r5, fp, r9
 800aac2:	eb4c 060a 	adc.w	r6, ip, sl
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	4619      	mov	r1, r3
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	f04f 0400 	mov.w	r4, #0
 800aad8:	0094      	lsls	r4, r2, #2
 800aada:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aade:	008b      	lsls	r3, r1, #2
 800aae0:	461a      	mov	r2, r3
 800aae2:	4623      	mov	r3, r4
 800aae4:	4628      	mov	r0, r5
 800aae6:	4631      	mov	r1, r6
 800aae8:	f7f6 f8ce 	bl	8000c88 <__aeabi_uldivmod>
 800aaec:	4603      	mov	r3, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4b32      	ldr	r3, [pc, #200]	; (800abbc <UART_SetConfig+0x6f4>)
 800aaf4:	fba3 1302 	umull	r1, r3, r3, r2
 800aaf8:	095b      	lsrs	r3, r3, #5
 800aafa:	2164      	movs	r1, #100	; 0x64
 800aafc:	fb01 f303 	mul.w	r3, r1, r3
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	3332      	adds	r3, #50	; 0x32
 800ab06:	4a2d      	ldr	r2, [pc, #180]	; (800abbc <UART_SetConfig+0x6f4>)
 800ab08:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0c:	095b      	lsrs	r3, r3, #5
 800ab0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab12:	4498      	add	r8, r3
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	469b      	mov	fp, r3
 800ab18:	f04f 0c00 	mov.w	ip, #0
 800ab1c:	46d9      	mov	r9, fp
 800ab1e:	46e2      	mov	sl, ip
 800ab20:	eb19 0309 	adds.w	r3, r9, r9
 800ab24:	eb4a 040a 	adc.w	r4, sl, sl
 800ab28:	4699      	mov	r9, r3
 800ab2a:	46a2      	mov	sl, r4
 800ab2c:	eb19 090b 	adds.w	r9, r9, fp
 800ab30:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab34:	f04f 0100 	mov.w	r1, #0
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab48:	4689      	mov	r9, r1
 800ab4a:	4692      	mov	sl, r2
 800ab4c:	eb1b 0509 	adds.w	r5, fp, r9
 800ab50:	eb4c 060a 	adc.w	r6, ip, sl
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f04f 0200 	mov.w	r2, #0
 800ab5e:	f04f 0300 	mov.w	r3, #0
 800ab62:	f04f 0400 	mov.w	r4, #0
 800ab66:	0094      	lsls	r4, r2, #2
 800ab68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab6c:	008b      	lsls	r3, r1, #2
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4623      	mov	r3, r4
 800ab72:	4628      	mov	r0, r5
 800ab74:	4631      	mov	r1, r6
 800ab76:	f7f6 f887 	bl	8000c88 <__aeabi_uldivmod>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4b0e      	ldr	r3, [pc, #56]	; (800abbc <UART_SetConfig+0x6f4>)
 800ab82:	fba3 1302 	umull	r1, r3, r3, r2
 800ab86:	095b      	lsrs	r3, r3, #5
 800ab88:	2164      	movs	r1, #100	; 0x64
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	3332      	adds	r3, #50	; 0x32
 800ab94:	4a09      	ldr	r2, [pc, #36]	; (800abbc <UART_SetConfig+0x6f4>)
 800ab96:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9a:	095b      	lsrs	r3, r3, #5
 800ab9c:	f003 020f 	and.w	r2, r3, #15
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4442      	add	r2, r8
 800aba6:	609a      	str	r2, [r3, #8]
}
 800aba8:	e7ff      	b.n	800abaa <UART_SetConfig+0x6e2>
 800abaa:	bf00      	nop
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	40011000 	.word	0x40011000
 800abb8:	40011400 	.word	0x40011400
 800abbc:	51eb851f 	.word	0x51eb851f

0800abc0 <__errno>:
 800abc0:	4b01      	ldr	r3, [pc, #4]	; (800abc8 <__errno+0x8>)
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	20000040 	.word	0x20000040

0800abcc <__libc_init_array>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4e0d      	ldr	r6, [pc, #52]	; (800ac04 <__libc_init_array+0x38>)
 800abd0:	4c0d      	ldr	r4, [pc, #52]	; (800ac08 <__libc_init_array+0x3c>)
 800abd2:	1ba4      	subs	r4, r4, r6
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	2500      	movs	r5, #0
 800abd8:	42a5      	cmp	r5, r4
 800abda:	d109      	bne.n	800abf0 <__libc_init_array+0x24>
 800abdc:	4e0b      	ldr	r6, [pc, #44]	; (800ac0c <__libc_init_array+0x40>)
 800abde:	4c0c      	ldr	r4, [pc, #48]	; (800ac10 <__libc_init_array+0x44>)
 800abe0:	f004 fa60 	bl	800f0a4 <_init>
 800abe4:	1ba4      	subs	r4, r4, r6
 800abe6:	10a4      	asrs	r4, r4, #2
 800abe8:	2500      	movs	r5, #0
 800abea:	42a5      	cmp	r5, r4
 800abec:	d105      	bne.n	800abfa <__libc_init_array+0x2e>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abf4:	4798      	blx	r3
 800abf6:	3501      	adds	r5, #1
 800abf8:	e7ee      	b.n	800abd8 <__libc_init_array+0xc>
 800abfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abfe:	4798      	blx	r3
 800ac00:	3501      	adds	r5, #1
 800ac02:	e7f2      	b.n	800abea <__libc_init_array+0x1e>
 800ac04:	0800f460 	.word	0x0800f460
 800ac08:	0800f460 	.word	0x0800f460
 800ac0c:	0800f460 	.word	0x0800f460
 800ac10:	0800f464 	.word	0x0800f464

0800ac14 <memcpy>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	1e43      	subs	r3, r0, #1
 800ac18:	440a      	add	r2, r1
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	d100      	bne.n	800ac20 <memcpy+0xc>
 800ac1e:	bd10      	pop	{r4, pc}
 800ac20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac28:	e7f7      	b.n	800ac1a <memcpy+0x6>

0800ac2a <memset>:
 800ac2a:	4402      	add	r2, r0
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d100      	bne.n	800ac34 <memset+0xa>
 800ac32:	4770      	bx	lr
 800ac34:	f803 1b01 	strb.w	r1, [r3], #1
 800ac38:	e7f9      	b.n	800ac2e <memset+0x4>

0800ac3a <__cvt>:
 800ac3a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3e:	ec55 4b10 	vmov	r4, r5, d0
 800ac42:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ac44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	460e      	mov	r6, r1
 800ac4c:	4691      	mov	r9, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	bfb8      	it	lt
 800ac52:	4622      	movlt	r2, r4
 800ac54:	462b      	mov	r3, r5
 800ac56:	f027 0720 	bic.w	r7, r7, #32
 800ac5a:	bfbb      	ittet	lt
 800ac5c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac60:	461d      	movlt	r5, r3
 800ac62:	2300      	movge	r3, #0
 800ac64:	232d      	movlt	r3, #45	; 0x2d
 800ac66:	bfb8      	it	lt
 800ac68:	4614      	movlt	r4, r2
 800ac6a:	2f46      	cmp	r7, #70	; 0x46
 800ac6c:	700b      	strb	r3, [r1, #0]
 800ac6e:	d004      	beq.n	800ac7a <__cvt+0x40>
 800ac70:	2f45      	cmp	r7, #69	; 0x45
 800ac72:	d100      	bne.n	800ac76 <__cvt+0x3c>
 800ac74:	3601      	adds	r6, #1
 800ac76:	2102      	movs	r1, #2
 800ac78:	e000      	b.n	800ac7c <__cvt+0x42>
 800ac7a:	2103      	movs	r1, #3
 800ac7c:	ab03      	add	r3, sp, #12
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	ab02      	add	r3, sp, #8
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	4632      	mov	r2, r6
 800ac86:	4653      	mov	r3, sl
 800ac88:	ec45 4b10 	vmov	d0, r4, r5
 800ac8c:	f001 feb4 	bl	800c9f8 <_dtoa_r>
 800ac90:	2f47      	cmp	r7, #71	; 0x47
 800ac92:	4680      	mov	r8, r0
 800ac94:	d102      	bne.n	800ac9c <__cvt+0x62>
 800ac96:	f019 0f01 	tst.w	r9, #1
 800ac9a:	d026      	beq.n	800acea <__cvt+0xb0>
 800ac9c:	2f46      	cmp	r7, #70	; 0x46
 800ac9e:	eb08 0906 	add.w	r9, r8, r6
 800aca2:	d111      	bne.n	800acc8 <__cvt+0x8e>
 800aca4:	f898 3000 	ldrb.w	r3, [r8]
 800aca8:	2b30      	cmp	r3, #48	; 0x30
 800acaa:	d10a      	bne.n	800acc2 <__cvt+0x88>
 800acac:	2200      	movs	r2, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	4620      	mov	r0, r4
 800acb2:	4629      	mov	r1, r5
 800acb4:	f7f5 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 800acb8:	b918      	cbnz	r0, 800acc2 <__cvt+0x88>
 800acba:	f1c6 0601 	rsb	r6, r6, #1
 800acbe:	f8ca 6000 	str.w	r6, [sl]
 800acc2:	f8da 3000 	ldr.w	r3, [sl]
 800acc6:	4499      	add	r9, r3
 800acc8:	2200      	movs	r2, #0
 800acca:	2300      	movs	r3, #0
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd4:	b938      	cbnz	r0, 800ace6 <__cvt+0xac>
 800acd6:	2230      	movs	r2, #48	; 0x30
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	454b      	cmp	r3, r9
 800acdc:	d205      	bcs.n	800acea <__cvt+0xb0>
 800acde:	1c59      	adds	r1, r3, #1
 800ace0:	9103      	str	r1, [sp, #12]
 800ace2:	701a      	strb	r2, [r3, #0]
 800ace4:	e7f8      	b.n	800acd8 <__cvt+0x9e>
 800ace6:	f8cd 900c 	str.w	r9, [sp, #12]
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acee:	eba3 0308 	sub.w	r3, r3, r8
 800acf2:	4640      	mov	r0, r8
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	b004      	add	sp, #16
 800acf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800acfc <__exponent>:
 800acfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acfe:	2900      	cmp	r1, #0
 800ad00:	4604      	mov	r4, r0
 800ad02:	bfba      	itte	lt
 800ad04:	4249      	neglt	r1, r1
 800ad06:	232d      	movlt	r3, #45	; 0x2d
 800ad08:	232b      	movge	r3, #43	; 0x2b
 800ad0a:	2909      	cmp	r1, #9
 800ad0c:	f804 2b02 	strb.w	r2, [r4], #2
 800ad10:	7043      	strb	r3, [r0, #1]
 800ad12:	dd20      	ble.n	800ad56 <__exponent+0x5a>
 800ad14:	f10d 0307 	add.w	r3, sp, #7
 800ad18:	461f      	mov	r7, r3
 800ad1a:	260a      	movs	r6, #10
 800ad1c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad20:	fb06 1115 	mls	r1, r6, r5, r1
 800ad24:	3130      	adds	r1, #48	; 0x30
 800ad26:	2d09      	cmp	r5, #9
 800ad28:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad2c:	f103 32ff 	add.w	r2, r3, #4294967295
 800ad30:	4629      	mov	r1, r5
 800ad32:	dc09      	bgt.n	800ad48 <__exponent+0x4c>
 800ad34:	3130      	adds	r1, #48	; 0x30
 800ad36:	3b02      	subs	r3, #2
 800ad38:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ad3c:	42bb      	cmp	r3, r7
 800ad3e:	4622      	mov	r2, r4
 800ad40:	d304      	bcc.n	800ad4c <__exponent+0x50>
 800ad42:	1a10      	subs	r0, r2, r0
 800ad44:	b003      	add	sp, #12
 800ad46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad48:	4613      	mov	r3, r2
 800ad4a:	e7e7      	b.n	800ad1c <__exponent+0x20>
 800ad4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad50:	f804 2b01 	strb.w	r2, [r4], #1
 800ad54:	e7f2      	b.n	800ad3c <__exponent+0x40>
 800ad56:	2330      	movs	r3, #48	; 0x30
 800ad58:	4419      	add	r1, r3
 800ad5a:	7083      	strb	r3, [r0, #2]
 800ad5c:	1d02      	adds	r2, r0, #4
 800ad5e:	70c1      	strb	r1, [r0, #3]
 800ad60:	e7ef      	b.n	800ad42 <__exponent+0x46>
	...

0800ad64 <_printf_float>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	b08d      	sub	sp, #52	; 0x34
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ad70:	4616      	mov	r6, r2
 800ad72:	461f      	mov	r7, r3
 800ad74:	4605      	mov	r5, r0
 800ad76:	f003 f89d 	bl	800deb4 <_localeconv_r>
 800ad7a:	6803      	ldr	r3, [r0, #0]
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f5 fa26 	bl	80001d0 <strlen>
 800ad84:	2300      	movs	r3, #0
 800ad86:	930a      	str	r3, [sp, #40]	; 0x28
 800ad88:	f8d8 3000 	ldr.w	r3, [r8]
 800ad8c:	9005      	str	r0, [sp, #20]
 800ad8e:	3307      	adds	r3, #7
 800ad90:	f023 0307 	bic.w	r3, r3, #7
 800ad94:	f103 0208 	add.w	r2, r3, #8
 800ad98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad9c:	f8d4 b000 	ldr.w	fp, [r4]
 800ada0:	f8c8 2000 	str.w	r2, [r8]
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800adac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800adb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adb4:	9307      	str	r3, [sp, #28]
 800adb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800adba:	f04f 32ff 	mov.w	r2, #4294967295
 800adbe:	4ba7      	ldr	r3, [pc, #668]	; (800b05c <_printf_float+0x2f8>)
 800adc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adc4:	f7f5 feb2 	bl	8000b2c <__aeabi_dcmpun>
 800adc8:	bb70      	cbnz	r0, 800ae28 <_printf_float+0xc4>
 800adca:	f04f 32ff 	mov.w	r2, #4294967295
 800adce:	4ba3      	ldr	r3, [pc, #652]	; (800b05c <_printf_float+0x2f8>)
 800add0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800add4:	f7f5 fe8c 	bl	8000af0 <__aeabi_dcmple>
 800add8:	bb30      	cbnz	r0, 800ae28 <_printf_float+0xc4>
 800adda:	2200      	movs	r2, #0
 800addc:	2300      	movs	r3, #0
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	f7f5 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800ade6:	b110      	cbz	r0, 800adee <_printf_float+0x8a>
 800ade8:	232d      	movs	r3, #45	; 0x2d
 800adea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adee:	4a9c      	ldr	r2, [pc, #624]	; (800b060 <_printf_float+0x2fc>)
 800adf0:	4b9c      	ldr	r3, [pc, #624]	; (800b064 <_printf_float+0x300>)
 800adf2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800adf6:	bf8c      	ite	hi
 800adf8:	4690      	movhi	r8, r2
 800adfa:	4698      	movls	r8, r3
 800adfc:	2303      	movs	r3, #3
 800adfe:	f02b 0204 	bic.w	r2, fp, #4
 800ae02:	6123      	str	r3, [r4, #16]
 800ae04:	6022      	str	r2, [r4, #0]
 800ae06:	f04f 0900 	mov.w	r9, #0
 800ae0a:	9700      	str	r7, [sp, #0]
 800ae0c:	4633      	mov	r3, r6
 800ae0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae10:	4621      	mov	r1, r4
 800ae12:	4628      	mov	r0, r5
 800ae14:	f000 f9e6 	bl	800b1e4 <_printf_common>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f040 808d 	bne.w	800af38 <_printf_float+0x1d4>
 800ae1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae22:	b00d      	add	sp, #52	; 0x34
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	4642      	mov	r2, r8
 800ae2a:	464b      	mov	r3, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4649      	mov	r1, r9
 800ae30:	f7f5 fe7c 	bl	8000b2c <__aeabi_dcmpun>
 800ae34:	b110      	cbz	r0, 800ae3c <_printf_float+0xd8>
 800ae36:	4a8c      	ldr	r2, [pc, #560]	; (800b068 <_printf_float+0x304>)
 800ae38:	4b8c      	ldr	r3, [pc, #560]	; (800b06c <_printf_float+0x308>)
 800ae3a:	e7da      	b.n	800adf2 <_printf_float+0x8e>
 800ae3c:	6861      	ldr	r1, [r4, #4]
 800ae3e:	1c4b      	adds	r3, r1, #1
 800ae40:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ae44:	a80a      	add	r0, sp, #40	; 0x28
 800ae46:	d13e      	bne.n	800aec6 <_printf_float+0x162>
 800ae48:	2306      	movs	r3, #6
 800ae4a:	6063      	str	r3, [r4, #4]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ae52:	ab09      	add	r3, sp, #36	; 0x24
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	ec49 8b10 	vmov	d0, r8, r9
 800ae5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae5e:	6022      	str	r2, [r4, #0]
 800ae60:	f8cd a004 	str.w	sl, [sp, #4]
 800ae64:	6861      	ldr	r1, [r4, #4]
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7ff fee7 	bl	800ac3a <__cvt>
 800ae6c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ae70:	2b47      	cmp	r3, #71	; 0x47
 800ae72:	4680      	mov	r8, r0
 800ae74:	d109      	bne.n	800ae8a <_printf_float+0x126>
 800ae76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae78:	1cd8      	adds	r0, r3, #3
 800ae7a:	db02      	blt.n	800ae82 <_printf_float+0x11e>
 800ae7c:	6862      	ldr	r2, [r4, #4]
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	dd47      	ble.n	800af12 <_printf_float+0x1ae>
 800ae82:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae86:	fa5f fa8a 	uxtb.w	sl, sl
 800ae8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ae8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae90:	d824      	bhi.n	800aedc <_printf_float+0x178>
 800ae92:	3901      	subs	r1, #1
 800ae94:	4652      	mov	r2, sl
 800ae96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae9a:	9109      	str	r1, [sp, #36]	; 0x24
 800ae9c:	f7ff ff2e 	bl	800acfc <__exponent>
 800aea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea2:	1813      	adds	r3, r2, r0
 800aea4:	2a01      	cmp	r2, #1
 800aea6:	4681      	mov	r9, r0
 800aea8:	6123      	str	r3, [r4, #16]
 800aeaa:	dc02      	bgt.n	800aeb2 <_printf_float+0x14e>
 800aeac:	6822      	ldr	r2, [r4, #0]
 800aeae:	07d1      	lsls	r1, r2, #31
 800aeb0:	d501      	bpl.n	800aeb6 <_printf_float+0x152>
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0a5      	beq.n	800ae0a <_printf_float+0xa6>
 800aebe:	232d      	movs	r3, #45	; 0x2d
 800aec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aec4:	e7a1      	b.n	800ae0a <_printf_float+0xa6>
 800aec6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800aeca:	f000 8177 	beq.w	800b1bc <_printf_float+0x458>
 800aece:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800aed2:	d1bb      	bne.n	800ae4c <_printf_float+0xe8>
 800aed4:	2900      	cmp	r1, #0
 800aed6:	d1b9      	bne.n	800ae4c <_printf_float+0xe8>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e7b6      	b.n	800ae4a <_printf_float+0xe6>
 800aedc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800aee0:	d119      	bne.n	800af16 <_printf_float+0x1b2>
 800aee2:	2900      	cmp	r1, #0
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	dd0c      	ble.n	800af02 <_printf_float+0x19e>
 800aee8:	6121      	str	r1, [r4, #16]
 800aeea:	b913      	cbnz	r3, 800aef2 <_printf_float+0x18e>
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	07d2      	lsls	r2, r2, #31
 800aef0:	d502      	bpl.n	800aef8 <_printf_float+0x194>
 800aef2:	3301      	adds	r3, #1
 800aef4:	440b      	add	r3, r1
 800aef6:	6123      	str	r3, [r4, #16]
 800aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefa:	65a3      	str	r3, [r4, #88]	; 0x58
 800aefc:	f04f 0900 	mov.w	r9, #0
 800af00:	e7d9      	b.n	800aeb6 <_printf_float+0x152>
 800af02:	b913      	cbnz	r3, 800af0a <_printf_float+0x1a6>
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	07d0      	lsls	r0, r2, #31
 800af08:	d501      	bpl.n	800af0e <_printf_float+0x1aa>
 800af0a:	3302      	adds	r3, #2
 800af0c:	e7f3      	b.n	800aef6 <_printf_float+0x192>
 800af0e:	2301      	movs	r3, #1
 800af10:	e7f1      	b.n	800aef6 <_printf_float+0x192>
 800af12:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800af16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af1a:	4293      	cmp	r3, r2
 800af1c:	db05      	blt.n	800af2a <_printf_float+0x1c6>
 800af1e:	6822      	ldr	r2, [r4, #0]
 800af20:	6123      	str	r3, [r4, #16]
 800af22:	07d1      	lsls	r1, r2, #31
 800af24:	d5e8      	bpl.n	800aef8 <_printf_float+0x194>
 800af26:	3301      	adds	r3, #1
 800af28:	e7e5      	b.n	800aef6 <_printf_float+0x192>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bfd4      	ite	le
 800af2e:	f1c3 0302 	rsble	r3, r3, #2
 800af32:	2301      	movgt	r3, #1
 800af34:	4413      	add	r3, r2
 800af36:	e7de      	b.n	800aef6 <_printf_float+0x192>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	055a      	lsls	r2, r3, #21
 800af3c:	d407      	bmi.n	800af4e <_printf_float+0x1ea>
 800af3e:	6923      	ldr	r3, [r4, #16]
 800af40:	4642      	mov	r2, r8
 800af42:	4631      	mov	r1, r6
 800af44:	4628      	mov	r0, r5
 800af46:	47b8      	blx	r7
 800af48:	3001      	adds	r0, #1
 800af4a:	d12b      	bne.n	800afa4 <_printf_float+0x240>
 800af4c:	e767      	b.n	800ae1e <_printf_float+0xba>
 800af4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af52:	f240 80dc 	bls.w	800b10e <_printf_float+0x3aa>
 800af56:	2200      	movs	r2, #0
 800af58:	2300      	movs	r3, #0
 800af5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af5e:	f7f5 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af62:	2800      	cmp	r0, #0
 800af64:	d033      	beq.n	800afce <_printf_float+0x26a>
 800af66:	2301      	movs	r3, #1
 800af68:	4a41      	ldr	r2, [pc, #260]	; (800b070 <_printf_float+0x30c>)
 800af6a:	4631      	mov	r1, r6
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	f43f af54 	beq.w	800ae1e <_printf_float+0xba>
 800af76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af7a:	429a      	cmp	r2, r3
 800af7c:	db02      	blt.n	800af84 <_printf_float+0x220>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	07d8      	lsls	r0, r3, #31
 800af82:	d50f      	bpl.n	800afa4 <_printf_float+0x240>
 800af84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	f43f af45 	beq.w	800ae1e <_printf_float+0xba>
 800af94:	f04f 0800 	mov.w	r8, #0
 800af98:	f104 091a 	add.w	r9, r4, #26
 800af9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9e:	3b01      	subs	r3, #1
 800afa0:	4543      	cmp	r3, r8
 800afa2:	dc09      	bgt.n	800afb8 <_printf_float+0x254>
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	079b      	lsls	r3, r3, #30
 800afa8:	f100 8103 	bmi.w	800b1b2 <_printf_float+0x44e>
 800afac:	68e0      	ldr	r0, [r4, #12]
 800afae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb0:	4298      	cmp	r0, r3
 800afb2:	bfb8      	it	lt
 800afb4:	4618      	movlt	r0, r3
 800afb6:	e734      	b.n	800ae22 <_printf_float+0xbe>
 800afb8:	2301      	movs	r3, #1
 800afba:	464a      	mov	r2, r9
 800afbc:	4631      	mov	r1, r6
 800afbe:	4628      	mov	r0, r5
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	f43f af2b 	beq.w	800ae1e <_printf_float+0xba>
 800afc8:	f108 0801 	add.w	r8, r8, #1
 800afcc:	e7e6      	b.n	800af9c <_printf_float+0x238>
 800afce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dc2b      	bgt.n	800b02c <_printf_float+0x2c8>
 800afd4:	2301      	movs	r3, #1
 800afd6:	4a26      	ldr	r2, [pc, #152]	; (800b070 <_printf_float+0x30c>)
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	47b8      	blx	r7
 800afde:	3001      	adds	r0, #1
 800afe0:	f43f af1d 	beq.w	800ae1e <_printf_float+0xba>
 800afe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe6:	b923      	cbnz	r3, 800aff2 <_printf_float+0x28e>
 800afe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afea:	b913      	cbnz	r3, 800aff2 <_printf_float+0x28e>
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	07d9      	lsls	r1, r3, #31
 800aff0:	d5d8      	bpl.n	800afa4 <_printf_float+0x240>
 800aff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	f43f af0e 	beq.w	800ae1e <_printf_float+0xba>
 800b002:	f04f 0900 	mov.w	r9, #0
 800b006:	f104 0a1a 	add.w	sl, r4, #26
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	425b      	negs	r3, r3
 800b00e:	454b      	cmp	r3, r9
 800b010:	dc01      	bgt.n	800b016 <_printf_float+0x2b2>
 800b012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b014:	e794      	b.n	800af40 <_printf_float+0x1dc>
 800b016:	2301      	movs	r3, #1
 800b018:	4652      	mov	r2, sl
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f aefc 	beq.w	800ae1e <_printf_float+0xba>
 800b026:	f109 0901 	add.w	r9, r9, #1
 800b02a:	e7ee      	b.n	800b00a <_printf_float+0x2a6>
 800b02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b02e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b030:	429a      	cmp	r2, r3
 800b032:	bfa8      	it	ge
 800b034:	461a      	movge	r2, r3
 800b036:	2a00      	cmp	r2, #0
 800b038:	4691      	mov	r9, r2
 800b03a:	dd07      	ble.n	800b04c <_printf_float+0x2e8>
 800b03c:	4613      	mov	r3, r2
 800b03e:	4631      	mov	r1, r6
 800b040:	4642      	mov	r2, r8
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	f43f aee9 	beq.w	800ae1e <_printf_float+0xba>
 800b04c:	f104 031a 	add.w	r3, r4, #26
 800b050:	f04f 0b00 	mov.w	fp, #0
 800b054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b058:	9306      	str	r3, [sp, #24]
 800b05a:	e015      	b.n	800b088 <_printf_float+0x324>
 800b05c:	7fefffff 	.word	0x7fefffff
 800b060:	0800f140 	.word	0x0800f140
 800b064:	0800f13c 	.word	0x0800f13c
 800b068:	0800f148 	.word	0x0800f148
 800b06c:	0800f144 	.word	0x0800f144
 800b070:	0800f14c 	.word	0x0800f14c
 800b074:	2301      	movs	r3, #1
 800b076:	9a06      	ldr	r2, [sp, #24]
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	f43f aecd 	beq.w	800ae1e <_printf_float+0xba>
 800b084:	f10b 0b01 	add.w	fp, fp, #1
 800b088:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b08c:	ebaa 0309 	sub.w	r3, sl, r9
 800b090:	455b      	cmp	r3, fp
 800b092:	dcef      	bgt.n	800b074 <_printf_float+0x310>
 800b094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b098:	429a      	cmp	r2, r3
 800b09a:	44d0      	add	r8, sl
 800b09c:	db15      	blt.n	800b0ca <_printf_float+0x366>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	07da      	lsls	r2, r3, #31
 800b0a2:	d412      	bmi.n	800b0ca <_printf_float+0x366>
 800b0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0a8:	eba3 020a 	sub.w	r2, r3, sl
 800b0ac:	eba3 0a01 	sub.w	sl, r3, r1
 800b0b0:	4592      	cmp	sl, r2
 800b0b2:	bfa8      	it	ge
 800b0b4:	4692      	movge	sl, r2
 800b0b6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ba:	dc0e      	bgt.n	800b0da <_printf_float+0x376>
 800b0bc:	f04f 0800 	mov.w	r8, #0
 800b0c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0c4:	f104 091a 	add.w	r9, r4, #26
 800b0c8:	e019      	b.n	800b0fe <_printf_float+0x39a>
 800b0ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b8      	blx	r7
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d1e5      	bne.n	800b0a4 <_printf_float+0x340>
 800b0d8:	e6a1      	b.n	800ae1e <_printf_float+0xba>
 800b0da:	4653      	mov	r3, sl
 800b0dc:	4642      	mov	r2, r8
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d1e9      	bne.n	800b0bc <_printf_float+0x358>
 800b0e8:	e699      	b.n	800ae1e <_printf_float+0xba>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	464a      	mov	r2, r9
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f43f ae92 	beq.w	800ae1e <_printf_float+0xba>
 800b0fa:	f108 0801 	add.w	r8, r8, #1
 800b0fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	eba3 030a 	sub.w	r3, r3, sl
 800b108:	4543      	cmp	r3, r8
 800b10a:	dcee      	bgt.n	800b0ea <_printf_float+0x386>
 800b10c:	e74a      	b.n	800afa4 <_printf_float+0x240>
 800b10e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b110:	2a01      	cmp	r2, #1
 800b112:	dc01      	bgt.n	800b118 <_printf_float+0x3b4>
 800b114:	07db      	lsls	r3, r3, #31
 800b116:	d53a      	bpl.n	800b18e <_printf_float+0x42a>
 800b118:	2301      	movs	r3, #1
 800b11a:	4642      	mov	r2, r8
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	f43f ae7b 	beq.w	800ae1e <_printf_float+0xba>
 800b128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b12c:	4631      	mov	r1, r6
 800b12e:	4628      	mov	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	3001      	adds	r0, #1
 800b134:	f108 0801 	add.w	r8, r8, #1
 800b138:	f43f ae71 	beq.w	800ae1e <_printf_float+0xba>
 800b13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13e:	2200      	movs	r2, #0
 800b140:	f103 3aff 	add.w	sl, r3, #4294967295
 800b144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b148:	2300      	movs	r3, #0
 800b14a:	f7f5 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b14e:	b9c8      	cbnz	r0, 800b184 <_printf_float+0x420>
 800b150:	4653      	mov	r3, sl
 800b152:	4642      	mov	r2, r8
 800b154:	4631      	mov	r1, r6
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	d10e      	bne.n	800b17c <_printf_float+0x418>
 800b15e:	e65e      	b.n	800ae1e <_printf_float+0xba>
 800b160:	2301      	movs	r3, #1
 800b162:	4652      	mov	r2, sl
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f ae57 	beq.w	800ae1e <_printf_float+0xba>
 800b170:	f108 0801 	add.w	r8, r8, #1
 800b174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b176:	3b01      	subs	r3, #1
 800b178:	4543      	cmp	r3, r8
 800b17a:	dcf1      	bgt.n	800b160 <_printf_float+0x3fc>
 800b17c:	464b      	mov	r3, r9
 800b17e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b182:	e6de      	b.n	800af42 <_printf_float+0x1de>
 800b184:	f04f 0800 	mov.w	r8, #0
 800b188:	f104 0a1a 	add.w	sl, r4, #26
 800b18c:	e7f2      	b.n	800b174 <_printf_float+0x410>
 800b18e:	2301      	movs	r3, #1
 800b190:	e7df      	b.n	800b152 <_printf_float+0x3ee>
 800b192:	2301      	movs	r3, #1
 800b194:	464a      	mov	r2, r9
 800b196:	4631      	mov	r1, r6
 800b198:	4628      	mov	r0, r5
 800b19a:	47b8      	blx	r7
 800b19c:	3001      	adds	r0, #1
 800b19e:	f43f ae3e 	beq.w	800ae1e <_printf_float+0xba>
 800b1a2:	f108 0801 	add.w	r8, r8, #1
 800b1a6:	68e3      	ldr	r3, [r4, #12]
 800b1a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1aa:	1a9b      	subs	r3, r3, r2
 800b1ac:	4543      	cmp	r3, r8
 800b1ae:	dcf0      	bgt.n	800b192 <_printf_float+0x42e>
 800b1b0:	e6fc      	b.n	800afac <_printf_float+0x248>
 800b1b2:	f04f 0800 	mov.w	r8, #0
 800b1b6:	f104 0919 	add.w	r9, r4, #25
 800b1ba:	e7f4      	b.n	800b1a6 <_printf_float+0x442>
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	f43f ae8b 	beq.w	800aed8 <_printf_float+0x174>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b1c8:	ab09      	add	r3, sp, #36	; 0x24
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	ec49 8b10 	vmov	d0, r8, r9
 800b1d0:	6022      	str	r2, [r4, #0]
 800b1d2:	f8cd a004 	str.w	sl, [sp, #4]
 800b1d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f7ff fd2d 	bl	800ac3a <__cvt>
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	e648      	b.n	800ae76 <_printf_float+0x112>

0800b1e4 <_printf_common>:
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	4691      	mov	r9, r2
 800b1ea:	461f      	mov	r7, r3
 800b1ec:	688a      	ldr	r2, [r1, #8]
 800b1ee:	690b      	ldr	r3, [r1, #16]
 800b1f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	bfb8      	it	lt
 800b1f8:	4613      	movlt	r3, r2
 800b1fa:	f8c9 3000 	str.w	r3, [r9]
 800b1fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b202:	4606      	mov	r6, r0
 800b204:	460c      	mov	r4, r1
 800b206:	b112      	cbz	r2, 800b20e <_printf_common+0x2a>
 800b208:	3301      	adds	r3, #1
 800b20a:	f8c9 3000 	str.w	r3, [r9]
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	0699      	lsls	r1, r3, #26
 800b212:	bf42      	ittt	mi
 800b214:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b218:	3302      	addmi	r3, #2
 800b21a:	f8c9 3000 	strmi.w	r3, [r9]
 800b21e:	6825      	ldr	r5, [r4, #0]
 800b220:	f015 0506 	ands.w	r5, r5, #6
 800b224:	d107      	bne.n	800b236 <_printf_common+0x52>
 800b226:	f104 0a19 	add.w	sl, r4, #25
 800b22a:	68e3      	ldr	r3, [r4, #12]
 800b22c:	f8d9 2000 	ldr.w	r2, [r9]
 800b230:	1a9b      	subs	r3, r3, r2
 800b232:	42ab      	cmp	r3, r5
 800b234:	dc28      	bgt.n	800b288 <_printf_common+0xa4>
 800b236:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b23a:	6822      	ldr	r2, [r4, #0]
 800b23c:	3300      	adds	r3, #0
 800b23e:	bf18      	it	ne
 800b240:	2301      	movne	r3, #1
 800b242:	0692      	lsls	r2, r2, #26
 800b244:	d42d      	bmi.n	800b2a2 <_printf_common+0xbe>
 800b246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b24a:	4639      	mov	r1, r7
 800b24c:	4630      	mov	r0, r6
 800b24e:	47c0      	blx	r8
 800b250:	3001      	adds	r0, #1
 800b252:	d020      	beq.n	800b296 <_printf_common+0xb2>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	68e5      	ldr	r5, [r4, #12]
 800b258:	f8d9 2000 	ldr.w	r2, [r9]
 800b25c:	f003 0306 	and.w	r3, r3, #6
 800b260:	2b04      	cmp	r3, #4
 800b262:	bf08      	it	eq
 800b264:	1aad      	subeq	r5, r5, r2
 800b266:	68a3      	ldr	r3, [r4, #8]
 800b268:	6922      	ldr	r2, [r4, #16]
 800b26a:	bf0c      	ite	eq
 800b26c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b270:	2500      	movne	r5, #0
 800b272:	4293      	cmp	r3, r2
 800b274:	bfc4      	itt	gt
 800b276:	1a9b      	subgt	r3, r3, r2
 800b278:	18ed      	addgt	r5, r5, r3
 800b27a:	f04f 0900 	mov.w	r9, #0
 800b27e:	341a      	adds	r4, #26
 800b280:	454d      	cmp	r5, r9
 800b282:	d11a      	bne.n	800b2ba <_printf_common+0xd6>
 800b284:	2000      	movs	r0, #0
 800b286:	e008      	b.n	800b29a <_printf_common+0xb6>
 800b288:	2301      	movs	r3, #1
 800b28a:	4652      	mov	r2, sl
 800b28c:	4639      	mov	r1, r7
 800b28e:	4630      	mov	r0, r6
 800b290:	47c0      	blx	r8
 800b292:	3001      	adds	r0, #1
 800b294:	d103      	bne.n	800b29e <_printf_common+0xba>
 800b296:	f04f 30ff 	mov.w	r0, #4294967295
 800b29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29e:	3501      	adds	r5, #1
 800b2a0:	e7c3      	b.n	800b22a <_printf_common+0x46>
 800b2a2:	18e1      	adds	r1, r4, r3
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	2030      	movs	r0, #48	; 0x30
 800b2a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2ac:	4422      	add	r2, r4
 800b2ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2b6:	3302      	adds	r3, #2
 800b2b8:	e7c5      	b.n	800b246 <_printf_common+0x62>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	4622      	mov	r2, r4
 800b2be:	4639      	mov	r1, r7
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	47c0      	blx	r8
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d0e6      	beq.n	800b296 <_printf_common+0xb2>
 800b2c8:	f109 0901 	add.w	r9, r9, #1
 800b2cc:	e7d8      	b.n	800b280 <_printf_common+0x9c>
	...

0800b2d0 <_printf_i>:
 800b2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b2d8:	460c      	mov	r4, r1
 800b2da:	7e09      	ldrb	r1, [r1, #24]
 800b2dc:	b085      	sub	sp, #20
 800b2de:	296e      	cmp	r1, #110	; 0x6e
 800b2e0:	4617      	mov	r7, r2
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	4698      	mov	r8, r3
 800b2e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2e8:	f000 80b3 	beq.w	800b452 <_printf_i+0x182>
 800b2ec:	d822      	bhi.n	800b334 <_printf_i+0x64>
 800b2ee:	2963      	cmp	r1, #99	; 0x63
 800b2f0:	d036      	beq.n	800b360 <_printf_i+0x90>
 800b2f2:	d80a      	bhi.n	800b30a <_printf_i+0x3a>
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	f000 80b9 	beq.w	800b46c <_printf_i+0x19c>
 800b2fa:	2958      	cmp	r1, #88	; 0x58
 800b2fc:	f000 8083 	beq.w	800b406 <_printf_i+0x136>
 800b300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b304:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b308:	e032      	b.n	800b370 <_printf_i+0xa0>
 800b30a:	2964      	cmp	r1, #100	; 0x64
 800b30c:	d001      	beq.n	800b312 <_printf_i+0x42>
 800b30e:	2969      	cmp	r1, #105	; 0x69
 800b310:	d1f6      	bne.n	800b300 <_printf_i+0x30>
 800b312:	6820      	ldr	r0, [r4, #0]
 800b314:	6813      	ldr	r3, [r2, #0]
 800b316:	0605      	lsls	r5, r0, #24
 800b318:	f103 0104 	add.w	r1, r3, #4
 800b31c:	d52a      	bpl.n	800b374 <_printf_i+0xa4>
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6011      	str	r1, [r2, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	da03      	bge.n	800b32e <_printf_i+0x5e>
 800b326:	222d      	movs	r2, #45	; 0x2d
 800b328:	425b      	negs	r3, r3
 800b32a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b32e:	486f      	ldr	r0, [pc, #444]	; (800b4ec <_printf_i+0x21c>)
 800b330:	220a      	movs	r2, #10
 800b332:	e039      	b.n	800b3a8 <_printf_i+0xd8>
 800b334:	2973      	cmp	r1, #115	; 0x73
 800b336:	f000 809d 	beq.w	800b474 <_printf_i+0x1a4>
 800b33a:	d808      	bhi.n	800b34e <_printf_i+0x7e>
 800b33c:	296f      	cmp	r1, #111	; 0x6f
 800b33e:	d020      	beq.n	800b382 <_printf_i+0xb2>
 800b340:	2970      	cmp	r1, #112	; 0x70
 800b342:	d1dd      	bne.n	800b300 <_printf_i+0x30>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	f043 0320 	orr.w	r3, r3, #32
 800b34a:	6023      	str	r3, [r4, #0]
 800b34c:	e003      	b.n	800b356 <_printf_i+0x86>
 800b34e:	2975      	cmp	r1, #117	; 0x75
 800b350:	d017      	beq.n	800b382 <_printf_i+0xb2>
 800b352:	2978      	cmp	r1, #120	; 0x78
 800b354:	d1d4      	bne.n	800b300 <_printf_i+0x30>
 800b356:	2378      	movs	r3, #120	; 0x78
 800b358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b35c:	4864      	ldr	r0, [pc, #400]	; (800b4f0 <_printf_i+0x220>)
 800b35e:	e055      	b.n	800b40c <_printf_i+0x13c>
 800b360:	6813      	ldr	r3, [r2, #0]
 800b362:	1d19      	adds	r1, r3, #4
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6011      	str	r1, [r2, #0]
 800b368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b370:	2301      	movs	r3, #1
 800b372:	e08c      	b.n	800b48e <_printf_i+0x1be>
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6011      	str	r1, [r2, #0]
 800b378:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b37c:	bf18      	it	ne
 800b37e:	b21b      	sxthne	r3, r3
 800b380:	e7cf      	b.n	800b322 <_printf_i+0x52>
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	6825      	ldr	r5, [r4, #0]
 800b386:	1d18      	adds	r0, r3, #4
 800b388:	6010      	str	r0, [r2, #0]
 800b38a:	0628      	lsls	r0, r5, #24
 800b38c:	d501      	bpl.n	800b392 <_printf_i+0xc2>
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	e002      	b.n	800b398 <_printf_i+0xc8>
 800b392:	0668      	lsls	r0, r5, #25
 800b394:	d5fb      	bpl.n	800b38e <_printf_i+0xbe>
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	4854      	ldr	r0, [pc, #336]	; (800b4ec <_printf_i+0x21c>)
 800b39a:	296f      	cmp	r1, #111	; 0x6f
 800b39c:	bf14      	ite	ne
 800b39e:	220a      	movne	r2, #10
 800b3a0:	2208      	moveq	r2, #8
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3a8:	6865      	ldr	r5, [r4, #4]
 800b3aa:	60a5      	str	r5, [r4, #8]
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	f2c0 8095 	blt.w	800b4dc <_printf_i+0x20c>
 800b3b2:	6821      	ldr	r1, [r4, #0]
 800b3b4:	f021 0104 	bic.w	r1, r1, #4
 800b3b8:	6021      	str	r1, [r4, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d13d      	bne.n	800b43a <_printf_i+0x16a>
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	f040 808e 	bne.w	800b4e0 <_printf_i+0x210>
 800b3c4:	4665      	mov	r5, ip
 800b3c6:	2a08      	cmp	r2, #8
 800b3c8:	d10b      	bne.n	800b3e2 <_printf_i+0x112>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	07db      	lsls	r3, r3, #31
 800b3ce:	d508      	bpl.n	800b3e2 <_printf_i+0x112>
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	6862      	ldr	r2, [r4, #4]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	bfde      	ittt	le
 800b3d8:	2330      	movle	r3, #48	; 0x30
 800b3da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3e2:	ebac 0305 	sub.w	r3, ip, r5
 800b3e6:	6123      	str	r3, [r4, #16]
 800b3e8:	f8cd 8000 	str.w	r8, [sp]
 800b3ec:	463b      	mov	r3, r7
 800b3ee:	aa03      	add	r2, sp, #12
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff fef6 	bl	800b1e4 <_printf_common>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d14d      	bne.n	800b498 <_printf_i+0x1c8>
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	b005      	add	sp, #20
 800b402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b406:	4839      	ldr	r0, [pc, #228]	; (800b4ec <_printf_i+0x21c>)
 800b408:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b40c:	6813      	ldr	r3, [r2, #0]
 800b40e:	6821      	ldr	r1, [r4, #0]
 800b410:	1d1d      	adds	r5, r3, #4
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6015      	str	r5, [r2, #0]
 800b416:	060a      	lsls	r2, r1, #24
 800b418:	d50b      	bpl.n	800b432 <_printf_i+0x162>
 800b41a:	07ca      	lsls	r2, r1, #31
 800b41c:	bf44      	itt	mi
 800b41e:	f041 0120 	orrmi.w	r1, r1, #32
 800b422:	6021      	strmi	r1, [r4, #0]
 800b424:	b91b      	cbnz	r3, 800b42e <_printf_i+0x15e>
 800b426:	6822      	ldr	r2, [r4, #0]
 800b428:	f022 0220 	bic.w	r2, r2, #32
 800b42c:	6022      	str	r2, [r4, #0]
 800b42e:	2210      	movs	r2, #16
 800b430:	e7b7      	b.n	800b3a2 <_printf_i+0xd2>
 800b432:	064d      	lsls	r5, r1, #25
 800b434:	bf48      	it	mi
 800b436:	b29b      	uxthmi	r3, r3
 800b438:	e7ef      	b.n	800b41a <_printf_i+0x14a>
 800b43a:	4665      	mov	r5, ip
 800b43c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b440:	fb02 3311 	mls	r3, r2, r1, r3
 800b444:	5cc3      	ldrb	r3, [r0, r3]
 800b446:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b44a:	460b      	mov	r3, r1
 800b44c:	2900      	cmp	r1, #0
 800b44e:	d1f5      	bne.n	800b43c <_printf_i+0x16c>
 800b450:	e7b9      	b.n	800b3c6 <_printf_i+0xf6>
 800b452:	6813      	ldr	r3, [r2, #0]
 800b454:	6825      	ldr	r5, [r4, #0]
 800b456:	6961      	ldr	r1, [r4, #20]
 800b458:	1d18      	adds	r0, r3, #4
 800b45a:	6010      	str	r0, [r2, #0]
 800b45c:	0628      	lsls	r0, r5, #24
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	d501      	bpl.n	800b466 <_printf_i+0x196>
 800b462:	6019      	str	r1, [r3, #0]
 800b464:	e002      	b.n	800b46c <_printf_i+0x19c>
 800b466:	066a      	lsls	r2, r5, #25
 800b468:	d5fb      	bpl.n	800b462 <_printf_i+0x192>
 800b46a:	8019      	strh	r1, [r3, #0]
 800b46c:	2300      	movs	r3, #0
 800b46e:	6123      	str	r3, [r4, #16]
 800b470:	4665      	mov	r5, ip
 800b472:	e7b9      	b.n	800b3e8 <_printf_i+0x118>
 800b474:	6813      	ldr	r3, [r2, #0]
 800b476:	1d19      	adds	r1, r3, #4
 800b478:	6011      	str	r1, [r2, #0]
 800b47a:	681d      	ldr	r5, [r3, #0]
 800b47c:	6862      	ldr	r2, [r4, #4]
 800b47e:	2100      	movs	r1, #0
 800b480:	4628      	mov	r0, r5
 800b482:	f7f4 fead 	bl	80001e0 <memchr>
 800b486:	b108      	cbz	r0, 800b48c <_printf_i+0x1bc>
 800b488:	1b40      	subs	r0, r0, r5
 800b48a:	6060      	str	r0, [r4, #4]
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	2300      	movs	r3, #0
 800b492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b496:	e7a7      	b.n	800b3e8 <_printf_i+0x118>
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	462a      	mov	r2, r5
 800b49c:	4639      	mov	r1, r7
 800b49e:	4630      	mov	r0, r6
 800b4a0:	47c0      	blx	r8
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d0aa      	beq.n	800b3fc <_printf_i+0x12c>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	079b      	lsls	r3, r3, #30
 800b4aa:	d413      	bmi.n	800b4d4 <_printf_i+0x204>
 800b4ac:	68e0      	ldr	r0, [r4, #12]
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	4298      	cmp	r0, r3
 800b4b2:	bfb8      	it	lt
 800b4b4:	4618      	movlt	r0, r3
 800b4b6:	e7a3      	b.n	800b400 <_printf_i+0x130>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	464a      	mov	r2, r9
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4630      	mov	r0, r6
 800b4c0:	47c0      	blx	r8
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	d09a      	beq.n	800b3fc <_printf_i+0x12c>
 800b4c6:	3501      	adds	r5, #1
 800b4c8:	68e3      	ldr	r3, [r4, #12]
 800b4ca:	9a03      	ldr	r2, [sp, #12]
 800b4cc:	1a9b      	subs	r3, r3, r2
 800b4ce:	42ab      	cmp	r3, r5
 800b4d0:	dcf2      	bgt.n	800b4b8 <_printf_i+0x1e8>
 800b4d2:	e7eb      	b.n	800b4ac <_printf_i+0x1dc>
 800b4d4:	2500      	movs	r5, #0
 800b4d6:	f104 0919 	add.w	r9, r4, #25
 800b4da:	e7f5      	b.n	800b4c8 <_printf_i+0x1f8>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1ac      	bne.n	800b43a <_printf_i+0x16a>
 800b4e0:	7803      	ldrb	r3, [r0, #0]
 800b4e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ea:	e76c      	b.n	800b3c6 <_printf_i+0xf6>
 800b4ec:	0800f14e 	.word	0x0800f14e
 800b4f0:	0800f15f 	.word	0x0800f15f

0800b4f4 <_scanf_float>:
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	469a      	mov	sl, r3
 800b4fa:	688b      	ldr	r3, [r1, #8]
 800b4fc:	4616      	mov	r6, r2
 800b4fe:	1e5a      	subs	r2, r3, #1
 800b500:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b504:	b087      	sub	sp, #28
 800b506:	bf83      	ittte	hi
 800b508:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b50c:	189b      	addhi	r3, r3, r2
 800b50e:	9301      	strhi	r3, [sp, #4]
 800b510:	2300      	movls	r3, #0
 800b512:	bf86      	itte	hi
 800b514:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b518:	608b      	strhi	r3, [r1, #8]
 800b51a:	9301      	strls	r3, [sp, #4]
 800b51c:	680b      	ldr	r3, [r1, #0]
 800b51e:	4688      	mov	r8, r1
 800b520:	f04f 0b00 	mov.w	fp, #0
 800b524:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b528:	f848 3b1c 	str.w	r3, [r8], #28
 800b52c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b530:	4607      	mov	r7, r0
 800b532:	460c      	mov	r4, r1
 800b534:	4645      	mov	r5, r8
 800b536:	465a      	mov	r2, fp
 800b538:	46d9      	mov	r9, fp
 800b53a:	f8cd b008 	str.w	fp, [sp, #8]
 800b53e:	68a1      	ldr	r1, [r4, #8]
 800b540:	b181      	cbz	r1, 800b564 <_scanf_float+0x70>
 800b542:	6833      	ldr	r3, [r6, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b49      	cmp	r3, #73	; 0x49
 800b548:	d071      	beq.n	800b62e <_scanf_float+0x13a>
 800b54a:	d84d      	bhi.n	800b5e8 <_scanf_float+0xf4>
 800b54c:	2b39      	cmp	r3, #57	; 0x39
 800b54e:	d840      	bhi.n	800b5d2 <_scanf_float+0xde>
 800b550:	2b31      	cmp	r3, #49	; 0x31
 800b552:	f080 8088 	bcs.w	800b666 <_scanf_float+0x172>
 800b556:	2b2d      	cmp	r3, #45	; 0x2d
 800b558:	f000 8090 	beq.w	800b67c <_scanf_float+0x188>
 800b55c:	d815      	bhi.n	800b58a <_scanf_float+0x96>
 800b55e:	2b2b      	cmp	r3, #43	; 0x2b
 800b560:	f000 808c 	beq.w	800b67c <_scanf_float+0x188>
 800b564:	f1b9 0f00 	cmp.w	r9, #0
 800b568:	d003      	beq.n	800b572 <_scanf_float+0x7e>
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	3a01      	subs	r2, #1
 800b574:	2a01      	cmp	r2, #1
 800b576:	f200 80ea 	bhi.w	800b74e <_scanf_float+0x25a>
 800b57a:	4545      	cmp	r5, r8
 800b57c:	f200 80dc 	bhi.w	800b738 <_scanf_float+0x244>
 800b580:	2601      	movs	r6, #1
 800b582:	4630      	mov	r0, r6
 800b584:	b007      	add	sp, #28
 800b586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58a:	2b2e      	cmp	r3, #46	; 0x2e
 800b58c:	f000 809f 	beq.w	800b6ce <_scanf_float+0x1da>
 800b590:	2b30      	cmp	r3, #48	; 0x30
 800b592:	d1e7      	bne.n	800b564 <_scanf_float+0x70>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b59a:	d064      	beq.n	800b666 <_scanf_float+0x172>
 800b59c:	9b01      	ldr	r3, [sp, #4]
 800b59e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	f109 0901 	add.w	r9, r9, #1
 800b5a8:	b11b      	cbz	r3, 800b5b2 <_scanf_float+0xbe>
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	3101      	adds	r1, #1
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	60a1      	str	r1, [r4, #8]
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	60a3      	str	r3, [r4, #8]
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	6123      	str	r3, [r4, #16]
 800b5be:	6873      	ldr	r3, [r6, #4]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	6073      	str	r3, [r6, #4]
 800b5c6:	f340 80ac 	ble.w	800b722 <_scanf_float+0x22e>
 800b5ca:	6833      	ldr	r3, [r6, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	6033      	str	r3, [r6, #0]
 800b5d0:	e7b5      	b.n	800b53e <_scanf_float+0x4a>
 800b5d2:	2b45      	cmp	r3, #69	; 0x45
 800b5d4:	f000 8085 	beq.w	800b6e2 <_scanf_float+0x1ee>
 800b5d8:	2b46      	cmp	r3, #70	; 0x46
 800b5da:	d06a      	beq.n	800b6b2 <_scanf_float+0x1be>
 800b5dc:	2b41      	cmp	r3, #65	; 0x41
 800b5de:	d1c1      	bne.n	800b564 <_scanf_float+0x70>
 800b5e0:	2a01      	cmp	r2, #1
 800b5e2:	d1bf      	bne.n	800b564 <_scanf_float+0x70>
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	e046      	b.n	800b676 <_scanf_float+0x182>
 800b5e8:	2b65      	cmp	r3, #101	; 0x65
 800b5ea:	d07a      	beq.n	800b6e2 <_scanf_float+0x1ee>
 800b5ec:	d818      	bhi.n	800b620 <_scanf_float+0x12c>
 800b5ee:	2b54      	cmp	r3, #84	; 0x54
 800b5f0:	d066      	beq.n	800b6c0 <_scanf_float+0x1cc>
 800b5f2:	d811      	bhi.n	800b618 <_scanf_float+0x124>
 800b5f4:	2b4e      	cmp	r3, #78	; 0x4e
 800b5f6:	d1b5      	bne.n	800b564 <_scanf_float+0x70>
 800b5f8:	2a00      	cmp	r2, #0
 800b5fa:	d146      	bne.n	800b68a <_scanf_float+0x196>
 800b5fc:	f1b9 0f00 	cmp.w	r9, #0
 800b600:	d145      	bne.n	800b68e <_scanf_float+0x19a>
 800b602:	6821      	ldr	r1, [r4, #0]
 800b604:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b608:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b60c:	d13f      	bne.n	800b68e <_scanf_float+0x19a>
 800b60e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b612:	6021      	str	r1, [r4, #0]
 800b614:	2201      	movs	r2, #1
 800b616:	e02e      	b.n	800b676 <_scanf_float+0x182>
 800b618:	2b59      	cmp	r3, #89	; 0x59
 800b61a:	d01e      	beq.n	800b65a <_scanf_float+0x166>
 800b61c:	2b61      	cmp	r3, #97	; 0x61
 800b61e:	e7de      	b.n	800b5de <_scanf_float+0xea>
 800b620:	2b6e      	cmp	r3, #110	; 0x6e
 800b622:	d0e9      	beq.n	800b5f8 <_scanf_float+0x104>
 800b624:	d815      	bhi.n	800b652 <_scanf_float+0x15e>
 800b626:	2b66      	cmp	r3, #102	; 0x66
 800b628:	d043      	beq.n	800b6b2 <_scanf_float+0x1be>
 800b62a:	2b69      	cmp	r3, #105	; 0x69
 800b62c:	d19a      	bne.n	800b564 <_scanf_float+0x70>
 800b62e:	f1bb 0f00 	cmp.w	fp, #0
 800b632:	d138      	bne.n	800b6a6 <_scanf_float+0x1b2>
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	d197      	bne.n	800b56a <_scanf_float+0x76>
 800b63a:	6821      	ldr	r1, [r4, #0]
 800b63c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b640:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b644:	d195      	bne.n	800b572 <_scanf_float+0x7e>
 800b646:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b64a:	6021      	str	r1, [r4, #0]
 800b64c:	f04f 0b01 	mov.w	fp, #1
 800b650:	e011      	b.n	800b676 <_scanf_float+0x182>
 800b652:	2b74      	cmp	r3, #116	; 0x74
 800b654:	d034      	beq.n	800b6c0 <_scanf_float+0x1cc>
 800b656:	2b79      	cmp	r3, #121	; 0x79
 800b658:	d184      	bne.n	800b564 <_scanf_float+0x70>
 800b65a:	f1bb 0f07 	cmp.w	fp, #7
 800b65e:	d181      	bne.n	800b564 <_scanf_float+0x70>
 800b660:	f04f 0b08 	mov.w	fp, #8
 800b664:	e007      	b.n	800b676 <_scanf_float+0x182>
 800b666:	eb12 0f0b 	cmn.w	r2, fp
 800b66a:	f47f af7b 	bne.w	800b564 <_scanf_float+0x70>
 800b66e:	6821      	ldr	r1, [r4, #0]
 800b670:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b674:	6021      	str	r1, [r4, #0]
 800b676:	702b      	strb	r3, [r5, #0]
 800b678:	3501      	adds	r5, #1
 800b67a:	e79a      	b.n	800b5b2 <_scanf_float+0xbe>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	0608      	lsls	r0, r1, #24
 800b680:	f57f af70 	bpl.w	800b564 <_scanf_float+0x70>
 800b684:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b688:	e7f4      	b.n	800b674 <_scanf_float+0x180>
 800b68a:	2a02      	cmp	r2, #2
 800b68c:	d047      	beq.n	800b71e <_scanf_float+0x22a>
 800b68e:	f1bb 0f01 	cmp.w	fp, #1
 800b692:	d003      	beq.n	800b69c <_scanf_float+0x1a8>
 800b694:	f1bb 0f04 	cmp.w	fp, #4
 800b698:	f47f af64 	bne.w	800b564 <_scanf_float+0x70>
 800b69c:	f10b 0b01 	add.w	fp, fp, #1
 800b6a0:	fa5f fb8b 	uxtb.w	fp, fp
 800b6a4:	e7e7      	b.n	800b676 <_scanf_float+0x182>
 800b6a6:	f1bb 0f03 	cmp.w	fp, #3
 800b6aa:	d0f7      	beq.n	800b69c <_scanf_float+0x1a8>
 800b6ac:	f1bb 0f05 	cmp.w	fp, #5
 800b6b0:	e7f2      	b.n	800b698 <_scanf_float+0x1a4>
 800b6b2:	f1bb 0f02 	cmp.w	fp, #2
 800b6b6:	f47f af55 	bne.w	800b564 <_scanf_float+0x70>
 800b6ba:	f04f 0b03 	mov.w	fp, #3
 800b6be:	e7da      	b.n	800b676 <_scanf_float+0x182>
 800b6c0:	f1bb 0f06 	cmp.w	fp, #6
 800b6c4:	f47f af4e 	bne.w	800b564 <_scanf_float+0x70>
 800b6c8:	f04f 0b07 	mov.w	fp, #7
 800b6cc:	e7d3      	b.n	800b676 <_scanf_float+0x182>
 800b6ce:	6821      	ldr	r1, [r4, #0]
 800b6d0:	0588      	lsls	r0, r1, #22
 800b6d2:	f57f af47 	bpl.w	800b564 <_scanf_float+0x70>
 800b6d6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b6da:	6021      	str	r1, [r4, #0]
 800b6dc:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6e0:	e7c9      	b.n	800b676 <_scanf_float+0x182>
 800b6e2:	6821      	ldr	r1, [r4, #0]
 800b6e4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b6e8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b6ec:	d006      	beq.n	800b6fc <_scanf_float+0x208>
 800b6ee:	0548      	lsls	r0, r1, #21
 800b6f0:	f57f af38 	bpl.w	800b564 <_scanf_float+0x70>
 800b6f4:	f1b9 0f00 	cmp.w	r9, #0
 800b6f8:	f43f af3b 	beq.w	800b572 <_scanf_float+0x7e>
 800b6fc:	0588      	lsls	r0, r1, #22
 800b6fe:	bf58      	it	pl
 800b700:	9802      	ldrpl	r0, [sp, #8]
 800b702:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b706:	bf58      	it	pl
 800b708:	eba9 0000 	subpl.w	r0, r9, r0
 800b70c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b710:	bf58      	it	pl
 800b712:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b716:	6021      	str	r1, [r4, #0]
 800b718:	f04f 0900 	mov.w	r9, #0
 800b71c:	e7ab      	b.n	800b676 <_scanf_float+0x182>
 800b71e:	2203      	movs	r2, #3
 800b720:	e7a9      	b.n	800b676 <_scanf_float+0x182>
 800b722:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b726:	9205      	str	r2, [sp, #20]
 800b728:	4631      	mov	r1, r6
 800b72a:	4638      	mov	r0, r7
 800b72c:	4798      	blx	r3
 800b72e:	9a05      	ldr	r2, [sp, #20]
 800b730:	2800      	cmp	r0, #0
 800b732:	f43f af04 	beq.w	800b53e <_scanf_float+0x4a>
 800b736:	e715      	b.n	800b564 <_scanf_float+0x70>
 800b738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b73c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b740:	4632      	mov	r2, r6
 800b742:	4638      	mov	r0, r7
 800b744:	4798      	blx	r3
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	3b01      	subs	r3, #1
 800b74a:	6123      	str	r3, [r4, #16]
 800b74c:	e715      	b.n	800b57a <_scanf_float+0x86>
 800b74e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b752:	2b06      	cmp	r3, #6
 800b754:	d80a      	bhi.n	800b76c <_scanf_float+0x278>
 800b756:	f1bb 0f02 	cmp.w	fp, #2
 800b75a:	d968      	bls.n	800b82e <_scanf_float+0x33a>
 800b75c:	f1ab 0b03 	sub.w	fp, fp, #3
 800b760:	fa5f fb8b 	uxtb.w	fp, fp
 800b764:	eba5 0b0b 	sub.w	fp, r5, fp
 800b768:	455d      	cmp	r5, fp
 800b76a:	d14b      	bne.n	800b804 <_scanf_float+0x310>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	05da      	lsls	r2, r3, #23
 800b770:	d51f      	bpl.n	800b7b2 <_scanf_float+0x2be>
 800b772:	055b      	lsls	r3, r3, #21
 800b774:	d468      	bmi.n	800b848 <_scanf_float+0x354>
 800b776:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	2965      	cmp	r1, #101	; 0x65
 800b77e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b782:	f105 3bff 	add.w	fp, r5, #4294967295
 800b786:	6123      	str	r3, [r4, #16]
 800b788:	d00d      	beq.n	800b7a6 <_scanf_float+0x2b2>
 800b78a:	2945      	cmp	r1, #69	; 0x45
 800b78c:	d00b      	beq.n	800b7a6 <_scanf_float+0x2b2>
 800b78e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b792:	4632      	mov	r2, r6
 800b794:	4638      	mov	r0, r7
 800b796:	4798      	blx	r3
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	f1a5 0b02 	sub.w	fp, r5, #2
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	4798      	blx	r3
 800b7b0:	465d      	mov	r5, fp
 800b7b2:	6826      	ldr	r6, [r4, #0]
 800b7b4:	f016 0610 	ands.w	r6, r6, #16
 800b7b8:	d17a      	bne.n	800b8b0 <_scanf_float+0x3bc>
 800b7ba:	702e      	strb	r6, [r5, #0]
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b7c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7c6:	d142      	bne.n	800b84e <_scanf_float+0x35a>
 800b7c8:	9b02      	ldr	r3, [sp, #8]
 800b7ca:	eba9 0303 	sub.w	r3, r9, r3
 800b7ce:	425a      	negs	r2, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d149      	bne.n	800b868 <_scanf_float+0x374>
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4641      	mov	r1, r8
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f000 ff21 	bl	800c620 <_strtod_r>
 800b7de:	6825      	ldr	r5, [r4, #0]
 800b7e0:	f8da 3000 	ldr.w	r3, [sl]
 800b7e4:	f015 0f02 	tst.w	r5, #2
 800b7e8:	f103 0204 	add.w	r2, r3, #4
 800b7ec:	ec59 8b10 	vmov	r8, r9, d0
 800b7f0:	f8ca 2000 	str.w	r2, [sl]
 800b7f4:	d043      	beq.n	800b87e <_scanf_float+0x38a>
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	e9c3 8900 	strd	r8, r9, [r3]
 800b7fc:	68e3      	ldr	r3, [r4, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60e3      	str	r3, [r4, #12]
 800b802:	e6be      	b.n	800b582 <_scanf_float+0x8e>
 800b804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b808:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b80c:	4632      	mov	r2, r6
 800b80e:	4638      	mov	r0, r7
 800b810:	4798      	blx	r3
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	3b01      	subs	r3, #1
 800b816:	6123      	str	r3, [r4, #16]
 800b818:	e7a6      	b.n	800b768 <_scanf_float+0x274>
 800b81a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b81e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b822:	4632      	mov	r2, r6
 800b824:	4638      	mov	r0, r7
 800b826:	4798      	blx	r3
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	6123      	str	r3, [r4, #16]
 800b82e:	4545      	cmp	r5, r8
 800b830:	d8f3      	bhi.n	800b81a <_scanf_float+0x326>
 800b832:	e6a5      	b.n	800b580 <_scanf_float+0x8c>
 800b834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b838:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b83c:	4632      	mov	r2, r6
 800b83e:	4638      	mov	r0, r7
 800b840:	4798      	blx	r3
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	3b01      	subs	r3, #1
 800b846:	6123      	str	r3, [r4, #16]
 800b848:	4545      	cmp	r5, r8
 800b84a:	d8f3      	bhi.n	800b834 <_scanf_float+0x340>
 800b84c:	e698      	b.n	800b580 <_scanf_float+0x8c>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0bf      	beq.n	800b7d4 <_scanf_float+0x2e0>
 800b854:	9904      	ldr	r1, [sp, #16]
 800b856:	230a      	movs	r3, #10
 800b858:	4632      	mov	r2, r6
 800b85a:	3101      	adds	r1, #1
 800b85c:	4638      	mov	r0, r7
 800b85e:	f000 ff6b 	bl	800c738 <_strtol_r>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	9d04      	ldr	r5, [sp, #16]
 800b866:	1ac2      	subs	r2, r0, r3
 800b868:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b86c:	429d      	cmp	r5, r3
 800b86e:	bf28      	it	cs
 800b870:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b874:	490f      	ldr	r1, [pc, #60]	; (800b8b4 <_scanf_float+0x3c0>)
 800b876:	4628      	mov	r0, r5
 800b878:	f000 f8a0 	bl	800b9bc <siprintf>
 800b87c:	e7aa      	b.n	800b7d4 <_scanf_float+0x2e0>
 800b87e:	f015 0504 	ands.w	r5, r5, #4
 800b882:	d1b8      	bne.n	800b7f6 <_scanf_float+0x302>
 800b884:	681f      	ldr	r7, [r3, #0]
 800b886:	ee10 2a10 	vmov	r2, s0
 800b88a:	464b      	mov	r3, r9
 800b88c:	ee10 0a10 	vmov	r0, s0
 800b890:	4649      	mov	r1, r9
 800b892:	f7f5 f94b 	bl	8000b2c <__aeabi_dcmpun>
 800b896:	b128      	cbz	r0, 800b8a4 <_scanf_float+0x3b0>
 800b898:	4628      	mov	r0, r5
 800b89a:	f000 f889 	bl	800b9b0 <nanf>
 800b89e:	ed87 0a00 	vstr	s0, [r7]
 800b8a2:	e7ab      	b.n	800b7fc <_scanf_float+0x308>
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	f7f5 f99e 	bl	8000be8 <__aeabi_d2f>
 800b8ac:	6038      	str	r0, [r7, #0]
 800b8ae:	e7a5      	b.n	800b7fc <_scanf_float+0x308>
 800b8b0:	2600      	movs	r6, #0
 800b8b2:	e666      	b.n	800b582 <_scanf_float+0x8e>
 800b8b4:	0800f170 	.word	0x0800f170

0800b8b8 <iprintf>:
 800b8b8:	b40f      	push	{r0, r1, r2, r3}
 800b8ba:	4b0a      	ldr	r3, [pc, #40]	; (800b8e4 <iprintf+0x2c>)
 800b8bc:	b513      	push	{r0, r1, r4, lr}
 800b8be:	681c      	ldr	r4, [r3, #0]
 800b8c0:	b124      	cbz	r4, 800b8cc <iprintf+0x14>
 800b8c2:	69a3      	ldr	r3, [r4, #24]
 800b8c4:	b913      	cbnz	r3, 800b8cc <iprintf+0x14>
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f001 ff3e 	bl	800d748 <__sinit>
 800b8cc:	ab05      	add	r3, sp, #20
 800b8ce:	9a04      	ldr	r2, [sp, #16]
 800b8d0:	68a1      	ldr	r1, [r4, #8]
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f003 f9ab 	bl	800ec30 <_vfiprintf_r>
 800b8da:	b002      	add	sp, #8
 800b8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e0:	b004      	add	sp, #16
 800b8e2:	4770      	bx	lr
 800b8e4:	20000040 	.word	0x20000040

0800b8e8 <_puts_r>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	b118      	cbz	r0, 800b8f8 <_puts_r+0x10>
 800b8f0:	6983      	ldr	r3, [r0, #24]
 800b8f2:	b90b      	cbnz	r3, 800b8f8 <_puts_r+0x10>
 800b8f4:	f001 ff28 	bl	800d748 <__sinit>
 800b8f8:	69ab      	ldr	r3, [r5, #24]
 800b8fa:	68ac      	ldr	r4, [r5, #8]
 800b8fc:	b913      	cbnz	r3, 800b904 <_puts_r+0x1c>
 800b8fe:	4628      	mov	r0, r5
 800b900:	f001 ff22 	bl	800d748 <__sinit>
 800b904:	4b23      	ldr	r3, [pc, #140]	; (800b994 <_puts_r+0xac>)
 800b906:	429c      	cmp	r4, r3
 800b908:	d117      	bne.n	800b93a <_puts_r+0x52>
 800b90a:	686c      	ldr	r4, [r5, #4]
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	071b      	lsls	r3, r3, #28
 800b910:	d51d      	bpl.n	800b94e <_puts_r+0x66>
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	b1db      	cbz	r3, 800b94e <_puts_r+0x66>
 800b916:	3e01      	subs	r6, #1
 800b918:	68a3      	ldr	r3, [r4, #8]
 800b91a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b91e:	3b01      	subs	r3, #1
 800b920:	60a3      	str	r3, [r4, #8]
 800b922:	b9e9      	cbnz	r1, 800b960 <_puts_r+0x78>
 800b924:	2b00      	cmp	r3, #0
 800b926:	da2e      	bge.n	800b986 <_puts_r+0x9e>
 800b928:	4622      	mov	r2, r4
 800b92a:	210a      	movs	r1, #10
 800b92c:	4628      	mov	r0, r5
 800b92e:	f000 ff15 	bl	800c75c <__swbuf_r>
 800b932:	3001      	adds	r0, #1
 800b934:	d011      	beq.n	800b95a <_puts_r+0x72>
 800b936:	200a      	movs	r0, #10
 800b938:	e011      	b.n	800b95e <_puts_r+0x76>
 800b93a:	4b17      	ldr	r3, [pc, #92]	; (800b998 <_puts_r+0xb0>)
 800b93c:	429c      	cmp	r4, r3
 800b93e:	d101      	bne.n	800b944 <_puts_r+0x5c>
 800b940:	68ac      	ldr	r4, [r5, #8]
 800b942:	e7e3      	b.n	800b90c <_puts_r+0x24>
 800b944:	4b15      	ldr	r3, [pc, #84]	; (800b99c <_puts_r+0xb4>)
 800b946:	429c      	cmp	r4, r3
 800b948:	bf08      	it	eq
 800b94a:	68ec      	ldreq	r4, [r5, #12]
 800b94c:	e7de      	b.n	800b90c <_puts_r+0x24>
 800b94e:	4621      	mov	r1, r4
 800b950:	4628      	mov	r0, r5
 800b952:	f000 ff55 	bl	800c800 <__swsetup_r>
 800b956:	2800      	cmp	r0, #0
 800b958:	d0dd      	beq.n	800b916 <_puts_r+0x2e>
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	2b00      	cmp	r3, #0
 800b962:	da04      	bge.n	800b96e <_puts_r+0x86>
 800b964:	69a2      	ldr	r2, [r4, #24]
 800b966:	429a      	cmp	r2, r3
 800b968:	dc06      	bgt.n	800b978 <_puts_r+0x90>
 800b96a:	290a      	cmp	r1, #10
 800b96c:	d004      	beq.n	800b978 <_puts_r+0x90>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	6022      	str	r2, [r4, #0]
 800b974:	7019      	strb	r1, [r3, #0]
 800b976:	e7cf      	b.n	800b918 <_puts_r+0x30>
 800b978:	4622      	mov	r2, r4
 800b97a:	4628      	mov	r0, r5
 800b97c:	f000 feee 	bl	800c75c <__swbuf_r>
 800b980:	3001      	adds	r0, #1
 800b982:	d1c9      	bne.n	800b918 <_puts_r+0x30>
 800b984:	e7e9      	b.n	800b95a <_puts_r+0x72>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	200a      	movs	r0, #10
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	7018      	strb	r0, [r3, #0]
 800b990:	e7e5      	b.n	800b95e <_puts_r+0x76>
 800b992:	bf00      	nop
 800b994:	0800f1f8 	.word	0x0800f1f8
 800b998:	0800f218 	.word	0x0800f218
 800b99c:	0800f1d8 	.word	0x0800f1d8

0800b9a0 <puts>:
 800b9a0:	4b02      	ldr	r3, [pc, #8]	; (800b9ac <puts+0xc>)
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	f7ff bf9f 	b.w	800b8e8 <_puts_r>
 800b9aa:	bf00      	nop
 800b9ac:	20000040 	.word	0x20000040

0800b9b0 <nanf>:
 800b9b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b9b8 <nanf+0x8>
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	7fc00000 	.word	0x7fc00000

0800b9bc <siprintf>:
 800b9bc:	b40e      	push	{r1, r2, r3}
 800b9be:	b500      	push	{lr}
 800b9c0:	b09c      	sub	sp, #112	; 0x70
 800b9c2:	ab1d      	add	r3, sp, #116	; 0x74
 800b9c4:	9002      	str	r0, [sp, #8]
 800b9c6:	9006      	str	r0, [sp, #24]
 800b9c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9cc:	4809      	ldr	r0, [pc, #36]	; (800b9f4 <siprintf+0x38>)
 800b9ce:	9107      	str	r1, [sp, #28]
 800b9d0:	9104      	str	r1, [sp, #16]
 800b9d2:	4909      	ldr	r1, [pc, #36]	; (800b9f8 <siprintf+0x3c>)
 800b9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d8:	9105      	str	r1, [sp, #20]
 800b9da:	6800      	ldr	r0, [r0, #0]
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	a902      	add	r1, sp, #8
 800b9e0:	f003 f804 	bl	800e9ec <_svfiprintf_r>
 800b9e4:	9b02      	ldr	r3, [sp, #8]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	701a      	strb	r2, [r3, #0]
 800b9ea:	b01c      	add	sp, #112	; 0x70
 800b9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9f0:	b003      	add	sp, #12
 800b9f2:	4770      	bx	lr
 800b9f4:	20000040 	.word	0x20000040
 800b9f8:	ffff0208 	.word	0xffff0208

0800b9fc <sulp>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	ec45 4b10 	vmov	d0, r4, r5
 800ba06:	4616      	mov	r6, r2
 800ba08:	f002 fdac 	bl	800e564 <__ulp>
 800ba0c:	ec51 0b10 	vmov	r0, r1, d0
 800ba10:	b17e      	cbz	r6, 800ba32 <sulp+0x36>
 800ba12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dd09      	ble.n	800ba32 <sulp+0x36>
 800ba1e:	051b      	lsls	r3, r3, #20
 800ba20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba24:	2400      	movs	r4, #0
 800ba26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	f7f4 fde3 	bl	80005f8 <__aeabi_dmul>
 800ba32:	bd70      	pop	{r4, r5, r6, pc}
 800ba34:	0000      	movs	r0, r0
	...

0800ba38 <_strtod_l>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	461f      	mov	r7, r3
 800ba3e:	b0a1      	sub	sp, #132	; 0x84
 800ba40:	2300      	movs	r3, #0
 800ba42:	4681      	mov	r9, r0
 800ba44:	4638      	mov	r0, r7
 800ba46:	460e      	mov	r6, r1
 800ba48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba4a:	931c      	str	r3, [sp, #112]	; 0x70
 800ba4c:	f002 fa2f 	bl	800deae <__localeconv_l>
 800ba50:	4680      	mov	r8, r0
 800ba52:	6800      	ldr	r0, [r0, #0]
 800ba54:	f7f4 fbbc 	bl	80001d0 <strlen>
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	f04f 0b00 	mov.w	fp, #0
 800ba62:	961b      	str	r6, [sp, #108]	; 0x6c
 800ba64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba66:	781a      	ldrb	r2, [r3, #0]
 800ba68:	2a0d      	cmp	r2, #13
 800ba6a:	d832      	bhi.n	800bad2 <_strtod_l+0x9a>
 800ba6c:	2a09      	cmp	r2, #9
 800ba6e:	d236      	bcs.n	800bade <_strtod_l+0xa6>
 800ba70:	2a00      	cmp	r2, #0
 800ba72:	d03e      	beq.n	800baf2 <_strtod_l+0xba>
 800ba74:	2300      	movs	r3, #0
 800ba76:	930d      	str	r3, [sp, #52]	; 0x34
 800ba78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ba7a:	782b      	ldrb	r3, [r5, #0]
 800ba7c:	2b30      	cmp	r3, #48	; 0x30
 800ba7e:	f040 80ac 	bne.w	800bbda <_strtod_l+0x1a2>
 800ba82:	786b      	ldrb	r3, [r5, #1]
 800ba84:	2b58      	cmp	r3, #88	; 0x58
 800ba86:	d001      	beq.n	800ba8c <_strtod_l+0x54>
 800ba88:	2b78      	cmp	r3, #120	; 0x78
 800ba8a:	d167      	bne.n	800bb5c <_strtod_l+0x124>
 800ba8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	ab1c      	add	r3, sp, #112	; 0x70
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	9702      	str	r7, [sp, #8]
 800ba96:	ab1d      	add	r3, sp, #116	; 0x74
 800ba98:	4a88      	ldr	r2, [pc, #544]	; (800bcbc <_strtod_l+0x284>)
 800ba9a:	a91b      	add	r1, sp, #108	; 0x6c
 800ba9c:	4648      	mov	r0, r9
 800ba9e:	f001 ff2c 	bl	800d8fa <__gethex>
 800baa2:	f010 0407 	ands.w	r4, r0, #7
 800baa6:	4606      	mov	r6, r0
 800baa8:	d005      	beq.n	800bab6 <_strtod_l+0x7e>
 800baaa:	2c06      	cmp	r4, #6
 800baac:	d12b      	bne.n	800bb06 <_strtod_l+0xce>
 800baae:	3501      	adds	r5, #1
 800bab0:	2300      	movs	r3, #0
 800bab2:	951b      	str	r5, [sp, #108]	; 0x6c
 800bab4:	930d      	str	r3, [sp, #52]	; 0x34
 800bab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f040 859a 	bne.w	800c5f2 <_strtod_l+0xbba>
 800babe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bac0:	b1e3      	cbz	r3, 800bafc <_strtod_l+0xc4>
 800bac2:	4652      	mov	r2, sl
 800bac4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bac8:	ec43 2b10 	vmov	d0, r2, r3
 800bacc:	b021      	add	sp, #132	; 0x84
 800bace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad2:	2a2b      	cmp	r2, #43	; 0x2b
 800bad4:	d015      	beq.n	800bb02 <_strtod_l+0xca>
 800bad6:	2a2d      	cmp	r2, #45	; 0x2d
 800bad8:	d004      	beq.n	800bae4 <_strtod_l+0xac>
 800bada:	2a20      	cmp	r2, #32
 800badc:	d1ca      	bne.n	800ba74 <_strtod_l+0x3c>
 800bade:	3301      	adds	r3, #1
 800bae0:	931b      	str	r3, [sp, #108]	; 0x6c
 800bae2:	e7bf      	b.n	800ba64 <_strtod_l+0x2c>
 800bae4:	2201      	movs	r2, #1
 800bae6:	920d      	str	r2, [sp, #52]	; 0x34
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	921b      	str	r2, [sp, #108]	; 0x6c
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1c2      	bne.n	800ba78 <_strtod_l+0x40>
 800baf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baf4:	961b      	str	r6, [sp, #108]	; 0x6c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f040 8579 	bne.w	800c5ee <_strtod_l+0xbb6>
 800bafc:	4652      	mov	r2, sl
 800bafe:	465b      	mov	r3, fp
 800bb00:	e7e2      	b.n	800bac8 <_strtod_l+0x90>
 800bb02:	2200      	movs	r2, #0
 800bb04:	e7ef      	b.n	800bae6 <_strtod_l+0xae>
 800bb06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb08:	b13a      	cbz	r2, 800bb1a <_strtod_l+0xe2>
 800bb0a:	2135      	movs	r1, #53	; 0x35
 800bb0c:	a81e      	add	r0, sp, #120	; 0x78
 800bb0e:	f002 fe21 	bl	800e754 <__copybits>
 800bb12:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb14:	4648      	mov	r0, r9
 800bb16:	f002 fa8d 	bl	800e034 <_Bfree>
 800bb1a:	3c01      	subs	r4, #1
 800bb1c:	2c04      	cmp	r4, #4
 800bb1e:	d806      	bhi.n	800bb2e <_strtod_l+0xf6>
 800bb20:	e8df f004 	tbb	[pc, r4]
 800bb24:	1714030a 	.word	0x1714030a
 800bb28:	0a          	.byte	0x0a
 800bb29:	00          	.byte	0x00
 800bb2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bb2e:	0730      	lsls	r0, r6, #28
 800bb30:	d5c1      	bpl.n	800bab6 <_strtod_l+0x7e>
 800bb32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bb36:	e7be      	b.n	800bab6 <_strtod_l+0x7e>
 800bb38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bb3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bb3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bb4a:	e7f0      	b.n	800bb2e <_strtod_l+0xf6>
 800bb4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bcc0 <_strtod_l+0x288>
 800bb50:	e7ed      	b.n	800bb2e <_strtod_l+0xf6>
 800bb52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bb56:	f04f 3aff 	mov.w	sl, #4294967295
 800bb5a:	e7e8      	b.n	800bb2e <_strtod_l+0xf6>
 800bb5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	2b30      	cmp	r3, #48	; 0x30
 800bb66:	d0f9      	beq.n	800bb5c <_strtod_l+0x124>
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d0a4      	beq.n	800bab6 <_strtod_l+0x7e>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	2500      	movs	r5, #0
 800bb70:	9306      	str	r3, [sp, #24]
 800bb72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb74:	9308      	str	r3, [sp, #32]
 800bb76:	9507      	str	r5, [sp, #28]
 800bb78:	9505      	str	r5, [sp, #20]
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bb7e:	7807      	ldrb	r7, [r0, #0]
 800bb80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bb84:	b2d9      	uxtb	r1, r3
 800bb86:	2909      	cmp	r1, #9
 800bb88:	d929      	bls.n	800bbde <_strtod_l+0x1a6>
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	f8d8 1000 	ldr.w	r1, [r8]
 800bb90:	f003 f9b7 	bl	800ef02 <strncmp>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d031      	beq.n	800bbfc <_strtod_l+0x1c4>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	9c05      	ldr	r4, [sp, #20]
 800bb9c:	9004      	str	r0, [sp, #16]
 800bb9e:	463b      	mov	r3, r7
 800bba0:	4602      	mov	r2, r0
 800bba2:	2b65      	cmp	r3, #101	; 0x65
 800bba4:	d001      	beq.n	800bbaa <_strtod_l+0x172>
 800bba6:	2b45      	cmp	r3, #69	; 0x45
 800bba8:	d114      	bne.n	800bbd4 <_strtod_l+0x19c>
 800bbaa:	b924      	cbnz	r4, 800bbb6 <_strtod_l+0x17e>
 800bbac:	b910      	cbnz	r0, 800bbb4 <_strtod_l+0x17c>
 800bbae:	9b06      	ldr	r3, [sp, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d09e      	beq.n	800baf2 <_strtod_l+0xba>
 800bbb4:	2400      	movs	r4, #0
 800bbb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bbb8:	1c73      	adds	r3, r6, #1
 800bbba:	931b      	str	r3, [sp, #108]	; 0x6c
 800bbbc:	7873      	ldrb	r3, [r6, #1]
 800bbbe:	2b2b      	cmp	r3, #43	; 0x2b
 800bbc0:	d078      	beq.n	800bcb4 <_strtod_l+0x27c>
 800bbc2:	2b2d      	cmp	r3, #45	; 0x2d
 800bbc4:	d070      	beq.n	800bca8 <_strtod_l+0x270>
 800bbc6:	f04f 0c00 	mov.w	ip, #0
 800bbca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bbce:	2f09      	cmp	r7, #9
 800bbd0:	d97c      	bls.n	800bccc <_strtod_l+0x294>
 800bbd2:	961b      	str	r6, [sp, #108]	; 0x6c
 800bbd4:	f04f 0e00 	mov.w	lr, #0
 800bbd8:	e09a      	b.n	800bd10 <_strtod_l+0x2d8>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e7c7      	b.n	800bb6e <_strtod_l+0x136>
 800bbde:	9905      	ldr	r1, [sp, #20]
 800bbe0:	2908      	cmp	r1, #8
 800bbe2:	bfdd      	ittte	le
 800bbe4:	9907      	ldrle	r1, [sp, #28]
 800bbe6:	fb02 3301 	mlale	r3, r2, r1, r3
 800bbea:	9307      	strle	r3, [sp, #28]
 800bbec:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bbf0:	9b05      	ldr	r3, [sp, #20]
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	9305      	str	r3, [sp, #20]
 800bbf8:	901b      	str	r0, [sp, #108]	; 0x6c
 800bbfa:	e7bf      	b.n	800bb7c <_strtod_l+0x144>
 800bbfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbfe:	191a      	adds	r2, r3, r4
 800bc00:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc02:	9a05      	ldr	r2, [sp, #20]
 800bc04:	5d1b      	ldrb	r3, [r3, r4]
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	d037      	beq.n	800bc7a <_strtod_l+0x242>
 800bc0a:	9c05      	ldr	r4, [sp, #20]
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bc12:	2909      	cmp	r1, #9
 800bc14:	d913      	bls.n	800bc3e <_strtod_l+0x206>
 800bc16:	2101      	movs	r1, #1
 800bc18:	9104      	str	r1, [sp, #16]
 800bc1a:	e7c2      	b.n	800bba2 <_strtod_l+0x16a>
 800bc1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc22:	785b      	ldrb	r3, [r3, #1]
 800bc24:	3001      	adds	r0, #1
 800bc26:	2b30      	cmp	r3, #48	; 0x30
 800bc28:	d0f8      	beq.n	800bc1c <_strtod_l+0x1e4>
 800bc2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bc2e:	2a08      	cmp	r2, #8
 800bc30:	f200 84e4 	bhi.w	800c5fc <_strtod_l+0xbc4>
 800bc34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bc36:	9208      	str	r2, [sp, #32]
 800bc38:	4602      	mov	r2, r0
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bc42:	f100 0101 	add.w	r1, r0, #1
 800bc46:	d012      	beq.n	800bc6e <_strtod_l+0x236>
 800bc48:	440a      	add	r2, r1
 800bc4a:	eb00 0c04 	add.w	ip, r0, r4
 800bc4e:	4621      	mov	r1, r4
 800bc50:	270a      	movs	r7, #10
 800bc52:	458c      	cmp	ip, r1
 800bc54:	d113      	bne.n	800bc7e <_strtod_l+0x246>
 800bc56:	1821      	adds	r1, r4, r0
 800bc58:	2908      	cmp	r1, #8
 800bc5a:	f104 0401 	add.w	r4, r4, #1
 800bc5e:	4404      	add	r4, r0
 800bc60:	dc19      	bgt.n	800bc96 <_strtod_l+0x25e>
 800bc62:	9b07      	ldr	r3, [sp, #28]
 800bc64:	210a      	movs	r1, #10
 800bc66:	fb01 e303 	mla	r3, r1, r3, lr
 800bc6a:	9307      	str	r3, [sp, #28]
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc70:	1c58      	adds	r0, r3, #1
 800bc72:	901b      	str	r0, [sp, #108]	; 0x6c
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	4608      	mov	r0, r1
 800bc78:	e7c9      	b.n	800bc0e <_strtod_l+0x1d6>
 800bc7a:	9805      	ldr	r0, [sp, #20]
 800bc7c:	e7d3      	b.n	800bc26 <_strtod_l+0x1ee>
 800bc7e:	2908      	cmp	r1, #8
 800bc80:	f101 0101 	add.w	r1, r1, #1
 800bc84:	dc03      	bgt.n	800bc8e <_strtod_l+0x256>
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	437b      	muls	r3, r7
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	e7e1      	b.n	800bc52 <_strtod_l+0x21a>
 800bc8e:	2910      	cmp	r1, #16
 800bc90:	bfd8      	it	le
 800bc92:	437d      	mulle	r5, r7
 800bc94:	e7dd      	b.n	800bc52 <_strtod_l+0x21a>
 800bc96:	2c10      	cmp	r4, #16
 800bc98:	bfdc      	itt	le
 800bc9a:	210a      	movle	r1, #10
 800bc9c:	fb01 e505 	mlale	r5, r1, r5, lr
 800bca0:	e7e4      	b.n	800bc6c <_strtod_l+0x234>
 800bca2:	2301      	movs	r3, #1
 800bca4:	9304      	str	r3, [sp, #16]
 800bca6:	e781      	b.n	800bbac <_strtod_l+0x174>
 800bca8:	f04f 0c01 	mov.w	ip, #1
 800bcac:	1cb3      	adds	r3, r6, #2
 800bcae:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcb0:	78b3      	ldrb	r3, [r6, #2]
 800bcb2:	e78a      	b.n	800bbca <_strtod_l+0x192>
 800bcb4:	f04f 0c00 	mov.w	ip, #0
 800bcb8:	e7f8      	b.n	800bcac <_strtod_l+0x274>
 800bcba:	bf00      	nop
 800bcbc:	0800f178 	.word	0x0800f178
 800bcc0:	7ff00000 	.word	0x7ff00000
 800bcc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcc6:	1c5f      	adds	r7, r3, #1
 800bcc8:	971b      	str	r7, [sp, #108]	; 0x6c
 800bcca:	785b      	ldrb	r3, [r3, #1]
 800bccc:	2b30      	cmp	r3, #48	; 0x30
 800bcce:	d0f9      	beq.n	800bcc4 <_strtod_l+0x28c>
 800bcd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bcd4:	2f08      	cmp	r7, #8
 800bcd6:	f63f af7d 	bhi.w	800bbd4 <_strtod_l+0x19c>
 800bcda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bcde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bce0:	930a      	str	r3, [sp, #40]	; 0x28
 800bce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bce4:	1c5f      	adds	r7, r3, #1
 800bce6:	971b      	str	r7, [sp, #108]	; 0x6c
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bcee:	f1b8 0f09 	cmp.w	r8, #9
 800bcf2:	d937      	bls.n	800bd64 <_strtod_l+0x32c>
 800bcf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bcf6:	1a7f      	subs	r7, r7, r1
 800bcf8:	2f08      	cmp	r7, #8
 800bcfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bcfe:	dc37      	bgt.n	800bd70 <_strtod_l+0x338>
 800bd00:	45be      	cmp	lr, r7
 800bd02:	bfa8      	it	ge
 800bd04:	46be      	movge	lr, r7
 800bd06:	f1bc 0f00 	cmp.w	ip, #0
 800bd0a:	d001      	beq.n	800bd10 <_strtod_l+0x2d8>
 800bd0c:	f1ce 0e00 	rsb	lr, lr, #0
 800bd10:	2c00      	cmp	r4, #0
 800bd12:	d151      	bne.n	800bdb8 <_strtod_l+0x380>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f47f aece 	bne.w	800bab6 <_strtod_l+0x7e>
 800bd1a:	9a06      	ldr	r2, [sp, #24]
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	f47f aeca 	bne.w	800bab6 <_strtod_l+0x7e>
 800bd22:	9a04      	ldr	r2, [sp, #16]
 800bd24:	2a00      	cmp	r2, #0
 800bd26:	f47f aee4 	bne.w	800baf2 <_strtod_l+0xba>
 800bd2a:	2b4e      	cmp	r3, #78	; 0x4e
 800bd2c:	d027      	beq.n	800bd7e <_strtod_l+0x346>
 800bd2e:	dc21      	bgt.n	800bd74 <_strtod_l+0x33c>
 800bd30:	2b49      	cmp	r3, #73	; 0x49
 800bd32:	f47f aede 	bne.w	800baf2 <_strtod_l+0xba>
 800bd36:	49a0      	ldr	r1, [pc, #640]	; (800bfb8 <_strtod_l+0x580>)
 800bd38:	a81b      	add	r0, sp, #108	; 0x6c
 800bd3a:	f002 f811 	bl	800dd60 <__match>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f aed7 	beq.w	800baf2 <_strtod_l+0xba>
 800bd44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd46:	499d      	ldr	r1, [pc, #628]	; (800bfbc <_strtod_l+0x584>)
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	a81b      	add	r0, sp, #108	; 0x6c
 800bd4c:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd4e:	f002 f807 	bl	800dd60 <__match>
 800bd52:	b910      	cbnz	r0, 800bd5a <_strtod_l+0x322>
 800bd54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd56:	3301      	adds	r3, #1
 800bd58:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bfd0 <_strtod_l+0x598>
 800bd5e:	f04f 0a00 	mov.w	sl, #0
 800bd62:	e6a8      	b.n	800bab6 <_strtod_l+0x7e>
 800bd64:	210a      	movs	r1, #10
 800bd66:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bd6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bd6e:	e7b8      	b.n	800bce2 <_strtod_l+0x2aa>
 800bd70:	46be      	mov	lr, r7
 800bd72:	e7c8      	b.n	800bd06 <_strtod_l+0x2ce>
 800bd74:	2b69      	cmp	r3, #105	; 0x69
 800bd76:	d0de      	beq.n	800bd36 <_strtod_l+0x2fe>
 800bd78:	2b6e      	cmp	r3, #110	; 0x6e
 800bd7a:	f47f aeba 	bne.w	800baf2 <_strtod_l+0xba>
 800bd7e:	4990      	ldr	r1, [pc, #576]	; (800bfc0 <_strtod_l+0x588>)
 800bd80:	a81b      	add	r0, sp, #108	; 0x6c
 800bd82:	f001 ffed 	bl	800dd60 <__match>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f43f aeb3 	beq.w	800baf2 <_strtod_l+0xba>
 800bd8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b28      	cmp	r3, #40	; 0x28
 800bd92:	d10e      	bne.n	800bdb2 <_strtod_l+0x37a>
 800bd94:	aa1e      	add	r2, sp, #120	; 0x78
 800bd96:	498b      	ldr	r1, [pc, #556]	; (800bfc4 <_strtod_l+0x58c>)
 800bd98:	a81b      	add	r0, sp, #108	; 0x6c
 800bd9a:	f001 fff5 	bl	800dd88 <__hexnan>
 800bd9e:	2805      	cmp	r0, #5
 800bda0:	d107      	bne.n	800bdb2 <_strtod_l+0x37a>
 800bda2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bda4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bda8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bdac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bdb0:	e681      	b.n	800bab6 <_strtod_l+0x7e>
 800bdb2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bfd8 <_strtod_l+0x5a0>
 800bdb6:	e7d2      	b.n	800bd5e <_strtod_l+0x326>
 800bdb8:	ebae 0302 	sub.w	r3, lr, r2
 800bdbc:	9306      	str	r3, [sp, #24]
 800bdbe:	9b05      	ldr	r3, [sp, #20]
 800bdc0:	9807      	ldr	r0, [sp, #28]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bf08      	it	eq
 800bdc6:	4623      	moveq	r3, r4
 800bdc8:	2c10      	cmp	r4, #16
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	46a0      	mov	r8, r4
 800bdce:	bfa8      	it	ge
 800bdd0:	f04f 0810 	movge.w	r8, #16
 800bdd4:	f7f4 fb96 	bl	8000504 <__aeabi_ui2d>
 800bdd8:	2c09      	cmp	r4, #9
 800bdda:	4682      	mov	sl, r0
 800bddc:	468b      	mov	fp, r1
 800bdde:	dc13      	bgt.n	800be08 <_strtod_l+0x3d0>
 800bde0:	9b06      	ldr	r3, [sp, #24]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f43f ae67 	beq.w	800bab6 <_strtod_l+0x7e>
 800bde8:	9b06      	ldr	r3, [sp, #24]
 800bdea:	dd7a      	ble.n	800bee2 <_strtod_l+0x4aa>
 800bdec:	2b16      	cmp	r3, #22
 800bdee:	dc61      	bgt.n	800beb4 <_strtod_l+0x47c>
 800bdf0:	4a75      	ldr	r2, [pc, #468]	; (800bfc8 <_strtod_l+0x590>)
 800bdf2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bdf6:	e9de 0100 	ldrd	r0, r1, [lr]
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	465b      	mov	r3, fp
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	4682      	mov	sl, r0
 800be04:	468b      	mov	fp, r1
 800be06:	e656      	b.n	800bab6 <_strtod_l+0x7e>
 800be08:	4b6f      	ldr	r3, [pc, #444]	; (800bfc8 <_strtod_l+0x590>)
 800be0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be12:	f7f4 fbf1 	bl	80005f8 <__aeabi_dmul>
 800be16:	4606      	mov	r6, r0
 800be18:	4628      	mov	r0, r5
 800be1a:	460f      	mov	r7, r1
 800be1c:	f7f4 fb72 	bl	8000504 <__aeabi_ui2d>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fa30 	bl	800028c <__adddf3>
 800be2c:	2c0f      	cmp	r4, #15
 800be2e:	4682      	mov	sl, r0
 800be30:	468b      	mov	fp, r1
 800be32:	ddd5      	ble.n	800bde0 <_strtod_l+0x3a8>
 800be34:	9b06      	ldr	r3, [sp, #24]
 800be36:	eba4 0808 	sub.w	r8, r4, r8
 800be3a:	4498      	add	r8, r3
 800be3c:	f1b8 0f00 	cmp.w	r8, #0
 800be40:	f340 8096 	ble.w	800bf70 <_strtod_l+0x538>
 800be44:	f018 030f 	ands.w	r3, r8, #15
 800be48:	d00a      	beq.n	800be60 <_strtod_l+0x428>
 800be4a:	495f      	ldr	r1, [pc, #380]	; (800bfc8 <_strtod_l+0x590>)
 800be4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be50:	4652      	mov	r2, sl
 800be52:	465b      	mov	r3, fp
 800be54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	4682      	mov	sl, r0
 800be5e:	468b      	mov	fp, r1
 800be60:	f038 080f 	bics.w	r8, r8, #15
 800be64:	d073      	beq.n	800bf4e <_strtod_l+0x516>
 800be66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800be6a:	dd47      	ble.n	800befc <_strtod_l+0x4c4>
 800be6c:	2400      	movs	r4, #0
 800be6e:	46a0      	mov	r8, r4
 800be70:	9407      	str	r4, [sp, #28]
 800be72:	9405      	str	r4, [sp, #20]
 800be74:	2322      	movs	r3, #34	; 0x22
 800be76:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bfd0 <_strtod_l+0x598>
 800be7a:	f8c9 3000 	str.w	r3, [r9]
 800be7e:	f04f 0a00 	mov.w	sl, #0
 800be82:	9b07      	ldr	r3, [sp, #28]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f43f ae16 	beq.w	800bab6 <_strtod_l+0x7e>
 800be8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be8c:	4648      	mov	r0, r9
 800be8e:	f002 f8d1 	bl	800e034 <_Bfree>
 800be92:	9905      	ldr	r1, [sp, #20]
 800be94:	4648      	mov	r0, r9
 800be96:	f002 f8cd 	bl	800e034 <_Bfree>
 800be9a:	4641      	mov	r1, r8
 800be9c:	4648      	mov	r0, r9
 800be9e:	f002 f8c9 	bl	800e034 <_Bfree>
 800bea2:	9907      	ldr	r1, [sp, #28]
 800bea4:	4648      	mov	r0, r9
 800bea6:	f002 f8c5 	bl	800e034 <_Bfree>
 800beaa:	4621      	mov	r1, r4
 800beac:	4648      	mov	r0, r9
 800beae:	f002 f8c1 	bl	800e034 <_Bfree>
 800beb2:	e600      	b.n	800bab6 <_strtod_l+0x7e>
 800beb4:	9a06      	ldr	r2, [sp, #24]
 800beb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800beba:	4293      	cmp	r3, r2
 800bebc:	dbba      	blt.n	800be34 <_strtod_l+0x3fc>
 800bebe:	4d42      	ldr	r5, [pc, #264]	; (800bfc8 <_strtod_l+0x590>)
 800bec0:	f1c4 040f 	rsb	r4, r4, #15
 800bec4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bec8:	4652      	mov	r2, sl
 800beca:	465b      	mov	r3, fp
 800becc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed0:	f7f4 fb92 	bl	80005f8 <__aeabi_dmul>
 800bed4:	9b06      	ldr	r3, [sp, #24]
 800bed6:	1b1c      	subs	r4, r3, r4
 800bed8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bedc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bee0:	e78d      	b.n	800bdfe <_strtod_l+0x3c6>
 800bee2:	f113 0f16 	cmn.w	r3, #22
 800bee6:	dba5      	blt.n	800be34 <_strtod_l+0x3fc>
 800bee8:	4a37      	ldr	r2, [pc, #220]	; (800bfc8 <_strtod_l+0x590>)
 800beea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800beee:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bef2:	4650      	mov	r0, sl
 800bef4:	4659      	mov	r1, fp
 800bef6:	f7f4 fca9 	bl	800084c <__aeabi_ddiv>
 800befa:	e782      	b.n	800be02 <_strtod_l+0x3ca>
 800befc:	2300      	movs	r3, #0
 800befe:	4e33      	ldr	r6, [pc, #204]	; (800bfcc <_strtod_l+0x594>)
 800bf00:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf04:	4650      	mov	r0, sl
 800bf06:	4659      	mov	r1, fp
 800bf08:	461d      	mov	r5, r3
 800bf0a:	f1b8 0f01 	cmp.w	r8, #1
 800bf0e:	dc21      	bgt.n	800bf54 <_strtod_l+0x51c>
 800bf10:	b10b      	cbz	r3, 800bf16 <_strtod_l+0x4de>
 800bf12:	4682      	mov	sl, r0
 800bf14:	468b      	mov	fp, r1
 800bf16:	4b2d      	ldr	r3, [pc, #180]	; (800bfcc <_strtod_l+0x594>)
 800bf18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bf1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bf20:	4652      	mov	r2, sl
 800bf22:	465b      	mov	r3, fp
 800bf24:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	4b28      	ldr	r3, [pc, #160]	; (800bfd0 <_strtod_l+0x598>)
 800bf2e:	460a      	mov	r2, r1
 800bf30:	400b      	ands	r3, r1
 800bf32:	4928      	ldr	r1, [pc, #160]	; (800bfd4 <_strtod_l+0x59c>)
 800bf34:	428b      	cmp	r3, r1
 800bf36:	4682      	mov	sl, r0
 800bf38:	d898      	bhi.n	800be6c <_strtod_l+0x434>
 800bf3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf3e:	428b      	cmp	r3, r1
 800bf40:	bf86      	itte	hi
 800bf42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bfdc <_strtod_l+0x5a4>
 800bf46:	f04f 3aff 	movhi.w	sl, #4294967295
 800bf4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bf4e:	2300      	movs	r3, #0
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	e077      	b.n	800c044 <_strtod_l+0x60c>
 800bf54:	f018 0f01 	tst.w	r8, #1
 800bf58:	d006      	beq.n	800bf68 <_strtod_l+0x530>
 800bf5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf62:	f7f4 fb49 	bl	80005f8 <__aeabi_dmul>
 800bf66:	2301      	movs	r3, #1
 800bf68:	3501      	adds	r5, #1
 800bf6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf6e:	e7cc      	b.n	800bf0a <_strtod_l+0x4d2>
 800bf70:	d0ed      	beq.n	800bf4e <_strtod_l+0x516>
 800bf72:	f1c8 0800 	rsb	r8, r8, #0
 800bf76:	f018 020f 	ands.w	r2, r8, #15
 800bf7a:	d00a      	beq.n	800bf92 <_strtod_l+0x55a>
 800bf7c:	4b12      	ldr	r3, [pc, #72]	; (800bfc8 <_strtod_l+0x590>)
 800bf7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf82:	4650      	mov	r0, sl
 800bf84:	4659      	mov	r1, fp
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f7f4 fc5f 	bl	800084c <__aeabi_ddiv>
 800bf8e:	4682      	mov	sl, r0
 800bf90:	468b      	mov	fp, r1
 800bf92:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bf96:	d0da      	beq.n	800bf4e <_strtod_l+0x516>
 800bf98:	f1b8 0f1f 	cmp.w	r8, #31
 800bf9c:	dd20      	ble.n	800bfe0 <_strtod_l+0x5a8>
 800bf9e:	2400      	movs	r4, #0
 800bfa0:	46a0      	mov	r8, r4
 800bfa2:	9407      	str	r4, [sp, #28]
 800bfa4:	9405      	str	r4, [sp, #20]
 800bfa6:	2322      	movs	r3, #34	; 0x22
 800bfa8:	f04f 0a00 	mov.w	sl, #0
 800bfac:	f04f 0b00 	mov.w	fp, #0
 800bfb0:	f8c9 3000 	str.w	r3, [r9]
 800bfb4:	e765      	b.n	800be82 <_strtod_l+0x44a>
 800bfb6:	bf00      	nop
 800bfb8:	0800f141 	.word	0x0800f141
 800bfbc:	0800f1cb 	.word	0x0800f1cb
 800bfc0:	0800f149 	.word	0x0800f149
 800bfc4:	0800f18c 	.word	0x0800f18c
 800bfc8:	0800f270 	.word	0x0800f270
 800bfcc:	0800f248 	.word	0x0800f248
 800bfd0:	7ff00000 	.word	0x7ff00000
 800bfd4:	7ca00000 	.word	0x7ca00000
 800bfd8:	fff80000 	.word	0xfff80000
 800bfdc:	7fefffff 	.word	0x7fefffff
 800bfe0:	f018 0310 	ands.w	r3, r8, #16
 800bfe4:	bf18      	it	ne
 800bfe6:	236a      	movne	r3, #106	; 0x6a
 800bfe8:	4da0      	ldr	r5, [pc, #640]	; (800c26c <_strtod_l+0x834>)
 800bfea:	9304      	str	r3, [sp, #16]
 800bfec:	4650      	mov	r0, sl
 800bfee:	4659      	mov	r1, fp
 800bff0:	2300      	movs	r3, #0
 800bff2:	f1b8 0f00 	cmp.w	r8, #0
 800bff6:	f300 810a 	bgt.w	800c20e <_strtod_l+0x7d6>
 800bffa:	b10b      	cbz	r3, 800c000 <_strtod_l+0x5c8>
 800bffc:	4682      	mov	sl, r0
 800bffe:	468b      	mov	fp, r1
 800c000:	9b04      	ldr	r3, [sp, #16]
 800c002:	b1bb      	cbz	r3, 800c034 <_strtod_l+0x5fc>
 800c004:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	4659      	mov	r1, fp
 800c010:	dd10      	ble.n	800c034 <_strtod_l+0x5fc>
 800c012:	2b1f      	cmp	r3, #31
 800c014:	f340 8107 	ble.w	800c226 <_strtod_l+0x7ee>
 800c018:	2b34      	cmp	r3, #52	; 0x34
 800c01a:	bfde      	ittt	le
 800c01c:	3b20      	suble	r3, #32
 800c01e:	f04f 32ff 	movle.w	r2, #4294967295
 800c022:	fa02 f303 	lslle.w	r3, r2, r3
 800c026:	f04f 0a00 	mov.w	sl, #0
 800c02a:	bfcc      	ite	gt
 800c02c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c030:	ea03 0b01 	andle.w	fp, r3, r1
 800c034:	2200      	movs	r2, #0
 800c036:	2300      	movs	r3, #0
 800c038:	4650      	mov	r0, sl
 800c03a:	4659      	mov	r1, fp
 800c03c:	f7f4 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 800c040:	2800      	cmp	r0, #0
 800c042:	d1ac      	bne.n	800bf9e <_strtod_l+0x566>
 800c044:	9b07      	ldr	r3, [sp, #28]
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	9a05      	ldr	r2, [sp, #20]
 800c04a:	9908      	ldr	r1, [sp, #32]
 800c04c:	4623      	mov	r3, r4
 800c04e:	4648      	mov	r0, r9
 800c050:	f002 f842 	bl	800e0d8 <__s2b>
 800c054:	9007      	str	r0, [sp, #28]
 800c056:	2800      	cmp	r0, #0
 800c058:	f43f af08 	beq.w	800be6c <_strtod_l+0x434>
 800c05c:	9a06      	ldr	r2, [sp, #24]
 800c05e:	9b06      	ldr	r3, [sp, #24]
 800c060:	2a00      	cmp	r2, #0
 800c062:	f1c3 0300 	rsb	r3, r3, #0
 800c066:	bfa8      	it	ge
 800c068:	2300      	movge	r3, #0
 800c06a:	930e      	str	r3, [sp, #56]	; 0x38
 800c06c:	2400      	movs	r4, #0
 800c06e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c072:	9316      	str	r3, [sp, #88]	; 0x58
 800c074:	46a0      	mov	r8, r4
 800c076:	9b07      	ldr	r3, [sp, #28]
 800c078:	4648      	mov	r0, r9
 800c07a:	6859      	ldr	r1, [r3, #4]
 800c07c:	f001 ffa6 	bl	800dfcc <_Balloc>
 800c080:	9005      	str	r0, [sp, #20]
 800c082:	2800      	cmp	r0, #0
 800c084:	f43f aef6 	beq.w	800be74 <_strtod_l+0x43c>
 800c088:	9b07      	ldr	r3, [sp, #28]
 800c08a:	691a      	ldr	r2, [r3, #16]
 800c08c:	3202      	adds	r2, #2
 800c08e:	f103 010c 	add.w	r1, r3, #12
 800c092:	0092      	lsls	r2, r2, #2
 800c094:	300c      	adds	r0, #12
 800c096:	f7fe fdbd 	bl	800ac14 <memcpy>
 800c09a:	aa1e      	add	r2, sp, #120	; 0x78
 800c09c:	a91d      	add	r1, sp, #116	; 0x74
 800c09e:	ec4b ab10 	vmov	d0, sl, fp
 800c0a2:	4648      	mov	r0, r9
 800c0a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c0a8:	f002 fad2 	bl	800e650 <__d2b>
 800c0ac:	901c      	str	r0, [sp, #112]	; 0x70
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f43f aee0 	beq.w	800be74 <_strtod_l+0x43c>
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	4648      	mov	r0, r9
 800c0b8:	f002 f89a 	bl	800e1f0 <__i2b>
 800c0bc:	4680      	mov	r8, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f aed8 	beq.w	800be74 <_strtod_l+0x43c>
 800c0c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c0c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c0c8:	2e00      	cmp	r6, #0
 800c0ca:	bfab      	itete	ge
 800c0cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c0ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c0d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c0d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c0d4:	bfac      	ite	ge
 800c0d6:	18f7      	addge	r7, r6, r3
 800c0d8:	1b9d      	sublt	r5, r3, r6
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	1af6      	subs	r6, r6, r3
 800c0de:	4416      	add	r6, r2
 800c0e0:	4b63      	ldr	r3, [pc, #396]	; (800c270 <_strtod_l+0x838>)
 800c0e2:	3e01      	subs	r6, #1
 800c0e4:	429e      	cmp	r6, r3
 800c0e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c0ea:	f280 80af 	bge.w	800c24c <_strtod_l+0x814>
 800c0ee:	1b9b      	subs	r3, r3, r6
 800c0f0:	2b1f      	cmp	r3, #31
 800c0f2:	eba2 0203 	sub.w	r2, r2, r3
 800c0f6:	f04f 0101 	mov.w	r1, #1
 800c0fa:	f300 809b 	bgt.w	800c234 <_strtod_l+0x7fc>
 800c0fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c102:	930f      	str	r3, [sp, #60]	; 0x3c
 800c104:	2300      	movs	r3, #0
 800c106:	930a      	str	r3, [sp, #40]	; 0x28
 800c108:	18be      	adds	r6, r7, r2
 800c10a:	9b04      	ldr	r3, [sp, #16]
 800c10c:	42b7      	cmp	r7, r6
 800c10e:	4415      	add	r5, r2
 800c110:	441d      	add	r5, r3
 800c112:	463b      	mov	r3, r7
 800c114:	bfa8      	it	ge
 800c116:	4633      	movge	r3, r6
 800c118:	42ab      	cmp	r3, r5
 800c11a:	bfa8      	it	ge
 800c11c:	462b      	movge	r3, r5
 800c11e:	2b00      	cmp	r3, #0
 800c120:	bfc2      	ittt	gt
 800c122:	1af6      	subgt	r6, r6, r3
 800c124:	1aed      	subgt	r5, r5, r3
 800c126:	1aff      	subgt	r7, r7, r3
 800c128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c12a:	b1bb      	cbz	r3, 800c15c <_strtod_l+0x724>
 800c12c:	4641      	mov	r1, r8
 800c12e:	461a      	mov	r2, r3
 800c130:	4648      	mov	r0, r9
 800c132:	f002 f8fd 	bl	800e330 <__pow5mult>
 800c136:	4680      	mov	r8, r0
 800c138:	2800      	cmp	r0, #0
 800c13a:	f43f ae9b 	beq.w	800be74 <_strtod_l+0x43c>
 800c13e:	4601      	mov	r1, r0
 800c140:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c142:	4648      	mov	r0, r9
 800c144:	f002 f85d 	bl	800e202 <__multiply>
 800c148:	900c      	str	r0, [sp, #48]	; 0x30
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f43f ae92 	beq.w	800be74 <_strtod_l+0x43c>
 800c150:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c152:	4648      	mov	r0, r9
 800c154:	f001 ff6e 	bl	800e034 <_Bfree>
 800c158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c15a:	931c      	str	r3, [sp, #112]	; 0x70
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	dc7a      	bgt.n	800c256 <_strtod_l+0x81e>
 800c160:	9b06      	ldr	r3, [sp, #24]
 800c162:	2b00      	cmp	r3, #0
 800c164:	dd08      	ble.n	800c178 <_strtod_l+0x740>
 800c166:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c168:	9905      	ldr	r1, [sp, #20]
 800c16a:	4648      	mov	r0, r9
 800c16c:	f002 f8e0 	bl	800e330 <__pow5mult>
 800c170:	9005      	str	r0, [sp, #20]
 800c172:	2800      	cmp	r0, #0
 800c174:	f43f ae7e 	beq.w	800be74 <_strtod_l+0x43c>
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dd08      	ble.n	800c18e <_strtod_l+0x756>
 800c17c:	462a      	mov	r2, r5
 800c17e:	9905      	ldr	r1, [sp, #20]
 800c180:	4648      	mov	r0, r9
 800c182:	f002 f923 	bl	800e3cc <__lshift>
 800c186:	9005      	str	r0, [sp, #20]
 800c188:	2800      	cmp	r0, #0
 800c18a:	f43f ae73 	beq.w	800be74 <_strtod_l+0x43c>
 800c18e:	2f00      	cmp	r7, #0
 800c190:	dd08      	ble.n	800c1a4 <_strtod_l+0x76c>
 800c192:	4641      	mov	r1, r8
 800c194:	463a      	mov	r2, r7
 800c196:	4648      	mov	r0, r9
 800c198:	f002 f918 	bl	800e3cc <__lshift>
 800c19c:	4680      	mov	r8, r0
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f43f ae68 	beq.w	800be74 <_strtod_l+0x43c>
 800c1a4:	9a05      	ldr	r2, [sp, #20]
 800c1a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1a8:	4648      	mov	r0, r9
 800c1aa:	f002 f97d 	bl	800e4a8 <__mdiff>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	f43f ae5f 	beq.w	800be74 <_strtod_l+0x43c>
 800c1b6:	68c3      	ldr	r3, [r0, #12]
 800c1b8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60c3      	str	r3, [r0, #12]
 800c1be:	4641      	mov	r1, r8
 800c1c0:	f002 f958 	bl	800e474 <__mcmp>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	da55      	bge.n	800c274 <_strtod_l+0x83c>
 800c1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ca:	b9e3      	cbnz	r3, 800c206 <_strtod_l+0x7ce>
 800c1cc:	f1ba 0f00 	cmp.w	sl, #0
 800c1d0:	d119      	bne.n	800c206 <_strtod_l+0x7ce>
 800c1d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1d6:	b9b3      	cbnz	r3, 800c206 <_strtod_l+0x7ce>
 800c1d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1dc:	0d1b      	lsrs	r3, r3, #20
 800c1de:	051b      	lsls	r3, r3, #20
 800c1e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c1e4:	d90f      	bls.n	800c206 <_strtod_l+0x7ce>
 800c1e6:	6963      	ldr	r3, [r4, #20]
 800c1e8:	b913      	cbnz	r3, 800c1f0 <_strtod_l+0x7b8>
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	dd0a      	ble.n	800c206 <_strtod_l+0x7ce>
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	4648      	mov	r0, r9
 800c1f6:	f002 f8e9 	bl	800e3cc <__lshift>
 800c1fa:	4641      	mov	r1, r8
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	f002 f939 	bl	800e474 <__mcmp>
 800c202:	2800      	cmp	r0, #0
 800c204:	dc67      	bgt.n	800c2d6 <_strtod_l+0x89e>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d171      	bne.n	800c2f0 <_strtod_l+0x8b8>
 800c20c:	e63d      	b.n	800be8a <_strtod_l+0x452>
 800c20e:	f018 0f01 	tst.w	r8, #1
 800c212:	d004      	beq.n	800c21e <_strtod_l+0x7e6>
 800c214:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c218:	f7f4 f9ee 	bl	80005f8 <__aeabi_dmul>
 800c21c:	2301      	movs	r3, #1
 800c21e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c222:	3508      	adds	r5, #8
 800c224:	e6e5      	b.n	800bff2 <_strtod_l+0x5ba>
 800c226:	f04f 32ff 	mov.w	r2, #4294967295
 800c22a:	fa02 f303 	lsl.w	r3, r2, r3
 800c22e:	ea03 0a0a 	and.w	sl, r3, sl
 800c232:	e6ff      	b.n	800c034 <_strtod_l+0x5fc>
 800c234:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c238:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c23c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c240:	36e2      	adds	r6, #226	; 0xe2
 800c242:	fa01 f306 	lsl.w	r3, r1, r6
 800c246:	930a      	str	r3, [sp, #40]	; 0x28
 800c248:	910f      	str	r1, [sp, #60]	; 0x3c
 800c24a:	e75d      	b.n	800c108 <_strtod_l+0x6d0>
 800c24c:	2300      	movs	r3, #0
 800c24e:	930a      	str	r3, [sp, #40]	; 0x28
 800c250:	2301      	movs	r3, #1
 800c252:	930f      	str	r3, [sp, #60]	; 0x3c
 800c254:	e758      	b.n	800c108 <_strtod_l+0x6d0>
 800c256:	4632      	mov	r2, r6
 800c258:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c25a:	4648      	mov	r0, r9
 800c25c:	f002 f8b6 	bl	800e3cc <__lshift>
 800c260:	901c      	str	r0, [sp, #112]	; 0x70
 800c262:	2800      	cmp	r0, #0
 800c264:	f47f af7c 	bne.w	800c160 <_strtod_l+0x728>
 800c268:	e604      	b.n	800be74 <_strtod_l+0x43c>
 800c26a:	bf00      	nop
 800c26c:	0800f1a0 	.word	0x0800f1a0
 800c270:	fffffc02 	.word	0xfffffc02
 800c274:	465d      	mov	r5, fp
 800c276:	f040 8086 	bne.w	800c386 <_strtod_l+0x94e>
 800c27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c27c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c280:	b32a      	cbz	r2, 800c2ce <_strtod_l+0x896>
 800c282:	4aaf      	ldr	r2, [pc, #700]	; (800c540 <_strtod_l+0xb08>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d153      	bne.n	800c330 <_strtod_l+0x8f8>
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	4650      	mov	r0, sl
 800c28c:	b1d3      	cbz	r3, 800c2c4 <_strtod_l+0x88c>
 800c28e:	4aad      	ldr	r2, [pc, #692]	; (800c544 <_strtod_l+0xb0c>)
 800c290:	402a      	ands	r2, r5
 800c292:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c296:	f04f 31ff 	mov.w	r1, #4294967295
 800c29a:	d816      	bhi.n	800c2ca <_strtod_l+0x892>
 800c29c:	0d12      	lsrs	r2, r2, #20
 800c29e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c2a6:	4298      	cmp	r0, r3
 800c2a8:	d142      	bne.n	800c330 <_strtod_l+0x8f8>
 800c2aa:	4ba7      	ldr	r3, [pc, #668]	; (800c548 <_strtod_l+0xb10>)
 800c2ac:	429d      	cmp	r5, r3
 800c2ae:	d102      	bne.n	800c2b6 <_strtod_l+0x87e>
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	f43f addf 	beq.w	800be74 <_strtod_l+0x43c>
 800c2b6:	4ba3      	ldr	r3, [pc, #652]	; (800c544 <_strtod_l+0xb0c>)
 800c2b8:	402b      	ands	r3, r5
 800c2ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	e7a0      	b.n	800c206 <_strtod_l+0x7ce>
 800c2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c8:	e7ed      	b.n	800c2a6 <_strtod_l+0x86e>
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	e7eb      	b.n	800c2a6 <_strtod_l+0x86e>
 800c2ce:	bb7b      	cbnz	r3, 800c330 <_strtod_l+0x8f8>
 800c2d0:	f1ba 0f00 	cmp.w	sl, #0
 800c2d4:	d12c      	bne.n	800c330 <_strtod_l+0x8f8>
 800c2d6:	9904      	ldr	r1, [sp, #16]
 800c2d8:	4a9a      	ldr	r2, [pc, #616]	; (800c544 <_strtod_l+0xb0c>)
 800c2da:	465b      	mov	r3, fp
 800c2dc:	b1f1      	cbz	r1, 800c31c <_strtod_l+0x8e4>
 800c2de:	ea02 010b 	and.w	r1, r2, fp
 800c2e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c2e6:	dc19      	bgt.n	800c31c <_strtod_l+0x8e4>
 800c2e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c2ec:	f77f ae5b 	ble.w	800bfa6 <_strtod_l+0x56e>
 800c2f0:	4a96      	ldr	r2, [pc, #600]	; (800c54c <_strtod_l+0xb14>)
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c2f8:	4650      	mov	r0, sl
 800c2fa:	4659      	mov	r1, fp
 800c2fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c300:	f7f4 f97a 	bl	80005f8 <__aeabi_dmul>
 800c304:	4682      	mov	sl, r0
 800c306:	468b      	mov	fp, r1
 800c308:	2900      	cmp	r1, #0
 800c30a:	f47f adbe 	bne.w	800be8a <_strtod_l+0x452>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f47f adbb 	bne.w	800be8a <_strtod_l+0x452>
 800c314:	2322      	movs	r3, #34	; 0x22
 800c316:	f8c9 3000 	str.w	r3, [r9]
 800c31a:	e5b6      	b.n	800be8a <_strtod_l+0x452>
 800c31c:	4013      	ands	r3, r2
 800c31e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c322:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c326:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c32a:	f04f 3aff 	mov.w	sl, #4294967295
 800c32e:	e76a      	b.n	800c206 <_strtod_l+0x7ce>
 800c330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c332:	b193      	cbz	r3, 800c35a <_strtod_l+0x922>
 800c334:	422b      	tst	r3, r5
 800c336:	f43f af66 	beq.w	800c206 <_strtod_l+0x7ce>
 800c33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	4650      	mov	r0, sl
 800c340:	4659      	mov	r1, fp
 800c342:	b173      	cbz	r3, 800c362 <_strtod_l+0x92a>
 800c344:	f7ff fb5a 	bl	800b9fc <sulp>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c350:	f7f3 ff9c 	bl	800028c <__adddf3>
 800c354:	4682      	mov	sl, r0
 800c356:	468b      	mov	fp, r1
 800c358:	e755      	b.n	800c206 <_strtod_l+0x7ce>
 800c35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c35c:	ea13 0f0a 	tst.w	r3, sl
 800c360:	e7e9      	b.n	800c336 <_strtod_l+0x8fe>
 800c362:	f7ff fb4b 	bl	800b9fc <sulp>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c36e:	f7f3 ff8b 	bl	8000288 <__aeabi_dsub>
 800c372:	2200      	movs	r2, #0
 800c374:	2300      	movs	r3, #0
 800c376:	4682      	mov	sl, r0
 800c378:	468b      	mov	fp, r1
 800c37a:	f7f4 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f47f ae11 	bne.w	800bfa6 <_strtod_l+0x56e>
 800c384:	e73f      	b.n	800c206 <_strtod_l+0x7ce>
 800c386:	4641      	mov	r1, r8
 800c388:	4620      	mov	r0, r4
 800c38a:	f002 f9b0 	bl	800e6ee <__ratio>
 800c38e:	ec57 6b10 	vmov	r6, r7, d0
 800c392:	2200      	movs	r2, #0
 800c394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c398:	ee10 0a10 	vmov	r0, s0
 800c39c:	4639      	mov	r1, r7
 800c39e:	f7f4 fba7 	bl	8000af0 <__aeabi_dcmple>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d077      	beq.n	800c496 <_strtod_l+0xa5e>
 800c3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d04a      	beq.n	800c442 <_strtod_l+0xa0a>
 800c3ac:	4b68      	ldr	r3, [pc, #416]	; (800c550 <_strtod_l+0xb18>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c3b4:	4f66      	ldr	r7, [pc, #408]	; (800c550 <_strtod_l+0xb18>)
 800c3b6:	2600      	movs	r6, #0
 800c3b8:	4b62      	ldr	r3, [pc, #392]	; (800c544 <_strtod_l+0xb0c>)
 800c3ba:	402b      	ands	r3, r5
 800c3bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3c0:	4b64      	ldr	r3, [pc, #400]	; (800c554 <_strtod_l+0xb1c>)
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	f040 80ce 	bne.w	800c564 <_strtod_l+0xb2c>
 800c3c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c3cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c3d4:	ec4b ab10 	vmov	d0, sl, fp
 800c3d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c3dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c3e0:	f002 f8c0 	bl	800e564 <__ulp>
 800c3e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c3e8:	ec53 2b10 	vmov	r2, r3, d0
 800c3ec:	f7f4 f904 	bl	80005f8 <__aeabi_dmul>
 800c3f0:	4652      	mov	r2, sl
 800c3f2:	465b      	mov	r3, fp
 800c3f4:	f7f3 ff4a 	bl	800028c <__adddf3>
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4952      	ldr	r1, [pc, #328]	; (800c544 <_strtod_l+0xb0c>)
 800c3fc:	4a56      	ldr	r2, [pc, #344]	; (800c558 <_strtod_l+0xb20>)
 800c3fe:	4019      	ands	r1, r3
 800c400:	4291      	cmp	r1, r2
 800c402:	4682      	mov	sl, r0
 800c404:	d95b      	bls.n	800c4be <_strtod_l+0xa86>
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d103      	bne.n	800c418 <_strtod_l+0x9e0>
 800c410:	9b08      	ldr	r3, [sp, #32]
 800c412:	3301      	adds	r3, #1
 800c414:	f43f ad2e 	beq.w	800be74 <_strtod_l+0x43c>
 800c418:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c548 <_strtod_l+0xb10>
 800c41c:	f04f 3aff 	mov.w	sl, #4294967295
 800c420:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c422:	4648      	mov	r0, r9
 800c424:	f001 fe06 	bl	800e034 <_Bfree>
 800c428:	9905      	ldr	r1, [sp, #20]
 800c42a:	4648      	mov	r0, r9
 800c42c:	f001 fe02 	bl	800e034 <_Bfree>
 800c430:	4641      	mov	r1, r8
 800c432:	4648      	mov	r0, r9
 800c434:	f001 fdfe 	bl	800e034 <_Bfree>
 800c438:	4621      	mov	r1, r4
 800c43a:	4648      	mov	r0, r9
 800c43c:	f001 fdfa 	bl	800e034 <_Bfree>
 800c440:	e619      	b.n	800c076 <_strtod_l+0x63e>
 800c442:	f1ba 0f00 	cmp.w	sl, #0
 800c446:	d11a      	bne.n	800c47e <_strtod_l+0xa46>
 800c448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c44c:	b9eb      	cbnz	r3, 800c48a <_strtod_l+0xa52>
 800c44e:	2200      	movs	r2, #0
 800c450:	4b3f      	ldr	r3, [pc, #252]	; (800c550 <_strtod_l+0xb18>)
 800c452:	4630      	mov	r0, r6
 800c454:	4639      	mov	r1, r7
 800c456:	f7f4 fb41 	bl	8000adc <__aeabi_dcmplt>
 800c45a:	b9c8      	cbnz	r0, 800c490 <_strtod_l+0xa58>
 800c45c:	4630      	mov	r0, r6
 800c45e:	4639      	mov	r1, r7
 800c460:	2200      	movs	r2, #0
 800c462:	4b3e      	ldr	r3, [pc, #248]	; (800c55c <_strtod_l+0xb24>)
 800c464:	f7f4 f8c8 	bl	80005f8 <__aeabi_dmul>
 800c468:	4606      	mov	r6, r0
 800c46a:	460f      	mov	r7, r1
 800c46c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c470:	9618      	str	r6, [sp, #96]	; 0x60
 800c472:	9319      	str	r3, [sp, #100]	; 0x64
 800c474:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c478:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c47c:	e79c      	b.n	800c3b8 <_strtod_l+0x980>
 800c47e:	f1ba 0f01 	cmp.w	sl, #1
 800c482:	d102      	bne.n	800c48a <_strtod_l+0xa52>
 800c484:	2d00      	cmp	r5, #0
 800c486:	f43f ad8e 	beq.w	800bfa6 <_strtod_l+0x56e>
 800c48a:	2200      	movs	r2, #0
 800c48c:	4b34      	ldr	r3, [pc, #208]	; (800c560 <_strtod_l+0xb28>)
 800c48e:	e78f      	b.n	800c3b0 <_strtod_l+0x978>
 800c490:	2600      	movs	r6, #0
 800c492:	4f32      	ldr	r7, [pc, #200]	; (800c55c <_strtod_l+0xb24>)
 800c494:	e7ea      	b.n	800c46c <_strtod_l+0xa34>
 800c496:	4b31      	ldr	r3, [pc, #196]	; (800c55c <_strtod_l+0xb24>)
 800c498:	4630      	mov	r0, r6
 800c49a:	4639      	mov	r1, r7
 800c49c:	2200      	movs	r2, #0
 800c49e:	f7f4 f8ab 	bl	80005f8 <__aeabi_dmul>
 800c4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	460f      	mov	r7, r1
 800c4a8:	b933      	cbnz	r3, 800c4b8 <_strtod_l+0xa80>
 800c4aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4ae:	9010      	str	r0, [sp, #64]	; 0x40
 800c4b0:	9311      	str	r3, [sp, #68]	; 0x44
 800c4b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4b6:	e7df      	b.n	800c478 <_strtod_l+0xa40>
 800c4b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c4bc:	e7f9      	b.n	800c4b2 <_strtod_l+0xa7a>
 800c4be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c4c2:	9b04      	ldr	r3, [sp, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1ab      	bne.n	800c420 <_strtod_l+0x9e8>
 800c4c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4cc:	0d1b      	lsrs	r3, r3, #20
 800c4ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4d0:	051b      	lsls	r3, r3, #20
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	465d      	mov	r5, fp
 800c4d6:	d1a3      	bne.n	800c420 <_strtod_l+0x9e8>
 800c4d8:	4639      	mov	r1, r7
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f7f4 fb3c 	bl	8000b58 <__aeabi_d2iz>
 800c4e0:	f7f4 f820 	bl	8000524 <__aeabi_i2d>
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7f3 fecc 	bl	8000288 <__aeabi_dsub>
 800c4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460f      	mov	r7, r1
 800c4f6:	b933      	cbnz	r3, 800c506 <_strtod_l+0xace>
 800c4f8:	f1ba 0f00 	cmp.w	sl, #0
 800c4fc:	d103      	bne.n	800c506 <_strtod_l+0xace>
 800c4fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c502:	2d00      	cmp	r5, #0
 800c504:	d06d      	beq.n	800c5e2 <_strtod_l+0xbaa>
 800c506:	a30a      	add	r3, pc, #40	; (adr r3, 800c530 <_strtod_l+0xaf8>)
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	4630      	mov	r0, r6
 800c50e:	4639      	mov	r1, r7
 800c510:	f7f4 fae4 	bl	8000adc <__aeabi_dcmplt>
 800c514:	2800      	cmp	r0, #0
 800c516:	f47f acb8 	bne.w	800be8a <_strtod_l+0x452>
 800c51a:	a307      	add	r3, pc, #28	; (adr r3, 800c538 <_strtod_l+0xb00>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	f7f4 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 800c528:	2800      	cmp	r0, #0
 800c52a:	f43f af79 	beq.w	800c420 <_strtod_l+0x9e8>
 800c52e:	e4ac      	b.n	800be8a <_strtod_l+0x452>
 800c530:	94a03595 	.word	0x94a03595
 800c534:	3fdfffff 	.word	0x3fdfffff
 800c538:	35afe535 	.word	0x35afe535
 800c53c:	3fe00000 	.word	0x3fe00000
 800c540:	000fffff 	.word	0x000fffff
 800c544:	7ff00000 	.word	0x7ff00000
 800c548:	7fefffff 	.word	0x7fefffff
 800c54c:	39500000 	.word	0x39500000
 800c550:	3ff00000 	.word	0x3ff00000
 800c554:	7fe00000 	.word	0x7fe00000
 800c558:	7c9fffff 	.word	0x7c9fffff
 800c55c:	3fe00000 	.word	0x3fe00000
 800c560:	bff00000 	.word	0xbff00000
 800c564:	9b04      	ldr	r3, [sp, #16]
 800c566:	b333      	cbz	r3, 800c5b6 <_strtod_l+0xb7e>
 800c568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c56a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c56e:	d822      	bhi.n	800c5b6 <_strtod_l+0xb7e>
 800c570:	a327      	add	r3, pc, #156	; (adr r3, 800c610 <_strtod_l+0xbd8>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	4630      	mov	r0, r6
 800c578:	4639      	mov	r1, r7
 800c57a:	f7f4 fab9 	bl	8000af0 <__aeabi_dcmple>
 800c57e:	b1a0      	cbz	r0, 800c5aa <_strtod_l+0xb72>
 800c580:	4639      	mov	r1, r7
 800c582:	4630      	mov	r0, r6
 800c584:	f7f4 fb10 	bl	8000ba8 <__aeabi_d2uiz>
 800c588:	2800      	cmp	r0, #0
 800c58a:	bf08      	it	eq
 800c58c:	2001      	moveq	r0, #1
 800c58e:	f7f3 ffb9 	bl	8000504 <__aeabi_ui2d>
 800c592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	bb03      	cbnz	r3, 800c5dc <_strtod_l+0xba4>
 800c59a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c59e:	9012      	str	r0, [sp, #72]	; 0x48
 800c5a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c5a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c5a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c5b2:	1a9b      	subs	r3, r3, r2
 800c5b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c5ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c5be:	f001 ffd1 	bl	800e564 <__ulp>
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	ec53 2b10 	vmov	r2, r3, d0
 800c5c8:	4659      	mov	r1, fp
 800c5ca:	f7f4 f815 	bl	80005f8 <__aeabi_dmul>
 800c5ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5d2:	f7f3 fe5b 	bl	800028c <__adddf3>
 800c5d6:	4682      	mov	sl, r0
 800c5d8:	468b      	mov	fp, r1
 800c5da:	e772      	b.n	800c4c2 <_strtod_l+0xa8a>
 800c5dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c5e0:	e7df      	b.n	800c5a2 <_strtod_l+0xb6a>
 800c5e2:	a30d      	add	r3, pc, #52	; (adr r3, 800c618 <_strtod_l+0xbe0>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7f4 fa78 	bl	8000adc <__aeabi_dcmplt>
 800c5ec:	e79c      	b.n	800c528 <_strtod_l+0xaf0>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	930d      	str	r3, [sp, #52]	; 0x34
 800c5f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	f7ff ba61 	b.w	800babe <_strtod_l+0x86>
 800c5fc:	2b65      	cmp	r3, #101	; 0x65
 800c5fe:	f04f 0200 	mov.w	r2, #0
 800c602:	f43f ab4e 	beq.w	800bca2 <_strtod_l+0x26a>
 800c606:	2101      	movs	r1, #1
 800c608:	4614      	mov	r4, r2
 800c60a:	9104      	str	r1, [sp, #16]
 800c60c:	f7ff bacb 	b.w	800bba6 <_strtod_l+0x16e>
 800c610:	ffc00000 	.word	0xffc00000
 800c614:	41dfffff 	.word	0x41dfffff
 800c618:	94a03595 	.word	0x94a03595
 800c61c:	3fcfffff 	.word	0x3fcfffff

0800c620 <_strtod_r>:
 800c620:	4b05      	ldr	r3, [pc, #20]	; (800c638 <_strtod_r+0x18>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	b410      	push	{r4}
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	4c04      	ldr	r4, [pc, #16]	; (800c63c <_strtod_r+0x1c>)
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	bf08      	it	eq
 800c62e:	4623      	moveq	r3, r4
 800c630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c634:	f7ff ba00 	b.w	800ba38 <_strtod_l>
 800c638:	20000040 	.word	0x20000040
 800c63c:	200000a4 	.word	0x200000a4

0800c640 <_strtol_l.isra.0>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	4692      	mov	sl, r2
 800c64a:	461e      	mov	r6, r3
 800c64c:	460f      	mov	r7, r1
 800c64e:	463d      	mov	r5, r7
 800c650:	9808      	ldr	r0, [sp, #32]
 800c652:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c656:	f001 fc27 	bl	800dea8 <__locale_ctype_ptr_l>
 800c65a:	4420      	add	r0, r4
 800c65c:	7843      	ldrb	r3, [r0, #1]
 800c65e:	f013 0308 	ands.w	r3, r3, #8
 800c662:	d132      	bne.n	800c6ca <_strtol_l.isra.0+0x8a>
 800c664:	2c2d      	cmp	r4, #45	; 0x2d
 800c666:	d132      	bne.n	800c6ce <_strtol_l.isra.0+0x8e>
 800c668:	787c      	ldrb	r4, [r7, #1]
 800c66a:	1cbd      	adds	r5, r7, #2
 800c66c:	2201      	movs	r2, #1
 800c66e:	2e00      	cmp	r6, #0
 800c670:	d05d      	beq.n	800c72e <_strtol_l.isra.0+0xee>
 800c672:	2e10      	cmp	r6, #16
 800c674:	d109      	bne.n	800c68a <_strtol_l.isra.0+0x4a>
 800c676:	2c30      	cmp	r4, #48	; 0x30
 800c678:	d107      	bne.n	800c68a <_strtol_l.isra.0+0x4a>
 800c67a:	782b      	ldrb	r3, [r5, #0]
 800c67c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c680:	2b58      	cmp	r3, #88	; 0x58
 800c682:	d14f      	bne.n	800c724 <_strtol_l.isra.0+0xe4>
 800c684:	786c      	ldrb	r4, [r5, #1]
 800c686:	2610      	movs	r6, #16
 800c688:	3502      	adds	r5, #2
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	bf14      	ite	ne
 800c68e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c692:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c696:	2700      	movs	r7, #0
 800c698:	fbb1 fcf6 	udiv	ip, r1, r6
 800c69c:	4638      	mov	r0, r7
 800c69e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c6a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c6a6:	2b09      	cmp	r3, #9
 800c6a8:	d817      	bhi.n	800c6da <_strtol_l.isra.0+0x9a>
 800c6aa:	461c      	mov	r4, r3
 800c6ac:	42a6      	cmp	r6, r4
 800c6ae:	dd23      	ble.n	800c6f8 <_strtol_l.isra.0+0xb8>
 800c6b0:	1c7b      	adds	r3, r7, #1
 800c6b2:	d007      	beq.n	800c6c4 <_strtol_l.isra.0+0x84>
 800c6b4:	4584      	cmp	ip, r0
 800c6b6:	d31c      	bcc.n	800c6f2 <_strtol_l.isra.0+0xb2>
 800c6b8:	d101      	bne.n	800c6be <_strtol_l.isra.0+0x7e>
 800c6ba:	45a6      	cmp	lr, r4
 800c6bc:	db19      	blt.n	800c6f2 <_strtol_l.isra.0+0xb2>
 800c6be:	fb00 4006 	mla	r0, r0, r6, r4
 800c6c2:	2701      	movs	r7, #1
 800c6c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6c8:	e7eb      	b.n	800c6a2 <_strtol_l.isra.0+0x62>
 800c6ca:	462f      	mov	r7, r5
 800c6cc:	e7bf      	b.n	800c64e <_strtol_l.isra.0+0xe>
 800c6ce:	2c2b      	cmp	r4, #43	; 0x2b
 800c6d0:	bf04      	itt	eq
 800c6d2:	1cbd      	addeq	r5, r7, #2
 800c6d4:	787c      	ldrbeq	r4, [r7, #1]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	e7c9      	b.n	800c66e <_strtol_l.isra.0+0x2e>
 800c6da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c6de:	2b19      	cmp	r3, #25
 800c6e0:	d801      	bhi.n	800c6e6 <_strtol_l.isra.0+0xa6>
 800c6e2:	3c37      	subs	r4, #55	; 0x37
 800c6e4:	e7e2      	b.n	800c6ac <_strtol_l.isra.0+0x6c>
 800c6e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c6ea:	2b19      	cmp	r3, #25
 800c6ec:	d804      	bhi.n	800c6f8 <_strtol_l.isra.0+0xb8>
 800c6ee:	3c57      	subs	r4, #87	; 0x57
 800c6f0:	e7dc      	b.n	800c6ac <_strtol_l.isra.0+0x6c>
 800c6f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c6f6:	e7e5      	b.n	800c6c4 <_strtol_l.isra.0+0x84>
 800c6f8:	1c7b      	adds	r3, r7, #1
 800c6fa:	d108      	bne.n	800c70e <_strtol_l.isra.0+0xce>
 800c6fc:	2322      	movs	r3, #34	; 0x22
 800c6fe:	f8c8 3000 	str.w	r3, [r8]
 800c702:	4608      	mov	r0, r1
 800c704:	f1ba 0f00 	cmp.w	sl, #0
 800c708:	d107      	bne.n	800c71a <_strtol_l.isra.0+0xda>
 800c70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c70e:	b102      	cbz	r2, 800c712 <_strtol_l.isra.0+0xd2>
 800c710:	4240      	negs	r0, r0
 800c712:	f1ba 0f00 	cmp.w	sl, #0
 800c716:	d0f8      	beq.n	800c70a <_strtol_l.isra.0+0xca>
 800c718:	b10f      	cbz	r7, 800c71e <_strtol_l.isra.0+0xde>
 800c71a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c71e:	f8ca 9000 	str.w	r9, [sl]
 800c722:	e7f2      	b.n	800c70a <_strtol_l.isra.0+0xca>
 800c724:	2430      	movs	r4, #48	; 0x30
 800c726:	2e00      	cmp	r6, #0
 800c728:	d1af      	bne.n	800c68a <_strtol_l.isra.0+0x4a>
 800c72a:	2608      	movs	r6, #8
 800c72c:	e7ad      	b.n	800c68a <_strtol_l.isra.0+0x4a>
 800c72e:	2c30      	cmp	r4, #48	; 0x30
 800c730:	d0a3      	beq.n	800c67a <_strtol_l.isra.0+0x3a>
 800c732:	260a      	movs	r6, #10
 800c734:	e7a9      	b.n	800c68a <_strtol_l.isra.0+0x4a>
	...

0800c738 <_strtol_r>:
 800c738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c73a:	4c06      	ldr	r4, [pc, #24]	; (800c754 <_strtol_r+0x1c>)
 800c73c:	4d06      	ldr	r5, [pc, #24]	; (800c758 <_strtol_r+0x20>)
 800c73e:	6824      	ldr	r4, [r4, #0]
 800c740:	6a24      	ldr	r4, [r4, #32]
 800c742:	2c00      	cmp	r4, #0
 800c744:	bf08      	it	eq
 800c746:	462c      	moveq	r4, r5
 800c748:	9400      	str	r4, [sp, #0]
 800c74a:	f7ff ff79 	bl	800c640 <_strtol_l.isra.0>
 800c74e:	b003      	add	sp, #12
 800c750:	bd30      	pop	{r4, r5, pc}
 800c752:	bf00      	nop
 800c754:	20000040 	.word	0x20000040
 800c758:	200000a4 	.word	0x200000a4

0800c75c <__swbuf_r>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	460e      	mov	r6, r1
 800c760:	4614      	mov	r4, r2
 800c762:	4605      	mov	r5, r0
 800c764:	b118      	cbz	r0, 800c76e <__swbuf_r+0x12>
 800c766:	6983      	ldr	r3, [r0, #24]
 800c768:	b90b      	cbnz	r3, 800c76e <__swbuf_r+0x12>
 800c76a:	f000 ffed 	bl	800d748 <__sinit>
 800c76e:	4b21      	ldr	r3, [pc, #132]	; (800c7f4 <__swbuf_r+0x98>)
 800c770:	429c      	cmp	r4, r3
 800c772:	d12a      	bne.n	800c7ca <__swbuf_r+0x6e>
 800c774:	686c      	ldr	r4, [r5, #4]
 800c776:	69a3      	ldr	r3, [r4, #24]
 800c778:	60a3      	str	r3, [r4, #8]
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	071a      	lsls	r2, r3, #28
 800c77e:	d52e      	bpl.n	800c7de <__swbuf_r+0x82>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	b363      	cbz	r3, 800c7de <__swbuf_r+0x82>
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	6820      	ldr	r0, [r4, #0]
 800c788:	1ac0      	subs	r0, r0, r3
 800c78a:	6963      	ldr	r3, [r4, #20]
 800c78c:	b2f6      	uxtb	r6, r6
 800c78e:	4283      	cmp	r3, r0
 800c790:	4637      	mov	r7, r6
 800c792:	dc04      	bgt.n	800c79e <__swbuf_r+0x42>
 800c794:	4621      	mov	r1, r4
 800c796:	4628      	mov	r0, r5
 800c798:	f000 ff6c 	bl	800d674 <_fflush_r>
 800c79c:	bb28      	cbnz	r0, 800c7ea <__swbuf_r+0x8e>
 800c79e:	68a3      	ldr	r3, [r4, #8]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	60a3      	str	r3, [r4, #8]
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	6022      	str	r2, [r4, #0]
 800c7aa:	701e      	strb	r6, [r3, #0]
 800c7ac:	6963      	ldr	r3, [r4, #20]
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	4283      	cmp	r3, r0
 800c7b2:	d004      	beq.n	800c7be <__swbuf_r+0x62>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	07db      	lsls	r3, r3, #31
 800c7b8:	d519      	bpl.n	800c7ee <__swbuf_r+0x92>
 800c7ba:	2e0a      	cmp	r6, #10
 800c7bc:	d117      	bne.n	800c7ee <__swbuf_r+0x92>
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	f000 ff57 	bl	800d674 <_fflush_r>
 800c7c6:	b190      	cbz	r0, 800c7ee <__swbuf_r+0x92>
 800c7c8:	e00f      	b.n	800c7ea <__swbuf_r+0x8e>
 800c7ca:	4b0b      	ldr	r3, [pc, #44]	; (800c7f8 <__swbuf_r+0x9c>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	d101      	bne.n	800c7d4 <__swbuf_r+0x78>
 800c7d0:	68ac      	ldr	r4, [r5, #8]
 800c7d2:	e7d0      	b.n	800c776 <__swbuf_r+0x1a>
 800c7d4:	4b09      	ldr	r3, [pc, #36]	; (800c7fc <__swbuf_r+0xa0>)
 800c7d6:	429c      	cmp	r4, r3
 800c7d8:	bf08      	it	eq
 800c7da:	68ec      	ldreq	r4, [r5, #12]
 800c7dc:	e7cb      	b.n	800c776 <__swbuf_r+0x1a>
 800c7de:	4621      	mov	r1, r4
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f000 f80d 	bl	800c800 <__swsetup_r>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0cc      	beq.n	800c784 <__swbuf_r+0x28>
 800c7ea:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	0800f1f8 	.word	0x0800f1f8
 800c7f8:	0800f218 	.word	0x0800f218
 800c7fc:	0800f1d8 	.word	0x0800f1d8

0800c800 <__swsetup_r>:
 800c800:	4b32      	ldr	r3, [pc, #200]	; (800c8cc <__swsetup_r+0xcc>)
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	681d      	ldr	r5, [r3, #0]
 800c806:	4606      	mov	r6, r0
 800c808:	460c      	mov	r4, r1
 800c80a:	b125      	cbz	r5, 800c816 <__swsetup_r+0x16>
 800c80c:	69ab      	ldr	r3, [r5, #24]
 800c80e:	b913      	cbnz	r3, 800c816 <__swsetup_r+0x16>
 800c810:	4628      	mov	r0, r5
 800c812:	f000 ff99 	bl	800d748 <__sinit>
 800c816:	4b2e      	ldr	r3, [pc, #184]	; (800c8d0 <__swsetup_r+0xd0>)
 800c818:	429c      	cmp	r4, r3
 800c81a:	d10f      	bne.n	800c83c <__swsetup_r+0x3c>
 800c81c:	686c      	ldr	r4, [r5, #4]
 800c81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c822:	b29a      	uxth	r2, r3
 800c824:	0715      	lsls	r5, r2, #28
 800c826:	d42c      	bmi.n	800c882 <__swsetup_r+0x82>
 800c828:	06d0      	lsls	r0, r2, #27
 800c82a:	d411      	bmi.n	800c850 <__swsetup_r+0x50>
 800c82c:	2209      	movs	r2, #9
 800c82e:	6032      	str	r2, [r6, #0]
 800c830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c834:	81a3      	strh	r3, [r4, #12]
 800c836:	f04f 30ff 	mov.w	r0, #4294967295
 800c83a:	e03e      	b.n	800c8ba <__swsetup_r+0xba>
 800c83c:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <__swsetup_r+0xd4>)
 800c83e:	429c      	cmp	r4, r3
 800c840:	d101      	bne.n	800c846 <__swsetup_r+0x46>
 800c842:	68ac      	ldr	r4, [r5, #8]
 800c844:	e7eb      	b.n	800c81e <__swsetup_r+0x1e>
 800c846:	4b24      	ldr	r3, [pc, #144]	; (800c8d8 <__swsetup_r+0xd8>)
 800c848:	429c      	cmp	r4, r3
 800c84a:	bf08      	it	eq
 800c84c:	68ec      	ldreq	r4, [r5, #12]
 800c84e:	e7e6      	b.n	800c81e <__swsetup_r+0x1e>
 800c850:	0751      	lsls	r1, r2, #29
 800c852:	d512      	bpl.n	800c87a <__swsetup_r+0x7a>
 800c854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c856:	b141      	cbz	r1, 800c86a <__swsetup_r+0x6a>
 800c858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c85c:	4299      	cmp	r1, r3
 800c85e:	d002      	beq.n	800c866 <__swsetup_r+0x66>
 800c860:	4630      	mov	r0, r6
 800c862:	f001 ffc1 	bl	800e7e8 <_free_r>
 800c866:	2300      	movs	r3, #0
 800c868:	6363      	str	r3, [r4, #52]	; 0x34
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c870:	81a3      	strh	r3, [r4, #12]
 800c872:	2300      	movs	r3, #0
 800c874:	6063      	str	r3, [r4, #4]
 800c876:	6923      	ldr	r3, [r4, #16]
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f043 0308 	orr.w	r3, r3, #8
 800c880:	81a3      	strh	r3, [r4, #12]
 800c882:	6923      	ldr	r3, [r4, #16]
 800c884:	b94b      	cbnz	r3, 800c89a <__swsetup_r+0x9a>
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c890:	d003      	beq.n	800c89a <__swsetup_r+0x9a>
 800c892:	4621      	mov	r1, r4
 800c894:	4630      	mov	r0, r6
 800c896:	f001 fb3f 	bl	800df18 <__smakebuf_r>
 800c89a:	89a2      	ldrh	r2, [r4, #12]
 800c89c:	f012 0301 	ands.w	r3, r2, #1
 800c8a0:	d00c      	beq.n	800c8bc <__swsetup_r+0xbc>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60a3      	str	r3, [r4, #8]
 800c8a6:	6963      	ldr	r3, [r4, #20]
 800c8a8:	425b      	negs	r3, r3
 800c8aa:	61a3      	str	r3, [r4, #24]
 800c8ac:	6923      	ldr	r3, [r4, #16]
 800c8ae:	b953      	cbnz	r3, 800c8c6 <__swsetup_r+0xc6>
 800c8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c8b8:	d1ba      	bne.n	800c830 <__swsetup_r+0x30>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	0792      	lsls	r2, r2, #30
 800c8be:	bf58      	it	pl
 800c8c0:	6963      	ldrpl	r3, [r4, #20]
 800c8c2:	60a3      	str	r3, [r4, #8]
 800c8c4:	e7f2      	b.n	800c8ac <__swsetup_r+0xac>
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e7f7      	b.n	800c8ba <__swsetup_r+0xba>
 800c8ca:	bf00      	nop
 800c8cc:	20000040 	.word	0x20000040
 800c8d0:	0800f1f8 	.word	0x0800f1f8
 800c8d4:	0800f218 	.word	0x0800f218
 800c8d8:	0800f1d8 	.word	0x0800f1d8

0800c8dc <quorem>:
 800c8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e0:	6903      	ldr	r3, [r0, #16]
 800c8e2:	690c      	ldr	r4, [r1, #16]
 800c8e4:	42a3      	cmp	r3, r4
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	f2c0 8082 	blt.w	800c9f0 <quorem+0x114>
 800c8ec:	3c01      	subs	r4, #1
 800c8ee:	f101 0714 	add.w	r7, r1, #20
 800c8f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c8f6:	f100 0614 	add.w	r6, r0, #20
 800c8fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c8fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c902:	eb06 030c 	add.w	r3, r6, ip
 800c906:	3501      	adds	r5, #1
 800c908:	eb07 090c 	add.w	r9, r7, ip
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c912:	b395      	cbz	r5, 800c97a <quorem+0x9e>
 800c914:	f04f 0a00 	mov.w	sl, #0
 800c918:	4638      	mov	r0, r7
 800c91a:	46b6      	mov	lr, r6
 800c91c:	46d3      	mov	fp, sl
 800c91e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c922:	b293      	uxth	r3, r2
 800c924:	fb05 a303 	mla	r3, r5, r3, sl
 800c928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	ebab 0303 	sub.w	r3, fp, r3
 800c932:	0c12      	lsrs	r2, r2, #16
 800c934:	f8de b000 	ldr.w	fp, [lr]
 800c938:	fb05 a202 	mla	r2, r5, r2, sl
 800c93c:	fa13 f38b 	uxtah	r3, r3, fp
 800c940:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c944:	fa1f fb82 	uxth.w	fp, r2
 800c948:	f8de 2000 	ldr.w	r2, [lr]
 800c94c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c954:	b29b      	uxth	r3, r3
 800c956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c95a:	4581      	cmp	r9, r0
 800c95c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c960:	f84e 3b04 	str.w	r3, [lr], #4
 800c964:	d2db      	bcs.n	800c91e <quorem+0x42>
 800c966:	f856 300c 	ldr.w	r3, [r6, ip]
 800c96a:	b933      	cbnz	r3, 800c97a <quorem+0x9e>
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	3b04      	subs	r3, #4
 800c970:	429e      	cmp	r6, r3
 800c972:	461a      	mov	r2, r3
 800c974:	d330      	bcc.n	800c9d8 <quorem+0xfc>
 800c976:	f8c8 4010 	str.w	r4, [r8, #16]
 800c97a:	4640      	mov	r0, r8
 800c97c:	f001 fd7a 	bl	800e474 <__mcmp>
 800c980:	2800      	cmp	r0, #0
 800c982:	db25      	blt.n	800c9d0 <quorem+0xf4>
 800c984:	3501      	adds	r5, #1
 800c986:	4630      	mov	r0, r6
 800c988:	f04f 0c00 	mov.w	ip, #0
 800c98c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c990:	f8d0 e000 	ldr.w	lr, [r0]
 800c994:	b293      	uxth	r3, r2
 800c996:	ebac 0303 	sub.w	r3, ip, r3
 800c99a:	0c12      	lsrs	r2, r2, #16
 800c99c:	fa13 f38e 	uxtah	r3, r3, lr
 800c9a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c9a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ae:	45b9      	cmp	r9, r7
 800c9b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c9b4:	f840 3b04 	str.w	r3, [r0], #4
 800c9b8:	d2e8      	bcs.n	800c98c <quorem+0xb0>
 800c9ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c9be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c9c2:	b92a      	cbnz	r2, 800c9d0 <quorem+0xf4>
 800c9c4:	3b04      	subs	r3, #4
 800c9c6:	429e      	cmp	r6, r3
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	d30b      	bcc.n	800c9e4 <quorem+0x108>
 800c9cc:	f8c8 4010 	str.w	r4, [r8, #16]
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	b003      	add	sp, #12
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	6812      	ldr	r2, [r2, #0]
 800c9da:	3b04      	subs	r3, #4
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	d1ca      	bne.n	800c976 <quorem+0x9a>
 800c9e0:	3c01      	subs	r4, #1
 800c9e2:	e7c5      	b.n	800c970 <quorem+0x94>
 800c9e4:	6812      	ldr	r2, [r2, #0]
 800c9e6:	3b04      	subs	r3, #4
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	d1ef      	bne.n	800c9cc <quorem+0xf0>
 800c9ec:	3c01      	subs	r4, #1
 800c9ee:	e7ea      	b.n	800c9c6 <quorem+0xea>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	e7ee      	b.n	800c9d2 <quorem+0xf6>
 800c9f4:	0000      	movs	r0, r0
	...

0800c9f8 <_dtoa_r>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	ec57 6b10 	vmov	r6, r7, d0
 800ca00:	b097      	sub	sp, #92	; 0x5c
 800ca02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca04:	9106      	str	r1, [sp, #24]
 800ca06:	4604      	mov	r4, r0
 800ca08:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca0a:	9312      	str	r3, [sp, #72]	; 0x48
 800ca0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca10:	e9cd 6700 	strd	r6, r7, [sp]
 800ca14:	b93d      	cbnz	r5, 800ca26 <_dtoa_r+0x2e>
 800ca16:	2010      	movs	r0, #16
 800ca18:	f001 fabe 	bl	800df98 <malloc>
 800ca1c:	6260      	str	r0, [r4, #36]	; 0x24
 800ca1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca22:	6005      	str	r5, [r0, #0]
 800ca24:	60c5      	str	r5, [r0, #12]
 800ca26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca28:	6819      	ldr	r1, [r3, #0]
 800ca2a:	b151      	cbz	r1, 800ca42 <_dtoa_r+0x4a>
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	604a      	str	r2, [r1, #4]
 800ca30:	2301      	movs	r3, #1
 800ca32:	4093      	lsls	r3, r2
 800ca34:	608b      	str	r3, [r1, #8]
 800ca36:	4620      	mov	r0, r4
 800ca38:	f001 fafc 	bl	800e034 <_Bfree>
 800ca3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	1e3b      	subs	r3, r7, #0
 800ca44:	bfbb      	ittet	lt
 800ca46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca4a:	9301      	strlt	r3, [sp, #4]
 800ca4c:	2300      	movge	r3, #0
 800ca4e:	2201      	movlt	r2, #1
 800ca50:	bfac      	ite	ge
 800ca52:	f8c8 3000 	strge.w	r3, [r8]
 800ca56:	f8c8 2000 	strlt.w	r2, [r8]
 800ca5a:	4baf      	ldr	r3, [pc, #700]	; (800cd18 <_dtoa_r+0x320>)
 800ca5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca60:	ea33 0308 	bics.w	r3, r3, r8
 800ca64:	d114      	bne.n	800ca90 <_dtoa_r+0x98>
 800ca66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca68:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	9b00      	ldr	r3, [sp, #0]
 800ca70:	b923      	cbnz	r3, 800ca7c <_dtoa_r+0x84>
 800ca72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f000 8542 	beq.w	800d500 <_dtoa_r+0xb08>
 800ca7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cd2c <_dtoa_r+0x334>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 8544 	beq.w	800d510 <_dtoa_r+0xb18>
 800ca88:	f10b 0303 	add.w	r3, fp, #3
 800ca8c:	f000 bd3e 	b.w	800d50c <_dtoa_r+0xb14>
 800ca90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca94:	2200      	movs	r2, #0
 800ca96:	2300      	movs	r3, #0
 800ca98:	4630      	mov	r0, r6
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	f7f4 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 800caa0:	4681      	mov	r9, r0
 800caa2:	b168      	cbz	r0, 800cac0 <_dtoa_r+0xc8>
 800caa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800caa6:	2301      	movs	r3, #1
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 8524 	beq.w	800d4fa <_dtoa_r+0xb02>
 800cab2:	4b9a      	ldr	r3, [pc, #616]	; (800cd1c <_dtoa_r+0x324>)
 800cab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cab6:	f103 3bff 	add.w	fp, r3, #4294967295
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	f000 bd28 	b.w	800d510 <_dtoa_r+0xb18>
 800cac0:	aa14      	add	r2, sp, #80	; 0x50
 800cac2:	a915      	add	r1, sp, #84	; 0x54
 800cac4:	ec47 6b10 	vmov	d0, r6, r7
 800cac8:	4620      	mov	r0, r4
 800caca:	f001 fdc1 	bl	800e650 <__d2b>
 800cace:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cad2:	9004      	str	r0, [sp, #16]
 800cad4:	2d00      	cmp	r5, #0
 800cad6:	d07c      	beq.n	800cbd2 <_dtoa_r+0x1da>
 800cad8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cadc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cae0:	46b2      	mov	sl, r6
 800cae2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800caea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800caee:	2200      	movs	r2, #0
 800caf0:	4b8b      	ldr	r3, [pc, #556]	; (800cd20 <_dtoa_r+0x328>)
 800caf2:	4650      	mov	r0, sl
 800caf4:	4659      	mov	r1, fp
 800caf6:	f7f3 fbc7 	bl	8000288 <__aeabi_dsub>
 800cafa:	a381      	add	r3, pc, #516	; (adr r3, 800cd00 <_dtoa_r+0x308>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fd7a 	bl	80005f8 <__aeabi_dmul>
 800cb04:	a380      	add	r3, pc, #512	; (adr r3, 800cd08 <_dtoa_r+0x310>)
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	f7f3 fbbf 	bl	800028c <__adddf3>
 800cb0e:	4606      	mov	r6, r0
 800cb10:	4628      	mov	r0, r5
 800cb12:	460f      	mov	r7, r1
 800cb14:	f7f3 fd06 	bl	8000524 <__aeabi_i2d>
 800cb18:	a37d      	add	r3, pc, #500	; (adr r3, 800cd10 <_dtoa_r+0x318>)
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f7f3 fd6b 	bl	80005f8 <__aeabi_dmul>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 fbaf 	bl	800028c <__adddf3>
 800cb2e:	4606      	mov	r6, r0
 800cb30:	460f      	mov	r7, r1
 800cb32:	f7f4 f811 	bl	8000b58 <__aeabi_d2iz>
 800cb36:	2200      	movs	r2, #0
 800cb38:	4682      	mov	sl, r0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4639      	mov	r1, r7
 800cb40:	f7f3 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800cb44:	b148      	cbz	r0, 800cb5a <_dtoa_r+0x162>
 800cb46:	4650      	mov	r0, sl
 800cb48:	f7f3 fcec 	bl	8000524 <__aeabi_i2d>
 800cb4c:	4632      	mov	r2, r6
 800cb4e:	463b      	mov	r3, r7
 800cb50:	f7f3 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb54:	b908      	cbnz	r0, 800cb5a <_dtoa_r+0x162>
 800cb56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb5a:	f1ba 0f16 	cmp.w	sl, #22
 800cb5e:	d859      	bhi.n	800cc14 <_dtoa_r+0x21c>
 800cb60:	4970      	ldr	r1, [pc, #448]	; (800cd24 <_dtoa_r+0x32c>)
 800cb62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb6e:	f7f3 ffd3 	bl	8000b18 <__aeabi_dcmpgt>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d050      	beq.n	800cc18 <_dtoa_r+0x220>
 800cb76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb80:	1b5d      	subs	r5, r3, r5
 800cb82:	f1b5 0801 	subs.w	r8, r5, #1
 800cb86:	bf49      	itett	mi
 800cb88:	f1c5 0301 	rsbmi	r3, r5, #1
 800cb8c:	2300      	movpl	r3, #0
 800cb8e:	9305      	strmi	r3, [sp, #20]
 800cb90:	f04f 0800 	movmi.w	r8, #0
 800cb94:	bf58      	it	pl
 800cb96:	9305      	strpl	r3, [sp, #20]
 800cb98:	f1ba 0f00 	cmp.w	sl, #0
 800cb9c:	db3e      	blt.n	800cc1c <_dtoa_r+0x224>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	44d0      	add	r8, sl
 800cba2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cba6:	9307      	str	r3, [sp, #28]
 800cba8:	9b06      	ldr	r3, [sp, #24]
 800cbaa:	2b09      	cmp	r3, #9
 800cbac:	f200 8090 	bhi.w	800ccd0 <_dtoa_r+0x2d8>
 800cbb0:	2b05      	cmp	r3, #5
 800cbb2:	bfc4      	itt	gt
 800cbb4:	3b04      	subgt	r3, #4
 800cbb6:	9306      	strgt	r3, [sp, #24]
 800cbb8:	9b06      	ldr	r3, [sp, #24]
 800cbba:	f1a3 0302 	sub.w	r3, r3, #2
 800cbbe:	bfcc      	ite	gt
 800cbc0:	2500      	movgt	r5, #0
 800cbc2:	2501      	movle	r5, #1
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	f200 808f 	bhi.w	800cce8 <_dtoa_r+0x2f0>
 800cbca:	e8df f003 	tbb	[pc, r3]
 800cbce:	7f7d      	.short	0x7f7d
 800cbd0:	7131      	.short	0x7131
 800cbd2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cbd6:	441d      	add	r5, r3
 800cbd8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cbdc:	2820      	cmp	r0, #32
 800cbde:	dd13      	ble.n	800cc08 <_dtoa_r+0x210>
 800cbe0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cbe4:	9b00      	ldr	r3, [sp, #0]
 800cbe6:	fa08 f800 	lsl.w	r8, r8, r0
 800cbea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cbee:	fa23 f000 	lsr.w	r0, r3, r0
 800cbf2:	ea48 0000 	orr.w	r0, r8, r0
 800cbf6:	f7f3 fc85 	bl	8000504 <__aeabi_ui2d>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4682      	mov	sl, r0
 800cbfe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cc02:	3d01      	subs	r5, #1
 800cc04:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc06:	e772      	b.n	800caee <_dtoa_r+0xf6>
 800cc08:	9b00      	ldr	r3, [sp, #0]
 800cc0a:	f1c0 0020 	rsb	r0, r0, #32
 800cc0e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc12:	e7f0      	b.n	800cbf6 <_dtoa_r+0x1fe>
 800cc14:	2301      	movs	r3, #1
 800cc16:	e7b1      	b.n	800cb7c <_dtoa_r+0x184>
 800cc18:	900f      	str	r0, [sp, #60]	; 0x3c
 800cc1a:	e7b0      	b.n	800cb7e <_dtoa_r+0x186>
 800cc1c:	9b05      	ldr	r3, [sp, #20]
 800cc1e:	eba3 030a 	sub.w	r3, r3, sl
 800cc22:	9305      	str	r3, [sp, #20]
 800cc24:	f1ca 0300 	rsb	r3, sl, #0
 800cc28:	9307      	str	r3, [sp, #28]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	930e      	str	r3, [sp, #56]	; 0x38
 800cc2e:	e7bb      	b.n	800cba8 <_dtoa_r+0x1b0>
 800cc30:	2301      	movs	r3, #1
 800cc32:	930a      	str	r3, [sp, #40]	; 0x28
 800cc34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dd59      	ble.n	800ccee <_dtoa_r+0x2f6>
 800cc3a:	9302      	str	r3, [sp, #8]
 800cc3c:	4699      	mov	r9, r3
 800cc3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc40:	2200      	movs	r2, #0
 800cc42:	6072      	str	r2, [r6, #4]
 800cc44:	2204      	movs	r2, #4
 800cc46:	f102 0014 	add.w	r0, r2, #20
 800cc4a:	4298      	cmp	r0, r3
 800cc4c:	6871      	ldr	r1, [r6, #4]
 800cc4e:	d953      	bls.n	800ccf8 <_dtoa_r+0x300>
 800cc50:	4620      	mov	r0, r4
 800cc52:	f001 f9bb 	bl	800dfcc <_Balloc>
 800cc56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc58:	6030      	str	r0, [r6, #0]
 800cc5a:	f1b9 0f0e 	cmp.w	r9, #14
 800cc5e:	f8d3 b000 	ldr.w	fp, [r3]
 800cc62:	f200 80e6 	bhi.w	800ce32 <_dtoa_r+0x43a>
 800cc66:	2d00      	cmp	r5, #0
 800cc68:	f000 80e3 	beq.w	800ce32 <_dtoa_r+0x43a>
 800cc6c:	ed9d 7b00 	vldr	d7, [sp]
 800cc70:	f1ba 0f00 	cmp.w	sl, #0
 800cc74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cc78:	dd74      	ble.n	800cd64 <_dtoa_r+0x36c>
 800cc7a:	4a2a      	ldr	r2, [pc, #168]	; (800cd24 <_dtoa_r+0x32c>)
 800cc7c:	f00a 030f 	and.w	r3, sl, #15
 800cc80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc84:	ed93 7b00 	vldr	d7, [r3]
 800cc88:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cc8c:	06f0      	lsls	r0, r6, #27
 800cc8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cc92:	d565      	bpl.n	800cd60 <_dtoa_r+0x368>
 800cc94:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <_dtoa_r+0x330>)
 800cc96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc9e:	f7f3 fdd5 	bl	800084c <__aeabi_ddiv>
 800cca2:	e9cd 0100 	strd	r0, r1, [sp]
 800cca6:	f006 060f 	and.w	r6, r6, #15
 800ccaa:	2503      	movs	r5, #3
 800ccac:	4f1e      	ldr	r7, [pc, #120]	; (800cd28 <_dtoa_r+0x330>)
 800ccae:	e04c      	b.n	800cd4a <_dtoa_r+0x352>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ccb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccb6:	4453      	add	r3, sl
 800ccb8:	f103 0901 	add.w	r9, r3, #1
 800ccbc:	9302      	str	r3, [sp, #8]
 800ccbe:	464b      	mov	r3, r9
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	bfb8      	it	lt
 800ccc4:	2301      	movlt	r3, #1
 800ccc6:	e7ba      	b.n	800cc3e <_dtoa_r+0x246>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e7b2      	b.n	800cc32 <_dtoa_r+0x23a>
 800cccc:	2300      	movs	r3, #0
 800ccce:	e7f0      	b.n	800ccb2 <_dtoa_r+0x2ba>
 800ccd0:	2501      	movs	r5, #1
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9306      	str	r3, [sp, #24]
 800ccd6:	950a      	str	r5, [sp, #40]	; 0x28
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	9302      	str	r3, [sp, #8]
 800ccde:	4699      	mov	r9, r3
 800cce0:	2200      	movs	r2, #0
 800cce2:	2312      	movs	r3, #18
 800cce4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cce6:	e7aa      	b.n	800cc3e <_dtoa_r+0x246>
 800cce8:	2301      	movs	r3, #1
 800ccea:	930a      	str	r3, [sp, #40]	; 0x28
 800ccec:	e7f4      	b.n	800ccd8 <_dtoa_r+0x2e0>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	9302      	str	r3, [sp, #8]
 800ccf2:	4699      	mov	r9, r3
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	e7f5      	b.n	800cce4 <_dtoa_r+0x2ec>
 800ccf8:	3101      	adds	r1, #1
 800ccfa:	6071      	str	r1, [r6, #4]
 800ccfc:	0052      	lsls	r2, r2, #1
 800ccfe:	e7a2      	b.n	800cc46 <_dtoa_r+0x24e>
 800cd00:	636f4361 	.word	0x636f4361
 800cd04:	3fd287a7 	.word	0x3fd287a7
 800cd08:	8b60c8b3 	.word	0x8b60c8b3
 800cd0c:	3fc68a28 	.word	0x3fc68a28
 800cd10:	509f79fb 	.word	0x509f79fb
 800cd14:	3fd34413 	.word	0x3fd34413
 800cd18:	7ff00000 	.word	0x7ff00000
 800cd1c:	0800f14d 	.word	0x0800f14d
 800cd20:	3ff80000 	.word	0x3ff80000
 800cd24:	0800f270 	.word	0x0800f270
 800cd28:	0800f248 	.word	0x0800f248
 800cd2c:	0800f1d1 	.word	0x0800f1d1
 800cd30:	07f1      	lsls	r1, r6, #31
 800cd32:	d508      	bpl.n	800cd46 <_dtoa_r+0x34e>
 800cd34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd3c:	f7f3 fc5c 	bl	80005f8 <__aeabi_dmul>
 800cd40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd44:	3501      	adds	r5, #1
 800cd46:	1076      	asrs	r6, r6, #1
 800cd48:	3708      	adds	r7, #8
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	d1f0      	bne.n	800cd30 <_dtoa_r+0x338>
 800cd4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd56:	f7f3 fd79 	bl	800084c <__aeabi_ddiv>
 800cd5a:	e9cd 0100 	strd	r0, r1, [sp]
 800cd5e:	e01a      	b.n	800cd96 <_dtoa_r+0x39e>
 800cd60:	2502      	movs	r5, #2
 800cd62:	e7a3      	b.n	800ccac <_dtoa_r+0x2b4>
 800cd64:	f000 80a0 	beq.w	800cea8 <_dtoa_r+0x4b0>
 800cd68:	f1ca 0600 	rsb	r6, sl, #0
 800cd6c:	4b9f      	ldr	r3, [pc, #636]	; (800cfec <_dtoa_r+0x5f4>)
 800cd6e:	4fa0      	ldr	r7, [pc, #640]	; (800cff0 <_dtoa_r+0x5f8>)
 800cd70:	f006 020f 	and.w	r2, r6, #15
 800cd74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd80:	f7f3 fc3a 	bl	80005f8 <__aeabi_dmul>
 800cd84:	e9cd 0100 	strd	r0, r1, [sp]
 800cd88:	1136      	asrs	r6, r6, #4
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	2502      	movs	r5, #2
 800cd8e:	2e00      	cmp	r6, #0
 800cd90:	d17f      	bne.n	800ce92 <_dtoa_r+0x49a>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e1      	bne.n	800cd5a <_dtoa_r+0x362>
 800cd96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 8087 	beq.w	800ceac <_dtoa_r+0x4b4>
 800cd9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cda2:	2200      	movs	r2, #0
 800cda4:	4b93      	ldr	r3, [pc, #588]	; (800cff4 <_dtoa_r+0x5fc>)
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fe97 	bl	8000adc <__aeabi_dcmplt>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d07c      	beq.n	800ceac <_dtoa_r+0x4b4>
 800cdb2:	f1b9 0f00 	cmp.w	r9, #0
 800cdb6:	d079      	beq.n	800ceac <_dtoa_r+0x4b4>
 800cdb8:	9b02      	ldr	r3, [sp, #8]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	dd35      	ble.n	800ce2a <_dtoa_r+0x432>
 800cdbe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cdc2:	9308      	str	r3, [sp, #32]
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	4b8b      	ldr	r3, [pc, #556]	; (800cff8 <_dtoa_r+0x600>)
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7f3 fc14 	bl	80005f8 <__aeabi_dmul>
 800cdd0:	e9cd 0100 	strd	r0, r1, [sp]
 800cdd4:	9f02      	ldr	r7, [sp, #8]
 800cdd6:	3501      	adds	r5, #1
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f7f3 fba3 	bl	8000524 <__aeabi_i2d>
 800cdde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cde2:	f7f3 fc09 	bl	80005f8 <__aeabi_dmul>
 800cde6:	2200      	movs	r2, #0
 800cde8:	4b84      	ldr	r3, [pc, #528]	; (800cffc <_dtoa_r+0x604>)
 800cdea:	f7f3 fa4f 	bl	800028c <__adddf3>
 800cdee:	4605      	mov	r5, r0
 800cdf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cdf4:	2f00      	cmp	r7, #0
 800cdf6:	d15d      	bne.n	800ceb4 <_dtoa_r+0x4bc>
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4b81      	ldr	r3, [pc, #516]	; (800d000 <_dtoa_r+0x608>)
 800cdfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce00:	f7f3 fa42 	bl	8000288 <__aeabi_dsub>
 800ce04:	462a      	mov	r2, r5
 800ce06:	4633      	mov	r3, r6
 800ce08:	e9cd 0100 	strd	r0, r1, [sp]
 800ce0c:	f7f3 fe84 	bl	8000b18 <__aeabi_dcmpgt>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	f040 8288 	bne.w	800d326 <_dtoa_r+0x92e>
 800ce16:	462a      	mov	r2, r5
 800ce18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ce1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce20:	f7f3 fe5c 	bl	8000adc <__aeabi_dcmplt>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	f040 827c 	bne.w	800d322 <_dtoa_r+0x92a>
 800ce2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ce32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f2c0 8150 	blt.w	800d0da <_dtoa_r+0x6e2>
 800ce3a:	f1ba 0f0e 	cmp.w	sl, #14
 800ce3e:	f300 814c 	bgt.w	800d0da <_dtoa_r+0x6e2>
 800ce42:	4b6a      	ldr	r3, [pc, #424]	; (800cfec <_dtoa_r+0x5f4>)
 800ce44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ce48:	ed93 7b00 	vldr	d7, [r3]
 800ce4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce54:	f280 80d8 	bge.w	800d008 <_dtoa_r+0x610>
 800ce58:	f1b9 0f00 	cmp.w	r9, #0
 800ce5c:	f300 80d4 	bgt.w	800d008 <_dtoa_r+0x610>
 800ce60:	f040 825e 	bne.w	800d320 <_dtoa_r+0x928>
 800ce64:	2200      	movs	r2, #0
 800ce66:	4b66      	ldr	r3, [pc, #408]	; (800d000 <_dtoa_r+0x608>)
 800ce68:	ec51 0b17 	vmov	r0, r1, d7
 800ce6c:	f7f3 fbc4 	bl	80005f8 <__aeabi_dmul>
 800ce70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce74:	f7f3 fe46 	bl	8000b04 <__aeabi_dcmpge>
 800ce78:	464f      	mov	r7, r9
 800ce7a:	464e      	mov	r6, r9
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	f040 8234 	bne.w	800d2ea <_dtoa_r+0x8f2>
 800ce82:	2331      	movs	r3, #49	; 0x31
 800ce84:	f10b 0501 	add.w	r5, fp, #1
 800ce88:	f88b 3000 	strb.w	r3, [fp]
 800ce8c:	f10a 0a01 	add.w	sl, sl, #1
 800ce90:	e22f      	b.n	800d2f2 <_dtoa_r+0x8fa>
 800ce92:	07f2      	lsls	r2, r6, #31
 800ce94:	d505      	bpl.n	800cea2 <_dtoa_r+0x4aa>
 800ce96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9a:	f7f3 fbad 	bl	80005f8 <__aeabi_dmul>
 800ce9e:	3501      	adds	r5, #1
 800cea0:	2301      	movs	r3, #1
 800cea2:	1076      	asrs	r6, r6, #1
 800cea4:	3708      	adds	r7, #8
 800cea6:	e772      	b.n	800cd8e <_dtoa_r+0x396>
 800cea8:	2502      	movs	r5, #2
 800ceaa:	e774      	b.n	800cd96 <_dtoa_r+0x39e>
 800ceac:	f8cd a020 	str.w	sl, [sp, #32]
 800ceb0:	464f      	mov	r7, r9
 800ceb2:	e791      	b.n	800cdd8 <_dtoa_r+0x3e0>
 800ceb4:	4b4d      	ldr	r3, [pc, #308]	; (800cfec <_dtoa_r+0x5f4>)
 800ceb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ceba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d047      	beq.n	800cf54 <_dtoa_r+0x55c>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	2000      	movs	r0, #0
 800ceca:	494e      	ldr	r1, [pc, #312]	; (800d004 <_dtoa_r+0x60c>)
 800cecc:	f7f3 fcbe 	bl	800084c <__aeabi_ddiv>
 800ced0:	462a      	mov	r2, r5
 800ced2:	4633      	mov	r3, r6
 800ced4:	f7f3 f9d8 	bl	8000288 <__aeabi_dsub>
 800ced8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cedc:	465d      	mov	r5, fp
 800cede:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cee2:	f7f3 fe39 	bl	8000b58 <__aeabi_d2iz>
 800cee6:	4606      	mov	r6, r0
 800cee8:	f7f3 fb1c 	bl	8000524 <__aeabi_i2d>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef4:	f7f3 f9c8 	bl	8000288 <__aeabi_dsub>
 800cef8:	3630      	adds	r6, #48	; 0x30
 800cefa:	f805 6b01 	strb.w	r6, [r5], #1
 800cefe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf02:	e9cd 0100 	strd	r0, r1, [sp]
 800cf06:	f7f3 fde9 	bl	8000adc <__aeabi_dcmplt>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d163      	bne.n	800cfd6 <_dtoa_r+0x5de>
 800cf0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf12:	2000      	movs	r0, #0
 800cf14:	4937      	ldr	r1, [pc, #220]	; (800cff4 <_dtoa_r+0x5fc>)
 800cf16:	f7f3 f9b7 	bl	8000288 <__aeabi_dsub>
 800cf1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf1e:	f7f3 fddd 	bl	8000adc <__aeabi_dcmplt>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	f040 80b7 	bne.w	800d096 <_dtoa_r+0x69e>
 800cf28:	eba5 030b 	sub.w	r3, r5, fp
 800cf2c:	429f      	cmp	r7, r3
 800cf2e:	f77f af7c 	ble.w	800ce2a <_dtoa_r+0x432>
 800cf32:	2200      	movs	r2, #0
 800cf34:	4b30      	ldr	r3, [pc, #192]	; (800cff8 <_dtoa_r+0x600>)
 800cf36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf3a:	f7f3 fb5d 	bl	80005f8 <__aeabi_dmul>
 800cf3e:	2200      	movs	r2, #0
 800cf40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cf44:	4b2c      	ldr	r3, [pc, #176]	; (800cff8 <_dtoa_r+0x600>)
 800cf46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	e9cd 0100 	strd	r0, r1, [sp]
 800cf52:	e7c4      	b.n	800cede <_dtoa_r+0x4e6>
 800cf54:	462a      	mov	r2, r5
 800cf56:	4633      	mov	r3, r6
 800cf58:	f7f3 fb4e 	bl	80005f8 <__aeabi_dmul>
 800cf5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cf60:	eb0b 0507 	add.w	r5, fp, r7
 800cf64:	465e      	mov	r6, fp
 800cf66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf6a:	f7f3 fdf5 	bl	8000b58 <__aeabi_d2iz>
 800cf6e:	4607      	mov	r7, r0
 800cf70:	f7f3 fad8 	bl	8000524 <__aeabi_i2d>
 800cf74:	3730      	adds	r7, #48	; 0x30
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf7e:	f7f3 f983 	bl	8000288 <__aeabi_dsub>
 800cf82:	f806 7b01 	strb.w	r7, [r6], #1
 800cf86:	42ae      	cmp	r6, r5
 800cf88:	e9cd 0100 	strd	r0, r1, [sp]
 800cf8c:	f04f 0200 	mov.w	r2, #0
 800cf90:	d126      	bne.n	800cfe0 <_dtoa_r+0x5e8>
 800cf92:	4b1c      	ldr	r3, [pc, #112]	; (800d004 <_dtoa_r+0x60c>)
 800cf94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf98:	f7f3 f978 	bl	800028c <__adddf3>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfa4:	f7f3 fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d174      	bne.n	800d096 <_dtoa_r+0x69e>
 800cfac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	4914      	ldr	r1, [pc, #80]	; (800d004 <_dtoa_r+0x60c>)
 800cfb4:	f7f3 f968 	bl	8000288 <__aeabi_dsub>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfc0:	f7f3 fd8c 	bl	8000adc <__aeabi_dcmplt>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f43f af30 	beq.w	800ce2a <_dtoa_r+0x432>
 800cfca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfce:	2b30      	cmp	r3, #48	; 0x30
 800cfd0:	f105 32ff 	add.w	r2, r5, #4294967295
 800cfd4:	d002      	beq.n	800cfdc <_dtoa_r+0x5e4>
 800cfd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cfda:	e04a      	b.n	800d072 <_dtoa_r+0x67a>
 800cfdc:	4615      	mov	r5, r2
 800cfde:	e7f4      	b.n	800cfca <_dtoa_r+0x5d2>
 800cfe0:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <_dtoa_r+0x600>)
 800cfe2:	f7f3 fb09 	bl	80005f8 <__aeabi_dmul>
 800cfe6:	e9cd 0100 	strd	r0, r1, [sp]
 800cfea:	e7bc      	b.n	800cf66 <_dtoa_r+0x56e>
 800cfec:	0800f270 	.word	0x0800f270
 800cff0:	0800f248 	.word	0x0800f248
 800cff4:	3ff00000 	.word	0x3ff00000
 800cff8:	40240000 	.word	0x40240000
 800cffc:	401c0000 	.word	0x401c0000
 800d000:	40140000 	.word	0x40140000
 800d004:	3fe00000 	.word	0x3fe00000
 800d008:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d00c:	465d      	mov	r5, fp
 800d00e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d012:	4630      	mov	r0, r6
 800d014:	4639      	mov	r1, r7
 800d016:	f7f3 fc19 	bl	800084c <__aeabi_ddiv>
 800d01a:	f7f3 fd9d 	bl	8000b58 <__aeabi_d2iz>
 800d01e:	4680      	mov	r8, r0
 800d020:	f7f3 fa80 	bl	8000524 <__aeabi_i2d>
 800d024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d028:	f7f3 fae6 	bl	80005f8 <__aeabi_dmul>
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	4630      	mov	r0, r6
 800d032:	4639      	mov	r1, r7
 800d034:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d038:	f7f3 f926 	bl	8000288 <__aeabi_dsub>
 800d03c:	f805 6b01 	strb.w	r6, [r5], #1
 800d040:	eba5 060b 	sub.w	r6, r5, fp
 800d044:	45b1      	cmp	r9, r6
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	d139      	bne.n	800d0c0 <_dtoa_r+0x6c8>
 800d04c:	f7f3 f91e 	bl	800028c <__adddf3>
 800d050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d054:	4606      	mov	r6, r0
 800d056:	460f      	mov	r7, r1
 800d058:	f7f3 fd5e 	bl	8000b18 <__aeabi_dcmpgt>
 800d05c:	b9c8      	cbnz	r0, 800d092 <_dtoa_r+0x69a>
 800d05e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d062:	4630      	mov	r0, r6
 800d064:	4639      	mov	r1, r7
 800d066:	f7f3 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d06a:	b110      	cbz	r0, 800d072 <_dtoa_r+0x67a>
 800d06c:	f018 0f01 	tst.w	r8, #1
 800d070:	d10f      	bne.n	800d092 <_dtoa_r+0x69a>
 800d072:	9904      	ldr	r1, [sp, #16]
 800d074:	4620      	mov	r0, r4
 800d076:	f000 ffdd 	bl	800e034 <_Bfree>
 800d07a:	2300      	movs	r3, #0
 800d07c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d07e:	702b      	strb	r3, [r5, #0]
 800d080:	f10a 0301 	add.w	r3, sl, #1
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 8241 	beq.w	800d510 <_dtoa_r+0xb18>
 800d08e:	601d      	str	r5, [r3, #0]
 800d090:	e23e      	b.n	800d510 <_dtoa_r+0xb18>
 800d092:	f8cd a020 	str.w	sl, [sp, #32]
 800d096:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d09a:	2a39      	cmp	r2, #57	; 0x39
 800d09c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d0a0:	d108      	bne.n	800d0b4 <_dtoa_r+0x6bc>
 800d0a2:	459b      	cmp	fp, r3
 800d0a4:	d10a      	bne.n	800d0bc <_dtoa_r+0x6c4>
 800d0a6:	9b08      	ldr	r3, [sp, #32]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	9308      	str	r3, [sp, #32]
 800d0ac:	2330      	movs	r3, #48	; 0x30
 800d0ae:	f88b 3000 	strb.w	r3, [fp]
 800d0b2:	465b      	mov	r3, fp
 800d0b4:	781a      	ldrb	r2, [r3, #0]
 800d0b6:	3201      	adds	r2, #1
 800d0b8:	701a      	strb	r2, [r3, #0]
 800d0ba:	e78c      	b.n	800cfd6 <_dtoa_r+0x5de>
 800d0bc:	461d      	mov	r5, r3
 800d0be:	e7ea      	b.n	800d096 <_dtoa_r+0x69e>
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	4b9b      	ldr	r3, [pc, #620]	; (800d330 <_dtoa_r+0x938>)
 800d0c4:	f7f3 fa98 	bl	80005f8 <__aeabi_dmul>
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4606      	mov	r6, r0
 800d0ce:	460f      	mov	r7, r1
 800d0d0:	f7f3 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d09a      	beq.n	800d00e <_dtoa_r+0x616>
 800d0d8:	e7cb      	b.n	800d072 <_dtoa_r+0x67a>
 800d0da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0dc:	2a00      	cmp	r2, #0
 800d0de:	f000 808b 	beq.w	800d1f8 <_dtoa_r+0x800>
 800d0e2:	9a06      	ldr	r2, [sp, #24]
 800d0e4:	2a01      	cmp	r2, #1
 800d0e6:	dc6e      	bgt.n	800d1c6 <_dtoa_r+0x7ce>
 800d0e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d0ea:	2a00      	cmp	r2, #0
 800d0ec:	d067      	beq.n	800d1be <_dtoa_r+0x7c6>
 800d0ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0f2:	9f07      	ldr	r7, [sp, #28]
 800d0f4:	9d05      	ldr	r5, [sp, #20]
 800d0f6:	9a05      	ldr	r2, [sp, #20]
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	441a      	add	r2, r3
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	9205      	str	r2, [sp, #20]
 800d100:	4498      	add	r8, r3
 800d102:	f001 f875 	bl	800e1f0 <__i2b>
 800d106:	4606      	mov	r6, r0
 800d108:	2d00      	cmp	r5, #0
 800d10a:	dd0c      	ble.n	800d126 <_dtoa_r+0x72e>
 800d10c:	f1b8 0f00 	cmp.w	r8, #0
 800d110:	dd09      	ble.n	800d126 <_dtoa_r+0x72e>
 800d112:	4545      	cmp	r5, r8
 800d114:	9a05      	ldr	r2, [sp, #20]
 800d116:	462b      	mov	r3, r5
 800d118:	bfa8      	it	ge
 800d11a:	4643      	movge	r3, r8
 800d11c:	1ad2      	subs	r2, r2, r3
 800d11e:	9205      	str	r2, [sp, #20]
 800d120:	1aed      	subs	r5, r5, r3
 800d122:	eba8 0803 	sub.w	r8, r8, r3
 800d126:	9b07      	ldr	r3, [sp, #28]
 800d128:	b1eb      	cbz	r3, 800d166 <_dtoa_r+0x76e>
 800d12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d067      	beq.n	800d200 <_dtoa_r+0x808>
 800d130:	b18f      	cbz	r7, 800d156 <_dtoa_r+0x75e>
 800d132:	4631      	mov	r1, r6
 800d134:	463a      	mov	r2, r7
 800d136:	4620      	mov	r0, r4
 800d138:	f001 f8fa 	bl	800e330 <__pow5mult>
 800d13c:	9a04      	ldr	r2, [sp, #16]
 800d13e:	4601      	mov	r1, r0
 800d140:	4606      	mov	r6, r0
 800d142:	4620      	mov	r0, r4
 800d144:	f001 f85d 	bl	800e202 <__multiply>
 800d148:	9904      	ldr	r1, [sp, #16]
 800d14a:	9008      	str	r0, [sp, #32]
 800d14c:	4620      	mov	r0, r4
 800d14e:	f000 ff71 	bl	800e034 <_Bfree>
 800d152:	9b08      	ldr	r3, [sp, #32]
 800d154:	9304      	str	r3, [sp, #16]
 800d156:	9b07      	ldr	r3, [sp, #28]
 800d158:	1bda      	subs	r2, r3, r7
 800d15a:	d004      	beq.n	800d166 <_dtoa_r+0x76e>
 800d15c:	9904      	ldr	r1, [sp, #16]
 800d15e:	4620      	mov	r0, r4
 800d160:	f001 f8e6 	bl	800e330 <__pow5mult>
 800d164:	9004      	str	r0, [sp, #16]
 800d166:	2101      	movs	r1, #1
 800d168:	4620      	mov	r0, r4
 800d16a:	f001 f841 	bl	800e1f0 <__i2b>
 800d16e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d170:	4607      	mov	r7, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 81d0 	beq.w	800d518 <_dtoa_r+0xb20>
 800d178:	461a      	mov	r2, r3
 800d17a:	4601      	mov	r1, r0
 800d17c:	4620      	mov	r0, r4
 800d17e:	f001 f8d7 	bl	800e330 <__pow5mult>
 800d182:	9b06      	ldr	r3, [sp, #24]
 800d184:	2b01      	cmp	r3, #1
 800d186:	4607      	mov	r7, r0
 800d188:	dc40      	bgt.n	800d20c <_dtoa_r+0x814>
 800d18a:	9b00      	ldr	r3, [sp, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d139      	bne.n	800d204 <_dtoa_r+0x80c>
 800d190:	9b01      	ldr	r3, [sp, #4]
 800d192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d196:	2b00      	cmp	r3, #0
 800d198:	d136      	bne.n	800d208 <_dtoa_r+0x810>
 800d19a:	9b01      	ldr	r3, [sp, #4]
 800d19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1a0:	0d1b      	lsrs	r3, r3, #20
 800d1a2:	051b      	lsls	r3, r3, #20
 800d1a4:	b12b      	cbz	r3, 800d1b2 <_dtoa_r+0x7ba>
 800d1a6:	9b05      	ldr	r3, [sp, #20]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	9305      	str	r3, [sp, #20]
 800d1ac:	f108 0801 	add.w	r8, r8, #1
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	9307      	str	r3, [sp, #28]
 800d1b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d12a      	bne.n	800d210 <_dtoa_r+0x818>
 800d1ba:	2001      	movs	r0, #1
 800d1bc:	e030      	b.n	800d220 <_dtoa_r+0x828>
 800d1be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d1c4:	e795      	b.n	800d0f2 <_dtoa_r+0x6fa>
 800d1c6:	9b07      	ldr	r3, [sp, #28]
 800d1c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800d1cc:	42bb      	cmp	r3, r7
 800d1ce:	bfbf      	itttt	lt
 800d1d0:	9b07      	ldrlt	r3, [sp, #28]
 800d1d2:	9707      	strlt	r7, [sp, #28]
 800d1d4:	1afa      	sublt	r2, r7, r3
 800d1d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d1d8:	bfbb      	ittet	lt
 800d1da:	189b      	addlt	r3, r3, r2
 800d1dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d1de:	1bdf      	subge	r7, r3, r7
 800d1e0:	2700      	movlt	r7, #0
 800d1e2:	f1b9 0f00 	cmp.w	r9, #0
 800d1e6:	bfb5      	itete	lt
 800d1e8:	9b05      	ldrlt	r3, [sp, #20]
 800d1ea:	9d05      	ldrge	r5, [sp, #20]
 800d1ec:	eba3 0509 	sublt.w	r5, r3, r9
 800d1f0:	464b      	movge	r3, r9
 800d1f2:	bfb8      	it	lt
 800d1f4:	2300      	movlt	r3, #0
 800d1f6:	e77e      	b.n	800d0f6 <_dtoa_r+0x6fe>
 800d1f8:	9f07      	ldr	r7, [sp, #28]
 800d1fa:	9d05      	ldr	r5, [sp, #20]
 800d1fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d1fe:	e783      	b.n	800d108 <_dtoa_r+0x710>
 800d200:	9a07      	ldr	r2, [sp, #28]
 800d202:	e7ab      	b.n	800d15c <_dtoa_r+0x764>
 800d204:	2300      	movs	r3, #0
 800d206:	e7d4      	b.n	800d1b2 <_dtoa_r+0x7ba>
 800d208:	9b00      	ldr	r3, [sp, #0]
 800d20a:	e7d2      	b.n	800d1b2 <_dtoa_r+0x7ba>
 800d20c:	2300      	movs	r3, #0
 800d20e:	9307      	str	r3, [sp, #28]
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d216:	6918      	ldr	r0, [r3, #16]
 800d218:	f000 ff9c 	bl	800e154 <__hi0bits>
 800d21c:	f1c0 0020 	rsb	r0, r0, #32
 800d220:	4440      	add	r0, r8
 800d222:	f010 001f 	ands.w	r0, r0, #31
 800d226:	d047      	beq.n	800d2b8 <_dtoa_r+0x8c0>
 800d228:	f1c0 0320 	rsb	r3, r0, #32
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	dd3b      	ble.n	800d2a8 <_dtoa_r+0x8b0>
 800d230:	9b05      	ldr	r3, [sp, #20]
 800d232:	f1c0 001c 	rsb	r0, r0, #28
 800d236:	4403      	add	r3, r0
 800d238:	9305      	str	r3, [sp, #20]
 800d23a:	4405      	add	r5, r0
 800d23c:	4480      	add	r8, r0
 800d23e:	9b05      	ldr	r3, [sp, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	dd05      	ble.n	800d250 <_dtoa_r+0x858>
 800d244:	461a      	mov	r2, r3
 800d246:	9904      	ldr	r1, [sp, #16]
 800d248:	4620      	mov	r0, r4
 800d24a:	f001 f8bf 	bl	800e3cc <__lshift>
 800d24e:	9004      	str	r0, [sp, #16]
 800d250:	f1b8 0f00 	cmp.w	r8, #0
 800d254:	dd05      	ble.n	800d262 <_dtoa_r+0x86a>
 800d256:	4639      	mov	r1, r7
 800d258:	4642      	mov	r2, r8
 800d25a:	4620      	mov	r0, r4
 800d25c:	f001 f8b6 	bl	800e3cc <__lshift>
 800d260:	4607      	mov	r7, r0
 800d262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d264:	b353      	cbz	r3, 800d2bc <_dtoa_r+0x8c4>
 800d266:	4639      	mov	r1, r7
 800d268:	9804      	ldr	r0, [sp, #16]
 800d26a:	f001 f903 	bl	800e474 <__mcmp>
 800d26e:	2800      	cmp	r0, #0
 800d270:	da24      	bge.n	800d2bc <_dtoa_r+0x8c4>
 800d272:	2300      	movs	r3, #0
 800d274:	220a      	movs	r2, #10
 800d276:	9904      	ldr	r1, [sp, #16]
 800d278:	4620      	mov	r0, r4
 800d27a:	f000 fef2 	bl	800e062 <__multadd>
 800d27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d280:	9004      	str	r0, [sp, #16]
 800d282:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 814d 	beq.w	800d526 <_dtoa_r+0xb2e>
 800d28c:	2300      	movs	r3, #0
 800d28e:	4631      	mov	r1, r6
 800d290:	220a      	movs	r2, #10
 800d292:	4620      	mov	r0, r4
 800d294:	f000 fee5 	bl	800e062 <__multadd>
 800d298:	9b02      	ldr	r3, [sp, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	4606      	mov	r6, r0
 800d29e:	dc4f      	bgt.n	800d340 <_dtoa_r+0x948>
 800d2a0:	9b06      	ldr	r3, [sp, #24]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	dd4c      	ble.n	800d340 <_dtoa_r+0x948>
 800d2a6:	e011      	b.n	800d2cc <_dtoa_r+0x8d4>
 800d2a8:	d0c9      	beq.n	800d23e <_dtoa_r+0x846>
 800d2aa:	9a05      	ldr	r2, [sp, #20]
 800d2ac:	331c      	adds	r3, #28
 800d2ae:	441a      	add	r2, r3
 800d2b0:	9205      	str	r2, [sp, #20]
 800d2b2:	441d      	add	r5, r3
 800d2b4:	4498      	add	r8, r3
 800d2b6:	e7c2      	b.n	800d23e <_dtoa_r+0x846>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	e7f6      	b.n	800d2aa <_dtoa_r+0x8b2>
 800d2bc:	f1b9 0f00 	cmp.w	r9, #0
 800d2c0:	dc38      	bgt.n	800d334 <_dtoa_r+0x93c>
 800d2c2:	9b06      	ldr	r3, [sp, #24]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	dd35      	ble.n	800d334 <_dtoa_r+0x93c>
 800d2c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	b963      	cbnz	r3, 800d2ea <_dtoa_r+0x8f2>
 800d2d0:	4639      	mov	r1, r7
 800d2d2:	2205      	movs	r2, #5
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fec4 	bl	800e062 <__multadd>
 800d2da:	4601      	mov	r1, r0
 800d2dc:	4607      	mov	r7, r0
 800d2de:	9804      	ldr	r0, [sp, #16]
 800d2e0:	f001 f8c8 	bl	800e474 <__mcmp>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f73f adcc 	bgt.w	800ce82 <_dtoa_r+0x48a>
 800d2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ec:	465d      	mov	r5, fp
 800d2ee:	ea6f 0a03 	mvn.w	sl, r3
 800d2f2:	f04f 0900 	mov.w	r9, #0
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f000 fe9b 	bl	800e034 <_Bfree>
 800d2fe:	2e00      	cmp	r6, #0
 800d300:	f43f aeb7 	beq.w	800d072 <_dtoa_r+0x67a>
 800d304:	f1b9 0f00 	cmp.w	r9, #0
 800d308:	d005      	beq.n	800d316 <_dtoa_r+0x91e>
 800d30a:	45b1      	cmp	r9, r6
 800d30c:	d003      	beq.n	800d316 <_dtoa_r+0x91e>
 800d30e:	4649      	mov	r1, r9
 800d310:	4620      	mov	r0, r4
 800d312:	f000 fe8f 	bl	800e034 <_Bfree>
 800d316:	4631      	mov	r1, r6
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 fe8b 	bl	800e034 <_Bfree>
 800d31e:	e6a8      	b.n	800d072 <_dtoa_r+0x67a>
 800d320:	2700      	movs	r7, #0
 800d322:	463e      	mov	r6, r7
 800d324:	e7e1      	b.n	800d2ea <_dtoa_r+0x8f2>
 800d326:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d32a:	463e      	mov	r6, r7
 800d32c:	e5a9      	b.n	800ce82 <_dtoa_r+0x48a>
 800d32e:	bf00      	nop
 800d330:	40240000 	.word	0x40240000
 800d334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d336:	f8cd 9008 	str.w	r9, [sp, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f000 80fa 	beq.w	800d534 <_dtoa_r+0xb3c>
 800d340:	2d00      	cmp	r5, #0
 800d342:	dd05      	ble.n	800d350 <_dtoa_r+0x958>
 800d344:	4631      	mov	r1, r6
 800d346:	462a      	mov	r2, r5
 800d348:	4620      	mov	r0, r4
 800d34a:	f001 f83f 	bl	800e3cc <__lshift>
 800d34e:	4606      	mov	r6, r0
 800d350:	9b07      	ldr	r3, [sp, #28]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d04c      	beq.n	800d3f0 <_dtoa_r+0x9f8>
 800d356:	6871      	ldr	r1, [r6, #4]
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fe37 	bl	800dfcc <_Balloc>
 800d35e:	6932      	ldr	r2, [r6, #16]
 800d360:	3202      	adds	r2, #2
 800d362:	4605      	mov	r5, r0
 800d364:	0092      	lsls	r2, r2, #2
 800d366:	f106 010c 	add.w	r1, r6, #12
 800d36a:	300c      	adds	r0, #12
 800d36c:	f7fd fc52 	bl	800ac14 <memcpy>
 800d370:	2201      	movs	r2, #1
 800d372:	4629      	mov	r1, r5
 800d374:	4620      	mov	r0, r4
 800d376:	f001 f829 	bl	800e3cc <__lshift>
 800d37a:	9b00      	ldr	r3, [sp, #0]
 800d37c:	f8cd b014 	str.w	fp, [sp, #20]
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	46b1      	mov	r9, r6
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	4606      	mov	r6, r0
 800d38a:	4639      	mov	r1, r7
 800d38c:	9804      	ldr	r0, [sp, #16]
 800d38e:	f7ff faa5 	bl	800c8dc <quorem>
 800d392:	4649      	mov	r1, r9
 800d394:	4605      	mov	r5, r0
 800d396:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d39a:	9804      	ldr	r0, [sp, #16]
 800d39c:	f001 f86a 	bl	800e474 <__mcmp>
 800d3a0:	4632      	mov	r2, r6
 800d3a2:	9000      	str	r0, [sp, #0]
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f001 f87e 	bl	800e4a8 <__mdiff>
 800d3ac:	68c3      	ldr	r3, [r0, #12]
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	bb03      	cbnz	r3, 800d3f4 <_dtoa_r+0x9fc>
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	9008      	str	r0, [sp, #32]
 800d3b6:	9804      	ldr	r0, [sp, #16]
 800d3b8:	f001 f85c 	bl	800e474 <__mcmp>
 800d3bc:	9a08      	ldr	r2, [sp, #32]
 800d3be:	4603      	mov	r3, r0
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	9308      	str	r3, [sp, #32]
 800d3c6:	f000 fe35 	bl	800e034 <_Bfree>
 800d3ca:	9b08      	ldr	r3, [sp, #32]
 800d3cc:	b9a3      	cbnz	r3, 800d3f8 <_dtoa_r+0xa00>
 800d3ce:	9a06      	ldr	r2, [sp, #24]
 800d3d0:	b992      	cbnz	r2, 800d3f8 <_dtoa_r+0xa00>
 800d3d2:	9a07      	ldr	r2, [sp, #28]
 800d3d4:	b982      	cbnz	r2, 800d3f8 <_dtoa_r+0xa00>
 800d3d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d3da:	d029      	beq.n	800d430 <_dtoa_r+0xa38>
 800d3dc:	9b00      	ldr	r3, [sp, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dd01      	ble.n	800d3e6 <_dtoa_r+0x9ee>
 800d3e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d3e6:	9b05      	ldr	r3, [sp, #20]
 800d3e8:	1c5d      	adds	r5, r3, #1
 800d3ea:	f883 8000 	strb.w	r8, [r3]
 800d3ee:	e782      	b.n	800d2f6 <_dtoa_r+0x8fe>
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	e7c2      	b.n	800d37a <_dtoa_r+0x982>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e7e3      	b.n	800d3c0 <_dtoa_r+0x9c8>
 800d3f8:	9a00      	ldr	r2, [sp, #0]
 800d3fa:	2a00      	cmp	r2, #0
 800d3fc:	db04      	blt.n	800d408 <_dtoa_r+0xa10>
 800d3fe:	d125      	bne.n	800d44c <_dtoa_r+0xa54>
 800d400:	9a06      	ldr	r2, [sp, #24]
 800d402:	bb1a      	cbnz	r2, 800d44c <_dtoa_r+0xa54>
 800d404:	9a07      	ldr	r2, [sp, #28]
 800d406:	bb0a      	cbnz	r2, 800d44c <_dtoa_r+0xa54>
 800d408:	2b00      	cmp	r3, #0
 800d40a:	ddec      	ble.n	800d3e6 <_dtoa_r+0x9ee>
 800d40c:	2201      	movs	r2, #1
 800d40e:	9904      	ldr	r1, [sp, #16]
 800d410:	4620      	mov	r0, r4
 800d412:	f000 ffdb 	bl	800e3cc <__lshift>
 800d416:	4639      	mov	r1, r7
 800d418:	9004      	str	r0, [sp, #16]
 800d41a:	f001 f82b 	bl	800e474 <__mcmp>
 800d41e:	2800      	cmp	r0, #0
 800d420:	dc03      	bgt.n	800d42a <_dtoa_r+0xa32>
 800d422:	d1e0      	bne.n	800d3e6 <_dtoa_r+0x9ee>
 800d424:	f018 0f01 	tst.w	r8, #1
 800d428:	d0dd      	beq.n	800d3e6 <_dtoa_r+0x9ee>
 800d42a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d42e:	d1d8      	bne.n	800d3e2 <_dtoa_r+0x9ea>
 800d430:	9b05      	ldr	r3, [sp, #20]
 800d432:	9a05      	ldr	r2, [sp, #20]
 800d434:	1c5d      	adds	r5, r3, #1
 800d436:	2339      	movs	r3, #57	; 0x39
 800d438:	7013      	strb	r3, [r2, #0]
 800d43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d43e:	2b39      	cmp	r3, #57	; 0x39
 800d440:	f105 32ff 	add.w	r2, r5, #4294967295
 800d444:	d04f      	beq.n	800d4e6 <_dtoa_r+0xaee>
 800d446:	3301      	adds	r3, #1
 800d448:	7013      	strb	r3, [r2, #0]
 800d44a:	e754      	b.n	800d2f6 <_dtoa_r+0x8fe>
 800d44c:	9a05      	ldr	r2, [sp, #20]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f102 0501 	add.w	r5, r2, #1
 800d454:	dd06      	ble.n	800d464 <_dtoa_r+0xa6c>
 800d456:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d45a:	d0e9      	beq.n	800d430 <_dtoa_r+0xa38>
 800d45c:	f108 0801 	add.w	r8, r8, #1
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	e7c2      	b.n	800d3ea <_dtoa_r+0x9f2>
 800d464:	9a02      	ldr	r2, [sp, #8]
 800d466:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d46a:	eba5 030b 	sub.w	r3, r5, fp
 800d46e:	4293      	cmp	r3, r2
 800d470:	d021      	beq.n	800d4b6 <_dtoa_r+0xabe>
 800d472:	2300      	movs	r3, #0
 800d474:	220a      	movs	r2, #10
 800d476:	9904      	ldr	r1, [sp, #16]
 800d478:	4620      	mov	r0, r4
 800d47a:	f000 fdf2 	bl	800e062 <__multadd>
 800d47e:	45b1      	cmp	r9, r6
 800d480:	9004      	str	r0, [sp, #16]
 800d482:	f04f 0300 	mov.w	r3, #0
 800d486:	f04f 020a 	mov.w	r2, #10
 800d48a:	4649      	mov	r1, r9
 800d48c:	4620      	mov	r0, r4
 800d48e:	d105      	bne.n	800d49c <_dtoa_r+0xaa4>
 800d490:	f000 fde7 	bl	800e062 <__multadd>
 800d494:	4681      	mov	r9, r0
 800d496:	4606      	mov	r6, r0
 800d498:	9505      	str	r5, [sp, #20]
 800d49a:	e776      	b.n	800d38a <_dtoa_r+0x992>
 800d49c:	f000 fde1 	bl	800e062 <__multadd>
 800d4a0:	4631      	mov	r1, r6
 800d4a2:	4681      	mov	r9, r0
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	220a      	movs	r2, #10
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 fdda 	bl	800e062 <__multadd>
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	e7f2      	b.n	800d498 <_dtoa_r+0xaa0>
 800d4b2:	f04f 0900 	mov.w	r9, #0
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	9904      	ldr	r1, [sp, #16]
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f000 ff86 	bl	800e3cc <__lshift>
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	9004      	str	r0, [sp, #16]
 800d4c4:	f000 ffd6 	bl	800e474 <__mcmp>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	dcb6      	bgt.n	800d43a <_dtoa_r+0xa42>
 800d4cc:	d102      	bne.n	800d4d4 <_dtoa_r+0xadc>
 800d4ce:	f018 0f01 	tst.w	r8, #1
 800d4d2:	d1b2      	bne.n	800d43a <_dtoa_r+0xa42>
 800d4d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d4d8:	2b30      	cmp	r3, #48	; 0x30
 800d4da:	f105 32ff 	add.w	r2, r5, #4294967295
 800d4de:	f47f af0a 	bne.w	800d2f6 <_dtoa_r+0x8fe>
 800d4e2:	4615      	mov	r5, r2
 800d4e4:	e7f6      	b.n	800d4d4 <_dtoa_r+0xadc>
 800d4e6:	4593      	cmp	fp, r2
 800d4e8:	d105      	bne.n	800d4f6 <_dtoa_r+0xafe>
 800d4ea:	2331      	movs	r3, #49	; 0x31
 800d4ec:	f10a 0a01 	add.w	sl, sl, #1
 800d4f0:	f88b 3000 	strb.w	r3, [fp]
 800d4f4:	e6ff      	b.n	800d2f6 <_dtoa_r+0x8fe>
 800d4f6:	4615      	mov	r5, r2
 800d4f8:	e79f      	b.n	800d43a <_dtoa_r+0xa42>
 800d4fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d560 <_dtoa_r+0xb68>
 800d4fe:	e007      	b.n	800d510 <_dtoa_r+0xb18>
 800d500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d502:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d564 <_dtoa_r+0xb6c>
 800d506:	b11b      	cbz	r3, 800d510 <_dtoa_r+0xb18>
 800d508:	f10b 0308 	add.w	r3, fp, #8
 800d50c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	4658      	mov	r0, fp
 800d512:	b017      	add	sp, #92	; 0x5c
 800d514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d518:	9b06      	ldr	r3, [sp, #24]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	f77f ae35 	ble.w	800d18a <_dtoa_r+0x792>
 800d520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d522:	9307      	str	r3, [sp, #28]
 800d524:	e649      	b.n	800d1ba <_dtoa_r+0x7c2>
 800d526:	9b02      	ldr	r3, [sp, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	dc03      	bgt.n	800d534 <_dtoa_r+0xb3c>
 800d52c:	9b06      	ldr	r3, [sp, #24]
 800d52e:	2b02      	cmp	r3, #2
 800d530:	f73f aecc 	bgt.w	800d2cc <_dtoa_r+0x8d4>
 800d534:	465d      	mov	r5, fp
 800d536:	4639      	mov	r1, r7
 800d538:	9804      	ldr	r0, [sp, #16]
 800d53a:	f7ff f9cf 	bl	800c8dc <quorem>
 800d53e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d542:	f805 8b01 	strb.w	r8, [r5], #1
 800d546:	9a02      	ldr	r2, [sp, #8]
 800d548:	eba5 030b 	sub.w	r3, r5, fp
 800d54c:	429a      	cmp	r2, r3
 800d54e:	ddb0      	ble.n	800d4b2 <_dtoa_r+0xaba>
 800d550:	2300      	movs	r3, #0
 800d552:	220a      	movs	r2, #10
 800d554:	9904      	ldr	r1, [sp, #16]
 800d556:	4620      	mov	r0, r4
 800d558:	f000 fd83 	bl	800e062 <__multadd>
 800d55c:	9004      	str	r0, [sp, #16]
 800d55e:	e7ea      	b.n	800d536 <_dtoa_r+0xb3e>
 800d560:	0800f14c 	.word	0x0800f14c
 800d564:	0800f1c8 	.word	0x0800f1c8

0800d568 <__sflush_r>:
 800d568:	898a      	ldrh	r2, [r1, #12]
 800d56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56e:	4605      	mov	r5, r0
 800d570:	0710      	lsls	r0, r2, #28
 800d572:	460c      	mov	r4, r1
 800d574:	d458      	bmi.n	800d628 <__sflush_r+0xc0>
 800d576:	684b      	ldr	r3, [r1, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dc05      	bgt.n	800d588 <__sflush_r+0x20>
 800d57c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d57e:	2b00      	cmp	r3, #0
 800d580:	dc02      	bgt.n	800d588 <__sflush_r+0x20>
 800d582:	2000      	movs	r0, #0
 800d584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	d0f9      	beq.n	800d582 <__sflush_r+0x1a>
 800d58e:	2300      	movs	r3, #0
 800d590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d594:	682f      	ldr	r7, [r5, #0]
 800d596:	6a21      	ldr	r1, [r4, #32]
 800d598:	602b      	str	r3, [r5, #0]
 800d59a:	d032      	beq.n	800d602 <__sflush_r+0x9a>
 800d59c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	075a      	lsls	r2, r3, #29
 800d5a2:	d505      	bpl.n	800d5b0 <__sflush_r+0x48>
 800d5a4:	6863      	ldr	r3, [r4, #4]
 800d5a6:	1ac0      	subs	r0, r0, r3
 800d5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5aa:	b10b      	cbz	r3, 800d5b0 <__sflush_r+0x48>
 800d5ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5ae:	1ac0      	subs	r0, r0, r3
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5b6:	6a21      	ldr	r1, [r4, #32]
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b0      	blx	r6
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	d106      	bne.n	800d5d0 <__sflush_r+0x68>
 800d5c2:	6829      	ldr	r1, [r5, #0]
 800d5c4:	291d      	cmp	r1, #29
 800d5c6:	d848      	bhi.n	800d65a <__sflush_r+0xf2>
 800d5c8:	4a29      	ldr	r2, [pc, #164]	; (800d670 <__sflush_r+0x108>)
 800d5ca:	40ca      	lsrs	r2, r1
 800d5cc:	07d6      	lsls	r6, r2, #31
 800d5ce:	d544      	bpl.n	800d65a <__sflush_r+0xf2>
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	6062      	str	r2, [r4, #4]
 800d5d4:	04d9      	lsls	r1, r3, #19
 800d5d6:	6922      	ldr	r2, [r4, #16]
 800d5d8:	6022      	str	r2, [r4, #0]
 800d5da:	d504      	bpl.n	800d5e6 <__sflush_r+0x7e>
 800d5dc:	1c42      	adds	r2, r0, #1
 800d5de:	d101      	bne.n	800d5e4 <__sflush_r+0x7c>
 800d5e0:	682b      	ldr	r3, [r5, #0]
 800d5e2:	b903      	cbnz	r3, 800d5e6 <__sflush_r+0x7e>
 800d5e4:	6560      	str	r0, [r4, #84]	; 0x54
 800d5e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e8:	602f      	str	r7, [r5, #0]
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	d0c9      	beq.n	800d582 <__sflush_r+0x1a>
 800d5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	d002      	beq.n	800d5fc <__sflush_r+0x94>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f001 f8f6 	bl	800e7e8 <_free_r>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	6360      	str	r0, [r4, #52]	; 0x34
 800d600:	e7c0      	b.n	800d584 <__sflush_r+0x1c>
 800d602:	2301      	movs	r3, #1
 800d604:	4628      	mov	r0, r5
 800d606:	47b0      	blx	r6
 800d608:	1c41      	adds	r1, r0, #1
 800d60a:	d1c8      	bne.n	800d59e <__sflush_r+0x36>
 800d60c:	682b      	ldr	r3, [r5, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d0c5      	beq.n	800d59e <__sflush_r+0x36>
 800d612:	2b1d      	cmp	r3, #29
 800d614:	d001      	beq.n	800d61a <__sflush_r+0xb2>
 800d616:	2b16      	cmp	r3, #22
 800d618:	d101      	bne.n	800d61e <__sflush_r+0xb6>
 800d61a:	602f      	str	r7, [r5, #0]
 800d61c:	e7b1      	b.n	800d582 <__sflush_r+0x1a>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d624:	81a3      	strh	r3, [r4, #12]
 800d626:	e7ad      	b.n	800d584 <__sflush_r+0x1c>
 800d628:	690f      	ldr	r7, [r1, #16]
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	d0a9      	beq.n	800d582 <__sflush_r+0x1a>
 800d62e:	0793      	lsls	r3, r2, #30
 800d630:	680e      	ldr	r6, [r1, #0]
 800d632:	bf08      	it	eq
 800d634:	694b      	ldreq	r3, [r1, #20]
 800d636:	600f      	str	r7, [r1, #0]
 800d638:	bf18      	it	ne
 800d63a:	2300      	movne	r3, #0
 800d63c:	eba6 0807 	sub.w	r8, r6, r7
 800d640:	608b      	str	r3, [r1, #8]
 800d642:	f1b8 0f00 	cmp.w	r8, #0
 800d646:	dd9c      	ble.n	800d582 <__sflush_r+0x1a>
 800d648:	4643      	mov	r3, r8
 800d64a:	463a      	mov	r2, r7
 800d64c:	6a21      	ldr	r1, [r4, #32]
 800d64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d650:	4628      	mov	r0, r5
 800d652:	47b0      	blx	r6
 800d654:	2800      	cmp	r0, #0
 800d656:	dc06      	bgt.n	800d666 <__sflush_r+0xfe>
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d65e:	81a3      	strh	r3, [r4, #12]
 800d660:	f04f 30ff 	mov.w	r0, #4294967295
 800d664:	e78e      	b.n	800d584 <__sflush_r+0x1c>
 800d666:	4407      	add	r7, r0
 800d668:	eba8 0800 	sub.w	r8, r8, r0
 800d66c:	e7e9      	b.n	800d642 <__sflush_r+0xda>
 800d66e:	bf00      	nop
 800d670:	20400001 	.word	0x20400001

0800d674 <_fflush_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	690b      	ldr	r3, [r1, #16]
 800d678:	4605      	mov	r5, r0
 800d67a:	460c      	mov	r4, r1
 800d67c:	b1db      	cbz	r3, 800d6b6 <_fflush_r+0x42>
 800d67e:	b118      	cbz	r0, 800d688 <_fflush_r+0x14>
 800d680:	6983      	ldr	r3, [r0, #24]
 800d682:	b90b      	cbnz	r3, 800d688 <_fflush_r+0x14>
 800d684:	f000 f860 	bl	800d748 <__sinit>
 800d688:	4b0c      	ldr	r3, [pc, #48]	; (800d6bc <_fflush_r+0x48>)
 800d68a:	429c      	cmp	r4, r3
 800d68c:	d109      	bne.n	800d6a2 <_fflush_r+0x2e>
 800d68e:	686c      	ldr	r4, [r5, #4]
 800d690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d694:	b17b      	cbz	r3, 800d6b6 <_fflush_r+0x42>
 800d696:	4621      	mov	r1, r4
 800d698:	4628      	mov	r0, r5
 800d69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d69e:	f7ff bf63 	b.w	800d568 <__sflush_r>
 800d6a2:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <_fflush_r+0x4c>)
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	d101      	bne.n	800d6ac <_fflush_r+0x38>
 800d6a8:	68ac      	ldr	r4, [r5, #8]
 800d6aa:	e7f1      	b.n	800d690 <_fflush_r+0x1c>
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <_fflush_r+0x50>)
 800d6ae:	429c      	cmp	r4, r3
 800d6b0:	bf08      	it	eq
 800d6b2:	68ec      	ldreq	r4, [r5, #12]
 800d6b4:	e7ec      	b.n	800d690 <_fflush_r+0x1c>
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0800f1f8 	.word	0x0800f1f8
 800d6c0:	0800f218 	.word	0x0800f218
 800d6c4:	0800f1d8 	.word	0x0800f1d8

0800d6c8 <std>:
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	b510      	push	{r4, lr}
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d6d2:	6083      	str	r3, [r0, #8]
 800d6d4:	8181      	strh	r1, [r0, #12]
 800d6d6:	6643      	str	r3, [r0, #100]	; 0x64
 800d6d8:	81c2      	strh	r2, [r0, #14]
 800d6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6de:	6183      	str	r3, [r0, #24]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	2208      	movs	r2, #8
 800d6e4:	305c      	adds	r0, #92	; 0x5c
 800d6e6:	f7fd faa0 	bl	800ac2a <memset>
 800d6ea:	4b05      	ldr	r3, [pc, #20]	; (800d700 <std+0x38>)
 800d6ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d6ee:	4b05      	ldr	r3, [pc, #20]	; (800d704 <std+0x3c>)
 800d6f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6f2:	4b05      	ldr	r3, [pc, #20]	; (800d708 <std+0x40>)
 800d6f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6f6:	4b05      	ldr	r3, [pc, #20]	; (800d70c <std+0x44>)
 800d6f8:	6224      	str	r4, [r4, #32]
 800d6fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d6fc:	bd10      	pop	{r4, pc}
 800d6fe:	bf00      	nop
 800d700:	0800ee7d 	.word	0x0800ee7d
 800d704:	0800ee9f 	.word	0x0800ee9f
 800d708:	0800eed7 	.word	0x0800eed7
 800d70c:	0800eefb 	.word	0x0800eefb

0800d710 <_cleanup_r>:
 800d710:	4901      	ldr	r1, [pc, #4]	; (800d718 <_cleanup_r+0x8>)
 800d712:	f000 b885 	b.w	800d820 <_fwalk_reent>
 800d716:	bf00      	nop
 800d718:	0800d675 	.word	0x0800d675

0800d71c <__sfmoreglue>:
 800d71c:	b570      	push	{r4, r5, r6, lr}
 800d71e:	1e4a      	subs	r2, r1, #1
 800d720:	2568      	movs	r5, #104	; 0x68
 800d722:	4355      	muls	r5, r2
 800d724:	460e      	mov	r6, r1
 800d726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d72a:	f001 f8ab 	bl	800e884 <_malloc_r>
 800d72e:	4604      	mov	r4, r0
 800d730:	b140      	cbz	r0, 800d744 <__sfmoreglue+0x28>
 800d732:	2100      	movs	r1, #0
 800d734:	e9c0 1600 	strd	r1, r6, [r0]
 800d738:	300c      	adds	r0, #12
 800d73a:	60a0      	str	r0, [r4, #8]
 800d73c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d740:	f7fd fa73 	bl	800ac2a <memset>
 800d744:	4620      	mov	r0, r4
 800d746:	bd70      	pop	{r4, r5, r6, pc}

0800d748 <__sinit>:
 800d748:	6983      	ldr	r3, [r0, #24]
 800d74a:	b510      	push	{r4, lr}
 800d74c:	4604      	mov	r4, r0
 800d74e:	bb33      	cbnz	r3, 800d79e <__sinit+0x56>
 800d750:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d754:	6503      	str	r3, [r0, #80]	; 0x50
 800d756:	4b12      	ldr	r3, [pc, #72]	; (800d7a0 <__sinit+0x58>)
 800d758:	4a12      	ldr	r2, [pc, #72]	; (800d7a4 <__sinit+0x5c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6282      	str	r2, [r0, #40]	; 0x28
 800d75e:	4298      	cmp	r0, r3
 800d760:	bf04      	itt	eq
 800d762:	2301      	moveq	r3, #1
 800d764:	6183      	streq	r3, [r0, #24]
 800d766:	f000 f81f 	bl	800d7a8 <__sfp>
 800d76a:	6060      	str	r0, [r4, #4]
 800d76c:	4620      	mov	r0, r4
 800d76e:	f000 f81b 	bl	800d7a8 <__sfp>
 800d772:	60a0      	str	r0, [r4, #8]
 800d774:	4620      	mov	r0, r4
 800d776:	f000 f817 	bl	800d7a8 <__sfp>
 800d77a:	2200      	movs	r2, #0
 800d77c:	60e0      	str	r0, [r4, #12]
 800d77e:	2104      	movs	r1, #4
 800d780:	6860      	ldr	r0, [r4, #4]
 800d782:	f7ff ffa1 	bl	800d6c8 <std>
 800d786:	2201      	movs	r2, #1
 800d788:	2109      	movs	r1, #9
 800d78a:	68a0      	ldr	r0, [r4, #8]
 800d78c:	f7ff ff9c 	bl	800d6c8 <std>
 800d790:	2202      	movs	r2, #2
 800d792:	2112      	movs	r1, #18
 800d794:	68e0      	ldr	r0, [r4, #12]
 800d796:	f7ff ff97 	bl	800d6c8 <std>
 800d79a:	2301      	movs	r3, #1
 800d79c:	61a3      	str	r3, [r4, #24]
 800d79e:	bd10      	pop	{r4, pc}
 800d7a0:	0800f138 	.word	0x0800f138
 800d7a4:	0800d711 	.word	0x0800d711

0800d7a8 <__sfp>:
 800d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <__sfp+0x70>)
 800d7ac:	681e      	ldr	r6, [r3, #0]
 800d7ae:	69b3      	ldr	r3, [r6, #24]
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	b913      	cbnz	r3, 800d7ba <__sfp+0x12>
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7ff ffc7 	bl	800d748 <__sinit>
 800d7ba:	3648      	adds	r6, #72	; 0x48
 800d7bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	d503      	bpl.n	800d7cc <__sfp+0x24>
 800d7c4:	6833      	ldr	r3, [r6, #0]
 800d7c6:	b133      	cbz	r3, 800d7d6 <__sfp+0x2e>
 800d7c8:	6836      	ldr	r6, [r6, #0]
 800d7ca:	e7f7      	b.n	800d7bc <__sfp+0x14>
 800d7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7d0:	b16d      	cbz	r5, 800d7ee <__sfp+0x46>
 800d7d2:	3468      	adds	r4, #104	; 0x68
 800d7d4:	e7f4      	b.n	800d7c0 <__sfp+0x18>
 800d7d6:	2104      	movs	r1, #4
 800d7d8:	4638      	mov	r0, r7
 800d7da:	f7ff ff9f 	bl	800d71c <__sfmoreglue>
 800d7de:	6030      	str	r0, [r6, #0]
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d1f1      	bne.n	800d7c8 <__sfp+0x20>
 800d7e4:	230c      	movs	r3, #12
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ee:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <__sfp+0x74>)
 800d7f0:	6665      	str	r5, [r4, #100]	; 0x64
 800d7f2:	e9c4 5500 	strd	r5, r5, [r4]
 800d7f6:	60a5      	str	r5, [r4, #8]
 800d7f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d7fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d800:	2208      	movs	r2, #8
 800d802:	4629      	mov	r1, r5
 800d804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d808:	f7fd fa0f 	bl	800ac2a <memset>
 800d80c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d814:	e7e9      	b.n	800d7ea <__sfp+0x42>
 800d816:	bf00      	nop
 800d818:	0800f138 	.word	0x0800f138
 800d81c:	ffff0001 	.word	0xffff0001

0800d820 <_fwalk_reent>:
 800d820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d824:	4680      	mov	r8, r0
 800d826:	4689      	mov	r9, r1
 800d828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d82c:	2600      	movs	r6, #0
 800d82e:	b914      	cbnz	r4, 800d836 <_fwalk_reent+0x16>
 800d830:	4630      	mov	r0, r6
 800d832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d836:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d83a:	3f01      	subs	r7, #1
 800d83c:	d501      	bpl.n	800d842 <_fwalk_reent+0x22>
 800d83e:	6824      	ldr	r4, [r4, #0]
 800d840:	e7f5      	b.n	800d82e <_fwalk_reent+0xe>
 800d842:	89ab      	ldrh	r3, [r5, #12]
 800d844:	2b01      	cmp	r3, #1
 800d846:	d907      	bls.n	800d858 <_fwalk_reent+0x38>
 800d848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d84c:	3301      	adds	r3, #1
 800d84e:	d003      	beq.n	800d858 <_fwalk_reent+0x38>
 800d850:	4629      	mov	r1, r5
 800d852:	4640      	mov	r0, r8
 800d854:	47c8      	blx	r9
 800d856:	4306      	orrs	r6, r0
 800d858:	3568      	adds	r5, #104	; 0x68
 800d85a:	e7ee      	b.n	800d83a <_fwalk_reent+0x1a>

0800d85c <rshift>:
 800d85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d85e:	6906      	ldr	r6, [r0, #16]
 800d860:	114b      	asrs	r3, r1, #5
 800d862:	429e      	cmp	r6, r3
 800d864:	f100 0414 	add.w	r4, r0, #20
 800d868:	dd30      	ble.n	800d8cc <rshift+0x70>
 800d86a:	f011 011f 	ands.w	r1, r1, #31
 800d86e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d872:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d876:	d108      	bne.n	800d88a <rshift+0x2e>
 800d878:	4621      	mov	r1, r4
 800d87a:	42b2      	cmp	r2, r6
 800d87c:	460b      	mov	r3, r1
 800d87e:	d211      	bcs.n	800d8a4 <rshift+0x48>
 800d880:	f852 3b04 	ldr.w	r3, [r2], #4
 800d884:	f841 3b04 	str.w	r3, [r1], #4
 800d888:	e7f7      	b.n	800d87a <rshift+0x1e>
 800d88a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d88e:	f1c1 0c20 	rsb	ip, r1, #32
 800d892:	40cd      	lsrs	r5, r1
 800d894:	3204      	adds	r2, #4
 800d896:	4623      	mov	r3, r4
 800d898:	42b2      	cmp	r2, r6
 800d89a:	4617      	mov	r7, r2
 800d89c:	d30c      	bcc.n	800d8b8 <rshift+0x5c>
 800d89e:	601d      	str	r5, [r3, #0]
 800d8a0:	b105      	cbz	r5, 800d8a4 <rshift+0x48>
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	1b1a      	subs	r2, r3, r4
 800d8a6:	42a3      	cmp	r3, r4
 800d8a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8ac:	bf08      	it	eq
 800d8ae:	2300      	moveq	r3, #0
 800d8b0:	6102      	str	r2, [r0, #16]
 800d8b2:	bf08      	it	eq
 800d8b4:	6143      	streq	r3, [r0, #20]
 800d8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b8:	683f      	ldr	r7, [r7, #0]
 800d8ba:	fa07 f70c 	lsl.w	r7, r7, ip
 800d8be:	433d      	orrs	r5, r7
 800d8c0:	f843 5b04 	str.w	r5, [r3], #4
 800d8c4:	f852 5b04 	ldr.w	r5, [r2], #4
 800d8c8:	40cd      	lsrs	r5, r1
 800d8ca:	e7e5      	b.n	800d898 <rshift+0x3c>
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	e7e9      	b.n	800d8a4 <rshift+0x48>

0800d8d0 <__hexdig_fun>:
 800d8d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d8d4:	2b09      	cmp	r3, #9
 800d8d6:	d802      	bhi.n	800d8de <__hexdig_fun+0xe>
 800d8d8:	3820      	subs	r0, #32
 800d8da:	b2c0      	uxtb	r0, r0
 800d8dc:	4770      	bx	lr
 800d8de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d8e2:	2b05      	cmp	r3, #5
 800d8e4:	d801      	bhi.n	800d8ea <__hexdig_fun+0x1a>
 800d8e6:	3847      	subs	r0, #71	; 0x47
 800d8e8:	e7f7      	b.n	800d8da <__hexdig_fun+0xa>
 800d8ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d8ee:	2b05      	cmp	r3, #5
 800d8f0:	d801      	bhi.n	800d8f6 <__hexdig_fun+0x26>
 800d8f2:	3827      	subs	r0, #39	; 0x27
 800d8f4:	e7f1      	b.n	800d8da <__hexdig_fun+0xa>
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	4770      	bx	lr

0800d8fa <__gethex>:
 800d8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fe:	b08b      	sub	sp, #44	; 0x2c
 800d900:	468a      	mov	sl, r1
 800d902:	9002      	str	r0, [sp, #8]
 800d904:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d906:	9306      	str	r3, [sp, #24]
 800d908:	4690      	mov	r8, r2
 800d90a:	f000 fad0 	bl	800deae <__localeconv_l>
 800d90e:	6803      	ldr	r3, [r0, #0]
 800d910:	9303      	str	r3, [sp, #12]
 800d912:	4618      	mov	r0, r3
 800d914:	f7f2 fc5c 	bl	80001d0 <strlen>
 800d918:	9b03      	ldr	r3, [sp, #12]
 800d91a:	9001      	str	r0, [sp, #4]
 800d91c:	4403      	add	r3, r0
 800d91e:	f04f 0b00 	mov.w	fp, #0
 800d922:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d926:	9307      	str	r3, [sp, #28]
 800d928:	f8da 3000 	ldr.w	r3, [sl]
 800d92c:	3302      	adds	r3, #2
 800d92e:	461f      	mov	r7, r3
 800d930:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d934:	2830      	cmp	r0, #48	; 0x30
 800d936:	d06c      	beq.n	800da12 <__gethex+0x118>
 800d938:	f7ff ffca 	bl	800d8d0 <__hexdig_fun>
 800d93c:	4604      	mov	r4, r0
 800d93e:	2800      	cmp	r0, #0
 800d940:	d16a      	bne.n	800da18 <__gethex+0x11e>
 800d942:	9a01      	ldr	r2, [sp, #4]
 800d944:	9903      	ldr	r1, [sp, #12]
 800d946:	4638      	mov	r0, r7
 800d948:	f001 fadb 	bl	800ef02 <strncmp>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d166      	bne.n	800da1e <__gethex+0x124>
 800d950:	9b01      	ldr	r3, [sp, #4]
 800d952:	5cf8      	ldrb	r0, [r7, r3]
 800d954:	18fe      	adds	r6, r7, r3
 800d956:	f7ff ffbb 	bl	800d8d0 <__hexdig_fun>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d062      	beq.n	800da24 <__gethex+0x12a>
 800d95e:	4633      	mov	r3, r6
 800d960:	7818      	ldrb	r0, [r3, #0]
 800d962:	2830      	cmp	r0, #48	; 0x30
 800d964:	461f      	mov	r7, r3
 800d966:	f103 0301 	add.w	r3, r3, #1
 800d96a:	d0f9      	beq.n	800d960 <__gethex+0x66>
 800d96c:	f7ff ffb0 	bl	800d8d0 <__hexdig_fun>
 800d970:	fab0 f580 	clz	r5, r0
 800d974:	096d      	lsrs	r5, r5, #5
 800d976:	4634      	mov	r4, r6
 800d978:	f04f 0b01 	mov.w	fp, #1
 800d97c:	463a      	mov	r2, r7
 800d97e:	4616      	mov	r6, r2
 800d980:	3201      	adds	r2, #1
 800d982:	7830      	ldrb	r0, [r6, #0]
 800d984:	f7ff ffa4 	bl	800d8d0 <__hexdig_fun>
 800d988:	2800      	cmp	r0, #0
 800d98a:	d1f8      	bne.n	800d97e <__gethex+0x84>
 800d98c:	9a01      	ldr	r2, [sp, #4]
 800d98e:	9903      	ldr	r1, [sp, #12]
 800d990:	4630      	mov	r0, r6
 800d992:	f001 fab6 	bl	800ef02 <strncmp>
 800d996:	b950      	cbnz	r0, 800d9ae <__gethex+0xb4>
 800d998:	b954      	cbnz	r4, 800d9b0 <__gethex+0xb6>
 800d99a:	9b01      	ldr	r3, [sp, #4]
 800d99c:	18f4      	adds	r4, r6, r3
 800d99e:	4622      	mov	r2, r4
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	7830      	ldrb	r0, [r6, #0]
 800d9a6:	f7ff ff93 	bl	800d8d0 <__hexdig_fun>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d1f8      	bne.n	800d9a0 <__gethex+0xa6>
 800d9ae:	b10c      	cbz	r4, 800d9b4 <__gethex+0xba>
 800d9b0:	1ba4      	subs	r4, r4, r6
 800d9b2:	00a4      	lsls	r4, r4, #2
 800d9b4:	7833      	ldrb	r3, [r6, #0]
 800d9b6:	2b50      	cmp	r3, #80	; 0x50
 800d9b8:	d001      	beq.n	800d9be <__gethex+0xc4>
 800d9ba:	2b70      	cmp	r3, #112	; 0x70
 800d9bc:	d140      	bne.n	800da40 <__gethex+0x146>
 800d9be:	7873      	ldrb	r3, [r6, #1]
 800d9c0:	2b2b      	cmp	r3, #43	; 0x2b
 800d9c2:	d031      	beq.n	800da28 <__gethex+0x12e>
 800d9c4:	2b2d      	cmp	r3, #45	; 0x2d
 800d9c6:	d033      	beq.n	800da30 <__gethex+0x136>
 800d9c8:	1c71      	adds	r1, r6, #1
 800d9ca:	f04f 0900 	mov.w	r9, #0
 800d9ce:	7808      	ldrb	r0, [r1, #0]
 800d9d0:	f7ff ff7e 	bl	800d8d0 <__hexdig_fun>
 800d9d4:	1e43      	subs	r3, r0, #1
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b18      	cmp	r3, #24
 800d9da:	d831      	bhi.n	800da40 <__gethex+0x146>
 800d9dc:	f1a0 0210 	sub.w	r2, r0, #16
 800d9e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9e4:	f7ff ff74 	bl	800d8d0 <__hexdig_fun>
 800d9e8:	1e43      	subs	r3, r0, #1
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b18      	cmp	r3, #24
 800d9ee:	d922      	bls.n	800da36 <__gethex+0x13c>
 800d9f0:	f1b9 0f00 	cmp.w	r9, #0
 800d9f4:	d000      	beq.n	800d9f8 <__gethex+0xfe>
 800d9f6:	4252      	negs	r2, r2
 800d9f8:	4414      	add	r4, r2
 800d9fa:	f8ca 1000 	str.w	r1, [sl]
 800d9fe:	b30d      	cbz	r5, 800da44 <__gethex+0x14a>
 800da00:	f1bb 0f00 	cmp.w	fp, #0
 800da04:	bf0c      	ite	eq
 800da06:	2706      	moveq	r7, #6
 800da08:	2700      	movne	r7, #0
 800da0a:	4638      	mov	r0, r7
 800da0c:	b00b      	add	sp, #44	; 0x2c
 800da0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da12:	f10b 0b01 	add.w	fp, fp, #1
 800da16:	e78a      	b.n	800d92e <__gethex+0x34>
 800da18:	2500      	movs	r5, #0
 800da1a:	462c      	mov	r4, r5
 800da1c:	e7ae      	b.n	800d97c <__gethex+0x82>
 800da1e:	463e      	mov	r6, r7
 800da20:	2501      	movs	r5, #1
 800da22:	e7c7      	b.n	800d9b4 <__gethex+0xba>
 800da24:	4604      	mov	r4, r0
 800da26:	e7fb      	b.n	800da20 <__gethex+0x126>
 800da28:	f04f 0900 	mov.w	r9, #0
 800da2c:	1cb1      	adds	r1, r6, #2
 800da2e:	e7ce      	b.n	800d9ce <__gethex+0xd4>
 800da30:	f04f 0901 	mov.w	r9, #1
 800da34:	e7fa      	b.n	800da2c <__gethex+0x132>
 800da36:	230a      	movs	r3, #10
 800da38:	fb03 0202 	mla	r2, r3, r2, r0
 800da3c:	3a10      	subs	r2, #16
 800da3e:	e7cf      	b.n	800d9e0 <__gethex+0xe6>
 800da40:	4631      	mov	r1, r6
 800da42:	e7da      	b.n	800d9fa <__gethex+0x100>
 800da44:	1bf3      	subs	r3, r6, r7
 800da46:	3b01      	subs	r3, #1
 800da48:	4629      	mov	r1, r5
 800da4a:	2b07      	cmp	r3, #7
 800da4c:	dc49      	bgt.n	800dae2 <__gethex+0x1e8>
 800da4e:	9802      	ldr	r0, [sp, #8]
 800da50:	f000 fabc 	bl	800dfcc <_Balloc>
 800da54:	9b01      	ldr	r3, [sp, #4]
 800da56:	f100 0914 	add.w	r9, r0, #20
 800da5a:	f04f 0b00 	mov.w	fp, #0
 800da5e:	f1c3 0301 	rsb	r3, r3, #1
 800da62:	4605      	mov	r5, r0
 800da64:	f8cd 9010 	str.w	r9, [sp, #16]
 800da68:	46da      	mov	sl, fp
 800da6a:	9308      	str	r3, [sp, #32]
 800da6c:	42b7      	cmp	r7, r6
 800da6e:	d33b      	bcc.n	800dae8 <__gethex+0x1ee>
 800da70:	9804      	ldr	r0, [sp, #16]
 800da72:	f840 ab04 	str.w	sl, [r0], #4
 800da76:	eba0 0009 	sub.w	r0, r0, r9
 800da7a:	1080      	asrs	r0, r0, #2
 800da7c:	6128      	str	r0, [r5, #16]
 800da7e:	0147      	lsls	r7, r0, #5
 800da80:	4650      	mov	r0, sl
 800da82:	f000 fb67 	bl	800e154 <__hi0bits>
 800da86:	f8d8 6000 	ldr.w	r6, [r8]
 800da8a:	1a3f      	subs	r7, r7, r0
 800da8c:	42b7      	cmp	r7, r6
 800da8e:	dd64      	ble.n	800db5a <__gethex+0x260>
 800da90:	1bbf      	subs	r7, r7, r6
 800da92:	4639      	mov	r1, r7
 800da94:	4628      	mov	r0, r5
 800da96:	f000 fe77 	bl	800e788 <__any_on>
 800da9a:	4682      	mov	sl, r0
 800da9c:	b178      	cbz	r0, 800dabe <__gethex+0x1c4>
 800da9e:	1e7b      	subs	r3, r7, #1
 800daa0:	1159      	asrs	r1, r3, #5
 800daa2:	f003 021f 	and.w	r2, r3, #31
 800daa6:	f04f 0a01 	mov.w	sl, #1
 800daaa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800daae:	fa0a f202 	lsl.w	r2, sl, r2
 800dab2:	420a      	tst	r2, r1
 800dab4:	d003      	beq.n	800dabe <__gethex+0x1c4>
 800dab6:	4553      	cmp	r3, sl
 800dab8:	dc46      	bgt.n	800db48 <__gethex+0x24e>
 800daba:	f04f 0a02 	mov.w	sl, #2
 800dabe:	4639      	mov	r1, r7
 800dac0:	4628      	mov	r0, r5
 800dac2:	f7ff fecb 	bl	800d85c <rshift>
 800dac6:	443c      	add	r4, r7
 800dac8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dacc:	42a3      	cmp	r3, r4
 800dace:	da52      	bge.n	800db76 <__gethex+0x27c>
 800dad0:	4629      	mov	r1, r5
 800dad2:	9802      	ldr	r0, [sp, #8]
 800dad4:	f000 faae 	bl	800e034 <_Bfree>
 800dad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dada:	2300      	movs	r3, #0
 800dadc:	6013      	str	r3, [r2, #0]
 800dade:	27a3      	movs	r7, #163	; 0xa3
 800dae0:	e793      	b.n	800da0a <__gethex+0x110>
 800dae2:	3101      	adds	r1, #1
 800dae4:	105b      	asrs	r3, r3, #1
 800dae6:	e7b0      	b.n	800da4a <__gethex+0x150>
 800dae8:	1e73      	subs	r3, r6, #1
 800daea:	9305      	str	r3, [sp, #20]
 800daec:	9a07      	ldr	r2, [sp, #28]
 800daee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d018      	beq.n	800db28 <__gethex+0x22e>
 800daf6:	f1bb 0f20 	cmp.w	fp, #32
 800dafa:	d107      	bne.n	800db0c <__gethex+0x212>
 800dafc:	9b04      	ldr	r3, [sp, #16]
 800dafe:	f8c3 a000 	str.w	sl, [r3]
 800db02:	3304      	adds	r3, #4
 800db04:	f04f 0a00 	mov.w	sl, #0
 800db08:	9304      	str	r3, [sp, #16]
 800db0a:	46d3      	mov	fp, sl
 800db0c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800db10:	f7ff fede 	bl	800d8d0 <__hexdig_fun>
 800db14:	f000 000f 	and.w	r0, r0, #15
 800db18:	fa00 f00b 	lsl.w	r0, r0, fp
 800db1c:	ea4a 0a00 	orr.w	sl, sl, r0
 800db20:	f10b 0b04 	add.w	fp, fp, #4
 800db24:	9b05      	ldr	r3, [sp, #20]
 800db26:	e00d      	b.n	800db44 <__gethex+0x24a>
 800db28:	9b05      	ldr	r3, [sp, #20]
 800db2a:	9a08      	ldr	r2, [sp, #32]
 800db2c:	4413      	add	r3, r2
 800db2e:	42bb      	cmp	r3, r7
 800db30:	d3e1      	bcc.n	800daf6 <__gethex+0x1fc>
 800db32:	4618      	mov	r0, r3
 800db34:	9a01      	ldr	r2, [sp, #4]
 800db36:	9903      	ldr	r1, [sp, #12]
 800db38:	9309      	str	r3, [sp, #36]	; 0x24
 800db3a:	f001 f9e2 	bl	800ef02 <strncmp>
 800db3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db40:	2800      	cmp	r0, #0
 800db42:	d1d8      	bne.n	800daf6 <__gethex+0x1fc>
 800db44:	461e      	mov	r6, r3
 800db46:	e791      	b.n	800da6c <__gethex+0x172>
 800db48:	1eb9      	subs	r1, r7, #2
 800db4a:	4628      	mov	r0, r5
 800db4c:	f000 fe1c 	bl	800e788 <__any_on>
 800db50:	2800      	cmp	r0, #0
 800db52:	d0b2      	beq.n	800daba <__gethex+0x1c0>
 800db54:	f04f 0a03 	mov.w	sl, #3
 800db58:	e7b1      	b.n	800dabe <__gethex+0x1c4>
 800db5a:	da09      	bge.n	800db70 <__gethex+0x276>
 800db5c:	1bf7      	subs	r7, r6, r7
 800db5e:	4629      	mov	r1, r5
 800db60:	463a      	mov	r2, r7
 800db62:	9802      	ldr	r0, [sp, #8]
 800db64:	f000 fc32 	bl	800e3cc <__lshift>
 800db68:	1be4      	subs	r4, r4, r7
 800db6a:	4605      	mov	r5, r0
 800db6c:	f100 0914 	add.w	r9, r0, #20
 800db70:	f04f 0a00 	mov.w	sl, #0
 800db74:	e7a8      	b.n	800dac8 <__gethex+0x1ce>
 800db76:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db7a:	42a0      	cmp	r0, r4
 800db7c:	dd6a      	ble.n	800dc54 <__gethex+0x35a>
 800db7e:	1b04      	subs	r4, r0, r4
 800db80:	42a6      	cmp	r6, r4
 800db82:	dc2e      	bgt.n	800dbe2 <__gethex+0x2e8>
 800db84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d022      	beq.n	800dbd2 <__gethex+0x2d8>
 800db8c:	2b03      	cmp	r3, #3
 800db8e:	d024      	beq.n	800dbda <__gethex+0x2e0>
 800db90:	2b01      	cmp	r3, #1
 800db92:	d115      	bne.n	800dbc0 <__gethex+0x2c6>
 800db94:	42a6      	cmp	r6, r4
 800db96:	d113      	bne.n	800dbc0 <__gethex+0x2c6>
 800db98:	2e01      	cmp	r6, #1
 800db9a:	dc0b      	bgt.n	800dbb4 <__gethex+0x2ba>
 800db9c:	9a06      	ldr	r2, [sp, #24]
 800db9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	2301      	movs	r3, #1
 800dba6:	612b      	str	r3, [r5, #16]
 800dba8:	f8c9 3000 	str.w	r3, [r9]
 800dbac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dbae:	2762      	movs	r7, #98	; 0x62
 800dbb0:	601d      	str	r5, [r3, #0]
 800dbb2:	e72a      	b.n	800da0a <__gethex+0x110>
 800dbb4:	1e71      	subs	r1, r6, #1
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	f000 fde6 	bl	800e788 <__any_on>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d1ed      	bne.n	800db9c <__gethex+0x2a2>
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	9802      	ldr	r0, [sp, #8]
 800dbc4:	f000 fa36 	bl	800e034 <_Bfree>
 800dbc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbca:	2300      	movs	r3, #0
 800dbcc:	6013      	str	r3, [r2, #0]
 800dbce:	2750      	movs	r7, #80	; 0x50
 800dbd0:	e71b      	b.n	800da0a <__gethex+0x110>
 800dbd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d0e1      	beq.n	800db9c <__gethex+0x2a2>
 800dbd8:	e7f2      	b.n	800dbc0 <__gethex+0x2c6>
 800dbda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1dd      	bne.n	800db9c <__gethex+0x2a2>
 800dbe0:	e7ee      	b.n	800dbc0 <__gethex+0x2c6>
 800dbe2:	1e67      	subs	r7, r4, #1
 800dbe4:	f1ba 0f00 	cmp.w	sl, #0
 800dbe8:	d131      	bne.n	800dc4e <__gethex+0x354>
 800dbea:	b127      	cbz	r7, 800dbf6 <__gethex+0x2fc>
 800dbec:	4639      	mov	r1, r7
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f000 fdca 	bl	800e788 <__any_on>
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	117a      	asrs	r2, r7, #5
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f007 071f 	and.w	r7, r7, #31
 800dbfe:	fa03 f707 	lsl.w	r7, r3, r7
 800dc02:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dc06:	4621      	mov	r1, r4
 800dc08:	421f      	tst	r7, r3
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	bf18      	it	ne
 800dc0e:	f04a 0a02 	orrne.w	sl, sl, #2
 800dc12:	1b36      	subs	r6, r6, r4
 800dc14:	f7ff fe22 	bl	800d85c <rshift>
 800dc18:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dc1c:	2702      	movs	r7, #2
 800dc1e:	f1ba 0f00 	cmp.w	sl, #0
 800dc22:	d048      	beq.n	800dcb6 <__gethex+0x3bc>
 800dc24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d015      	beq.n	800dc58 <__gethex+0x35e>
 800dc2c:	2b03      	cmp	r3, #3
 800dc2e:	d017      	beq.n	800dc60 <__gethex+0x366>
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d109      	bne.n	800dc48 <__gethex+0x34e>
 800dc34:	f01a 0f02 	tst.w	sl, #2
 800dc38:	d006      	beq.n	800dc48 <__gethex+0x34e>
 800dc3a:	f8d9 3000 	ldr.w	r3, [r9]
 800dc3e:	ea4a 0a03 	orr.w	sl, sl, r3
 800dc42:	f01a 0f01 	tst.w	sl, #1
 800dc46:	d10e      	bne.n	800dc66 <__gethex+0x36c>
 800dc48:	f047 0710 	orr.w	r7, r7, #16
 800dc4c:	e033      	b.n	800dcb6 <__gethex+0x3bc>
 800dc4e:	f04f 0a01 	mov.w	sl, #1
 800dc52:	e7d0      	b.n	800dbf6 <__gethex+0x2fc>
 800dc54:	2701      	movs	r7, #1
 800dc56:	e7e2      	b.n	800dc1e <__gethex+0x324>
 800dc58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc5a:	f1c3 0301 	rsb	r3, r3, #1
 800dc5e:	9315      	str	r3, [sp, #84]	; 0x54
 800dc60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d0f0      	beq.n	800dc48 <__gethex+0x34e>
 800dc66:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dc6a:	f105 0314 	add.w	r3, r5, #20
 800dc6e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dc72:	eb03 010a 	add.w	r1, r3, sl
 800dc76:	f04f 0c00 	mov.w	ip, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc80:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc84:	d01c      	beq.n	800dcc0 <__gethex+0x3c6>
 800dc86:	3201      	adds	r2, #1
 800dc88:	6002      	str	r2, [r0, #0]
 800dc8a:	2f02      	cmp	r7, #2
 800dc8c:	f105 0314 	add.w	r3, r5, #20
 800dc90:	d138      	bne.n	800dd04 <__gethex+0x40a>
 800dc92:	f8d8 2000 	ldr.w	r2, [r8]
 800dc96:	3a01      	subs	r2, #1
 800dc98:	42b2      	cmp	r2, r6
 800dc9a:	d10a      	bne.n	800dcb2 <__gethex+0x3b8>
 800dc9c:	1171      	asrs	r1, r6, #5
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f006 061f 	and.w	r6, r6, #31
 800dca4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dca8:	fa02 f606 	lsl.w	r6, r2, r6
 800dcac:	421e      	tst	r6, r3
 800dcae:	bf18      	it	ne
 800dcb0:	4617      	movne	r7, r2
 800dcb2:	f047 0720 	orr.w	r7, r7, #32
 800dcb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcb8:	601d      	str	r5, [r3, #0]
 800dcba:	9b06      	ldr	r3, [sp, #24]
 800dcbc:	601c      	str	r4, [r3, #0]
 800dcbe:	e6a4      	b.n	800da0a <__gethex+0x110>
 800dcc0:	4299      	cmp	r1, r3
 800dcc2:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcc6:	d8d8      	bhi.n	800dc7a <__gethex+0x380>
 800dcc8:	68ab      	ldr	r3, [r5, #8]
 800dcca:	4599      	cmp	r9, r3
 800dccc:	db12      	blt.n	800dcf4 <__gethex+0x3fa>
 800dcce:	6869      	ldr	r1, [r5, #4]
 800dcd0:	9802      	ldr	r0, [sp, #8]
 800dcd2:	3101      	adds	r1, #1
 800dcd4:	f000 f97a 	bl	800dfcc <_Balloc>
 800dcd8:	692a      	ldr	r2, [r5, #16]
 800dcda:	3202      	adds	r2, #2
 800dcdc:	f105 010c 	add.w	r1, r5, #12
 800dce0:	4683      	mov	fp, r0
 800dce2:	0092      	lsls	r2, r2, #2
 800dce4:	300c      	adds	r0, #12
 800dce6:	f7fc ff95 	bl	800ac14 <memcpy>
 800dcea:	4629      	mov	r1, r5
 800dcec:	9802      	ldr	r0, [sp, #8]
 800dcee:	f000 f9a1 	bl	800e034 <_Bfree>
 800dcf2:	465d      	mov	r5, fp
 800dcf4:	692b      	ldr	r3, [r5, #16]
 800dcf6:	1c5a      	adds	r2, r3, #1
 800dcf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dcfc:	612a      	str	r2, [r5, #16]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	615a      	str	r2, [r3, #20]
 800dd02:	e7c2      	b.n	800dc8a <__gethex+0x390>
 800dd04:	692a      	ldr	r2, [r5, #16]
 800dd06:	454a      	cmp	r2, r9
 800dd08:	dd0b      	ble.n	800dd22 <__gethex+0x428>
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f7ff fda5 	bl	800d85c <rshift>
 800dd12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd16:	3401      	adds	r4, #1
 800dd18:	42a3      	cmp	r3, r4
 800dd1a:	f6ff aed9 	blt.w	800dad0 <__gethex+0x1d6>
 800dd1e:	2701      	movs	r7, #1
 800dd20:	e7c7      	b.n	800dcb2 <__gethex+0x3b8>
 800dd22:	f016 061f 	ands.w	r6, r6, #31
 800dd26:	d0fa      	beq.n	800dd1e <__gethex+0x424>
 800dd28:	449a      	add	sl, r3
 800dd2a:	f1c6 0620 	rsb	r6, r6, #32
 800dd2e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dd32:	f000 fa0f 	bl	800e154 <__hi0bits>
 800dd36:	42b0      	cmp	r0, r6
 800dd38:	dbe7      	blt.n	800dd0a <__gethex+0x410>
 800dd3a:	e7f0      	b.n	800dd1e <__gethex+0x424>

0800dd3c <L_shift>:
 800dd3c:	f1c2 0208 	rsb	r2, r2, #8
 800dd40:	0092      	lsls	r2, r2, #2
 800dd42:	b570      	push	{r4, r5, r6, lr}
 800dd44:	f1c2 0620 	rsb	r6, r2, #32
 800dd48:	6843      	ldr	r3, [r0, #4]
 800dd4a:	6804      	ldr	r4, [r0, #0]
 800dd4c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd50:	432c      	orrs	r4, r5
 800dd52:	40d3      	lsrs	r3, r2
 800dd54:	6004      	str	r4, [r0, #0]
 800dd56:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd5a:	4288      	cmp	r0, r1
 800dd5c:	d3f4      	bcc.n	800dd48 <L_shift+0xc>
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}

0800dd60 <__match>:
 800dd60:	b530      	push	{r4, r5, lr}
 800dd62:	6803      	ldr	r3, [r0, #0]
 800dd64:	3301      	adds	r3, #1
 800dd66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd6a:	b914      	cbnz	r4, 800dd72 <__match+0x12>
 800dd6c:	6003      	str	r3, [r0, #0]
 800dd6e:	2001      	movs	r0, #1
 800dd70:	bd30      	pop	{r4, r5, pc}
 800dd72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd7a:	2d19      	cmp	r5, #25
 800dd7c:	bf98      	it	ls
 800dd7e:	3220      	addls	r2, #32
 800dd80:	42a2      	cmp	r2, r4
 800dd82:	d0f0      	beq.n	800dd66 <__match+0x6>
 800dd84:	2000      	movs	r0, #0
 800dd86:	e7f3      	b.n	800dd70 <__match+0x10>

0800dd88 <__hexnan>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	680b      	ldr	r3, [r1, #0]
 800dd8e:	6801      	ldr	r1, [r0, #0]
 800dd90:	115f      	asrs	r7, r3, #5
 800dd92:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800dd96:	f013 031f 	ands.w	r3, r3, #31
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	bf18      	it	ne
 800dd9e:	3704      	addne	r7, #4
 800dda0:	2500      	movs	r5, #0
 800dda2:	1f3e      	subs	r6, r7, #4
 800dda4:	4682      	mov	sl, r0
 800dda6:	4690      	mov	r8, r2
 800dda8:	9301      	str	r3, [sp, #4]
 800ddaa:	f847 5c04 	str.w	r5, [r7, #-4]
 800ddae:	46b1      	mov	r9, r6
 800ddb0:	4634      	mov	r4, r6
 800ddb2:	9502      	str	r5, [sp, #8]
 800ddb4:	46ab      	mov	fp, r5
 800ddb6:	784a      	ldrb	r2, [r1, #1]
 800ddb8:	1c4b      	adds	r3, r1, #1
 800ddba:	9303      	str	r3, [sp, #12]
 800ddbc:	b342      	cbz	r2, 800de10 <__hexnan+0x88>
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	9105      	str	r1, [sp, #20]
 800ddc2:	9204      	str	r2, [sp, #16]
 800ddc4:	f7ff fd84 	bl	800d8d0 <__hexdig_fun>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d143      	bne.n	800de54 <__hexnan+0xcc>
 800ddcc:	9a04      	ldr	r2, [sp, #16]
 800ddce:	9905      	ldr	r1, [sp, #20]
 800ddd0:	2a20      	cmp	r2, #32
 800ddd2:	d818      	bhi.n	800de06 <__hexnan+0x7e>
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	459b      	cmp	fp, r3
 800ddd8:	dd13      	ble.n	800de02 <__hexnan+0x7a>
 800ddda:	454c      	cmp	r4, r9
 800dddc:	d206      	bcs.n	800ddec <__hexnan+0x64>
 800ddde:	2d07      	cmp	r5, #7
 800dde0:	dc04      	bgt.n	800ddec <__hexnan+0x64>
 800dde2:	462a      	mov	r2, r5
 800dde4:	4649      	mov	r1, r9
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7ff ffa8 	bl	800dd3c <L_shift>
 800ddec:	4544      	cmp	r4, r8
 800ddee:	d944      	bls.n	800de7a <__hexnan+0xf2>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	f1a4 0904 	sub.w	r9, r4, #4
 800ddf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddfa:	f8cd b008 	str.w	fp, [sp, #8]
 800ddfe:	464c      	mov	r4, r9
 800de00:	461d      	mov	r5, r3
 800de02:	9903      	ldr	r1, [sp, #12]
 800de04:	e7d7      	b.n	800ddb6 <__hexnan+0x2e>
 800de06:	2a29      	cmp	r2, #41	; 0x29
 800de08:	d14a      	bne.n	800dea0 <__hexnan+0x118>
 800de0a:	3102      	adds	r1, #2
 800de0c:	f8ca 1000 	str.w	r1, [sl]
 800de10:	f1bb 0f00 	cmp.w	fp, #0
 800de14:	d044      	beq.n	800dea0 <__hexnan+0x118>
 800de16:	454c      	cmp	r4, r9
 800de18:	d206      	bcs.n	800de28 <__hexnan+0xa0>
 800de1a:	2d07      	cmp	r5, #7
 800de1c:	dc04      	bgt.n	800de28 <__hexnan+0xa0>
 800de1e:	462a      	mov	r2, r5
 800de20:	4649      	mov	r1, r9
 800de22:	4620      	mov	r0, r4
 800de24:	f7ff ff8a 	bl	800dd3c <L_shift>
 800de28:	4544      	cmp	r4, r8
 800de2a:	d928      	bls.n	800de7e <__hexnan+0xf6>
 800de2c:	4643      	mov	r3, r8
 800de2e:	f854 2b04 	ldr.w	r2, [r4], #4
 800de32:	f843 2b04 	str.w	r2, [r3], #4
 800de36:	42a6      	cmp	r6, r4
 800de38:	d2f9      	bcs.n	800de2e <__hexnan+0xa6>
 800de3a:	2200      	movs	r2, #0
 800de3c:	f843 2b04 	str.w	r2, [r3], #4
 800de40:	429e      	cmp	r6, r3
 800de42:	d2fb      	bcs.n	800de3c <__hexnan+0xb4>
 800de44:	6833      	ldr	r3, [r6, #0]
 800de46:	b91b      	cbnz	r3, 800de50 <__hexnan+0xc8>
 800de48:	4546      	cmp	r6, r8
 800de4a:	d127      	bne.n	800de9c <__hexnan+0x114>
 800de4c:	2301      	movs	r3, #1
 800de4e:	6033      	str	r3, [r6, #0]
 800de50:	2005      	movs	r0, #5
 800de52:	e026      	b.n	800dea2 <__hexnan+0x11a>
 800de54:	3501      	adds	r5, #1
 800de56:	2d08      	cmp	r5, #8
 800de58:	f10b 0b01 	add.w	fp, fp, #1
 800de5c:	dd06      	ble.n	800de6c <__hexnan+0xe4>
 800de5e:	4544      	cmp	r4, r8
 800de60:	d9cf      	bls.n	800de02 <__hexnan+0x7a>
 800de62:	2300      	movs	r3, #0
 800de64:	f844 3c04 	str.w	r3, [r4, #-4]
 800de68:	2501      	movs	r5, #1
 800de6a:	3c04      	subs	r4, #4
 800de6c:	6822      	ldr	r2, [r4, #0]
 800de6e:	f000 000f 	and.w	r0, r0, #15
 800de72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de76:	6020      	str	r0, [r4, #0]
 800de78:	e7c3      	b.n	800de02 <__hexnan+0x7a>
 800de7a:	2508      	movs	r5, #8
 800de7c:	e7c1      	b.n	800de02 <__hexnan+0x7a>
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d0df      	beq.n	800de44 <__hexnan+0xbc>
 800de84:	f04f 32ff 	mov.w	r2, #4294967295
 800de88:	f1c3 0320 	rsb	r3, r3, #32
 800de8c:	fa22 f303 	lsr.w	r3, r2, r3
 800de90:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800de94:	401a      	ands	r2, r3
 800de96:	f847 2c04 	str.w	r2, [r7, #-4]
 800de9a:	e7d3      	b.n	800de44 <__hexnan+0xbc>
 800de9c:	3e04      	subs	r6, #4
 800de9e:	e7d1      	b.n	800de44 <__hexnan+0xbc>
 800dea0:	2004      	movs	r0, #4
 800dea2:	b007      	add	sp, #28
 800dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dea8 <__locale_ctype_ptr_l>:
 800dea8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800deac:	4770      	bx	lr

0800deae <__localeconv_l>:
 800deae:	30f0      	adds	r0, #240	; 0xf0
 800deb0:	4770      	bx	lr
	...

0800deb4 <_localeconv_r>:
 800deb4:	4b04      	ldr	r3, [pc, #16]	; (800dec8 <_localeconv_r+0x14>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6a18      	ldr	r0, [r3, #32]
 800deba:	4b04      	ldr	r3, [pc, #16]	; (800decc <_localeconv_r+0x18>)
 800debc:	2800      	cmp	r0, #0
 800debe:	bf08      	it	eq
 800dec0:	4618      	moveq	r0, r3
 800dec2:	30f0      	adds	r0, #240	; 0xf0
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	20000040 	.word	0x20000040
 800decc:	200000a4 	.word	0x200000a4

0800ded0 <__swhatbuf_r>:
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	460e      	mov	r6, r1
 800ded4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded8:	2900      	cmp	r1, #0
 800deda:	b096      	sub	sp, #88	; 0x58
 800dedc:	4614      	mov	r4, r2
 800dede:	461d      	mov	r5, r3
 800dee0:	da07      	bge.n	800def2 <__swhatbuf_r+0x22>
 800dee2:	2300      	movs	r3, #0
 800dee4:	602b      	str	r3, [r5, #0]
 800dee6:	89b3      	ldrh	r3, [r6, #12]
 800dee8:	061a      	lsls	r2, r3, #24
 800deea:	d410      	bmi.n	800df0e <__swhatbuf_r+0x3e>
 800deec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800def0:	e00e      	b.n	800df10 <__swhatbuf_r+0x40>
 800def2:	466a      	mov	r2, sp
 800def4:	f001 f846 	bl	800ef84 <_fstat_r>
 800def8:	2800      	cmp	r0, #0
 800defa:	dbf2      	blt.n	800dee2 <__swhatbuf_r+0x12>
 800defc:	9a01      	ldr	r2, [sp, #4]
 800defe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df06:	425a      	negs	r2, r3
 800df08:	415a      	adcs	r2, r3
 800df0a:	602a      	str	r2, [r5, #0]
 800df0c:	e7ee      	b.n	800deec <__swhatbuf_r+0x1c>
 800df0e:	2340      	movs	r3, #64	; 0x40
 800df10:	2000      	movs	r0, #0
 800df12:	6023      	str	r3, [r4, #0]
 800df14:	b016      	add	sp, #88	; 0x58
 800df16:	bd70      	pop	{r4, r5, r6, pc}

0800df18 <__smakebuf_r>:
 800df18:	898b      	ldrh	r3, [r1, #12]
 800df1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df1c:	079d      	lsls	r5, r3, #30
 800df1e:	4606      	mov	r6, r0
 800df20:	460c      	mov	r4, r1
 800df22:	d507      	bpl.n	800df34 <__smakebuf_r+0x1c>
 800df24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	6123      	str	r3, [r4, #16]
 800df2c:	2301      	movs	r3, #1
 800df2e:	6163      	str	r3, [r4, #20]
 800df30:	b002      	add	sp, #8
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	ab01      	add	r3, sp, #4
 800df36:	466a      	mov	r2, sp
 800df38:	f7ff ffca 	bl	800ded0 <__swhatbuf_r>
 800df3c:	9900      	ldr	r1, [sp, #0]
 800df3e:	4605      	mov	r5, r0
 800df40:	4630      	mov	r0, r6
 800df42:	f000 fc9f 	bl	800e884 <_malloc_r>
 800df46:	b948      	cbnz	r0, 800df5c <__smakebuf_r+0x44>
 800df48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df4c:	059a      	lsls	r2, r3, #22
 800df4e:	d4ef      	bmi.n	800df30 <__smakebuf_r+0x18>
 800df50:	f023 0303 	bic.w	r3, r3, #3
 800df54:	f043 0302 	orr.w	r3, r3, #2
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	e7e3      	b.n	800df24 <__smakebuf_r+0xc>
 800df5c:	4b0d      	ldr	r3, [pc, #52]	; (800df94 <__smakebuf_r+0x7c>)
 800df5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	6020      	str	r0, [r4, #0]
 800df64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	9b00      	ldr	r3, [sp, #0]
 800df6c:	6163      	str	r3, [r4, #20]
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	6120      	str	r0, [r4, #16]
 800df72:	b15b      	cbz	r3, 800df8c <__smakebuf_r+0x74>
 800df74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df78:	4630      	mov	r0, r6
 800df7a:	f001 f815 	bl	800efa8 <_isatty_r>
 800df7e:	b128      	cbz	r0, 800df8c <__smakebuf_r+0x74>
 800df80:	89a3      	ldrh	r3, [r4, #12]
 800df82:	f023 0303 	bic.w	r3, r3, #3
 800df86:	f043 0301 	orr.w	r3, r3, #1
 800df8a:	81a3      	strh	r3, [r4, #12]
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	431d      	orrs	r5, r3
 800df90:	81a5      	strh	r5, [r4, #12]
 800df92:	e7cd      	b.n	800df30 <__smakebuf_r+0x18>
 800df94:	0800d711 	.word	0x0800d711

0800df98 <malloc>:
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <malloc+0xc>)
 800df9a:	4601      	mov	r1, r0
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	f000 bc71 	b.w	800e884 <_malloc_r>
 800dfa2:	bf00      	nop
 800dfa4:	20000040 	.word	0x20000040

0800dfa8 <__ascii_mbtowc>:
 800dfa8:	b082      	sub	sp, #8
 800dfaa:	b901      	cbnz	r1, 800dfae <__ascii_mbtowc+0x6>
 800dfac:	a901      	add	r1, sp, #4
 800dfae:	b142      	cbz	r2, 800dfc2 <__ascii_mbtowc+0x1a>
 800dfb0:	b14b      	cbz	r3, 800dfc6 <__ascii_mbtowc+0x1e>
 800dfb2:	7813      	ldrb	r3, [r2, #0]
 800dfb4:	600b      	str	r3, [r1, #0]
 800dfb6:	7812      	ldrb	r2, [r2, #0]
 800dfb8:	1c10      	adds	r0, r2, #0
 800dfba:	bf18      	it	ne
 800dfbc:	2001      	movne	r0, #1
 800dfbe:	b002      	add	sp, #8
 800dfc0:	4770      	bx	lr
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	e7fb      	b.n	800dfbe <__ascii_mbtowc+0x16>
 800dfc6:	f06f 0001 	mvn.w	r0, #1
 800dfca:	e7f8      	b.n	800dfbe <__ascii_mbtowc+0x16>

0800dfcc <_Balloc>:
 800dfcc:	b570      	push	{r4, r5, r6, lr}
 800dfce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	b93d      	cbnz	r5, 800dfe6 <_Balloc+0x1a>
 800dfd6:	2010      	movs	r0, #16
 800dfd8:	f7ff ffde 	bl	800df98 <malloc>
 800dfdc:	6260      	str	r0, [r4, #36]	; 0x24
 800dfde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfe2:	6005      	str	r5, [r0, #0]
 800dfe4:	60c5      	str	r5, [r0, #12]
 800dfe6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dfe8:	68eb      	ldr	r3, [r5, #12]
 800dfea:	b183      	cbz	r3, 800e00e <_Balloc+0x42>
 800dfec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dff4:	b9b8      	cbnz	r0, 800e026 <_Balloc+0x5a>
 800dff6:	2101      	movs	r1, #1
 800dff8:	fa01 f506 	lsl.w	r5, r1, r6
 800dffc:	1d6a      	adds	r2, r5, #5
 800dffe:	0092      	lsls	r2, r2, #2
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fbe2 	bl	800e7ca <_calloc_r>
 800e006:	b160      	cbz	r0, 800e022 <_Balloc+0x56>
 800e008:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e00c:	e00e      	b.n	800e02c <_Balloc+0x60>
 800e00e:	2221      	movs	r2, #33	; 0x21
 800e010:	2104      	movs	r1, #4
 800e012:	4620      	mov	r0, r4
 800e014:	f000 fbd9 	bl	800e7ca <_calloc_r>
 800e018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e01a:	60e8      	str	r0, [r5, #12]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1e4      	bne.n	800dfec <_Balloc+0x20>
 800e022:	2000      	movs	r0, #0
 800e024:	bd70      	pop	{r4, r5, r6, pc}
 800e026:	6802      	ldr	r2, [r0, #0]
 800e028:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e02c:	2300      	movs	r3, #0
 800e02e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e032:	e7f7      	b.n	800e024 <_Balloc+0x58>

0800e034 <_Bfree>:
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e038:	4606      	mov	r6, r0
 800e03a:	460d      	mov	r5, r1
 800e03c:	b93c      	cbnz	r4, 800e04e <_Bfree+0x1a>
 800e03e:	2010      	movs	r0, #16
 800e040:	f7ff ffaa 	bl	800df98 <malloc>
 800e044:	6270      	str	r0, [r6, #36]	; 0x24
 800e046:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e04a:	6004      	str	r4, [r0, #0]
 800e04c:	60c4      	str	r4, [r0, #12]
 800e04e:	b13d      	cbz	r5, 800e060 <_Bfree+0x2c>
 800e050:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e052:	686a      	ldr	r2, [r5, #4]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e05a:	6029      	str	r1, [r5, #0]
 800e05c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e060:	bd70      	pop	{r4, r5, r6, pc}

0800e062 <__multadd>:
 800e062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e066:	690d      	ldr	r5, [r1, #16]
 800e068:	461f      	mov	r7, r3
 800e06a:	4606      	mov	r6, r0
 800e06c:	460c      	mov	r4, r1
 800e06e:	f101 0c14 	add.w	ip, r1, #20
 800e072:	2300      	movs	r3, #0
 800e074:	f8dc 0000 	ldr.w	r0, [ip]
 800e078:	b281      	uxth	r1, r0
 800e07a:	fb02 7101 	mla	r1, r2, r1, r7
 800e07e:	0c0f      	lsrs	r7, r1, #16
 800e080:	0c00      	lsrs	r0, r0, #16
 800e082:	fb02 7000 	mla	r0, r2, r0, r7
 800e086:	b289      	uxth	r1, r1
 800e088:	3301      	adds	r3, #1
 800e08a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e08e:	429d      	cmp	r5, r3
 800e090:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e094:	f84c 1b04 	str.w	r1, [ip], #4
 800e098:	dcec      	bgt.n	800e074 <__multadd+0x12>
 800e09a:	b1d7      	cbz	r7, 800e0d2 <__multadd+0x70>
 800e09c:	68a3      	ldr	r3, [r4, #8]
 800e09e:	42ab      	cmp	r3, r5
 800e0a0:	dc12      	bgt.n	800e0c8 <__multadd+0x66>
 800e0a2:	6861      	ldr	r1, [r4, #4]
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	3101      	adds	r1, #1
 800e0a8:	f7ff ff90 	bl	800dfcc <_Balloc>
 800e0ac:	6922      	ldr	r2, [r4, #16]
 800e0ae:	3202      	adds	r2, #2
 800e0b0:	f104 010c 	add.w	r1, r4, #12
 800e0b4:	4680      	mov	r8, r0
 800e0b6:	0092      	lsls	r2, r2, #2
 800e0b8:	300c      	adds	r0, #12
 800e0ba:	f7fc fdab 	bl	800ac14 <memcpy>
 800e0be:	4621      	mov	r1, r4
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f7ff ffb7 	bl	800e034 <_Bfree>
 800e0c6:	4644      	mov	r4, r8
 800e0c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0cc:	3501      	adds	r5, #1
 800e0ce:	615f      	str	r7, [r3, #20]
 800e0d0:	6125      	str	r5, [r4, #16]
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0d8 <__s2b>:
 800e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	460c      	mov	r4, r1
 800e0de:	4615      	mov	r5, r2
 800e0e0:	461f      	mov	r7, r3
 800e0e2:	2209      	movs	r2, #9
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	db20      	blt.n	800e136 <__s2b+0x5e>
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f7ff ff69 	bl	800dfcc <_Balloc>
 800e0fa:	9b08      	ldr	r3, [sp, #32]
 800e0fc:	6143      	str	r3, [r0, #20]
 800e0fe:	2d09      	cmp	r5, #9
 800e100:	f04f 0301 	mov.w	r3, #1
 800e104:	6103      	str	r3, [r0, #16]
 800e106:	dd19      	ble.n	800e13c <__s2b+0x64>
 800e108:	f104 0809 	add.w	r8, r4, #9
 800e10c:	46c1      	mov	r9, r8
 800e10e:	442c      	add	r4, r5
 800e110:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e114:	4601      	mov	r1, r0
 800e116:	3b30      	subs	r3, #48	; 0x30
 800e118:	220a      	movs	r2, #10
 800e11a:	4630      	mov	r0, r6
 800e11c:	f7ff ffa1 	bl	800e062 <__multadd>
 800e120:	45a1      	cmp	r9, r4
 800e122:	d1f5      	bne.n	800e110 <__s2b+0x38>
 800e124:	eb08 0405 	add.w	r4, r8, r5
 800e128:	3c08      	subs	r4, #8
 800e12a:	1b2d      	subs	r5, r5, r4
 800e12c:	1963      	adds	r3, r4, r5
 800e12e:	42bb      	cmp	r3, r7
 800e130:	db07      	blt.n	800e142 <__s2b+0x6a>
 800e132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e136:	0052      	lsls	r2, r2, #1
 800e138:	3101      	adds	r1, #1
 800e13a:	e7d9      	b.n	800e0f0 <__s2b+0x18>
 800e13c:	340a      	adds	r4, #10
 800e13e:	2509      	movs	r5, #9
 800e140:	e7f3      	b.n	800e12a <__s2b+0x52>
 800e142:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e146:	4601      	mov	r1, r0
 800e148:	3b30      	subs	r3, #48	; 0x30
 800e14a:	220a      	movs	r2, #10
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7ff ff88 	bl	800e062 <__multadd>
 800e152:	e7eb      	b.n	800e12c <__s2b+0x54>

0800e154 <__hi0bits>:
 800e154:	0c02      	lsrs	r2, r0, #16
 800e156:	0412      	lsls	r2, r2, #16
 800e158:	4603      	mov	r3, r0
 800e15a:	b9b2      	cbnz	r2, 800e18a <__hi0bits+0x36>
 800e15c:	0403      	lsls	r3, r0, #16
 800e15e:	2010      	movs	r0, #16
 800e160:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e164:	bf04      	itt	eq
 800e166:	021b      	lsleq	r3, r3, #8
 800e168:	3008      	addeq	r0, #8
 800e16a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e16e:	bf04      	itt	eq
 800e170:	011b      	lsleq	r3, r3, #4
 800e172:	3004      	addeq	r0, #4
 800e174:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e178:	bf04      	itt	eq
 800e17a:	009b      	lsleq	r3, r3, #2
 800e17c:	3002      	addeq	r0, #2
 800e17e:	2b00      	cmp	r3, #0
 800e180:	db06      	blt.n	800e190 <__hi0bits+0x3c>
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	d503      	bpl.n	800e18e <__hi0bits+0x3a>
 800e186:	3001      	adds	r0, #1
 800e188:	4770      	bx	lr
 800e18a:	2000      	movs	r0, #0
 800e18c:	e7e8      	b.n	800e160 <__hi0bits+0xc>
 800e18e:	2020      	movs	r0, #32
 800e190:	4770      	bx	lr

0800e192 <__lo0bits>:
 800e192:	6803      	ldr	r3, [r0, #0]
 800e194:	f013 0207 	ands.w	r2, r3, #7
 800e198:	4601      	mov	r1, r0
 800e19a:	d00b      	beq.n	800e1b4 <__lo0bits+0x22>
 800e19c:	07da      	lsls	r2, r3, #31
 800e19e:	d423      	bmi.n	800e1e8 <__lo0bits+0x56>
 800e1a0:	0798      	lsls	r0, r3, #30
 800e1a2:	bf49      	itett	mi
 800e1a4:	085b      	lsrmi	r3, r3, #1
 800e1a6:	089b      	lsrpl	r3, r3, #2
 800e1a8:	2001      	movmi	r0, #1
 800e1aa:	600b      	strmi	r3, [r1, #0]
 800e1ac:	bf5c      	itt	pl
 800e1ae:	600b      	strpl	r3, [r1, #0]
 800e1b0:	2002      	movpl	r0, #2
 800e1b2:	4770      	bx	lr
 800e1b4:	b298      	uxth	r0, r3
 800e1b6:	b9a8      	cbnz	r0, 800e1e4 <__lo0bits+0x52>
 800e1b8:	0c1b      	lsrs	r3, r3, #16
 800e1ba:	2010      	movs	r0, #16
 800e1bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e1c0:	bf04      	itt	eq
 800e1c2:	0a1b      	lsreq	r3, r3, #8
 800e1c4:	3008      	addeq	r0, #8
 800e1c6:	071a      	lsls	r2, r3, #28
 800e1c8:	bf04      	itt	eq
 800e1ca:	091b      	lsreq	r3, r3, #4
 800e1cc:	3004      	addeq	r0, #4
 800e1ce:	079a      	lsls	r2, r3, #30
 800e1d0:	bf04      	itt	eq
 800e1d2:	089b      	lsreq	r3, r3, #2
 800e1d4:	3002      	addeq	r0, #2
 800e1d6:	07da      	lsls	r2, r3, #31
 800e1d8:	d402      	bmi.n	800e1e0 <__lo0bits+0x4e>
 800e1da:	085b      	lsrs	r3, r3, #1
 800e1dc:	d006      	beq.n	800e1ec <__lo0bits+0x5a>
 800e1de:	3001      	adds	r0, #1
 800e1e0:	600b      	str	r3, [r1, #0]
 800e1e2:	4770      	bx	lr
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	e7e9      	b.n	800e1bc <__lo0bits+0x2a>
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	4770      	bx	lr
 800e1ec:	2020      	movs	r0, #32
 800e1ee:	4770      	bx	lr

0800e1f0 <__i2b>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	f7ff fee9 	bl	800dfcc <_Balloc>
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	6144      	str	r4, [r0, #20]
 800e1fe:	6102      	str	r2, [r0, #16]
 800e200:	bd10      	pop	{r4, pc}

0800e202 <__multiply>:
 800e202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e206:	4614      	mov	r4, r2
 800e208:	690a      	ldr	r2, [r1, #16]
 800e20a:	6923      	ldr	r3, [r4, #16]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	bfb8      	it	lt
 800e210:	460b      	movlt	r3, r1
 800e212:	4688      	mov	r8, r1
 800e214:	bfbc      	itt	lt
 800e216:	46a0      	movlt	r8, r4
 800e218:	461c      	movlt	r4, r3
 800e21a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e21e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e226:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e22a:	eb07 0609 	add.w	r6, r7, r9
 800e22e:	42b3      	cmp	r3, r6
 800e230:	bfb8      	it	lt
 800e232:	3101      	addlt	r1, #1
 800e234:	f7ff feca 	bl	800dfcc <_Balloc>
 800e238:	f100 0514 	add.w	r5, r0, #20
 800e23c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e240:	462b      	mov	r3, r5
 800e242:	2200      	movs	r2, #0
 800e244:	4573      	cmp	r3, lr
 800e246:	d316      	bcc.n	800e276 <__multiply+0x74>
 800e248:	f104 0214 	add.w	r2, r4, #20
 800e24c:	f108 0114 	add.w	r1, r8, #20
 800e250:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e254:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	9b00      	ldr	r3, [sp, #0]
 800e25c:	9201      	str	r2, [sp, #4]
 800e25e:	4293      	cmp	r3, r2
 800e260:	d80c      	bhi.n	800e27c <__multiply+0x7a>
 800e262:	2e00      	cmp	r6, #0
 800e264:	dd03      	ble.n	800e26e <__multiply+0x6c>
 800e266:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d05d      	beq.n	800e32a <__multiply+0x128>
 800e26e:	6106      	str	r6, [r0, #16]
 800e270:	b003      	add	sp, #12
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	f843 2b04 	str.w	r2, [r3], #4
 800e27a:	e7e3      	b.n	800e244 <__multiply+0x42>
 800e27c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e280:	f1bb 0f00 	cmp.w	fp, #0
 800e284:	d023      	beq.n	800e2ce <__multiply+0xcc>
 800e286:	4689      	mov	r9, r1
 800e288:	46ac      	mov	ip, r5
 800e28a:	f04f 0800 	mov.w	r8, #0
 800e28e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e292:	f8dc a000 	ldr.w	sl, [ip]
 800e296:	b2a3      	uxth	r3, r4
 800e298:	fa1f fa8a 	uxth.w	sl, sl
 800e29c:	fb0b a303 	mla	r3, fp, r3, sl
 800e2a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e2a4:	f8dc 4000 	ldr.w	r4, [ip]
 800e2a8:	4443      	add	r3, r8
 800e2aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e2ae:	fb0b 840a 	mla	r4, fp, sl, r8
 800e2b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e2b6:	46e2      	mov	sl, ip
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e2be:	454f      	cmp	r7, r9
 800e2c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e2c4:	f84a 3b04 	str.w	r3, [sl], #4
 800e2c8:	d82b      	bhi.n	800e322 <__multiply+0x120>
 800e2ca:	f8cc 8004 	str.w	r8, [ip, #4]
 800e2ce:	9b01      	ldr	r3, [sp, #4]
 800e2d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e2d4:	3204      	adds	r2, #4
 800e2d6:	f1ba 0f00 	cmp.w	sl, #0
 800e2da:	d020      	beq.n	800e31e <__multiply+0x11c>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	4689      	mov	r9, r1
 800e2e0:	46a8      	mov	r8, r5
 800e2e2:	f04f 0b00 	mov.w	fp, #0
 800e2e6:	f8b9 c000 	ldrh.w	ip, [r9]
 800e2ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e2ee:	fb0a 440c 	mla	r4, sl, ip, r4
 800e2f2:	445c      	add	r4, fp
 800e2f4:	46c4      	mov	ip, r8
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e2fc:	f84c 3b04 	str.w	r3, [ip], #4
 800e300:	f859 3b04 	ldr.w	r3, [r9], #4
 800e304:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e308:	0c1b      	lsrs	r3, r3, #16
 800e30a:	fb0a b303 	mla	r3, sl, r3, fp
 800e30e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e312:	454f      	cmp	r7, r9
 800e314:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e318:	d805      	bhi.n	800e326 <__multiply+0x124>
 800e31a:	f8c8 3004 	str.w	r3, [r8, #4]
 800e31e:	3504      	adds	r5, #4
 800e320:	e79b      	b.n	800e25a <__multiply+0x58>
 800e322:	46d4      	mov	ip, sl
 800e324:	e7b3      	b.n	800e28e <__multiply+0x8c>
 800e326:	46e0      	mov	r8, ip
 800e328:	e7dd      	b.n	800e2e6 <__multiply+0xe4>
 800e32a:	3e01      	subs	r6, #1
 800e32c:	e799      	b.n	800e262 <__multiply+0x60>
	...

0800e330 <__pow5mult>:
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	4615      	mov	r5, r2
 800e336:	f012 0203 	ands.w	r2, r2, #3
 800e33a:	4606      	mov	r6, r0
 800e33c:	460f      	mov	r7, r1
 800e33e:	d007      	beq.n	800e350 <__pow5mult+0x20>
 800e340:	3a01      	subs	r2, #1
 800e342:	4c21      	ldr	r4, [pc, #132]	; (800e3c8 <__pow5mult+0x98>)
 800e344:	2300      	movs	r3, #0
 800e346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e34a:	f7ff fe8a 	bl	800e062 <__multadd>
 800e34e:	4607      	mov	r7, r0
 800e350:	10ad      	asrs	r5, r5, #2
 800e352:	d035      	beq.n	800e3c0 <__pow5mult+0x90>
 800e354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e356:	b93c      	cbnz	r4, 800e368 <__pow5mult+0x38>
 800e358:	2010      	movs	r0, #16
 800e35a:	f7ff fe1d 	bl	800df98 <malloc>
 800e35e:	6270      	str	r0, [r6, #36]	; 0x24
 800e360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e364:	6004      	str	r4, [r0, #0]
 800e366:	60c4      	str	r4, [r0, #12]
 800e368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e36c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e370:	b94c      	cbnz	r4, 800e386 <__pow5mult+0x56>
 800e372:	f240 2171 	movw	r1, #625	; 0x271
 800e376:	4630      	mov	r0, r6
 800e378:	f7ff ff3a 	bl	800e1f0 <__i2b>
 800e37c:	2300      	movs	r3, #0
 800e37e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e382:	4604      	mov	r4, r0
 800e384:	6003      	str	r3, [r0, #0]
 800e386:	f04f 0800 	mov.w	r8, #0
 800e38a:	07eb      	lsls	r3, r5, #31
 800e38c:	d50a      	bpl.n	800e3a4 <__pow5mult+0x74>
 800e38e:	4639      	mov	r1, r7
 800e390:	4622      	mov	r2, r4
 800e392:	4630      	mov	r0, r6
 800e394:	f7ff ff35 	bl	800e202 <__multiply>
 800e398:	4639      	mov	r1, r7
 800e39a:	4681      	mov	r9, r0
 800e39c:	4630      	mov	r0, r6
 800e39e:	f7ff fe49 	bl	800e034 <_Bfree>
 800e3a2:	464f      	mov	r7, r9
 800e3a4:	106d      	asrs	r5, r5, #1
 800e3a6:	d00b      	beq.n	800e3c0 <__pow5mult+0x90>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	b938      	cbnz	r0, 800e3bc <__pow5mult+0x8c>
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f7ff ff26 	bl	800e202 <__multiply>
 800e3b6:	6020      	str	r0, [r4, #0]
 800e3b8:	f8c0 8000 	str.w	r8, [r0]
 800e3bc:	4604      	mov	r4, r0
 800e3be:	e7e4      	b.n	800e38a <__pow5mult+0x5a>
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c6:	bf00      	nop
 800e3c8:	0800f338 	.word	0x0800f338

0800e3cc <__lshift>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3d6:	6923      	ldr	r3, [r4, #16]
 800e3d8:	6849      	ldr	r1, [r1, #4]
 800e3da:	eb0a 0903 	add.w	r9, sl, r3
 800e3de:	68a3      	ldr	r3, [r4, #8]
 800e3e0:	4607      	mov	r7, r0
 800e3e2:	4616      	mov	r6, r2
 800e3e4:	f109 0501 	add.w	r5, r9, #1
 800e3e8:	42ab      	cmp	r3, r5
 800e3ea:	db32      	blt.n	800e452 <__lshift+0x86>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff fded 	bl	800dfcc <_Balloc>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4680      	mov	r8, r0
 800e3f6:	f100 0114 	add.w	r1, r0, #20
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4553      	cmp	r3, sl
 800e3fe:	db2b      	blt.n	800e458 <__lshift+0x8c>
 800e400:	6920      	ldr	r0, [r4, #16]
 800e402:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e406:	f104 0314 	add.w	r3, r4, #20
 800e40a:	f016 021f 	ands.w	r2, r6, #31
 800e40e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e412:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e416:	d025      	beq.n	800e464 <__lshift+0x98>
 800e418:	f1c2 0e20 	rsb	lr, r2, #32
 800e41c:	2000      	movs	r0, #0
 800e41e:	681e      	ldr	r6, [r3, #0]
 800e420:	468a      	mov	sl, r1
 800e422:	4096      	lsls	r6, r2
 800e424:	4330      	orrs	r0, r6
 800e426:	f84a 0b04 	str.w	r0, [sl], #4
 800e42a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e42e:	459c      	cmp	ip, r3
 800e430:	fa20 f00e 	lsr.w	r0, r0, lr
 800e434:	d814      	bhi.n	800e460 <__lshift+0x94>
 800e436:	6048      	str	r0, [r1, #4]
 800e438:	b108      	cbz	r0, 800e43e <__lshift+0x72>
 800e43a:	f109 0502 	add.w	r5, r9, #2
 800e43e:	3d01      	subs	r5, #1
 800e440:	4638      	mov	r0, r7
 800e442:	f8c8 5010 	str.w	r5, [r8, #16]
 800e446:	4621      	mov	r1, r4
 800e448:	f7ff fdf4 	bl	800e034 <_Bfree>
 800e44c:	4640      	mov	r0, r8
 800e44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e452:	3101      	adds	r1, #1
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	e7c7      	b.n	800e3e8 <__lshift+0x1c>
 800e458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e45c:	3301      	adds	r3, #1
 800e45e:	e7cd      	b.n	800e3fc <__lshift+0x30>
 800e460:	4651      	mov	r1, sl
 800e462:	e7dc      	b.n	800e41e <__lshift+0x52>
 800e464:	3904      	subs	r1, #4
 800e466:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e46e:	459c      	cmp	ip, r3
 800e470:	d8f9      	bhi.n	800e466 <__lshift+0x9a>
 800e472:	e7e4      	b.n	800e43e <__lshift+0x72>

0800e474 <__mcmp>:
 800e474:	6903      	ldr	r3, [r0, #16]
 800e476:	690a      	ldr	r2, [r1, #16]
 800e478:	1a9b      	subs	r3, r3, r2
 800e47a:	b530      	push	{r4, r5, lr}
 800e47c:	d10c      	bne.n	800e498 <__mcmp+0x24>
 800e47e:	0092      	lsls	r2, r2, #2
 800e480:	3014      	adds	r0, #20
 800e482:	3114      	adds	r1, #20
 800e484:	1884      	adds	r4, r0, r2
 800e486:	4411      	add	r1, r2
 800e488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e490:	4295      	cmp	r5, r2
 800e492:	d003      	beq.n	800e49c <__mcmp+0x28>
 800e494:	d305      	bcc.n	800e4a2 <__mcmp+0x2e>
 800e496:	2301      	movs	r3, #1
 800e498:	4618      	mov	r0, r3
 800e49a:	bd30      	pop	{r4, r5, pc}
 800e49c:	42a0      	cmp	r0, r4
 800e49e:	d3f3      	bcc.n	800e488 <__mcmp+0x14>
 800e4a0:	e7fa      	b.n	800e498 <__mcmp+0x24>
 800e4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a6:	e7f7      	b.n	800e498 <__mcmp+0x24>

0800e4a8 <__mdiff>:
 800e4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ac:	460d      	mov	r5, r1
 800e4ae:	4607      	mov	r7, r0
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	f7ff ffdd 	bl	800e474 <__mcmp>
 800e4ba:	1e06      	subs	r6, r0, #0
 800e4bc:	d108      	bne.n	800e4d0 <__mdiff+0x28>
 800e4be:	4631      	mov	r1, r6
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f7ff fd83 	bl	800dfcc <_Balloc>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d0:	bfa4      	itt	ge
 800e4d2:	4623      	movge	r3, r4
 800e4d4:	462c      	movge	r4, r5
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	6861      	ldr	r1, [r4, #4]
 800e4da:	bfa6      	itte	ge
 800e4dc:	461d      	movge	r5, r3
 800e4de:	2600      	movge	r6, #0
 800e4e0:	2601      	movlt	r6, #1
 800e4e2:	f7ff fd73 	bl	800dfcc <_Balloc>
 800e4e6:	692b      	ldr	r3, [r5, #16]
 800e4e8:	60c6      	str	r6, [r0, #12]
 800e4ea:	6926      	ldr	r6, [r4, #16]
 800e4ec:	f105 0914 	add.w	r9, r5, #20
 800e4f0:	f104 0214 	add.w	r2, r4, #20
 800e4f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e4f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e4fc:	f100 0514 	add.w	r5, r0, #20
 800e500:	f04f 0e00 	mov.w	lr, #0
 800e504:	f852 ab04 	ldr.w	sl, [r2], #4
 800e508:	f859 4b04 	ldr.w	r4, [r9], #4
 800e50c:	fa1e f18a 	uxtah	r1, lr, sl
 800e510:	b2a3      	uxth	r3, r4
 800e512:	1ac9      	subs	r1, r1, r3
 800e514:	0c23      	lsrs	r3, r4, #16
 800e516:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e51a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e51e:	b289      	uxth	r1, r1
 800e520:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e524:	45c8      	cmp	r8, r9
 800e526:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e52a:	4694      	mov	ip, r2
 800e52c:	f845 3b04 	str.w	r3, [r5], #4
 800e530:	d8e8      	bhi.n	800e504 <__mdiff+0x5c>
 800e532:	45bc      	cmp	ip, r7
 800e534:	d304      	bcc.n	800e540 <__mdiff+0x98>
 800e536:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e53a:	b183      	cbz	r3, 800e55e <__mdiff+0xb6>
 800e53c:	6106      	str	r6, [r0, #16]
 800e53e:	e7c5      	b.n	800e4cc <__mdiff+0x24>
 800e540:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e544:	fa1e f381 	uxtah	r3, lr, r1
 800e548:	141a      	asrs	r2, r3, #16
 800e54a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e54e:	b29b      	uxth	r3, r3
 800e550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e554:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e558:	f845 3b04 	str.w	r3, [r5], #4
 800e55c:	e7e9      	b.n	800e532 <__mdiff+0x8a>
 800e55e:	3e01      	subs	r6, #1
 800e560:	e7e9      	b.n	800e536 <__mdiff+0x8e>
	...

0800e564 <__ulp>:
 800e564:	4b12      	ldr	r3, [pc, #72]	; (800e5b0 <__ulp+0x4c>)
 800e566:	ee10 2a90 	vmov	r2, s1
 800e56a:	401a      	ands	r2, r3
 800e56c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e570:	2b00      	cmp	r3, #0
 800e572:	dd04      	ble.n	800e57e <__ulp+0x1a>
 800e574:	2000      	movs	r0, #0
 800e576:	4619      	mov	r1, r3
 800e578:	ec41 0b10 	vmov	d0, r0, r1
 800e57c:	4770      	bx	lr
 800e57e:	425b      	negs	r3, r3
 800e580:	151b      	asrs	r3, r3, #20
 800e582:	2b13      	cmp	r3, #19
 800e584:	f04f 0000 	mov.w	r0, #0
 800e588:	f04f 0100 	mov.w	r1, #0
 800e58c:	dc04      	bgt.n	800e598 <__ulp+0x34>
 800e58e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e592:	fa42 f103 	asr.w	r1, r2, r3
 800e596:	e7ef      	b.n	800e578 <__ulp+0x14>
 800e598:	3b14      	subs	r3, #20
 800e59a:	2b1e      	cmp	r3, #30
 800e59c:	f04f 0201 	mov.w	r2, #1
 800e5a0:	bfda      	itte	le
 800e5a2:	f1c3 031f 	rsble	r3, r3, #31
 800e5a6:	fa02 f303 	lslle.w	r3, r2, r3
 800e5aa:	4613      	movgt	r3, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	e7e3      	b.n	800e578 <__ulp+0x14>
 800e5b0:	7ff00000 	.word	0x7ff00000

0800e5b4 <__b2d>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	6905      	ldr	r5, [r0, #16]
 800e5b8:	f100 0714 	add.w	r7, r0, #20
 800e5bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e5c0:	1f2e      	subs	r6, r5, #4
 800e5c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f7ff fdc4 	bl	800e154 <__hi0bits>
 800e5cc:	f1c0 0320 	rsb	r3, r0, #32
 800e5d0:	280a      	cmp	r0, #10
 800e5d2:	600b      	str	r3, [r1, #0]
 800e5d4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e64c <__b2d+0x98>
 800e5d8:	dc14      	bgt.n	800e604 <__b2d+0x50>
 800e5da:	f1c0 0e0b 	rsb	lr, r0, #11
 800e5de:	fa24 f10e 	lsr.w	r1, r4, lr
 800e5e2:	42b7      	cmp	r7, r6
 800e5e4:	ea41 030c 	orr.w	r3, r1, ip
 800e5e8:	bf34      	ite	cc
 800e5ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5ee:	2100      	movcs	r1, #0
 800e5f0:	3015      	adds	r0, #21
 800e5f2:	fa04 f000 	lsl.w	r0, r4, r0
 800e5f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e5fa:	ea40 0201 	orr.w	r2, r0, r1
 800e5fe:	ec43 2b10 	vmov	d0, r2, r3
 800e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e604:	42b7      	cmp	r7, r6
 800e606:	bf3a      	itte	cc
 800e608:	f1a5 0608 	subcc.w	r6, r5, #8
 800e60c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e610:	2100      	movcs	r1, #0
 800e612:	380b      	subs	r0, #11
 800e614:	d015      	beq.n	800e642 <__b2d+0x8e>
 800e616:	4084      	lsls	r4, r0
 800e618:	f1c0 0520 	rsb	r5, r0, #32
 800e61c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e620:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e624:	42be      	cmp	r6, r7
 800e626:	fa21 fc05 	lsr.w	ip, r1, r5
 800e62a:	ea44 030c 	orr.w	r3, r4, ip
 800e62e:	bf8c      	ite	hi
 800e630:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e634:	2400      	movls	r4, #0
 800e636:	fa01 f000 	lsl.w	r0, r1, r0
 800e63a:	40ec      	lsrs	r4, r5
 800e63c:	ea40 0204 	orr.w	r2, r0, r4
 800e640:	e7dd      	b.n	800e5fe <__b2d+0x4a>
 800e642:	ea44 030c 	orr.w	r3, r4, ip
 800e646:	460a      	mov	r2, r1
 800e648:	e7d9      	b.n	800e5fe <__b2d+0x4a>
 800e64a:	bf00      	nop
 800e64c:	3ff00000 	.word	0x3ff00000

0800e650 <__d2b>:
 800e650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e654:	460e      	mov	r6, r1
 800e656:	2101      	movs	r1, #1
 800e658:	ec59 8b10 	vmov	r8, r9, d0
 800e65c:	4615      	mov	r5, r2
 800e65e:	f7ff fcb5 	bl	800dfcc <_Balloc>
 800e662:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e666:	4607      	mov	r7, r0
 800e668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e66c:	bb34      	cbnz	r4, 800e6bc <__d2b+0x6c>
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	f1b8 0300 	subs.w	r3, r8, #0
 800e674:	d027      	beq.n	800e6c6 <__d2b+0x76>
 800e676:	a802      	add	r0, sp, #8
 800e678:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e67c:	f7ff fd89 	bl	800e192 <__lo0bits>
 800e680:	9900      	ldr	r1, [sp, #0]
 800e682:	b1f0      	cbz	r0, 800e6c2 <__d2b+0x72>
 800e684:	9a01      	ldr	r2, [sp, #4]
 800e686:	f1c0 0320 	rsb	r3, r0, #32
 800e68a:	fa02 f303 	lsl.w	r3, r2, r3
 800e68e:	430b      	orrs	r3, r1
 800e690:	40c2      	lsrs	r2, r0
 800e692:	617b      	str	r3, [r7, #20]
 800e694:	9201      	str	r2, [sp, #4]
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	61bb      	str	r3, [r7, #24]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	bf14      	ite	ne
 800e69e:	2102      	movne	r1, #2
 800e6a0:	2101      	moveq	r1, #1
 800e6a2:	6139      	str	r1, [r7, #16]
 800e6a4:	b1c4      	cbz	r4, 800e6d8 <__d2b+0x88>
 800e6a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e6aa:	4404      	add	r4, r0
 800e6ac:	6034      	str	r4, [r6, #0]
 800e6ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6b2:	6028      	str	r0, [r5, #0]
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	b003      	add	sp, #12
 800e6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6c0:	e7d5      	b.n	800e66e <__d2b+0x1e>
 800e6c2:	6179      	str	r1, [r7, #20]
 800e6c4:	e7e7      	b.n	800e696 <__d2b+0x46>
 800e6c6:	a801      	add	r0, sp, #4
 800e6c8:	f7ff fd63 	bl	800e192 <__lo0bits>
 800e6cc:	9b01      	ldr	r3, [sp, #4]
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	6139      	str	r1, [r7, #16]
 800e6d4:	3020      	adds	r0, #32
 800e6d6:	e7e5      	b.n	800e6a4 <__d2b+0x54>
 800e6d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e6dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6e0:	6030      	str	r0, [r6, #0]
 800e6e2:	6918      	ldr	r0, [r3, #16]
 800e6e4:	f7ff fd36 	bl	800e154 <__hi0bits>
 800e6e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e6ec:	e7e1      	b.n	800e6b2 <__d2b+0x62>

0800e6ee <__ratio>:
 800e6ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f2:	4688      	mov	r8, r1
 800e6f4:	4669      	mov	r1, sp
 800e6f6:	4681      	mov	r9, r0
 800e6f8:	f7ff ff5c 	bl	800e5b4 <__b2d>
 800e6fc:	a901      	add	r1, sp, #4
 800e6fe:	4640      	mov	r0, r8
 800e700:	ec57 6b10 	vmov	r6, r7, d0
 800e704:	f7ff ff56 	bl	800e5b4 <__b2d>
 800e708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e70c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e710:	eba3 0c02 	sub.w	ip, r3, r2
 800e714:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e718:	1a9b      	subs	r3, r3, r2
 800e71a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e71e:	ec5b ab10 	vmov	sl, fp, d0
 800e722:	2b00      	cmp	r3, #0
 800e724:	bfce      	itee	gt
 800e726:	463a      	movgt	r2, r7
 800e728:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e72c:	465a      	movle	r2, fp
 800e72e:	4659      	mov	r1, fp
 800e730:	463d      	mov	r5, r7
 800e732:	bfd4      	ite	le
 800e734:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e738:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e73c:	4630      	mov	r0, r6
 800e73e:	ee10 2a10 	vmov	r2, s0
 800e742:	460b      	mov	r3, r1
 800e744:	4629      	mov	r1, r5
 800e746:	f7f2 f881 	bl	800084c <__aeabi_ddiv>
 800e74a:	ec41 0b10 	vmov	d0, r0, r1
 800e74e:	b003      	add	sp, #12
 800e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e754 <__copybits>:
 800e754:	3901      	subs	r1, #1
 800e756:	b510      	push	{r4, lr}
 800e758:	1149      	asrs	r1, r1, #5
 800e75a:	6914      	ldr	r4, [r2, #16]
 800e75c:	3101      	adds	r1, #1
 800e75e:	f102 0314 	add.w	r3, r2, #20
 800e762:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e766:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e76a:	42a3      	cmp	r3, r4
 800e76c:	4602      	mov	r2, r0
 800e76e:	d303      	bcc.n	800e778 <__copybits+0x24>
 800e770:	2300      	movs	r3, #0
 800e772:	428a      	cmp	r2, r1
 800e774:	d305      	bcc.n	800e782 <__copybits+0x2e>
 800e776:	bd10      	pop	{r4, pc}
 800e778:	f853 2b04 	ldr.w	r2, [r3], #4
 800e77c:	f840 2b04 	str.w	r2, [r0], #4
 800e780:	e7f3      	b.n	800e76a <__copybits+0x16>
 800e782:	f842 3b04 	str.w	r3, [r2], #4
 800e786:	e7f4      	b.n	800e772 <__copybits+0x1e>

0800e788 <__any_on>:
 800e788:	f100 0214 	add.w	r2, r0, #20
 800e78c:	6900      	ldr	r0, [r0, #16]
 800e78e:	114b      	asrs	r3, r1, #5
 800e790:	4298      	cmp	r0, r3
 800e792:	b510      	push	{r4, lr}
 800e794:	db11      	blt.n	800e7ba <__any_on+0x32>
 800e796:	dd0a      	ble.n	800e7ae <__any_on+0x26>
 800e798:	f011 011f 	ands.w	r1, r1, #31
 800e79c:	d007      	beq.n	800e7ae <__any_on+0x26>
 800e79e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7a2:	fa24 f001 	lsr.w	r0, r4, r1
 800e7a6:	fa00 f101 	lsl.w	r1, r0, r1
 800e7aa:	428c      	cmp	r4, r1
 800e7ac:	d10b      	bne.n	800e7c6 <__any_on+0x3e>
 800e7ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d803      	bhi.n	800e7be <__any_on+0x36>
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	bd10      	pop	{r4, pc}
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	e7f7      	b.n	800e7ae <__any_on+0x26>
 800e7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7c2:	2900      	cmp	r1, #0
 800e7c4:	d0f5      	beq.n	800e7b2 <__any_on+0x2a>
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	e7f6      	b.n	800e7b8 <__any_on+0x30>

0800e7ca <_calloc_r>:
 800e7ca:	b538      	push	{r3, r4, r5, lr}
 800e7cc:	fb02 f401 	mul.w	r4, r2, r1
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	f000 f857 	bl	800e884 <_malloc_r>
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	b118      	cbz	r0, 800e7e2 <_calloc_r+0x18>
 800e7da:	4622      	mov	r2, r4
 800e7dc:	2100      	movs	r1, #0
 800e7de:	f7fc fa24 	bl	800ac2a <memset>
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e7e8 <_free_r>:
 800e7e8:	b538      	push	{r3, r4, r5, lr}
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	d045      	beq.n	800e87c <_free_r+0x94>
 800e7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7f4:	1f0c      	subs	r4, r1, #4
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	bfb8      	it	lt
 800e7fa:	18e4      	addlt	r4, r4, r3
 800e7fc:	f000 fc0f 	bl	800f01e <__malloc_lock>
 800e800:	4a1f      	ldr	r2, [pc, #124]	; (800e880 <_free_r+0x98>)
 800e802:	6813      	ldr	r3, [r2, #0]
 800e804:	4610      	mov	r0, r2
 800e806:	b933      	cbnz	r3, 800e816 <_free_r+0x2e>
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	6014      	str	r4, [r2, #0]
 800e80c:	4628      	mov	r0, r5
 800e80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e812:	f000 bc05 	b.w	800f020 <__malloc_unlock>
 800e816:	42a3      	cmp	r3, r4
 800e818:	d90c      	bls.n	800e834 <_free_r+0x4c>
 800e81a:	6821      	ldr	r1, [r4, #0]
 800e81c:	1862      	adds	r2, r4, r1
 800e81e:	4293      	cmp	r3, r2
 800e820:	bf04      	itt	eq
 800e822:	681a      	ldreq	r2, [r3, #0]
 800e824:	685b      	ldreq	r3, [r3, #4]
 800e826:	6063      	str	r3, [r4, #4]
 800e828:	bf04      	itt	eq
 800e82a:	1852      	addeq	r2, r2, r1
 800e82c:	6022      	streq	r2, [r4, #0]
 800e82e:	6004      	str	r4, [r0, #0]
 800e830:	e7ec      	b.n	800e80c <_free_r+0x24>
 800e832:	4613      	mov	r3, r2
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	b10a      	cbz	r2, 800e83c <_free_r+0x54>
 800e838:	42a2      	cmp	r2, r4
 800e83a:	d9fa      	bls.n	800e832 <_free_r+0x4a>
 800e83c:	6819      	ldr	r1, [r3, #0]
 800e83e:	1858      	adds	r0, r3, r1
 800e840:	42a0      	cmp	r0, r4
 800e842:	d10b      	bne.n	800e85c <_free_r+0x74>
 800e844:	6820      	ldr	r0, [r4, #0]
 800e846:	4401      	add	r1, r0
 800e848:	1858      	adds	r0, r3, r1
 800e84a:	4282      	cmp	r2, r0
 800e84c:	6019      	str	r1, [r3, #0]
 800e84e:	d1dd      	bne.n	800e80c <_free_r+0x24>
 800e850:	6810      	ldr	r0, [r2, #0]
 800e852:	6852      	ldr	r2, [r2, #4]
 800e854:	605a      	str	r2, [r3, #4]
 800e856:	4401      	add	r1, r0
 800e858:	6019      	str	r1, [r3, #0]
 800e85a:	e7d7      	b.n	800e80c <_free_r+0x24>
 800e85c:	d902      	bls.n	800e864 <_free_r+0x7c>
 800e85e:	230c      	movs	r3, #12
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	e7d3      	b.n	800e80c <_free_r+0x24>
 800e864:	6820      	ldr	r0, [r4, #0]
 800e866:	1821      	adds	r1, r4, r0
 800e868:	428a      	cmp	r2, r1
 800e86a:	bf04      	itt	eq
 800e86c:	6811      	ldreq	r1, [r2, #0]
 800e86e:	6852      	ldreq	r2, [r2, #4]
 800e870:	6062      	str	r2, [r4, #4]
 800e872:	bf04      	itt	eq
 800e874:	1809      	addeq	r1, r1, r0
 800e876:	6021      	streq	r1, [r4, #0]
 800e878:	605c      	str	r4, [r3, #4]
 800e87a:	e7c7      	b.n	800e80c <_free_r+0x24>
 800e87c:	bd38      	pop	{r3, r4, r5, pc}
 800e87e:	bf00      	nop
 800e880:	2001f384 	.word	0x2001f384

0800e884 <_malloc_r>:
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	1ccd      	adds	r5, r1, #3
 800e888:	f025 0503 	bic.w	r5, r5, #3
 800e88c:	3508      	adds	r5, #8
 800e88e:	2d0c      	cmp	r5, #12
 800e890:	bf38      	it	cc
 800e892:	250c      	movcc	r5, #12
 800e894:	2d00      	cmp	r5, #0
 800e896:	4606      	mov	r6, r0
 800e898:	db01      	blt.n	800e89e <_malloc_r+0x1a>
 800e89a:	42a9      	cmp	r1, r5
 800e89c:	d903      	bls.n	800e8a6 <_malloc_r+0x22>
 800e89e:	230c      	movs	r3, #12
 800e8a0:	6033      	str	r3, [r6, #0]
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	bd70      	pop	{r4, r5, r6, pc}
 800e8a6:	f000 fbba 	bl	800f01e <__malloc_lock>
 800e8aa:	4a21      	ldr	r2, [pc, #132]	; (800e930 <_malloc_r+0xac>)
 800e8ac:	6814      	ldr	r4, [r2, #0]
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	b991      	cbnz	r1, 800e8d8 <_malloc_r+0x54>
 800e8b2:	4c20      	ldr	r4, [pc, #128]	; (800e934 <_malloc_r+0xb0>)
 800e8b4:	6823      	ldr	r3, [r4, #0]
 800e8b6:	b91b      	cbnz	r3, 800e8c0 <_malloc_r+0x3c>
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f000 facf 	bl	800ee5c <_sbrk_r>
 800e8be:	6020      	str	r0, [r4, #0]
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f000 faca 	bl	800ee5c <_sbrk_r>
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	d124      	bne.n	800e916 <_malloc_r+0x92>
 800e8cc:	230c      	movs	r3, #12
 800e8ce:	6033      	str	r3, [r6, #0]
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f000 fba5 	bl	800f020 <__malloc_unlock>
 800e8d6:	e7e4      	b.n	800e8a2 <_malloc_r+0x1e>
 800e8d8:	680b      	ldr	r3, [r1, #0]
 800e8da:	1b5b      	subs	r3, r3, r5
 800e8dc:	d418      	bmi.n	800e910 <_malloc_r+0x8c>
 800e8de:	2b0b      	cmp	r3, #11
 800e8e0:	d90f      	bls.n	800e902 <_malloc_r+0x7e>
 800e8e2:	600b      	str	r3, [r1, #0]
 800e8e4:	50cd      	str	r5, [r1, r3]
 800e8e6:	18cc      	adds	r4, r1, r3
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f000 fb99 	bl	800f020 <__malloc_unlock>
 800e8ee:	f104 000b 	add.w	r0, r4, #11
 800e8f2:	1d23      	adds	r3, r4, #4
 800e8f4:	f020 0007 	bic.w	r0, r0, #7
 800e8f8:	1ac3      	subs	r3, r0, r3
 800e8fa:	d0d3      	beq.n	800e8a4 <_malloc_r+0x20>
 800e8fc:	425a      	negs	r2, r3
 800e8fe:	50e2      	str	r2, [r4, r3]
 800e900:	e7d0      	b.n	800e8a4 <_malloc_r+0x20>
 800e902:	428c      	cmp	r4, r1
 800e904:	684b      	ldr	r3, [r1, #4]
 800e906:	bf16      	itet	ne
 800e908:	6063      	strne	r3, [r4, #4]
 800e90a:	6013      	streq	r3, [r2, #0]
 800e90c:	460c      	movne	r4, r1
 800e90e:	e7eb      	b.n	800e8e8 <_malloc_r+0x64>
 800e910:	460c      	mov	r4, r1
 800e912:	6849      	ldr	r1, [r1, #4]
 800e914:	e7cc      	b.n	800e8b0 <_malloc_r+0x2c>
 800e916:	1cc4      	adds	r4, r0, #3
 800e918:	f024 0403 	bic.w	r4, r4, #3
 800e91c:	42a0      	cmp	r0, r4
 800e91e:	d005      	beq.n	800e92c <_malloc_r+0xa8>
 800e920:	1a21      	subs	r1, r4, r0
 800e922:	4630      	mov	r0, r6
 800e924:	f000 fa9a 	bl	800ee5c <_sbrk_r>
 800e928:	3001      	adds	r0, #1
 800e92a:	d0cf      	beq.n	800e8cc <_malloc_r+0x48>
 800e92c:	6025      	str	r5, [r4, #0]
 800e92e:	e7db      	b.n	800e8e8 <_malloc_r+0x64>
 800e930:	2001f384 	.word	0x2001f384
 800e934:	2001f388 	.word	0x2001f388

0800e938 <__ssputs_r>:
 800e938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e93c:	688e      	ldr	r6, [r1, #8]
 800e93e:	429e      	cmp	r6, r3
 800e940:	4682      	mov	sl, r0
 800e942:	460c      	mov	r4, r1
 800e944:	4690      	mov	r8, r2
 800e946:	4699      	mov	r9, r3
 800e948:	d837      	bhi.n	800e9ba <__ssputs_r+0x82>
 800e94a:	898a      	ldrh	r2, [r1, #12]
 800e94c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e950:	d031      	beq.n	800e9b6 <__ssputs_r+0x7e>
 800e952:	6825      	ldr	r5, [r4, #0]
 800e954:	6909      	ldr	r1, [r1, #16]
 800e956:	1a6f      	subs	r7, r5, r1
 800e958:	6965      	ldr	r5, [r4, #20]
 800e95a:	2302      	movs	r3, #2
 800e95c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e960:	fb95 f5f3 	sdiv	r5, r5, r3
 800e964:	f109 0301 	add.w	r3, r9, #1
 800e968:	443b      	add	r3, r7
 800e96a:	429d      	cmp	r5, r3
 800e96c:	bf38      	it	cc
 800e96e:	461d      	movcc	r5, r3
 800e970:	0553      	lsls	r3, r2, #21
 800e972:	d530      	bpl.n	800e9d6 <__ssputs_r+0x9e>
 800e974:	4629      	mov	r1, r5
 800e976:	f7ff ff85 	bl	800e884 <_malloc_r>
 800e97a:	4606      	mov	r6, r0
 800e97c:	b950      	cbnz	r0, 800e994 <__ssputs_r+0x5c>
 800e97e:	230c      	movs	r3, #12
 800e980:	f8ca 3000 	str.w	r3, [sl]
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295
 800e990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e994:	463a      	mov	r2, r7
 800e996:	6921      	ldr	r1, [r4, #16]
 800e998:	f7fc f93c 	bl	800ac14 <memcpy>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	6126      	str	r6, [r4, #16]
 800e9aa:	6165      	str	r5, [r4, #20]
 800e9ac:	443e      	add	r6, r7
 800e9ae:	1bed      	subs	r5, r5, r7
 800e9b0:	6026      	str	r6, [r4, #0]
 800e9b2:	60a5      	str	r5, [r4, #8]
 800e9b4:	464e      	mov	r6, r9
 800e9b6:	454e      	cmp	r6, r9
 800e9b8:	d900      	bls.n	800e9bc <__ssputs_r+0x84>
 800e9ba:	464e      	mov	r6, r9
 800e9bc:	4632      	mov	r2, r6
 800e9be:	4641      	mov	r1, r8
 800e9c0:	6820      	ldr	r0, [r4, #0]
 800e9c2:	f000 fb13 	bl	800efec <memmove>
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	1b9b      	subs	r3, r3, r6
 800e9ca:	60a3      	str	r3, [r4, #8]
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	441e      	add	r6, r3
 800e9d0:	6026      	str	r6, [r4, #0]
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e7dc      	b.n	800e990 <__ssputs_r+0x58>
 800e9d6:	462a      	mov	r2, r5
 800e9d8:	f000 fb23 	bl	800f022 <_realloc_r>
 800e9dc:	4606      	mov	r6, r0
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d1e2      	bne.n	800e9a8 <__ssputs_r+0x70>
 800e9e2:	6921      	ldr	r1, [r4, #16]
 800e9e4:	4650      	mov	r0, sl
 800e9e6:	f7ff feff 	bl	800e7e8 <_free_r>
 800e9ea:	e7c8      	b.n	800e97e <__ssputs_r+0x46>

0800e9ec <_svfiprintf_r>:
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	461d      	mov	r5, r3
 800e9f2:	898b      	ldrh	r3, [r1, #12]
 800e9f4:	061f      	lsls	r7, r3, #24
 800e9f6:	b09d      	sub	sp, #116	; 0x74
 800e9f8:	4680      	mov	r8, r0
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	4616      	mov	r6, r2
 800e9fe:	d50f      	bpl.n	800ea20 <_svfiprintf_r+0x34>
 800ea00:	690b      	ldr	r3, [r1, #16]
 800ea02:	b96b      	cbnz	r3, 800ea20 <_svfiprintf_r+0x34>
 800ea04:	2140      	movs	r1, #64	; 0x40
 800ea06:	f7ff ff3d 	bl	800e884 <_malloc_r>
 800ea0a:	6020      	str	r0, [r4, #0]
 800ea0c:	6120      	str	r0, [r4, #16]
 800ea0e:	b928      	cbnz	r0, 800ea1c <_svfiprintf_r+0x30>
 800ea10:	230c      	movs	r3, #12
 800ea12:	f8c8 3000 	str.w	r3, [r8]
 800ea16:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1a:	e0c8      	b.n	800ebae <_svfiprintf_r+0x1c2>
 800ea1c:	2340      	movs	r3, #64	; 0x40
 800ea1e:	6163      	str	r3, [r4, #20]
 800ea20:	2300      	movs	r3, #0
 800ea22:	9309      	str	r3, [sp, #36]	; 0x24
 800ea24:	2320      	movs	r3, #32
 800ea26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea2a:	2330      	movs	r3, #48	; 0x30
 800ea2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea30:	9503      	str	r5, [sp, #12]
 800ea32:	f04f 0b01 	mov.w	fp, #1
 800ea36:	4637      	mov	r7, r6
 800ea38:	463d      	mov	r5, r7
 800ea3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ea3e:	b10b      	cbz	r3, 800ea44 <_svfiprintf_r+0x58>
 800ea40:	2b25      	cmp	r3, #37	; 0x25
 800ea42:	d13e      	bne.n	800eac2 <_svfiprintf_r+0xd6>
 800ea44:	ebb7 0a06 	subs.w	sl, r7, r6
 800ea48:	d00b      	beq.n	800ea62 <_svfiprintf_r+0x76>
 800ea4a:	4653      	mov	r3, sl
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4621      	mov	r1, r4
 800ea50:	4640      	mov	r0, r8
 800ea52:	f7ff ff71 	bl	800e938 <__ssputs_r>
 800ea56:	3001      	adds	r0, #1
 800ea58:	f000 80a4 	beq.w	800eba4 <_svfiprintf_r+0x1b8>
 800ea5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5e:	4453      	add	r3, sl
 800ea60:	9309      	str	r3, [sp, #36]	; 0x24
 800ea62:	783b      	ldrb	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 809d 	beq.w	800eba4 <_svfiprintf_r+0x1b8>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea74:	9304      	str	r3, [sp, #16]
 800ea76:	9307      	str	r3, [sp, #28]
 800ea78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ea7e:	462f      	mov	r7, r5
 800ea80:	2205      	movs	r2, #5
 800ea82:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ea86:	4850      	ldr	r0, [pc, #320]	; (800ebc8 <_svfiprintf_r+0x1dc>)
 800ea88:	f7f1 fbaa 	bl	80001e0 <memchr>
 800ea8c:	9b04      	ldr	r3, [sp, #16]
 800ea8e:	b9d0      	cbnz	r0, 800eac6 <_svfiprintf_r+0xda>
 800ea90:	06d9      	lsls	r1, r3, #27
 800ea92:	bf44      	itt	mi
 800ea94:	2220      	movmi	r2, #32
 800ea96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea9a:	071a      	lsls	r2, r3, #28
 800ea9c:	bf44      	itt	mi
 800ea9e:	222b      	movmi	r2, #43	; 0x2b
 800eaa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eaa4:	782a      	ldrb	r2, [r5, #0]
 800eaa6:	2a2a      	cmp	r2, #42	; 0x2a
 800eaa8:	d015      	beq.n	800ead6 <_svfiprintf_r+0xea>
 800eaaa:	9a07      	ldr	r2, [sp, #28]
 800eaac:	462f      	mov	r7, r5
 800eaae:	2000      	movs	r0, #0
 800eab0:	250a      	movs	r5, #10
 800eab2:	4639      	mov	r1, r7
 800eab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eab8:	3b30      	subs	r3, #48	; 0x30
 800eaba:	2b09      	cmp	r3, #9
 800eabc:	d94d      	bls.n	800eb5a <_svfiprintf_r+0x16e>
 800eabe:	b1b8      	cbz	r0, 800eaf0 <_svfiprintf_r+0x104>
 800eac0:	e00f      	b.n	800eae2 <_svfiprintf_r+0xf6>
 800eac2:	462f      	mov	r7, r5
 800eac4:	e7b8      	b.n	800ea38 <_svfiprintf_r+0x4c>
 800eac6:	4a40      	ldr	r2, [pc, #256]	; (800ebc8 <_svfiprintf_r+0x1dc>)
 800eac8:	1a80      	subs	r0, r0, r2
 800eaca:	fa0b f000 	lsl.w	r0, fp, r0
 800eace:	4318      	orrs	r0, r3
 800ead0:	9004      	str	r0, [sp, #16]
 800ead2:	463d      	mov	r5, r7
 800ead4:	e7d3      	b.n	800ea7e <_svfiprintf_r+0x92>
 800ead6:	9a03      	ldr	r2, [sp, #12]
 800ead8:	1d11      	adds	r1, r2, #4
 800eada:	6812      	ldr	r2, [r2, #0]
 800eadc:	9103      	str	r1, [sp, #12]
 800eade:	2a00      	cmp	r2, #0
 800eae0:	db01      	blt.n	800eae6 <_svfiprintf_r+0xfa>
 800eae2:	9207      	str	r2, [sp, #28]
 800eae4:	e004      	b.n	800eaf0 <_svfiprintf_r+0x104>
 800eae6:	4252      	negs	r2, r2
 800eae8:	f043 0302 	orr.w	r3, r3, #2
 800eaec:	9207      	str	r2, [sp, #28]
 800eaee:	9304      	str	r3, [sp, #16]
 800eaf0:	783b      	ldrb	r3, [r7, #0]
 800eaf2:	2b2e      	cmp	r3, #46	; 0x2e
 800eaf4:	d10c      	bne.n	800eb10 <_svfiprintf_r+0x124>
 800eaf6:	787b      	ldrb	r3, [r7, #1]
 800eaf8:	2b2a      	cmp	r3, #42	; 0x2a
 800eafa:	d133      	bne.n	800eb64 <_svfiprintf_r+0x178>
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	1d1a      	adds	r2, r3, #4
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	9203      	str	r2, [sp, #12]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bfb8      	it	lt
 800eb08:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb0c:	3702      	adds	r7, #2
 800eb0e:	9305      	str	r3, [sp, #20]
 800eb10:	4d2e      	ldr	r5, [pc, #184]	; (800ebcc <_svfiprintf_r+0x1e0>)
 800eb12:	7839      	ldrb	r1, [r7, #0]
 800eb14:	2203      	movs	r2, #3
 800eb16:	4628      	mov	r0, r5
 800eb18:	f7f1 fb62 	bl	80001e0 <memchr>
 800eb1c:	b138      	cbz	r0, 800eb2e <_svfiprintf_r+0x142>
 800eb1e:	2340      	movs	r3, #64	; 0x40
 800eb20:	1b40      	subs	r0, r0, r5
 800eb22:	fa03 f000 	lsl.w	r0, r3, r0
 800eb26:	9b04      	ldr	r3, [sp, #16]
 800eb28:	4303      	orrs	r3, r0
 800eb2a:	3701      	adds	r7, #1
 800eb2c:	9304      	str	r3, [sp, #16]
 800eb2e:	7839      	ldrb	r1, [r7, #0]
 800eb30:	4827      	ldr	r0, [pc, #156]	; (800ebd0 <_svfiprintf_r+0x1e4>)
 800eb32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb36:	2206      	movs	r2, #6
 800eb38:	1c7e      	adds	r6, r7, #1
 800eb3a:	f7f1 fb51 	bl	80001e0 <memchr>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d038      	beq.n	800ebb4 <_svfiprintf_r+0x1c8>
 800eb42:	4b24      	ldr	r3, [pc, #144]	; (800ebd4 <_svfiprintf_r+0x1e8>)
 800eb44:	bb13      	cbnz	r3, 800eb8c <_svfiprintf_r+0x1a0>
 800eb46:	9b03      	ldr	r3, [sp, #12]
 800eb48:	3307      	adds	r3, #7
 800eb4a:	f023 0307 	bic.w	r3, r3, #7
 800eb4e:	3308      	adds	r3, #8
 800eb50:	9303      	str	r3, [sp, #12]
 800eb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb54:	444b      	add	r3, r9
 800eb56:	9309      	str	r3, [sp, #36]	; 0x24
 800eb58:	e76d      	b.n	800ea36 <_svfiprintf_r+0x4a>
 800eb5a:	fb05 3202 	mla	r2, r5, r2, r3
 800eb5e:	2001      	movs	r0, #1
 800eb60:	460f      	mov	r7, r1
 800eb62:	e7a6      	b.n	800eab2 <_svfiprintf_r+0xc6>
 800eb64:	2300      	movs	r3, #0
 800eb66:	3701      	adds	r7, #1
 800eb68:	9305      	str	r3, [sp, #20]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	250a      	movs	r5, #10
 800eb6e:	4638      	mov	r0, r7
 800eb70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb74:	3a30      	subs	r2, #48	; 0x30
 800eb76:	2a09      	cmp	r2, #9
 800eb78:	d903      	bls.n	800eb82 <_svfiprintf_r+0x196>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0c8      	beq.n	800eb10 <_svfiprintf_r+0x124>
 800eb7e:	9105      	str	r1, [sp, #20]
 800eb80:	e7c6      	b.n	800eb10 <_svfiprintf_r+0x124>
 800eb82:	fb05 2101 	mla	r1, r5, r1, r2
 800eb86:	2301      	movs	r3, #1
 800eb88:	4607      	mov	r7, r0
 800eb8a:	e7f0      	b.n	800eb6e <_svfiprintf_r+0x182>
 800eb8c:	ab03      	add	r3, sp, #12
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	4622      	mov	r2, r4
 800eb92:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <_svfiprintf_r+0x1ec>)
 800eb94:	a904      	add	r1, sp, #16
 800eb96:	4640      	mov	r0, r8
 800eb98:	f7fc f8e4 	bl	800ad64 <_printf_float>
 800eb9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eba0:	4681      	mov	r9, r0
 800eba2:	d1d6      	bne.n	800eb52 <_svfiprintf_r+0x166>
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	065b      	lsls	r3, r3, #25
 800eba8:	f53f af35 	bmi.w	800ea16 <_svfiprintf_r+0x2a>
 800ebac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebae:	b01d      	add	sp, #116	; 0x74
 800ebb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb4:	ab03      	add	r3, sp, #12
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	4622      	mov	r2, r4
 800ebba:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <_svfiprintf_r+0x1ec>)
 800ebbc:	a904      	add	r1, sp, #16
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	f7fc fb86 	bl	800b2d0 <_printf_i>
 800ebc4:	e7ea      	b.n	800eb9c <_svfiprintf_r+0x1b0>
 800ebc6:	bf00      	nop
 800ebc8:	0800f344 	.word	0x0800f344
 800ebcc:	0800f34a 	.word	0x0800f34a
 800ebd0:	0800f34e 	.word	0x0800f34e
 800ebd4:	0800ad65 	.word	0x0800ad65
 800ebd8:	0800e939 	.word	0x0800e939

0800ebdc <__sfputc_r>:
 800ebdc:	6893      	ldr	r3, [r2, #8]
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	b410      	push	{r4}
 800ebe4:	6093      	str	r3, [r2, #8]
 800ebe6:	da08      	bge.n	800ebfa <__sfputc_r+0x1e>
 800ebe8:	6994      	ldr	r4, [r2, #24]
 800ebea:	42a3      	cmp	r3, r4
 800ebec:	db01      	blt.n	800ebf2 <__sfputc_r+0x16>
 800ebee:	290a      	cmp	r1, #10
 800ebf0:	d103      	bne.n	800ebfa <__sfputc_r+0x1e>
 800ebf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebf6:	f7fd bdb1 	b.w	800c75c <__swbuf_r>
 800ebfa:	6813      	ldr	r3, [r2, #0]
 800ebfc:	1c58      	adds	r0, r3, #1
 800ebfe:	6010      	str	r0, [r2, #0]
 800ec00:	7019      	strb	r1, [r3, #0]
 800ec02:	4608      	mov	r0, r1
 800ec04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <__sfputs_r>:
 800ec0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0c:	4606      	mov	r6, r0
 800ec0e:	460f      	mov	r7, r1
 800ec10:	4614      	mov	r4, r2
 800ec12:	18d5      	adds	r5, r2, r3
 800ec14:	42ac      	cmp	r4, r5
 800ec16:	d101      	bne.n	800ec1c <__sfputs_r+0x12>
 800ec18:	2000      	movs	r0, #0
 800ec1a:	e007      	b.n	800ec2c <__sfputs_r+0x22>
 800ec1c:	463a      	mov	r2, r7
 800ec1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec22:	4630      	mov	r0, r6
 800ec24:	f7ff ffda 	bl	800ebdc <__sfputc_r>
 800ec28:	1c43      	adds	r3, r0, #1
 800ec2a:	d1f3      	bne.n	800ec14 <__sfputs_r+0xa>
 800ec2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec30 <_vfiprintf_r>:
 800ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec34:	460c      	mov	r4, r1
 800ec36:	b09d      	sub	sp, #116	; 0x74
 800ec38:	4617      	mov	r7, r2
 800ec3a:	461d      	mov	r5, r3
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	b118      	cbz	r0, 800ec48 <_vfiprintf_r+0x18>
 800ec40:	6983      	ldr	r3, [r0, #24]
 800ec42:	b90b      	cbnz	r3, 800ec48 <_vfiprintf_r+0x18>
 800ec44:	f7fe fd80 	bl	800d748 <__sinit>
 800ec48:	4b7c      	ldr	r3, [pc, #496]	; (800ee3c <_vfiprintf_r+0x20c>)
 800ec4a:	429c      	cmp	r4, r3
 800ec4c:	d158      	bne.n	800ed00 <_vfiprintf_r+0xd0>
 800ec4e:	6874      	ldr	r4, [r6, #4]
 800ec50:	89a3      	ldrh	r3, [r4, #12]
 800ec52:	0718      	lsls	r0, r3, #28
 800ec54:	d55e      	bpl.n	800ed14 <_vfiprintf_r+0xe4>
 800ec56:	6923      	ldr	r3, [r4, #16]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d05b      	beq.n	800ed14 <_vfiprintf_r+0xe4>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec60:	2320      	movs	r3, #32
 800ec62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec66:	2330      	movs	r3, #48	; 0x30
 800ec68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec6c:	9503      	str	r5, [sp, #12]
 800ec6e:	f04f 0b01 	mov.w	fp, #1
 800ec72:	46b8      	mov	r8, r7
 800ec74:	4645      	mov	r5, r8
 800ec76:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ec7a:	b10b      	cbz	r3, 800ec80 <_vfiprintf_r+0x50>
 800ec7c:	2b25      	cmp	r3, #37	; 0x25
 800ec7e:	d154      	bne.n	800ed2a <_vfiprintf_r+0xfa>
 800ec80:	ebb8 0a07 	subs.w	sl, r8, r7
 800ec84:	d00b      	beq.n	800ec9e <_vfiprintf_r+0x6e>
 800ec86:	4653      	mov	r3, sl
 800ec88:	463a      	mov	r2, r7
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f7ff ffbc 	bl	800ec0a <__sfputs_r>
 800ec92:	3001      	adds	r0, #1
 800ec94:	f000 80c2 	beq.w	800ee1c <_vfiprintf_r+0x1ec>
 800ec98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec9a:	4453      	add	r3, sl
 800ec9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec9e:	f898 3000 	ldrb.w	r3, [r8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f000 80ba 	beq.w	800ee1c <_vfiprintf_r+0x1ec>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ecae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	9307      	str	r3, [sp, #28]
 800ecb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecba:	931a      	str	r3, [sp, #104]	; 0x68
 800ecbc:	46a8      	mov	r8, r5
 800ecbe:	2205      	movs	r2, #5
 800ecc0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ecc4:	485e      	ldr	r0, [pc, #376]	; (800ee40 <_vfiprintf_r+0x210>)
 800ecc6:	f7f1 fa8b 	bl	80001e0 <memchr>
 800ecca:	9b04      	ldr	r3, [sp, #16]
 800eccc:	bb78      	cbnz	r0, 800ed2e <_vfiprintf_r+0xfe>
 800ecce:	06d9      	lsls	r1, r3, #27
 800ecd0:	bf44      	itt	mi
 800ecd2:	2220      	movmi	r2, #32
 800ecd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ecd8:	071a      	lsls	r2, r3, #28
 800ecda:	bf44      	itt	mi
 800ecdc:	222b      	movmi	r2, #43	; 0x2b
 800ecde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ece2:	782a      	ldrb	r2, [r5, #0]
 800ece4:	2a2a      	cmp	r2, #42	; 0x2a
 800ece6:	d02a      	beq.n	800ed3e <_vfiprintf_r+0x10e>
 800ece8:	9a07      	ldr	r2, [sp, #28]
 800ecea:	46a8      	mov	r8, r5
 800ecec:	2000      	movs	r0, #0
 800ecee:	250a      	movs	r5, #10
 800ecf0:	4641      	mov	r1, r8
 800ecf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecf6:	3b30      	subs	r3, #48	; 0x30
 800ecf8:	2b09      	cmp	r3, #9
 800ecfa:	d969      	bls.n	800edd0 <_vfiprintf_r+0x1a0>
 800ecfc:	b360      	cbz	r0, 800ed58 <_vfiprintf_r+0x128>
 800ecfe:	e024      	b.n	800ed4a <_vfiprintf_r+0x11a>
 800ed00:	4b50      	ldr	r3, [pc, #320]	; (800ee44 <_vfiprintf_r+0x214>)
 800ed02:	429c      	cmp	r4, r3
 800ed04:	d101      	bne.n	800ed0a <_vfiprintf_r+0xda>
 800ed06:	68b4      	ldr	r4, [r6, #8]
 800ed08:	e7a2      	b.n	800ec50 <_vfiprintf_r+0x20>
 800ed0a:	4b4f      	ldr	r3, [pc, #316]	; (800ee48 <_vfiprintf_r+0x218>)
 800ed0c:	429c      	cmp	r4, r3
 800ed0e:	bf08      	it	eq
 800ed10:	68f4      	ldreq	r4, [r6, #12]
 800ed12:	e79d      	b.n	800ec50 <_vfiprintf_r+0x20>
 800ed14:	4621      	mov	r1, r4
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7fd fd72 	bl	800c800 <__swsetup_r>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d09d      	beq.n	800ec5c <_vfiprintf_r+0x2c>
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	b01d      	add	sp, #116	; 0x74
 800ed26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2a:	46a8      	mov	r8, r5
 800ed2c:	e7a2      	b.n	800ec74 <_vfiprintf_r+0x44>
 800ed2e:	4a44      	ldr	r2, [pc, #272]	; (800ee40 <_vfiprintf_r+0x210>)
 800ed30:	1a80      	subs	r0, r0, r2
 800ed32:	fa0b f000 	lsl.w	r0, fp, r0
 800ed36:	4318      	orrs	r0, r3
 800ed38:	9004      	str	r0, [sp, #16]
 800ed3a:	4645      	mov	r5, r8
 800ed3c:	e7be      	b.n	800ecbc <_vfiprintf_r+0x8c>
 800ed3e:	9a03      	ldr	r2, [sp, #12]
 800ed40:	1d11      	adds	r1, r2, #4
 800ed42:	6812      	ldr	r2, [r2, #0]
 800ed44:	9103      	str	r1, [sp, #12]
 800ed46:	2a00      	cmp	r2, #0
 800ed48:	db01      	blt.n	800ed4e <_vfiprintf_r+0x11e>
 800ed4a:	9207      	str	r2, [sp, #28]
 800ed4c:	e004      	b.n	800ed58 <_vfiprintf_r+0x128>
 800ed4e:	4252      	negs	r2, r2
 800ed50:	f043 0302 	orr.w	r3, r3, #2
 800ed54:	9207      	str	r2, [sp, #28]
 800ed56:	9304      	str	r3, [sp, #16]
 800ed58:	f898 3000 	ldrb.w	r3, [r8]
 800ed5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed5e:	d10e      	bne.n	800ed7e <_vfiprintf_r+0x14e>
 800ed60:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ed64:	2b2a      	cmp	r3, #42	; 0x2a
 800ed66:	d138      	bne.n	800edda <_vfiprintf_r+0x1aa>
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	1d1a      	adds	r2, r3, #4
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	9203      	str	r2, [sp, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	bfb8      	it	lt
 800ed74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed78:	f108 0802 	add.w	r8, r8, #2
 800ed7c:	9305      	str	r3, [sp, #20]
 800ed7e:	4d33      	ldr	r5, [pc, #204]	; (800ee4c <_vfiprintf_r+0x21c>)
 800ed80:	f898 1000 	ldrb.w	r1, [r8]
 800ed84:	2203      	movs	r2, #3
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7f1 fa2a 	bl	80001e0 <memchr>
 800ed8c:	b140      	cbz	r0, 800eda0 <_vfiprintf_r+0x170>
 800ed8e:	2340      	movs	r3, #64	; 0x40
 800ed90:	1b40      	subs	r0, r0, r5
 800ed92:	fa03 f000 	lsl.w	r0, r3, r0
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	4303      	orrs	r3, r0
 800ed9a:	f108 0801 	add.w	r8, r8, #1
 800ed9e:	9304      	str	r3, [sp, #16]
 800eda0:	f898 1000 	ldrb.w	r1, [r8]
 800eda4:	482a      	ldr	r0, [pc, #168]	; (800ee50 <_vfiprintf_r+0x220>)
 800eda6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edaa:	2206      	movs	r2, #6
 800edac:	f108 0701 	add.w	r7, r8, #1
 800edb0:	f7f1 fa16 	bl	80001e0 <memchr>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d037      	beq.n	800ee28 <_vfiprintf_r+0x1f8>
 800edb8:	4b26      	ldr	r3, [pc, #152]	; (800ee54 <_vfiprintf_r+0x224>)
 800edba:	bb1b      	cbnz	r3, 800ee04 <_vfiprintf_r+0x1d4>
 800edbc:	9b03      	ldr	r3, [sp, #12]
 800edbe:	3307      	adds	r3, #7
 800edc0:	f023 0307 	bic.w	r3, r3, #7
 800edc4:	3308      	adds	r3, #8
 800edc6:	9303      	str	r3, [sp, #12]
 800edc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edca:	444b      	add	r3, r9
 800edcc:	9309      	str	r3, [sp, #36]	; 0x24
 800edce:	e750      	b.n	800ec72 <_vfiprintf_r+0x42>
 800edd0:	fb05 3202 	mla	r2, r5, r2, r3
 800edd4:	2001      	movs	r0, #1
 800edd6:	4688      	mov	r8, r1
 800edd8:	e78a      	b.n	800ecf0 <_vfiprintf_r+0xc0>
 800edda:	2300      	movs	r3, #0
 800eddc:	f108 0801 	add.w	r8, r8, #1
 800ede0:	9305      	str	r3, [sp, #20]
 800ede2:	4619      	mov	r1, r3
 800ede4:	250a      	movs	r5, #10
 800ede6:	4640      	mov	r0, r8
 800ede8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edec:	3a30      	subs	r2, #48	; 0x30
 800edee:	2a09      	cmp	r2, #9
 800edf0:	d903      	bls.n	800edfa <_vfiprintf_r+0x1ca>
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d0c3      	beq.n	800ed7e <_vfiprintf_r+0x14e>
 800edf6:	9105      	str	r1, [sp, #20]
 800edf8:	e7c1      	b.n	800ed7e <_vfiprintf_r+0x14e>
 800edfa:	fb05 2101 	mla	r1, r5, r1, r2
 800edfe:	2301      	movs	r3, #1
 800ee00:	4680      	mov	r8, r0
 800ee02:	e7f0      	b.n	800ede6 <_vfiprintf_r+0x1b6>
 800ee04:	ab03      	add	r3, sp, #12
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	4622      	mov	r2, r4
 800ee0a:	4b13      	ldr	r3, [pc, #76]	; (800ee58 <_vfiprintf_r+0x228>)
 800ee0c:	a904      	add	r1, sp, #16
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f7fb ffa8 	bl	800ad64 <_printf_float>
 800ee14:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ee18:	4681      	mov	r9, r0
 800ee1a:	d1d5      	bne.n	800edc8 <_vfiprintf_r+0x198>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	065b      	lsls	r3, r3, #25
 800ee20:	f53f af7e 	bmi.w	800ed20 <_vfiprintf_r+0xf0>
 800ee24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee26:	e77d      	b.n	800ed24 <_vfiprintf_r+0xf4>
 800ee28:	ab03      	add	r3, sp, #12
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4622      	mov	r2, r4
 800ee2e:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <_vfiprintf_r+0x228>)
 800ee30:	a904      	add	r1, sp, #16
 800ee32:	4630      	mov	r0, r6
 800ee34:	f7fc fa4c 	bl	800b2d0 <_printf_i>
 800ee38:	e7ec      	b.n	800ee14 <_vfiprintf_r+0x1e4>
 800ee3a:	bf00      	nop
 800ee3c:	0800f1f8 	.word	0x0800f1f8
 800ee40:	0800f344 	.word	0x0800f344
 800ee44:	0800f218 	.word	0x0800f218
 800ee48:	0800f1d8 	.word	0x0800f1d8
 800ee4c:	0800f34a 	.word	0x0800f34a
 800ee50:	0800f34e 	.word	0x0800f34e
 800ee54:	0800ad65 	.word	0x0800ad65
 800ee58:	0800ec0b 	.word	0x0800ec0b

0800ee5c <_sbrk_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4c06      	ldr	r4, [pc, #24]	; (800ee78 <_sbrk_r+0x1c>)
 800ee60:	2300      	movs	r3, #0
 800ee62:	4605      	mov	r5, r0
 800ee64:	4608      	mov	r0, r1
 800ee66:	6023      	str	r3, [r4, #0]
 800ee68:	f7f7 fb32 	bl	80064d0 <_sbrk>
 800ee6c:	1c43      	adds	r3, r0, #1
 800ee6e:	d102      	bne.n	800ee76 <_sbrk_r+0x1a>
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	b103      	cbz	r3, 800ee76 <_sbrk_r+0x1a>
 800ee74:	602b      	str	r3, [r5, #0]
 800ee76:	bd38      	pop	{r3, r4, r5, pc}
 800ee78:	2001f8c0 	.word	0x2001f8c0

0800ee7c <__sread>:
 800ee7c:	b510      	push	{r4, lr}
 800ee7e:	460c      	mov	r4, r1
 800ee80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee84:	f000 f8f4 	bl	800f070 <_read_r>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	bfab      	itete	ge
 800ee8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee90:	181b      	addge	r3, r3, r0
 800ee92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee96:	bfac      	ite	ge
 800ee98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee9a:	81a3      	strhlt	r3, [r4, #12]
 800ee9c:	bd10      	pop	{r4, pc}

0800ee9e <__swrite>:
 800ee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea2:	461f      	mov	r7, r3
 800eea4:	898b      	ldrh	r3, [r1, #12]
 800eea6:	05db      	lsls	r3, r3, #23
 800eea8:	4605      	mov	r5, r0
 800eeaa:	460c      	mov	r4, r1
 800eeac:	4616      	mov	r6, r2
 800eeae:	d505      	bpl.n	800eebc <__swrite+0x1e>
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeb8:	f000 f886 	bl	800efc8 <_lseek_r>
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eec6:	81a3      	strh	r3, [r4, #12]
 800eec8:	4632      	mov	r2, r6
 800eeca:	463b      	mov	r3, r7
 800eecc:	4628      	mov	r0, r5
 800eece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eed2:	f000 b835 	b.w	800ef40 <_write_r>

0800eed6 <__sseek>:
 800eed6:	b510      	push	{r4, lr}
 800eed8:	460c      	mov	r4, r1
 800eeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eede:	f000 f873 	bl	800efc8 <_lseek_r>
 800eee2:	1c43      	adds	r3, r0, #1
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	bf15      	itete	ne
 800eee8:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eef2:	81a3      	strheq	r3, [r4, #12]
 800eef4:	bf18      	it	ne
 800eef6:	81a3      	strhne	r3, [r4, #12]
 800eef8:	bd10      	pop	{r4, pc}

0800eefa <__sclose>:
 800eefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eefe:	f000 b831 	b.w	800ef64 <_close_r>

0800ef02 <strncmp>:
 800ef02:	b510      	push	{r4, lr}
 800ef04:	b16a      	cbz	r2, 800ef22 <strncmp+0x20>
 800ef06:	3901      	subs	r1, #1
 800ef08:	1884      	adds	r4, r0, r2
 800ef0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ef0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d103      	bne.n	800ef1e <strncmp+0x1c>
 800ef16:	42a0      	cmp	r0, r4
 800ef18:	d001      	beq.n	800ef1e <strncmp+0x1c>
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1f5      	bne.n	800ef0a <strncmp+0x8>
 800ef1e:	1a98      	subs	r0, r3, r2
 800ef20:	bd10      	pop	{r4, pc}
 800ef22:	4610      	mov	r0, r2
 800ef24:	e7fc      	b.n	800ef20 <strncmp+0x1e>

0800ef26 <__ascii_wctomb>:
 800ef26:	b149      	cbz	r1, 800ef3c <__ascii_wctomb+0x16>
 800ef28:	2aff      	cmp	r2, #255	; 0xff
 800ef2a:	bf85      	ittet	hi
 800ef2c:	238a      	movhi	r3, #138	; 0x8a
 800ef2e:	6003      	strhi	r3, [r0, #0]
 800ef30:	700a      	strbls	r2, [r1, #0]
 800ef32:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef36:	bf98      	it	ls
 800ef38:	2001      	movls	r0, #1
 800ef3a:	4770      	bx	lr
 800ef3c:	4608      	mov	r0, r1
 800ef3e:	4770      	bx	lr

0800ef40 <_write_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4c07      	ldr	r4, [pc, #28]	; (800ef60 <_write_r+0x20>)
 800ef44:	4605      	mov	r5, r0
 800ef46:	4608      	mov	r0, r1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	6022      	str	r2, [r4, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f7f7 fa6d 	bl	800642e <_write>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_write_r+0x1e>
 800ef58:	6823      	ldr	r3, [r4, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_write_r+0x1e>
 800ef5c:	602b      	str	r3, [r5, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	2001f8c0 	.word	0x2001f8c0

0800ef64 <_close_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4c06      	ldr	r4, [pc, #24]	; (800ef80 <_close_r+0x1c>)
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	6023      	str	r3, [r4, #0]
 800ef70:	f7f7 fa79 	bl	8006466 <_close>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	d102      	bne.n	800ef7e <_close_r+0x1a>
 800ef78:	6823      	ldr	r3, [r4, #0]
 800ef7a:	b103      	cbz	r3, 800ef7e <_close_r+0x1a>
 800ef7c:	602b      	str	r3, [r5, #0]
 800ef7e:	bd38      	pop	{r3, r4, r5, pc}
 800ef80:	2001f8c0 	.word	0x2001f8c0

0800ef84 <_fstat_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4c07      	ldr	r4, [pc, #28]	; (800efa4 <_fstat_r+0x20>)
 800ef88:	2300      	movs	r3, #0
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	4608      	mov	r0, r1
 800ef8e:	4611      	mov	r1, r2
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	f7f7 fa74 	bl	800647e <_fstat>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d102      	bne.n	800efa0 <_fstat_r+0x1c>
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	b103      	cbz	r3, 800efa0 <_fstat_r+0x1c>
 800ef9e:	602b      	str	r3, [r5, #0]
 800efa0:	bd38      	pop	{r3, r4, r5, pc}
 800efa2:	bf00      	nop
 800efa4:	2001f8c0 	.word	0x2001f8c0

0800efa8 <_isatty_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4c06      	ldr	r4, [pc, #24]	; (800efc4 <_isatty_r+0x1c>)
 800efac:	2300      	movs	r3, #0
 800efae:	4605      	mov	r5, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	6023      	str	r3, [r4, #0]
 800efb4:	f7f7 fa73 	bl	800649e <_isatty>
 800efb8:	1c43      	adds	r3, r0, #1
 800efba:	d102      	bne.n	800efc2 <_isatty_r+0x1a>
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	b103      	cbz	r3, 800efc2 <_isatty_r+0x1a>
 800efc0:	602b      	str	r3, [r5, #0]
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	2001f8c0 	.word	0x2001f8c0

0800efc8 <_lseek_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4c07      	ldr	r4, [pc, #28]	; (800efe8 <_lseek_r+0x20>)
 800efcc:	4605      	mov	r5, r0
 800efce:	4608      	mov	r0, r1
 800efd0:	4611      	mov	r1, r2
 800efd2:	2200      	movs	r2, #0
 800efd4:	6022      	str	r2, [r4, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	f7f7 fa6c 	bl	80064b4 <_lseek>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d102      	bne.n	800efe6 <_lseek_r+0x1e>
 800efe0:	6823      	ldr	r3, [r4, #0]
 800efe2:	b103      	cbz	r3, 800efe6 <_lseek_r+0x1e>
 800efe4:	602b      	str	r3, [r5, #0]
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	2001f8c0 	.word	0x2001f8c0

0800efec <memmove>:
 800efec:	4288      	cmp	r0, r1
 800efee:	b510      	push	{r4, lr}
 800eff0:	eb01 0302 	add.w	r3, r1, r2
 800eff4:	d807      	bhi.n	800f006 <memmove+0x1a>
 800eff6:	1e42      	subs	r2, r0, #1
 800eff8:	4299      	cmp	r1, r3
 800effa:	d00a      	beq.n	800f012 <memmove+0x26>
 800effc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f000:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f004:	e7f8      	b.n	800eff8 <memmove+0xc>
 800f006:	4283      	cmp	r3, r0
 800f008:	d9f5      	bls.n	800eff6 <memmove+0xa>
 800f00a:	1881      	adds	r1, r0, r2
 800f00c:	1ad2      	subs	r2, r2, r3
 800f00e:	42d3      	cmn	r3, r2
 800f010:	d100      	bne.n	800f014 <memmove+0x28>
 800f012:	bd10      	pop	{r4, pc}
 800f014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f018:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f01c:	e7f7      	b.n	800f00e <memmove+0x22>

0800f01e <__malloc_lock>:
 800f01e:	4770      	bx	lr

0800f020 <__malloc_unlock>:
 800f020:	4770      	bx	lr

0800f022 <_realloc_r>:
 800f022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f024:	4607      	mov	r7, r0
 800f026:	4614      	mov	r4, r2
 800f028:	460e      	mov	r6, r1
 800f02a:	b921      	cbnz	r1, 800f036 <_realloc_r+0x14>
 800f02c:	4611      	mov	r1, r2
 800f02e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f032:	f7ff bc27 	b.w	800e884 <_malloc_r>
 800f036:	b922      	cbnz	r2, 800f042 <_realloc_r+0x20>
 800f038:	f7ff fbd6 	bl	800e7e8 <_free_r>
 800f03c:	4625      	mov	r5, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f042:	f000 f827 	bl	800f094 <_malloc_usable_size_r>
 800f046:	42a0      	cmp	r0, r4
 800f048:	d20f      	bcs.n	800f06a <_realloc_r+0x48>
 800f04a:	4621      	mov	r1, r4
 800f04c:	4638      	mov	r0, r7
 800f04e:	f7ff fc19 	bl	800e884 <_malloc_r>
 800f052:	4605      	mov	r5, r0
 800f054:	2800      	cmp	r0, #0
 800f056:	d0f2      	beq.n	800f03e <_realloc_r+0x1c>
 800f058:	4631      	mov	r1, r6
 800f05a:	4622      	mov	r2, r4
 800f05c:	f7fb fdda 	bl	800ac14 <memcpy>
 800f060:	4631      	mov	r1, r6
 800f062:	4638      	mov	r0, r7
 800f064:	f7ff fbc0 	bl	800e7e8 <_free_r>
 800f068:	e7e9      	b.n	800f03e <_realloc_r+0x1c>
 800f06a:	4635      	mov	r5, r6
 800f06c:	e7e7      	b.n	800f03e <_realloc_r+0x1c>
	...

0800f070 <_read_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4c07      	ldr	r4, [pc, #28]	; (800f090 <_read_r+0x20>)
 800f074:	4605      	mov	r5, r0
 800f076:	4608      	mov	r0, r1
 800f078:	4611      	mov	r1, r2
 800f07a:	2200      	movs	r2, #0
 800f07c:	6022      	str	r2, [r4, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	f7f7 f9b8 	bl	80063f4 <_read>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_read_r+0x1e>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_read_r+0x1e>
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	2001f8c0 	.word	0x2001f8c0

0800f094 <_malloc_usable_size_r>:
 800f094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f098:	1f18      	subs	r0, r3, #4
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	bfbc      	itt	lt
 800f09e:	580b      	ldrlt	r3, [r1, r0]
 800f0a0:	18c0      	addlt	r0, r0, r3
 800f0a2:	4770      	bx	lr

0800f0a4 <_init>:
 800f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a6:	bf00      	nop
 800f0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0aa:	bc08      	pop	{r3}
 800f0ac:	469e      	mov	lr, r3
 800f0ae:	4770      	bx	lr

0800f0b0 <_fini>:
 800f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b2:	bf00      	nop
 800f0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0b6:	bc08      	pop	{r3}
 800f0b8:	469e      	mov	lr, r3
 800f0ba:	4770      	bx	lr
